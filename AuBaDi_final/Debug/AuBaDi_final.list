
AuBaDi_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a11c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800a2b4  0800a2b4  0001a2b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a2ec  0800a2ec  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a2ec  0800a2ec  0001a2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a2f4  0800a2f4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a2f4  0800a2f4  0001a2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a2f8  0800a2f8  0001a2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a2fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d5c  20000090  0800a38c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  20000dec  0800a38c  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002643f  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d83  00000000  00000000  000464ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001718  00000000  00000000  0004b288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001520  00000000  00000000  0004c9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000073b3  00000000  00000000  0004dec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018333  00000000  00000000  00055273  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00094cd8  00000000  00000000  0006d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010227e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006048  00000000  00000000  001022fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a29c 	.word	0x0800a29c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a29c 	.word	0x0800a29c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_I2S_TxCpltCallback+0x20>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d101      	bne.n	80004ee <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 80004ea:	f000 fdd5 	bl	8001098 <audioI2S_fullTransfer_Callback>
  }
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40003c00 	.word	0x40003c00

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f000 fe00 	bl	8001104 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f818 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fa26 	bl	8000958 <MX_GPIO_Init>
  MX_DMA_Init();
 800050c:	f000 fa04 	bl	8000918 <MX_DMA_Init>
  MX_I2C1_Init();
 8000510:	f000 f896 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000514:	f000 f8f0 	bl	80006f8 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000518:	f009 fa7c 	bl	8009a14 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800051c:	f006 fa1c 	bl	8006958 <MX_FATFS_Init>
  MX_I2C2_Init();
 8000520:	f000 f8bc 	bl	800069c <MX_I2C2_Init>
  MX_TIM4_Init();
 8000524:	f000 f916 	bl	8000754 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000528:	f000 f962 	bl	80007f0 <MX_TIM5_Init>
  MX_TIM10_Init();
 800052c:	f000 f9d0 	bl	80008d0 <MX_TIM10_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000530:	f009 fa96 	bl	8009a60 <MX_USB_HOST_Process>
 8000534:	e7fc      	b.n	8000530 <main+0x34>
	...

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09a      	sub	sp, #104	; 0x68
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f009 fde5 	bl	800a116 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800055c:	f107 030c 	add.w	r3, r7, #12
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
 800056a:	611a      	str	r2, [r3, #16]
 800056c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	4b31      	ldr	r3, [pc, #196]	; (8000638 <SystemClock_Config+0x100>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	4a30      	ldr	r2, [pc, #192]	; (8000638 <SystemClock_Config+0x100>)
 8000578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800057c:	6413      	str	r3, [r2, #64]	; 0x40
 800057e:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <SystemClock_Config+0x100>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000586:	60bb      	str	r3, [r7, #8]
 8000588:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b2b      	ldr	r3, [pc, #172]	; (800063c <SystemClock_Config+0x104>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a2a      	ldr	r2, [pc, #168]	; (800063c <SystemClock_Config+0x104>)
 8000594:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000598:	6013      	str	r3, [r2, #0]
 800059a:	4b28      	ldr	r3, [pc, #160]	; (800063c <SystemClock_Config+0x104>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005be:	2348      	movs	r3, #72	; 0x48
 80005c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c6:	2303      	movs	r3, #3
 80005c8:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ce:	4618      	mov	r0, r3
 80005d0:	f003 fea4 	bl	800431c <HAL_RCC_OscConfig>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005da:	f000 faa9 	bl	8000b30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005de:	230f      	movs	r3, #15
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e2:	2302      	movs	r3, #2
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f8fe 	bl	80047fc <HAL_RCC_ClockConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000606:	f000 fa93 	bl	8000b30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800060a:	2301      	movs	r3, #1
 800060c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 288;
 800060e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000612:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8000618:	2306      	movs	r3, #6
 800061a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fac9 	bl	8004bb8 <HAL_RCCEx_PeriphCLKConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800062c:	f000 fa80 	bl	8000b30 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3768      	adds	r7, #104	; 0x68
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	; (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	; (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	; (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	; (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	; (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	; (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f003 f87f 	bl	8003780 <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 fa52 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000110 	.word	0x20000110
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_I2C2_Init+0x50>)
 80006a2:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <MX_I2C2_Init+0x54>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_I2C2_Init+0x50>)
 80006a8:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <MX_I2C2_Init+0x58>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_I2C2_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_I2C2_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_I2C2_Init+0x50>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <MX_I2C2_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_I2C2_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <MX_I2C2_Init+0x50>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_I2C2_Init+0x50>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <MX_I2C2_Init+0x50>)
 80006da:	f003 f851 	bl	8003780 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e4:	f000 fa24 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	200001a4 	.word	0x200001a4
 80006f0:	40005800 	.word	0x40005800
 80006f4:	000186a0 	.word	0x000186a0

080006f8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006fc:	4b13      	ldr	r3, [pc, #76]	; (800074c <MX_I2S3_Init+0x54>)
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <MX_I2S3_Init+0x58>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2S3_Init+0x54>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_I2S3_Init+0x54>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000710:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2S3_Init+0x54>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <MX_I2S3_Init+0x54>)
 8000718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800071c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_I2S3_Init+0x54>)
 8000720:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000724:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2S3_Init+0x54>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2S3_Init+0x54>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2S3_Init+0x54>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2S3_Init+0x54>)
 800073a:	f003 f959 	bl	80039f0 <HAL_I2S_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000744:	f000 f9f4 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000298 	.word	0x20000298
 8000750:	40003c00 	.word	0x40003c00

08000754 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000768:	463b      	mov	r3, r7
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <MX_TIM4_Init+0x98>)
 8000774:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM4_PRESCALER;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000778:	2263      	movs	r2, #99	; 0x63
 800077a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <MX_TIM4_Init+0x94>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_PERIOD;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000784:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000788:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078a:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <MX_TIM4_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_TIM4_Init+0x94>)
 8000798:	f004 fb5c 	bl	8004e54 <HAL_TIM_Base_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f9c5 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007ac:	f107 0308 	add.w	r3, r7, #8
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_TIM4_Init+0x94>)
 80007b4:	f004 fd72 	bl	800529c <HAL_TIM_ConfigClockSource>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80007be:	f000 f9b7 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_TIM4_Init+0x94>)
 80007d0:	f005 f8f4 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80007da:	f000 f9a9 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3718      	adds	r7, #24
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000d0 	.word	0x200000d0
 80007ec:	40000800 	.word	0x40000800

080007f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]
 8000810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000812:	4b2d      	ldr	r3, [pc, #180]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000814:	4a2d      	ldr	r2, [pc, #180]	; (80008cc <MX_TIM5_Init+0xdc>)
 8000816:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = TIM5_PRESCALER;
 8000818:	4b2b      	ldr	r3, [pc, #172]	; (80008c8 <MX_TIM5_Init+0xd8>)
 800081a:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800081e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = TIM5_PERIOD;
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000828:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 800082c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b26      	ldr	r3, [pc, #152]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b24      	ldr	r3, [pc, #144]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800083a:	4823      	ldr	r0, [pc, #140]	; (80008c8 <MX_TIM5_Init+0xd8>)
 800083c:	f004 fb35 	bl	8004eaa <HAL_TIM_PWM_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000846:	f000 f973 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000852:	f107 0320 	add.w	r3, r7, #32
 8000856:	4619      	mov	r1, r3
 8000858:	481b      	ldr	r0, [pc, #108]	; (80008c8 <MX_TIM5_Init+0xd8>)
 800085a:	f005 f8af 	bl	80059bc <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000864:	f000 f964 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	; 0x60
 800086a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2204      	movs	r2, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000880:	f004 fc46 	bl	8005110 <HAL_TIM_PWM_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800088a:	f000 f951 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800088e:	1d3b      	adds	r3, r7, #4
 8000890:	2208      	movs	r2, #8
 8000892:	4619      	mov	r1, r3
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <MX_TIM5_Init+0xd8>)
 8000896:	f004 fc3b 	bl	8005110 <HAL_TIM_PWM_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 80008a0:	f000 f946 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	220c      	movs	r2, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	4807      	ldr	r0, [pc, #28]	; (80008c8 <MX_TIM5_Init+0xd8>)
 80008ac:	f004 fc30 	bl	8005110 <HAL_TIM_PWM_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 80008b6:	f000 f93b 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80008ba:	4803      	ldr	r0, [pc, #12]	; (80008c8 <MX_TIM5_Init+0xd8>)
 80008bc:	f000 fb04 	bl	8000ec8 <HAL_TIM_MspPostInit>

}
 80008c0:	bf00      	nop
 80008c2:	3728      	adds	r7, #40	; 0x28
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001f8 	.word	0x200001f8
 80008cc:	40000c00 	.word	0x40000c00

080008d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_TIM10_Init+0x40>)
 80008d6:	4a0f      	ldr	r2, [pc, #60]	; (8000914 <MX_TIM10_Init+0x44>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_PRESCALER;
 80008da:	4b0d      	ldr	r3, [pc, #52]	; (8000910 <MX_TIM10_Init+0x40>)
 80008dc:	f240 3252 	movw	r2, #850	; 0x352
 80008e0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_TIM10_Init+0x40>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_PERIOD;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_TIM10_Init+0x40>)
 80008ea:	f240 3252 	movw	r2, #850	; 0x352
 80008ee:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b07      	ldr	r3, [pc, #28]	; (8000910 <MX_TIM10_Init+0x40>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_TIM10_Init+0x40>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_TIM10_Init+0x40>)
 80008fe:	f004 faa9 	bl	8004e54 <HAL_TIM_Base_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000908:	f000 f912 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20000164 	.word	0x20000164
 8000914:	40014400 	.word	0x40014400

08000918 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_DMA_Init+0x3c>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <MX_DMA_Init+0x3c>)
 8000928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_DMA_Init+0x3c>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000936:	607b      	str	r3, [r7, #4]
 8000938:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2010      	movs	r0, #16
 8000940:	f000 fd4f 	bl	80013e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000944:	2010      	movs	r0, #16
 8000946:	f000 fd68 	bl	800141a <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
 800096a:	60da      	str	r2, [r3, #12]
 800096c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	4b69      	ldr	r3, [pc, #420]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a68      	ldr	r2, [pc, #416]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b66      	ldr	r3, [pc, #408]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0310 	and.w	r3, r3, #16
 8000986:	61bb      	str	r3, [r7, #24]
 8000988:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
 800098e:	4b62      	ldr	r3, [pc, #392]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a61      	ldr	r2, [pc, #388]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b5f      	ldr	r3, [pc, #380]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	4b5b      	ldr	r3, [pc, #364]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a5a      	ldr	r2, [pc, #360]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009b0:	f043 0304 	orr.w	r3, r3, #4
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f003 0304 	and.w	r3, r3, #4
 80009be:	613b      	str	r3, [r7, #16]
 80009c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b54      	ldr	r3, [pc, #336]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a53      	ldr	r2, [pc, #332]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b51      	ldr	r3, [pc, #324]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	4b4d      	ldr	r3, [pc, #308]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a4c      	ldr	r2, [pc, #304]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b4a      	ldr	r3, [pc, #296]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	4b46      	ldr	r3, [pc, #280]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	4a45      	ldr	r2, [pc, #276]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a04:	f043 0308 	orr.w	r3, r3, #8
 8000a08:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0a:	4b43      	ldr	r3, [pc, #268]	; (8000b18 <MX_GPIO_Init+0x1c0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	f003 0308 	and.w	r3, r3, #8
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_power_Pin|dir_Pin|step_Pin, GPIO_PIN_RESET);
 8000a16:	2200      	movs	r2, #0
 8000a18:	f240 1141 	movw	r1, #321	; 0x141
 8000a1c:	483f      	ldr	r0, [pc, #252]	; (8000b1c <MX_GPIO_Init+0x1c4>)
 8000a1e:	f001 f981 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000a22:	2200      	movs	r2, #0
 8000a24:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a28:	483d      	ldr	r0, [pc, #244]	; (8000b20 <MX_GPIO_Init+0x1c8>)
 8000a2a:	f001 f97b 	bl	8001d24 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a34:	483b      	ldr	r0, [pc, #236]	; (8000b24 <MX_GPIO_Init+0x1cc>)
 8000a36:	f001 f975 	bl	8001d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_left_Pin button_select_Pin button_right_Pin */
  GPIO_InitStruct.Pin = button_left_Pin|button_select_Pin|button_right_Pin;
 8000a3a:	232a      	movs	r3, #42	; 0x2a
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	; (8000b28 <MX_GPIO_Init+0x1d0>)
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a42:	2302      	movs	r3, #2
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4837      	ldr	r0, [pc, #220]	; (8000b2c <MX_GPIO_Init+0x1d4>)
 8000a4e:	f000 ffe7 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_power_Pin dir_Pin step_Pin */
  GPIO_InitStruct.Pin = USB_power_Pin|dir_Pin|step_Pin;
 8000a52:	f240 1341 	movw	r3, #321	; 0x141
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a64:	f107 031c 	add.w	r3, r7, #28
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482c      	ldr	r0, [pc, #176]	; (8000b1c <MX_GPIO_Init+0x1c4>)
 8000a6c:	f000 ffd8 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4828      	ldr	r0, [pc, #160]	; (8000b24 <MX_GPIO_Init+0x1cc>)
 8000a84:	f000 ffcc 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : endstop_Pin */
  GPIO_InitStruct.Pin = endstop_Pin;
 8000a88:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8e:	4b26      	ldr	r3, [pc, #152]	; (8000b28 <MX_GPIO_Init+0x1d0>)
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(endstop_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4820      	ldr	r0, [pc, #128]	; (8000b20 <MX_GPIO_Init+0x1c8>)
 8000a9e:	f000 ffbf 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8000aa2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000aa6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4819      	ldr	r0, [pc, #100]	; (8000b20 <MX_GPIO_Init+0x1c8>)
 8000abc:	f000 ffb0 	bl	8001a20 <HAL_GPIO_Init>

  /*Configure GPIO pin : slp_rst_Pin */
  GPIO_InitStruct.Pin = slp_rst_Pin;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(slp_rst_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <MX_GPIO_Init+0x1cc>)
 8000ada:	f000 ffa1 	bl	8001a20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2007      	movs	r0, #7
 8000ae4:	f000 fc7d 	bl	80013e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ae8:	2007      	movs	r0, #7
 8000aea:	f000 fc96 	bl	800141a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2009      	movs	r0, #9
 8000af4:	f000 fc75 	bl	80013e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000af8:	2009      	movs	r0, #9
 8000afa:	f000 fc8e 	bl	800141a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2100      	movs	r1, #0
 8000b02:	2017      	movs	r0, #23
 8000b04:	f000 fc6d 	bl	80013e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b08:	2017      	movs	r0, #23
 8000b0a:	f000 fc86 	bl	800141a <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3730      	adds	r7, #48	; 0x30
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020800 	.word	0x40020800
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	40020000 	.word	0x40020000
 8000b28:	10110000 	.word	0x10110000
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
	...

08000b40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b54:	6453      	str	r3, [r2, #68]	; 0x44
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6413      	str	r3, [r2, #64]	; 0x40
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x4c>)
 8000b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7e:	2007      	movs	r0, #7
 8000b80:	f000 fc24 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800

08000b90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 031c 	add.w	r3, r7, #28
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a3b      	ldr	r2, [pc, #236]	; (8000c9c <HAL_I2C_MspInit+0x10c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d12d      	bne.n	8000c0e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
 8000bb6:	4b3a      	ldr	r3, [pc, #232]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a39      	ldr	r2, [pc, #228]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b37      	ldr	r3, [pc, #220]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
 8000bcc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2X1_SCL_Pin|I2C1_SDA_Pin;
 8000bce:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd4:	2312      	movs	r3, #18
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	4619      	mov	r1, r3
 8000bea:	482e      	ldr	r0, [pc, #184]	; (8000ca4 <HAL_I2C_MspInit+0x114>)
 8000bec:	f000 ff18 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	4b2a      	ldr	r3, [pc, #168]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a29      	ldr	r2, [pc, #164]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000bfa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b27      	ldr	r3, [pc, #156]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c08:	617b      	str	r3, [r7, #20]
 8000c0a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c0c:	e041      	b.n	8000c92 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <HAL_I2C_MspInit+0x118>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d13c      	bne.n	8000c92 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c18:	2300      	movs	r3, #0
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c20:	4a1f      	ldr	r2, [pc, #124]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c22:	f043 0302 	orr.w	r3, r3, #2
 8000c26:	6313      	str	r3, [r2, #48]	; 0x30
 8000c28:	4b1d      	ldr	r3, [pc, #116]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	613b      	str	r3, [r7, #16]
 8000c32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8000c34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c3a:	2312      	movs	r3, #18
 8000c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c42:	2303      	movs	r3, #3
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c46:	2304      	movs	r3, #4
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4814      	ldr	r0, [pc, #80]	; (8000ca4 <HAL_I2C_MspInit+0x114>)
 8000c52:	f000 fee5 	bl	8001a20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8000c56:	2308      	movs	r3, #8
 8000c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5a:	2312      	movs	r3, #18
 8000c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000c66:	2309      	movs	r3, #9
 8000c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <HAL_I2C_MspInit+0x114>)
 8000c72:	f000 fed5 	bl	8001a20 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c84:	6413      	str	r3, [r2, #64]	; 0x40
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_I2C_MspInit+0x110>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	; 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020400 	.word	0x40020400
 8000ca8:	40005800 	.word	0x40005800

08000cac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	; 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a45      	ldr	r2, [pc, #276]	; (8000de0 <HAL_I2S_MspInit+0x134>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f040 8084 	bne.w	8000dd8 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	4b43      	ldr	r3, [pc, #268]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a42      	ldr	r2, [pc, #264]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b40      	ldr	r3, [pc, #256]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	2300      	movs	r3, #0
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	4b3c      	ldr	r3, [pc, #240]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf4:	4a3b      	ldr	r2, [pc, #236]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfc:	4b39      	ldr	r3, [pc, #228]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	4b35      	ldr	r3, [pc, #212]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d10:	4a34      	ldr	r2, [pc, #208]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000d12:	f043 0304 	orr.w	r3, r3, #4
 8000d16:	6313      	str	r3, [r2, #48]	; 0x30
 8000d18:	4b32      	ldr	r3, [pc, #200]	; (8000de4 <HAL_I2S_MspInit+0x138>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	f003 0304 	and.w	r3, r3, #4
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d24:	2310      	movs	r3, #16
 8000d26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d34:	2306      	movs	r3, #6
 8000d36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	482a      	ldr	r0, [pc, #168]	; (8000de8 <HAL_I2S_MspInit+0x13c>)
 8000d40:	f000 fe6e 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_CK_Pin|I2S3_SD_Pin;
 8000d44:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d56:	2306      	movs	r3, #6
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4822      	ldr	r0, [pc, #136]	; (8000dec <HAL_I2S_MspInit+0x140>)
 8000d62:	f000 fe5d 	bl	8001a20 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8000d66:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d68:	4a22      	ldr	r2, [pc, #136]	; (8000df4 <HAL_I2S_MspInit+0x148>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8000d6c:	4b20      	ldr	r3, [pc, #128]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d72:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d74:	2240      	movs	r2, #64	; 0x40
 8000d76:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d84:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d86:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d8c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d94:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d9c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d9e:	4b14      	ldr	r3, [pc, #80]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000da4:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000dac:	2203      	movs	r2, #3
 8000dae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000dbe:	f000 fb47 	bl	8001450 <HAL_DMA_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8000dc8:	f7ff feb2 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000dd0:	639a      	str	r2, [r3, #56]	; 0x38
 8000dd2:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_I2S_MspInit+0x144>)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40003c00 	.word	0x40003c00
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000
 8000dec:	40020800 	.word	0x40020800
 8000df0:	20000238 	.word	0x20000238
 8000df4:	40026088 	.word	0x40026088

08000df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1c      	ldr	r2, [pc, #112]	; (8000e78 <HAL_TIM_Base_MspInit+0x80>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d116      	bne.n	8000e38 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <HAL_TIM_Base_MspInit+0x84>)
 8000e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e12:	4a1a      	ldr	r2, [pc, #104]	; (8000e7c <HAL_TIM_Base_MspInit+0x84>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_TIM_Base_MspInit+0x84>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	201e      	movs	r0, #30
 8000e2c:	f000 fad9 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e30:	201e      	movs	r0, #30
 8000e32:	f000 faf2 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8000e36:	e01a      	b.n	8000e6e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a10      	ldr	r2, [pc, #64]	; (8000e80 <HAL_TIM_Base_MspInit+0x88>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d115      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	4b0d      	ldr	r3, [pc, #52]	; (8000e7c <HAL_TIM_Base_MspInit+0x84>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	; (8000e7c <HAL_TIM_Base_MspInit+0x84>)
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e50:	6453      	str	r3, [r2, #68]	; 0x44
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_TIM_Base_MspInit+0x84>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	2019      	movs	r0, #25
 8000e64:	f000 fabd 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e68:	2019      	movs	r0, #25
 8000e6a:	f000 fad6 	bl	800141a <HAL_NVIC_EnableIRQ>
}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40000800 	.word	0x40000800
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40014400 	.word	0x40014400

08000e84 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10d      	bne.n	8000eb2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x40>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x40>)
 8000ea0:	f043 0308 	orr.w	r3, r3, #8
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_TIM_PWM_MspInit+0x40>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40000c00 	.word	0x40000c00
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_TIM_MspPostInit+0x68>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d11d      	bne.n	8000f26 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	2300      	movs	r3, #0
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_TIM_MspPostInit+0x6c>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_TIM_MspPostInit+0x6c>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_TIM_MspPostInit+0x6c>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000f06:	230e      	movs	r3, #14
 8000f08:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 030c 	add.w	r3, r7, #12
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_TIM_MspPostInit+0x70>)
 8000f22:	f000 fd7d 	bl	8001a20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8000f26:	bf00      	nop
 8000f28:	3720      	adds	r7, #32
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40000c00 	.word	0x40000c00
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40020000 	.word	0x40020000

08000f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <HardFault_Handler+0x4>

08000f50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <MemManage_Handler+0x4>

08000f56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <BusFault_Handler+0x4>

08000f5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <UsageFault_Handler+0x4>

08000f62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f90a 	bl	80011a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f000 fedb 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000faa:	2008      	movs	r0, #8
 8000fac:	f000 fed4 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <DMA1_Stream5_IRQHandler+0x10>)
 8000fba:	f000 faf7 	bl	80015ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000238 	.word	0x20000238

08000fc8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f000 fec3 	bl	8001d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000fde:	f003 ff8f 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000164 	.word	0x20000164

08000fec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM4_IRQHandler+0x10>)
 8000ff2:	f003 ff85 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000d0 	.word	0x200000d0

08001000 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <OTG_FS_IRQHandler+0x10>)
 8001006:	f001 f959 	bl	80022bc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000b24 	.word	0x20000b24

08001014 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <_sbrk+0x50>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x16>
		heap_end = &end;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <_sbrk+0x50>)
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <_sbrk+0x54>)
 8001028:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <_sbrk+0x50>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <_sbrk+0x50>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	466a      	mov	r2, sp
 800103a:	4293      	cmp	r3, r2
 800103c:	d907      	bls.n	800104e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800103e:	f009 f825 	bl	800a08c <__errno>
 8001042:	4602      	mov	r2, r0
 8001044:	230c      	movs	r3, #12
 8001046:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001048:	f04f 33ff 	mov.w	r3, #4294967295
 800104c:	e006      	b.n	800105c <_sbrk+0x48>
	}

	heap_end += incr;
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <_sbrk+0x50>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a03      	ldr	r2, [pc, #12]	; (8001064 <_sbrk+0x50>)
 8001058:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200000ac 	.word	0x200000ac
 8001068:	20000df0 	.word	0x20000df0

0800106c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <SystemInit+0x28>)
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001076:	4a07      	ldr	r2, [pc, #28]	; (8001094 <SystemInit+0x28>)
 8001078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800107c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SystemInit+0x28>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	609a      	str	r2, [r3, #8]
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <audioI2S_fullTransfer_Callback>:
void audioI2S_halfTransfer_Callback(void)
{
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
}
void audioI2S_fullTransfer_Callback(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <audioI2S_fullTransfer_Callback+0x14>)
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 80010a2:	bf00      	nop
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	200000b0 	.word	0x200000b0

080010b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010b6:	e003      	b.n	80010c0 <LoopCopyDataInit>

080010b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010b8:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010be:	3104      	adds	r1, #4

080010c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010c0:	480b      	ldr	r0, [pc, #44]	; (80010f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010c8:	d3f6      	bcc.n	80010b8 <CopyDataInit>
  ldr  r2, =_sbss
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010cc:	e002      	b.n	80010d4 <LoopFillZerobss>

080010ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010d0:	f842 3b04 	str.w	r3, [r2], #4

080010d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010d8:	d3f9      	bcc.n	80010ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010da:	f7ff ffc7 	bl	800106c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010de:	f008 ffdb 	bl	800a098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e2:	f7ff fa0b 	bl	80004fc <main>
  bx  lr    
 80010e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010ec:	0800a2fc 	.word	0x0800a2fc
  ldr  r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010f4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80010f8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80010fc:	20000dec 	.word	0x20000dec

08001100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001100:	e7fe      	b.n	8001100 <ADC_IRQHandler>
	...

08001104 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001108:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <HAL_Init+0x40>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_Init+0x40>)
 800110e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001112:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001114:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_Init+0x40>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <HAL_Init+0x40>)
 800111a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_Init+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_Init+0x40>)
 8001126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800112a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800112c:	2003      	movs	r0, #3
 800112e:	f000 f94d 	bl	80013cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 f808 	bl	8001148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fd02 	bl	8000b40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_InitTick+0x54>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <HAL_InitTick+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001162:	fbb2 f3f3 	udiv	r3, r2, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f965 	bl	8001436 <HAL_SYSTICK_Config>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e00e      	b.n	8001194 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d80a      	bhi.n	8001192 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800117c:	2200      	movs	r2, #0
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	f04f 30ff 	mov.w	r0, #4294967295
 8001184:	f000 f92d 	bl	80013e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001188:	4a06      	ldr	r2, [pc, #24]	; (80011a4 <HAL_InitTick+0x5c>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
 8001190:	e000      	b.n	8001194 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000000 	.word	0x20000000
 80011a0:	20000008 	.word	0x20000008
 80011a4:	20000004 	.word	0x20000004

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	; (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	200002e0 	.word	0x200002e0

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	; (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	200002e0 	.word	0x200002e0

080011e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011f0:	f7ff ffee 	bl	80011d0 <HAL_GetTick>
 80011f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001200:	d005      	beq.n	800120e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_Delay+0x40>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	461a      	mov	r2, r3
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4413      	add	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800120e:	bf00      	nop
 8001210:	f7ff ffde 	bl	80011d0 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	429a      	cmp	r2, r3
 800121e:	d8f7      	bhi.n	8001210 <HAL_Delay+0x28>
  {
  }
}
 8001220:	bf00      	nop
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000008 	.word	0x20000008

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125e:	4a04      	ldr	r2, [pc, #16]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	60d3      	str	r3, [r2, #12]
}
 8001264:	bf00      	nop
 8001266:	3714      	adds	r7, #20
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3b01      	subs	r3, #1
 8001394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001398:	d301      	bcc.n	800139e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139a:	2301      	movs	r3, #1
 800139c:	e00f      	b.n	80013be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139e:	4a0a      	ldr	r2, [pc, #40]	; (80013c8 <SysTick_Config+0x40>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a6:	210f      	movs	r1, #15
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f7ff ff8e 	bl	80012cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b0:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <SysTick_Config+0x40>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b6:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <SysTick_Config+0x40>)
 80013b8:	2207      	movs	r2, #7
 80013ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	e000e010 	.word	0xe000e010

080013cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff ff29 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f4:	f7ff ff3e 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	f7ff ff8e 	bl	8001320 <NVIC_EncodePriority>
 8001404:	4602      	mov	r2, r0
 8001406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140a:	4611      	mov	r1, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff5d 	bl	80012cc <__NVIC_SetPriority>
}
 8001412:	bf00      	nop
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff ff31 	bl	8001290 <__NVIC_EnableIRQ>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffa2 	bl	8001388 <SysTick_Config>
 8001444:	4603      	mov	r3, r0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
	...

08001450 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800145c:	f7ff feb8 	bl	80011d0 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d101      	bne.n	800146c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e099      	b.n	80015a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2200      	movs	r2, #0
 8001470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2202      	movs	r2, #2
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148c:	e00f      	b.n	80014ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800148e:	f7ff fe9f 	bl	80011d0 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b05      	cmp	r3, #5
 800149a:	d908      	bls.n	80014ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2220      	movs	r2, #32
 80014a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2203      	movs	r2, #3
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e078      	b.n	80015a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e8      	bne.n	800148e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	4b38      	ldr	r3, [pc, #224]	; (80015a8 <HAL_DMA_Init+0x158>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001504:	2b04      	cmp	r3, #4
 8001506:	d107      	bne.n	8001518 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4313      	orrs	r3, r2
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	f023 0307 	bic.w	r3, r3, #7
 800152e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153e:	2b04      	cmp	r3, #4
 8001540:	d117      	bne.n	8001572 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00e      	beq.n	8001572 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f9e9 	bl	800192c <DMA_CheckFifoParam>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d008      	beq.n	8001572 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2240      	movs	r2, #64	; 0x40
 8001564:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800156e:	2301      	movs	r3, #1
 8001570:	e016      	b.n	80015a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f9a0 	bl	80018c0 <DMA_CalcBaseAndBitshift>
 8001580:	4603      	mov	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001588:	223f      	movs	r2, #63	; 0x3f
 800158a:	409a      	lsls	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800159e:	2300      	movs	r3, #0
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	f010803f 	.word	0xf010803f

080015ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015b8:	4b92      	ldr	r3, [pc, #584]	; (8001804 <HAL_DMA_IRQHandler+0x258>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a92      	ldr	r2, [pc, #584]	; (8001808 <HAL_DMA_IRQHandler+0x25c>)
 80015be:	fba2 2303 	umull	r2, r3, r2, r3
 80015c2:	0a9b      	lsrs	r3, r3, #10
 80015c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d6:	2208      	movs	r2, #8
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4013      	ands	r3, r2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d01a      	beq.n	8001618 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0204 	bic.w	r2, r2, #4
 80015fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001604:	2208      	movs	r2, #8
 8001606:	409a      	lsls	r2, r3
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001610:	f043 0201 	orr.w	r2, r3, #1
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	2201      	movs	r2, #1
 800161e:	409a      	lsls	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	4013      	ands	r3, r2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d012      	beq.n	800164e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163a:	2201      	movs	r2, #1
 800163c:	409a      	lsls	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	f043 0202 	orr.w	r2, r3, #2
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2204      	movs	r2, #4
 8001654:	409a      	lsls	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4013      	ands	r3, r2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d012      	beq.n	8001684 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001670:	2204      	movs	r2, #4
 8001672:	409a      	lsls	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800167c:	f043 0204 	orr.w	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001688:	2210      	movs	r2, #16
 800168a:	409a      	lsls	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4013      	ands	r3, r2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d043      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d03c      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a6:	2210      	movs	r2, #16
 80016a8:	409a      	lsls	r2, r3
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d018      	beq.n	80016ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d108      	bne.n	80016dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d024      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	4798      	blx	r3
 80016da:	e01f      	b.n	800171c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d01b      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	4798      	blx	r3
 80016ec:	e016      	b.n	800171c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d107      	bne.n	800170c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0208 	bic.w	r2, r2, #8
 800170a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001720:	2220      	movs	r2, #32
 8001722:	409a      	lsls	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4013      	ands	r3, r2
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 808e 	beq.w	800184a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0310 	and.w	r3, r3, #16
 8001738:	2b00      	cmp	r3, #0
 800173a:	f000 8086 	beq.w	800184a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001742:	2220      	movs	r2, #32
 8001744:	409a      	lsls	r2, r3
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b05      	cmp	r3, #5
 8001754:	d136      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0216 	bic.w	r2, r2, #22
 8001764:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001774:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	2b00      	cmp	r3, #0
 800177c:	d103      	bne.n	8001786 <HAL_DMA_IRQHandler+0x1da>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0208 	bic.w	r2, r2, #8
 8001794:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800179a:	223f      	movs	r2, #63	; 0x3f
 800179c:	409a      	lsls	r2, r3
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d07d      	beq.n	80018b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	4798      	blx	r3
        }
        return;
 80017c2:	e078      	b.n	80018b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d01c      	beq.n	800180c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d108      	bne.n	80017f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d030      	beq.n	800184a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	4798      	blx	r3
 80017f0:	e02b      	b.n	800184a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d027      	beq.n	800184a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
 8001802:	e022      	b.n	800184a <HAL_DMA_IRQHandler+0x29e>
 8001804:	20000000 	.word	0x20000000
 8001808:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10f      	bne.n	800183a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f022 0210 	bic.w	r2, r2, #16
 8001828:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d003      	beq.n	800184a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	2b00      	cmp	r3, #0
 8001850:	d032      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d022      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2205      	movs	r2, #5
 8001862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	3301      	adds	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	429a      	cmp	r2, r3
 8001880:	d307      	bcc.n	8001892 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f2      	bne.n	8001876 <HAL_DMA_IRQHandler+0x2ca>
 8001890:	e000      	b.n	8001894 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001892:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d005      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
 80018b4:	e000      	b.n	80018b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80018b6:	bf00      	nop
    }
  }
}
 80018b8:	3718      	adds	r7, #24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	3b10      	subs	r3, #16
 80018d0:	4a14      	ldr	r2, [pc, #80]	; (8001924 <DMA_CalcBaseAndBitshift+0x64>)
 80018d2:	fba2 2303 	umull	r2, r3, r2, r3
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018da:	4a13      	ldr	r2, [pc, #76]	; (8001928 <DMA_CalcBaseAndBitshift+0x68>)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d909      	bls.n	8001902 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80018f6:	f023 0303 	bic.w	r3, r3, #3
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001900:	e007      	b.n	8001912 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	aaaaaaab 	.word	0xaaaaaaab
 8001928:	0800a2d0 	.word	0x0800a2d0

0800192c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d11f      	bne.n	8001986 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b03      	cmp	r3, #3
 800194a:	d855      	bhi.n	80019f8 <DMA_CheckFifoParam+0xcc>
 800194c:	a201      	add	r2, pc, #4	; (adr r2, 8001954 <DMA_CheckFifoParam+0x28>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001965 	.word	0x08001965
 8001958:	08001977 	.word	0x08001977
 800195c:	08001965 	.word	0x08001965
 8001960:	080019f9 	.word	0x080019f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d045      	beq.n	80019fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001974:	e042      	b.n	80019fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800197e:	d13f      	bne.n	8001a00 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001984:	e03c      	b.n	8001a00 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800198e:	d121      	bne.n	80019d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2b03      	cmp	r3, #3
 8001994:	d836      	bhi.n	8001a04 <DMA_CheckFifoParam+0xd8>
 8001996:	a201      	add	r2, pc, #4	; (adr r2, 800199c <DMA_CheckFifoParam+0x70>)
 8001998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800199c:	080019ad 	.word	0x080019ad
 80019a0:	080019b3 	.word	0x080019b3
 80019a4:	080019ad 	.word	0x080019ad
 80019a8:	080019c5 	.word	0x080019c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
      break;
 80019b0:	e02f      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019c2:	e021      	b.n	8001a08 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019cc:	d11e      	bne.n	8001a0c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019d2:	e01b      	b.n	8001a0c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d902      	bls.n	80019e0 <DMA_CheckFifoParam+0xb4>
 80019da:	2b03      	cmp	r3, #3
 80019dc:	d003      	beq.n	80019e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019de:	e018      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	73fb      	strb	r3, [r7, #15]
      break;
 80019e4:	e015      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00e      	beq.n	8001a10 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	73fb      	strb	r3, [r7, #15]
      break;
 80019f6:	e00b      	b.n	8001a10 <DMA_CheckFifoParam+0xe4>
      break;
 80019f8:	bf00      	nop
 80019fa:	e00a      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 80019fc:	bf00      	nop
 80019fe:	e008      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a00:	bf00      	nop
 8001a02:	e006      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a04:	bf00      	nop
 8001a06:	e004      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a08:	bf00      	nop
 8001a0a:	e002      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;   
 8001a0c:	bf00      	nop
 8001a0e:	e000      	b.n	8001a12 <DMA_CheckFifoParam+0xe6>
      break;
 8001a10:	bf00      	nop
    }
  } 
  
  return status; 
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
 8001a3a:	e159      	b.n	8001cf0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	f040 8148 	bne.w	8001cea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d00b      	beq.n	8001a7a <HAL_GPIO_Init+0x5a>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d007      	beq.n	8001a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a6e:	2b11      	cmp	r3, #17
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b12      	cmp	r3, #18
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0xfc>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b12      	cmp	r3, #18
 8001b1a:	d123      	bne.n	8001b64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	08da      	lsrs	r2, r3, #3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3208      	adds	r2, #8
 8001b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	69b9      	ldr	r1, [r7, #24]
 8001b60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0203 	and.w	r2, r3, #3
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	005b      	lsls	r3, r3, #1
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 80a2 	beq.w	8001cea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	4b56      	ldr	r3, [pc, #344]	; (8001d04 <HAL_GPIO_Init+0x2e4>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	4a55      	ldr	r2, [pc, #340]	; (8001d04 <HAL_GPIO_Init+0x2e4>)
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb6:	4b53      	ldr	r3, [pc, #332]	; (8001d04 <HAL_GPIO_Init+0x2e4>)
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc2:	4a51      	ldr	r2, [pc, #324]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	220f      	movs	r2, #15
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_GPIO_Init+0x2ec>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d019      	beq.n	8001c22 <HAL_GPIO_Init+0x202>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a47      	ldr	r2, [pc, #284]	; (8001d10 <HAL_GPIO_Init+0x2f0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d013      	beq.n	8001c1e <HAL_GPIO_Init+0x1fe>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a46      	ldr	r2, [pc, #280]	; (8001d14 <HAL_GPIO_Init+0x2f4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00d      	beq.n	8001c1a <HAL_GPIO_Init+0x1fa>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a45      	ldr	r2, [pc, #276]	; (8001d18 <HAL_GPIO_Init+0x2f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d007      	beq.n	8001c16 <HAL_GPIO_Init+0x1f6>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a44      	ldr	r2, [pc, #272]	; (8001d1c <HAL_GPIO_Init+0x2fc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d101      	bne.n	8001c12 <HAL_GPIO_Init+0x1f2>
 8001c0e:	2304      	movs	r3, #4
 8001c10:	e008      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c12:	2307      	movs	r3, #7
 8001c14:	e006      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c16:	2303      	movs	r3, #3
 8001c18:	e004      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e000      	b.n	8001c24 <HAL_GPIO_Init+0x204>
 8001c22:	2300      	movs	r3, #0
 8001c24:	69fa      	ldr	r2, [r7, #28]
 8001c26:	f002 0203 	and.w	r2, r2, #3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	4093      	lsls	r3, r2
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c34:	4934      	ldr	r1, [pc, #208]	; (8001d08 <HAL_GPIO_Init+0x2e8>)
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	089b      	lsrs	r3, r3, #2
 8001c3a:	3302      	adds	r3, #2
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c42:	4b37      	ldr	r3, [pc, #220]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c66:	4a2e      	ldr	r2, [pc, #184]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c6c:	4b2c      	ldr	r3, [pc, #176]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c90:	4a23      	ldr	r2, [pc, #140]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c96:	4b22      	ldr	r3, [pc, #136]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cba:	4a19      	ldr	r2, [pc, #100]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc0:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ce4:	4a0e      	ldr	r2, [pc, #56]	; (8001d20 <HAL_GPIO_Init+0x300>)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3301      	adds	r3, #1
 8001cee:	61fb      	str	r3, [r7, #28]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	2b0f      	cmp	r3, #15
 8001cf4:	f67f aea2 	bls.w	8001a3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cf8:	bf00      	nop
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40013800 	.word	0x40013800
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40013c00 	.word	0x40013c00

08001d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	807b      	strh	r3, [r7, #2]
 8001d30:	4613      	mov	r3, r2
 8001d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d34:	787b      	ldrb	r3, [r7, #1]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d3a:	887a      	ldrh	r2, [r7, #2]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d40:	e003      	b.n	8001d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d42:	887b      	ldrh	r3, [r7, #2]
 8001d44:	041a      	lsls	r2, r3, #16
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	619a      	str	r2, [r3, #24]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	88fb      	ldrh	r3, [r7, #6]
 8001d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 f806 	bl	8001d88 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001da0:	b08f      	sub	sp, #60	; 0x3c
 8001da2:	af0a      	add	r7, sp, #40	; 0x28
 8001da4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e054      	b.n	8001e5a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d106      	bne.n	8001dd0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f007 fe80 	bl	8009ad0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 fed8 	bl	8005ba4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	687e      	ldr	r6, [r7, #4]
 8001dfc:	466d      	mov	r5, sp
 8001dfe:	f106 0410 	add.w	r4, r6, #16
 8001e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e12:	1d33      	adds	r3, r6, #4
 8001e14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e16:	6838      	ldr	r0, [r7, #0]
 8001e18:	f003 fe52 	bl	8005ac0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2101      	movs	r1, #1
 8001e22:	4618      	mov	r0, r3
 8001e24:	f003 fecf 	bl	8005bc6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	687e      	ldr	r6, [r7, #4]
 8001e30:	466d      	mov	r5, sp
 8001e32:	f106 0410 	add.w	r4, r6, #16
 8001e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e42:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e46:	1d33      	adds	r3, r6, #4
 8001e48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e4a:	6838      	ldr	r0, [r7, #0]
 8001e4c:	f003 ffe2 	bl	8005e14 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e62 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e62:	b590      	push	{r4, r7, lr}
 8001e64:	b089      	sub	sp, #36	; 0x24
 8001e66:	af04      	add	r7, sp, #16
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	4608      	mov	r0, r1
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	70fb      	strb	r3, [r7, #3]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70bb      	strb	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_HCD_HC_Init+0x28>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e07f      	b.n	8001f8a <HAL_HCD_HC_Init+0x128>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001e92:	78fa      	ldrb	r2, [r7, #3]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	440b      	add	r3, r1
 8001ea0:	333d      	adds	r3, #61	; 0x3d
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	440b      	add	r3, r1
 8001eb4:	3338      	adds	r3, #56	; 0x38
 8001eb6:	787a      	ldrb	r2, [r7, #1]
 8001eb8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001eba:	78fa      	ldrb	r2, [r7, #3]
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3340      	adds	r3, #64	; 0x40
 8001eca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ecc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ece:	78fa      	ldrb	r2, [r7, #3]
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	3339      	adds	r3, #57	; 0x39
 8001ede:	78fa      	ldrb	r2, [r7, #3]
 8001ee0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	333f      	adds	r3, #63	; 0x3f
 8001ef2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001ef6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f00:	b2d8      	uxtb	r0, r3
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	4413      	add	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	440b      	add	r3, r1
 8001f0e:	333a      	adds	r3, #58	; 0x3a
 8001f10:	4602      	mov	r2, r0
 8001f12:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f14:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da0a      	bge.n	8001f32 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	333b      	adds	r3, #59	; 0x3b
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	701a      	strb	r2, [r3, #0]
 8001f30:	e009      	b.n	8001f46 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	440b      	add	r3, r1
 8001f40:	333b      	adds	r3, #59	; 0x3b
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	333c      	adds	r3, #60	; 0x3c
 8001f56:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f5a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6818      	ldr	r0, [r3, #0]
 8001f60:	787c      	ldrb	r4, [r7, #1]
 8001f62:	78ba      	ldrb	r2, [r7, #2]
 8001f64:	78f9      	ldrb	r1, [r7, #3]
 8001f66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f74:	9300      	str	r3, [sp, #0]
 8001f76:	4623      	mov	r3, r4
 8001f78:	f004 f8ce 	bl	8006118 <USB_HC_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd90      	pop	{r4, r7, pc}

08001f92 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_HCD_HC_Halt+0x1e>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e00f      	b.n	8001fd0 <HAL_HCD_HC_Halt+0x3e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	78fa      	ldrb	r2, [r7, #3]
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f004 fb08 	bl	80065d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	70fb      	strb	r3, [r7, #3]
 8001fea:	460b      	mov	r3, r1
 8001fec:	70bb      	strb	r3, [r7, #2]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	440b      	add	r3, r1
 8002000:	333b      	adds	r3, #59	; 0x3b
 8002002:	78ba      	ldrb	r2, [r7, #2]
 8002004:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002006:	78fa      	ldrb	r2, [r7, #3]
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	440b      	add	r3, r1
 8002014:	333f      	adds	r3, #63	; 0x3f
 8002016:	787a      	ldrb	r2, [r7, #1]
 8002018:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800201a:	7c3b      	ldrb	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d114      	bne.n	800204a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3342      	adds	r3, #66	; 0x42
 8002030:	2203      	movs	r2, #3
 8002032:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	333d      	adds	r3, #61	; 0x3d
 8002044:	7f3a      	ldrb	r2, [r7, #28]
 8002046:	701a      	strb	r2, [r3, #0]
 8002048:	e009      	b.n	800205e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800204a:	78fa      	ldrb	r2, [r7, #3]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	3342      	adds	r3, #66	; 0x42
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800205e:	787b      	ldrb	r3, [r7, #1]
 8002060:	2b03      	cmp	r3, #3
 8002062:	f200 80d6 	bhi.w	8002212 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002066:	a201      	add	r2, pc, #4	; (adr r2, 800206c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206c:	0800207d 	.word	0x0800207d
 8002070:	080021fd 	.word	0x080021fd
 8002074:	080020e9 	.word	0x080020e9
 8002078:	08002173 	.word	0x08002173
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800207c:	7c3b      	ldrb	r3, [r7, #16]
 800207e:	2b01      	cmp	r3, #1
 8002080:	f040 80c9 	bne.w	8002216 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002084:	78bb      	ldrb	r3, [r7, #2]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f040 80c5 	bne.w	8002216 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800208c:	8b3b      	ldrh	r3, [r7, #24]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3351      	adds	r3, #81	; 0x51
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	440b      	add	r3, r1
 80020b4:	3351      	adds	r3, #81	; 0x51
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10a      	bne.n	80020d2 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	440b      	add	r3, r1
 80020ca:	3342      	adds	r3, #66	; 0x42
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020d0:	e0a1      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	3342      	adds	r3, #66	; 0x42
 80020e2:	2202      	movs	r2, #2
 80020e4:	701a      	strb	r2, [r3, #0]
      break;
 80020e6:	e096      	b.n	8002216 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020e8:	78bb      	ldrb	r3, [r7, #2]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d120      	bne.n	8002130 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	440b      	add	r3, r1
 80020fc:	3351      	adds	r3, #81	; 0x51
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10a      	bne.n	800211a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002104:	78fa      	ldrb	r2, [r7, #3]
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	440b      	add	r3, r1
 8002112:	3342      	adds	r3, #66	; 0x42
 8002114:	2200      	movs	r2, #0
 8002116:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002118:	e07e      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	3342      	adds	r3, #66	; 0x42
 800212a:	2202      	movs	r2, #2
 800212c:	701a      	strb	r2, [r3, #0]
      break;
 800212e:	e073      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	3350      	adds	r3, #80	; 0x50
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3342      	adds	r3, #66	; 0x42
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	e05d      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3342      	adds	r3, #66	; 0x42
 800216c:	2202      	movs	r2, #2
 800216e:	701a      	strb	r2, [r3, #0]
      break;
 8002170:	e052      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002172:	78bb      	ldrb	r3, [r7, #2]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d120      	bne.n	80021ba <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	440b      	add	r3, r1
 8002186:	3351      	adds	r3, #81	; 0x51
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10a      	bne.n	80021a4 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	3342      	adds	r3, #66	; 0x42
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021a2:	e039      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	3342      	adds	r3, #66	; 0x42
 80021b4:	2202      	movs	r2, #2
 80021b6:	701a      	strb	r2, [r3, #0]
      break;
 80021b8:	e02e      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3350      	adds	r3, #80	; 0x50
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10a      	bne.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	3342      	adds	r3, #66	; 0x42
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
      break;
 80021e4:	e018      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3342      	adds	r3, #66	; 0x42
 80021f6:	2202      	movs	r2, #2
 80021f8:	701a      	strb	r2, [r3, #0]
      break;
 80021fa:	e00d      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3342      	adds	r3, #66	; 0x42
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
      break;
 8002210:	e002      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002216:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3344      	adds	r3, #68	; 0x44
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	8b39      	ldrh	r1, [r7, #24]
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4403      	add	r3, r0
 800223c:	3348      	adds	r3, #72	; 0x48
 800223e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4413      	add	r3, r2
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	440b      	add	r3, r1
 800224e:	335c      	adds	r3, #92	; 0x5c
 8002250:	2200      	movs	r2, #0
 8002252:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	334c      	adds	r3, #76	; 0x4c
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	440b      	add	r3, r1
 8002276:	3339      	adds	r3, #57	; 0x39
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	4413      	add	r3, r2
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	440b      	add	r3, r1
 800228a:	335d      	adds	r3, #93	; 0x5d
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	4613      	mov	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	3338      	adds	r3, #56	; 0x38
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	18d1      	adds	r1, r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	f004 f83e 	bl	800632c <USB_HC_StartXfer>
 80022b0:	4603      	mov	r3, r0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fd5b 	bl	8005d8e <USB_GetMode>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	f040 80ef 	bne.w	80024be <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fd3f 	bl	8005d68 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80e5 	beq.w	80024bc <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fd36 	bl	8005d68 <USB_ReadInterrupts>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002302:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002306:	d104      	bne.n	8002312 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002310:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f003 fd26 	bl	8005d68 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002326:	d104      	bne.n	8002332 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002330:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fd16 	bl	8005d68 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002342:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002346:	d104      	bne.n	8002352 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002350:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f003 fd06 	bl	8005d68 <USB_ReadInterrupts>
 800235c:	4603      	mov	r3, r0
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2202      	movs	r2, #2
 800236c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f003 fcf8 	bl	8005d68 <USB_ReadInterrupts>
 8002378:	4603      	mov	r3, r0
 800237a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800237e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002382:	d115      	bne.n	80023b0 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800238c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d108      	bne.n	80023b0 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f007 fc14 	bl	8009bcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2101      	movs	r1, #1
 80023aa:	4618      	mov	r0, r3
 80023ac:	f003 fdee 	bl	8005f8c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f003 fcd7 	bl	8005d68 <USB_ReadInterrupts>
 80023ba:	4603      	mov	r3, r0
 80023bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c4:	d102      	bne.n	80023cc <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f001 f966 	bl	8003698 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fcc9 	bl	8005d68 <USB_ReadInterrupts>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d106      	bne.n	80023ee <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f007 fbd7 	bl	8009b94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2208      	movs	r2, #8
 80023ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f003 fcb8 	bl	8005d68 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002402:	d138      	bne.n	8002476 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f004 f8d3 	bl	80065b4 <USB_HC_ReadInterrupt>
 800240e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	e025      	b.n	8002462 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f003 030f 	and.w	r3, r3, #15
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4413      	add	r3, r2
 8002432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002440:	d106      	bne.n	8002450 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	4619      	mov	r1, r3
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f8cf 	bl	80025ec <HCD_HC_IN_IRQHandler>
 800244e:	e005      	b.n	800245c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fcfd 	bl	8002e56 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3301      	adds	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	d3d4      	bcc.n	8002416 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f003 fc74 	bl	8005d68 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b10      	cmp	r3, #16
 8002488:	d101      	bne.n	800248e <HAL_HCD_IRQHandler+0x1d2>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_HCD_IRQHandler+0x1d4>
 800248e:	2300      	movs	r3, #0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d014      	beq.n	80024be <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699a      	ldr	r2, [r3, #24]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0210 	bic.w	r2, r2, #16
 80024a2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f001 f84b 	bl	8003540 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699a      	ldr	r2, [r3, #24]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f042 0210 	orr.w	r2, r2, #16
 80024b8:	619a      	str	r2, [r3, #24]
 80024ba:	e000      	b.n	80024be <HAL_HCD_IRQHandler+0x202>
      return;
 80024bc:	bf00      	nop
    }
  }
}
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_HCD_Start+0x16>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e013      	b.n	8002502 <HAL_HCD_Start+0x3e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f003 fb4b 	bl	8005b82 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fdae 	bl	8006054 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800250a:	b580      	push	{r7, lr}
 800250c:	b082      	sub	sp, #8
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002518:	2b01      	cmp	r3, #1
 800251a:	d101      	bne.n	8002520 <HAL_HCD_Stop+0x16>
 800251c:	2302      	movs	r3, #2
 800251e:	e00d      	b.n	800253c <HAL_HCD_Stop+0x32>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f004 f98d 	bl	800684c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f003 fd55 	bl	8006000 <USB_ResetPort>
 8002556:	4603      	mov	r3, r0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	460b      	mov	r3, r1
 800256a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	440b      	add	r3, r1
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	781b      	ldrb	r3, [r3, #0]
}
 800257e:	4618      	mov	r0, r3
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800258a:	b480      	push	{r7}
 800258c:	b083      	sub	sp, #12
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	440b      	add	r3, r1
 80025a4:	334c      	adds	r3, #76	; 0x4c
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fd97 	bl	80060f4 <USB_GetCurrentFrame>
 80025c6:	4603      	mov	r3, r0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fd72 	bl	80060c6 <USB_GetHostSpeed>
 80025e2:	4603      	mov	r3, r0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002602:	78fb      	ldrb	r3, [r7, #3]
 8002604:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b04      	cmp	r3, #4
 800261a:	d119      	bne.n	8002650 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	461a      	mov	r2, r3
 800262a:	2304      	movs	r3, #4
 800262c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	0151      	lsls	r1, r2, #5
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	440a      	add	r2, r1
 8002644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	60d3      	str	r3, [r2, #12]
 800264e:	e0ce      	b.n	80027ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	015a      	lsls	r2, r3, #5
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	4413      	add	r3, r2
 8002658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002666:	d12c      	bne.n	80026c2 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	f44f 7380 	mov.w	r3, #256	; 0x100
 800267a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	335d      	adds	r3, #93	; 0x5d
 800268c:	2207      	movs	r2, #7
 800268e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	0151      	lsls	r1, r2, #5
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	440a      	add	r2, r1
 80026a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026aa:	f043 0302 	orr.w	r3, r3, #2
 80026ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f003 ff8b 	bl	80065d6 <USB_HC_Halt>
 80026c0:	e095      	b.n	80027ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b20      	cmp	r3, #32
 80026d6:	d109      	bne.n	80026ec <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	2320      	movs	r3, #32
 80026e8:	6093      	str	r3, [r2, #8]
 80026ea:	e080      	b.n	80027ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d134      	bne.n	800276c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	0151      	lsls	r1, r2, #5
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	440a      	add	r2, r1
 8002718:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	335d      	adds	r3, #93	; 0x5d
 8002732:	2205      	movs	r2, #5
 8002734:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4413      	add	r3, r2
 800273e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002742:	461a      	mov	r2, r3
 8002744:	2310      	movs	r3, #16
 8002746:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	461a      	mov	r2, r3
 8002756:	2308      	movs	r3, #8
 8002758:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f003 ff36 	bl	80065d6 <USB_HC_Halt>
 800276a:	e040      	b.n	80027ee <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002782:	d134      	bne.n	80027ee <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	0151      	lsls	r1, r2, #5
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	440a      	add	r2, r1
 800279a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800279e:	f043 0302 	orr.w	r3, r3, #2
 80027a2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	b2d2      	uxtb	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 ff11 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	461a      	mov	r2, r3
 80027c2:	2310      	movs	r3, #16
 80027c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	440b      	add	r3, r1
 80027d4:	335d      	adds	r3, #93	; 0x5d
 80027d6:	2208      	movs	r2, #8
 80027d8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	015a      	lsls	r2, r3, #5
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4413      	add	r3, r2
 80027e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e6:	461a      	mov	r2, r3
 80027e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ec:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002804:	d122      	bne.n	800284c <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	0151      	lsls	r1, r2, #5
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	440a      	add	r2, r1
 800281c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002820:	f043 0302 	orr.w	r3, r3, #2
 8002824:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f003 fed0 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	461a      	mov	r2, r3
 8002844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002848:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800284a:	e300      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	015a      	lsls	r2, r3, #5
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	4413      	add	r3, r2
 8002854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	f040 80fd 	bne.w	8002a5e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d01b      	beq.n	80028a4 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4613      	mov	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	440b      	add	r3, r1
 800287a:	3348      	adds	r3, #72	; 0x48
 800287c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	440b      	add	r3, r1
 8002886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002890:	1ad1      	subs	r1, r2, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4613      	mov	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4403      	add	r3, r0
 80028a0:	334c      	adds	r3, #76	; 0x4c
 80028a2:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4613      	mov	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	440b      	add	r3, r1
 80028b2:	335d      	adds	r3, #93	; 0x5d
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	68fa      	ldr	r2, [r7, #12]
 80028bc:	4613      	mov	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	440b      	add	r3, r1
 80028c6:	3358      	adds	r3, #88	; 0x58
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2301      	movs	r3, #1
 80028dc:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	333f      	adds	r3, #63	; 0x3f
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00a      	beq.n	800290a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	333f      	adds	r3, #63	; 0x3f
 8002904:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002906:	2b02      	cmp	r3, #2
 8002908:	d121      	bne.n	800294e <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	0151      	lsls	r1, r2, #5
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	440a      	add	r2, r1
 8002920:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f003 fe4e 	bl	80065d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	015a      	lsls	r2, r3, #5
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4413      	add	r3, r2
 8002942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002946:	461a      	mov	r2, r3
 8002948:	2310      	movs	r3, #16
 800294a:	6093      	str	r3, [r2, #8]
 800294c:	e070      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	440b      	add	r3, r1
 800295c:	333f      	adds	r3, #63	; 0x3f
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	2b03      	cmp	r3, #3
 8002962:	d12a      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	0151      	lsls	r1, r2, #5
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	440a      	add	r2, r1
 800297a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800297e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002982:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	335c      	adds	r3, #92	; 0x5c
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	b2d8      	uxtb	r0, r3
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	335c      	adds	r3, #92	; 0x5c
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	4601      	mov	r1, r0
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f007 f918 	bl	8009be8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029b8:	e03a      	b.n	8002a30 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	333f      	adds	r3, #63	; 0x3f
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d12f      	bne.n	8002a30 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	440b      	add	r3, r1
 80029de:	335c      	adds	r3, #92	; 0x5c
 80029e0:	2201      	movs	r2, #1
 80029e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	3350      	adds	r3, #80	; 0x50
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	f083 0301 	eor.w	r3, r3, #1
 80029fa:	b2d8      	uxtb	r0, r3
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	440b      	add	r3, r1
 8002a0a:	3350      	adds	r3, #80	; 0x50
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	b2d8      	uxtb	r0, r3
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	335c      	adds	r3, #92	; 0x5c
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	4601      	mov	r1, r0
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f007 f8dc 	bl	8009be8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3350      	adds	r3, #80	; 0x50
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2d8      	uxtb	r0, r3
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	3350      	adds	r3, #80	; 0x50
 8002a58:	4602      	mov	r2, r0
 8002a5a:	701a      	strb	r2, [r3, #0]
}
 8002a5c:	e1f7      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	f040 811a 	bne.w	8002caa <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	015a      	lsls	r2, r3, #5
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	0151      	lsls	r1, r2, #5
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	440a      	add	r2, r1
 8002a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a90:	f023 0302 	bic.w	r3, r3, #2
 8002a94:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	335d      	adds	r3, #93	; 0x5d
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d10a      	bne.n	8002ac2 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	335c      	adds	r3, #92	; 0x5c
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
 8002ac0:	e0d9      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	335d      	adds	r3, #93	; 0x5d
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d10a      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	335c      	adds	r3, #92	; 0x5c
 8002ae8:	2205      	movs	r2, #5
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e0c3      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	335d      	adds	r3, #93	; 0x5d
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b06      	cmp	r3, #6
 8002b02:	d00a      	beq.n	8002b1a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	4413      	add	r3, r2
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	440b      	add	r3, r1
 8002b12:	335d      	adds	r3, #93	; 0x5d
 8002b14:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d156      	bne.n	8002bc8 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4613      	mov	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4413      	add	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	440b      	add	r3, r1
 8002b28:	3358      	adds	r3, #88	; 0x58
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	1c59      	adds	r1, r3, #1
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	68fa      	ldr	r2, [r7, #12]
 8002b32:	4613      	mov	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4403      	add	r3, r0
 8002b3c:	3358      	adds	r3, #88	; 0x58
 8002b3e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3358      	adds	r3, #88	; 0x58
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d914      	bls.n	8002b80 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	3358      	adds	r3, #88	; 0x58
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	335c      	adds	r3, #92	; 0x5c
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e009      	b.n	8002b94 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	335c      	adds	r3, #92	; 0x5c
 8002b90:	2202      	movs	r2, #2
 8002b92:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002baa:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	015a      	lsls	r2, r3, #5
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e056      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	440b      	add	r3, r1
 8002bd6:	335d      	adds	r3, #93	; 0x5d
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d123      	bne.n	8002c26 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	335c      	adds	r3, #92	; 0x5c
 8002bee:	2202      	movs	r2, #2
 8002bf0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002c08:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c10:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	e027      	b.n	8002c76 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	335d      	adds	r3, #93	; 0x5d
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d11c      	bne.n	8002c76 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	4613      	mov	r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	4413      	add	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	440b      	add	r3, r1
 8002c4a:	3358      	adds	r3, #88	; 0x58
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	1c59      	adds	r1, r3, #1
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4613      	mov	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	4403      	add	r3, r0
 8002c5e:	3358      	adds	r3, #88	; 0x58
 8002c60:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	440b      	add	r3, r1
 8002c70:	335c      	adds	r3, #92	; 0x5c
 8002c72:	2204      	movs	r2, #4
 8002c74:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	015a      	lsls	r2, r3, #5
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c82:	461a      	mov	r2, r3
 8002c84:	2302      	movs	r3, #2
 8002c86:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b2d8      	uxtb	r0, r3
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	440b      	add	r3, r1
 8002c9a:	335c      	adds	r3, #92	; 0x5c
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	4601      	mov	r1, r0
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f006 ffa0 	bl	8009be8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002ca8:	e0d1      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	015a      	lsls	r2, r3, #5
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbc:	2b80      	cmp	r3, #128	; 0x80
 8002cbe:	d13e      	bne.n	8002d3e <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	015a      	lsls	r2, r3, #5
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	0151      	lsls	r1, r2, #5
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	440a      	add	r2, r1
 8002cd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cda:	f043 0302 	orr.w	r3, r3, #2
 8002cde:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3358      	adds	r3, #88	; 0x58
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	1c59      	adds	r1, r3, #1
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4403      	add	r3, r0
 8002d02:	3358      	adds	r3, #88	; 0x58
 8002d04:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	440b      	add	r3, r1
 8002d14:	335d      	adds	r3, #93	; 0x5d
 8002d16:	2206      	movs	r2, #6
 8002d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	4611      	mov	r1, r2
 8002d24:	4618      	mov	r0, r3
 8002d26:	f003 fc56 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	015a      	lsls	r2, r3, #5
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4413      	add	r3, r2
 8002d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d36:	461a      	mov	r2, r3
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	6093      	str	r3, [r2, #8]
}
 8002d3c:	e087      	b.n	8002e4e <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	015a      	lsls	r2, r3, #5
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	4413      	add	r3, r2
 8002d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b10      	cmp	r3, #16
 8002d52:	d17c      	bne.n	8002e4e <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	333f      	adds	r3, #63	; 0x3f
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d122      	bne.n	8002db0 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	00db      	lsls	r3, r3, #3
 8002d76:	440b      	add	r3, r1
 8002d78:	3358      	adds	r3, #88	; 0x58
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	0151      	lsls	r1, r2, #5
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	440a      	add	r2, r1
 8002d94:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f003 fc14 	bl	80065d6 <USB_HC_Halt>
 8002dae:	e045      	b.n	8002e3c <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	333f      	adds	r3, #63	; 0x3f
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	440b      	add	r3, r1
 8002dd4:	333f      	adds	r3, #63	; 0x3f
 8002dd6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d12f      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3358      	adds	r3, #88	; 0x58
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4413      	add	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	440b      	add	r3, r1
 8002e06:	335d      	adds	r3, #93	; 0x5d
 8002e08:	2203      	movs	r2, #3
 8002e0a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	0151      	lsls	r1, r2, #5
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	440a      	add	r2, r1
 8002e22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	b2d2      	uxtb	r2, r2
 8002e34:	4611      	mov	r1, r2
 8002e36:	4618      	mov	r0, r3
 8002e38:	f003 fbcd 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2310      	movs	r3, #16
 8002e4c:	6093      	str	r3, [r2, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 0304 	and.w	r3, r3, #4
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d119      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	015a      	lsls	r2, r3, #5
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e92:	461a      	mov	r2, r3
 8002e94:	2304      	movs	r3, #4
 8002e96:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	0151      	lsls	r1, r2, #5
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	440a      	add	r2, r1
 8002eae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eb2:	f043 0302 	orr.w	r3, r3, #2
 8002eb6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002eb8:	e33e      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0320 	and.w	r3, r3, #32
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d141      	bne.n	8002f54 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	015a      	lsls	r2, r3, #5
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002edc:	461a      	mov	r2, r3
 8002ede:	2320      	movs	r3, #32
 8002ee0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	333d      	adds	r3, #61	; 0x3d
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 831f 	bne.w	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	333d      	adds	r3, #61	; 0x3d
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	335c      	adds	r3, #92	; 0x5c
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	0151      	lsls	r1, r2, #5
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	440a      	add	r2, r1
 8002f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 fb42 	bl	80065d6 <USB_HC_Halt>
}
 8002f52:	e2f1      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d13f      	bne.n	8002fea <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	335d      	adds	r3, #93	; 0x5d
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	333d      	adds	r3, #61	; 0x3d
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f92:	6879      	ldr	r1, [r7, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3358      	adds	r3, #88	; 0x58
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fc0:	f043 0302 	orr.w	r3, r3, #2
 8002fc4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	4611      	mov	r1, r2
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f003 fb00 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2340      	movs	r3, #64	; 0x40
 8002fe6:	6093      	str	r3, [r2, #8]
}
 8002fe8:	e2a6      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003000:	d122      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	015a      	lsls	r2, r3, #5
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	4413      	add	r3, r2
 800300a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	0151      	lsls	r1, r2, #5
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	440a      	add	r2, r1
 8003018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	4611      	mov	r1, r2
 800302c:	4618      	mov	r0, r3
 800302e:	f003 fad2 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	015a      	lsls	r2, r3, #5
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	4413      	add	r3, r2
 800303a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303e:	461a      	mov	r2, r3
 8003040:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003044:	6093      	str	r3, [r2, #8]
}
 8003046:	e277      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	015a      	lsls	r2, r3, #5
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4413      	add	r3, r2
 8003050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b01      	cmp	r3, #1
 800305c:	d135      	bne.n	80030ca <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4613      	mov	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	440b      	add	r3, r1
 800306c:	3358      	adds	r3, #88	; 0x58
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	015a      	lsls	r2, r3, #5
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4413      	add	r3, r2
 800307a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	0151      	lsls	r1, r2, #5
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	440a      	add	r2, r1
 8003088:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800308c:	f043 0302 	orr.w	r3, r3, #2
 8003090:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	b2d2      	uxtb	r2, r2
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f003 fa9a 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	015a      	lsls	r2, r3, #5
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4413      	add	r3, r2
 80030aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ae:	461a      	mov	r2, r3
 80030b0:	2301      	movs	r3, #1
 80030b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	335d      	adds	r3, #93	; 0x5d
 80030c4:	2201      	movs	r2, #1
 80030c6:	701a      	strb	r2, [r3, #0]
}
 80030c8:	e236      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d12b      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	461a      	mov	r2, r3
 80030ee:	2308      	movs	r3, #8
 80030f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	0151      	lsls	r1, r2, #5
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	440a      	add	r2, r1
 8003108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f003 fa5a 	bl	80065d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4613      	mov	r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	440b      	add	r3, r1
 8003130:	335d      	adds	r3, #93	; 0x5d
 8003132:	2205      	movs	r2, #5
 8003134:	701a      	strb	r2, [r3, #0]
}
 8003136:	e1ff      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b10      	cmp	r3, #16
 800314c:	d155      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3358      	adds	r3, #88	; 0x58
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003162:	6879      	ldr	r1, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	440b      	add	r3, r1
 8003170:	335d      	adds	r3, #93	; 0x5d
 8003172:	2203      	movs	r2, #3
 8003174:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003176:	6879      	ldr	r1, [r7, #4]
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	440b      	add	r3, r1
 8003184:	333d      	adds	r3, #61	; 0x3d
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d114      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800318c:	6879      	ldr	r1, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	440b      	add	r3, r1
 800319a:	333c      	adds	r3, #60	; 0x3c
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d109      	bne.n	80031b6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	440b      	add	r3, r1
 80031b0:	333d      	adds	r3, #61	; 0x3d
 80031b2:	2201      	movs	r2, #1
 80031b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	0151      	lsls	r1, r2, #5
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	440a      	add	r2, r1
 80031cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d0:	f043 0302 	orr.w	r3, r3, #2
 80031d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f003 f9f8 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031f2:	461a      	mov	r2, r3
 80031f4:	2310      	movs	r3, #16
 80031f6:	6093      	str	r3, [r2, #8]
}
 80031f8:	e19e      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	4413      	add	r3, r2
 8003202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b80      	cmp	r3, #128	; 0x80
 800320e:	d12b      	bne.n	8003268 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	0151      	lsls	r1, r2, #5
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	440a      	add	r2, r1
 8003226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800322a:	f043 0302 	orr.w	r3, r3, #2
 800322e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	b2d2      	uxtb	r2, r2
 8003238:	4611      	mov	r1, r2
 800323a:	4618      	mov	r0, r3
 800323c:	f003 f9cb 	bl	80065d6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	440b      	add	r3, r1
 800324e:	335d      	adds	r3, #93	; 0x5d
 8003250:	2206      	movs	r2, #6
 8003252:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4413      	add	r3, r2
 800325c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003260:	461a      	mov	r2, r3
 8003262:	2380      	movs	r3, #128	; 0x80
 8003264:	6093      	str	r3, [r2, #8]
}
 8003266:	e167      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d135      	bne.n	80032ec <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	4413      	add	r3, r2
 8003288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	0151      	lsls	r1, r2, #5
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	440a      	add	r2, r1
 8003296:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800329a:	f043 0302 	orr.w	r3, r3, #2
 800329e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 f993 	bl	80065d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032bc:	461a      	mov	r2, r3
 80032be:	2310      	movs	r3, #16
 80032c0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	015a      	lsls	r2, r3, #5
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4413      	add	r3, r2
 80032ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ce:	461a      	mov	r2, r3
 80032d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4613      	mov	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	335d      	adds	r3, #93	; 0x5d
 80032e6:	2208      	movs	r2, #8
 80032e8:	701a      	strb	r2, [r3, #0]
}
 80032ea:	e125      	b.n	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b02      	cmp	r3, #2
 8003300:	f040 811a 	bne.w	8003538 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	0151      	lsls	r1, r2, #5
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	440a      	add	r2, r1
 800331a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800331e:	f023 0302 	bic.w	r3, r3, #2
 8003322:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	440b      	add	r3, r1
 8003332:	335d      	adds	r3, #93	; 0x5d
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d137      	bne.n	80033aa <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	4613      	mov	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	00db      	lsls	r3, r3, #3
 8003346:	440b      	add	r3, r1
 8003348:	335c      	adds	r3, #92	; 0x5c
 800334a:	2201      	movs	r2, #1
 800334c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	333f      	adds	r3, #63	; 0x3f
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d00b      	beq.n	800337c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	333f      	adds	r3, #63	; 0x3f
 8003374:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003376:	2b03      	cmp	r3, #3
 8003378:	f040 80c5 	bne.w	8003506 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3351      	adds	r3, #81	; 0x51
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2d8      	uxtb	r0, r3
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4613      	mov	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3351      	adds	r3, #81	; 0x51
 80033a4:	4602      	mov	r2, r0
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e0ad      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	335d      	adds	r3, #93	; 0x5d
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b03      	cmp	r3, #3
 80033be:	d10a      	bne.n	80033d6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	440b      	add	r3, r1
 80033ce:	335c      	adds	r3, #92	; 0x5c
 80033d0:	2202      	movs	r2, #2
 80033d2:	701a      	strb	r2, [r3, #0]
 80033d4:	e097      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	4613      	mov	r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	440b      	add	r3, r1
 80033e4:	335d      	adds	r3, #93	; 0x5d
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b04      	cmp	r3, #4
 80033ea:	d10a      	bne.n	8003402 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	335c      	adds	r3, #92	; 0x5c
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]
 8003400:	e081      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4613      	mov	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	440b      	add	r3, r1
 8003410:	335d      	adds	r3, #93	; 0x5d
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b05      	cmp	r3, #5
 8003416:	d10a      	bne.n	800342e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	440b      	add	r3, r1
 8003426:	335c      	adds	r3, #92	; 0x5c
 8003428:	2205      	movs	r2, #5
 800342a:	701a      	strb	r2, [r3, #0]
 800342c:	e06b      	b.n	8003506 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	440b      	add	r3, r1
 800343c:	335d      	adds	r3, #93	; 0x5d
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d00a      	beq.n	800345a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	440b      	add	r3, r1
 8003452:	335d      	adds	r3, #93	; 0x5d
 8003454:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003456:	2b08      	cmp	r3, #8
 8003458:	d155      	bne.n	8003506 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	3358      	adds	r3, #88	; 0x58
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	1c59      	adds	r1, r3, #1
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	4613      	mov	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	00db      	lsls	r3, r3, #3
 800347a:	4403      	add	r3, r0
 800347c:	3358      	adds	r3, #88	; 0x58
 800347e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	3358      	adds	r3, #88	; 0x58
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b03      	cmp	r3, #3
 8003494:	d914      	bls.n	80034c0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4613      	mov	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	00db      	lsls	r3, r3, #3
 80034a2:	440b      	add	r3, r1
 80034a4:	3358      	adds	r3, #88	; 0x58
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	335c      	adds	r3, #92	; 0x5c
 80034ba:	2204      	movs	r2, #4
 80034bc:	701a      	strb	r2, [r3, #0]
 80034be:	e009      	b.n	80034d4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335c      	adds	r3, #92	; 0x5c
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	461a      	mov	r2, r3
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	015a      	lsls	r2, r3, #5
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4413      	add	r3, r2
 800350e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003512:	461a      	mov	r2, r3
 8003514:	2302      	movs	r3, #2
 8003516:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	b2d8      	uxtb	r0, r3
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	440b      	add	r3, r1
 800352a:	335c      	adds	r3, #92	; 0x5c
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	461a      	mov	r2, r3
 8003530:	4601      	mov	r1, r0
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f006 fb58 	bl	8009be8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003538:	bf00      	nop
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 030f 	and.w	r3, r3, #15
 8003560:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	0c5b      	lsrs	r3, r3, #17
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003574:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d003      	beq.n	8003584 <HCD_RXQLVL_IRQHandler+0x44>
 800357c:	2b05      	cmp	r3, #5
 800357e:	f000 8082 	beq.w	8003686 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003582:	e083      	b.n	800368c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d07f      	beq.n	800368a <HCD_RXQLVL_IRQHandler+0x14a>
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4613      	mov	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4413      	add	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	440b      	add	r3, r1
 8003598:	3344      	adds	r3, #68	; 0x44
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d074      	beq.n	800368a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6818      	ldr	r0, [r3, #0]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	69ba      	ldr	r2, [r7, #24]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	3344      	adds	r3, #68	; 0x44
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	b292      	uxth	r2, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f002 fbab 	bl	8005d16 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	440b      	add	r3, r1
 80035ce:	3344      	adds	r3, #68	; 0x44
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	18d1      	adds	r1, r2, r3
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4403      	add	r3, r0
 80035e4:	3344      	adds	r3, #68	; 0x44
 80035e6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	440b      	add	r3, r1
 80035f6:	334c      	adds	r3, #76	; 0x4c
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	18d1      	adds	r1, r2, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4403      	add	r3, r0
 800360c:	334c      	adds	r3, #76	; 0x4c
 800360e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	4b1d      	ldr	r3, [pc, #116]	; (8003694 <HCD_RXQLVL_IRQHandler+0x154>)
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d031      	beq.n	800368a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800363c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003644:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	015a      	lsls	r2, r3, #5
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	4413      	add	r3, r2
 800364e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003652:	461a      	mov	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	3350      	adds	r3, #80	; 0x50
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2d8      	uxtb	r0, r3
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4613      	mov	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	4413      	add	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	440b      	add	r3, r1
 800367e:	3350      	adds	r3, #80	; 0x50
 8003680:	4602      	mov	r2, r0
 8003682:	701a      	strb	r2, [r3, #0]
      break;
 8003684:	e001      	b.n	800368a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800368a:	bf00      	nop
  }
}
 800368c:	bf00      	nop
 800368e:	3728      	adds	r7, #40	; 0x28
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	1ff80000 	.word	0x1ff80000

08003698 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036c4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d10b      	bne.n	80036e8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d102      	bne.n	80036e0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f006 fa68 	bl	8009bb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f043 0302 	orr.w	r3, r3, #2
 80036e6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d132      	bne.n	8003758 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b04      	cmp	r3, #4
 8003702:	d126      	bne.n	8003752 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d113      	bne.n	8003734 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003716:	d106      	bne.n	8003726 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2102      	movs	r1, #2
 800371e:	4618      	mov	r0, r3
 8003720:	f002 fc34 	bl	8005f8c <USB_InitFSLSPClkSel>
 8003724:	e011      	b.n	800374a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f002 fc2d 	bl	8005f8c <USB_InitFSLSPClkSel>
 8003732:	e00a      	b.n	800374a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d106      	bne.n	800374a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003742:	461a      	mov	r2, r3
 8003744:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003748:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f006 fa5a 	bl	8009c04 <HAL_HCD_PortEnabled_Callback>
 8003750:	e002      	b.n	8003758 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f006 fa64 	bl	8009c20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	2b20      	cmp	r3, #32
 8003760:	d103      	bne.n	800376a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f043 0320 	orr.w	r3, r3, #32
 8003768:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003770:	461a      	mov	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6013      	str	r3, [r2, #0]
}
 8003776:	bf00      	nop
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d101      	bne.n	8003792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e11f      	b.n	80039d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d106      	bne.n	80037ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7fd f9f2 	bl	8000b90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2224      	movs	r2, #36	; 0x24
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 0201 	bic.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037e4:	f001 f9d4 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80037e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	4a7b      	ldr	r2, [pc, #492]	; (80039dc <HAL_I2C_Init+0x25c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d807      	bhi.n	8003804 <HAL_I2C_Init+0x84>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4a7a      	ldr	r2, [pc, #488]	; (80039e0 <HAL_I2C_Init+0x260>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	bf94      	ite	ls
 80037fc:	2301      	movls	r3, #1
 80037fe:	2300      	movhi	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e006      	b.n	8003812 <HAL_I2C_Init+0x92>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4a77      	ldr	r2, [pc, #476]	; (80039e4 <HAL_I2C_Init+0x264>)
 8003808:	4293      	cmp	r3, r2
 800380a:	bf94      	ite	ls
 800380c:	2301      	movls	r3, #1
 800380e:	2300      	movhi	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e0db      	b.n	80039d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a72      	ldr	r2, [pc, #456]	; (80039e8 <HAL_I2C_Init+0x268>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0c9b      	lsrs	r3, r3, #18
 8003824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a64      	ldr	r2, [pc, #400]	; (80039dc <HAL_I2C_Init+0x25c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d802      	bhi.n	8003854 <HAL_I2C_Init+0xd4>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3301      	adds	r3, #1
 8003852:	e009      	b.n	8003868 <HAL_I2C_Init+0xe8>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800385a:	fb02 f303 	mul.w	r3, r2, r3
 800385e:	4a63      	ldr	r2, [pc, #396]	; (80039ec <HAL_I2C_Init+0x26c>)
 8003860:	fba2 2303 	umull	r2, r3, r2, r3
 8003864:	099b      	lsrs	r3, r3, #6
 8003866:	3301      	adds	r3, #1
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	6812      	ldr	r2, [r2, #0]
 800386c:	430b      	orrs	r3, r1
 800386e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800387a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4956      	ldr	r1, [pc, #344]	; (80039dc <HAL_I2C_Init+0x25c>)
 8003884:	428b      	cmp	r3, r1
 8003886:	d80d      	bhi.n	80038a4 <HAL_I2C_Init+0x124>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e59      	subs	r1, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	fbb1 f3f3 	udiv	r3, r1, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b04      	cmp	r3, #4
 800389e:	bf38      	it	cc
 80038a0:	2304      	movcc	r3, #4
 80038a2:	e04f      	b.n	8003944 <HAL_I2C_Init+0x1c4>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d111      	bne.n	80038d0 <HAL_I2C_Init+0x150>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1e58      	subs	r0, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e012      	b.n	80038f6 <HAL_I2C_Init+0x176>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1e58      	subs	r0, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	460b      	mov	r3, r1
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	0099      	lsls	r1, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e6:	3301      	adds	r3, #1
 80038e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf0c      	ite	eq
 80038f0:	2301      	moveq	r3, #1
 80038f2:	2300      	movne	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x17e>
 80038fa:	2301      	movs	r3, #1
 80038fc:	e022      	b.n	8003944 <HAL_I2C_Init+0x1c4>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10e      	bne.n	8003924 <HAL_I2C_Init+0x1a4>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1e58      	subs	r0, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6859      	ldr	r1, [r3, #4]
 800390e:	460b      	mov	r3, r1
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	440b      	add	r3, r1
 8003914:	fbb0 f3f3 	udiv	r3, r0, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	e00f      	b.n	8003944 <HAL_I2C_Init+0x1c4>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	1e58      	subs	r0, r3, #1
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6859      	ldr	r1, [r3, #4]
 800392c:	460b      	mov	r3, r1
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	0099      	lsls	r1, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	fbb0 f3f3 	udiv	r3, r0, r3
 800393a:	3301      	adds	r3, #1
 800393c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	6809      	ldr	r1, [r1, #0]
 8003948:	4313      	orrs	r3, r2
 800394a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69da      	ldr	r2, [r3, #28]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6911      	ldr	r1, [r2, #16]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	430b      	orrs	r3, r1
 8003986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695a      	ldr	r2, [r3, #20]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f042 0201 	orr.w	r2, r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2220      	movs	r2, #32
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	000186a0 	.word	0x000186a0
 80039e0:	001e847f 	.word	0x001e847f
 80039e4:	003d08ff 	.word	0x003d08ff
 80039e8:	431bde83 	.word	0x431bde83
 80039ec:	10624dd3 	.word	0x10624dd3

080039f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b088      	sub	sp, #32
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e128      	b.n	8003c54 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d109      	bne.n	8003a22 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a90      	ldr	r2, [pc, #576]	; (8003c5c <HAL_I2S_Init+0x26c>)
 8003a1a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f7fd f945 	bl	8000cac <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a38:	f023 030f 	bic.w	r3, r3, #15
 8003a3c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2202      	movs	r2, #2
 8003a44:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d060      	beq.n	8003b10 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d102      	bne.n	8003a5c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a56:	2310      	movs	r3, #16
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	e001      	b.n	8003a60 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b20      	cmp	r3, #32
 8003a66:	d802      	bhi.n	8003a6e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f001 f992 	bl	8004d98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a74:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a7e:	d125      	bne.n	8003acc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d010      	beq.n	8003aaa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	e01f      	b.n	8003aea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	005b      	lsls	r3, r3, #1
 8003abc:	461a      	mov	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac6:	3305      	adds	r3, #5
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e00e      	b.n	8003aea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	461a      	mov	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4a5c      	ldr	r2, [pc, #368]	; (8003c60 <HAL_I2S_Init+0x270>)
 8003aee:	fba2 2303 	umull	r2, r3, r2, r3
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	085b      	lsrs	r3, r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	61bb      	str	r3, [r7, #24]
 8003b0e:	e003      	b.n	8003b18 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b10:	2302      	movs	r3, #2
 8003b12:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b14:	2300      	movs	r3, #0
 8003b16:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d902      	bls.n	8003b24 <HAL_I2S_Init+0x134>
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	2bff      	cmp	r3, #255	; 0xff
 8003b22:	d907      	bls.n	8003b34 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f043 0210 	orr.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e08f      	b.n	8003c54 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	ea42 0103 	orr.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b52:	f023 030f 	bic.w	r3, r3, #15
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6851      	ldr	r1, [r2, #4]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6892      	ldr	r2, [r2, #8]
 8003b5e:	4311      	orrs	r1, r2
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68d2      	ldr	r2, [r2, #12]
 8003b64:	4311      	orrs	r1, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6992      	ldr	r2, [r2, #24]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b76:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d161      	bne.n	8003c44 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a38      	ldr	r2, [pc, #224]	; (8003c64 <HAL_I2S_Init+0x274>)
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2S_Init+0x1a4>
 8003b90:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003b92:	e001      	b.n	8003b98 <HAL_I2S_Init+0x1a8>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4932      	ldr	r1, [pc, #200]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003ba0:	428a      	cmp	r2, r1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_I2S_Init+0x1b8>
 8003ba4:	4a31      	ldr	r2, [pc, #196]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003ba6:	e001      	b.n	8003bac <HAL_I2S_Init+0x1bc>
 8003ba8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003bac:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bb0:	f023 030f 	bic.w	r3, r3, #15
 8003bb4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_I2S_Init+0x1d4>
 8003bc0:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003bc2:	e001      	b.n	8003bc8 <HAL_I2S_Init+0x1d8>
 8003bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc8:	2202      	movs	r2, #2
 8003bca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a25      	ldr	r2, [pc, #148]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d101      	bne.n	8003bda <HAL_I2S_Init+0x1ea>
 8003bd6:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003bd8:	e001      	b.n	8003bde <HAL_I2S_Init+0x1ee>
 8003bda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bea:	d003      	beq.n	8003bf4 <HAL_I2S_Init+0x204>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d103      	bne.n	8003bfc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bf8:	613b      	str	r3, [r7, #16]
 8003bfa:	e001      	b.n	8003c00 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	b299      	uxth	r1, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003c16:	4303      	orrs	r3, r0
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	897b      	ldrh	r3, [r7, #10]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c2c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a0d      	ldr	r2, [pc, #52]	; (8003c68 <HAL_I2S_Init+0x278>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d101      	bne.n	8003c3c <HAL_I2S_Init+0x24c>
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_I2S_Init+0x27c>)
 8003c3a:	e001      	b.n	8003c40 <HAL_I2S_Init+0x250>
 8003c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c40:	897a      	ldrh	r2, [r7, #10]
 8003c42:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3720      	adds	r7, #32
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	08003d53 	.word	0x08003d53
 8003c60:	cccccccd 	.word	0xcccccccd
 8003c64:	08003e69 	.word	0x08003e69
 8003c68:	40003800 	.word	0x40003800
 8003c6c:	40003400 	.word	0x40003400

08003c70 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	881a      	ldrh	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c9a      	adds	r2, r3, #2
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10e      	bne.n	8003cec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685a      	ldr	r2, [r3, #4]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003cdc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fc fbf6 	bl	80004d8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d06:	b292      	uxth	r2, r2
 8003d08:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0e:	1c9a      	adds	r2, r3, #2
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10e      	bne.n	8003d4a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d3a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff93 	bl	8003c70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d13a      	bne.n	8003de4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d109      	bne.n	8003d8c <I2S_IRQHandler+0x3a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d102      	bne.n	8003d8c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ffb4 	bl	8003cf4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b40      	cmp	r3, #64	; 0x40
 8003d94:	d126      	bne.n	8003de4 <I2S_IRQHandler+0x92>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0320 	and.w	r3, r3, #32
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d11f      	bne.n	8003de4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003db4:	2300      	movs	r3, #0
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	613b      	str	r3, [r7, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd6:	f043 0202 	orr.w	r2, r3, #2
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7ff ff50 	bl	8003c84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b03      	cmp	r3, #3
 8003dee:	d136      	bne.n	8003e5e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d109      	bne.n	8003e0e <I2S_IRQHandler+0xbc>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b80      	cmp	r3, #128	; 0x80
 8003e06:	d102      	bne.n	8003e0e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f7ff ff45 	bl	8003c98 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d122      	bne.n	8003e5e <I2S_IRQHandler+0x10c>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d11b      	bne.n	8003e5e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e34:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0204 	orr.w	r2, r3, #4
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff ff13 	bl	8003c84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e5e:	bf00      	nop
 8003e60:	3718      	adds	r7, #24
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4aa2      	ldr	r2, [pc, #648]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e82:	4ba2      	ldr	r3, [pc, #648]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e84:	e001      	b.n	8003e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a9b      	ldr	r2, [pc, #620]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d101      	bne.n	8003ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003ea0:	4b9a      	ldr	r3, [pc, #616]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ea2:	e001      	b.n	8003ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003eb4:	d004      	beq.n	8003ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f040 8099 	bne.w	8003ff2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d107      	bne.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f925 	bl	8004124 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f9c8 	bl	8004284 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d13a      	bne.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d035      	beq.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a7e      	ldr	r2, [pc, #504]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f12:	4b7e      	ldr	r3, [pc, #504]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4979      	ldr	r1, [pc, #484]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f22:	428b      	cmp	r3, r1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f26:	4b79      	ldr	r3, [pc, #484]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f28:	e001      	b.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f32:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f42:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	60fb      	str	r3, [r7, #12]
 8003f58:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f66:	f043 0202 	orr.w	r2, r3, #2
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fe88 	bl	8003c84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	f040 80be 	bne.w	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f000 80b8 	beq.w	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f9a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a59      	ldr	r2, [pc, #356]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d101      	bne.n	8003faa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003fa6:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fa8:	e001      	b.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4954      	ldr	r1, [pc, #336]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fb6:	428b      	cmp	r3, r1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fba:	4b54      	ldr	r3, [pc, #336]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fbc:	e001      	b.n	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003fbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fc6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fc8:	2300      	movs	r3, #0
 8003fca:	60bb      	str	r3, [r7, #8]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe2:	f043 0204 	orr.w	r2, r3, #4
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f7ff fe4a 	bl	8003c84 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff0:	e084      	b.n	80040fc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d107      	bne.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f8be 	bl	8004188 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d107      	bne.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8fd 	bl	8004220 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402c:	2b40      	cmp	r3, #64	; 0x40
 800402e:	d12f      	bne.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d02a      	beq.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004048:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a2e      	ldr	r2, [pc, #184]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d101      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004054:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004056:	e001      	b.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4929      	ldr	r1, [pc, #164]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004064:	428b      	cmp	r3, r1
 8004066:	d101      	bne.n	800406c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004068:	4b28      	ldr	r3, [pc, #160]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800406a:	e001      	b.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800406c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004070:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004074:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2201      	movs	r2, #1
 800407a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	f043 0202 	orr.w	r2, r3, #2
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7ff fdfa 	bl	8003c84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b08      	cmp	r3, #8
 8004098:	d131      	bne.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d02c      	beq.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a17      	ldr	r2, [pc, #92]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80040ae:	4b17      	ldr	r3, [pc, #92]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040b0:	e001      	b.n	80040b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80040b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4912      	ldr	r1, [pc, #72]	; (8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80040be:	428b      	cmp	r3, r1
 80040c0:	d101      	bne.n	80040c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80040c4:	e001      	b.n	80040ca <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80040c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040ce:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040de:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ec:	f043 0204 	orr.w	r2, r3, #4
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fdc5 	bl	8003c84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040fa:	e000      	b.n	80040fe <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040fc:	bf00      	nop
}
 80040fe:	bf00      	nop
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40003800 	.word	0x40003800
 800410c:	40003400 	.word	0x40003400

08004110 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004130:	1c99      	adds	r1, r3, #2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6251      	str	r1, [r2, #36]	; 0x24
 8004136:	881a      	ldrh	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004150:	b29b      	uxth	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d113      	bne.n	800417e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004164:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff ffc9 	bl	8004110 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	1c99      	adds	r1, r3, #2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6251      	str	r1, [r2, #36]	; 0x24
 800419a:	8819      	ldrh	r1, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <I2SEx_TxISR_I2SExt+0x90>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d101      	bne.n	80041aa <I2SEx_TxISR_I2SExt+0x22>
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <I2SEx_TxISR_I2SExt+0x94>)
 80041a8:	e001      	b.n	80041ae <I2SEx_TxISR_I2SExt+0x26>
 80041aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ae:	460a      	mov	r2, r1
 80041b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d121      	bne.n	800420e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <I2SEx_TxISR_I2SExt+0x90>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d101      	bne.n	80041d8 <I2SEx_TxISR_I2SExt+0x50>
 80041d4:	4b11      	ldr	r3, [pc, #68]	; (800421c <I2SEx_TxISR_I2SExt+0x94>)
 80041d6:	e001      	b.n	80041dc <I2SEx_TxISR_I2SExt+0x54>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	490d      	ldr	r1, [pc, #52]	; (8004218 <I2SEx_TxISR_I2SExt+0x90>)
 80041e4:	428b      	cmp	r3, r1
 80041e6:	d101      	bne.n	80041ec <I2SEx_TxISR_I2SExt+0x64>
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <I2SEx_TxISR_I2SExt+0x94>)
 80041ea:	e001      	b.n	80041f0 <I2SEx_TxISR_I2SExt+0x68>
 80041ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80041f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041fa:	b29b      	uxth	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d106      	bne.n	800420e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff ff81 	bl	8004110 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40003800 	.word	0x40003800
 800421c:	40003400 	.word	0x40003400

08004220 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68d8      	ldr	r0, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	1c99      	adds	r1, r3, #2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004238:	b282      	uxth	r2, r0
 800423a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b01      	subs	r3, #1
 8004244:	b29a      	uxth	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800424e:	b29b      	uxth	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d113      	bne.n	800427c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004262:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ff4a 	bl	8004110 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800427c:	bf00      	nop
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <I2SEx_RxISR_I2SExt+0x90>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d101      	bne.n	800429a <I2SEx_RxISR_I2SExt+0x16>
 8004296:	4b20      	ldr	r3, [pc, #128]	; (8004318 <I2SEx_RxISR_I2SExt+0x94>)
 8004298:	e001      	b.n	800429e <I2SEx_RxISR_I2SExt+0x1a>
 800429a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800429e:	68d8      	ldr	r0, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a4:	1c99      	adds	r1, r3, #2
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80042aa:	b282      	uxth	r2, r0
 80042ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <I2SEx_RxISR_I2SExt+0x90>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <I2SEx_RxISR_I2SExt+0x50>
 80042d0:	4b11      	ldr	r3, [pc, #68]	; (8004318 <I2SEx_RxISR_I2SExt+0x94>)
 80042d2:	e001      	b.n	80042d8 <I2SEx_RxISR_I2SExt+0x54>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	490d      	ldr	r1, [pc, #52]	; (8004314 <I2SEx_RxISR_I2SExt+0x90>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d101      	bne.n	80042e8 <I2SEx_RxISR_I2SExt+0x64>
 80042e4:	4b0c      	ldr	r3, [pc, #48]	; (8004318 <I2SEx_RxISR_I2SExt+0x94>)
 80042e6:	e001      	b.n	80042ec <I2SEx_RxISR_I2SExt+0x68>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042ec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff03 	bl	8004110 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40003800 	.word	0x40003800
 8004318:	40003400 	.word	0x40003400

0800431c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e25b      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d075      	beq.n	8004426 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800433a:	4ba3      	ldr	r3, [pc, #652]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b04      	cmp	r3, #4
 8004344:	d00c      	beq.n	8004360 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004346:	4ba0      	ldr	r3, [pc, #640]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800434e:	2b08      	cmp	r3, #8
 8004350:	d112      	bne.n	8004378 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004352:	4b9d      	ldr	r3, [pc, #628]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800435e:	d10b      	bne.n	8004378 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004360:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d05b      	beq.n	8004424 <HAL_RCC_OscConfig+0x108>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d157      	bne.n	8004424 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e236      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d106      	bne.n	8004390 <HAL_RCC_OscConfig+0x74>
 8004382:	4b91      	ldr	r3, [pc, #580]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a90      	ldr	r2, [pc, #576]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	e01d      	b.n	80043cc <HAL_RCC_OscConfig+0xb0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x98>
 800439a:	4b8b      	ldr	r3, [pc, #556]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a8a      	ldr	r2, [pc, #552]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b88      	ldr	r3, [pc, #544]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a87      	ldr	r2, [pc, #540]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e00b      	b.n	80043cc <HAL_RCC_OscConfig+0xb0>
 80043b4:	4b84      	ldr	r3, [pc, #528]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a83      	ldr	r2, [pc, #524]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	4b81      	ldr	r3, [pc, #516]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a80      	ldr	r2, [pc, #512]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d013      	beq.n	80043fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fc fefc 	bl	80011d0 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043dc:	f7fc fef8 	bl	80011d0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b64      	cmp	r3, #100	; 0x64
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e1fb      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ee:	4b76      	ldr	r3, [pc, #472]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0xc0>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fc:	f7fc fee8 	bl	80011d0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004404:	f7fc fee4 	bl	80011d0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b64      	cmp	r3, #100	; 0x64
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e1e7      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004416:	4b6c      	ldr	r3, [pc, #432]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0xe8>
 8004422:	e000      	b.n	8004426 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d063      	beq.n	80044fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004432:	4b65      	ldr	r3, [pc, #404]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00b      	beq.n	8004456 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443e:	4b62      	ldr	r3, [pc, #392]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004446:	2b08      	cmp	r3, #8
 8004448:	d11c      	bne.n	8004484 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800444a:	4b5f      	ldr	r3, [pc, #380]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d116      	bne.n	8004484 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004456:	4b5c      	ldr	r3, [pc, #368]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_RCC_OscConfig+0x152>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d001      	beq.n	800446e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e1bb      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800446e:	4b56      	ldr	r3, [pc, #344]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4952      	ldr	r1, [pc, #328]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800447e:	4313      	orrs	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004482:	e03a      	b.n	80044fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800448c:	4b4f      	ldr	r3, [pc, #316]	; (80045cc <HAL_RCC_OscConfig+0x2b0>)
 800448e:	2201      	movs	r2, #1
 8004490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fc fe9d 	bl	80011d0 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	e008      	b.n	80044ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800449a:	f7fc fe99 	bl	80011d0 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d901      	bls.n	80044ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e19c      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ac:	4b46      	ldr	r3, [pc, #280]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0f0      	beq.n	800449a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044b8:	4b43      	ldr	r3, [pc, #268]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	4940      	ldr	r1, [pc, #256]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]
 80044cc:	e015      	b.n	80044fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ce:	4b3f      	ldr	r3, [pc, #252]	; (80045cc <HAL_RCC_OscConfig+0x2b0>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d4:	f7fc fe7c 	bl	80011d0 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044dc:	f7fc fe78 	bl	80011d0 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e17b      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ee:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b00      	cmp	r3, #0
 8004504:	d030      	beq.n	8004568 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d016      	beq.n	800453c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800450e:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_RCC_OscConfig+0x2b4>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004514:	f7fc fe5c 	bl	80011d0 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800451c:	f7fc fe58 	bl	80011d0 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e15b      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800452e:	4b26      	ldr	r3, [pc, #152]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004530:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d0f0      	beq.n	800451c <HAL_RCC_OscConfig+0x200>
 800453a:	e015      	b.n	8004568 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800453c:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_RCC_OscConfig+0x2b4>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004542:	f7fc fe45 	bl	80011d0 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454a:	f7fc fe41 	bl	80011d0 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e144      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800455e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80a0 	beq.w	80046b6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458e:	4a0e      	ldr	r2, [pc, #56]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	; 0x40
 8004596:	4b0c      	ldr	r3, [pc, #48]	; (80045c8 <HAL_RCC_OscConfig+0x2ac>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_OscConfig+0x2b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d121      	bne.n	80045f6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <HAL_RCC_OscConfig+0x2b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a07      	ldr	r2, [pc, #28]	; (80045d4 <HAL_RCC_OscConfig+0x2b8>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fc fe07 	bl	80011d0 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	e011      	b.n	80045ea <HAL_RCC_OscConfig+0x2ce>
 80045c6:	bf00      	nop
 80045c8:	40023800 	.word	0x40023800
 80045cc:	42470000 	.word	0x42470000
 80045d0:	42470e80 	.word	0x42470e80
 80045d4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d8:	f7fc fdfa 	bl	80011d0 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0fd      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ea:	4b81      	ldr	r3, [pc, #516]	; (80047f0 <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0f0      	beq.n	80045d8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d106      	bne.n	800460c <HAL_RCC_OscConfig+0x2f0>
 80045fe:	4b7d      	ldr	r3, [pc, #500]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004602:	4a7c      	ldr	r2, [pc, #496]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	; 0x70
 800460a:	e01c      	b.n	8004646 <HAL_RCC_OscConfig+0x32a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b05      	cmp	r3, #5
 8004612:	d10c      	bne.n	800462e <HAL_RCC_OscConfig+0x312>
 8004614:	4b77      	ldr	r3, [pc, #476]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	4a76      	ldr	r2, [pc, #472]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 800461a:	f043 0304 	orr.w	r3, r3, #4
 800461e:	6713      	str	r3, [r2, #112]	; 0x70
 8004620:	4b74      	ldr	r3, [pc, #464]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004624:	4a73      	ldr	r2, [pc, #460]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004626:	f043 0301 	orr.w	r3, r3, #1
 800462a:	6713      	str	r3, [r2, #112]	; 0x70
 800462c:	e00b      	b.n	8004646 <HAL_RCC_OscConfig+0x32a>
 800462e:	4b71      	ldr	r3, [pc, #452]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004632:	4a70      	ldr	r2, [pc, #448]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004634:	f023 0301 	bic.w	r3, r3, #1
 8004638:	6713      	str	r3, [r2, #112]	; 0x70
 800463a:	4b6e      	ldr	r3, [pc, #440]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a6d      	ldr	r2, [pc, #436]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004640:	f023 0304 	bic.w	r3, r3, #4
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d015      	beq.n	800467a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464e:	f7fc fdbf 	bl	80011d0 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004654:	e00a      	b.n	800466c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004656:	f7fc fdbb 	bl	80011d0 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	f241 3288 	movw	r2, #5000	; 0x1388
 8004664:	4293      	cmp	r3, r2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0bc      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466c:	4b61      	ldr	r3, [pc, #388]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 800466e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004670:	f003 0302 	and.w	r3, r3, #2
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0ee      	beq.n	8004656 <HAL_RCC_OscConfig+0x33a>
 8004678:	e014      	b.n	80046a4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467a:	f7fc fda9 	bl	80011d0 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004680:	e00a      	b.n	8004698 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004682:	f7fc fda5 	bl	80011d0 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004690:	4293      	cmp	r3, r2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e0a6      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004698:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 800469a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ee      	bne.n	8004682 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d105      	bne.n	80046b6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046aa:	4b52      	ldr	r3, [pc, #328]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	4a51      	ldr	r2, [pc, #324]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	699b      	ldr	r3, [r3, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8092 	beq.w	80047e4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c0:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d05c      	beq.n	8004786 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b02      	cmp	r3, #2
 80046d2:	d141      	bne.n	8004758 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d4:	4b48      	ldr	r3, [pc, #288]	; (80047f8 <HAL_RCC_OscConfig+0x4dc>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046da:	f7fc fd79 	bl	80011d0 <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e0:	e008      	b.n	80046f4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e2:	f7fc fd75 	bl	80011d0 <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e078      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f4:	4b3f      	ldr	r3, [pc, #252]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1f0      	bne.n	80046e2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	019b      	lsls	r3, r3, #6
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004716:	085b      	lsrs	r3, r3, #1
 8004718:	3b01      	subs	r3, #1
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	431a      	orrs	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	4933      	ldr	r1, [pc, #204]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472a:	4b33      	ldr	r3, [pc, #204]	; (80047f8 <HAL_RCC_OscConfig+0x4dc>)
 800472c:	2201      	movs	r2, #1
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7fc fd4e 	bl	80011d0 <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004738:	f7fc fd4a 	bl	80011d0 <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e04d      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x41c>
 8004756:	e045      	b.n	80047e4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <HAL_RCC_OscConfig+0x4dc>)
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475e:	f7fc fd37 	bl	80011d0 <HAL_GetTick>
 8004762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fc fd33 	bl	80011d0 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e036      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x44a>
 8004784:	e02e      	b.n	80047e4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e029      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <HAL_RCC_OscConfig+0x4d8>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d11c      	bne.n	80047e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d115      	bne.n	80047e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047ba:	4013      	ands	r3, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d10d      	bne.n	80047e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d106      	bne.n	80047e0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40007000 	.word	0x40007000
 80047f4:	40023800 	.word	0x40023800
 80047f8:	42470060 	.word	0x42470060

080047fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0cc      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004810:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 030f 	and.w	r3, r3, #15
 8004818:	683a      	ldr	r2, [r7, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d90c      	bls.n	8004838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481e:	4b65      	ldr	r3, [pc, #404]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004826:	4b63      	ldr	r3, [pc, #396]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	429a      	cmp	r2, r3
 8004832:	d001      	beq.n	8004838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0b8      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004850:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	4a58      	ldr	r2, [pc, #352]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800485a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004868:	4b53      	ldr	r3, [pc, #332]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a52      	ldr	r2, [pc, #328]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004872:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004874:	4b50      	ldr	r3, [pc, #320]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	494d      	ldr	r1, [pc, #308]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b00      	cmp	r3, #0
 8004890:	d044      	beq.n	800491c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489a:	4b47      	ldr	r3, [pc, #284]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d119      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e07f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d003      	beq.n	80048ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d107      	bne.n	80048ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ba:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d109      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ca:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e067      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048da:	4b37      	ldr	r3, [pc, #220]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f023 0203 	bic.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	4934      	ldr	r1, [pc, #208]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048ec:	f7fc fc70 	bl	80011d0 <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f2:	e00a      	b.n	800490a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f4:	f7fc fc6c 	bl	80011d0 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004902:	4293      	cmp	r3, r2
 8004904:	d901      	bls.n	800490a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e04f      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	4b2b      	ldr	r3, [pc, #172]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 020c 	and.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	429a      	cmp	r2, r3
 800491a:	d1eb      	bne.n	80048f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800491c:	4b25      	ldr	r3, [pc, #148]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 030f 	and.w	r3, r3, #15
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d20c      	bcs.n	8004944 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b22      	ldr	r3, [pc, #136]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 030f 	and.w	r3, r3, #15
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e032      	b.n	80049aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0304 	and.w	r3, r3, #4
 800494c:	2b00      	cmp	r3, #0
 800494e:	d008      	beq.n	8004962 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004950:	4b19      	ldr	r3, [pc, #100]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4916      	ldr	r1, [pc, #88]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	4313      	orrs	r3, r2
 8004960:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0308 	and.w	r3, r3, #8
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	490e      	ldr	r1, [pc, #56]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800497e:	4313      	orrs	r3, r2
 8004980:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004982:	f000 f821 	bl	80049c8 <HAL_RCC_GetSysClockFreq>
 8004986:	4601      	mov	r1, r0
 8004988:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_RCC_ClockConfig+0x1bc>)
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	091b      	lsrs	r3, r3, #4
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <HAL_RCC_ClockConfig+0x1c0>)
 8004994:	5cd3      	ldrb	r3, [r2, r3]
 8004996:	fa21 f303 	lsr.w	r3, r1, r3
 800499a:	4a09      	ldr	r2, [pc, #36]	; (80049c0 <HAL_RCC_ClockConfig+0x1c4>)
 800499c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_RCC_ClockConfig+0x1c8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc fbd0 	bl	8001148 <HAL_InitTick>

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40023c00 	.word	0x40023c00
 80049b8:	40023800 	.word	0x40023800
 80049bc:	0800a2b8 	.word	0x0800a2b8
 80049c0:	20000000 	.word	0x20000000
 80049c4:	20000004 	.word	0x20000004

080049c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	607b      	str	r3, [r7, #4]
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	2300      	movs	r3, #0
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049de:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d007      	beq.n	80049fa <HAL_RCC_GetSysClockFreq+0x32>
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d008      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x38>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f040 80b4 	bne.w	8004b5c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f4:	4b5e      	ldr	r3, [pc, #376]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80049f6:	60bb      	str	r3, [r7, #8]
       break;
 80049f8:	e0b3      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049fa:	4b5e      	ldr	r3, [pc, #376]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80049fc:	60bb      	str	r3, [r7, #8]
      break;
 80049fe:	e0b0      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a00:	4b5a      	ldr	r3, [pc, #360]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a08:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0a:	4b58      	ldr	r3, [pc, #352]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d04a      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a16:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	f04f 0400 	mov.w	r4, #0
 8004a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	ea03 0501 	and.w	r5, r3, r1
 8004a2c:	ea04 0602 	and.w	r6, r4, r2
 8004a30:	4629      	mov	r1, r5
 8004a32:	4632      	mov	r2, r6
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	f04f 0400 	mov.w	r4, #0
 8004a3c:	0154      	lsls	r4, r2, #5
 8004a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a42:	014b      	lsls	r3, r1, #5
 8004a44:	4619      	mov	r1, r3
 8004a46:	4622      	mov	r2, r4
 8004a48:	1b49      	subs	r1, r1, r5
 8004a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	f04f 0400 	mov.w	r4, #0
 8004a56:	0194      	lsls	r4, r2, #6
 8004a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a5c:	018b      	lsls	r3, r1, #6
 8004a5e:	1a5b      	subs	r3, r3, r1
 8004a60:	eb64 0402 	sbc.w	r4, r4, r2
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	00e2      	lsls	r2, r4, #3
 8004a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a72:	00d9      	lsls	r1, r3, #3
 8004a74:	460b      	mov	r3, r1
 8004a76:	4614      	mov	r4, r2
 8004a78:	195b      	adds	r3, r3, r5
 8004a7a:	eb44 0406 	adc.w	r4, r4, r6
 8004a7e:	f04f 0100 	mov.w	r1, #0
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	0262      	lsls	r2, r4, #9
 8004a88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004a8c:	0259      	lsls	r1, r3, #9
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4614      	mov	r4, r2
 8004a92:	4618      	mov	r0, r3
 8004a94:	4621      	mov	r1, r4
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4623      	mov	r3, r4
 8004aa0:	f7fb fb9a 	bl	80001d8 <__aeabi_uldivmod>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	460c      	mov	r4, r1
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	e049      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aac:	4b2f      	ldr	r3, [pc, #188]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	099b      	lsrs	r3, r3, #6
 8004ab2:	f04f 0400 	mov.w	r4, #0
 8004ab6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aba:	f04f 0200 	mov.w	r2, #0
 8004abe:	ea03 0501 	and.w	r5, r3, r1
 8004ac2:	ea04 0602 	and.w	r6, r4, r2
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4632      	mov	r2, r6
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f04f 0400 	mov.w	r4, #0
 8004ad2:	0154      	lsls	r4, r2, #5
 8004ad4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ad8:	014b      	lsls	r3, r1, #5
 8004ada:	4619      	mov	r1, r3
 8004adc:	4622      	mov	r2, r4
 8004ade:	1b49      	subs	r1, r1, r5
 8004ae0:	eb62 0206 	sbc.w	r2, r2, r6
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	f04f 0400 	mov.w	r4, #0
 8004aec:	0194      	lsls	r4, r2, #6
 8004aee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004af2:	018b      	lsls	r3, r1, #6
 8004af4:	1a5b      	subs	r3, r3, r1
 8004af6:	eb64 0402 	sbc.w	r4, r4, r2
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b08:	00d9      	lsls	r1, r3, #3
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	195b      	adds	r3, r3, r5
 8004b10:	eb44 0406 	adc.w	r4, r4, r6
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	f04f 0200 	mov.w	r2, #0
 8004b1c:	02a2      	lsls	r2, r4, #10
 8004b1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b22:	0299      	lsls	r1, r3, #10
 8004b24:	460b      	mov	r3, r1
 8004b26:	4614      	mov	r4, r2
 8004b28:	4618      	mov	r0, r3
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	461a      	mov	r2, r3
 8004b34:	4623      	mov	r3, r4
 8004b36:	f7fb fb4f 	bl	80001d8 <__aeabi_uldivmod>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	60bb      	str	r3, [r7, #8]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b5e:	60bb      	str	r3, [r7, #8]
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	68bb      	ldr	r3, [r7, #8]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	; (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000000 	.word	0x20000000

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4601      	mov	r1, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5cd3      	ldrb	r3, [r2, r3]
 8004ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0800a2c8 	.word	0x0800a2c8

08004bb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d105      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d038      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004be0:	4b68      	ldr	r3, [pc, #416]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004be6:	f7fc faf3 	bl	80011d0 <HAL_GetTick>
 8004bea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bec:	e008      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bee:	f7fc faef 	bl	80011d0 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d901      	bls.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e0bd      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c00:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1f0      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	019b      	lsls	r3, r3, #6
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	071b      	lsls	r3, r3, #28
 8004c1e:	495a      	ldr	r1, [pc, #360]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c26:	4b57      	ldr	r3, [pc, #348]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c2c:	f7fc fad0 	bl	80011d0 <HAL_GetTick>
 8004c30:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c34:	f7fc facc 	bl	80011d0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e09a      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c46:	4b50      	ldr	r3, [pc, #320]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0f0      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8083 	beq.w	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	4b48      	ldr	r3, [pc, #288]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c68:	4a47      	ldr	r2, [pc, #284]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8004c70:	4b45      	ldr	r3, [pc, #276]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c7c:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a42      	ldr	r2, [pc, #264]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004c82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c86:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c88:	f7fc faa2 	bl	80011d0 <HAL_GetTick>
 8004c8c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c90:	f7fc fa9e 	bl	80011d0 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e06c      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ca2:	4b3a      	ldr	r3, [pc, #232]	; (8004d8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0f0      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004cae:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d02f      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d028      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ccc:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004cd6:	4b2e      	ldr	r3, [pc, #184]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cd8:	2201      	movs	r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cdc:	4b2c      	ldr	r3, [pc, #176]	; (8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ce2:	4a29      	ldr	r2, [pc, #164]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cec:	f003 0301 	and.w	r3, r3, #1
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d114      	bne.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fa6c 	bl	80011d0 <HAL_GetTick>
 8004cf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfa:	e00a      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fa68 	bl	80011d0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e034      	b.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ee      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d2a:	d10d      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004d2c:	4b16      	ldr	r3, [pc, #88]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d40:	4911      	ldr	r1, [pc, #68]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	608b      	str	r3, [r1, #8]
 8004d46:	e005      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004d48:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4a0e      	ldr	r2, [pc, #56]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d52:	6093      	str	r3, [r2, #8]
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d60:	4909      	ldr	r1, [pc, #36]	; (8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7d1a      	ldrb	r2, [r3, #20]
 8004d76:	4b07      	ldr	r3, [pc, #28]	; (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004d78:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	42470068 	.word	0x42470068
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	42470e40 	.word	0x42470e40
 8004d94:	424711e0 	.word	0x424711e0

08004d98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d13f      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004db6:	4b23      	ldr	r3, [pc, #140]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dbe:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d131      	bne.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dcc:	617b      	str	r3, [r7, #20]
          break;
 8004dce:	e031      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004dd0:	4b1c      	ldr	r3, [pc, #112]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ddc:	d109      	bne.n	8004df2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004dde:	4b19      	ldr	r3, [pc, #100]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004de4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004de8:	4a18      	ldr	r2, [pc, #96]	; (8004e4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004df2:	4b14      	ldr	r3, [pc, #80]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dfc:	4a14      	ldr	r2, [pc, #80]	; (8004e50 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e02:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004e04:	4b0f      	ldr	r3, [pc, #60]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004e18:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004e1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e1e:	0f1b      	lsrs	r3, r3, #28
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	68ba      	ldr	r2, [r7, #8]
 8004e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2a:	617b      	str	r3, [r7, #20]
          break;
 8004e2c:	e002      	b.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	617b      	str	r3, [r7, #20]
          break;
 8004e32:	bf00      	nop
        }
      }
      break;
 8004e34:	bf00      	nop
    }
  }
  return frequency;
 8004e36:	697b      	ldr	r3, [r7, #20]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	371c      	adds	r7, #28
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr
 8004e44:	40023800 	.word	0x40023800
 8004e48:	00bb8000 	.word	0x00bb8000
 8004e4c:	007a1200 	.word	0x007a1200
 8004e50:	00f42400 	.word	0x00f42400

08004e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e01d      	b.n	8004ea2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fb ffbc 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4619      	mov	r1, r3
 8004e92:	4610      	mov	r0, r2
 8004e94:	f000 faec 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e01d      	b.n	8004ef8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7fb ffd7 	bl	8000e84 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4610      	mov	r0, r2
 8004eea:	f000 fac1 	bl	8005470 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d122      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0302 	and.w	r3, r3, #2
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d11b      	bne.n	8004f5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f06f 0202 	mvn.w	r2, #2
 8004f2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fa75 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004f48:	e005      	b.n	8004f56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 fa67 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fa78 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d122      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d11b      	bne.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0204 	mvn.w	r2, #4
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fa4b 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa3d 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa4e 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d122      	bne.n	8005004 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f003 0308 	and.w	r3, r3, #8
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d11b      	bne.n	8005004 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f06f 0208 	mvn.w	r2, #8
 8004fd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	69db      	ldr	r3, [r3, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa21 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8004ff0:	e005      	b.n	8004ffe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa13 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fa24 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b10      	cmp	r3, #16
 8005010:	d122      	bne.n	8005058 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	f003 0310 	and.w	r3, r3, #16
 800501c:	2b10      	cmp	r3, #16
 800501e:	d11b      	bne.n	8005058 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f06f 0210 	mvn.w	r2, #16
 8005028:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2208      	movs	r2, #8
 800502e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f9f7 	bl	8005432 <HAL_TIM_IC_CaptureCallback>
 8005044:	e005      	b.n	8005052 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9e9 	bl	800541e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f9fa 	bl	8005446 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b01      	cmp	r3, #1
 8005064:	d10e      	bne.n	8005084 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b01      	cmp	r3, #1
 8005072:	d107      	bne.n	8005084 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f06f 0201 	mvn.w	r2, #1
 800507c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f9c3 	bl	800540a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d10e      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b80      	cmp	r3, #128	; 0x80
 800509e:	d107      	bne.n	80050b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fcfe 	bl	8005aac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ba:	2b40      	cmp	r3, #64	; 0x40
 80050bc:	d10e      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d107      	bne.n	80050dc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9bf 	bl	800545a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	d10e      	bne.n	8005108 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	f003 0320 	and.w	r3, r3, #32
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d107      	bne.n	8005108 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f06f 0220 	mvn.w	r2, #32
 8005100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fcc8 	bl	8005a98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005108:	bf00      	nop
 800510a:	3708      	adds	r7, #8
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005122:	2b01      	cmp	r3, #1
 8005124:	d101      	bne.n	800512a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005126:	2302      	movs	r3, #2
 8005128:	e0b4      	b.n	8005294 <HAL_TIM_PWM_ConfigChannel+0x184>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2202      	movs	r2, #2
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b0c      	cmp	r3, #12
 800513e:	f200 809f 	bhi.w	8005280 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800517d 	.word	0x0800517d
 800514c:	08005281 	.word	0x08005281
 8005150:	08005281 	.word	0x08005281
 8005154:	08005281 	.word	0x08005281
 8005158:	080051bd 	.word	0x080051bd
 800515c:	08005281 	.word	0x08005281
 8005160:	08005281 	.word	0x08005281
 8005164:	08005281 	.word	0x08005281
 8005168:	080051ff 	.word	0x080051ff
 800516c:	08005281 	.word	0x08005281
 8005170:	08005281 	.word	0x08005281
 8005174:	08005281 	.word	0x08005281
 8005178:	0800523f 	.word	0x0800523f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 f9f4 	bl	8005570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699a      	ldr	r2, [r3, #24]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6999      	ldr	r1, [r3, #24]
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	619a      	str	r2, [r3, #24]
      break;
 80051ba:	e062      	b.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fa3a 	bl	800563c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699a      	ldr	r2, [r3, #24]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6999      	ldr	r1, [r3, #24]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	619a      	str	r2, [r3, #24]
      break;
 80051fc:	e041      	b.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68b9      	ldr	r1, [r7, #8]
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fa85 	bl	8005714 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	69da      	ldr	r2, [r3, #28]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0208 	orr.w	r2, r2, #8
 8005218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0204 	bic.w	r2, r2, #4
 8005228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69d9      	ldr	r1, [r3, #28]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	61da      	str	r2, [r3, #28]
      break;
 800523c:	e021      	b.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68b9      	ldr	r1, [r7, #8]
 8005244:	4618      	mov	r0, r3
 8005246:	f000 facf 	bl	80057e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69d9      	ldr	r1, [r3, #28]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	021a      	lsls	r2, r3, #8
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	61da      	str	r2, [r3, #28]
      break;
 800527e:	e000      	b.n	8005282 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005280:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIM_ConfigClockSource+0x18>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e0a6      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x166>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d067      	beq.n	80053bc <HAL_TIM_ConfigClockSource+0x120>
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d80b      	bhi.n	8005308 <HAL_TIM_ConfigClockSource+0x6c>
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d073      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x140>
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d802      	bhi.n	80052fe <HAL_TIM_ConfigClockSource+0x62>
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d06f      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052fc:	e078      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d06c      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x140>
 8005302:	2b30      	cmp	r3, #48	; 0x30
 8005304:	d06a      	beq.n	80053dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005306:	e073      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005308:	2b70      	cmp	r3, #112	; 0x70
 800530a:	d00d      	beq.n	8005328 <HAL_TIM_ConfigClockSource+0x8c>
 800530c:	2b70      	cmp	r3, #112	; 0x70
 800530e:	d804      	bhi.n	800531a <HAL_TIM_ConfigClockSource+0x7e>
 8005310:	2b50      	cmp	r3, #80	; 0x50
 8005312:	d033      	beq.n	800537c <HAL_TIM_ConfigClockSource+0xe0>
 8005314:	2b60      	cmp	r3, #96	; 0x60
 8005316:	d041      	beq.n	800539c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005318:	e06a      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800531a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531e:	d066      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0x152>
 8005320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005324:	d017      	beq.n	8005356 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005326:	e063      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6818      	ldr	r0, [r3, #0]
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	6899      	ldr	r1, [r3, #8]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f000 fb20 	bl	800597c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800534a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	609a      	str	r2, [r3, #8]
      break;
 8005354:	e04c      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6818      	ldr	r0, [r3, #0]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	6899      	ldr	r1, [r3, #8]
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f000 fb09 	bl	800597c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005378:	609a      	str	r2, [r3, #8]
      break;
 800537a:	e039      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6818      	ldr	r0, [r3, #0]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	6859      	ldr	r1, [r3, #4]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	461a      	mov	r2, r3
 800538a:	f000 fa7d 	bl	8005888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2150      	movs	r1, #80	; 0x50
 8005394:	4618      	mov	r0, r3
 8005396:	f000 fad6 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 800539a:	e029      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	461a      	mov	r2, r3
 80053aa:	f000 fa9c 	bl	80058e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2160      	movs	r1, #96	; 0x60
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fac6 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053ba:	e019      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6818      	ldr	r0, [r3, #0]
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	461a      	mov	r2, r3
 80053ca:	f000 fa5d 	bl	8005888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	2140      	movs	r1, #64	; 0x40
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fab6 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053da:	e009      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4619      	mov	r1, r3
 80053e6:	4610      	mov	r0, r2
 80053e8:	f000 faad 	bl	8005946 <TIM_ITRx_SetConfig>
      break;
 80053ec:	e000      	b.n	80053f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005426:	bf00      	nop
 8005428:	370c      	adds	r7, #12
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800543a:	bf00      	nop
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800545a:	b480      	push	{r7}
 800545c:	b083      	sub	sp, #12
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005462:	bf00      	nop
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a34      	ldr	r2, [pc, #208]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d00f      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548e:	d00b      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a31      	ldr	r2, [pc, #196]	; (8005558 <TIM_Base_SetConfig+0xe8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d007      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a30      	ldr	r2, [pc, #192]	; (800555c <TIM_Base_SetConfig+0xec>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_Base_SetConfig+0x38>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a2f      	ldr	r2, [pc, #188]	; (8005560 <TIM_Base_SetConfig+0xf0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d108      	bne.n	80054ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a25      	ldr	r2, [pc, #148]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01b      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c8:	d017      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <TIM_Base_SetConfig+0xe8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d013      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a21      	ldr	r2, [pc, #132]	; (800555c <TIM_Base_SetConfig+0xec>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00f      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a20      	ldr	r2, [pc, #128]	; (8005560 <TIM_Base_SetConfig+0xf0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00b      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a1f      	ldr	r2, [pc, #124]	; (8005564 <TIM_Base_SetConfig+0xf4>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d007      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a1e      	ldr	r2, [pc, #120]	; (8005568 <TIM_Base_SetConfig+0xf8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d003      	beq.n	80054fa <TIM_Base_SetConfig+0x8a>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a1d      	ldr	r2, [pc, #116]	; (800556c <TIM_Base_SetConfig+0xfc>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d108      	bne.n	800550c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a08      	ldr	r2, [pc, #32]	; (8005554 <TIM_Base_SetConfig+0xe4>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d103      	bne.n	8005540 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	615a      	str	r2, [r3, #20]
}
 8005546:	bf00      	nop
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800

08005570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f023 0201 	bic.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 0302 	bic.w	r3, r3, #2
 80055b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a1c      	ldr	r2, [pc, #112]	; (8005638 <TIM_OC1_SetConfig+0xc8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d10c      	bne.n	80055e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0308 	bic.w	r3, r3, #8
 80055d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f023 0304 	bic.w	r3, r3, #4
 80055e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a13      	ldr	r2, [pc, #76]	; (8005638 <TIM_OC1_SetConfig+0xc8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d111      	bne.n	8005612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	621a      	str	r2, [r3, #32]
}
 800562c:	bf00      	nop
 800562e:	371c      	adds	r7, #28
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	40010000 	.word	0x40010000

0800563c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800563c:	b480      	push	{r7}
 800563e:	b087      	sub	sp, #28
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	f023 0210 	bic.w	r2, r3, #16
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800566a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f023 0320 	bic.w	r3, r3, #32
 8005686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	011b      	lsls	r3, r3, #4
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <TIM_OC2_SetConfig+0xd4>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d10d      	bne.n	80056b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	697a      	ldr	r2, [r7, #20]
 80056ac:	4313      	orrs	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a15      	ldr	r2, [pc, #84]	; (8005710 <TIM_OC2_SetConfig+0xd4>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d113      	bne.n	80056e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010000 	.word	0x40010000

08005714 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f023 0303 	bic.w	r3, r3, #3
 800574a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800575c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	021b      	lsls	r3, r3, #8
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <TIM_OC3_SetConfig+0xd0>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10d      	bne.n	800578e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005778:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	021b      	lsls	r3, r3, #8
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800578c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a14      	ldr	r2, [pc, #80]	; (80057e4 <TIM_OC3_SetConfig+0xd0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d113      	bne.n	80057be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800579c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	693a      	ldr	r2, [r7, #16]
 80057c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	621a      	str	r2, [r3, #32]
}
 80057d8:	bf00      	nop
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr
 80057e4:	40010000 	.word	0x40010000

080057e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	021b      	lsls	r3, r3, #8
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4313      	orrs	r3, r2
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005832:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	031b      	lsls	r3, r3, #12
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a10      	ldr	r2, [pc, #64]	; (8005884 <TIM_OC4_SetConfig+0x9c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d109      	bne.n	800585c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800584e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	019b      	lsls	r3, r3, #6
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40010000 	.word	0x40010000

08005888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005888:	b480      	push	{r7}
 800588a:	b087      	sub	sp, #28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	693a      	ldr	r2, [r7, #16]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 030a 	bic.w	r3, r3, #10
 80058c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	621a      	str	r2, [r3, #32]
}
 80058da:	bf00      	nop
 80058dc:	371c      	adds	r7, #28
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b087      	sub	sp, #28
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	60f8      	str	r0, [r7, #12]
 80058ee:	60b9      	str	r1, [r7, #8]
 80058f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	f023 0210 	bic.w	r2, r3, #16
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6a1b      	ldr	r3, [r3, #32]
 8005908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005910:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005922:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	621a      	str	r2, [r3, #32]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005946:	b480      	push	{r7}
 8005948:	b085      	sub	sp, #20
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
 800594e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800595c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	f043 0307 	orr.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	021a      	lsls	r2, r3, #8
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	431a      	orrs	r2, r3
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	609a      	str	r2, [r3, #8]
}
 80059b0:	bf00      	nop
 80059b2:	371c      	adds	r7, #28
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e050      	b.n	8005a76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a1c      	ldr	r2, [pc, #112]	; (8005a84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d018      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a20:	d013      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a18      	ldr	r2, [pc, #96]	; (8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d00e      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a16      	ldr	r2, [pc, #88]	; (8005a8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d009      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d004      	beq.n	8005a4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a13      	ldr	r2, [pc, #76]	; (8005a94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d10c      	bne.n	8005a64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	40010000 	.word	0x40010000
 8005a88:	40000400 	.word	0x40000400
 8005a8c:	40000800 	.word	0x40000800
 8005a90:	40000c00 	.word	0x40000c00
 8005a94:	40014000 	.word	0x40014000

08005a98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	f107 001c 	add.w	r0, r7, #28
 8005ace:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d122      	bne.n	8005b1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005aec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d105      	bne.n	8005b12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f94a 	bl	8005dac <USB_CoreReset>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
 8005b1c:	e01a      	b.n	8005b54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f93e 	bl	8005dac <USB_CoreReset>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	639a      	str	r2, [r3, #56]	; 0x38
 8005b46:	e005      	b.n	8005b54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d10b      	bne.n	8005b72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f043 0206 	orr.w	r2, r3, #6
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f043 0220 	orr.w	r2, r3, #32
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b7e:	b004      	add	sp, #16
 8005b80:	4770      	bx	lr

08005b82 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f043 0201 	orr.w	r2, r3, #1
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f023 0201 	bic.w	r2, r3, #1
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	370c      	adds	r7, #12
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b082      	sub	sp, #8
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
 8005bce:	460b      	mov	r3, r1
 8005bd0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d106      	bne.n	8005bf2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]
 8005bf0:	e00b      	b.n	8005c0a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d106      	bne.n	8005c06 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60da      	str	r2, [r3, #12]
 8005c04:	e001      	b.n	8005c0a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e003      	b.n	8005c12 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c0a:	2032      	movs	r0, #50	; 0x32
 8005c0c:	f7fb faec 	bl	80011e8 <HAL_Delay>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3708      	adds	r7, #8
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
	...

08005c1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	019b      	lsls	r3, r3, #6
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <USB_FlushTxFifo+0x48>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d901      	bls.n	8005c48 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e006      	b.n	8005c56 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b20      	cmp	r3, #32
 8005c52:	d0f0      	beq.n	8005c36 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3714      	adds	r7, #20
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	00030d40 	.word	0x00030d40

08005c68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2210      	movs	r2, #16
 8005c78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a09      	ldr	r2, [pc, #36]	; (8005ca8 <USB_FlushRxFifo+0x40>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d901      	bls.n	8005c8c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e006      	b.n	8005c9a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d0f0      	beq.n	8005c7a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	00030d40 	.word	0x00030d40

08005cac <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	; 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	461a      	mov	r2, r3
 8005cba:	460b      	mov	r3, r1
 8005cbc:	71fb      	strb	r3, [r7, #7]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005cca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11a      	bne.n	8005d08 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005cd2:	88bb      	ldrh	r3, [r7, #4]
 8005cd4:	3303      	adds	r3, #3
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	e00f      	b.n	8005d00 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	031a      	lsls	r2, r3, #12
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cec:	461a      	mov	r2, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d3eb      	bcc.n	8005ce0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3724      	adds	r7, #36	; 0x24
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b089      	sub	sp, #36	; 0x24
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	60f8      	str	r0, [r7, #12]
 8005d1e:	60b9      	str	r1, [r7, #8]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005d2c:	88fb      	ldrh	r3, [r7, #6]
 8005d2e:	3303      	adds	r3, #3
 8005d30:	089b      	lsrs	r3, r3, #2
 8005d32:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e00b      	b.n	8005d52 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	601a      	str	r2, [r3, #0]
    pDest++;
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	3304      	adds	r3, #4
 8005d4a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	61bb      	str	r3, [r7, #24]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d3ef      	bcc.n	8005d3a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3724      	adds	r7, #36	; 0x24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d80:	68fb      	ldr	r3, [r7, #12]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f003 0301 	and.w	r3, r3, #1
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	370c      	adds	r7, #12
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
	...

08005dac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005db4:	2300      	movs	r3, #0
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4a13      	ldr	r2, [pc, #76]	; (8005e10 <USB_CoreReset+0x64>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e01b      	b.n	8005e02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	daf2      	bge.n	8005db8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f043 0201 	orr.w	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a09      	ldr	r2, [pc, #36]	; (8005e10 <USB_CoreReset+0x64>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d901      	bls.n	8005df4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e006      	b.n	8005e02 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d0f0      	beq.n	8005de2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	00030d40 	.word	0x00030d40

08005e14 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e14:	b084      	sub	sp, #16
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	f107 001c 	add.w	r0, r7, #28
 8005e22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e30:	461a      	mov	r2, r3
 8005e32:	2300      	movs	r3, #0
 8005e34:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d018      	beq.n	8005e98 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d10a      	bne.n	8005e82 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e7a:	f043 0304 	orr.w	r3, r3, #4
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	e014      	b.n	8005eac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e90:	f023 0304 	bic.w	r3, r3, #4
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	e009      	b.n	8005eac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ea6:	f023 0304 	bic.w	r3, r3, #4
 8005eaa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005eac:	2110      	movs	r1, #16
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff feb4 	bl	8005c1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f7ff fed7 	bl	8005c68 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005eba:	2300      	movs	r3, #0
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e015      	b.n	8005eec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d3e5      	bcc.n	8005ec0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8ac 	bl	8006054 <USB_DriveVbus>

  HAL_Delay(200U);
 8005efc:	20c8      	movs	r0, #200	; 0xc8
 8005efe:	f7fb f973 	bl	80011e8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f0e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f22:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a14      	ldr	r2, [pc, #80]	; (8005f78 <USB_HostInit+0x164>)
 8005f28:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a13      	ldr	r2, [pc, #76]	; (8005f7c <USB_HostInit+0x168>)
 8005f2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005f32:	e009      	b.n	8005f48 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2280      	movs	r2, #128	; 0x80
 8005f38:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <USB_HostInit+0x16c>)
 8005f3e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <USB_HostInit+0x170>)
 8005f44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d105      	bne.n	8005f5a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f043 0210 	orr.w	r2, r3, #16
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699a      	ldr	r2, [r3, #24]
 8005f5e:	4b0a      	ldr	r3, [pc, #40]	; (8005f88 <USB_HostInit+0x174>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f72:	b004      	add	sp, #16
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	01000200 	.word	0x01000200
 8005f7c:	00e00300 	.word	0x00e00300
 8005f80:	00600080 	.word	0x00600080
 8005f84:	004000e0 	.word	0x004000e0
 8005f88:	a3200008 	.word	0xa3200008

08005f8c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005faa:	f023 0303 	bic.w	r3, r3, #3
 8005fae:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005fc8:	78fb      	ldrb	r3, [r7, #3]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d107      	bne.n	8005fde <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005fda:	6053      	str	r3, [r2, #4]
 8005fdc:	e009      	b.n	8005ff2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d106      	bne.n	8005ff2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fea:	461a      	mov	r2, r3
 8005fec:	f241 7370 	movw	r3, #6000	; 0x1770
 8005ff0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006020:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800602a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800602e:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006030:	2064      	movs	r0, #100	; 0x64
 8006032:	f7fb f8d9 	bl	80011e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800603e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006042:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006044:	200a      	movs	r0, #10
 8006046:	f7fb f8cf 	bl	80011e8 <HAL_Delay>

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	460b      	mov	r3, r1
 800605e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006078:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <USB_DriveVbus+0x44>
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	2b01      	cmp	r3, #1
 8006088:	d106      	bne.n	8006098 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006092:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006096:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800609e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a2:	d109      	bne.n	80060b8 <USB_DriveVbus+0x64>
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d106      	bne.n	80060b8 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80060b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060b6:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b085      	sub	sp, #20
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	0c5b      	lsrs	r3, r3, #17
 80060e4:	f003 0303 	and.w	r3, r3, #3
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	b29b      	uxth	r3, r3
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
	...

08006118 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	4608      	mov	r0, r1
 8006122:	4611      	mov	r1, r2
 8006124:	461a      	mov	r2, r3
 8006126:	4603      	mov	r3, r0
 8006128:	70fb      	strb	r3, [r7, #3]
 800612a:	460b      	mov	r3, r1
 800612c:	70bb      	strb	r3, [r7, #2]
 800612e:	4613      	mov	r3, r2
 8006130:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4413      	add	r3, r2
 8006142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006146:	461a      	mov	r2, r3
 8006148:	f04f 33ff 	mov.w	r3, #4294967295
 800614c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800614e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006152:	2b03      	cmp	r3, #3
 8006154:	d87e      	bhi.n	8006254 <USB_HC_Init+0x13c>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <USB_HC_Init+0x44>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	0800616d 	.word	0x0800616d
 8006160:	08006217 	.word	0x08006217
 8006164:	0800616d 	.word	0x0800616d
 8006168:	080061d9 	.word	0x080061d9
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800616c:	78fb      	ldrb	r3, [r7, #3]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	461a      	mov	r2, r3
 800617a:	f240 439d 	movw	r3, #1181	; 0x49d
 800617e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006180:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006184:	2b00      	cmp	r3, #0
 8006186:	da10      	bge.n	80061aa <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	4413      	add	r3, r2
 8006190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	78fa      	ldrb	r2, [r7, #3]
 8006198:	0151      	lsls	r1, r2, #5
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	440a      	add	r2, r1
 800619e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a6:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 80061a8:	e057      	b.n	800625a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d051      	beq.n	800625a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	0151      	lsls	r1, r2, #5
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	440a      	add	r2, r1
 80061cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061d0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80061d4:	60d3      	str	r3, [r2, #12]
      break;
 80061d6:	e040      	b.n	800625a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061d8:	78fb      	ldrb	r3, [r7, #3]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	461a      	mov	r2, r3
 80061e6:	f240 639d 	movw	r3, #1693	; 0x69d
 80061ea:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	da34      	bge.n	800625e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	015a      	lsls	r2, r3, #5
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	78fa      	ldrb	r2, [r7, #3]
 8006204:	0151      	lsls	r1, r2, #5
 8006206:	68ba      	ldr	r2, [r7, #8]
 8006208:	440a      	add	r2, r1
 800620a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800620e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006212:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006214:	e023      	b.n	800625e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006216:	78fb      	ldrb	r3, [r7, #3]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006222:	461a      	mov	r2, r3
 8006224:	f240 2325 	movw	r3, #549	; 0x225
 8006228:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800622a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800622e:	2b00      	cmp	r3, #0
 8006230:	da17      	bge.n	8006262 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	015a      	lsls	r2, r3, #5
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4413      	add	r3, r2
 800623a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	0151      	lsls	r1, r2, #5
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	440a      	add	r2, r1
 8006248:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800624c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006250:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006252:	e006      	b.n	8006262 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	75fb      	strb	r3, [r7, #23]
      break;
 8006258:	e004      	b.n	8006264 <USB_HC_Init+0x14c>
      break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <USB_HC_Init+0x14c>
      break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <USB_HC_Init+0x14c>
      break;
 8006262:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	78fb      	ldrb	r3, [r7, #3]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	2101      	movs	r1, #1
 8006274:	fa01 f303 	lsl.w	r3, r1, r3
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800627e:	4313      	orrs	r3, r2
 8006280:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800628e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da03      	bge.n	800629e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e001      	b.n	80062a2 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80062a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d103      	bne.n	80062b2 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062ae:	60fb      	str	r3, [r7, #12]
 80062b0:	e001      	b.n	80062b6 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062b6:	787b      	ldrb	r3, [r7, #1]
 80062b8:	059b      	lsls	r3, r3, #22
 80062ba:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062be:	78bb      	ldrb	r3, [r7, #2]
 80062c0:	02db      	lsls	r3, r3, #11
 80062c2:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062c6:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062cc:	049b      	lsls	r3, r3, #18
 80062ce:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80062d2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80062da:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062e0:	78fb      	ldrb	r3, [r7, #3]
 80062e2:	0159      	lsls	r1, r3, #5
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	440b      	add	r3, r1
 80062e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ec:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062f2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80062f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d10f      	bne.n	800631c <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	4413      	add	r3, r2
 8006304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	440a      	add	r2, r1
 8006312:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006316:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800631a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800631c:	7dfb      	ldrb	r3, [r7, #23]
}
 800631e:	4618      	mov	r0, r3
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop

0800632c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b08c      	sub	sp, #48	; 0x30
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	785b      	ldrb	r3, [r3, #1]
 8006342:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006344:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006348:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d028      	beq.n	80063a8 <USB_HC_StartXfer+0x7c>
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d124      	bne.n	80063a8 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800635e:	79fb      	ldrb	r3, [r7, #7]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <USB_HC_StartXfer+0x50>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	795b      	ldrb	r3, [r3, #5]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d107      	bne.n	800637c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	785b      	ldrb	r3, [r3, #1]
 8006370:	4619      	mov	r1, r3
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fa2e 	bl	80067d4 <USB_DoPing>
      return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e112      	b.n	80065a2 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d112      	bne.n	80063a8 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	6a3b      	ldr	r3, [r7, #32]
 8006388:	4413      	add	r3, r2
 800638a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	69fa      	ldr	r2, [r7, #28]
 8006392:	0151      	lsls	r1, r2, #5
 8006394:	6a3a      	ldr	r2, [r7, #32]
 8006396:	440a      	add	r2, r1
 8006398:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800639c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80063a0:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2200      	movs	r2, #0
 80063a6:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d018      	beq.n	80063e2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	8912      	ldrh	r2, [r2, #8]
 80063b8:	4413      	add	r3, r2
 80063ba:	3b01      	subs	r3, #1
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	8912      	ldrh	r2, [r2, #8]
 80063c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80063c4:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80063c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80063c8:	8b7b      	ldrh	r3, [r7, #26]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d90b      	bls.n	80063e6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80063ce:	8b7b      	ldrh	r3, [r7, #26]
 80063d0:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80063d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	8912      	ldrh	r2, [r2, #8]
 80063d8:	fb02 f203 	mul.w	r2, r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	611a      	str	r2, [r3, #16]
 80063e0:	e001      	b.n	80063e6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80063e2:	2301      	movs	r3, #1
 80063e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	78db      	ldrb	r3, [r3, #3]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d006      	beq.n	80063fc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80063ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	8912      	ldrh	r2, [r2, #8]
 80063f4:	fb02 f203 	mul.w	r2, r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006404:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006406:	04d9      	lsls	r1, r3, #19
 8006408:	4b68      	ldr	r3, [pc, #416]	; (80065ac <USB_HC_StartXfer+0x280>)
 800640a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800640c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	7a9b      	ldrb	r3, [r3, #10]
 8006412:	075b      	lsls	r3, r3, #29
 8006414:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006418:	69f9      	ldr	r1, [r7, #28]
 800641a:	0148      	lsls	r0, r1, #5
 800641c:	6a39      	ldr	r1, [r7, #32]
 800641e:	4401      	add	r1, r0
 8006420:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006424:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8006426:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d009      	beq.n	8006442 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	68d9      	ldr	r1, [r3, #12]
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	4413      	add	r3, r2
 800643a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800643e:	460a      	mov	r2, r1
 8006440:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0301 	and.w	r3, r3, #1
 800644e:	2b00      	cmp	r3, #0
 8006450:	bf0c      	ite	eq
 8006452:	2301      	moveq	r3, #1
 8006454:	2300      	movne	r3, #0
 8006456:	b2db      	uxtb	r3, r3
 8006458:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	4413      	add	r3, r2
 8006462:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69fa      	ldr	r2, [r7, #28]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	6a3a      	ldr	r2, [r7, #32]
 800646e:	440a      	add	r2, r1
 8006470:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006474:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006478:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	4413      	add	r3, r2
 8006482:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	7e7b      	ldrb	r3, [r7, #25]
 800648a:	075b      	lsls	r3, r3, #29
 800648c:	69f9      	ldr	r1, [r7, #28]
 800648e:	0148      	lsls	r0, r1, #5
 8006490:	6a39      	ldr	r1, [r7, #32]
 8006492:	4401      	add	r1, r0
 8006494:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006498:	4313      	orrs	r3, r2
 800649a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	6a3b      	ldr	r3, [r7, #32]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a41      	ldr	r2, [pc, #260]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064ac:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064ae:	4b40      	ldr	r3, [pc, #256]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064b6:	4a3e      	ldr	r2, [pc, #248]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064b8:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	78db      	ldrb	r3, [r3, #3]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d006      	beq.n	80064d0 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80064c2:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ca:	4a39      	ldr	r2, [pc, #228]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e005      	b.n	80064dc <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80064d0:	4b37      	ldr	r3, [pc, #220]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80064d8:	4a35      	ldr	r2, [pc, #212]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064da:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064dc:	4b34      	ldr	r3, [pc, #208]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064e4:	4a32      	ldr	r2, [pc, #200]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064e6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	461a      	mov	r2, r3
 80064f6:	4b2e      	ldr	r3, [pc, #184]	; (80065b0 <USB_HC_StartXfer+0x284>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d14e      	bne.n	80065a0 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	78db      	ldrb	r3, [r3, #3]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d14a      	bne.n	80065a0 <USB_HC_StartXfer+0x274>
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d046      	beq.n	80065a0 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	79db      	ldrb	r3, [r3, #7]
 8006516:	2b03      	cmp	r3, #3
 8006518:	d830      	bhi.n	800657c <USB_HC_StartXfer+0x250>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <USB_HC_StartXfer+0x1f4>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	08006531 	.word	0x08006531
 8006524:	08006555 	.word	0x08006555
 8006528:	08006531 	.word	0x08006531
 800652c:	08006555 	.word	0x08006555
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	3303      	adds	r3, #3
 8006536:	089b      	lsrs	r3, r3, #2
 8006538:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800653a:	8afa      	ldrh	r2, [r7, #22]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	b29b      	uxth	r3, r3
 8006542:	429a      	cmp	r2, r3
 8006544:	d91c      	bls.n	8006580 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	f043 0220 	orr.w	r2, r3, #32
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	619a      	str	r2, [r3, #24]
          }
          break;
 8006552:	e015      	b.n	8006580 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	3303      	adds	r3, #3
 800655a:	089b      	lsrs	r3, r3, #2
 800655c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800655e:	8afa      	ldrh	r2, [r7, #22]
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	b29b      	uxth	r3, r3
 800656a:	429a      	cmp	r2, r3
 800656c:	d90a      	bls.n	8006584 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	619a      	str	r2, [r3, #24]
          }
          break;
 800657a:	e003      	b.n	8006584 <USB_HC_StartXfer+0x258>

        default:
          break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <USB_HC_StartXfer+0x25a>
          break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <USB_HC_StartXfer+0x25a>
          break;
 8006584:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	68d9      	ldr	r1, [r3, #12]
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	785a      	ldrb	r2, [r3, #1]
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	b298      	uxth	r0, r3
 8006594:	2300      	movs	r3, #0
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	4603      	mov	r3, r0
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f7ff fb86 	bl	8005cac <USB_WritePacket>
    }
  }

  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3728      	adds	r7, #40	; 0x28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}
 80065aa:	bf00      	nop
 80065ac:	1ff80000 	.word	0x1ff80000
 80065b0:	200000b4 	.word	0x200000b4

080065b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	b29b      	uxth	r3, r3
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b087      	sub	sp, #28
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	460b      	mov	r3, r1
 80065e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80065e6:	78fb      	ldrb	r3, [r7, #3]
 80065e8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	0c9b      	lsrs	r3, r3, #18
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <USB_HC_Halt+0x3a>
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b02      	cmp	r3, #2
 800660e:	d16c      	bne.n	80066ea <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68fa      	ldr	r2, [r7, #12]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	440a      	add	r2, r1
 8006626:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800662a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800662e:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d143      	bne.n	80066c4 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	440a      	add	r2, r1
 8006652:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800665a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4413      	add	r3, r2
 8006664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	440a      	add	r2, r1
 8006672:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800667a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4413      	add	r3, r2
 8006684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	440a      	add	r2, r1
 8006692:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006696:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800669a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3301      	adds	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a8:	d81d      	bhi.n	80066e6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	015a      	lsls	r2, r3, #5
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4413      	add	r3, r2
 80066b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c0:	d0ec      	beq.n	800669c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066c2:	e080      	b.n	80067c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066e2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066e4:	e06f      	b.n	80067c6 <USB_HC_Halt+0x1f0>
          break;
 80066e6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80066e8:	e06d      	b.n	80067c6 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	015a      	lsls	r2, r3, #5
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	4413      	add	r3, r2
 80066f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	0151      	lsls	r1, r2, #5
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	440a      	add	r2, r1
 8006700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006708:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d143      	bne.n	80067a2 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	4413      	add	r3, r2
 8006722:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	440a      	add	r2, r1
 8006730:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006734:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006738:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006754:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006758:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	440a      	add	r2, r1
 8006770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006774:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006778:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	3301      	adds	r3, #1
 800677e:	617b      	str	r3, [r7, #20]
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006786:	d81d      	bhi.n	80067c4 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800679a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679e:	d0ec      	beq.n	800677a <USB_HC_Halt+0x1a4>
 80067a0:	e011      	b.n	80067c6 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	e000      	b.n	80067c6 <USB_HC_Halt+0x1f0>
          break;
 80067c4:	bf00      	nop
    }
  }

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	371c      	adds	r7, #28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80067e4:	78fb      	ldrb	r3, [r7, #3]
 80067e6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	04da      	lsls	r2, r3, #19
 80067f0:	4b15      	ldr	r3, [pc, #84]	; (8006848 <USB_DoPing+0x74>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	0151      	lsls	r1, r2, #5
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	440a      	add	r2, r1
 80067fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006804:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800681c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006824:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	4413      	add	r3, r2
 800682e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006832:	461a      	mov	r2, r3
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	371c      	adds	r7, #28
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	1ff80000 	.word	0x1ff80000

0800684c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f9a1 	bl	8005ba4 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006862:	2110      	movs	r1, #16
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff f9d9 	bl	8005c1c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7ff f9fc 	bl	8005c68 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006870:	2300      	movs	r3, #0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e01f      	b.n	80068b6 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800688c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006894:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800689c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	461a      	mov	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	3301      	adds	r3, #1
 80068b4:	613b      	str	r3, [r7, #16]
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b0f      	cmp	r3, #15
 80068ba:	d9dc      	bls.n	8006876 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80068bc:	2300      	movs	r3, #0
 80068be:	613b      	str	r3, [r7, #16]
 80068c0:	e034      	b.n	800692c <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	015a      	lsls	r2, r3, #5
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4413      	add	r3, r2
 80068ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068d8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80068e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068e8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	3301      	adds	r3, #1
 8006900:	617b      	str	r3, [r7, #20]
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006908:	d80c      	bhi.n	8006924 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006920:	d0ec      	beq.n	80068fc <USB_StopHost+0xb0>
 8006922:	e000      	b.n	8006926 <USB_StopHost+0xda>
        break;
 8006924:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006926:	693b      	ldr	r3, [r7, #16]
 8006928:	3301      	adds	r3, #1
 800692a:	613b      	str	r3, [r7, #16]
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b0f      	cmp	r3, #15
 8006930:	d9c7      	bls.n	80068c2 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006938:	461a      	mov	r2, r3
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f04f 32ff 	mov.w	r2, #4294967295
 8006946:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f7ff f91a 	bl	8005b82 <USB_EnableGlobalInt>

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800695c:	4904      	ldr	r1, [pc, #16]	; (8006970 <MX_FATFS_Init+0x18>)
 800695e:	4805      	ldr	r0, [pc, #20]	; (8006974 <MX_FATFS_Init+0x1c>)
 8006960:	f003 f848 	bl	80099f4 <FATFS_LinkDriver>
 8006964:	4603      	mov	r3, r0
 8006966:	461a      	mov	r2, r3
 8006968:	4b03      	ldr	r3, [pc, #12]	; (8006978 <MX_FATFS_Init+0x20>)
 800696a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800696c:	bf00      	nop
 800696e:	bd80      	pop	{r7, pc}
 8006970:	200002e4 	.word	0x200002e4
 8006974:	0800a2d8 	.word	0x0800a2d8
 8006978:	20000748 	.word	0x20000748

0800697c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	4603      	mov	r3, r0
 8006984:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 80069a2:	79fb      	ldrb	r3, [r7, #7]
 80069a4:	4619      	mov	r1, r3
 80069a6:	4808      	ldr	r0, [pc, #32]	; (80069c8 <USBH_status+0x34>)
 80069a8:	f000 fe11 	bl	80075ce <USBH_MSC_UnitIsReady>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <USBH_status+0x24>
  {
    res = RES_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	73fb      	strb	r3, [r7, #15]
 80069b6:	e001      	b.n	80069bc <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	2000074c 	.word	0x2000074c

080069cc <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b094      	sub	sp, #80	; 0x50
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80069e2:	7bf9      	ldrb	r1, [r7, #15]
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	9300      	str	r3, [sp, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4812      	ldr	r0, [pc, #72]	; (8006a38 <USBH_read+0x6c>)
 80069ee:	f000 fe38 	bl	8007662 <USBH_MSC_Read>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <USBH_read+0x34>
  {
    res = RES_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80069fe:	e015      	b.n	8006a2c <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006a00:	f107 0210 	add.w	r2, r7, #16
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	4619      	mov	r1, r3
 8006a08:	480b      	ldr	r0, [pc, #44]	; (8006a38 <USBH_read+0x6c>)
 8006a0a:	f000 fe06 	bl	800761a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006a0e:	7f7b      	ldrb	r3, [r7, #29]
 8006a10:	2b28      	cmp	r3, #40	; 0x28
 8006a12:	d003      	beq.n	8006a1c <USBH_read+0x50>
 8006a14:	2b3a      	cmp	r3, #58	; 0x3a
 8006a16:	d001      	beq.n	8006a1c <USBH_read+0x50>
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d103      	bne.n	8006a24 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8006a22:	e003      	b.n	8006a2c <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006a2a:	bf00      	nop
    }
  }

  return res;
 8006a2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3748      	adds	r7, #72	; 0x48
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	2000074c 	.word	0x2000074c

08006a3c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b094      	sub	sp, #80	; 0x50
 8006a40:	af02      	add	r7, sp, #8
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8006a52:	7bf9      	ldrb	r1, [r7, #15]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	4817      	ldr	r0, [pc, #92]	; (8006abc <USBH_write+0x80>)
 8006a5e:	f000 fe69 	bl	8007734 <USBH_MSC_Write>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <USBH_write+0x34>
  {
    res = RES_OK;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006a6e:	e01f      	b.n	8006ab0 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006a70:	f107 0210 	add.w	r2, r7, #16
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	4619      	mov	r1, r3
 8006a78:	4810      	ldr	r0, [pc, #64]	; (8006abc <USBH_write+0x80>)
 8006a7a:	f000 fdce 	bl	800761a <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006a7e:	7f7b      	ldrb	r3, [r7, #29]
 8006a80:	2b27      	cmp	r3, #39	; 0x27
 8006a82:	d009      	beq.n	8006a98 <USBH_write+0x5c>
 8006a84:	2b27      	cmp	r3, #39	; 0x27
 8006a86:	dc02      	bgt.n	8006a8e <USBH_write+0x52>
 8006a88:	2b04      	cmp	r3, #4
 8006a8a:	d009      	beq.n	8006aa0 <USBH_write+0x64>
 8006a8c:	e00c      	b.n	8006aa8 <USBH_write+0x6c>
 8006a8e:	2b28      	cmp	r3, #40	; 0x28
 8006a90:	d006      	beq.n	8006aa0 <USBH_write+0x64>
 8006a92:	2b3a      	cmp	r3, #58	; 0x3a
 8006a94:	d004      	beq.n	8006aa0 <USBH_write+0x64>
 8006a96:	e007      	b.n	8006aa8 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006a98:	2302      	movs	r3, #2
 8006a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006a9e:	e007      	b.n	8006ab0 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006aa6:	e003      	b.n	8006ab0 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8006aae:	bf00      	nop
    }
  }

  return res;
 8006ab0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3748      	adds	r7, #72	; 0x48
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	2000074c 	.word	0x2000074c

08006ac0 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b090      	sub	sp, #64	; 0x40
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	603a      	str	r2, [r7, #0]
 8006aca:	71fb      	strb	r3, [r7, #7]
 8006acc:	460b      	mov	r3, r1
 8006ace:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006ad6:	79bb      	ldrb	r3, [r7, #6]
 8006ad8:	2b03      	cmp	r3, #3
 8006ada:	d852      	bhi.n	8006b82 <USBH_ioctl+0xc2>
 8006adc:	a201      	add	r2, pc, #4	; (adr r2, 8006ae4 <USBH_ioctl+0x24>)
 8006ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ae2:	bf00      	nop
 8006ae4:	08006af5 	.word	0x08006af5
 8006ae8:	08006afd 	.word	0x08006afd
 8006aec:	08006b27 	.word	0x08006b27
 8006af0:	08006b53 	.word	0x08006b53
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006afa:	e045      	b.n	8006b88 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006afc:	f107 0208 	add.w	r2, r7, #8
 8006b00:	79fb      	ldrb	r3, [r7, #7]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4823      	ldr	r0, [pc, #140]	; (8006b94 <USBH_ioctl+0xd4>)
 8006b06:	f000 fd88 	bl	800761a <USBH_MSC_GetLUNInfo>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006b1c:	e034      	b.n	8006b88 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006b24:	e030      	b.n	8006b88 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006b26:	f107 0208 	add.w	r2, r7, #8
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	4819      	ldr	r0, [pc, #100]	; (8006b94 <USBH_ioctl+0xd4>)
 8006b30:	f000 fd73 	bl	800761a <USBH_MSC_GetLUNInfo>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d107      	bne.n	8006b4a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8006b3a:	8a3b      	ldrh	r3, [r7, #16]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006b48:	e01e      	b.n	8006b88 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006b50:	e01a      	b.n	8006b88 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006b52:	f107 0208 	add.w	r2, r7, #8
 8006b56:	79fb      	ldrb	r3, [r7, #7]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	480e      	ldr	r0, [pc, #56]	; (8006b94 <USBH_ioctl+0xd4>)
 8006b5c:	f000 fd5d 	bl	800761a <USBH_MSC_GetLUNInfo>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d109      	bne.n	8006b7a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8006b66:	8a3b      	ldrh	r3, [r7, #16]
 8006b68:	0a5b      	lsrs	r3, r3, #9
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006b78:	e006      	b.n	8006b88 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8006b80:	e002      	b.n	8006b88 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8006b82:	2304      	movs	r3, #4
 8006b84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8006b88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3740      	adds	r7, #64	; 0x40
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	2000074c 	.word	0x2000074c

08006b98 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b98:	b590      	push	{r4, r7, lr}
 8006b9a:	b089      	sub	sp, #36	; 0x24
 8006b9c:	af04      	add	r7, sp, #16
 8006b9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ba6:	7919      	ldrb	r1, [r3, #4]
 8006ba8:	2350      	movs	r3, #80	; 0x50
 8006baa:	2206      	movs	r2, #6
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f001 fc4f 	bl	8008450 <USBH_FindInterface>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006bb6:	7bfb      	ldrb	r3, [r7, #15]
 8006bb8:	2bff      	cmp	r3, #255	; 0xff
 8006bba:	d002      	beq.n	8006bc2 <USBH_MSC_InterfaceInit+0x2a>
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d901      	bls.n	8006bc6 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e0ef      	b.n	8006da6 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8006bc6:	7bfb      	ldrb	r3, [r7, #15]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f001 fc24 	bl	8008418 <USBH_SelectInterface>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	e0e3      	b.n	8006da6 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006be4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006be8:	f003 fa7a 	bl	800a0e0 <malloc>
 8006bec:	4603      	mov	r3, r0
 8006bee:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8006c00:	2302      	movs	r3, #2
 8006c02:	e0d0      	b.n	8006da6 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006c04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c08:	2100      	movs	r1, #0
 8006c0a:	68b8      	ldr	r0, [r7, #8]
 8006c0c:	f003 fa83 	bl	800a116 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	211a      	movs	r1, #26
 8006c16:	fb01 f303 	mul.w	r3, r1, r3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	b25b      	sxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	da16      	bge.n	8006c56 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006c28:	7bfb      	ldrb	r3, [r7, #15]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	211a      	movs	r1, #26
 8006c2e:	fb01 f303 	mul.w	r3, r1, r3
 8006c32:	4413      	add	r3, r2
 8006c34:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	211a      	movs	r1, #26
 8006c44:	fb01 f303 	mul.w	r3, r1, r3
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c4e:	881a      	ldrh	r2, [r3, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	815a      	strh	r2, [r3, #10]
 8006c54:	e015      	b.n	8006c82 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006c56:	7bfb      	ldrb	r3, [r7, #15]
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	211a      	movs	r1, #26
 8006c5c:	fb01 f303 	mul.w	r3, r1, r3
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c66:	781a      	ldrb	r2, [r3, #0]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c6c:	7bfb      	ldrb	r3, [r7, #15]
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	211a      	movs	r1, #26
 8006c72:	fb01 f303 	mul.w	r3, r1, r3
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c7c:	881a      	ldrh	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8006c82:	7bfb      	ldrb	r3, [r7, #15]
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	211a      	movs	r1, #26
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b25b      	sxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	da16      	bge.n	8006cc8 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	211a      	movs	r1, #26
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006caa:	781a      	ldrb	r2, [r3, #0]
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	211a      	movs	r1, #26
 8006cb6:	fb01 f303 	mul.w	r3, r1, r3
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	815a      	strh	r2, [r3, #10]
 8006cc6:	e015      	b.n	8006cf4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	211a      	movs	r1, #26
 8006cce:	fb01 f303 	mul.w	r3, r1, r3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cd8:	781a      	ldrb	r2, [r3, #0]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	211a      	movs	r1, #26
 8006ce4:	fb01 f303 	mul.w	r3, r1, r3
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cee:	881a      	ldrh	r2, [r3, #0]
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	2200      	movs	r2, #0
 8006d04:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	799b      	ldrb	r3, [r3, #6]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f002 fdc2 	bl	8009896 <USBH_AllocPipe>
 8006d12:	4603      	mov	r3, r0
 8006d14:	461a      	mov	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	79db      	ldrb	r3, [r3, #7]
 8006d1e:	4619      	mov	r1, r3
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 fdb8 	bl	8009896 <USBH_AllocPipe>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fda4 	bl	800787c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	7959      	ldrb	r1, [r3, #5]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	7998      	ldrb	r0, [r3, #6]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	8912      	ldrh	r2, [r2, #8]
 8006d4c:	9202      	str	r2, [sp, #8]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	9201      	str	r2, [sp, #4]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4623      	mov	r3, r4
 8006d56:	4602      	mov	r2, r0
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f002 fd6d 	bl	8009838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	7919      	ldrb	r1, [r3, #4]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	79d8      	ldrb	r0, [r3, #7]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	8952      	ldrh	r2, [r2, #10]
 8006d76:	9202      	str	r2, [sp, #8]
 8006d78:	2202      	movs	r2, #2
 8006d7a:	9201      	str	r2, [sp, #4]
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4623      	mov	r3, r4
 8006d80:	4602      	mov	r2, r0
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f002 fd58 	bl	8009838 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	791b      	ldrb	r3, [r3, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4619      	mov	r1, r3
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f003 f8c1 	bl	8009f18 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	795b      	ldrb	r3, [r3, #5]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f003 f8ba 	bl	8009f18 <USBH_LL_SetToggle>

  return USBH_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd90      	pop	{r4, r7, pc}

08006dae <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b084      	sub	sp, #16
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dbc:	69db      	ldr	r3, [r3, #28]
 8006dbe:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	795b      	ldrb	r3, [r3, #5]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00e      	beq.n	8006de6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	795b      	ldrb	r3, [r3, #5]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f002 fd51 	bl	8009876 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	795b      	ldrb	r3, [r3, #5]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 fd7c 	bl	80098d8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	791b      	ldrb	r3, [r3, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00e      	beq.n	8006e0c <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	791b      	ldrb	r3, [r3, #4]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f002 fd3e 	bl	8009876 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	791b      	ldrb	r3, [r3, #4]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f002 fd69 	bl	80098d8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f003 f965 	bl	800a0f0 <free>
    phost->pActiveClass->pData = 0U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b084      	sub	sp, #16
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	7b9b      	ldrb	r3, [r3, #14]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d004      	beq.n	8006e62 <USBH_MSC_ClassRequest+0x28>
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d03e      	beq.n	8006eda <USBH_MSC_ClassRequest+0xa0>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d000      	beq.n	8006e62 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8006e60:	e04a      	b.n	8006ef8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	4619      	mov	r1, r3
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fcea 	bl	8007840 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8006e70:	7bfb      	ldrb	r3, [r7, #15]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d104      	bne.n	8006e80 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8006e80:	7bfb      	ldrb	r3, [r7, #15]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d135      	bne.n	8006ef2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d804      	bhi.n	8006e98 <USBH_MSC_ClassRequest+0x5e>
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	3301      	adds	r3, #1
 8006e94:	b2da      	uxtb	r2, r3
 8006e96:	e000      	b.n	8006e9a <USBH_MSC_ClassRequest+0x60>
 8006e98:	2202      	movs	r2, #2
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73bb      	strb	r3, [r7, #14]
 8006ea2:	e014      	b.n	8006ece <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	68ba      	ldr	r2, [r7, #8]
 8006ea8:	2134      	movs	r1, #52	; 0x34
 8006eaa:	fb01 f303 	mul.w	r3, r1, r3
 8006eae:	4413      	add	r3, r2
 8006eb0:	3392      	adds	r3, #146	; 0x92
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	2134      	movs	r1, #52	; 0x34
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	33c1      	adds	r3, #193	; 0xc1
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006ec8:	7bbb      	ldrb	r3, [r7, #14]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	73bb      	strb	r3, [r7, #14]
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	7bba      	ldrb	r2, [r7, #14]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d3e5      	bcc.n	8006ea4 <USBH_MSC_ClassRequest+0x6a>
      break;
 8006ed8:	e00b      	b.n	8006ef2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006eda:	2100      	movs	r1, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f002 f878 	bl	8008fd2 <USBH_ClrFeature>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d106      	bne.n	8006ef6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	7bda      	ldrb	r2, [r3, #15]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	739a      	strb	r2, [r3, #14]
      break;
 8006ef0:	e001      	b.n	8006ef6 <USBH_MSC_ClassRequest+0xbc>
      break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <USBH_MSC_ClassRequest+0xbe>
      break;
 8006ef6:	bf00      	nop
  }

  return status;
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3710      	adds	r7, #16
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
	...

08006f04 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f12:	69db      	ldr	r3, [r3, #28]
 8006f14:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006f16:	2301      	movs	r3, #1
 8006f18:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	7b1b      	ldrb	r3, [r3, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <USBH_MSC_Process+0x2e>
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	f000 8271 	beq.w	8007412 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006f30:	e272      	b.n	8007418 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f080 824f 	bcs.w	80073e2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	2334      	movs	r3, #52	; 0x34
 8006f50:	fb03 f301 	mul.w	r3, r3, r1
 8006f54:	4413      	add	r3, r2
 8006f56:	3391      	adds	r3, #145	; 0x91
 8006f58:	2201      	movs	r2, #1
 8006f5a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006f62:	4619      	mov	r1, r3
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	2334      	movs	r3, #52	; 0x34
 8006f68:	fb03 f301 	mul.w	r3, r3, r1
 8006f6c:	4413      	add	r3, r2
 8006f6e:	3390      	adds	r3, #144	; 0x90
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b08      	cmp	r3, #8
 8006f74:	f200 8243 	bhi.w	80073fe <USBH_MSC_Process+0x4fa>
 8006f78:	a201      	add	r2, pc, #4	; (adr r2, 8006f80 <USBH_MSC_Process+0x7c>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006fa5 	.word	0x08006fa5
 8006f84:	080073ff 	.word	0x080073ff
 8006f88:	0800706d 	.word	0x0800706d
 8006f8c:	080071f1 	.word	0x080071f1
 8006f90:	08006fcb 	.word	0x08006fcb
 8006f94:	080072bd 	.word	0x080072bd
 8006f98:	080073ff 	.word	0x080073ff
 8006f9c:	080073ff 	.word	0x080073ff
 8006fa0:	080073d1 	.word	0x080073d1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006faa:	4619      	mov	r1, r3
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	2334      	movs	r3, #52	; 0x34
 8006fb0:	fb03 f301 	mul.w	r3, r3, r1
 8006fb4:	4413      	add	r3, r2
 8006fb6:	3390      	adds	r3, #144	; 0x90
 8006fb8:	2204      	movs	r2, #4
 8006fba:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006fc8:	e222      	b.n	8007410 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006fd0:	b2d9      	uxtb	r1, r3
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006fd8:	461a      	mov	r2, r3
 8006fda:	2334      	movs	r3, #52	; 0x34
 8006fdc:	fb03 f302 	mul.w	r3, r3, r2
 8006fe0:	3398      	adds	r3, #152	; 0x98
 8006fe2:	693a      	ldr	r2, [r7, #16]
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3307      	adds	r3, #7
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 ff68 	bl	8007ec0 <USBH_MSC_SCSI_Inquiry>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007000:	4619      	mov	r1, r3
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	2334      	movs	r3, #52	; 0x34
 8007006:	fb03 f301 	mul.w	r3, r3, r1
 800700a:	4413      	add	r3, r2
 800700c:	3390      	adds	r3, #144	; 0x90
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d10c      	bne.n	8007032 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800701e:	4619      	mov	r1, r3
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	2334      	movs	r3, #52	; 0x34
 8007024:	fb03 f301 	mul.w	r3, r3, r1
 8007028:	4413      	add	r3, r2
 800702a:	3390      	adds	r3, #144	; 0x90
 800702c:	2205      	movs	r2, #5
 800702e:	701a      	strb	r2, [r3, #0]
            break;
 8007030:	e1e7      	b.n	8007402 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007032:	7bfb      	ldrb	r3, [r7, #15]
 8007034:	2b04      	cmp	r3, #4
 8007036:	f040 81e4 	bne.w	8007402 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007040:	4619      	mov	r1, r3
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	2334      	movs	r3, #52	; 0x34
 8007046:	fb03 f301 	mul.w	r3, r3, r1
 800704a:	4413      	add	r3, r2
 800704c:	3390      	adds	r3, #144	; 0x90
 800704e:	2201      	movs	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007058:	4619      	mov	r1, r3
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	2334      	movs	r3, #52	; 0x34
 800705e:	fb03 f301 	mul.w	r3, r3, r1
 8007062:	4413      	add	r3, r2
 8007064:	3391      	adds	r3, #145	; 0x91
 8007066:	2202      	movs	r2, #2
 8007068:	701a      	strb	r2, [r3, #0]
            break;
 800706a:	e1ca      	b.n	8007402 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007072:	b2db      	uxtb	r3, r3
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fe64 	bl	8007d44 <USBH_MSC_SCSI_TestUnitReady>
 800707c:	4603      	mov	r3, r0
 800707e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8007080:	7bbb      	ldrb	r3, [r7, #14]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d149      	bne.n	800711a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800708c:	4619      	mov	r1, r3
 800708e:	693a      	ldr	r2, [r7, #16]
 8007090:	2334      	movs	r3, #52	; 0x34
 8007092:	fb03 f301 	mul.w	r3, r3, r1
 8007096:	4413      	add	r3, r2
 8007098:	3392      	adds	r3, #146	; 0x92
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00c      	beq.n	80070ba <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070a6:	4619      	mov	r1, r3
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	2334      	movs	r3, #52	; 0x34
 80070ac:	fb03 f301 	mul.w	r3, r3, r1
 80070b0:	4413      	add	r3, r2
 80070b2:	33c1      	adds	r3, #193	; 0xc1
 80070b4:	2201      	movs	r2, #1
 80070b6:	701a      	strb	r2, [r3, #0]
 80070b8:	e00b      	b.n	80070d2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070c0:	4619      	mov	r1, r3
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	2334      	movs	r3, #52	; 0x34
 80070c6:	fb03 f301 	mul.w	r3, r3, r1
 80070ca:	4413      	add	r3, r2
 80070cc:	33c1      	adds	r3, #193	; 0xc1
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070d8:	4619      	mov	r1, r3
 80070da:	693a      	ldr	r2, [r7, #16]
 80070dc:	2334      	movs	r3, #52	; 0x34
 80070de:	fb03 f301 	mul.w	r3, r3, r1
 80070e2:	4413      	add	r3, r2
 80070e4:	3390      	adds	r3, #144	; 0x90
 80070e6:	2203      	movs	r2, #3
 80070e8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80070f0:	4619      	mov	r1, r3
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	2334      	movs	r3, #52	; 0x34
 80070f6:	fb03 f301 	mul.w	r3, r3, r1
 80070fa:	4413      	add	r3, r2
 80070fc:	3391      	adds	r3, #145	; 0x91
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007108:	4619      	mov	r1, r3
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	2334      	movs	r3, #52	; 0x34
 800710e:	fb03 f301 	mul.w	r3, r3, r1
 8007112:	4413      	add	r3, r2
 8007114:	3392      	adds	r3, #146	; 0x92
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800711a:	7bbb      	ldrb	r3, [r7, #14]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d14a      	bne.n	80071b6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007126:	4619      	mov	r1, r3
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	2334      	movs	r3, #52	; 0x34
 800712c:	fb03 f301 	mul.w	r3, r3, r1
 8007130:	4413      	add	r3, r2
 8007132:	3392      	adds	r3, #146	; 0x92
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b02      	cmp	r3, #2
 8007138:	d00c      	beq.n	8007154 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007140:	4619      	mov	r1, r3
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	2334      	movs	r3, #52	; 0x34
 8007146:	fb03 f301 	mul.w	r3, r3, r1
 800714a:	4413      	add	r3, r2
 800714c:	33c1      	adds	r3, #193	; 0xc1
 800714e:	2201      	movs	r2, #1
 8007150:	701a      	strb	r2, [r3, #0]
 8007152:	e00b      	b.n	800716c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800715a:	4619      	mov	r1, r3
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	2334      	movs	r3, #52	; 0x34
 8007160:	fb03 f301 	mul.w	r3, r3, r1
 8007164:	4413      	add	r3, r2
 8007166:	33c1      	adds	r3, #193	; 0xc1
 8007168:	2200      	movs	r2, #0
 800716a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007172:	4619      	mov	r1, r3
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	2334      	movs	r3, #52	; 0x34
 8007178:	fb03 f301 	mul.w	r3, r3, r1
 800717c:	4413      	add	r3, r2
 800717e:	3390      	adds	r3, #144	; 0x90
 8007180:	2205      	movs	r2, #5
 8007182:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800718a:	4619      	mov	r1, r3
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	2334      	movs	r3, #52	; 0x34
 8007190:	fb03 f301 	mul.w	r3, r3, r1
 8007194:	4413      	add	r3, r2
 8007196:	3391      	adds	r3, #145	; 0x91
 8007198:	2201      	movs	r2, #1
 800719a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071a2:	4619      	mov	r1, r3
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	2334      	movs	r3, #52	; 0x34
 80071a8:	fb03 f301 	mul.w	r3, r3, r1
 80071ac:	4413      	add	r3, r2
 80071ae:	3392      	adds	r3, #146	; 0x92
 80071b0:	2202      	movs	r2, #2
 80071b2:	701a      	strb	r2, [r3, #0]
            break;
 80071b4:	e127      	b.n	8007406 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	f040 8124 	bne.w	8007406 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071c4:	4619      	mov	r1, r3
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	2334      	movs	r3, #52	; 0x34
 80071ca:	fb03 f301 	mul.w	r3, r3, r1
 80071ce:	4413      	add	r3, r2
 80071d0:	3390      	adds	r3, #144	; 0x90
 80071d2:	2201      	movs	r2, #1
 80071d4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071dc:	4619      	mov	r1, r3
 80071de:	693a      	ldr	r2, [r7, #16]
 80071e0:	2334      	movs	r3, #52	; 0x34
 80071e2:	fb03 f301 	mul.w	r3, r3, r1
 80071e6:	4413      	add	r3, r2
 80071e8:	3391      	adds	r3, #145	; 0x91
 80071ea:	2202      	movs	r2, #2
 80071ec:	701a      	strb	r2, [r3, #0]
            break;
 80071ee:	e10a      	b.n	8007406 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071f6:	b2d9      	uxtb	r1, r3
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80071fe:	461a      	mov	r2, r3
 8007200:	2334      	movs	r3, #52	; 0x34
 8007202:	fb03 f302 	mul.w	r3, r3, r2
 8007206:	3390      	adds	r3, #144	; 0x90
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4413      	add	r3, r2
 800720c:	3304      	adds	r3, #4
 800720e:	461a      	mov	r2, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fdda 	bl	8007dca <USBH_MSC_SCSI_ReadCapacity>
 8007216:	4603      	mov	r3, r0
 8007218:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d120      	bne.n	8007262 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007226:	4619      	mov	r1, r3
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	2334      	movs	r3, #52	; 0x34
 800722c:	fb03 f301 	mul.w	r3, r3, r1
 8007230:	4413      	add	r3, r2
 8007232:	3390      	adds	r3, #144	; 0x90
 8007234:	2201      	movs	r2, #1
 8007236:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800723e:	4619      	mov	r1, r3
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	2334      	movs	r3, #52	; 0x34
 8007244:	fb03 f301 	mul.w	r3, r3, r1
 8007248:	4413      	add	r3, r2
 800724a:	3391      	adds	r3, #145	; 0x91
 800724c:	2200      	movs	r2, #0
 800724e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007256:	3301      	adds	r3, #1
 8007258:	b29a      	uxth	r2, r3
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8007260:	e0d3      	b.n	800740a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b02      	cmp	r3, #2
 8007266:	d10c      	bne.n	8007282 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800726e:	4619      	mov	r1, r3
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	2334      	movs	r3, #52	; 0x34
 8007274:	fb03 f301 	mul.w	r3, r3, r1
 8007278:	4413      	add	r3, r2
 800727a:	3390      	adds	r3, #144	; 0x90
 800727c:	2205      	movs	r2, #5
 800727e:	701a      	strb	r2, [r3, #0]
            break;
 8007280:	e0c3      	b.n	800740a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b04      	cmp	r3, #4
 8007286:	f040 80c0 	bne.w	800740a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007290:	4619      	mov	r1, r3
 8007292:	693a      	ldr	r2, [r7, #16]
 8007294:	2334      	movs	r3, #52	; 0x34
 8007296:	fb03 f301 	mul.w	r3, r3, r1
 800729a:	4413      	add	r3, r2
 800729c:	3390      	adds	r3, #144	; 0x90
 800729e:	2201      	movs	r2, #1
 80072a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072a8:	4619      	mov	r1, r3
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	2334      	movs	r3, #52	; 0x34
 80072ae:	fb03 f301 	mul.w	r3, r3, r1
 80072b2:	4413      	add	r3, r2
 80072b4:	3391      	adds	r3, #145	; 0x91
 80072b6:	2202      	movs	r2, #2
 80072b8:	701a      	strb	r2, [r3, #0]
            break;
 80072ba:	e0a6      	b.n	800740a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072c2:	b2d9      	uxtb	r1, r3
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072ca:	461a      	mov	r2, r3
 80072cc:	2334      	movs	r3, #52	; 0x34
 80072ce:	fb03 f302 	mul.w	r3, r3, r2
 80072d2:	3398      	adds	r3, #152	; 0x98
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4413      	add	r3, r2
 80072d8:	3304      	adds	r3, #4
 80072da:	461a      	mov	r2, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fe94 	bl	800800a <USBH_MSC_SCSI_RequestSense>
 80072e2:	4603      	mov	r3, r0
 80072e4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d145      	bne.n	8007378 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80072f2:	4619      	mov	r1, r3
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	2334      	movs	r3, #52	; 0x34
 80072f8:	fb03 f301 	mul.w	r3, r3, r1
 80072fc:	4413      	add	r3, r2
 80072fe:	339c      	adds	r3, #156	; 0x9c
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b06      	cmp	r3, #6
 8007304:	d00c      	beq.n	8007320 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800730c:	4619      	mov	r1, r3
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	2334      	movs	r3, #52	; 0x34
 8007312:	fb03 f301 	mul.w	r3, r3, r1
 8007316:	4413      	add	r3, r2
 8007318:	339c      	adds	r3, #156	; 0x9c
 800731a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800731c:	2b02      	cmp	r3, #2
 800731e:	d117      	bne.n	8007350 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	f242 720f 	movw	r2, #9999	; 0x270f
 8007332:	4293      	cmp	r3, r2
 8007334:	d80c      	bhi.n	8007350 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800733c:	4619      	mov	r1, r3
 800733e:	693a      	ldr	r2, [r7, #16]
 8007340:	2334      	movs	r3, #52	; 0x34
 8007342:	fb03 f301 	mul.w	r3, r3, r1
 8007346:	4413      	add	r3, r2
 8007348:	3390      	adds	r3, #144	; 0x90
 800734a:	2202      	movs	r2, #2
 800734c:	701a      	strb	r2, [r3, #0]
                  break;
 800734e:	e05f      	b.n	8007410 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007356:	4619      	mov	r1, r3
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	2334      	movs	r3, #52	; 0x34
 800735c:	fb03 f301 	mul.w	r3, r3, r1
 8007360:	4413      	add	r3, r2
 8007362:	3390      	adds	r3, #144	; 0x90
 8007364:	2201      	movs	r2, #1
 8007366:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800736e:	3301      	adds	r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8007378:	7bfb      	ldrb	r3, [r7, #15]
 800737a:	2b02      	cmp	r3, #2
 800737c:	d10c      	bne.n	8007398 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8007384:	4619      	mov	r1, r3
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	2334      	movs	r3, #52	; 0x34
 800738a:	fb03 f301 	mul.w	r3, r3, r1
 800738e:	4413      	add	r3, r2
 8007390:	3390      	adds	r3, #144	; 0x90
 8007392:	2208      	movs	r2, #8
 8007394:	701a      	strb	r2, [r3, #0]
            break;
 8007396:	e03a      	b.n	800740e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b04      	cmp	r3, #4
 800739c:	d137      	bne.n	800740e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073a4:	4619      	mov	r1, r3
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	2334      	movs	r3, #52	; 0x34
 80073aa:	fb03 f301 	mul.w	r3, r3, r1
 80073ae:	4413      	add	r3, r2
 80073b0:	3390      	adds	r3, #144	; 0x90
 80073b2:	2201      	movs	r2, #1
 80073b4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073bc:	4619      	mov	r1, r3
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	2334      	movs	r3, #52	; 0x34
 80073c2:	fb03 f301 	mul.w	r3, r3, r1
 80073c6:	4413      	add	r3, r2
 80073c8:	3391      	adds	r3, #145	; 0x91
 80073ca:	2202      	movs	r2, #2
 80073cc:	701a      	strb	r2, [r3, #0]
            break;
 80073ce:	e01e      	b.n	800740e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80073d6:	3301      	adds	r3, #1
 80073d8:	b29a      	uxth	r2, r3
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80073e0:	e016      	b.n	8007410 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	2201      	movs	r2, #1
 80073ee:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073f6:	2102      	movs	r1, #2
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	4798      	blx	r3
      break;
 80073fc:	e00c      	b.n	8007418 <USBH_MSC_Process+0x514>
            break;
 80073fe:	bf00      	nop
 8007400:	e00a      	b.n	8007418 <USBH_MSC_Process+0x514>
            break;
 8007402:	bf00      	nop
 8007404:	e008      	b.n	8007418 <USBH_MSC_Process+0x514>
            break;
 8007406:	bf00      	nop
 8007408:	e006      	b.n	8007418 <USBH_MSC_Process+0x514>
            break;
 800740a:	bf00      	nop
 800740c:	e004      	b.n	8007418 <USBH_MSC_Process+0x514>
            break;
 800740e:	bf00      	nop
      break;
 8007410:	e002      	b.n	8007418 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8007412:	2300      	movs	r3, #0
 8007414:	75fb      	strb	r3, [r7, #23]
      break;
 8007416:	bf00      	nop
  }
  return error;
 8007418:	7dfb      	ldrb	r3, [r7, #23]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop

08007424 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800742c:	2300      	movs	r3, #0
}
 800742e:	4618      	mov	r0, r3
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800743a:	b580      	push	{r7, lr}
 800743c:	b088      	sub	sp, #32
 800743e:	af02      	add	r7, sp, #8
 8007440:	6078      	str	r0, [r7, #4]
 8007442:	460b      	mov	r3, r1
 8007444:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8007450:	2301      	movs	r3, #1
 8007452:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	693a      	ldr	r2, [r7, #16]
 800745c:	2134      	movs	r1, #52	; 0x34
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	4413      	add	r3, r2
 8007464:	3390      	adds	r3, #144	; 0x90
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b06      	cmp	r3, #6
 800746a:	d004      	beq.n	8007476 <USBH_MSC_RdWrProcess+0x3c>
 800746c:	2b07      	cmp	r3, #7
 800746e:	d037      	beq.n	80074e0 <USBH_MSC_RdWrProcess+0xa6>
 8007470:	2b05      	cmp	r3, #5
 8007472:	d06a      	beq.n	800754a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8007474:	e0a6      	b.n	80075c4 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8007476:	78f9      	ldrb	r1, [r7, #3]
 8007478:	2300      	movs	r3, #0
 800747a:	9300      	str	r3, [sp, #0]
 800747c:	2300      	movs	r3, #0
 800747e:	2200      	movs	r2, #0
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fea6 	bl	80081d2 <USBH_MSC_SCSI_Read>
 8007486:	4603      	mov	r3, r0
 8007488:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800748a:	7bfb      	ldrb	r3, [r7, #15]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10b      	bne.n	80074a8 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007490:	78fb      	ldrb	r3, [r7, #3]
 8007492:	693a      	ldr	r2, [r7, #16]
 8007494:	2134      	movs	r1, #52	; 0x34
 8007496:	fb01 f303 	mul.w	r3, r1, r3
 800749a:	4413      	add	r3, r2
 800749c:	3390      	adds	r3, #144	; 0x90
 800749e:	2201      	movs	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]
      break;
 80074a6:	e088      	b.n	80075ba <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 80074a8:	7bfb      	ldrb	r3, [r7, #15]
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d109      	bne.n	80074c2 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	2134      	movs	r1, #52	; 0x34
 80074b4:	fb01 f303 	mul.w	r3, r1, r3
 80074b8:	4413      	add	r3, r2
 80074ba:	3390      	adds	r3, #144	; 0x90
 80074bc:	2205      	movs	r2, #5
 80074be:	701a      	strb	r2, [r3, #0]
      break;
 80074c0:	e07b      	b.n	80075ba <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	d178      	bne.n	80075ba <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	2134      	movs	r1, #52	; 0x34
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	3390      	adds	r3, #144	; 0x90
 80074d6:	2208      	movs	r2, #8
 80074d8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80074da:	2302      	movs	r3, #2
 80074dc:	75fb      	strb	r3, [r7, #23]
      break;
 80074de:	e06c      	b.n	80075ba <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80074e0:	78f9      	ldrb	r1, [r7, #3]
 80074e2:	2300      	movs	r3, #0
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	2300      	movs	r3, #0
 80074e8:	2200      	movs	r2, #0
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fe06 	bl	80080fc <USBH_MSC_SCSI_Write>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	2134      	movs	r1, #52	; 0x34
 8007500:	fb01 f303 	mul.w	r3, r1, r3
 8007504:	4413      	add	r3, r2
 8007506:	3390      	adds	r3, #144	; 0x90
 8007508:	2201      	movs	r2, #1
 800750a:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	75fb      	strb	r3, [r7, #23]
      break;
 8007510:	e055      	b.n	80075be <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8007512:	7bfb      	ldrb	r3, [r7, #15]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d109      	bne.n	800752c <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8007518:	78fb      	ldrb	r3, [r7, #3]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	2134      	movs	r1, #52	; 0x34
 800751e:	fb01 f303 	mul.w	r3, r1, r3
 8007522:	4413      	add	r3, r2
 8007524:	3390      	adds	r3, #144	; 0x90
 8007526:	2205      	movs	r2, #5
 8007528:	701a      	strb	r2, [r3, #0]
      break;
 800752a:	e048      	b.n	80075be <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	2b04      	cmp	r3, #4
 8007530:	d145      	bne.n	80075be <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	2134      	movs	r1, #52	; 0x34
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	4413      	add	r3, r2
 800753e:	3390      	adds	r3, #144	; 0x90
 8007540:	2208      	movs	r2, #8
 8007542:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8007544:	2302      	movs	r3, #2
 8007546:	75fb      	strb	r3, [r7, #23]
      break;
 8007548:	e039      	b.n	80075be <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2234      	movs	r2, #52	; 0x34
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	3398      	adds	r3, #152	; 0x98
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	4413      	add	r3, r2
 8007558:	1d1a      	adds	r2, r3, #4
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	4619      	mov	r1, r3
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fd53 	bl	800800a <USBH_MSC_SCSI_RequestSense>
 8007564:	4603      	mov	r3, r0
 8007566:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d113      	bne.n	8007596 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	693a      	ldr	r2, [r7, #16]
 8007572:	2134      	movs	r1, #52	; 0x34
 8007574:	fb01 f303 	mul.w	r3, r1, r3
 8007578:	4413      	add	r3, r2
 800757a:	3390      	adds	r3, #144	; 0x90
 800757c:	2201      	movs	r2, #1
 800757e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	2134      	movs	r1, #52	; 0x34
 8007586:	fb01 f303 	mul.w	r3, r1, r3
 800758a:	4413      	add	r3, r2
 800758c:	3391      	adds	r3, #145	; 0x91
 800758e:	2202      	movs	r2, #2
 8007590:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8007592:	2302      	movs	r3, #2
 8007594:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	2b02      	cmp	r3, #2
 800759a:	d012      	beq.n	80075c2 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800759c:	7bfb      	ldrb	r3, [r7, #15]
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d10f      	bne.n	80075c2 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80075a2:	78fb      	ldrb	r3, [r7, #3]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	2134      	movs	r1, #52	; 0x34
 80075a8:	fb01 f303 	mul.w	r3, r1, r3
 80075ac:	4413      	add	r3, r2
 80075ae:	3390      	adds	r3, #144	; 0x90
 80075b0:	2208      	movs	r2, #8
 80075b2:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80075b4:	2302      	movs	r3, #2
 80075b6:	75fb      	strb	r3, [r7, #23]
      break;
 80075b8:	e003      	b.n	80075c2 <USBH_MSC_RdWrProcess+0x188>
      break;
 80075ba:	bf00      	nop
 80075bc:	e002      	b.n	80075c4 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80075be:	bf00      	nop
 80075c0:	e000      	b.n	80075c4 <USBH_MSC_RdWrProcess+0x18a>
      break;
 80075c2:	bf00      	nop

  }
  return error;
 80075c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b085      	sub	sp, #20
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e0:	69db      	ldr	r3, [r3, #28]
 80075e2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b0b      	cmp	r3, #11
 80075ec:	d10c      	bne.n	8007608 <USBH_MSC_UnitIsReady+0x3a>
 80075ee:	78fb      	ldrb	r3, [r7, #3]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	2134      	movs	r1, #52	; 0x34
 80075f4:	fb01 f303 	mul.w	r3, r1, r3
 80075f8:	4413      	add	r3, r2
 80075fa:	3391      	adds	r3, #145	; 0x91
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d102      	bne.n	8007608 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8007602:	2301      	movs	r3, #1
 8007604:	73fb      	strb	r3, [r7, #15]
 8007606:	e001      	b.n	800760c <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8007608:	2300      	movs	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	460b      	mov	r3, r1
 8007624:	607a      	str	r2, [r7, #4]
 8007626:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800762e:	69db      	ldr	r3, [r3, #28]
 8007630:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	781b      	ldrb	r3, [r3, #0]
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b0b      	cmp	r3, #11
 800763a:	d10d      	bne.n	8007658 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800763c:	7afb      	ldrb	r3, [r7, #11]
 800763e:	2234      	movs	r2, #52	; 0x34
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	3390      	adds	r3, #144	; 0x90
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	2234      	movs	r2, #52	; 0x34
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f002 fd56 	bl	800a100 <memcpy>
    return USBH_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	e000      	b.n	800765a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8007658:	2302      	movs	r3, #2
  }
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b088      	sub	sp, #32
 8007666:	af02      	add	r7, sp, #8
 8007668:	60f8      	str	r0, [r7, #12]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00e      	beq.n	80076a6 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800768e:	2b0b      	cmp	r3, #11
 8007690:	d109      	bne.n	80076a6 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	697a      	ldr	r2, [r7, #20]
 8007696:	2134      	movs	r1, #52	; 0x34
 8007698:	fb01 f303 	mul.w	r3, r1, r3
 800769c:	4413      	add	r3, r2
 800769e:	3390      	adds	r3, #144	; 0x90
 80076a0:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d001      	beq.n	80076aa <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80076a6:	2302      	movs	r3, #2
 80076a8:	e040      	b.n	800772c <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2206      	movs	r2, #6
 80076ae:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80076b0:	7afb      	ldrb	r3, [r7, #11]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	2134      	movs	r1, #52	; 0x34
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	3390      	adds	r3, #144	; 0x90
 80076be:	2206      	movs	r2, #6
 80076c0:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80076cc:	7af9      	ldrb	r1, [r7, #11]
 80076ce:	6a3b      	ldr	r3, [r7, #32]
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fd7b 	bl	80081d2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80076e2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80076e4:	e016      	b.n	8007714 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	1ad2      	subs	r2, r2, r3
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	f242 7110 	movw	r1, #10000	; 0x2710
 80076f6:	fb01 f303 	mul.w	r3, r1, r3
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d805      	bhi.n	800770a <USBH_MSC_Read+0xa8>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d104      	bne.n	8007714 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2201      	movs	r2, #1
 800770e:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007710:	2302      	movs	r3, #2
 8007712:	e00b      	b.n	800772c <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007714:	7afb      	ldrb	r3, [r7, #11]
 8007716:	4619      	mov	r1, r3
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7ff fe8e 	bl	800743a <USBH_MSC_RdWrProcess>
 800771e:	4603      	mov	r3, r0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d0e0      	beq.n	80076e6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	2201      	movs	r2, #1
 8007728:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af02      	add	r7, sp, #8
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	603b      	str	r3, [r7, #0]
 8007740:	460b      	mov	r3, r1
 8007742:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800774a:	69db      	ldr	r3, [r3, #28]
 800774c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d00e      	beq.n	8007778 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007760:	2b0b      	cmp	r3, #11
 8007762:	d109      	bne.n	8007778 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	697a      	ldr	r2, [r7, #20]
 8007768:	2134      	movs	r1, #52	; 0x34
 800776a:	fb01 f303 	mul.w	r3, r1, r3
 800776e:	4413      	add	r3, r2
 8007770:	3390      	adds	r3, #144	; 0x90
 8007772:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8007774:	2b01      	cmp	r3, #1
 8007776:	d001      	beq.n	800777c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8007778:	2302      	movs	r3, #2
 800777a:	e040      	b.n	80077fe <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	2207      	movs	r2, #7
 8007780:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007782:	7afb      	ldrb	r3, [r7, #11]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	2134      	movs	r1, #52	; 0x34
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	3390      	adds	r3, #144	; 0x90
 8007790:	2207      	movs	r2, #7
 8007792:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8007794:	7afb      	ldrb	r3, [r7, #11]
 8007796:	b29a      	uxth	r2, r3
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800779e:	7af9      	ldrb	r1, [r7, #11]
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	9300      	str	r3, [sp, #0]
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	68f8      	ldr	r0, [r7, #12]
 80077aa:	f000 fca7 	bl	80080fc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077b4:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80077b6:	e016      	b.n	80077e6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	1ad2      	subs	r2, r2, r3
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	f242 7110 	movw	r1, #10000	; 0x2710
 80077c8:	fb01 f303 	mul.w	r3, r1, r3
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d805      	bhi.n	80077dc <USBH_MSC_Write+0xa8>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	2201      	movs	r2, #1
 80077e0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80077e2:	2302      	movs	r3, #2
 80077e4:	e00b      	b.n	80077fe <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80077e6:	7afb      	ldrb	r3, [r7, #11]
 80077e8:	4619      	mov	r1, r3
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff fe25 	bl	800743a <USBH_MSC_RdWrProcess>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d0e0      	beq.n	80077b8 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	2201      	movs	r2, #1
 80077fa:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2221      	movs	r2, #33	; 0x21
 8007812:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	22ff      	movs	r2, #255	; 0xff
 8007818:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fdae 	bl	8009392 <USBH_CtlReq>
 8007836:	4603      	mov	r3, r0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	22a1      	movs	r2, #161	; 0xa1
 800784e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	22fe      	movs	r2, #254	; 0xfe
 8007854:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2201      	movs	r2, #1
 8007866:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007868:	2201      	movs	r2, #1
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fd90 	bl	8009392 <USBH_CtlReq>
 8007872:	4603      	mov	r3, r0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800788a:	69db      	ldr	r3, [r3, #28]
 800788c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	4a09      	ldr	r2, [pc, #36]	; (80078b8 <USBH_MSC_BOT_Init+0x3c>)
 8007892:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	4a09      	ldr	r2, [pc, #36]	; (80078bc <USBH_MSC_BOT_Init+0x40>)
 8007898:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr
 80078b8:	43425355 	.word	0x43425355
 80078bc:	20304050 	.word	0x20304050

080078c0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b088      	sub	sp, #32
 80078c4:	af02      	add	r7, sp, #8
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80078cc:	2301      	movs	r3, #1
 80078ce:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80078d4:	2301      	movs	r3, #1
 80078d6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078d8:	2300      	movs	r3, #0
 80078da:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f0:	3b01      	subs	r3, #1
 80078f2:	2b0a      	cmp	r3, #10
 80078f4:	f200 81a1 	bhi.w	8007c3a <USBH_MSC_BOT_Process+0x37a>
 80078f8:	a201      	add	r2, pc, #4	; (adr r2, 8007900 <USBH_MSC_BOT_Process+0x40>)
 80078fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fe:	bf00      	nop
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007957 	.word	0x08007957
 8007908:	080079c1 	.word	0x080079c1
 800790c:	080079df 	.word	0x080079df
 8007910:	08007a63 	.word	0x08007a63
 8007914:	08007a87 	.word	0x08007a87
 8007918:	08007b21 	.word	0x08007b21
 800791c:	08007b3d 	.word	0x08007b3d
 8007920:	08007b8f 	.word	0x08007b8f
 8007924:	08007bbf 	.word	0x08007bbf
 8007928:	08007c21 	.word	0x08007c21
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	78fa      	ldrb	r2, [r7, #3]
 8007930:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	2202      	movs	r2, #2
 8007938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	795a      	ldrb	r2, [r3, #5]
 8007946:	2301      	movs	r3, #1
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	221f      	movs	r2, #31
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f001 ff2f 	bl	80097b2 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8007954:	e180      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	795b      	ldrb	r3, [r3, #5]
 800795a:	4619      	mov	r1, r3
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	f002 fab1 	bl	8009ec4 <USBH_LL_GetURBState>
 8007962:	4603      	mov	r3, r0
 8007964:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007966:	7d3b      	ldrb	r3, [r7, #20]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d118      	bne.n	800799e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00f      	beq.n	8007994 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800797a:	b25b      	sxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	da04      	bge.n	800798a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	2203      	movs	r2, #3
 8007984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8007988:	e159      	b.n	8007c3e <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2205      	movs	r2, #5
 800798e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007992:	e154      	b.n	8007c3e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	2207      	movs	r2, #7
 8007998:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800799c:	e14f      	b.n	8007c3e <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800799e:	7d3b      	ldrb	r3, [r7, #20]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d104      	bne.n	80079ae <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80079ac:	e147      	b.n	8007c3e <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 80079ae:	7d3b      	ldrb	r3, [r7, #20]
 80079b0:	2b05      	cmp	r3, #5
 80079b2:	f040 8144 	bne.w	8007c3e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	220a      	movs	r2, #10
 80079ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80079be:	e13e      	b.n	8007c3e <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	895a      	ldrh	r2, [r3, #10]
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	791b      	ldrb	r3, [r3, #4]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 ff14 	bl	80097fc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2204      	movs	r2, #4
 80079d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 80079dc:	e13c      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	791b      	ldrb	r3, [r3, #4]
 80079e2:	4619      	mov	r1, r3
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f002 fa6d 	bl	8009ec4 <USBH_LL_GetURBState>
 80079ea:	4603      	mov	r3, r0
 80079ec:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80079ee:	7d3b      	ldrb	r3, [r7, #20]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d12d      	bne.n	8007a50 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079f8:	693a      	ldr	r2, [r7, #16]
 80079fa:	8952      	ldrh	r2, [r2, #10]
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d910      	bls.n	8007a22 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a06:	693a      	ldr	r2, [r7, #16]
 8007a08:	8952      	ldrh	r2, [r2, #10]
 8007a0a:	441a      	add	r2, r3
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	8952      	ldrh	r2, [r2, #10]
 8007a1a:	1a9a      	subs	r2, r3, r2
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a20:	e002      	b.n	8007a28 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	2200      	movs	r2, #0
 8007a26:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00a      	beq.n	8007a46 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	895a      	ldrh	r2, [r3, #10]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	791b      	ldrb	r3, [r3, #4]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 fedc 	bl	80097fc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8007a44:	e0fd      	b.n	8007c42 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	2207      	movs	r2, #7
 8007a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a4e:	e0f8      	b.n	8007c42 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8007a50:	7d3b      	ldrb	r3, [r7, #20]
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	f040 80f5 	bne.w	8007c42 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	2209      	movs	r2, #9
 8007a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a60:	e0ef      	b.n	8007c42 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	891a      	ldrh	r2, [r3, #8]
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	7958      	ldrb	r0, [r3, #5]
 8007a70:	2301      	movs	r3, #1
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4603      	mov	r3, r0
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f001 fe9b 	bl	80097b2 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	2206      	movs	r2, #6
 8007a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007a84:	e0e8      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	795b      	ldrb	r3, [r3, #5]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f002 fa19 	bl	8009ec4 <USBH_LL_GetURBState>
 8007a92:	4603      	mov	r3, r0
 8007a94:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007a96:	7d3b      	ldrb	r3, [r7, #20]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d130      	bne.n	8007afe <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	8912      	ldrh	r2, [r2, #8]
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d910      	bls.n	8007aca <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	8912      	ldrh	r2, [r2, #8]
 8007ab2:	441a      	add	r2, r3
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007abe:	693a      	ldr	r2, [r7, #16]
 8007ac0:	8912      	ldrh	r2, [r2, #8]
 8007ac2:	1a9a      	subs	r2, r3, r2
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ac8:	e002      	b.n	8007ad0 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2200      	movs	r2, #0
 8007ace:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00d      	beq.n	8007af4 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	891a      	ldrh	r2, [r3, #8]
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	7958      	ldrb	r0, [r3, #5]
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4603      	mov	r3, r0
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 fe60 	bl	80097b2 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8007af2:	e0a8      	b.n	8007c46 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2207      	movs	r2, #7
 8007af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007afc:	e0a3      	b.n	8007c46 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007afe:	7d3b      	ldrb	r3, [r7, #20]
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d104      	bne.n	8007b0e <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	2205      	movs	r2, #5
 8007b08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b0c:	e09b      	b.n	8007c46 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8007b0e:	7d3b      	ldrb	r3, [r7, #20]
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	f040 8098 	bne.w	8007c46 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	220a      	movs	r2, #10
 8007b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b1e:	e092      	b.n	8007c46 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	791b      	ldrb	r3, [r3, #4]
 8007b2a:	220d      	movs	r2, #13
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 fe65 	bl	80097fc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2208      	movs	r2, #8
 8007b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b3a:	e08d      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	791b      	ldrb	r3, [r3, #4]
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f002 f9be 	bl	8009ec4 <USBH_LL_GetURBState>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8007b4c:	7d3b      	ldrb	r3, [r7, #20]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d115      	bne.n	8007b7e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f8aa 	bl	8007cbc <USBH_MSC_DecodeCSW>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8007b6c:	7d7b      	ldrb	r3, [r7, #21]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8007b76:	e068      	b.n	8007c4a <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8007b78:	2302      	movs	r3, #2
 8007b7a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b7c:	e065      	b.n	8007c4a <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8007b7e:	7d3b      	ldrb	r3, [r7, #20]
 8007b80:	2b05      	cmp	r3, #5
 8007b82:	d162      	bne.n	8007c4a <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2209      	movs	r2, #9
 8007b88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007b8c:	e05d      	b.n	8007c4a <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8007b8e:	78fb      	ldrb	r3, [r7, #3]
 8007b90:	2200      	movs	r2, #0
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f865 	bl	8007c64 <USBH_MSC_BOT_Abort>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007b9e:	7dbb      	ldrb	r3, [r7, #22]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	2207      	movs	r2, #7
 8007ba8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8007bac:	e04f      	b.n	8007c4e <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007bae:	7dbb      	ldrb	r3, [r7, #22]
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d14c      	bne.n	8007c4e <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	220b      	movs	r2, #11
 8007bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007bbc:	e047      	b.n	8007c4e <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 f84d 	bl	8007c64 <USBH_MSC_BOT_Abort>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007bce:	7dbb      	ldrb	r3, [r7, #22]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d11d      	bne.n	8007c10 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	795b      	ldrb	r3, [r3, #5]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f002 f9cf 	bl	8009f7e <USBH_LL_GetToggle>
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	7959      	ldrb	r1, [r3, #5]
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
 8007bea:	f1c3 0301 	rsb	r3, r3, #1
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f002 f990 	bl	8009f18 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	791b      	ldrb	r3, [r3, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f002 f989 	bl	8009f18 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2209      	movs	r2, #9
 8007c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007c0e:	e020      	b.n	8007c52 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8007c10:	7dbb      	ldrb	r3, [r7, #22]
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d11d      	bne.n	8007c52 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007c16:	693b      	ldr	r3, [r7, #16]
 8007c18:	220b      	movs	r2, #11
 8007c1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8007c1e:	e018      	b.n	8007c52 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff fdf0 	bl	8007806 <USBH_MSC_BOT_REQ_Reset>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d112      	bne.n	8007c56 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8007c38:	e00d      	b.n	8007c56 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8007c3a:	bf00      	nop
 8007c3c:	e00c      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c3e:	bf00      	nop
 8007c40:	e00a      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c42:	bf00      	nop
 8007c44:	e008      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c46:	bf00      	nop
 8007c48:	e006      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c4a:	bf00      	nop
 8007c4c:	e004      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c4e:	bf00      	nop
 8007c50:	e002      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c52:	bf00      	nop
 8007c54:	e000      	b.n	8007c58 <USBH_MSC_BOT_Process+0x398>
      break;
 8007c56:	bf00      	nop
  }
  return status;
 8007c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop

08007c64 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
 8007c70:	4613      	mov	r3, r2
 8007c72:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c7e:	69db      	ldr	r3, [r3, #28]
 8007c80:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8007c82:	78bb      	ldrb	r3, [r7, #2]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <USBH_MSC_BOT_Abort+0x2a>
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d009      	beq.n	8007ca0 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8007c8c:	e011      	b.n	8007cb2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	79db      	ldrb	r3, [r3, #7]
 8007c92:	4619      	mov	r1, r3
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f001 f99c 	bl	8008fd2 <USBH_ClrFeature>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9e:	e008      	b.n	8007cb2 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	799b      	ldrb	r3, [r3, #6]
 8007ca4:	4619      	mov	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f001 f993 	bl	8008fd2 <USBH_ClrFeature>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	bf00      	nop
  }
  return status;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3710      	adds	r7, #16
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}

08007cbc <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	791b      	ldrb	r3, [r3, #4]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f002 f861 	bl	8009da0 <USBH_LL_GetLastXferSize>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b0d      	cmp	r3, #13
 8007ce2:	d002      	beq.n	8007cea <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	73fb      	strb	r3, [r7, #15]
 8007ce8:	e024      	b.n	8007d34 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007cee:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <USBH_MSC_DecodeCSW+0x84>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d11d      	bne.n	8007d30 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d119      	bne.n	8007d34 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d102      	bne.n	8007d10 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	73fb      	strb	r3, [r7, #15]
 8007d0e:	e011      	b.n	8007d34 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d102      	bne.n	8007d20 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	73fb      	strb	r3, [r7, #15]
 8007d1e:	e009      	b.n	8007d34 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d26:	2b02      	cmp	r3, #2
 8007d28:	d104      	bne.n	8007d34 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007d2a:	2302      	movs	r3, #2
 8007d2c:	73fb      	strb	r3, [r7, #15]
 8007d2e:	e001      	b.n	8007d34 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007d30:	2302      	movs	r3, #2
 8007d32:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8007d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	53425355 	.word	0x53425355

08007d44 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8007d50:	2302      	movs	r3, #2
 8007d52:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d5a:	69db      	ldr	r3, [r3, #28]
 8007d5c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d002      	beq.n	8007d6e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d021      	beq.n	8007db0 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007d6c:	e028      	b.n	8007dc0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	2200      	movs	r2, #0
 8007d72:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	220a      	movs	r2, #10
 8007d80:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	3363      	adds	r3, #99	; 0x63
 8007d88:	2210      	movs	r2, #16
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f002 f9c2 	bl	800a116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	2202      	movs	r2, #2
 8007da6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8007daa:	2301      	movs	r3, #1
 8007dac:	73fb      	strb	r3, [r7, #15]
      break;
 8007dae:	e007      	b.n	8007dc0 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7ff fd83 	bl	80078c0 <USBH_MSC_BOT_Process>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007dbe:	bf00      	nop
  }

  return error;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007de2:	69db      	ldr	r3, [r3, #28]
 8007de4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d002      	beq.n	8007df6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d027      	beq.n	8007e44 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8007df4:	e05f      	b.n	8007eb6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	2208      	movs	r2, #8
 8007dfa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	2280      	movs	r2, #128	; 0x80
 8007e00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	220a      	movs	r2, #10
 8007e08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	3363      	adds	r3, #99	; 0x63
 8007e10:	2210      	movs	r2, #16
 8007e12:	2100      	movs	r1, #0
 8007e14:	4618      	mov	r0, r3
 8007e16:	f002 f97e 	bl	800a116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	2225      	movs	r2, #37	; 0x25
 8007e1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	2202      	movs	r2, #2
 8007e2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f103 0210 	add.w	r2, r3, #16
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	75fb      	strb	r3, [r7, #23]
      break;
 8007e42:	e038      	b.n	8007eb6 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007e44:	7afb      	ldrb	r3, [r7, #11]
 8007e46:	4619      	mov	r1, r3
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fd39 	bl	80078c0 <USBH_MSC_BOT_Process>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007e52:	7dfb      	ldrb	r3, [r7, #23]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d12d      	bne.n	8007eb4 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e5e:	3303      	adds	r3, #3
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	461a      	mov	r2, r3
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e6a:	3302      	adds	r3, #2
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	021b      	lsls	r3, r3, #8
 8007e70:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e78:	3301      	adds	r3, #1
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007e7e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	061b      	lsls	r3, r3, #24
 8007e8a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e96:	3307      	adds	r3, #7
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ea2:	3306      	adds	r3, #6
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	4313      	orrs	r3, r2
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	809a      	strh	r2, [r3, #4]
      break;
 8007eb4:	bf00      	nop
  }

  return error;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007ece:	2302      	movs	r3, #2
 8007ed0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d002      	beq.n	8007eec <USBH_MSC_SCSI_Inquiry+0x2c>
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d03d      	beq.n	8007f66 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007eea:	e089      	b.n	8008000 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	2224      	movs	r2, #36	; 0x24
 8007ef0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2280      	movs	r2, #128	; 0x80
 8007ef6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	220a      	movs	r2, #10
 8007efe:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	3363      	adds	r3, #99	; 0x63
 8007f06:	220a      	movs	r2, #10
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f002 f903 	bl	800a116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	2212      	movs	r2, #18
 8007f14:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007f18:	7afb      	ldrb	r3, [r7, #11]
 8007f1a:	015b      	lsls	r3, r3, #5
 8007f1c:	b2da      	uxtb	r2, r3
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	2224      	movs	r2, #36	; 0x24
 8007f38:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	f103 0210 	add.w	r2, r3, #16
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007f60:	2301      	movs	r3, #1
 8007f62:	75fb      	strb	r3, [r7, #23]
      break;
 8007f64:	e04c      	b.n	8008000 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007f66:	7afb      	ldrb	r3, [r7, #11]
 8007f68:	4619      	mov	r1, r3
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f7ff fca8 	bl	80078c0 <USBH_MSC_BOT_Process>
 8007f70:	4603      	mov	r3, r0
 8007f72:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d141      	bne.n	8007ffe <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007f7a:	2222      	movs	r2, #34	; 0x22
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f002 f8c9 	bl	800a116 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	f003 031f 	and.w	r3, r3, #31
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	095b      	lsrs	r3, r3, #5
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fac:	3301      	adds	r3, #1
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	b25b      	sxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da03      	bge.n	8007fbe <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	709a      	strb	r2, [r3, #2]
 8007fbc:	e002      	b.n	8007fc4 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	1cd8      	adds	r0, r3, #3
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fce:	3308      	adds	r3, #8
 8007fd0:	2208      	movs	r2, #8
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f002 f894 	bl	800a100 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f103 000c 	add.w	r0, r3, #12
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fe4:	3310      	adds	r3, #16
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f002 f889 	bl	800a100 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	331d      	adds	r3, #29
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8007ff8:	3220      	adds	r2, #32
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	601a      	str	r2, [r3, #0]
      break;
 8007ffe:	bf00      	nop
  }

  return error;
 8008000:	7dfb      	ldrb	r3, [r7, #23]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b086      	sub	sp, #24
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	460b      	mov	r3, r1
 8008014:	607a      	str	r2, [r7, #4]
 8008016:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008018:	2302      	movs	r3, #2
 800801a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800802c:	2b01      	cmp	r3, #1
 800802e:	d002      	beq.n	8008036 <USBH_MSC_SCSI_RequestSense+0x2c>
 8008030:	2b02      	cmp	r3, #2
 8008032:	d03d      	beq.n	80080b0 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8008034:	e05d      	b.n	80080f2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	220e      	movs	r2, #14
 800803a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	2280      	movs	r2, #128	; 0x80
 8008040:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	220a      	movs	r2, #10
 8008048:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	3363      	adds	r3, #99	; 0x63
 8008050:	2210      	movs	r2, #16
 8008052:	2100      	movs	r1, #0
 8008054:	4618      	mov	r0, r3
 8008056:	f002 f85e 	bl	800a116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	2203      	movs	r2, #3
 800805e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	015b      	lsls	r3, r3, #5
 8008066:	b2da      	uxtb	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2200      	movs	r2, #0
 8008072:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	220e      	movs	r2, #14
 8008082:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2200      	movs	r2, #0
 800808a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	2202      	movs	r2, #2
 800809a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f103 0210 	add.w	r2, r3, #16
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80080aa:	2301      	movs	r3, #1
 80080ac:	75fb      	strb	r3, [r7, #23]
      break;
 80080ae:	e020      	b.n	80080f2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80080b0:	7afb      	ldrb	r3, [r7, #11]
 80080b2:	4619      	mov	r1, r3
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f7ff fc03 	bl	80078c0 <USBH_MSC_BOT_Process>
 80080ba:	4603      	mov	r3, r0
 80080bc:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80080be:	7dfb      	ldrb	r3, [r7, #23]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d115      	bne.n	80080f0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ca:	3302      	adds	r3, #2
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	f003 030f 	and.w	r3, r3, #15
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080de:	7b1a      	ldrb	r2, [r3, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ea:	7b5a      	ldrb	r2, [r3, #13]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	709a      	strb	r2, [r3, #2]
      break;
 80080f0:	bf00      	nop
  }

  return error;
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	607a      	str	r2, [r7, #4]
 8008106:	603b      	str	r3, [r7, #0]
 8008108:	460b      	mov	r3, r1
 800810a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800810c:	2302      	movs	r3, #2
 800810e:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008120:	2b01      	cmp	r3, #1
 8008122:	d002      	beq.n	800812a <USBH_MSC_SCSI_Write+0x2e>
 8008124:	2b02      	cmp	r3, #2
 8008126:	d047      	beq.n	80081b8 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008128:	e04e      	b.n	80081c8 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008130:	461a      	mov	r2, r3
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	fb03 f202 	mul.w	r2, r3, r2
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	220a      	movs	r2, #10
 8008148:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	3363      	adds	r3, #99	; 0x63
 8008150:	2210      	movs	r2, #16
 8008152:	2100      	movs	r1, #0
 8008154:	4618      	mov	r0, r3
 8008156:	f001 ffde 	bl	800a116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	222a      	movs	r2, #42	; 0x2a
 800815e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008162:	79fa      	ldrb	r2, [r7, #7]
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800816a:	79ba      	ldrb	r2, [r7, #6]
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008172:	797a      	ldrb	r2, [r7, #5]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800817a:	1d3b      	adds	r3, r7, #4
 800817c:	781a      	ldrb	r2, [r3, #0]
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8008184:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800818e:	f107 0320 	add.w	r3, r7, #32
 8008192:	781a      	ldrb	r2, [r3, #0]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	2201      	movs	r2, #1
 800819e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	2202      	movs	r2, #2
 80081a6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80081b2:	2301      	movs	r3, #1
 80081b4:	75fb      	strb	r3, [r7, #23]
      break;
 80081b6:	e007      	b.n	80081c8 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80081b8:	7afb      	ldrb	r3, [r7, #11]
 80081ba:	4619      	mov	r1, r3
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f7ff fb7f 	bl	80078c0 <USBH_MSC_BOT_Process>
 80081c2:	4603      	mov	r3, r0
 80081c4:	75fb      	strb	r3, [r7, #23]
      break;
 80081c6:	bf00      	nop
  }

  return error;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b086      	sub	sp, #24
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	60f8      	str	r0, [r7, #12]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
 80081de:	460b      	mov	r3, r1
 80081e0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80081e2:	2302      	movs	r3, #2
 80081e4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d002      	beq.n	8008200 <USBH_MSC_SCSI_Read+0x2e>
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d047      	beq.n	800828e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80081fe:	e04e      	b.n	800829e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8008206:	461a      	mov	r2, r3
 8008208:	6a3b      	ldr	r3, [r7, #32]
 800820a:	fb03 f202 	mul.w	r2, r3, r2
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2280      	movs	r2, #128	; 0x80
 8008216:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	220a      	movs	r2, #10
 800821e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3363      	adds	r3, #99	; 0x63
 8008226:	2210      	movs	r2, #16
 8008228:	2100      	movs	r1, #0
 800822a:	4618      	mov	r0, r3
 800822c:	f001 ff73 	bl	800a116 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	2228      	movs	r2, #40	; 0x28
 8008234:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8008238:	79fa      	ldrb	r2, [r7, #7]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8008240:	79ba      	ldrb	r2, [r7, #6]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8008248:	797a      	ldrb	r2, [r7, #5]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8008250:	1d3b      	adds	r3, r7, #4
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800825a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8008264:	f107 0320 	add.w	r3, r7, #32
 8008268:	781a      	ldrb	r2, [r3, #0]
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	2202      	movs	r2, #2
 800827c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008288:	2301      	movs	r3, #1
 800828a:	75fb      	strb	r3, [r7, #23]
      break;
 800828c:	e007      	b.n	800829e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800828e:	7afb      	ldrb	r3, [r7, #11]
 8008290:	4619      	mov	r1, r3
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f7ff fb14 	bl	80078c0 <USBH_MSC_BOT_Process>
 8008298:	4603      	mov	r3, r0
 800829a:	75fb      	strb	r3, [r7, #23]
      break;
 800829c:	bf00      	nop
  }

  return error;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	4613      	mov	r3, r2
 80082b4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d101      	bne.n	80082c0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80082bc:	2302      	movs	r3, #2
 80082be:	e029      	b.n	8008314 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	79fa      	ldrb	r2, [r7, #7]
 80082c4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 f81f 	bl	800831c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f001 fc95 	bl	8009c3c <USBH_LL_Init>

  return USBH_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
 800832c:	e009      	b.n	8008342 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	33e0      	adds	r3, #224	; 0xe0
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	4413      	add	r3, r2
 8008338:	2200      	movs	r2, #0
 800833a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b0e      	cmp	r3, #14
 8008346:	d9f2      	bls.n	800832e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]
 800834c:	e009      	b.n	8008362 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	4413      	add	r3, r2
 8008354:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008358:	2200      	movs	r2, #0
 800835a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008368:	d3f1      	bcc.n	800834e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2240      	movs	r2, #64	; 0x40
 800838e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80083ce:	2300      	movs	r3, #0
 80083d0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d016      	beq.n	8008406 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10e      	bne.n	8008400 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80083e8:	1c59      	adds	r1, r3, #1
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	33de      	adds	r3, #222	; 0xde
 80083f4:	6839      	ldr	r1, [r7, #0]
 80083f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80083fa:	2300      	movs	r3, #0
 80083fc:	73fb      	strb	r3, [r7, #15]
 80083fe:	e004      	b.n	800840a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008400:	2302      	movs	r3, #2
 8008402:	73fb      	strb	r3, [r7, #15]
 8008404:	e001      	b.n	800840a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008406:	2302      	movs	r3, #2
 8008408:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800842e:	78fa      	ldrb	r2, [r7, #3]
 8008430:	429a      	cmp	r2, r3
 8008432:	d204      	bcs.n	800843e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800843c:	e001      	b.n	8008442 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800843e:	2302      	movs	r3, #2
 8008440:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008442:	7bfb      	ldrb	r3, [r7, #15]
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	4608      	mov	r0, r1
 800845a:	4611      	mov	r1, r2
 800845c:	461a      	mov	r2, r3
 800845e:	4603      	mov	r3, r0
 8008460:	70fb      	strb	r3, [r7, #3]
 8008462:	460b      	mov	r3, r1
 8008464:	70bb      	strb	r3, [r7, #2]
 8008466:	4613      	mov	r3, r2
 8008468:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800846e:	2300      	movs	r3, #0
 8008470:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008478:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800847a:	e025      	b.n	80084c8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	221a      	movs	r2, #26
 8008480:	fb02 f303 	mul.w	r3, r2, r3
 8008484:	3308      	adds	r3, #8
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4413      	add	r3, r2
 800848a:	3302      	adds	r3, #2
 800848c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	795b      	ldrb	r3, [r3, #5]
 8008492:	78fa      	ldrb	r2, [r7, #3]
 8008494:	429a      	cmp	r2, r3
 8008496:	d002      	beq.n	800849e <USBH_FindInterface+0x4e>
 8008498:	78fb      	ldrb	r3, [r7, #3]
 800849a:	2bff      	cmp	r3, #255	; 0xff
 800849c:	d111      	bne.n	80084c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80084a2:	78ba      	ldrb	r2, [r7, #2]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d002      	beq.n	80084ae <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084a8:	78bb      	ldrb	r3, [r7, #2]
 80084aa:	2bff      	cmp	r3, #255	; 0xff
 80084ac:	d109      	bne.n	80084c2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80084b2:	787a      	ldrb	r2, [r7, #1]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d002      	beq.n	80084be <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80084b8:	787b      	ldrb	r3, [r7, #1]
 80084ba:	2bff      	cmp	r3, #255	; 0xff
 80084bc:	d101      	bne.n	80084c2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	e006      	b.n	80084d0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80084c2:	7dfb      	ldrb	r3, [r7, #23]
 80084c4:	3301      	adds	r3, #1
 80084c6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d9d6      	bls.n	800847c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80084ce:	23ff      	movs	r3, #255	; 0xff
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f001 fbe5 	bl	8009cb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80084ea:	2101      	movs	r1, #1
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f001 fcfc 	bl	8009eea <USBH_LL_DriverVBUS>

  return USBH_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}

080084fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af04      	add	r7, sp, #16
 8008502:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008504:	2302      	movs	r3, #2
 8008506:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008512:	b2db      	uxtb	r3, r3
 8008514:	2b01      	cmp	r3, #1
 8008516:	d102      	bne.n	800851e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2203      	movs	r2, #3
 800851c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b0b      	cmp	r3, #11
 8008526:	f200 81b3 	bhi.w	8008890 <USBH_Process+0x394>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBH_Process+0x34>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008561 	.word	0x08008561
 8008534:	08008593 	.word	0x08008593
 8008538:	080085fb 	.word	0x080085fb
 800853c:	0800882b 	.word	0x0800882b
 8008540:	08008891 	.word	0x08008891
 8008544:	0800869f 	.word	0x0800869f
 8008548:	080087d1 	.word	0x080087d1
 800854c:	080086d5 	.word	0x080086d5
 8008550:	080086f5 	.word	0x080086f5
 8008554:	08008715 	.word	0x08008715
 8008558:	08008743 	.word	0x08008743
 800855c:	08008813 	.word	0x08008813
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b00      	cmp	r3, #0
 800856a:	f000 8193 	beq.w	8008894 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008574:	20c8      	movs	r0, #200	; 0xc8
 8008576:	f001 fd35 	bl	8009fe4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 fbf5 	bl	8009d6a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008590:	e180      	b.n	8008894 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8008598:	2b01      	cmp	r3, #1
 800859a:	d107      	bne.n	80085ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2200      	movs	r2, #0
 80085a0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2202      	movs	r2, #2
 80085a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80085aa:	e182      	b.n	80088b2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80085b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085b6:	d914      	bls.n	80085e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80085be:	3301      	adds	r3, #1
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d903      	bls.n	80085da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	220d      	movs	r2, #13
 80085d6:	701a      	strb	r2, [r3, #0]
      break;
 80085d8:	e16b      	b.n	80088b2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	701a      	strb	r2, [r3, #0]
      break;
 80085e0:	e167      	b.n	80088b2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80085e8:	f103 020a 	add.w	r2, r3, #10
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80085f2:	200a      	movs	r0, #10
 80085f4:	f001 fcf6 	bl	8009fe4 <USBH_Delay>
      break;
 80085f8:	e15b      	b.n	80088b2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800860a:	2104      	movs	r1, #4
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008610:	2064      	movs	r0, #100	; 0x64
 8008612:	f001 fce7 	bl	8009fe4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 fb82 	bl	8009d20 <USBH_LL_GetSpeed>
 800861c:	4603      	mov	r3, r0
 800861e:	461a      	mov	r2, r3
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2205      	movs	r2, #5
 800862a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800862c:	2100      	movs	r1, #0
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f001 f931 	bl	8009896 <USBH_AllocPipe>
 8008634:	4603      	mov	r3, r0
 8008636:	461a      	mov	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800863c:	2180      	movs	r1, #128	; 0x80
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 f929 	bl	8009896 <USBH_AllocPipe>
 8008644:	4603      	mov	r3, r0
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7919      	ldrb	r1, [r3, #4]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008660:	b292      	uxth	r2, r2
 8008662:	9202      	str	r2, [sp, #8]
 8008664:	2200      	movs	r2, #0
 8008666:	9201      	str	r2, [sp, #4]
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	4603      	mov	r3, r0
 800866c:	2280      	movs	r2, #128	; 0x80
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f001 f8e2 	bl	8009838 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7959      	ldrb	r1, [r3, #5]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008688:	b292      	uxth	r2, r2
 800868a:	9202      	str	r2, [sp, #8]
 800868c:	2200      	movs	r2, #0
 800868e:	9201      	str	r2, [sp, #4]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	4603      	mov	r3, r0
 8008694:	2200      	movs	r2, #0
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 f8ce 	bl	8009838 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800869c:	e109      	b.n	80088b2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f90c 	bl	80088bc <USBH_HandleEnum>
 80086a4:	4603      	mov	r3, r0
 80086a6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f040 80f3 	bne.w	8008898 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d103      	bne.n	80086cc <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2208      	movs	r2, #8
 80086c8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086ca:	e0e5      	b.n	8008898 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2207      	movs	r2, #7
 80086d0:	701a      	strb	r2, [r3, #0]
      break;
 80086d2:	e0e1      	b.n	8008898 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	f000 80de 	beq.w	800889c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80086e6:	2101      	movs	r1, #1
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2208      	movs	r2, #8
 80086f0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80086f2:	e0d3      	b.n	800889c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc20 	bl	8008f44 <USBH_SetCfg>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 80ca 	bne.w	80088a0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2209      	movs	r2, #9
 8008710:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008712:	e0c5      	b.n	80088a0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008722:	2101      	movs	r1, #1
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 fc30 	bl	8008f8a <USBH_SetFeature>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 80b9 	bne.w	80088a4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	220a      	movs	r2, #10
 8008736:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008738:	e0b4      	b.n	80088a4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	220a      	movs	r2, #10
 800873e:	701a      	strb	r2, [r3, #0]
      break;
 8008740:	e0b0      	b.n	80088a4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 80ad 	beq.w	80088a8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
 800875a:	e016      	b.n	800878a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800875c:	7bfa      	ldrb	r2, [r7, #15]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	32de      	adds	r2, #222	; 0xde
 8008762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008766:	791a      	ldrb	r2, [r3, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800876e:	429a      	cmp	r2, r3
 8008770:	d108      	bne.n	8008784 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008772:	7bfa      	ldrb	r2, [r7, #15]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32de      	adds	r2, #222	; 0xde
 8008778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008782:	e005      	b.n	8008790 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	3301      	adds	r3, #1
 8008788:	73fb      	strb	r3, [r7, #15]
 800878a:	7bfb      	ldrb	r3, [r7, #15]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0e5      	beq.n	800875c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d016      	beq.n	80087c8 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	4798      	blx	r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d109      	bne.n	80087c0 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2206      	movs	r2, #6
 80087b0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80087b8:	2103      	movs	r1, #3
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087be:	e073      	b.n	80088a8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	220d      	movs	r2, #13
 80087c4:	701a      	strb	r2, [r3, #0]
      break;
 80087c6:	e06f      	b.n	80088a8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	220d      	movs	r2, #13
 80087cc:	701a      	strb	r2, [r3, #0]
      break;
 80087ce:	e06b      	b.n	80088a8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d017      	beq.n	800880a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e0:	691b      	ldr	r3, [r3, #16]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	4798      	blx	r3
 80087e6:	4603      	mov	r3, r0
 80087e8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d103      	bne.n	80087fa <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	220b      	movs	r2, #11
 80087f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087f8:	e058      	b.n	80088ac <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d154      	bne.n	80088ac <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	220d      	movs	r2, #13
 8008806:	701a      	strb	r2, [r3, #0]
      break;
 8008808:	e050      	b.n	80088ac <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	220d      	movs	r2, #13
 800880e:	701a      	strb	r2, [r3, #0]
      break;
 8008810:	e04c      	b.n	80088ac <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008818:	2b00      	cmp	r3, #0
 800881a:	d049      	beq.n	80088b0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
      }
      break;
 8008828:	e042      	b.n	80088b0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7ff fd72 	bl	800831c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800885c:	2b00      	cmp	r3, #0
 800885e:	d005      	beq.n	800886c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008866:	2105      	movs	r1, #5
 8008868:	6878      	ldr	r0, [r7, #4]
 800886a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b01      	cmp	r3, #1
 8008876:	d107      	bne.n	8008888 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff fe2b 	bl	80084dc <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008886:	e014      	b.n	80088b2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 fa13 	bl	8009cb4 <USBH_LL_Start>
      break;
 800888e:	e010      	b.n	80088b2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008890:	bf00      	nop
 8008892:	e00e      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 8008894:	bf00      	nop
 8008896:	e00c      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 8008898:	bf00      	nop
 800889a:	e00a      	b.n	80088b2 <USBH_Process+0x3b6>
    break;
 800889c:	bf00      	nop
 800889e:	e008      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 80088a0:	bf00      	nop
 80088a2:	e006      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 80088a4:	bf00      	nop
 80088a6:	e004      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 80088a8:	bf00      	nop
 80088aa:	e002      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 80088ac:	bf00      	nop
 80088ae:	e000      	b.n	80088b2 <USBH_Process+0x3b6>
      break;
 80088b0:	bf00      	nop
  }
  return USBH_OK;
 80088b2:	2300      	movs	r3, #0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3710      	adds	r7, #16
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b088      	sub	sp, #32
 80088c0:	af04      	add	r7, sp, #16
 80088c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80088c4:	2301      	movs	r3, #1
 80088c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	785b      	ldrb	r3, [r3, #1]
 80088d0:	2b07      	cmp	r3, #7
 80088d2:	f200 81c1 	bhi.w	8008c58 <USBH_HandleEnum+0x39c>
 80088d6:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <USBH_HandleEnum+0x20>)
 80088d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088dc:	080088fd 	.word	0x080088fd
 80088e0:	080089bb 	.word	0x080089bb
 80088e4:	08008a25 	.word	0x08008a25
 80088e8:	08008ab3 	.word	0x08008ab3
 80088ec:	08008b1d 	.word	0x08008b1d
 80088f0:	08008b8d 	.word	0x08008b8d
 80088f4:	08008bd3 	.word	0x08008bd3
 80088f8:	08008c19 	.word	0x08008c19
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80088fc:	2108      	movs	r1, #8
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fa50 	bl	8008da4 <USBH_Get_DevDesc>
 8008904:	4603      	mov	r3, r0
 8008906:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008908:	7bbb      	ldrb	r3, [r7, #14]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d130      	bne.n	8008970 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	7919      	ldrb	r1, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008932:	b292      	uxth	r2, r2
 8008934:	9202      	str	r2, [sp, #8]
 8008936:	2200      	movs	r2, #0
 8008938:	9201      	str	r2, [sp, #4]
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	4603      	mov	r3, r0
 800893e:	2280      	movs	r2, #128	; 0x80
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 ff79 	bl	8009838 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	7959      	ldrb	r1, [r3, #5]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800895a:	b292      	uxth	r2, r2
 800895c:	9202      	str	r2, [sp, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	9201      	str	r2, [sp, #4]
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4603      	mov	r3, r0
 8008966:	2200      	movs	r2, #0
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 ff65 	bl	8009838 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800896e:	e175      	b.n	8008c5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008970:	7bbb      	ldrb	r3, [r7, #14]
 8008972:	2b03      	cmp	r3, #3
 8008974:	f040 8172 	bne.w	8008c5c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800897e:	3301      	adds	r3, #1
 8008980:	b2da      	uxtb	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800898e:	2b03      	cmp	r3, #3
 8008990:	d903      	bls.n	800899a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	220d      	movs	r2, #13
 8008996:	701a      	strb	r2, [r3, #0]
      break;
 8008998:	e160      	b.n	8008c5c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	795b      	ldrb	r3, [r3, #5]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 ff99 	bl	80098d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	791b      	ldrb	r3, [r3, #4]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 ff93 	bl	80098d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	701a      	strb	r2, [r3, #0]
      break;
 80089b8:	e150      	b.n	8008c5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80089ba:	2112      	movs	r1, #18
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f9f1 	bl	8008da4 <USBH_Get_DevDesc>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80089c6:	7bbb      	ldrb	r3, [r7, #14]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d103      	bne.n	80089d4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80089d2:	e145      	b.n	8008c60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	f040 8142 	bne.w	8008c60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089e2:	3301      	adds	r3, #1
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80089f2:	2b03      	cmp	r3, #3
 80089f4:	d903      	bls.n	80089fe <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	220d      	movs	r2, #13
 80089fa:	701a      	strb	r2, [r3, #0]
      break;
 80089fc:	e130      	b.n	8008c60 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	795b      	ldrb	r3, [r3, #5]
 8008a02:	4619      	mov	r1, r3
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 ff67 	bl	80098d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	791b      	ldrb	r3, [r3, #4]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 ff61 	bl	80098d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	701a      	strb	r2, [r3, #0]
      break;
 8008a22:	e11d      	b.n	8008c60 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008a24:	2101      	movs	r1, #1
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa68 	bl	8008efc <USBH_SetAddress>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d132      	bne.n	8008a9c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008a36:	2002      	movs	r0, #2
 8008a38:	f001 fad4 	bl	8009fe4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2201      	movs	r2, #1
 8008a40:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2203      	movs	r2, #3
 8008a48:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	7919      	ldrb	r1, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008a5e:	b292      	uxth	r2, r2
 8008a60:	9202      	str	r2, [sp, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	9201      	str	r2, [sp, #4]
 8008a66:	9300      	str	r3, [sp, #0]
 8008a68:	4603      	mov	r3, r0
 8008a6a:	2280      	movs	r2, #128	; 0x80
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fee3 	bl	8009838 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	7959      	ldrb	r1, [r3, #5]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a86:	b292      	uxth	r2, r2
 8008a88:	9202      	str	r2, [sp, #8]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	9201      	str	r2, [sp, #4]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	4603      	mov	r3, r0
 8008a92:	2200      	movs	r2, #0
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fecf 	bl	8009838 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008a9a:	e0e3      	b.n	8008c64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008a9c:	7bbb      	ldrb	r3, [r7, #14]
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	f040 80e0 	bne.w	8008c64 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	220d      	movs	r2, #13
 8008aa8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	705a      	strb	r2, [r3, #1]
      break;
 8008ab0:	e0d8      	b.n	8008c64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008ab2:	2109      	movs	r1, #9
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f99d 	bl	8008df4 <USBH_Get_CfgDesc>
 8008aba:	4603      	mov	r3, r0
 8008abc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008abe:	7bbb      	ldrb	r3, [r7, #14]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d103      	bne.n	8008acc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2204      	movs	r2, #4
 8008ac8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008aca:	e0cd      	b.n	8008c68 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008acc:	7bbb      	ldrb	r3, [r7, #14]
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	f040 80ca 	bne.w	8008c68 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ada:	3301      	adds	r3, #1
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d903      	bls.n	8008af6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	220d      	movs	r2, #13
 8008af2:	701a      	strb	r2, [r3, #0]
      break;
 8008af4:	e0b8      	b.n	8008c68 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	795b      	ldrb	r3, [r3, #5]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 feeb 	bl	80098d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	791b      	ldrb	r3, [r3, #4]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fee5 	bl	80098d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2200      	movs	r2, #0
 8008b12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]
      break;
 8008b1a:	e0a5      	b.n	8008c68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f965 	bl	8008df4 <USBH_Get_CfgDesc>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d103      	bne.n	8008b3c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2205      	movs	r2, #5
 8008b38:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b3a:	e097      	b.n	8008c6c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b3c:	7bbb      	ldrb	r3, [r7, #14]
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	f040 8094 	bne.w	8008c6c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	b2da      	uxtb	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d903      	bls.n	8008b66 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	220d      	movs	r2, #13
 8008b62:	701a      	strb	r2, [r3, #0]
      break;
 8008b64:	e082      	b.n	8008c6c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	795b      	ldrb	r3, [r3, #5]
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 feb3 	bl	80098d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	791b      	ldrb	r3, [r3, #4]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fead 	bl	80098d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2200      	movs	r2, #0
 8008b88:	701a      	strb	r2, [r3, #0]
      break;
 8008b8a:	e06f      	b.n	8008c6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d019      	beq.n	8008bca <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ba2:	23ff      	movs	r3, #255	; 0xff
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f949 	bl	8008e3c <USBH_Get_StringDesc>
 8008baa:	4603      	mov	r3, r0
 8008bac:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d103      	bne.n	8008bbc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2206      	movs	r2, #6
 8008bb8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008bba:	e059      	b.n	8008c70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bbc:	7bbb      	ldrb	r3, [r7, #14]
 8008bbe:	2b03      	cmp	r3, #3
 8008bc0:	d156      	bne.n	8008c70 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2206      	movs	r2, #6
 8008bc6:	705a      	strb	r2, [r3, #1]
      break;
 8008bc8:	e052      	b.n	8008c70 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2206      	movs	r2, #6
 8008bce:	705a      	strb	r2, [r3, #1]
      break;
 8008bd0:	e04e      	b.n	8008c70 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d019      	beq.n	8008c10 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008be8:	23ff      	movs	r3, #255	; 0xff
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f926 	bl	8008e3c <USBH_Get_StringDesc>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d103      	bne.n	8008c02 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2207      	movs	r2, #7
 8008bfe:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008c00:	e038      	b.n	8008c74 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c02:	7bbb      	ldrb	r3, [r7, #14]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d135      	bne.n	8008c74 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2207      	movs	r2, #7
 8008c0c:	705a      	strb	r2, [r3, #1]
      break;
 8008c0e:	e031      	b.n	8008c74 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2207      	movs	r2, #7
 8008c14:	705a      	strb	r2, [r3, #1]
      break;
 8008c16:	e02d      	b.n	8008c74 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d017      	beq.n	8008c52 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008c2e:	23ff      	movs	r3, #255	; 0xff
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f903 	bl	8008e3c <USBH_Get_StringDesc>
 8008c36:	4603      	mov	r3, r0
 8008c38:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008c3a:	7bbb      	ldrb	r3, [r7, #14]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d102      	bne.n	8008c46 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008c44:	e018      	b.n	8008c78 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c46:	7bbb      	ldrb	r3, [r7, #14]
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	d115      	bne.n	8008c78 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c50:	e012      	b.n	8008c78 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
      break;
 8008c56:	e00f      	b.n	8008c78 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008c58:	bf00      	nop
 8008c5a:	e00e      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c5c:	bf00      	nop
 8008c5e:	e00c      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c60:	bf00      	nop
 8008c62:	e00a      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c64:	bf00      	nop
 8008c66:	e008      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c68:	bf00      	nop
 8008c6a:	e006      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e004      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c70:	bf00      	nop
 8008c72:	e002      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c74:	bf00      	nop
 8008c76:	e000      	b.n	8008c7a <USBH_HandleEnum+0x3be>
      break;
 8008c78:	bf00      	nop
  }
  return Status;
 8008c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008c96:	bf00      	nop
 8008c98:	370c      	adds	r7, #12
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f804 	bl	8008cc6 <USBH_HandleSof>
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	781b      	ldrb	r3, [r3, #0]
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	2b0b      	cmp	r3, #11
 8008cd6:	d10a      	bne.n	8008cee <USBH_HandleSof+0x28>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d005      	beq.n	8008cee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
  }
}
 8008cee:	bf00      	nop
 8008cf0:	3708      	adds	r7, #8
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b083      	sub	sp, #12
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2201      	movs	r2, #1
 8008d02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008d06:	bf00      	nop
}
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b083      	sub	sp, #12
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d22:	bf00      	nop
}
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr

08008d2e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 ffb4 	bl	8009cea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	791b      	ldrb	r3, [r3, #4]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fda5 	bl	80098d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	795b      	ldrb	r3, [r3, #5]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fd9f 	bl	80098d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3708      	adds	r7, #8
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b086      	sub	sp, #24
 8008da8:	af02      	add	r7, sp, #8
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f864 	bl	8008e92 <USBH_GetDescriptor>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10a      	bne.n	8008dea <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008de0:	78fa      	ldrb	r2, [r7, #3]
 8008de2:	b292      	uxth	r2, r2
 8008de4:	4619      	mov	r1, r3
 8008de6:	f000 f918 	bl	800901a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b086      	sub	sp, #24
 8008df8:	af02      	add	r7, sp, #8
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	331c      	adds	r3, #28
 8008e04:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008e06:	887b      	ldrh	r3, [r7, #2]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e10:	2100      	movs	r1, #0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f83d 	bl	8008e92 <USBH_GetDescriptor>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	72fb      	strb	r3, [r7, #11]
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d107      	bne.n	8008e32 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008e28:	887a      	ldrh	r2, [r7, #2]
 8008e2a:	68f9      	ldr	r1, [r7, #12]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f964 	bl	80090fa <USBH_ParseCfgDesc>
  }

  return status;
 8008e32:	7afb      	ldrb	r3, [r7, #11]
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	607a      	str	r2, [r7, #4]
 8008e46:	461a      	mov	r2, r3
 8008e48:	460b      	mov	r3, r1
 8008e4a:	72fb      	strb	r3, [r7, #11]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008e58:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008e60:	893b      	ldrh	r3, [r7, #8]
 8008e62:	9300      	str	r3, [sp, #0]
 8008e64:	460b      	mov	r3, r1
 8008e66:	2100      	movs	r1, #0
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 f812 	bl	8008e92 <USBH_GetDescriptor>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75fb      	strb	r3, [r7, #23]
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d107      	bne.n	8008e88 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008e7e:	893a      	ldrh	r2, [r7, #8]
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fa37 	bl	80092f6 <USBH_ParseStringDesc>
  }

  return status;
 8008e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3718      	adds	r7, #24
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b084      	sub	sp, #16
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	60f8      	str	r0, [r7, #12]
 8008e9a:	607b      	str	r3, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	72fb      	strb	r3, [r7, #11]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	789b      	ldrb	r3, [r3, #2]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d11c      	bne.n	8008ee6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2206      	movs	r2, #6
 8008ebc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	893a      	ldrh	r2, [r7, #8]
 8008ec2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008ec4:	893b      	ldrh	r3, [r7, #8]
 8008ec6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ece:	d104      	bne.n	8008eda <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f240 4209 	movw	r2, #1033	; 0x409
 8008ed6:	829a      	strh	r2, [r3, #20]
 8008ed8:	e002      	b.n	8008ee0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8b3a      	ldrh	r2, [r7, #24]
 8008ee4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008ee6:	8b3b      	ldrh	r3, [r7, #24]
 8008ee8:	461a      	mov	r2, r3
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fa50 	bl	8009392 <USBH_CtlReq>
 8008ef2:	4603      	mov	r3, r0
}
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	3710      	adds	r7, #16
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}

08008efc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	789b      	ldrb	r3, [r3, #2]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d10f      	bne.n	8008f30 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2205      	movs	r2, #5
 8008f1a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008f30:	2200      	movs	r2, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f000 fa2c 	bl	8009392 <USBH_CtlReq>
 8008f3a:	4603      	mov	r3, r0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3708      	adds	r7, #8
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	789b      	ldrb	r3, [r3, #2]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d10e      	bne.n	8008f76 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2209      	movs	r2, #9
 8008f62:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	887a      	ldrh	r2, [r7, #2]
 8008f68:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2200      	movs	r2, #0
 8008f74:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008f76:	2200      	movs	r2, #0
 8008f78:	2100      	movs	r1, #0
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa09 	bl	8009392 <USBH_CtlReq>
 8008f80:	4603      	mov	r3, r0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3708      	adds	r7, #8
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b082      	sub	sp, #8
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	789b      	ldrb	r3, [r3, #2]
 8008f9a:	2b01      	cmp	r3, #1
 8008f9c:	d10f      	bne.n	8008fbe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2203      	movs	r2, #3
 8008fa8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 f9e5 	bl	8009392 <USBH_CtlReq>
 8008fc8:	4603      	mov	r3, r0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	789b      	ldrb	r3, [r3, #2]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d10f      	bne.n	8009006 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009006:	2200      	movs	r2, #0
 8009008:	2100      	movs	r1, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9c1 	bl	8009392 <USBH_CtlReq>
 8009010:	4603      	mov	r3, r0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800901a:	b480      	push	{r7}
 800901c:	b085      	sub	sp, #20
 800901e:	af00      	add	r7, sp, #0
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	4613      	mov	r3, r2
 8009026:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	781a      	ldrb	r2, [r3, #0]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	785a      	ldrb	r2, [r3, #1]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	3302      	adds	r3, #2
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	b29a      	uxth	r2, r3
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	3303      	adds	r3, #3
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	021b      	lsls	r3, r3, #8
 800904a:	b29b      	uxth	r3, r3
 800904c:	4313      	orrs	r3, r2
 800904e:	b29a      	uxth	r2, r3
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	791a      	ldrb	r2, [r3, #4]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	795a      	ldrb	r2, [r3, #5]
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	799a      	ldrb	r2, [r3, #6]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	79da      	ldrb	r2, [r3, #7]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	2b08      	cmp	r3, #8
 8009078:	d939      	bls.n	80090ee <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	3308      	adds	r3, #8
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	b29a      	uxth	r2, r3
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	3309      	adds	r3, #9
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	b29b      	uxth	r3, r3
 800908a:	021b      	lsls	r3, r3, #8
 800908c:	b29b      	uxth	r3, r3
 800908e:	4313      	orrs	r3, r2
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	330a      	adds	r3, #10
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	b29a      	uxth	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	330b      	adds	r3, #11
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	4313      	orrs	r3, r2
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	330c      	adds	r3, #12
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	330d      	adds	r3, #13
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	4313      	orrs	r3, r2
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	7b9a      	ldrb	r2, [r3, #14]
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	7bda      	ldrb	r2, [r3, #15]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	7c1a      	ldrb	r2, [r3, #16]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	7c5a      	ldrb	r2, [r3, #17]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	745a      	strb	r2, [r3, #17]
  }
}
 80090ee:	bf00      	nop
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80090fa:	b580      	push	{r7, lr}
 80090fc:	b08a      	sub	sp, #40	; 0x28
 80090fe:	af00      	add	r7, sp, #0
 8009100:	60f8      	str	r0, [r7, #12]
 8009102:	60b9      	str	r1, [r7, #8]
 8009104:	4613      	mov	r3, r2
 8009106:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009112:	2300      	movs	r3, #0
 8009114:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	781a      	ldrb	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	785a      	ldrb	r2, [r3, #1]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	3302      	adds	r3, #2
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	b29a      	uxth	r2, r3
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	3303      	adds	r3, #3
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	b29b      	uxth	r3, r3
 800913c:	021b      	lsls	r3, r3, #8
 800913e:	b29b      	uxth	r3, r3
 8009140:	4313      	orrs	r3, r2
 8009142:	b29a      	uxth	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	791a      	ldrb	r2, [r3, #4]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	795a      	ldrb	r2, [r3, #5]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	799a      	ldrb	r2, [r3, #6]
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	79da      	ldrb	r2, [r3, #7]
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8009168:	68bb      	ldr	r3, [r7, #8]
 800916a:	7a1a      	ldrb	r2, [r3, #8]
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009170:	88fb      	ldrh	r3, [r7, #6]
 8009172:	2b09      	cmp	r3, #9
 8009174:	d95f      	bls.n	8009236 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8009176:	2309      	movs	r3, #9
 8009178:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800917e:	e051      	b.n	8009224 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009180:	f107 0316 	add.w	r3, r7, #22
 8009184:	4619      	mov	r1, r3
 8009186:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009188:	f000 f8e8 	bl	800935c <USBH_GetNextDesc>
 800918c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800918e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009190:	785b      	ldrb	r3, [r3, #1]
 8009192:	2b04      	cmp	r3, #4
 8009194:	d146      	bne.n	8009224 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8009196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800919a:	221a      	movs	r2, #26
 800919c:	fb02 f303 	mul.w	r3, r2, r3
 80091a0:	3308      	adds	r3, #8
 80091a2:	68fa      	ldr	r2, [r7, #12]
 80091a4:	4413      	add	r3, r2
 80091a6:	3302      	adds	r3, #2
 80091a8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80091aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091ac:	69f8      	ldr	r0, [r7, #28]
 80091ae:	f000 f846 	bl	800923e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80091b2:	2300      	movs	r3, #0
 80091b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80091b8:	2300      	movs	r3, #0
 80091ba:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80091bc:	e022      	b.n	8009204 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80091be:	f107 0316 	add.w	r3, r7, #22
 80091c2:	4619      	mov	r1, r3
 80091c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091c6:	f000 f8c9 	bl	800935c <USBH_GetNextDesc>
 80091ca:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	785b      	ldrb	r3, [r3, #1]
 80091d0:	2b05      	cmp	r3, #5
 80091d2:	d117      	bne.n	8009204 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80091d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80091d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80091dc:	3201      	adds	r2, #1
 80091de:	00d2      	lsls	r2, r2, #3
 80091e0:	211a      	movs	r1, #26
 80091e2:	fb01 f303 	mul.w	r3, r1, r3
 80091e6:	4413      	add	r3, r2
 80091e8:	3308      	adds	r3, #8
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	4413      	add	r3, r2
 80091ee:	3304      	adds	r3, #4
 80091f0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80091f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091f4:	69b8      	ldr	r0, [r7, #24]
 80091f6:	f000 f851 	bl	800929c <USBH_ParseEPDesc>
            ep_ix++;
 80091fa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80091fe:	3301      	adds	r3, #1
 8009200:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	791b      	ldrb	r3, [r3, #4]
 8009208:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800920c:	429a      	cmp	r2, r3
 800920e:	d204      	bcs.n	800921a <USBH_ParseCfgDesc+0x120>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	885a      	ldrh	r2, [r3, #2]
 8009214:	8afb      	ldrh	r3, [r7, #22]
 8009216:	429a      	cmp	r2, r3
 8009218:	d8d1      	bhi.n	80091be <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800921a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800921e:	3301      	adds	r3, #1
 8009220:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009224:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009228:	2b01      	cmp	r3, #1
 800922a:	d804      	bhi.n	8009236 <USBH_ParseCfgDesc+0x13c>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	885a      	ldrh	r2, [r3, #2]
 8009230:	8afb      	ldrh	r3, [r7, #22]
 8009232:	429a      	cmp	r2, r3
 8009234:	d8a4      	bhi.n	8009180 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009236:	bf00      	nop
 8009238:	3728      	adds	r7, #40	; 0x28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
 8009246:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	781a      	ldrb	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785a      	ldrb	r2, [r3, #1]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	789a      	ldrb	r2, [r3, #2]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	78da      	ldrb	r2, [r3, #3]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	791a      	ldrb	r2, [r3, #4]
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	795a      	ldrb	r2, [r3, #5]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	799a      	ldrb	r2, [r3, #6]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	79da      	ldrb	r2, [r3, #7]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	7a1a      	ldrb	r2, [r3, #8]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	721a      	strb	r2, [r3, #8]
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
 80092a4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	785a      	ldrb	r2, [r3, #1]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	789a      	ldrb	r2, [r3, #2]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	78da      	ldrb	r2, [r3, #3]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	3304      	adds	r3, #4
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	3305      	adds	r3, #5
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4313      	orrs	r3, r2
 80092dc:	b29a      	uxth	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	799a      	ldrb	r2, [r3, #6]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	719a      	strb	r2, [r3, #6]
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80092f6:	b480      	push	{r7}
 80092f8:	b087      	sub	sp, #28
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	60f8      	str	r0, [r7, #12]
 80092fe:	60b9      	str	r1, [r7, #8]
 8009300:	4613      	mov	r3, r2
 8009302:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3301      	adds	r3, #1
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d120      	bne.n	8009350 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	1e9a      	subs	r2, r3, #2
 8009314:	88fb      	ldrh	r3, [r7, #6]
 8009316:	4293      	cmp	r3, r2
 8009318:	bf28      	it	cs
 800931a:	4613      	movcs	r3, r2
 800931c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	3302      	adds	r3, #2
 8009322:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009324:	2300      	movs	r3, #0
 8009326:	82fb      	strh	r3, [r7, #22]
 8009328:	e00b      	b.n	8009342 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800932a:	8afb      	ldrh	r3, [r7, #22]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	4413      	add	r3, r2
 8009330:	781a      	ldrb	r2, [r3, #0]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	3301      	adds	r3, #1
 800933a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800933c:	8afb      	ldrh	r3, [r7, #22]
 800933e:	3302      	adds	r3, #2
 8009340:	82fb      	strh	r3, [r7, #22]
 8009342:	8afa      	ldrh	r2, [r7, #22]
 8009344:	8abb      	ldrh	r3, [r7, #20]
 8009346:	429a      	cmp	r2, r3
 8009348:	d3ef      	bcc.n	800932a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2200      	movs	r2, #0
 800934e:	701a      	strb	r2, [r3, #0]
  }
}
 8009350:	bf00      	nop
 8009352:	371c      	adds	r7, #28
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	881a      	ldrh	r2, [r3, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	b29b      	uxth	r3, r3
 8009370:	4413      	add	r3, r2
 8009372:	b29a      	uxth	r2, r3
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4413      	add	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009384:	68fb      	ldr	r3, [r7, #12]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3714      	adds	r7, #20
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009392:	b580      	push	{r7, lr}
 8009394:	b086      	sub	sp, #24
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	4613      	mov	r3, r2
 800939e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80093a0:	2301      	movs	r3, #1
 80093a2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	789b      	ldrb	r3, [r3, #2]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d002      	beq.n	80093b2 <USBH_CtlReq+0x20>
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d00f      	beq.n	80093d0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80093b0:	e027      	b.n	8009402 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	68ba      	ldr	r2, [r7, #8]
 80093b6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	88fa      	ldrh	r2, [r7, #6]
 80093bc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2201      	movs	r2, #1
 80093c2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2202      	movs	r2, #2
 80093c8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80093ca:	2301      	movs	r3, #1
 80093cc:	75fb      	strb	r3, [r7, #23]
      break;
 80093ce:	e018      	b.n	8009402 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 f81b 	bl	800940c <USBH_HandleControl>
 80093d6:	4603      	mov	r3, r0
 80093d8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80093da:	7dfb      	ldrb	r3, [r7, #23]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <USBH_CtlReq+0x54>
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b03      	cmp	r3, #3
 80093e4:	d106      	bne.n	80093f4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	761a      	strb	r2, [r3, #24]
      break;
 80093f2:	e005      	b.n	8009400 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d102      	bne.n	8009400 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2201      	movs	r2, #1
 80093fe:	709a      	strb	r2, [r3, #2]
      break;
 8009400:	bf00      	nop
  }
  return status;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3718      	adds	r7, #24
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af02      	add	r7, sp, #8
 8009412:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009414:	2301      	movs	r3, #1
 8009416:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009418:	2300      	movs	r3, #0
 800941a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	7e1b      	ldrb	r3, [r3, #24]
 8009420:	3b01      	subs	r3, #1
 8009422:	2b0a      	cmp	r3, #10
 8009424:	f200 8158 	bhi.w	80096d8 <USBH_HandleControl+0x2cc>
 8009428:	a201      	add	r2, pc, #4	; (adr r2, 8009430 <USBH_HandleControl+0x24>)
 800942a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942e:	bf00      	nop
 8009430:	0800945d 	.word	0x0800945d
 8009434:	08009477 	.word	0x08009477
 8009438:	080094e1 	.word	0x080094e1
 800943c:	08009507 	.word	0x08009507
 8009440:	0800953f 	.word	0x0800953f
 8009444:	0800956b 	.word	0x0800956b
 8009448:	080095bd 	.word	0x080095bd
 800944c:	080095df 	.word	0x080095df
 8009450:	0800961b 	.word	0x0800961b
 8009454:	08009643 	.word	0x08009643
 8009458:	08009681 	.word	0x08009681
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f103 0110 	add.w	r1, r3, #16
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	795b      	ldrb	r3, [r3, #5]
 8009466:	461a      	mov	r2, r3
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f945 	bl	80096f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2202      	movs	r2, #2
 8009472:	761a      	strb	r2, [r3, #24]
      break;
 8009474:	e13b      	b.n	80096ee <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	4619      	mov	r1, r3
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fd21 	bl	8009ec4 <USBH_LL_GetURBState>
 8009482:	4603      	mov	r3, r0
 8009484:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009486:	7bbb      	ldrb	r3, [r7, #14]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d11e      	bne.n	80094ca <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	7c1b      	ldrb	r3, [r3, #16]
 8009490:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009494:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	8adb      	ldrh	r3, [r3, #22]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800949e:	7b7b      	ldrb	r3, [r7, #13]
 80094a0:	2b80      	cmp	r3, #128	; 0x80
 80094a2:	d103      	bne.n	80094ac <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2203      	movs	r2, #3
 80094a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80094aa:	e117      	b.n	80096dc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2205      	movs	r2, #5
 80094b0:	761a      	strb	r2, [r3, #24]
      break;
 80094b2:	e113      	b.n	80096dc <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 80094b4:	7b7b      	ldrb	r3, [r7, #13]
 80094b6:	2b80      	cmp	r3, #128	; 0x80
 80094b8:	d103      	bne.n	80094c2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2209      	movs	r2, #9
 80094be:	761a      	strb	r2, [r3, #24]
      break;
 80094c0:	e10c      	b.n	80096dc <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2207      	movs	r2, #7
 80094c6:	761a      	strb	r2, [r3, #24]
      break;
 80094c8:	e108      	b.n	80096dc <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d003      	beq.n	80094d8 <USBH_HandleControl+0xcc>
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	f040 8102 	bne.w	80096dc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	220b      	movs	r2, #11
 80094dc:	761a      	strb	r2, [r3, #24]
      break;
 80094de:	e0fd      	b.n	80096dc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6899      	ldr	r1, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	899a      	ldrh	r2, [r3, #12]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	791b      	ldrb	r3, [r3, #4]
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f93c 	bl	8009776 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2204      	movs	r2, #4
 8009502:	761a      	strb	r2, [r3, #24]
      break;
 8009504:	e0f3      	b.n	80096ee <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	791b      	ldrb	r3, [r3, #4]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f000 fcd9 	bl	8009ec4 <USBH_LL_GetURBState>
 8009512:	4603      	mov	r3, r0
 8009514:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009516:	7bbb      	ldrb	r3, [r7, #14]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d102      	bne.n	8009522 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2209      	movs	r2, #9
 8009520:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	2b05      	cmp	r3, #5
 8009526:	d102      	bne.n	800952e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009528:	2303      	movs	r3, #3
 800952a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800952c:	e0d8      	b.n	80096e0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	2b04      	cmp	r3, #4
 8009532:	f040 80d5 	bne.w	80096e0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	220b      	movs	r2, #11
 800953a:	761a      	strb	r2, [r3, #24]
      break;
 800953c:	e0d0      	b.n	80096e0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6899      	ldr	r1, [r3, #8]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	899a      	ldrh	r2, [r3, #12]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	7958      	ldrb	r0, [r3, #5]
 800954a:	2301      	movs	r3, #1
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4603      	mov	r3, r0
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f000 f8eb 	bl	800972c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800955c:	b29a      	uxth	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2206      	movs	r2, #6
 8009566:	761a      	strb	r2, [r3, #24]
      break;
 8009568:	e0c1      	b.n	80096ee <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	795b      	ldrb	r3, [r3, #5]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 fca7 	bl	8009ec4 <USBH_LL_GetURBState>
 8009576:	4603      	mov	r3, r0
 8009578:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d103      	bne.n	8009588 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2207      	movs	r2, #7
 8009584:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009586:	e0ad      	b.n	80096e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	2b05      	cmp	r3, #5
 800958c:	d105      	bne.n	800959a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	220c      	movs	r2, #12
 8009592:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009594:	2303      	movs	r3, #3
 8009596:	73fb      	strb	r3, [r7, #15]
      break;
 8009598:	e0a4      	b.n	80096e4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800959a:	7bbb      	ldrb	r3, [r7, #14]
 800959c:	2b02      	cmp	r3, #2
 800959e:	d103      	bne.n	80095a8 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2205      	movs	r2, #5
 80095a4:	761a      	strb	r2, [r3, #24]
      break;
 80095a6:	e09d      	b.n	80096e4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 80095a8:	7bbb      	ldrb	r3, [r7, #14]
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	f040 809a 	bne.w	80096e4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	220b      	movs	r2, #11
 80095b4:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80095b6:	2302      	movs	r3, #2
 80095b8:	73fb      	strb	r3, [r7, #15]
      break;
 80095ba:	e093      	b.n	80096e4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	791b      	ldrb	r3, [r3, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	2100      	movs	r1, #0
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f8d6 	bl	8009776 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2208      	movs	r2, #8
 80095da:	761a      	strb	r2, [r3, #24]

      break;
 80095dc:	e087      	b.n	80096ee <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	791b      	ldrb	r3, [r3, #4]
 80095e2:	4619      	mov	r1, r3
 80095e4:	6878      	ldr	r0, [r7, #4]
 80095e6:	f000 fc6d 	bl	8009ec4 <USBH_LL_GetURBState>
 80095ea:	4603      	mov	r3, r0
 80095ec:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80095ee:	7bbb      	ldrb	r3, [r7, #14]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d105      	bne.n	8009600 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	220d      	movs	r2, #13
 80095f8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80095fa:	2300      	movs	r3, #0
 80095fc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095fe:	e073      	b.n	80096e8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	2b04      	cmp	r3, #4
 8009604:	d103      	bne.n	800960e <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	220b      	movs	r2, #11
 800960a:	761a      	strb	r2, [r3, #24]
      break;
 800960c:	e06c      	b.n	80096e8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800960e:	7bbb      	ldrb	r3, [r7, #14]
 8009610:	2b05      	cmp	r3, #5
 8009612:	d169      	bne.n	80096e8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 8009614:	2303      	movs	r3, #3
 8009616:	73fb      	strb	r3, [r7, #15]
      break;
 8009618:	e066      	b.n	80096e8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	795a      	ldrb	r2, [r3, #5]
 800961e:	2301      	movs	r3, #1
 8009620:	9300      	str	r3, [sp, #0]
 8009622:	4613      	mov	r3, r2
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f87f 	bl	800972c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009634:	b29a      	uxth	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	220a      	movs	r2, #10
 800963e:	761a      	strb	r2, [r3, #24]
      break;
 8009640:	e055      	b.n	80096ee <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	795b      	ldrb	r3, [r3, #5]
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc3b 	bl	8009ec4 <USBH_LL_GetURBState>
 800964e:	4603      	mov	r3, r0
 8009650:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009652:	7bbb      	ldrb	r3, [r7, #14]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d105      	bne.n	8009664 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	220d      	movs	r2, #13
 8009660:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009662:	e043      	b.n	80096ec <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009664:	7bbb      	ldrb	r3, [r7, #14]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d103      	bne.n	8009672 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2209      	movs	r2, #9
 800966e:	761a      	strb	r2, [r3, #24]
      break;
 8009670:	e03c      	b.n	80096ec <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b04      	cmp	r3, #4
 8009676:	d139      	bne.n	80096ec <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	220b      	movs	r2, #11
 800967c:	761a      	strb	r2, [r3, #24]
      break;
 800967e:	e035      	b.n	80096ec <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	7e5b      	ldrb	r3, [r3, #25]
 8009684:	3301      	adds	r3, #1
 8009686:	b2da      	uxtb	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	765a      	strb	r2, [r3, #25]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7e5b      	ldrb	r3, [r3, #25]
 8009690:	2b02      	cmp	r3, #2
 8009692:	d806      	bhi.n	80096a2 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2201      	movs	r2, #1
 800969e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80096a0:	e025      	b.n	80096ee <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80096a8:	2106      	movs	r1, #6
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	795b      	ldrb	r3, [r3, #5]
 80096b8:	4619      	mov	r1, r3
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f90c 	bl	80098d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	791b      	ldrb	r3, [r3, #4]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f906 	bl	80098d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80096d2:	2302      	movs	r3, #2
 80096d4:	73fb      	strb	r3, [r7, #15]
      break;
 80096d6:	e00a      	b.n	80096ee <USBH_HandleControl+0x2e2>

    default:
      break;
 80096d8:	bf00      	nop
 80096da:	e008      	b.n	80096ee <USBH_HandleControl+0x2e2>
      break;
 80096dc:	bf00      	nop
 80096de:	e006      	b.n	80096ee <USBH_HandleControl+0x2e2>
      break;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <USBH_HandleControl+0x2e2>
      break;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <USBH_HandleControl+0x2e2>
      break;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <USBH_HandleControl+0x2e2>
      break;
 80096ec:	bf00      	nop
  }

  return status;
 80096ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3710      	adds	r7, #16
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b088      	sub	sp, #32
 80096fc:	af04      	add	r7, sp, #16
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	4613      	mov	r3, r2
 8009704:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009706:	79f9      	ldrb	r1, [r7, #7]
 8009708:	2300      	movs	r3, #0
 800970a:	9303      	str	r3, [sp, #12]
 800970c:	2308      	movs	r3, #8
 800970e:	9302      	str	r3, [sp, #8]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	9301      	str	r3, [sp, #4]
 8009714:	2300      	movs	r3, #0
 8009716:	9300      	str	r3, [sp, #0]
 8009718:	2300      	movs	r3, #0
 800971a:	2200      	movs	r2, #0
 800971c:	68f8      	ldr	r0, [r7, #12]
 800971e:	f000 fba0 	bl	8009e62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3710      	adds	r7, #16
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b088      	sub	sp, #32
 8009730:	af04      	add	r7, sp, #16
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	4611      	mov	r1, r2
 8009738:	461a      	mov	r2, r3
 800973a:	460b      	mov	r3, r1
 800973c:	80fb      	strh	r3, [r7, #6]
 800973e:	4613      	mov	r3, r2
 8009740:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800974c:	2300      	movs	r3, #0
 800974e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009750:	7979      	ldrb	r1, [r7, #5]
 8009752:	7e3b      	ldrb	r3, [r7, #24]
 8009754:	9303      	str	r3, [sp, #12]
 8009756:	88fb      	ldrh	r3, [r7, #6]
 8009758:	9302      	str	r3, [sp, #8]
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	9301      	str	r3, [sp, #4]
 800975e:	2301      	movs	r3, #1
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	2300      	movs	r3, #0
 8009764:	2200      	movs	r2, #0
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fb7b 	bl	8009e62 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800976c:	2300      	movs	r3, #0
}
 800976e:	4618      	mov	r0, r3
 8009770:	3710      	adds	r7, #16
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009776:	b580      	push	{r7, lr}
 8009778:	b088      	sub	sp, #32
 800977a:	af04      	add	r7, sp, #16
 800977c:	60f8      	str	r0, [r7, #12]
 800977e:	60b9      	str	r1, [r7, #8]
 8009780:	4611      	mov	r1, r2
 8009782:	461a      	mov	r2, r3
 8009784:	460b      	mov	r3, r1
 8009786:	80fb      	strh	r3, [r7, #6]
 8009788:	4613      	mov	r3, r2
 800978a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800978c:	7979      	ldrb	r1, [r7, #5]
 800978e:	2300      	movs	r3, #0
 8009790:	9303      	str	r3, [sp, #12]
 8009792:	88fb      	ldrh	r3, [r7, #6]
 8009794:	9302      	str	r3, [sp, #8]
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	9301      	str	r3, [sp, #4]
 800979a:	2301      	movs	r3, #1
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	2300      	movs	r3, #0
 80097a0:	2201      	movs	r2, #1
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f000 fb5d 	bl	8009e62 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80097a8:	2300      	movs	r3, #0

}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b088      	sub	sp, #32
 80097b6:	af04      	add	r7, sp, #16
 80097b8:	60f8      	str	r0, [r7, #12]
 80097ba:	60b9      	str	r1, [r7, #8]
 80097bc:	4611      	mov	r1, r2
 80097be:	461a      	mov	r2, r3
 80097c0:	460b      	mov	r3, r1
 80097c2:	80fb      	strh	r3, [r7, #6]
 80097c4:	4613      	mov	r3, r2
 80097c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80097d2:	2300      	movs	r3, #0
 80097d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80097d6:	7979      	ldrb	r1, [r7, #5]
 80097d8:	7e3b      	ldrb	r3, [r7, #24]
 80097da:	9303      	str	r3, [sp, #12]
 80097dc:	88fb      	ldrh	r3, [r7, #6]
 80097de:	9302      	str	r3, [sp, #8]
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	9301      	str	r3, [sp, #4]
 80097e4:	2301      	movs	r3, #1
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	2302      	movs	r3, #2
 80097ea:	2200      	movs	r2, #0
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f000 fb38 	bl	8009e62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3710      	adds	r7, #16
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af04      	add	r7, sp, #16
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	4611      	mov	r1, r2
 8009808:	461a      	mov	r2, r3
 800980a:	460b      	mov	r3, r1
 800980c:	80fb      	strh	r3, [r7, #6]
 800980e:	4613      	mov	r3, r2
 8009810:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009812:	7979      	ldrb	r1, [r7, #5]
 8009814:	2300      	movs	r3, #0
 8009816:	9303      	str	r3, [sp, #12]
 8009818:	88fb      	ldrh	r3, [r7, #6]
 800981a:	9302      	str	r3, [sp, #8]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	2301      	movs	r3, #1
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	2302      	movs	r3, #2
 8009826:	2201      	movs	r2, #1
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f000 fb1a 	bl	8009e62 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3710      	adds	r7, #16
 8009834:	46bd      	mov	sp, r7
 8009836:	bd80      	pop	{r7, pc}

08009838 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af04      	add	r7, sp, #16
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	4608      	mov	r0, r1
 8009842:	4611      	mov	r1, r2
 8009844:	461a      	mov	r2, r3
 8009846:	4603      	mov	r3, r0
 8009848:	70fb      	strb	r3, [r7, #3]
 800984a:	460b      	mov	r3, r1
 800984c:	70bb      	strb	r3, [r7, #2]
 800984e:	4613      	mov	r3, r2
 8009850:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009852:	7878      	ldrb	r0, [r7, #1]
 8009854:	78ba      	ldrb	r2, [r7, #2]
 8009856:	78f9      	ldrb	r1, [r7, #3]
 8009858:	8b3b      	ldrh	r3, [r7, #24]
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	7d3b      	ldrb	r3, [r7, #20]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	7c3b      	ldrb	r3, [r7, #16]
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	4603      	mov	r3, r0
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 faad 	bl	8009dc6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b082      	sub	sp, #8
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
 800987e:	460b      	mov	r3, r1
 8009880:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009882:	78fb      	ldrb	r3, [r7, #3]
 8009884:	4619      	mov	r1, r3
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 facc 	bl	8009e24 <USBH_LL_ClosePipe>

  return USBH_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f836 	bl	8009914 <USBH_GetFreePipe>
 80098a8:	4603      	mov	r3, r0
 80098aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80098ac:	89fb      	ldrh	r3, [r7, #14]
 80098ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d00a      	beq.n	80098cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80098b6:	78fa      	ldrb	r2, [r7, #3]
 80098b8:	89fb      	ldrh	r3, [r7, #14]
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098c2:	6879      	ldr	r1, [r7, #4]
 80098c4:	33e0      	adds	r3, #224	; 0xe0
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80098cc:	89fb      	ldrh	r3, [r7, #14]
 80098ce:	b2db      	uxtb	r3, r3
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	2b0a      	cmp	r3, #10
 80098e8:	d80d      	bhi.n	8009906 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80098ea:	78fb      	ldrb	r3, [r7, #3]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	33e0      	adds	r3, #224	; 0xe0
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4413      	add	r3, r2
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	78fb      	ldrb	r3, [r7, #3]
 80098f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80098fc:	6879      	ldr	r1, [r7, #4]
 80098fe:	33e0      	adds	r3, #224	; 0xe0
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	440b      	add	r3, r1
 8009904:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	370c      	adds	r7, #12
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800991c:	2300      	movs	r3, #0
 800991e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009920:	2300      	movs	r3, #0
 8009922:	73fb      	strb	r3, [r7, #15]
 8009924:	e00f      	b.n	8009946 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009926:	7bfb      	ldrb	r3, [r7, #15]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	33e0      	adds	r3, #224	; 0xe0
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d102      	bne.n	8009940 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	b29b      	uxth	r3, r3
 800993e:	e007      	b.n	8009950 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	3301      	adds	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	2b0a      	cmp	r3, #10
 800994a:	d9ec      	bls.n	8009926 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800994c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009950:	4618      	mov	r0, r3
 8009952:	3714      	adds	r7, #20
 8009954:	46bd      	mov	sp, r7
 8009956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995a:	4770      	bx	lr

0800995c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	4613      	mov	r3, r2
 8009968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009972:	4b1f      	ldr	r3, [pc, #124]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 8009974:	7a5b      	ldrb	r3, [r3, #9]
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b00      	cmp	r3, #0
 800997a:	d131      	bne.n	80099e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800997c:	4b1c      	ldr	r3, [pc, #112]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 800997e:	7a5b      	ldrb	r3, [r3, #9]
 8009980:	b2db      	uxtb	r3, r3
 8009982:	461a      	mov	r2, r3
 8009984:	4b1a      	ldr	r3, [pc, #104]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 8009986:	2100      	movs	r1, #0
 8009988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800998a:	4b19      	ldr	r3, [pc, #100]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 800998c:	7a5b      	ldrb	r3, [r3, #9]
 800998e:	b2db      	uxtb	r3, r3
 8009990:	4a17      	ldr	r2, [pc, #92]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	68fa      	ldr	r2, [r7, #12]
 8009998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800999a:	4b15      	ldr	r3, [pc, #84]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 800999c:	7a5b      	ldrb	r3, [r3, #9]
 800999e:	b2db      	uxtb	r3, r3
 80099a0:	461a      	mov	r2, r3
 80099a2:	4b13      	ldr	r3, [pc, #76]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 80099a4:	4413      	add	r3, r2
 80099a6:	79fa      	ldrb	r2, [r7, #7]
 80099a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80099aa:	4b11      	ldr	r3, [pc, #68]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 80099ac:	7a5b      	ldrb	r3, [r3, #9]
 80099ae:	b2db      	uxtb	r3, r3
 80099b0:	1c5a      	adds	r2, r3, #1
 80099b2:	b2d1      	uxtb	r1, r2
 80099b4:	4a0e      	ldr	r2, [pc, #56]	; (80099f0 <FATFS_LinkDriverEx+0x94>)
 80099b6:	7251      	strb	r1, [r2, #9]
 80099b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
 80099bc:	3330      	adds	r3, #48	; 0x30
 80099be:	b2da      	uxtb	r2, r3
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	3301      	adds	r3, #1
 80099c8:	223a      	movs	r2, #58	; 0x3a
 80099ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	3302      	adds	r3, #2
 80099d0:	222f      	movs	r2, #47	; 0x2f
 80099d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	3303      	adds	r3, #3
 80099d8:	2200      	movs	r2, #0
 80099da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80099dc:	2300      	movs	r3, #0
 80099de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80099e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	371c      	adds	r7, #28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr
 80099ee:	bf00      	nop
 80099f0:	200000b8 	.word	0x200000b8

080099f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80099fe:	2200      	movs	r2, #0
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff ffaa 	bl	800995c <FATFS_LinkDriverEx>
 8009a08:	4603      	mov	r3, r0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
	...

08009a14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009a18:	2201      	movs	r2, #1
 8009a1a:	490e      	ldr	r1, [pc, #56]	; (8009a54 <MX_USB_HOST_Init+0x40>)
 8009a1c:	480e      	ldr	r0, [pc, #56]	; (8009a58 <MX_USB_HOST_Init+0x44>)
 8009a1e:	f7fe fc43 	bl	80082a8 <USBH_Init>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009a28:	f7f7 f882 	bl	8000b30 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8009a2c:	490b      	ldr	r1, [pc, #44]	; (8009a5c <MX_USB_HOST_Init+0x48>)
 8009a2e:	480a      	ldr	r0, [pc, #40]	; (8009a58 <MX_USB_HOST_Init+0x44>)
 8009a30:	f7fe fcc8 	bl	80083c4 <USBH_RegisterClass>
 8009a34:	4603      	mov	r3, r0
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009a3a:	f7f7 f879 	bl	8000b30 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009a3e:	4806      	ldr	r0, [pc, #24]	; (8009a58 <MX_USB_HOST_Init+0x44>)
 8009a40:	f7fe fd4c 	bl	80084dc <USBH_Start>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009a4a:	f7f7 f871 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009a4e:	bf00      	nop
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	08009a75 	.word	0x08009a75
 8009a58:	2000074c 	.word	0x2000074c
 8009a5c:	2000000c 	.word	0x2000000c

08009a60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009a64:	4802      	ldr	r0, [pc, #8]	; (8009a70 <MX_USB_HOST_Process+0x10>)
 8009a66:	f7fe fd49 	bl	80084fc <USBH_Process>
}
 8009a6a:	bf00      	nop
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	2000074c 	.word	0x2000074c

08009a74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	2b04      	cmp	r3, #4
 8009a86:	d819      	bhi.n	8009abc <USBH_UserProcess+0x48>
 8009a88:	a201      	add	r2, pc, #4	; (adr r2, 8009a90 <USBH_UserProcess+0x1c>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009abd 	.word	0x08009abd
 8009a94:	08009aad 	.word	0x08009aad
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009ab5 	.word	0x08009ab5
 8009aa0:	08009aa5 	.word	0x08009aa5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009aa4:	4b09      	ldr	r3, [pc, #36]	; (8009acc <USBH_UserProcess+0x58>)
 8009aa6:	2203      	movs	r2, #3
 8009aa8:	701a      	strb	r2, [r3, #0]
  break;
 8009aaa:	e008      	b.n	8009abe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009aac:	4b07      	ldr	r3, [pc, #28]	; (8009acc <USBH_UserProcess+0x58>)
 8009aae:	2202      	movs	r2, #2
 8009ab0:	701a      	strb	r2, [r3, #0]
  break;
 8009ab2:	e004      	b.n	8009abe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <USBH_UserProcess+0x58>)
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	701a      	strb	r2, [r3, #0]
  break;
 8009aba:	e000      	b.n	8009abe <USBH_UserProcess+0x4a>

  default:
  break;
 8009abc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009abe:	bf00      	nop
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	200000c4 	.word	0x200000c4

08009ad0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b08a      	sub	sp, #40	; 0x28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
 8009ae0:	605a      	str	r2, [r3, #4]
 8009ae2:	609a      	str	r2, [r3, #8]
 8009ae4:	60da      	str	r2, [r3, #12]
 8009ae6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009af0:	d147      	bne.n	8009b82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009af2:	2300      	movs	r3, #0
 8009af4:	613b      	str	r3, [r7, #16]
 8009af6:	4b25      	ldr	r3, [pc, #148]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009afa:	4a24      	ldr	r2, [pc, #144]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009afc:	f043 0301 	orr.w	r3, r3, #1
 8009b00:	6313      	str	r3, [r2, #48]	; 0x30
 8009b02:	4b22      	ldr	r3, [pc, #136]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	613b      	str	r3, [r7, #16]
 8009b0c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009b14:	2300      	movs	r3, #0
 8009b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b1c:	f107 0314 	add.w	r3, r7, #20
 8009b20:	4619      	mov	r1, r3
 8009b22:	481b      	ldr	r0, [pc, #108]	; (8009b90 <HAL_HCD_MspInit+0xc0>)
 8009b24:	f7f7 ff7c 	bl	8001a20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009b28:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b2e:	2302      	movs	r3, #2
 8009b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b36:	2303      	movs	r3, #3
 8009b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009b3a:	230a      	movs	r3, #10
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b3e:	f107 0314 	add.w	r3, r7, #20
 8009b42:	4619      	mov	r1, r3
 8009b44:	4812      	ldr	r0, [pc, #72]	; (8009b90 <HAL_HCD_MspInit+0xc0>)
 8009b46:	f7f7 ff6b 	bl	8001a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009b4a:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b4e:	4a0f      	ldr	r2, [pc, #60]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b54:	6353      	str	r3, [r2, #52]	; 0x34
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	4b0c      	ldr	r3, [pc, #48]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5e:	4a0b      	ldr	r2, [pc, #44]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009b60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b64:	6453      	str	r3, [r2, #68]	; 0x44
 8009b66:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <HAL_HCD_MspInit+0xbc>)
 8009b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b6e:	60fb      	str	r3, [r7, #12]
 8009b70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b72:	2200      	movs	r2, #0
 8009b74:	2100      	movs	r1, #0
 8009b76:	2043      	movs	r0, #67	; 0x43
 8009b78:	f7f7 fc33 	bl	80013e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b7c:	2043      	movs	r0, #67	; 0x43
 8009b7e:	f7f7 fc4c 	bl	800141a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b82:	bf00      	nop
 8009b84:	3728      	adds	r7, #40	; 0x28
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40023800 	.word	0x40023800
 8009b90:	40020000 	.word	0x40020000

08009b94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7ff f87d 	bl	8008ca2 <USBH_LL_IncTimer>
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff f8b5 	bl	8008d2e <USBH_LL_Connect>
}
 8009bc4:	bf00      	nop
 8009bc6:	3708      	adds	r7, #8
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}

08009bcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7ff f8be 	bl	8008d5c <USBH_LL_Disconnect>
}
 8009be0:	bf00      	nop
 8009be2:	3708      	adds	r7, #8
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009bf8:	bf00      	nop
 8009bfa:	370c      	adds	r7, #12
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr

08009c04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f7ff f86f 	bl	8008cf6 <USBH_LL_PortEnabled>
} 
 8009c18:	bf00      	nop
 8009c1a:	3708      	adds	r7, #8
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}

08009c20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7ff f86f 	bl	8008d12 <USBH_LL_PortDisabled>
} 
 8009c34:	bf00      	nop
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d12a      	bne.n	8009ca4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009c4e:	4a18      	ldr	r2, [pc, #96]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a15      	ldr	r2, [pc, #84]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c5e:	4b14      	ldr	r3, [pc, #80]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009c66:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c68:	2208      	movs	r2, #8
 8009c6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009c6c:	4b10      	ldr	r3, [pc, #64]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c6e:	2201      	movs	r2, #1
 8009c70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c72:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c74:	2200      	movs	r2, #0
 8009c76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009c78:	4b0d      	ldr	r3, [pc, #52]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c7e:	4b0c      	ldr	r3, [pc, #48]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009c84:	480a      	ldr	r0, [pc, #40]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c86:	f7f8 f88a 	bl	8001d9e <HAL_HCD_Init>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009c90:	f7f6 ff4e 	bl	8000b30 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009c94:	4806      	ldr	r0, [pc, #24]	; (8009cb0 <USBH_LL_Init+0x74>)
 8009c96:	f7f8 fc8d 	bl	80025b4 <HAL_HCD_GetCurrentFrame>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f7fe fff0 	bl	8008c84 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20000b24 	.word	0x20000b24

08009cb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7f8 fbfa 	bl	80024c4 <HAL_HCD_Start>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f990 	bl	8009ffc <USBH_Get_USB_Status>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d00:	4618      	mov	r0, r3
 8009d02:	f7f8 fc02 	bl	800250a <HAL_HCD_Stop>
 8009d06:	4603      	mov	r3, r0
 8009d08:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 f975 	bl	8009ffc <USBH_Get_USB_Status>
 8009d12:	4603      	mov	r3, r0
 8009d14:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8009d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3710      	adds	r7, #16
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7f8 fc4c 	bl	80025d0 <HAL_HCD_GetCurrentSpeed>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d007      	beq.n	8009d4e <USBH_LL_GetSpeed+0x2e>
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d302      	bcc.n	8009d48 <USBH_LL_GetSpeed+0x28>
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d006      	beq.n	8009d54 <USBH_LL_GetSpeed+0x34>
 8009d46:	e008      	b.n	8009d5a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d4c:	e008      	b.n	8009d60 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	73fb      	strb	r3, [r7, #15]
    break;
 8009d52:	e005      	b.n	8009d60 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009d54:	2302      	movs	r3, #2
 8009d56:	73fb      	strb	r3, [r7, #15]
    break;
 8009d58:	e002      	b.n	8009d60 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009d5e:	bf00      	nop
  }
  return  speed;
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d76:	2300      	movs	r3, #0
 8009d78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f8 fbdf 	bl	8002544 <HAL_HCD_ResetPort>
 8009d86:	4603      	mov	r3, r0
 8009d88:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f935 	bl	8009ffc <USBH_Get_USB_Status>
 8009d92:	4603      	mov	r3, r0
 8009d94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009d96:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}

08009da0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b082      	sub	sp, #8
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	460b      	mov	r3, r1
 8009daa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009db2:	78fa      	ldrb	r2, [r7, #3]
 8009db4:	4611      	mov	r1, r2
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7f8 fbe7 	bl	800258a <HAL_HCD_HC_GetXferCount>
 8009dbc:	4603      	mov	r3, r0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3708      	adds	r7, #8
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009dc6:	b590      	push	{r4, r7, lr}
 8009dc8:	b089      	sub	sp, #36	; 0x24
 8009dca:	af04      	add	r7, sp, #16
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	4608      	mov	r0, r1
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	70fb      	strb	r3, [r7, #3]
 8009dd8:	460b      	mov	r3, r1
 8009dda:	70bb      	strb	r3, [r7, #2]
 8009ddc:	4613      	mov	r3, r2
 8009dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009dee:	787c      	ldrb	r4, [r7, #1]
 8009df0:	78ba      	ldrb	r2, [r7, #2]
 8009df2:	78f9      	ldrb	r1, [r7, #3]
 8009df4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009df6:	9302      	str	r3, [sp, #8]
 8009df8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009dfc:	9301      	str	r3, [sp, #4]
 8009dfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	4623      	mov	r3, r4
 8009e06:	f7f8 f82c 	bl	8001e62 <HAL_HCD_HC_Init>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 f8f3 	bl	8009ffc <USBH_Get_USB_Status>
 8009e16:	4603      	mov	r3, r0
 8009e18:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd90      	pop	{r4, r7, pc}

08009e24 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e3e:	78fa      	ldrb	r2, [r7, #3]
 8009e40:	4611      	mov	r1, r2
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7f8 f8a5 	bl	8001f92 <HAL_HCD_HC_Halt>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e4c:	7bfb      	ldrb	r3, [r7, #15]
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f000 f8d4 	bl	8009ffc <USBH_Get_USB_Status>
 8009e54:	4603      	mov	r3, r0
 8009e56:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009e62:	b590      	push	{r4, r7, lr}
 8009e64:	b089      	sub	sp, #36	; 0x24
 8009e66:	af04      	add	r7, sp, #16
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	4608      	mov	r0, r1
 8009e6c:	4611      	mov	r1, r2
 8009e6e:	461a      	mov	r2, r3
 8009e70:	4603      	mov	r3, r0
 8009e72:	70fb      	strb	r3, [r7, #3]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70bb      	strb	r3, [r7, #2]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e8a:	787c      	ldrb	r4, [r7, #1]
 8009e8c:	78ba      	ldrb	r2, [r7, #2]
 8009e8e:	78f9      	ldrb	r1, [r7, #3]
 8009e90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e98:	9302      	str	r3, [sp, #8]
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	9301      	str	r3, [sp, #4]
 8009e9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4623      	mov	r3, r4
 8009ea6:	f7f8 f897 	bl	8001fd8 <HAL_HCD_HC_SubmitRequest>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009eae:	7bfb      	ldrb	r3, [r7, #15]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 f8a3 	bl	8009ffc <USBH_Get_USB_Status>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3714      	adds	r7, #20
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd90      	pop	{r4, r7, pc}

08009ec4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7f8 fb40 	bl	8002560 <HAL_HCD_HC_GetURBState>
 8009ee0:	4603      	mov	r3, r0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009eea:	b580      	push	{r7, lr}
 8009eec:	b082      	sub	sp, #8
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d103      	bne.n	8009f08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009f00:	78fb      	ldrb	r3, [r7, #3]
 8009f02:	4618      	mov	r0, r3
 8009f04:	f000 f8a6 	bl	800a054 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009f08:	20c8      	movs	r0, #200	; 0xc8
 8009f0a:	f7f7 f96d 	bl	80011e8 <HAL_Delay>
  return USBH_OK;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
 8009f20:	460b      	mov	r3, r1
 8009f22:	70fb      	strb	r3, [r7, #3]
 8009f24:	4613      	mov	r3, r2
 8009f26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	68f9      	ldr	r1, [r7, #12]
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	00db      	lsls	r3, r3, #3
 8009f3c:	440b      	add	r3, r1
 8009f3e:	333b      	adds	r3, #59	; 0x3b
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d00a      	beq.n	8009f5c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009f46:	78fa      	ldrb	r2, [r7, #3]
 8009f48:	68f9      	ldr	r1, [r7, #12]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	4413      	add	r3, r2
 8009f50:	00db      	lsls	r3, r3, #3
 8009f52:	440b      	add	r3, r1
 8009f54:	3350      	adds	r3, #80	; 0x50
 8009f56:	78ba      	ldrb	r2, [r7, #2]
 8009f58:	701a      	strb	r2, [r3, #0]
 8009f5a:	e009      	b.n	8009f70 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009f5c:	78fa      	ldrb	r2, [r7, #3]
 8009f5e:	68f9      	ldr	r1, [r7, #12]
 8009f60:	4613      	mov	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	00db      	lsls	r3, r3, #3
 8009f68:	440b      	add	r3, r1
 8009f6a:	3351      	adds	r3, #81	; 0x51
 8009f6c:	78ba      	ldrb	r2, [r7, #2]
 8009f6e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f7e:	b480      	push	{r7}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	460b      	mov	r3, r1
 8009f88:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f94:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	68b9      	ldr	r1, [r7, #8]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	440b      	add	r3, r1
 8009fa4:	333b      	adds	r3, #59	; 0x3b
 8009fa6:	781b      	ldrb	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 8009fac:	78fa      	ldrb	r2, [r7, #3]
 8009fae:	68b9      	ldr	r1, [r7, #8]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	00db      	lsls	r3, r3, #3
 8009fb8:	440b      	add	r3, r1
 8009fba:	3350      	adds	r3, #80	; 0x50
 8009fbc:	781b      	ldrb	r3, [r3, #0]
 8009fbe:	73fb      	strb	r3, [r7, #15]
 8009fc0:	e009      	b.n	8009fd6 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8009fc2:	78fa      	ldrb	r2, [r7, #3]
 8009fc4:	68b9      	ldr	r1, [r7, #8]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	4413      	add	r3, r2
 8009fcc:	00db      	lsls	r3, r3, #3
 8009fce:	440b      	add	r3, r1
 8009fd0:	3351      	adds	r3, #81	; 0x51
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8009fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7f7 f8fb 	bl	80011e8 <HAL_Delay>
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
	...

08009ffc <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b085      	sub	sp, #20
 800a000:	af00      	add	r7, sp, #0
 800a002:	4603      	mov	r3, r0
 800a004:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a00a:	79fb      	ldrb	r3, [r7, #7]
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d817      	bhi.n	800a040 <USBH_Get_USB_Status+0x44>
 800a010:	a201      	add	r2, pc, #4	; (adr r2, 800a018 <USBH_Get_USB_Status+0x1c>)
 800a012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a016:	bf00      	nop
 800a018:	0800a029 	.word	0x0800a029
 800a01c:	0800a02f 	.word	0x0800a02f
 800a020:	0800a035 	.word	0x0800a035
 800a024:	0800a03b 	.word	0x0800a03b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a028:	2300      	movs	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]
    break;
 800a02c:	e00b      	b.n	800a046 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a02e:	2302      	movs	r3, #2
 800a030:	73fb      	strb	r3, [r7, #15]
    break;
 800a032:	e008      	b.n	800a046 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a034:	2301      	movs	r3, #1
 800a036:	73fb      	strb	r3, [r7, #15]
    break;
 800a038:	e005      	b.n	800a046 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a03a:	2302      	movs	r3, #2
 800a03c:	73fb      	strb	r3, [r7, #15]
    break;
 800a03e:	e002      	b.n	800a046 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a040:	2302      	movs	r3, #2
 800a042:	73fb      	strb	r3, [r7, #15]
    break;
 800a044:	bf00      	nop
  }
  return usb_status;
 800a046:	7bfb      	ldrb	r3, [r7, #15]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3714      	adds	r7, #20
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800a05e:	79fb      	ldrb	r3, [r7, #7]
 800a060:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a062:	79fb      	ldrb	r3, [r7, #7]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800a068:	2301      	movs	r3, #1
 800a06a:	73fb      	strb	r3, [r7, #15]
 800a06c:	e001      	b.n	800a072 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a06e:	2300      	movs	r3, #0
 800a070:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a072:	7bfb      	ldrb	r3, [r7, #15]
 800a074:	461a      	mov	r2, r3
 800a076:	2101      	movs	r1, #1
 800a078:	4803      	ldr	r0, [pc, #12]	; (800a088 <MX_DriverVbusFS+0x34>)
 800a07a:	f7f7 fe53 	bl	8001d24 <HAL_GPIO_WritePin>
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	40020800 	.word	0x40020800

0800a08c <__errno>:
 800a08c:	4b01      	ldr	r3, [pc, #4]	; (800a094 <__errno+0x8>)
 800a08e:	6818      	ldr	r0, [r3, #0]
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop
 800a094:	2000002c 	.word	0x2000002c

0800a098 <__libc_init_array>:
 800a098:	b570      	push	{r4, r5, r6, lr}
 800a09a:	4e0d      	ldr	r6, [pc, #52]	; (800a0d0 <__libc_init_array+0x38>)
 800a09c:	4c0d      	ldr	r4, [pc, #52]	; (800a0d4 <__libc_init_array+0x3c>)
 800a09e:	1ba4      	subs	r4, r4, r6
 800a0a0:	10a4      	asrs	r4, r4, #2
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	42a5      	cmp	r5, r4
 800a0a6:	d109      	bne.n	800a0bc <__libc_init_array+0x24>
 800a0a8:	4e0b      	ldr	r6, [pc, #44]	; (800a0d8 <__libc_init_array+0x40>)
 800a0aa:	4c0c      	ldr	r4, [pc, #48]	; (800a0dc <__libc_init_array+0x44>)
 800a0ac:	f000 f8f6 	bl	800a29c <_init>
 800a0b0:	1ba4      	subs	r4, r4, r6
 800a0b2:	10a4      	asrs	r4, r4, #2
 800a0b4:	2500      	movs	r5, #0
 800a0b6:	42a5      	cmp	r5, r4
 800a0b8:	d105      	bne.n	800a0c6 <__libc_init_array+0x2e>
 800a0ba:	bd70      	pop	{r4, r5, r6, pc}
 800a0bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0c0:	4798      	blx	r3
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	e7ee      	b.n	800a0a4 <__libc_init_array+0xc>
 800a0c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ca:	4798      	blx	r3
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	e7f2      	b.n	800a0b6 <__libc_init_array+0x1e>
 800a0d0:	0800a2f4 	.word	0x0800a2f4
 800a0d4:	0800a2f4 	.word	0x0800a2f4
 800a0d8:	0800a2f4 	.word	0x0800a2f4
 800a0dc:	0800a2f8 	.word	0x0800a2f8

0800a0e0 <malloc>:
 800a0e0:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <malloc+0xc>)
 800a0e2:	4601      	mov	r1, r0
 800a0e4:	6818      	ldr	r0, [r3, #0]
 800a0e6:	f000 b86d 	b.w	800a1c4 <_malloc_r>
 800a0ea:	bf00      	nop
 800a0ec:	2000002c 	.word	0x2000002c

0800a0f0 <free>:
 800a0f0:	4b02      	ldr	r3, [pc, #8]	; (800a0fc <free+0xc>)
 800a0f2:	4601      	mov	r1, r0
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f000 b817 	b.w	800a128 <_free_r>
 800a0fa:	bf00      	nop
 800a0fc:	2000002c 	.word	0x2000002c

0800a100 <memcpy>:
 800a100:	b510      	push	{r4, lr}
 800a102:	1e43      	subs	r3, r0, #1
 800a104:	440a      	add	r2, r1
 800a106:	4291      	cmp	r1, r2
 800a108:	d100      	bne.n	800a10c <memcpy+0xc>
 800a10a:	bd10      	pop	{r4, pc}
 800a10c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a110:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a114:	e7f7      	b.n	800a106 <memcpy+0x6>

0800a116 <memset>:
 800a116:	4402      	add	r2, r0
 800a118:	4603      	mov	r3, r0
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d100      	bne.n	800a120 <memset+0xa>
 800a11e:	4770      	bx	lr
 800a120:	f803 1b01 	strb.w	r1, [r3], #1
 800a124:	e7f9      	b.n	800a11a <memset+0x4>
	...

0800a128 <_free_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4605      	mov	r5, r0
 800a12c:	2900      	cmp	r1, #0
 800a12e:	d045      	beq.n	800a1bc <_free_r+0x94>
 800a130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a134:	1f0c      	subs	r4, r1, #4
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfb8      	it	lt
 800a13a:	18e4      	addlt	r4, r4, r3
 800a13c:	f000 f8ac 	bl	800a298 <__malloc_lock>
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <_free_r+0x98>)
 800a142:	6813      	ldr	r3, [r2, #0]
 800a144:	4610      	mov	r0, r2
 800a146:	b933      	cbnz	r3, 800a156 <_free_r+0x2e>
 800a148:	6063      	str	r3, [r4, #4]
 800a14a:	6014      	str	r4, [r2, #0]
 800a14c:	4628      	mov	r0, r5
 800a14e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a152:	f000 b8a2 	b.w	800a29a <__malloc_unlock>
 800a156:	42a3      	cmp	r3, r4
 800a158:	d90c      	bls.n	800a174 <_free_r+0x4c>
 800a15a:	6821      	ldr	r1, [r4, #0]
 800a15c:	1862      	adds	r2, r4, r1
 800a15e:	4293      	cmp	r3, r2
 800a160:	bf04      	itt	eq
 800a162:	681a      	ldreq	r2, [r3, #0]
 800a164:	685b      	ldreq	r3, [r3, #4]
 800a166:	6063      	str	r3, [r4, #4]
 800a168:	bf04      	itt	eq
 800a16a:	1852      	addeq	r2, r2, r1
 800a16c:	6022      	streq	r2, [r4, #0]
 800a16e:	6004      	str	r4, [r0, #0]
 800a170:	e7ec      	b.n	800a14c <_free_r+0x24>
 800a172:	4613      	mov	r3, r2
 800a174:	685a      	ldr	r2, [r3, #4]
 800a176:	b10a      	cbz	r2, 800a17c <_free_r+0x54>
 800a178:	42a2      	cmp	r2, r4
 800a17a:	d9fa      	bls.n	800a172 <_free_r+0x4a>
 800a17c:	6819      	ldr	r1, [r3, #0]
 800a17e:	1858      	adds	r0, r3, r1
 800a180:	42a0      	cmp	r0, r4
 800a182:	d10b      	bne.n	800a19c <_free_r+0x74>
 800a184:	6820      	ldr	r0, [r4, #0]
 800a186:	4401      	add	r1, r0
 800a188:	1858      	adds	r0, r3, r1
 800a18a:	4282      	cmp	r2, r0
 800a18c:	6019      	str	r1, [r3, #0]
 800a18e:	d1dd      	bne.n	800a14c <_free_r+0x24>
 800a190:	6810      	ldr	r0, [r2, #0]
 800a192:	6852      	ldr	r2, [r2, #4]
 800a194:	605a      	str	r2, [r3, #4]
 800a196:	4401      	add	r1, r0
 800a198:	6019      	str	r1, [r3, #0]
 800a19a:	e7d7      	b.n	800a14c <_free_r+0x24>
 800a19c:	d902      	bls.n	800a1a4 <_free_r+0x7c>
 800a19e:	230c      	movs	r3, #12
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	e7d3      	b.n	800a14c <_free_r+0x24>
 800a1a4:	6820      	ldr	r0, [r4, #0]
 800a1a6:	1821      	adds	r1, r4, r0
 800a1a8:	428a      	cmp	r2, r1
 800a1aa:	bf04      	itt	eq
 800a1ac:	6811      	ldreq	r1, [r2, #0]
 800a1ae:	6852      	ldreq	r2, [r2, #4]
 800a1b0:	6062      	str	r2, [r4, #4]
 800a1b2:	bf04      	itt	eq
 800a1b4:	1809      	addeq	r1, r1, r0
 800a1b6:	6021      	streq	r1, [r4, #0]
 800a1b8:	605c      	str	r4, [r3, #4]
 800a1ba:	e7c7      	b.n	800a14c <_free_r+0x24>
 800a1bc:	bd38      	pop	{r3, r4, r5, pc}
 800a1be:	bf00      	nop
 800a1c0:	200000c8 	.word	0x200000c8

0800a1c4 <_malloc_r>:
 800a1c4:	b570      	push	{r4, r5, r6, lr}
 800a1c6:	1ccd      	adds	r5, r1, #3
 800a1c8:	f025 0503 	bic.w	r5, r5, #3
 800a1cc:	3508      	adds	r5, #8
 800a1ce:	2d0c      	cmp	r5, #12
 800a1d0:	bf38      	it	cc
 800a1d2:	250c      	movcc	r5, #12
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	db01      	blt.n	800a1de <_malloc_r+0x1a>
 800a1da:	42a9      	cmp	r1, r5
 800a1dc:	d903      	bls.n	800a1e6 <_malloc_r+0x22>
 800a1de:	230c      	movs	r3, #12
 800a1e0:	6033      	str	r3, [r6, #0]
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	f000 f857 	bl	800a298 <__malloc_lock>
 800a1ea:	4a21      	ldr	r2, [pc, #132]	; (800a270 <_malloc_r+0xac>)
 800a1ec:	6814      	ldr	r4, [r2, #0]
 800a1ee:	4621      	mov	r1, r4
 800a1f0:	b991      	cbnz	r1, 800a218 <_malloc_r+0x54>
 800a1f2:	4c20      	ldr	r4, [pc, #128]	; (800a274 <_malloc_r+0xb0>)
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	b91b      	cbnz	r3, 800a200 <_malloc_r+0x3c>
 800a1f8:	4630      	mov	r0, r6
 800a1fa:	f000 f83d 	bl	800a278 <_sbrk_r>
 800a1fe:	6020      	str	r0, [r4, #0]
 800a200:	4629      	mov	r1, r5
 800a202:	4630      	mov	r0, r6
 800a204:	f000 f838 	bl	800a278 <_sbrk_r>
 800a208:	1c43      	adds	r3, r0, #1
 800a20a:	d124      	bne.n	800a256 <_malloc_r+0x92>
 800a20c:	230c      	movs	r3, #12
 800a20e:	6033      	str	r3, [r6, #0]
 800a210:	4630      	mov	r0, r6
 800a212:	f000 f842 	bl	800a29a <__malloc_unlock>
 800a216:	e7e4      	b.n	800a1e2 <_malloc_r+0x1e>
 800a218:	680b      	ldr	r3, [r1, #0]
 800a21a:	1b5b      	subs	r3, r3, r5
 800a21c:	d418      	bmi.n	800a250 <_malloc_r+0x8c>
 800a21e:	2b0b      	cmp	r3, #11
 800a220:	d90f      	bls.n	800a242 <_malloc_r+0x7e>
 800a222:	600b      	str	r3, [r1, #0]
 800a224:	50cd      	str	r5, [r1, r3]
 800a226:	18cc      	adds	r4, r1, r3
 800a228:	4630      	mov	r0, r6
 800a22a:	f000 f836 	bl	800a29a <__malloc_unlock>
 800a22e:	f104 000b 	add.w	r0, r4, #11
 800a232:	1d23      	adds	r3, r4, #4
 800a234:	f020 0007 	bic.w	r0, r0, #7
 800a238:	1ac3      	subs	r3, r0, r3
 800a23a:	d0d3      	beq.n	800a1e4 <_malloc_r+0x20>
 800a23c:	425a      	negs	r2, r3
 800a23e:	50e2      	str	r2, [r4, r3]
 800a240:	e7d0      	b.n	800a1e4 <_malloc_r+0x20>
 800a242:	428c      	cmp	r4, r1
 800a244:	684b      	ldr	r3, [r1, #4]
 800a246:	bf16      	itet	ne
 800a248:	6063      	strne	r3, [r4, #4]
 800a24a:	6013      	streq	r3, [r2, #0]
 800a24c:	460c      	movne	r4, r1
 800a24e:	e7eb      	b.n	800a228 <_malloc_r+0x64>
 800a250:	460c      	mov	r4, r1
 800a252:	6849      	ldr	r1, [r1, #4]
 800a254:	e7cc      	b.n	800a1f0 <_malloc_r+0x2c>
 800a256:	1cc4      	adds	r4, r0, #3
 800a258:	f024 0403 	bic.w	r4, r4, #3
 800a25c:	42a0      	cmp	r0, r4
 800a25e:	d005      	beq.n	800a26c <_malloc_r+0xa8>
 800a260:	1a21      	subs	r1, r4, r0
 800a262:	4630      	mov	r0, r6
 800a264:	f000 f808 	bl	800a278 <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d0cf      	beq.n	800a20c <_malloc_r+0x48>
 800a26c:	6025      	str	r5, [r4, #0]
 800a26e:	e7db      	b.n	800a228 <_malloc_r+0x64>
 800a270:	200000c8 	.word	0x200000c8
 800a274:	200000cc 	.word	0x200000cc

0800a278 <_sbrk_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4c06      	ldr	r4, [pc, #24]	; (800a294 <_sbrk_r+0x1c>)
 800a27c:	2300      	movs	r3, #0
 800a27e:	4605      	mov	r5, r0
 800a280:	4608      	mov	r0, r1
 800a282:	6023      	str	r3, [r4, #0]
 800a284:	f7f6 fec6 	bl	8001014 <_sbrk>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d102      	bne.n	800a292 <_sbrk_r+0x1a>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	b103      	cbz	r3, 800a292 <_sbrk_r+0x1a>
 800a290:	602b      	str	r3, [r5, #0]
 800a292:	bd38      	pop	{r3, r4, r5, pc}
 800a294:	20000de8 	.word	0x20000de8

0800a298 <__malloc_lock>:
 800a298:	4770      	bx	lr

0800a29a <__malloc_unlock>:
 800a29a:	4770      	bx	lr

0800a29c <_init>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	bf00      	nop
 800a2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2a2:	bc08      	pop	{r3}
 800a2a4:	469e      	mov	lr, r3
 800a2a6:	4770      	bx	lr

0800a2a8 <_fini>:
 800a2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2aa:	bf00      	nop
 800a2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ae:	bc08      	pop	{r3}
 800a2b0:	469e      	mov	lr, r3
 800a2b2:	4770      	bx	lr
