
AuBaDi_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800ef10  0800ef10  0001ef10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0dc  0800f0dc  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f0dc  0800f0dc  0001f0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e4  0800f0e4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f0e8  0800f0e8  0001f0e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f0ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002028  20000090  0800f17c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200020b8  0800f17c  000220b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c965  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000572f  00000000  00000000  0004ca25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a48  00000000  00000000  00052158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  00053ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d728  00000000  00000000  000553b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c026  00000000  00000000  00072ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000961f1  00000000  00000000  0008eafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124cef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f6c  00000000  00000000  00124d6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800eef8 	.word	0x0800eef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800eef8 	.word	0x0800eef8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <write_register+0x30>)
 80005b4:	f004 f8f6 	bl	80047a4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000ac 	.word	0x200000ac

080005c4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	2194      	movs	r1, #148	; 0x94
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <read_register+0x3c>)
 80005e2:	f004 f8df 	bl	80047a4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	2194      	movs	r1, #148	; 0x94
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <read_register+0x3c>)
 80005f2:	f004 f9d5 	bl	80049a0 <HAL_I2C_Master_Receive>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000ac 	.word	0x200000ac

08000604 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	f107 0c10 	add.w	ip, r7, #16
 8000610:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000614:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <CS43_Init+0x200>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800061c:	4b79      	ldr	r3, [pc, #484]	; (8000804 <CS43_Init+0x200>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	4b78      	ldr	r3, [pc, #480]	; (8000804 <CS43_Init+0x200>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800062a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4875      	ldr	r0, [pc, #468]	; (8000808 <CS43_Init+0x204>)
 8000632:	f002 fa51 	bl	8002ad8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000636:	4b75      	ldr	r3, [pc, #468]	; (800080c <CS43_Init+0x208>)
 8000638:	4618      	mov	r0, r3
 800063a:	f107 0110 	add.w	r1, r7, #16
 800063e:	2354      	movs	r3, #84	; 0x54
 8000640:	461a      	mov	r2, r3
 8000642:	f00e f849 	bl	800e6d8 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000646:	2301      	movs	r3, #1
 8000648:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff9e 	bl	8000590 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	b2db      	uxtb	r3, r3
 8000660:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	f043 030c 	orr.w	r3, r3, #12
 8000668:	b2db      	uxtb	r3, r3
 800066a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800066c:	797b      	ldrb	r3, [r7, #5]
 800066e:	f043 0303 	orr.w	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff87 	bl	8000590 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	3301      	adds	r3, #1
 800068a:	4619      	mov	r1, r3
 800068c:	2005      	movs	r0, #5
 800068e:	f7ff ff7f 	bl	8000590 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	2006      	movs	r0, #6
 8000698:	f7ff ff94 	bl	80005c4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0310 	bic.w	r3, r3, #16
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	f023 0304 	bic.w	r3, r3, #4
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	f043 0303 	orr.w	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	2006      	movs	r0, #6
 80006ea:	f7ff ff51 	bl	8000590 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff65 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	b2db      	uxtb	r3, r3
 8000702:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2008      	movs	r0, #8
 8000716:	f7ff ff3b 	bl	8000590 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	2009      	movs	r0, #9
 8000722:	f7ff ff4f 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	b2db      	uxtb	r3, r3
 800072e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	3301      	adds	r3, #1
 800073e:	4619      	mov	r1, r3
 8000740:	2009      	movs	r0, #9
 8000742:	f7ff ff25 	bl	8000590 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	3301      	adds	r3, #1
 800074a:	4619      	mov	r1, r3
 800074c:	200e      	movs	r0, #14
 800074e:	f7ff ff39 	bl	80005c4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000752:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000756:	2b01      	cmp	r3, #1
 8000758:	d119      	bne.n	800078e <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	b2db      	uxtb	r3, r3
 800076c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	f023 0320 	bic.w	r3, r3, #32
 8000774:	b2db      	uxtb	r3, r3
 8000776:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	f023 0310 	bic.w	r3, r3, #16
 800077e:	b2db      	uxtb	r3, r3
 8000780:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000782:	797b      	ldrb	r3, [r7, #5]
 8000784:	f023 0308 	bic.w	r3, r3, #8
 8000788:	b2db      	uxtb	r3, r3
 800078a:	717b      	strb	r3, [r7, #5]
 800078c:	e005      	b.n	800079a <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 800078e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000796:	2302      	movs	r3, #2
 8000798:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	3301      	adds	r3, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	200e      	movs	r0, #14
 80007a2:	f7ff fef5 	bl	8000590 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	3301      	adds	r3, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff ff09 	bl	80005c4 <read_register>
	iData[1] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	200f      	movs	r0, #15
 80007be:	f7ff fee7 	bl	8000590 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	3301      	adds	r3, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	2014      	movs	r0, #20
 80007ce:	f7ff fedf 	bl	8000590 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	3301      	adds	r3, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	2015      	movs	r0, #21
 80007da:	f7ff fed9 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	3301      	adds	r3, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	201a      	movs	r0, #26
 80007e6:	f7ff fed3 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	3301      	adds	r3, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	201b      	movs	r0, #27
 80007f2:	f7ff fecd 	bl	8000590 <write_register>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	20001564 	.word	0x20001564
 8000808:	40020c00 	.word	0x40020c00
 800080c:	200000ac 	.word	0x200000ac

08000810 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d82b      	bhi.n	8000878 <CS43_Enable_RightLeft+0x68>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <CS43_Enable_RightLeft+0x18>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000839 	.word	0x08000839
 800082c:	08000849 	.word	0x08000849
 8000830:	08000859 	.word	0x08000859
 8000834:	08000869 	.word	0x08000869
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000838:	23c0      	movs	r3, #192	; 0xc0
 800083a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000842:	b2db      	uxtb	r3, r3
 8000844:	737b      	strb	r3, [r7, #13]
			break;
 8000846:	e018      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000852:	b2db      	uxtb	r3, r3
 8000854:	737b      	strb	r3, [r7, #13]
			break;
 8000856:	e010      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	737b      	strb	r3, [r7, #13]
			break;
 8000866:	e008      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	b2db      	uxtb	r3, r3
 8000874:	737b      	strb	r3, [r7, #13]
			break;
 8000876:	e000      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000878:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800087a:	7b7b      	ldrb	r3, [r7, #13]
 800087c:	f043 030c 	orr.w	r3, r3, #12
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2004      	movs	r0, #4
 8000898:	f7ff fe7a 	bl	8000590 <write_register>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3319      	adds	r3, #25
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	3301      	adds	r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	2020      	movs	r0, #32
 80008c0:	f7ff fe66 	bl	8000590 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	3301      	adds	r3, #1
 80008ca:	4619      	mov	r1, r3
 80008cc:	2021      	movs	r0, #33	; 0x21
 80008ce:	f7ff fe5f 	bl	8000590 <write_register>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d019      	beq.n	800091e <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2004      	movs	r0, #4
 80008f8:	f7ff fe4a 	bl	8000590 <write_register>
    iData[1] = 0x01;
 80008fc:	2301      	movs	r3, #1
 80008fe:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	3301      	adds	r3, #1
 8000906:	4619      	mov	r1, r3
 8000908:	2022      	movs	r0, #34	; 0x22
 800090a:	f7ff fe41 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	3301      	adds	r3, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2023      	movs	r0, #35	; 0x23
 8000918:	f7ff fe3a 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 800091c:	e018      	b.n	8000950 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	3301      	adds	r3, #1
 8000928:	4619      	mov	r1, r3
 800092a:	2022      	movs	r0, #34	; 0x22
 800092c:	f7ff fe30 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	3301      	adds	r3, #1
 8000936:	4619      	mov	r1, r3
 8000938:	2023      	movs	r0, #35	; 0x23
 800093a:	f7ff fe29 	bl	8000590 <write_register>
    iData[1] = 0xAF;
 800093e:	23af      	movs	r3, #175	; 0xaf
 8000940:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	3301      	adds	r3, #1
 8000948:	4619      	mov	r1, r3
 800094a:	2004      	movs	r0, #4
 800094c:	f7ff fe20 	bl	8000590 <write_register>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffbb 	bl	80008da <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000964:	2399      	movs	r3, #153	; 0x99
 8000966:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	3301      	adds	r3, #1
 800096c:	4619      	mov	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fe0e 	bl	8000590 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	3301      	adds	r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	2047      	movs	r0, #71	; 0x47
 8000980:	f7ff fe06 	bl	8000590 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	3301      	adds	r3, #1
 8000988:	4619      	mov	r1, r3
 800098a:	2032      	movs	r0, #50	; 0x32
 800098c:	f7ff fe1a 	bl	80005c4 <read_register>
	iData[1] |= 0x80;
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000996:	b2db      	uxtb	r3, r3
 8000998:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	3301      	adds	r3, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	2032      	movs	r0, #50	; 0x32
 80009a2:	f7ff fdf5 	bl	8000590 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	2032      	movs	r0, #50	; 0x32
 80009ae:	f7ff fe09 	bl	80005c4 <read_register>
	iData[1] &= ~(0x80);
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	3301      	adds	r3, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f7ff fde4 	bl	8000590 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	3301      	adds	r3, #1
 80009d0:	4619      	mov	r1, r3
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fddc 	bl	8000590 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009d8:	239e      	movs	r3, #158	; 0x9e
 80009da:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	3301      	adds	r3, #1
 80009e0:	4619      	mov	r1, r3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fdd4 	bl	8000590 <write_register>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009fe:	23ff      	movs	r3, #255	; 0xff
 8000a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a0a:	e010      	b.n	8000a2e <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <audioI2S_pllClockConfig+0xa4>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d103      	bne.n	8000a24 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8000a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a28:	3301      	adds	r3, #1
 8000a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d9ea      	bls.n	8000a0c <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 f900 	bl	8006c40 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d113      	bne.n	8000a74 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <audioI2S_pllClockConfig+0xa8>)
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <audioI2S_pllClockConfig+0xac>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f005 fff7 	bl	8006a60 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000a72:	e00b      	b.n	8000a8c <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000a78:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a7c:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 ffea 	bl	8006a60 <HAL_RCCEx_PeriphCLKConfig>
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0800ef94 	.word	0x0800ef94
 8000a98:	0800efb4 	.word	0x0800efb4
 8000a9c:	0800efd4 	.word	0x0800efd4

08000aa0 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <I2S3_freqUpdate+0x84>)
 8000aae:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ac2:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fdcb 	bl	80056a0 <HAL_I2S_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e000      	b.n	8000b16 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b14:	2301      	movs	r3, #1
  }
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000100 	.word	0x20000100
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <audioI2S_setHandle+0x1c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000100 	.word	0x20000100

08000b48 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff4d 	bl	80009f0 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <I2S3_freqUpdate>
  return true;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000b72:	f7ff fef1 	bl	8000958 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <audioI2S_play+0x38>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b80:	d203      	bcs.n	8000b8a <audioI2S_play+0x22>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	e001      	b.n	8000b8e <audioI2S_play+0x26>
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	f004 fec5 	bl	8005920 <HAL_I2S_Transmit_DMA>
  return true;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000100 	.word	0x20000100

08000ba4 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_I2S_TxCpltCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000bb6:	f001 f8ab 	bl	8001d10 <audioI2S_fullTransfer_Callback>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40003c00 	.word	0x40003c00

08000bc8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000bda:	f001 f88d 	bl	8001cf8 <audioI2S_halfTransfer_Callback>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40003c00 	.word	0x40003c00

08000bec <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f023 030f 	bic.w	r3, r3, #15
 8000c02:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f043 030c 	orr.w	r3, r3, #12
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	723b      	strb	r3, [r7, #8]
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	f043 030c 	orr.w	r3, r3, #12
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	72bb      	strb	r3, [r7, #10]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <lcd16x2_i2c_sendCommand+0x60>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <lcd16x2_i2c_sendCommand+0x64>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b299      	uxth	r1, r3
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	23c8      	movs	r3, #200	; 0xc8
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2304      	movs	r3, #4
 8000c40:	f003 fdb0 	bl	80047a4 <HAL_I2C_Master_Transmit>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000104 	.word	0x20000104
 8000c50:	20000108 	.word	0x20000108

08000c54 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f023 030f 	bic.w	r3, r3, #15
 8000c6a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	f043 030d 	orr.w	r3, r3, #13
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	723b      	strb	r3, [r7, #8]
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	f043 0309 	orr.w	r3, r3, #9
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	727b      	strb	r3, [r7, #9]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	f043 030d 	orr.w	r3, r3, #13
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	72bb      	strb	r3, [r7, #10]
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f043 0309 	orr.w	r3, r3, #9
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <lcd16x2_i2c_sendData+0x60>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <lcd16x2_i2c_sendData+0x64>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	f107 0208 	add.w	r2, r7, #8
 8000ca2:	23c8      	movs	r3, #200	; 0xc8
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	f003 fd7c 	bl	80047a4 <HAL_I2C_Master_Transmit>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000104 	.word	0x20000104
 8000cb8:	20000108 	.word	0x20000108

08000cbc <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000cc4:	2032      	movs	r0, #50	; 0x32
 8000cc6:	f001 f8cb 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000cca:	4a30      	ldr	r2, [pc, #192]	; (8000d8c <lcd16x2_i2c_init+0xd0>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <lcd16x2_i2c_init+0xd0>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd8:	2205      	movs	r2, #5
 8000cda:	214e      	movs	r1, #78	; 0x4e
 8000cdc:	f004 f886 	bl	8004dec <HAL_I2C_IsDeviceReady>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d010      	beq.n	8000d08 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <lcd16x2_i2c_init+0xd0>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cee:	2205      	movs	r2, #5
 8000cf0:	217e      	movs	r1, #126	; 0x7e
 8000cf2:	f004 f87b 	bl	8004dec <HAL_I2C_IsDeviceReady>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e040      	b.n	8000d82 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <lcd16x2_i2c_init+0xd4>)
 8000d02:	227e      	movs	r2, #126	; 0x7e
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <lcd16x2_i2c_init+0xd4>)
 8000d0a:	224e      	movs	r2, #78	; 0x4e
 8000d0c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000d0e:	202d      	movs	r0, #45	; 0x2d
 8000d10:	f001 f8a6 	bl	8001e60 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000d14:	2030      	movs	r0, #48	; 0x30
 8000d16:	f7ff ff69 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f001 f8a0 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d20:	2030      	movs	r0, #48	; 0x30
 8000d22:	f7ff ff63 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f001 f89a 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d2c:	2030      	movs	r0, #48	; 0x30
 8000d2e:	f7ff ff5d 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d32:	2008      	movs	r0, #8
 8000d34:	f001 f894 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000d38:	2020      	movs	r0, #32
 8000d3a:	f7ff ff57 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d3e:	2008      	movs	r0, #8
 8000d40:	f001 f88e 	bl	8001e60 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000d44:	2028      	movs	r0, #40	; 0x28
 8000d46:	f7ff ff51 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 f888 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f7ff ff4b 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f001 f882 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff ff45 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f001 f87c 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000d68:	2006      	movs	r0, #6
 8000d6a:	f7ff ff3f 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f001 f876 	bl	8001e60 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000d74:	200c      	movs	r0, #12
 8000d76:	f7ff ff39 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f001 f870 	bl	8001e60 <HAL_Delay>

  return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000104 	.word	0x20000104
 8000d90:	20000108 	.word	0x20000108

08000d94 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d108      	bne.n	8000dc4 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000db8:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff15 	bl	8000bec <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000dc2:	e007      	b.n	8000dd4 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000dca:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff0c 	bl	8000bec <lcd16x2_i2c_sendCommand>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <lcd16x2_i2c_2ndLine>:
}
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8000de0:	2100      	movs	r1, #0
 8000de2:	2001      	movs	r0, #1
 8000de4:	f7ff ffd6 	bl	8000d94 <lcd16x2_i2c_setCursor>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000df0:	2001      	movs	r0, #1
 8000df2:	f7ff fefb 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000df6:	2003      	movs	r0, #3
 8000df8:	f001 f832 	bl	8001e60 <HAL_Delay>
}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000e00:	b40f      	push	{r0, r1, r2, r3}
 8000e02:	b590      	push	{r4, r7, lr}
 8000e04:	b089      	sub	sp, #36	; 0x24
 8000e06:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000e08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e0c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e16:	4618      	mov	r0, r3
 8000e18:	f00d fd40 	bl	800e89c <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	77fb      	strb	r3, [r7, #31]
 8000e20:	e00b      	b.n	8000e3a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000e22:	7ffb      	ldrb	r3, [r7, #31]
 8000e24:	f107 0220 	add.w	r2, r7, #32
 8000e28:	4413      	add	r3, r2
 8000e2a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff ff10 	bl	8000c54 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e34:	7ffb      	ldrb	r3, [r7, #31]
 8000e36:	3301      	adds	r3, #1
 8000e38:	77fb      	strb	r3, [r7, #31]
 8000e3a:	7ffc      	ldrb	r4, [r7, #31]
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff f9cd 	bl	80001e0 <strlen>
 8000e46:	4603      	mov	r3, r0
 8000e48:	429c      	cmp	r4, r3
 8000e4a:	d202      	bcs.n	8000e52 <lcd16x2_i2c_printf+0x52>
 8000e4c:	7ffb      	ldrb	r3, [r7, #31]
 8000e4e:	2b0f      	cmp	r3, #15
 8000e50:	d9e7      	bls.n	8000e22 <lcd16x2_i2c_printf+0x22>
  }
}
 8000e52:	bf00      	nop
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e5c:	b004      	add	sp, #16
 8000e5e:	4770      	bx	lr

08000e60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e60:	b590      	push	{r4, r7, lr}
 8000e62:	b095      	sub	sp, #84	; 0x54
 8000e64:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e66:	f000 ff89 	bl	8001d7c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e6a:	f000 f8b5 	bl	8000fd8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e6e:	f000 fac3 	bl	80013f8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000e72:	f000 faa1 	bl	80013b8 <MX_DMA_Init>
	MX_I2C1_Init();
 8000e76:	f000 f933 	bl	80010e0 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000e7a:	f000 f98d 	bl	8001198 <MX_I2S3_Init>
	MX_USB_HOST_Init();
 8000e7e:	f00d f8b5 	bl	800dfec <MX_USB_HOST_Init>
	MX_FATFS_Init();
 8000e82:	f007 fd23 	bl	80088cc <MX_FATFS_Init>
	MX_I2C2_Init();
 8000e86:	f000 f959 	bl	800113c <MX_I2C2_Init>
	MX_TIM4_Init();
 8000e8a:	f000 f9b3 	bl	80011f4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8000e8e:	f000 f9ff 	bl	8001290 <MX_TIM5_Init>
	MX_TIM10_Init();
 8000e92:	f000 fa6d 	bl	8001370 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 8000e96:	4c40      	ldr	r4, [pc, #256]	; (8000f98 <main+0x138>)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9311      	str	r3, [sp, #68]	; 0x44
 8000e9c:	4668      	mov	r0, sp
 8000e9e:	f104 0310 	add.w	r3, r4, #16
 8000ea2:	2244      	movs	r2, #68	; 0x44
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f00d fc17 	bl	800e6d8 <memcpy>
 8000eaa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000eae:	f7ff fba9 	bl	8000604 <CS43_Init>
	CS43_SetVolume(200); //0-255
 8000eb2:	20c8      	movs	r0, #200	; 0xc8
 8000eb4:	f7ff fcf6 	bl	80008a4 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f7ff fca9 	bl	8000810 <CS43_Enable_RightLeft>
	HAL_TIM_Base_Start_IT(&htim10);
 8000ebe:	4837      	ldr	r0, [pc, #220]	; (8000f9c <main+0x13c>)
 8000ec0:	f005 ff89 	bl	8006dd6 <HAL_TIM_Base_Start_IT>
	audioI2S_setHandle(&hi2s3);
 8000ec4:	4836      	ldr	r0, [pc, #216]	; (8000fa0 <main+0x140>)
 8000ec6:	f7ff fe2f 	bl	8000b28 <audioI2S_setHandle>

	bool isSdCardMounted = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	bool pauseResumeToggle = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	71bb      	strb	r3, [r7, #6]



	lcd16x2_i2c_init(&hi2c2);
 8000ed2:	4834      	ldr	r0, [pc, #208]	; (8000fa4 <main+0x144>)
 8000ed4:	f7ff fef2 	bl	8000cbc <lcd16x2_i2c_init>
	lcd16x2_i2c_printf("first line");
 8000ed8:	4833      	ldr	r0, [pc, #204]	; (8000fa8 <main+0x148>)
 8000eda:	f7ff ff91 	bl	8000e00 <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 8000ede:	f7ff ff7d 	bl	8000ddc <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("second line");
 8000ee2:	4832      	ldr	r0, [pc, #200]	; (8000fac <main+0x14c>)
 8000ee4:	f7ff ff8c 	bl	8000e00 <lcd16x2_i2c_printf>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		TIM5->CCR2 = duty;
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <main+0x150>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b31      	ldr	r3, [pc, #196]	; (8000fb4 <main+0x154>)
 8000eee:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR3 = duty;
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <main+0x150>)
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	4b2f      	ldr	r3, [pc, #188]	; (8000fb4 <main+0x154>)
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM5->CCR4 = 1000;
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <main+0x154>)
 8000efa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40

		if (Appli_state == APPLICATION_START) {
 8000f00:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <main+0x158>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d106      	bne.n	8000f16 <main+0xb6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f0e:	482b      	ldr	r0, [pc, #172]	; (8000fbc <main+0x15c>)
 8000f10:	f001 fde2 	bl	8002ad8 <HAL_GPIO_WritePin>
 8000f14:	e009      	b.n	8000f2a <main+0xca>
		}

		else if (Appli_state == APPLICATION_DISCONNECT) {
 8000f16:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <main+0x158>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b03      	cmp	r3, #3
 8000f1c:	d105      	bne.n	8000f2a <main+0xca>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f24:	4825      	ldr	r0, [pc, #148]	; (8000fbc <main+0x15c>)
 8000f26:	f001 fdd7 	bl	8002ad8 <HAL_GPIO_WritePin>

		}

		if (Appli_state == APPLICATION_READY) {
 8000f2a:	4b23      	ldr	r3, [pc, #140]	; (8000fb8 <main+0x158>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d12d      	bne.n	8000f8e <main+0x12e>
			if (!isSdCardMounted) {
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f083 0301 	eor.w	r3, r3, #1
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <main+0xec>
				f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	491f      	ldr	r1, [pc, #124]	; (8000fc0 <main+0x160>)
 8000f42:	4820      	ldr	r0, [pc, #128]	; (8000fc4 <main+0x164>)
 8000f44:	f00c fa02 	bl	800d34c <f_mount>
				isSdCardMounted = 1;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	481e      	ldr	r0, [pc, #120]	; (8000fc8 <main+0x168>)
 8000f50:	f001 fdaa 	bl	8002aa8 <HAL_GPIO_ReadPin>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d019      	beq.n	8000f8e <main+0x12e>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f60:	4816      	ldr	r0, [pc, #88]	; (8000fbc <main+0x15c>)
 8000f62:	f001 fdb9 	bl	8002ad8 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6a:	f000 ff79 	bl	8001e60 <HAL_Delay>
				wavPlayer_fileSelect(WAV_FILE);
 8000f6e:	4817      	ldr	r0, [pc, #92]	; (8000fcc <main+0x16c>)
 8000f70:	f000 fdf4 	bl	8001b5c <wavPlayer_fileSelect>
				lcd16x2_i2c_clear();
 8000f74:	f7ff ff3a 	bl	8000dec <lcd16x2_i2c_clear>
				lcd16x2_i2c_printf("Odtwarzam teraz ");
 8000f78:	4815      	ldr	r0, [pc, #84]	; (8000fd0 <main+0x170>)
 8000f7a:	f7ff ff41 	bl	8000e00 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8000f7e:	f7ff ff2d 	bl	8000ddc <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("%s", WAV_FILE);
 8000f82:	4912      	ldr	r1, [pc, #72]	; (8000fcc <main+0x16c>)
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <main+0x174>)
 8000f86:	f7ff ff3b 	bl	8000e00 <lcd16x2_i2c_printf>

				wavPlayer_play();
 8000f8a:	f000 fe11 	bl	8001bb0 <wavPlayer_play>

			}

		}
// audio process
		wavPlayer_process();
 8000f8e:	f000 fe41 	bl	8001c14 <wavPlayer_process>
		 }

		 }*/

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000f92:	f00d f851 	bl	800e038 <MX_USB_HOST_Process>
		TIM5->CCR2 = duty;
 8000f96:	e7a7      	b.n	8000ee8 <main+0x88>
 8000f98:	200013dc 	.word	0x200013dc
 8000f9c:	20001430 	.word	0x20001430
 8000fa0:	20001564 	.word	0x20001564
 8000fa4:	20001470 	.word	0x20001470
 8000fa8:	0800ef10 	.word	0x0800ef10
 8000fac:	0800ef1c 	.word	0x0800ef1c
 8000fb0:	2000010c 	.word	0x2000010c
 8000fb4:	40000c00 	.word	0x40000c00
 8000fb8:	20001390 	.word	0x20001390
 8000fbc:	40020c00 	.word	0x40020c00
 8000fc0:	200015b0 	.word	0x200015b0
 8000fc4:	200017e4 	.word	0x200017e4
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	0800ef28 	.word	0x0800ef28
 8000fd0:	0800ef34 	.word	0x0800ef34
 8000fd4:	0800ef48 	.word	0x0800ef48

08000fd8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b09a      	sub	sp, #104	; 0x68
 8000fdc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fe2:	2230      	movs	r2, #48	; 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00d fb81 	bl	800e6ee <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <SystemClock_Config+0x100>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	4a30      	ldr	r2, [pc, #192]	; (80010d8 <SystemClock_Config+0x100>)
 8001018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101c:	6413      	str	r3, [r2, #64]	; 0x40
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <SystemClock_Config+0x100>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <SystemClock_Config+0x104>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a2a      	ldr	r2, [pc, #168]	; (80010dc <SystemClock_Config+0x104>)
 8001034:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <SystemClock_Config+0x104>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001046:	2301      	movs	r3, #1
 8001048:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001050:	2302      	movs	r3, #2
 8001052:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001054:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001058:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 800105a:	2304      	movs	r3, #4
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 72;
 800105e:	2348      	movs	r3, #72	; 0x48
 8001060:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001062:	2302      	movs	r3, #2
 8001064:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001066:	2303      	movs	r3, #3
 8001068:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800106a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800106e:	4618      	mov	r0, r3
 8001070:	f005 f8a8 	bl	80061c4 <HAL_RCC_OscConfig>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <SystemClock_Config+0xa6>
		Error_Handler();
 800107a:	f000 faa9 	bl	80015d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800107e:	230f      	movs	r3, #15
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001082:	2302      	movs	r3, #2
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001086:	2300      	movs	r3, #0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800108e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001098:	2102      	movs	r1, #2
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fb02 	bl	80066a4 <HAL_RCC_ClockConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <SystemClock_Config+0xd2>
		Error_Handler();
 80010a6:	f000 fa93 	bl	80015d0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80010aa:	2301      	movs	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 288;
 80010ae:	f44f 7390 	mov.w	r3, #288	; 0x120
 80010b2:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80010b4:	2308      	movs	r3, #8
 80010b6:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80010b8:	2306      	movs	r3, #6
 80010ba:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4618      	mov	r0, r3
 80010c2:	f005 fccd 	bl	8006a60 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0xf8>
		Error_Handler();
 80010cc:	f000 fa80 	bl	80015d0 <Error_Handler>
	}
}
 80010d0:	bf00      	nop
 80010d2:	3768      	adds	r7, #104	; 0x68
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40007000 	.word	0x40007000

080010e0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C1_Init+0x50>)
 80010e6:	4a13      	ldr	r2, [pc, #76]	; (8001134 <MX_I2C1_Init+0x54>)
 80010e8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_I2C1_Init+0x50>)
 80010ec:	4a12      	ldr	r2, [pc, #72]	; (8001138 <MX_I2C1_Init+0x58>)
 80010ee:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_I2C1_Init+0x50>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_I2C1_Init+0x50>)
 80010fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001102:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_I2C1_Init+0x50>)
 800111e:	f003 fa09 	bl	8004534 <HAL_I2C_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001128:	f000 fa52 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	200013dc 	.word	0x200013dc
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <MX_I2C2_Init+0x50>)
 8001142:	4a13      	ldr	r2, [pc, #76]	; (8001190 <MX_I2C2_Init+0x54>)
 8001144:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8001146:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_I2C2_Init+0x50>)
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <MX_I2C2_Init+0x58>)
 800114a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_I2C2_Init+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_I2C2_Init+0x50>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_I2C2_Init+0x50>)
 800115a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800115e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <MX_I2C2_Init+0x50>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8001166:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_I2C2_Init+0x50>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <MX_I2C2_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_I2C2_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_I2C2_Init+0x50>)
 800117a:	f003 f9db 	bl	8004534 <HAL_I2C_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8001184:	f000 fa24 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20001470 	.word	0x20001470
 8001190:	40005800 	.word	0x40005800
 8001194:	000186a0 	.word	0x000186a0

08001198 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <MX_I2S3_Init+0x54>)
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <MX_I2S3_Init+0x58>)
 80011a0:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_I2S3_Init+0x54>)
 80011a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011a8:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_I2S3_Init+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_I2S3_Init+0x54>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <MX_I2S3_Init+0x54>)
 80011b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011bc:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_I2S3_Init+0x54>)
 80011c0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80011c4:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_I2S3_Init+0x54>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80011cc:	4b07      	ldr	r3, [pc, #28]	; (80011ec <MX_I2S3_Init+0x54>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_I2S3_Init+0x54>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80011d8:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_I2S3_Init+0x54>)
 80011da:	f004 fa61 	bl	80056a0 <HAL_I2S_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2S3_Init+0x50>
		Error_Handler();
 80011e4:	f000 f9f4 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20001564 	.word	0x20001564
 80011f0:	40003c00 	.word	0x40003c00

080011f4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001210:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_TIM4_Init+0x94>)
 8001212:	4a1e      	ldr	r2, [pc, #120]	; (800128c <MX_TIM4_Init+0x98>)
 8001214:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = TIM4_PRESCALER;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_TIM4_Init+0x94>)
 8001218:	2263      	movs	r2, #99	; 0x63
 800121a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM4_Init+0x94>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_PERIOD;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM4_Init+0x94>)
 8001224:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001228:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_TIM4_Init+0x94>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM4_Init+0x94>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <MX_TIM4_Init+0x94>)
 8001238:	f005 fda2 	bl	8006d80 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM4_Init+0x52>
		Error_Handler();
 8001242:	f000 f9c5 	bl	80015d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM4_Init+0x94>)
 8001254:	f005 ffdc 	bl	8007210 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM4_Init+0x6e>
		Error_Handler();
 800125e:	f000 f9b7 	bl	80015d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM4_Init+0x94>)
 8001270:	f006 fb5e 	bl	8007930 <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 800127a:	f000 f9a9 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000139c 	.word	0x2000139c
 800128c:	40000800 	.word	0x40000800

08001290 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b08a      	sub	sp, #40	; 0x28
 8001294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001296:	f107 0320 	add.w	r3, r7, #32
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	611a      	str	r2, [r3, #16]
 80012ae:	615a      	str	r2, [r3, #20]
 80012b0:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80012b2:	4b2d      	ldr	r3, [pc, #180]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012b4:	4a2d      	ldr	r2, [pc, #180]	; (800136c <MX_TIM5_Init+0xdc>)
 80012b6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = TIM5_PRESCALER;
 80012b8:	4b2b      	ldr	r3, [pc, #172]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012ba:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80012be:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b29      	ldr	r3, [pc, #164]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = TIM5_PERIOD;
 80012c6:	4b28      	ldr	r3, [pc, #160]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012c8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80012cc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b26      	ldr	r3, [pc, #152]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80012da:	4823      	ldr	r0, [pc, #140]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012dc:	f005 fd9f 	bl	8006e1e <HAL_TIM_PWM_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM5_Init+0x5a>
		Error_Handler();
 80012e6:	f000 f973 	bl	80015d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	481b      	ldr	r0, [pc, #108]	; (8001368 <MX_TIM5_Init+0xd8>)
 80012fa:	f006 fb19 	bl	8007930 <HAL_TIMEx_MasterConfigSynchronization>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM5_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8001304:	f000 f964 	bl	80015d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001308:	2360      	movs	r3, #96	; 0x60
 800130a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2204      	movs	r2, #4
 800131c:	4619      	mov	r1, r3
 800131e:	4812      	ldr	r0, [pc, #72]	; (8001368 <MX_TIM5_Init+0xd8>)
 8001320:	f005 feb0 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM5_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800132a:	f000 f951 	bl	80015d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	2208      	movs	r2, #8
 8001332:	4619      	mov	r1, r3
 8001334:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_TIM5_Init+0xd8>)
 8001336:	f005 fea5 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM5_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001340:	f000 f946 	bl	80015d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	220c      	movs	r2, #12
 8001348:	4619      	mov	r1, r3
 800134a:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM5_Init+0xd8>)
 800134c:	f005 fe9a 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM5_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001356:	f000 f93b 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 800135a:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM5_Init+0xd8>)
 800135c:	f000 fb04 	bl	8001968 <HAL_TIM_MspPostInit>

}
 8001360:	bf00      	nop
 8001362:	3728      	adds	r7, #40	; 0x28
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200014c4 	.word	0x200014c4
 800136c:	40000c00 	.word	0x40000c00

08001370 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001374:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_TIM10_Init+0x40>)
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <MX_TIM10_Init+0x44>)
 8001378:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = TIM10_PRESCALER;
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <MX_TIM10_Init+0x40>)
 800137c:	f240 3252 	movw	r2, #850	; 0x352
 8001380:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_TIM10_Init+0x40>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = TIM10_PERIOD;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_TIM10_Init+0x40>)
 800138a:	f240 3252 	movw	r2, #850	; 0x352
 800138e:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_TIM10_Init+0x40>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_TIM10_Init+0x40>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800139c:	4804      	ldr	r0, [pc, #16]	; (80013b0 <MX_TIM10_Init+0x40>)
 800139e:	f005 fcef 	bl	8006d80 <HAL_TIM_Base_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM10_Init+0x3c>
		Error_Handler();
 80013a8:	f000 f912 	bl	80015d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20001430 	.word	0x20001430
 80013b4:	40014400 	.word	0x40014400

080013b8 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_DMA_Init+0x3c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	2010      	movs	r0, #16
 80013e0:	f000 fe3b 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013e4:	2010      	movs	r0, #16
 80013e6:	f000 fe54 	bl	8002092 <HAL_NVIC_EnableIRQ>

}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800

080013f8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b08c      	sub	sp, #48	; 0x30
 80013fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
 8001412:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0310 	and.w	r3, r3, #16
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a61      	ldr	r2, [pc, #388]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	617b      	str	r3, [r7, #20]
 8001444:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	613b      	str	r3, [r7, #16]
 800144a:	4b5b      	ldr	r3, [pc, #364]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a5a      	ldr	r2, [pc, #360]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b58      	ldr	r3, [pc, #352]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0304 	and.w	r3, r3, #4
 800145e:	613b      	str	r3, [r7, #16]
 8001460:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	4b54      	ldr	r3, [pc, #336]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a53      	ldr	r2, [pc, #332]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	4b4d      	ldr	r3, [pc, #308]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b4a      	ldr	r3, [pc, #296]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	60bb      	str	r3, [r7, #8]
 8001498:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
 800149e:	4b46      	ldr	r3, [pc, #280]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a45      	ldr	r2, [pc, #276]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 80014a4:	f043 0308 	orr.w	r3, r3, #8
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <MX_GPIO_Init+0x1c0>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, USB_power_Pin | dir_Pin | step_Pin,
 80014b6:	2200      	movs	r2, #0
 80014b8:	f240 1141 	movw	r1, #321	; 0x141
 80014bc:	483f      	ldr	r0, [pc, #252]	; (80015bc <MX_GPIO_Init+0x1c4>)
 80014be:	f001 fb0b 	bl	8002ad8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80014c2:	2200      	movs	r2, #0
 80014c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014c8:	483d      	ldr	r0, [pc, #244]	; (80015c0 <MX_GPIO_Init+0x1c8>)
 80014ca:	f001 fb05 	bl	8002ad8 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	483b      	ldr	r0, [pc, #236]	; (80015c4 <MX_GPIO_Init+0x1cc>)
 80014d6:	f001 faff 	bl	8002ad8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : button_left_Pin button_select_Pin button_right_Pin */
	GPIO_InitStruct.Pin =
 80014da:	232a      	movs	r3, #42	; 0x2a
 80014dc:	61fb      	str	r3, [r7, #28]
	button_left_Pin | button_select_Pin | button_right_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014de:	4b3a      	ldr	r3, [pc, #232]	; (80015c8 <MX_GPIO_Init+0x1d0>)
 80014e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014e2:	2302      	movs	r3, #2
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4837      	ldr	r0, [pc, #220]	; (80015cc <MX_GPIO_Init+0x1d4>)
 80014ee:	f001 f959 	bl	80027a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_power_Pin dir_Pin step_Pin */
	GPIO_InitStruct.Pin = USB_power_Pin | dir_Pin | step_Pin;
 80014f2:	f240 1341 	movw	r3, #321	; 0x141
 80014f6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f8:	2301      	movs	r3, #1
 80014fa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	4619      	mov	r1, r3
 800150a:	482c      	ldr	r0, [pc, #176]	; (80015bc <MX_GPIO_Init+0x1c4>)
 800150c:	f001 f94a 	bl	80027a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001510:	2301      	movs	r3, #1
 8001512:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4828      	ldr	r0, [pc, #160]	; (80015c4 <MX_GPIO_Init+0x1cc>)
 8001524:	f001 f93e 	bl	80027a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : endstop_Pin */
	GPIO_InitStruct.Pin = endstop_Pin;
 8001528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800152c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800152e:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <MX_GPIO_Init+0x1d0>)
 8001530:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(endstop_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	4820      	ldr	r0, [pc, #128]	; (80015c0 <MX_GPIO_Init+0x1c8>)
 800153e:	f001 f931 	bl	80027a4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8001542:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001546:	61fb      	str	r3, [r7, #28]
			| Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4819      	ldr	r0, [pc, #100]	; (80015c0 <MX_GPIO_Init+0x1c8>)
 800155c:	f001 f922 	bl	80027a4 <HAL_GPIO_Init>

	/*Configure GPIO pin : slp_rst_Pin */
	GPIO_InitStruct.Pin = slp_rst_Pin;
 8001560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001564:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(slp_rst_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	4619      	mov	r1, r3
 8001578:	4812      	ldr	r0, [pc, #72]	; (80015c4 <MX_GPIO_Init+0x1cc>)
 800157a:	f001 f913 	bl	80027a4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2100      	movs	r1, #0
 8001582:	2007      	movs	r0, #7
 8001584:	f000 fd69 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001588:	2007      	movs	r0, #7
 800158a:	f000 fd82 	bl	8002092 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2009      	movs	r0, #9
 8001594:	f000 fd61 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001598:	2009      	movs	r0, #9
 800159a:	f000 fd7a 	bl	8002092 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2100      	movs	r1, #0
 80015a2:	2017      	movs	r0, #23
 80015a4:	f000 fd59 	bl	800205a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015a8:	2017      	movs	r0, #23
 80015aa:	f000 fd72 	bl	8002092 <HAL_NVIC_EnableIRQ>

}
 80015ae:	bf00      	nop
 80015b0:	3730      	adds	r7, #48	; 0x30
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020800 	.word	0x40020800
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	40020000 	.word	0x40020000
 80015c8:	10110000 	.word	0x10110000
 80015cc:	40021000 	.word	0x40021000

080015d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <HAL_MspInit+0x4c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	; 0x44
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800161e:	2007      	movs	r0, #7
 8001620:	f000 fd10 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800

08001630 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08c      	sub	sp, #48	; 0x30
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 031c 	add.w	r3, r7, #28
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a3b      	ldr	r2, [pc, #236]	; (800173c <HAL_I2C_MspInit+0x10c>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12d      	bne.n	80016ae <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	61bb      	str	r3, [r7, #24]
 8001656:	4b3a      	ldr	r3, [pc, #232]	; (8001740 <HAL_I2C_MspInit+0x110>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a39      	ldr	r2, [pc, #228]	; (8001740 <HAL_I2C_MspInit+0x110>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_I2C_MspInit+0x110>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
 800166c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2X1_SCL_Pin|I2C1_SDA_Pin;
 800166e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001678:	2301      	movs	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001680:	2304      	movs	r3, #4
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	482e      	ldr	r0, [pc, #184]	; (8001744 <HAL_I2C_MspInit+0x114>)
 800168c:	f001 f88a 	bl	80027a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	4b2a      	ldr	r3, [pc, #168]	; (8001740 <HAL_I2C_MspInit+0x110>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a29      	ldr	r2, [pc, #164]	; (8001740 <HAL_I2C_MspInit+0x110>)
 800169a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b27      	ldr	r3, [pc, #156]	; (8001740 <HAL_I2C_MspInit+0x110>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016ac:	e041      	b.n	8001732 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a25      	ldr	r2, [pc, #148]	; (8001748 <HAL_I2C_MspInit+0x118>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d13c      	bne.n	8001732 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_I2C_MspInit+0x110>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a1f      	ldr	r2, [pc, #124]	; (8001740 <HAL_I2C_MspInit+0x110>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b1d      	ldr	r3, [pc, #116]	; (8001740 <HAL_I2C_MspInit+0x110>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80016d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	2301      	movs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016e6:	2304      	movs	r3, #4
 80016e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	4814      	ldr	r0, [pc, #80]	; (8001744 <HAL_I2C_MspInit+0x114>)
 80016f2:	f001 f857 	bl	80027a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 80016f6:	2308      	movs	r3, #8
 80016f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fa:	2312      	movs	r3, #18
 80016fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001706:	2309      	movs	r3, #9
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 031c 	add.w	r3, r7, #28
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	; (8001744 <HAL_I2C_MspInit+0x114>)
 8001712:	f001 f847 	bl	80027a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_I2C_MspInit+0x110>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_I2C_MspInit+0x110>)
 8001720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001724:	6413      	str	r3, [r2, #64]	; 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_I2C_MspInit+0x110>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40005400 	.word	0x40005400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400
 8001748:	40005800 	.word	0x40005800

0800174c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a45      	ldr	r2, [pc, #276]	; (8001880 <HAL_I2S_MspInit+0x134>)
 800176a:	4293      	cmp	r3, r2
 800176c:	f040 8084 	bne.w	8001878 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_I2S_MspInit+0x138>)
 8001776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001778:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_I2S_MspInit+0x138>)
 800177a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800177e:	6413      	str	r3, [r2, #64]	; 0x40
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_I2S_MspInit+0x138>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <HAL_I2S_MspInit+0x138>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_I2S_MspInit+0x138>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_I2S_MspInit+0x138>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a8:	2300      	movs	r3, #0
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	4b35      	ldr	r3, [pc, #212]	; (8001884 <HAL_I2S_MspInit+0x138>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	4a34      	ldr	r2, [pc, #208]	; (8001884 <HAL_I2S_MspInit+0x138>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6313      	str	r3, [r2, #48]	; 0x30
 80017b8:	4b32      	ldr	r3, [pc, #200]	; (8001884 <HAL_I2S_MspInit+0x138>)
 80017ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80017c4:	2310      	movs	r3, #16
 80017c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d4:	2306      	movs	r3, #6
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	482a      	ldr	r0, [pc, #168]	; (8001888 <HAL_I2S_MspInit+0x13c>)
 80017e0:	f000 ffe0 	bl	80027a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_CK_Pin|I2S3_SD_Pin;
 80017e4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80017e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ea:	2302      	movs	r3, #2
 80017ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017f6:	2306      	movs	r3, #6
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	4619      	mov	r1, r3
 8001800:	4822      	ldr	r0, [pc, #136]	; (800188c <HAL_I2S_MspInit+0x140>)
 8001802:	f000 ffcf 	bl	80027a4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001806:	4b22      	ldr	r3, [pc, #136]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001808:	4a22      	ldr	r2, [pc, #136]	; (8001894 <HAL_I2S_MspInit+0x148>)
 800180a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800180c:	4b20      	ldr	r3, [pc, #128]	; (8001890 <HAL_I2S_MspInit+0x144>)
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001812:	4b1f      	ldr	r3, [pc, #124]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001818:	4b1d      	ldr	r3, [pc, #116]	; (8001890 <HAL_I2S_MspInit+0x144>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800181e:	4b1c      	ldr	r3, [pc, #112]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001824:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001828:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800182c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800182e:	4b18      	ldr	r3, [pc, #96]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001830:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001834:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001838:	f44f 7280 	mov.w	r2, #256	; 0x100
 800183c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001846:	2204      	movs	r2, #4
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <HAL_I2S_MspInit+0x144>)
 800184c:	2203      	movs	r2, #3
 800184e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001852:	2200      	movs	r2, #0
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001858:	2200      	movs	r2, #0
 800185a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800185c:	480c      	ldr	r0, [pc, #48]	; (8001890 <HAL_I2S_MspInit+0x144>)
 800185e:	f000 fc33 	bl	80020c8 <HAL_DMA_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001868:	f7ff feb2 	bl	80015d0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001870:	639a      	str	r2, [r3, #56]	; 0x38
 8001872:	4a07      	ldr	r2, [pc, #28]	; (8001890 <HAL_I2S_MspInit+0x144>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40003c00 	.word	0x40003c00
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000
 800188c:	40020800 	.word	0x40020800
 8001890:	20001504 	.word	0x20001504
 8001894:	40026088 	.word	0x40026088

08001898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <HAL_TIM_Base_MspInit+0x80>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d116      	bne.n	80018d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a1a      	ldr	r2, [pc, #104]	; (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b18      	ldr	r3, [pc, #96]	; (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	201e      	movs	r0, #30
 80018cc:	f000 fbc5 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80018d0:	201e      	movs	r0, #30
 80018d2:	f000 fbde 	bl	8002092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80018d6:	e01a      	b.n	800190e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a10      	ldr	r2, [pc, #64]	; (8001920 <HAL_TIM_Base_MspInit+0x88>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d115      	bne.n	800190e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a0c      	ldr	r2, [pc, #48]	; (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_TIM_Base_MspInit+0x84>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2100      	movs	r1, #0
 8001902:	2019      	movs	r0, #25
 8001904:	f000 fba9 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001908:	2019      	movs	r0, #25
 800190a:	f000 fbc2 	bl	8002092 <HAL_NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40000800 	.word	0x40000800
 800191c:	40023800 	.word	0x40023800
 8001920:	40014400 	.word	0x40014400

08001924 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <HAL_TIM_PWM_MspInit+0x3c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d10d      	bne.n	8001952 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_TIM_PWM_MspInit+0x40>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a09      	ldr	r2, [pc, #36]	; (8001964 <HAL_TIM_PWM_MspInit+0x40>)
 8001940:	f043 0308 	orr.w	r3, r3, #8
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_TIM_PWM_MspInit+0x40>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40000c00 	.word	0x40000c00
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]
 800197e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <HAL_TIM_MspPostInit+0x68>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d11d      	bne.n	80019c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <HAL_TIM_MspPostInit+0x6c>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019a6:	230e      	movs	r3, #14
 80019a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_TIM_MspPostInit+0x70>)
 80019c2:	f000 feef 	bl	80027a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40000c00 	.word	0x40000c00
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ee:	e7fe      	b.n	80019ee <HardFault_Handler+0x4>

080019f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <MemManage_Handler+0x4>

080019f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler+0x4>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <UsageFault_Handler+0x4>

08001a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f9f6 	bl	8001e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001a3c:	2002      	movs	r0, #2
 8001a3e:	f001 f865 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a4a:	2008      	movs	r0, #8
 8001a4c:	f001 f85e 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001a58:	4802      	ldr	r0, [pc, #8]	; (8001a64 <DMA1_Stream5_IRQHandler+0x10>)
 8001a5a:	f000 fc3b 	bl	80022d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20001504 	.word	0x20001504

08001a68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001a6c:	2020      	movs	r0, #32
 8001a6e:	f001 f84d 	bl	8002b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a7e:	f005 f9f9 	bl	8006e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20001430 	.word	0x20001430

08001a8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM4_IRQHandler+0x10>)
 8001a92:	f005 f9ef 	bl	8006e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000139c 	.word	0x2000139c

08001aa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <OTG_FS_IRQHandler+0x10>)
 8001aa6:	f001 fae3 	bl	8003070 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20001df0 	.word	0x20001df0

08001ab4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001abc:	4b11      	ldr	r3, [pc, #68]	; (8001b04 <_sbrk+0x50>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x16>
		heap_end = &end;
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <_sbrk+0x50>)
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <_sbrk+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001aca:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <_sbrk+0x50>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <_sbrk+0x50>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	466a      	mov	r2, sp
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d907      	bls.n	8001aee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ade:	f00c fdc1 	bl	800e664 <__errno>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	e006      	b.n	8001afc <_sbrk+0x48>
	}

	heap_end += incr;
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <_sbrk+0x50>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <_sbrk+0x50>)
 8001af8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000110 	.word	0x20000110
 8001b08:	200020b8 	.word	0x200020b8

08001b0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <SystemInit+0x28>)
 8001b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b16:	4a07      	ldr	r2, [pc, #28]	; (8001b34 <SystemInit+0x28>)
 8001b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <SystemInit+0x28>)
 8001b22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b26:	609a      	str	r2, [r3, #8]
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <wavPlayer_reset+0x1c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8001b42:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <wavPlayer_reset+0x20>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20001348 	.word	0x20001348
 8001b58:	20001350 	.word	0x20001350

08001b5c <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08e      	sub	sp, #56	; 0x38
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <wavPlayer_fileSelect+0x48>)
 8001b6e:	f00b fc33 	bl	800d3d8 <f_open>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <wavPlayer_fileSelect+0x20>
  {
    return false;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	e00e      	b.n	8001b9a <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001b7c:	f107 0308 	add.w	r3, r7, #8
 8001b80:	f107 010c 	add.w	r1, r7, #12
 8001b84:	222c      	movs	r2, #44	; 0x2c
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <wavPlayer_fileSelect+0x48>)
 8001b88:	f00b fde4 	bl	800d754 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <wavPlayer_fileSelect+0x4c>)
 8001b90:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	4a05      	ldr	r2, [pc, #20]	; (8001bac <wavPlayer_fileSelect+0x50>)
 8001b96:	6013      	str	r3, [r2, #0]
  return true;
 8001b98:	2301      	movs	r3, #1
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3738      	adds	r7, #56	; 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000114 	.word	0x20000114
 8001ba8:	20000344 	.word	0x20000344
 8001bac:	2000134c 	.word	0x2000134c

08001bb0 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  isFinished = false;
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <wavPlayer_play+0x48>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <wavPlayer_play+0x4c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ffc2 	bl	8000b48 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	480e      	ldr	r0, [pc, #56]	; (8001c00 <wavPlayer_play+0x50>)
 8001bc8:	f00b ffab 	bl	800db22 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <wavPlayer_play+0x54>)
 8001bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd2:	490d      	ldr	r1, [pc, #52]	; (8001c08 <wavPlayer_play+0x58>)
 8001bd4:	480a      	ldr	r0, [pc, #40]	; (8001c00 <wavPlayer_play+0x50>)
 8001bd6:	f00b fdbd 	bl	800d754 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8001bda:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <wavPlayer_play+0x5c>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <wavPlayer_play+0x54>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <wavPlayer_play+0x60>)
 8001be6:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8001be8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bec:	4806      	ldr	r0, [pc, #24]	; (8001c08 <wavPlayer_play+0x58>)
 8001bee:	f7fe ffbb 	bl	8000b68 <audioI2S_play>
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20001354 	.word	0x20001354
 8001bfc:	2000134c 	.word	0x2000134c
 8001c00:	20000114 	.word	0x20000114
 8001c04:	20001350 	.word	0x20001350
 8001c08:	20000348 	.word	0x20000348
 8001c0c:	20000344 	.word	0x20000344
 8001c10:	20001348 	.word	0x20001348

08001c14 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001c18:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <wavPlayer_process+0xc8>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d859      	bhi.n	8001cd6 <wavPlayer_process+0xc2>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <wavPlayer_process+0x14>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001cd5 	.word	0x08001cd5
 8001c2c:	08001c39 	.word	0x08001c39
 8001c30:	08001c7b 	.word	0x08001c7b
 8001c34:	08001cbd 	.word	0x08001cbd
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001c38:	4b29      	ldr	r3, [pc, #164]	; (8001ce0 <wavPlayer_process+0xcc>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001c3e:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <wavPlayer_process+0xc8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001c44:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <wavPlayer_process+0xcc>)
 8001c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4a:	4926      	ldr	r1, [pc, #152]	; (8001ce4 <wavPlayer_process+0xd0>)
 8001c4c:	4826      	ldr	r0, [pc, #152]	; (8001ce8 <wavPlayer_process+0xd4>)
 8001c4e:	f00b fd81 	bl	800d754 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001c52:	4b26      	ldr	r3, [pc, #152]	; (8001cec <wavPlayer_process+0xd8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c5a:	d907      	bls.n	8001c6c <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <wavPlayer_process+0xd8>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <wavPlayer_process+0xcc>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	4a21      	ldr	r2, [pc, #132]	; (8001cec <wavPlayer_process+0xd8>)
 8001c68:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001c6a:	e034      	b.n	8001cd6 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001c6c:	4b1f      	ldr	r3, [pc, #124]	; (8001cec <wavPlayer_process+0xd8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <wavPlayer_process+0xc8>)
 8001c74:	2203      	movs	r2, #3
 8001c76:	701a      	strb	r2, [r3, #0]
    break;
 8001c78:	e02d      	b.n	8001cd6 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <wavPlayer_process+0xcc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001c80:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <wavPlayer_process+0xc8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <wavPlayer_process+0xcc>)
 8001c88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c8c:	4918      	ldr	r1, [pc, #96]	; (8001cf0 <wavPlayer_process+0xdc>)
 8001c8e:	4816      	ldr	r0, [pc, #88]	; (8001ce8 <wavPlayer_process+0xd4>)
 8001c90:	f00b fd60 	bl	800d754 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <wavPlayer_process+0xd8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c9c:	d907      	bls.n	8001cae <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <wavPlayer_process+0xd8>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <wavPlayer_process+0xcc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	4a10      	ldr	r2, [pc, #64]	; (8001cec <wavPlayer_process+0xd8>)
 8001caa:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001cac:	e013      	b.n	8001cd6 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <wavPlayer_process+0xd8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <wavPlayer_process+0xc8>)
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	701a      	strb	r2, [r3, #0]
    break;
 8001cba:	e00c      	b.n	8001cd6 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8001cbc:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <wavPlayer_process+0xd4>)
 8001cbe:	f00b ff06 	bl	800dace <f_close>
    wavPlayer_reset();
 8001cc2:	f7ff ff39 	bl	8001b38 <wavPlayer_reset>
    isFinished = true;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <wavPlayer_process+0xe0>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <wavPlayer_process+0xc8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	701a      	strb	r2, [r3, #0]
    break;
 8001cd2:	e000      	b.n	8001cd6 <wavPlayer_process+0xc2>
    break;
 8001cd4:	bf00      	nop
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	20001355 	.word	0x20001355
 8001ce0:	20001350 	.word	0x20001350
 8001ce4:	20000348 	.word	0x20000348
 8001ce8:	20000114 	.word	0x20000114
 8001cec:	20001348 	.word	0x20001348
 8001cf0:	20000b48 	.word	0x20000b48
 8001cf4:	20001354 	.word	0x20001354

08001cf8 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001cfc:	4b03      	ldr	r3, [pc, #12]	; (8001d0c <audioI2S_halfTransfer_Callback+0x14>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	20001355 	.word	0x20001355

08001d10 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <audioI2S_fullTransfer_Callback+0x14>)
 8001d16:	2202      	movs	r2, #2
 8001d18:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20001355 	.word	0x20001355

08001d28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d2e:	e003      	b.n	8001d38 <LoopCopyDataInit>

08001d30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d36:	3104      	adds	r1, #4

08001d38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d38:	480b      	ldr	r0, [pc, #44]	; (8001d68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d3a:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d40:	d3f6      	bcc.n	8001d30 <CopyDataInit>
  ldr  r2, =_sbss
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d44:	e002      	b.n	8001d4c <LoopFillZerobss>

08001d46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d48:	f842 3b04 	str.w	r3, [r2], #4

08001d4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d50:	d3f9      	bcc.n	8001d46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d52:	f7ff fedb 	bl	8001b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d56:	f00c fc8b 	bl	800e670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5a:	f7ff f881 	bl	8000e60 <main>
  bx  lr    
 8001d5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d64:	0800f0ec 	.word	0x0800f0ec
  ldr  r0, =_sdata
 8001d68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d6c:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001d70:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001d74:	200020b8 	.word	0x200020b8

08001d78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d78:	e7fe      	b.n	8001d78 <ADC_IRQHandler>
	...

08001d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d80:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <HAL_Init+0x40>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_Init+0x40>)
 8001d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <HAL_Init+0x40>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0a      	ldr	r2, [pc, #40]	; (8001dbc <HAL_Init+0x40>)
 8001d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_Init+0x40>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_Init+0x40>)
 8001d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da4:	2003      	movs	r0, #3
 8001da6:	f000 f94d 	bl	8002044 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f808 	bl	8001dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db0:	f7ff fc16 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00

08001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc8:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_InitTick+0x54>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x58>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f965 	bl	80020ae <HAL_SYSTICK_Config>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00e      	b.n	8001e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b0f      	cmp	r3, #15
 8001df2:	d80a      	bhi.n	8001e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df4:	2200      	movs	r2, #0
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	f000 f92d 	bl	800205a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_InitTick+0x5c>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	20000004 	.word	0x20000004

08001e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e24:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <HAL_IncTick+0x20>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x24>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4413      	add	r3, r2
 8001e30:	4a04      	ldr	r2, [pc, #16]	; (8001e44 <HAL_IncTick+0x24>)
 8001e32:	6013      	str	r3, [r2, #0]
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	20000008 	.word	0x20000008
 8001e44:	200015ac 	.word	0x200015ac

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	200015ac 	.word	0x200015ac

08001e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e68:	f7ff ffee 	bl	8001e48 <HAL_GetTick>
 8001e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e78:	d005      	beq.n	8001e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_Delay+0x40>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e86:	bf00      	nop
 8001e88:	f7ff ffde 	bl	8001e48 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d8f7      	bhi.n	8001e88 <HAL_Delay+0x28>
  {
  }
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000008 	.word	0x20000008

08001ea4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ecc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0a1b      	lsrs	r3, r3, #8
 8001ef6:	f003 0307 	and.w	r3, r3, #7
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	db0b      	blt.n	8001f32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	4907      	ldr	r1, [pc, #28]	; (8001f40 <__NVIC_EnableIRQ+0x38>)
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	095b      	lsrs	r3, r3, #5
 8001f28:	2001      	movs	r0, #1
 8001f2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	6039      	str	r1, [r7, #0]
 8001f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	db0a      	blt.n	8001f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	490c      	ldr	r1, [pc, #48]	; (8001f90 <__NVIC_SetPriority+0x4c>)
 8001f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	440b      	add	r3, r1
 8001f68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f6c:	e00a      	b.n	8001f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	4908      	ldr	r1, [pc, #32]	; (8001f94 <__NVIC_SetPriority+0x50>)
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 030f 	and.w	r3, r3, #15
 8001f7a:	3b04      	subs	r3, #4
 8001f7c:	0112      	lsls	r2, r2, #4
 8001f7e:	b2d2      	uxtb	r2, r2
 8001f80:	440b      	add	r3, r1
 8001f82:	761a      	strb	r2, [r3, #24]
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000e100 	.word	0xe000e100
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	; 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	f1c3 0307 	rsb	r3, r3, #7
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	bf28      	it	cs
 8001fb6:	2304      	movcs	r3, #4
 8001fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	2b06      	cmp	r3, #6
 8001fc0:	d902      	bls.n	8001fc8 <NVIC_EncodePriority+0x30>
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	3b03      	subs	r3, #3
 8001fc6:	e000      	b.n	8001fca <NVIC_EncodePriority+0x32>
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43da      	mvns	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	401a      	ands	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	43d9      	mvns	r1, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	4313      	orrs	r3, r2
         );
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3724      	adds	r7, #36	; 0x24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002010:	d301      	bcc.n	8002016 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002012:	2301      	movs	r3, #1
 8002014:	e00f      	b.n	8002036 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <SysTick_Config+0x40>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800201e:	210f      	movs	r1, #15
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f7ff ff8e 	bl	8001f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	4b05      	ldr	r3, [pc, #20]	; (8002040 <SysTick_Config+0x40>)
 800202a:	2200      	movs	r2, #0
 800202c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <SysTick_Config+0x40>)
 8002030:	2207      	movs	r2, #7
 8002032:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	e000e010 	.word	0xe000e010

08002044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff ff29 	bl	8001ea4 <__NVIC_SetPriorityGrouping>
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	4603      	mov	r3, r0
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800206c:	f7ff ff3e 	bl	8001eec <__NVIC_GetPriorityGrouping>
 8002070:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	6978      	ldr	r0, [r7, #20]
 8002078:	f7ff ff8e 	bl	8001f98 <NVIC_EncodePriority>
 800207c:	4602      	mov	r2, r0
 800207e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002082:	4611      	mov	r1, r2
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff ff5d 	bl	8001f44 <__NVIC_SetPriority>
}
 800208a:	bf00      	nop
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	4603      	mov	r3, r0
 800209a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff ff31 	bl	8001f08 <__NVIC_EnableIRQ>
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b082      	sub	sp, #8
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ffa2 	bl	8002000 <SysTick_Config>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff feb8 	bl	8001e48 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e099      	b.n	8002218 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002104:	e00f      	b.n	8002126 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002106:	f7ff fe9f 	bl	8001e48 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b05      	cmp	r3, #5
 8002112:	d908      	bls.n	8002126 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2220      	movs	r2, #32
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2203      	movs	r2, #3
 800211e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e078      	b.n	8002218 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e8      	bne.n	8002106 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4b38      	ldr	r3, [pc, #224]	; (8002220 <HAL_DMA_Init+0x158>)
 8002140:	4013      	ands	r3, r2
 8002142:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002152:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800215e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	4313      	orrs	r3, r2
 8002176:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217c:	2b04      	cmp	r3, #4
 800217e:	d107      	bne.n	8002190 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002188:	4313      	orrs	r3, r2
 800218a:	697a      	ldr	r2, [r7, #20]
 800218c:	4313      	orrs	r3, r2
 800218e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f023 0307 	bic.w	r3, r3, #7
 80021a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ac:	697a      	ldr	r2, [r7, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d117      	bne.n	80021ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fa6f 	bl	80026b0 <DMA_CheckFifoParam>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2240      	movs	r2, #64	; 0x40
 80021dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021e6:	2301      	movs	r3, #1
 80021e8:	e016      	b.n	8002218 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	697a      	ldr	r2, [r7, #20]
 80021f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 fa26 	bl	8002644 <DMA_CalcBaseAndBitshift>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	223f      	movs	r2, #63	; 0x3f
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	f010803f 	.word	0xf010803f

08002224 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_DMA_Start_IT+0x26>
 8002246:	2302      	movs	r3, #2
 8002248:	e040      	b.n	80022cc <HAL_DMA_Start_IT+0xa8>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b01      	cmp	r3, #1
 800225c:	d12f      	bne.n	80022be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f000 f9b8 	bl	80025e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	223f      	movs	r2, #63	; 0x3f
 800227e:	409a      	lsls	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 0216 	orr.w	r2, r2, #22
 8002292:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d007      	beq.n	80022ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0208 	orr.w	r2, r2, #8
 80022aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e005      	b.n	80022ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022c6:	2302      	movs	r3, #2
 80022c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022e0:	4b92      	ldr	r3, [pc, #584]	; (800252c <HAL_DMA_IRQHandler+0x258>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a92      	ldr	r2, [pc, #584]	; (8002530 <HAL_DMA_IRQHandler+0x25c>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fe:	2208      	movs	r2, #8
 8002300:	409a      	lsls	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d01a      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f022 0204 	bic.w	r2, r2, #4
 8002326:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232c:	2208      	movs	r2, #8
 800232e:	409a      	lsls	r2, r3
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0201 	orr.w	r2, r3, #1
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002344:	2201      	movs	r2, #1
 8002346:	409a      	lsls	r2, r3
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d012      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002362:	2201      	movs	r2, #1
 8002364:	409a      	lsls	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236e:	f043 0202 	orr.w	r2, r3, #2
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237a:	2204      	movs	r2, #4
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00b      	beq.n	80023ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	2204      	movs	r2, #4
 800239a:	409a      	lsls	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b0:	2210      	movs	r2, #16
 80023b2:	409a      	lsls	r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d043      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d03c      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	2210      	movs	r2, #16
 80023d0:	409a      	lsls	r2, r3
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d108      	bne.n	8002404 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d024      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	4798      	blx	r3
 8002402:	e01f      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	4798      	blx	r3
 8002414:	e016      	b.n	8002444 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0208 	bic.w	r2, r2, #8
 8002432:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2220      	movs	r2, #32
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 808e 	beq.w	8002572 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0310 	and.w	r3, r3, #16
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 8086 	beq.w	8002572 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2220      	movs	r2, #32
 800246c:	409a      	lsls	r2, r3
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b05      	cmp	r3, #5
 800247c:	d136      	bne.n	80024ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0216 	bic.w	r2, r2, #22
 800248c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800249c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d103      	bne.n	80024ae <HAL_DMA_IRQHandler+0x1da>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d007      	beq.n	80024be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0208 	bic.w	r2, r2, #8
 80024bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	223f      	movs	r2, #63	; 0x3f
 80024c4:	409a      	lsls	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d07d      	beq.n	80025de <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	4798      	blx	r3
        }
        return;
 80024ea:	e078      	b.n	80025de <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d01c      	beq.n	8002534 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d108      	bne.n	800251a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	2b00      	cmp	r3, #0
 800250e:	d030      	beq.n	8002572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e02b      	b.n	8002572 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d027      	beq.n	8002572 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	4798      	blx	r3
 800252a:	e022      	b.n	8002572 <HAL_DMA_IRQHandler+0x29e>
 800252c:	20000000 	.word	0x20000000
 8002530:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10f      	bne.n	8002562 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f022 0210 	bic.w	r2, r2, #16
 8002550:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	2b00      	cmp	r3, #0
 8002578:	d032      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d022      	beq.n	80025cc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2205      	movs	r2, #5
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3301      	adds	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d307      	bcc.n	80025ba <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f2      	bne.n	800259e <HAL_DMA_IRQHandler+0x2ca>
 80025b8:	e000      	b.n	80025bc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80025ba:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
 80025dc:	e000      	b.n	80025e0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025de:	bf00      	nop
    }
  }
}
 80025e0:	3718      	adds	r7, #24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop

080025e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002604:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b40      	cmp	r3, #64	; 0x40
 8002614:	d108      	bne.n	8002628 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002626:	e007      	b.n	8002638 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	60da      	str	r2, [r3, #12]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3b10      	subs	r3, #16
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <DMA_CalcBaseAndBitshift+0x64>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800265e:	4a13      	ldr	r2, [pc, #76]	; (80026ac <DMA_CalcBaseAndBitshift+0x68>)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b03      	cmp	r3, #3
 8002670:	d909      	bls.n	8002686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267a:	f023 0303 	bic.w	r3, r3, #3
 800267e:	1d1a      	adds	r2, r3, #4
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	659a      	str	r2, [r3, #88]	; 0x58
 8002684:	e007      	b.n	8002696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800268e:	f023 0303 	bic.w	r3, r3, #3
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800269a:	4618      	mov	r0, r3
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	aaaaaaab 	.word	0xaaaaaaab
 80026ac:	0800f00c 	.word	0x0800f00c

080026b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d855      	bhi.n	800277c <DMA_CheckFifoParam+0xcc>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <DMA_CheckFifoParam+0x28>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	080026e9 	.word	0x080026e9
 80026dc:	080026fb 	.word	0x080026fb
 80026e0:	080026e9 	.word	0x080026e9
 80026e4:	0800277d 	.word	0x0800277d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d045      	beq.n	8002780 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e042      	b.n	8002780 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002702:	d13f      	bne.n	8002784 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002708:	e03c      	b.n	8002784 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002712:	d121      	bne.n	8002758 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b03      	cmp	r3, #3
 8002718:	d836      	bhi.n	8002788 <DMA_CheckFifoParam+0xd8>
 800271a:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <DMA_CheckFifoParam+0x70>)
 800271c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002720:	08002731 	.word	0x08002731
 8002724:	08002737 	.word	0x08002737
 8002728:	08002731 	.word	0x08002731
 800272c:	08002749 	.word	0x08002749
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
      break;
 8002734:	e02f      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d024      	beq.n	800278c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002746:	e021      	b.n	800278c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002750:	d11e      	bne.n	8002790 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002756:	e01b      	b.n	8002790 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d902      	bls.n	8002764 <DMA_CheckFifoParam+0xb4>
 800275e:	2b03      	cmp	r3, #3
 8002760:	d003      	beq.n	800276a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002762:	e018      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      break;
 8002768:	e015      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00e      	beq.n	8002794 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	73fb      	strb	r3, [r7, #15]
      break;
 800277a:	e00b      	b.n	8002794 <DMA_CheckFifoParam+0xe4>
      break;
 800277c:	bf00      	nop
 800277e:	e00a      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002780:	bf00      	nop
 8002782:	e008      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002784:	bf00      	nop
 8002786:	e006      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002788:	bf00      	nop
 800278a:	e004      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 800278c:	bf00      	nop
 800278e:	e002      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;   
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <DMA_CheckFifoParam+0xe6>
      break;
 8002794:	bf00      	nop
    }
  } 
  
  return status; 
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	; 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	e159      	b.n	8002a74 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	429a      	cmp	r2, r3
 80027da:	f040 8148 	bne.w	8002a6e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d00b      	beq.n	80027fe <HAL_GPIO_Init+0x5a>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027f2:	2b11      	cmp	r3, #17
 80027f4:	d003      	beq.n	80027fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	2b12      	cmp	r3, #18
 80027fc:	d130      	bne.n	8002860 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	2203      	movs	r2, #3
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43db      	mvns	r3, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4013      	ands	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002834:	2201      	movs	r2, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 0201 	and.w	r2, r3, #1
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	2203      	movs	r2, #3
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d003      	beq.n	80028a0 <HAL_GPIO_Init+0xfc>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b12      	cmp	r3, #18
 800289e:	d123      	bne.n	80028e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	08da      	lsrs	r2, r3, #3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3208      	adds	r2, #8
 80028a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	220f      	movs	r2, #15
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	69b9      	ldr	r1, [r7, #24]
 80028e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0203 	and.w	r2, r3, #3
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 80a2 	beq.w	8002a6e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	4b56      	ldr	r3, [pc, #344]	; (8002a88 <HAL_GPIO_Init+0x2e4>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	4a55      	ldr	r2, [pc, #340]	; (8002a88 <HAL_GPIO_Init+0x2e4>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	6453      	str	r3, [r2, #68]	; 0x44
 800293a:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_GPIO_Init+0x2e4>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002946:	4a51      	ldr	r2, [pc, #324]	; (8002a8c <HAL_GPIO_Init+0x2e8>)
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	089b      	lsrs	r3, r3, #2
 800294c:	3302      	adds	r3, #2
 800294e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a48      	ldr	r2, [pc, #288]	; (8002a90 <HAL_GPIO_Init+0x2ec>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d019      	beq.n	80029a6 <HAL_GPIO_Init+0x202>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a47      	ldr	r2, [pc, #284]	; (8002a94 <HAL_GPIO_Init+0x2f0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d013      	beq.n	80029a2 <HAL_GPIO_Init+0x1fe>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a46      	ldr	r2, [pc, #280]	; (8002a98 <HAL_GPIO_Init+0x2f4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00d      	beq.n	800299e <HAL_GPIO_Init+0x1fa>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a45      	ldr	r2, [pc, #276]	; (8002a9c <HAL_GPIO_Init+0x2f8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d007      	beq.n	800299a <HAL_GPIO_Init+0x1f6>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a44      	ldr	r2, [pc, #272]	; (8002aa0 <HAL_GPIO_Init+0x2fc>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d101      	bne.n	8002996 <HAL_GPIO_Init+0x1f2>
 8002992:	2304      	movs	r3, #4
 8002994:	e008      	b.n	80029a8 <HAL_GPIO_Init+0x204>
 8002996:	2307      	movs	r3, #7
 8002998:	e006      	b.n	80029a8 <HAL_GPIO_Init+0x204>
 800299a:	2303      	movs	r3, #3
 800299c:	e004      	b.n	80029a8 <HAL_GPIO_Init+0x204>
 800299e:	2302      	movs	r3, #2
 80029a0:	e002      	b.n	80029a8 <HAL_GPIO_Init+0x204>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <HAL_GPIO_Init+0x204>
 80029a6:	2300      	movs	r3, #0
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	f002 0203 	and.w	r2, r2, #3
 80029ae:	0092      	lsls	r2, r2, #2
 80029b0:	4093      	lsls	r3, r2
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b8:	4934      	ldr	r1, [pc, #208]	; (8002a8c <HAL_GPIO_Init+0x2e8>)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	089b      	lsrs	r3, r3, #2
 80029be:	3302      	adds	r3, #2
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c6:	4b37      	ldr	r3, [pc, #220]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	4013      	ands	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ea:	4a2e      	ldr	r2, [pc, #184]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d003      	beq.n	8002a14 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a14:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	43db      	mvns	r3, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4013      	ands	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a44:	4b17      	ldr	r3, [pc, #92]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a68:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <HAL_GPIO_Init+0x300>)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3301      	adds	r3, #1
 8002a72:	61fb      	str	r3, [r7, #28]
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	2b0f      	cmp	r3, #15
 8002a78:	f67f aea2 	bls.w	80027c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3724      	adds	r7, #36	; 0x24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	40020000 	.word	0x40020000
 8002a94:	40020400 	.word	0x40020400
 8002a98:	40020800 	.word	0x40020800
 8002a9c:	40020c00 	.word	0x40020c00
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	887b      	ldrh	r3, [r7, #2]
 8002aba:	4013      	ands	r3, r2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d002      	beq.n	8002ac6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e001      	b.n	8002aca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	807b      	strh	r3, [r7, #2]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ae8:	787b      	ldrb	r3, [r7, #1]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aee:	887a      	ldrh	r2, [r7, #2]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002af4:	e003      	b.n	8002afe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	041a      	lsls	r2, r3, #16
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	619a      	str	r2, [r3, #24]
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
	...

08002b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	88fb      	ldrh	r3, [r7, #6]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d006      	beq.n	8002b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b22:	4a05      	ldr	r2, [pc, #20]	; (8002b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b24:	88fb      	ldrh	r3, [r7, #6]
 8002b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f806 	bl	8002b3c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002b52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b54:	b08f      	sub	sp, #60	; 0x3c
 8002b56:	af0a      	add	r7, sp, #40	; 0x28
 8002b58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e054      	b.n	8002c0e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f00b fa92 	bl	800e0a8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2203      	movs	r2, #3
 8002b88:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d102      	bne.n	8002b9e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 ffb8 	bl	8007b18 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	687e      	ldr	r6, [r7, #4]
 8002bb0:	466d      	mov	r5, sp
 8002bb2:	f106 0410 	add.w	r4, r6, #16
 8002bb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc6:	1d33      	adds	r3, r6, #4
 8002bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f004 ff32 	bl	8007a34 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f004 ffaf 	bl	8007b3a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	603b      	str	r3, [r7, #0]
 8002be2:	687e      	ldr	r6, [r7, #4]
 8002be4:	466d      	mov	r5, sp
 8002be6:	f106 0410 	add.w	r4, r6, #16
 8002bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bf2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bf6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bfa:	1d33      	adds	r3, r6, #4
 8002bfc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bfe:	6838      	ldr	r0, [r7, #0]
 8002c00:	f005 f8c2 	bl	8007d88 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c16 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002c16:	b590      	push	{r4, r7, lr}
 8002c18:	b089      	sub	sp, #36	; 0x24
 8002c1a:	af04      	add	r7, sp, #16
 8002c1c:	6078      	str	r0, [r7, #4]
 8002c1e:	4608      	mov	r0, r1
 8002c20:	4611      	mov	r1, r2
 8002c22:	461a      	mov	r2, r3
 8002c24:	4603      	mov	r3, r0
 8002c26:	70fb      	strb	r3, [r7, #3]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	70bb      	strb	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_HCD_HC_Init+0x28>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e07f      	b.n	8002d3e <HAL_HCD_HC_Init+0x128>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	333d      	adds	r3, #61	; 0x3d
 8002c56:	2200      	movs	r2, #0
 8002c58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	00db      	lsls	r3, r3, #3
 8002c66:	440b      	add	r3, r1
 8002c68:	3338      	adds	r3, #56	; 0x38
 8002c6a:	787a      	ldrb	r2, [r7, #1]
 8002c6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3340      	adds	r3, #64	; 0x40
 8002c7e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002c80:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	440b      	add	r3, r1
 8002c90:	3339      	adds	r3, #57	; 0x39
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333f      	adds	r3, #63	; 0x3f
 8002ca6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002caa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	78bb      	ldrb	r3, [r7, #2]
 8002cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cb4:	b2d8      	uxtb	r0, r3
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	440b      	add	r3, r1
 8002cc2:	333a      	adds	r3, #58	; 0x3a
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002cc8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da0a      	bge.n	8002ce6 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	333b      	adds	r3, #59	; 0x3b
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e009      	b.n	8002cfa <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	333b      	adds	r3, #59	; 0x3b
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	333c      	adds	r3, #60	; 0x3c
 8002d0a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d0e:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	787c      	ldrb	r4, [r7, #1]
 8002d16:	78ba      	ldrb	r2, [r7, #2]
 8002d18:	78f9      	ldrb	r1, [r7, #3]
 8002d1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f005 f9ae 	bl	800808c <USB_HC_Init>
 8002d30:	4603      	mov	r3, r0
 8002d32:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd90      	pop	{r4, r7, pc}

08002d46 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_HCD_HC_Halt+0x1e>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e00f      	b.n	8002d84 <HAL_HCD_HC_Halt+0x3e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	78fa      	ldrb	r2, [r7, #3]
 8002d72:	4611      	mov	r1, r2
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 fbe8 	bl	800854a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	4608      	mov	r0, r1
 8002d96:	4611      	mov	r1, r2
 8002d98:	461a      	mov	r2, r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	70fb      	strb	r3, [r7, #3]
 8002d9e:	460b      	mov	r3, r1
 8002da0:	70bb      	strb	r3, [r7, #2]
 8002da2:	4613      	mov	r3, r2
 8002da4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	6879      	ldr	r1, [r7, #4]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	333b      	adds	r3, #59	; 0x3b
 8002db6:	78ba      	ldrb	r2, [r7, #2]
 8002db8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	440b      	add	r3, r1
 8002dc8:	333f      	adds	r3, #63	; 0x3f
 8002dca:	787a      	ldrb	r2, [r7, #1]
 8002dcc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002dce:	7c3b      	ldrb	r3, [r7, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d114      	bne.n	8002dfe <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	440b      	add	r3, r1
 8002de2:	3342      	adds	r3, #66	; 0x42
 8002de4:	2203      	movs	r2, #3
 8002de6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	4613      	mov	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4413      	add	r3, r2
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	440b      	add	r3, r1
 8002df6:	333d      	adds	r3, #61	; 0x3d
 8002df8:	7f3a      	ldrb	r2, [r7, #28]
 8002dfa:	701a      	strb	r2, [r3, #0]
 8002dfc:	e009      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	3342      	adds	r3, #66	; 0x42
 8002e0e:	2202      	movs	r2, #2
 8002e10:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e12:	787b      	ldrb	r3, [r7, #1]
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	f200 80d6 	bhi.w	8002fc6 <HAL_HCD_HC_SubmitRequest+0x23a>
 8002e1a:	a201      	add	r2, pc, #4	; (adr r2, 8002e20 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002fb1 	.word	0x08002fb1
 8002e28:	08002e9d 	.word	0x08002e9d
 8002e2c:	08002f27 	.word	0x08002f27
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002e30:	7c3b      	ldrb	r3, [r7, #16]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	f040 80c9 	bne.w	8002fca <HAL_HCD_HC_SubmitRequest+0x23e>
 8002e38:	78bb      	ldrb	r3, [r7, #2]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 80c5 	bne.w	8002fca <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002e40:	8b3b      	ldrh	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	3351      	adds	r3, #81	; 0x51
 8002e56:	2201      	movs	r2, #1
 8002e58:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	3351      	adds	r3, #81	; 0x51
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d10a      	bne.n	8002e86 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	3342      	adds	r3, #66	; 0x42
 8002e80:	2200      	movs	r2, #0
 8002e82:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002e84:	e0a1      	b.n	8002fca <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	3342      	adds	r3, #66	; 0x42
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
      break;
 8002e9a:	e096      	b.n	8002fca <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002e9c:	78bb      	ldrb	r3, [r7, #2]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d120      	bne.n	8002ee4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	440b      	add	r3, r1
 8002eb0:	3351      	adds	r3, #81	; 0x51
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10a      	bne.n	8002ece <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4413      	add	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3342      	adds	r3, #66	; 0x42
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002ecc:	e07e      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	3342      	adds	r3, #66	; 0x42
 8002ede:	2202      	movs	r2, #2
 8002ee0:	701a      	strb	r2, [r3, #0]
      break;
 8002ee2:	e073      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3350      	adds	r3, #80	; 0x50
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	3342      	adds	r3, #66	; 0x42
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
      break;
 8002f0e:	e05d      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3342      	adds	r3, #66	; 0x42
 8002f20:	2202      	movs	r2, #2
 8002f22:	701a      	strb	r2, [r3, #0]
      break;
 8002f24:	e052      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f26:	78bb      	ldrb	r3, [r7, #2]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d120      	bne.n	8002f6e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	440b      	add	r3, r1
 8002f3a:	3351      	adds	r3, #81	; 0x51
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10a      	bne.n	8002f58 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	440b      	add	r3, r1
 8002f50:	3342      	adds	r3, #66	; 0x42
 8002f52:	2200      	movs	r2, #0
 8002f54:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f56:	e039      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f58:	78fa      	ldrb	r2, [r7, #3]
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	440b      	add	r3, r1
 8002f66:	3342      	adds	r3, #66	; 0x42
 8002f68:	2202      	movs	r2, #2
 8002f6a:	701a      	strb	r2, [r3, #0]
      break;
 8002f6c:	e02e      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	3350      	adds	r3, #80	; 0x50
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3342      	adds	r3, #66	; 0x42
 8002f94:	2200      	movs	r2, #0
 8002f96:	701a      	strb	r2, [r3, #0]
      break;
 8002f98:	e018      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
      break;
 8002fae:	e00d      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3342      	adds	r3, #66	; 0x42
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
      break;
 8002fc4:	e002      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002fca:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	440b      	add	r3, r1
 8002fda:	3344      	adds	r3, #68	; 0x44
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	8b39      	ldrh	r1, [r7, #24]
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4403      	add	r3, r0
 8002ff0:	3348      	adds	r3, #72	; 0x48
 8002ff2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	440b      	add	r3, r1
 8003002:	335c      	adds	r3, #92	; 0x5c
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	334c      	adds	r3, #76	; 0x4c
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	440b      	add	r3, r1
 800302a:	3339      	adds	r3, #57	; 0x39
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	440b      	add	r3, r1
 800303e:	335d      	adds	r3, #93	; 0x5d
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	3338      	adds	r3, #56	; 0x38
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	18d1      	adds	r1, r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	461a      	mov	r2, r3
 8003060:	f005 f91e 	bl	80082a0 <USB_HC_StartXfer>
 8003064:	4603      	mov	r3, r0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop

08003070 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fe3b 	bl	8007d02 <USB_GetMode>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	f040 80ef 	bne.w	8003272 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 fe1f 	bl	8007cdc <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80e5 	beq.w	8003270 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f004 fe16 	bl	8007cdc <USB_ReadInterrupts>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030ba:	d104      	bne.n	80030c6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80030c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 fe06 	bl	8007cdc <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030da:	d104      	bne.n	80030e6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fdf6 	bl	8007cdc <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030fa:	d104      	bne.n	8003106 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003104:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fde6 	bl	8007cdc <USB_ReadInterrupts>
 8003110:	4603      	mov	r3, r0
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b02      	cmp	r3, #2
 8003118:	d103      	bne.n	8003122 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2202      	movs	r2, #2
 8003120:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f004 fdd8 	bl	8007cdc <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003136:	d115      	bne.n	8003164 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003140:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d108      	bne.n	8003164 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f00b f826 	bl	800e1a4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	4618      	mov	r0, r3
 8003160:	f004 fece 	bl	8007f00 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f004 fdb7 	bl	8007cdc <USB_ReadInterrupts>
 800316e:	4603      	mov	r3, r0
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003178:	d102      	bne.n	8003180 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f001 f966 	bl	800444c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f004 fda9 	bl	8007cdc <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b08      	cmp	r3, #8
 8003192:	d106      	bne.n	80031a2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f00a ffe9 	bl	800e16c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2208      	movs	r2, #8
 80031a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f004 fd98 	bl	8007cdc <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031b6:	d138      	bne.n	800322a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f005 f9b3 	bl	8008528 <USB_HC_ReadInterrupt>
 80031c2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e025      	b.n	8003216 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f003 030f 	and.w	r3, r3, #15
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	fa22 f303 	lsr.w	r3, r2, r3
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d018      	beq.n	8003210 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f4:	d106      	bne.n	8003204 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	4619      	mov	r1, r3
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f8cf 	bl	80033a0 <HCD_HC_IN_IRQHandler>
 8003202:	e005      	b.n	8003210 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	4619      	mov	r1, r3
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fcfd 	bl	8003c0a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	3301      	adds	r3, #1
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d3d4      	bcc.n	80031ca <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fd54 	bl	8007cdc <USB_ReadInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b10      	cmp	r3, #16
 800323c:	d101      	bne.n	8003242 <HAL_HCD_IRQHandler+0x1d2>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <HAL_HCD_IRQHandler+0x1d4>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d014      	beq.n	8003272 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0210 	bic.w	r2, r2, #16
 8003256:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f001 f84b 	bl	80042f4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	699a      	ldr	r2, [r3, #24]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0210 	orr.w	r2, r2, #16
 800326c:	619a      	str	r2, [r3, #24]
 800326e:	e000      	b.n	8003272 <HAL_HCD_IRQHandler+0x202>
      return;
 8003270:	bf00      	nop
    }
  }
}
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003286:	2b01      	cmp	r3, #1
 8003288:	d101      	bne.n	800328e <HAL_HCD_Start+0x16>
 800328a:	2302      	movs	r3, #2
 800328c:	e013      	b.n	80032b6 <HAL_HCD_Start+0x3e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f004 fc2b 	bl	8007af6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fe8e 	bl	8007fc8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b082      	sub	sp, #8
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d101      	bne.n	80032d4 <HAL_HCD_Stop+0x16>
 80032d0:	2302      	movs	r3, #2
 80032d2:	e00d      	b.n	80032f0 <HAL_HCD_Stop+0x32>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f005 fa6d 	bl	80087c0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f004 fe35 	bl	8007f74 <USB_ResetPort>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	4613      	mov	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4413      	add	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	440b      	add	r3, r1
 800332e:	335c      	adds	r3, #92	; 0x5c
 8003330:	781b      	ldrb	r3, [r3, #0]
}
 8003332:	4618      	mov	r0, r3
 8003334:	370c      	adds	r7, #12
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr

0800333e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800333e:	b480      	push	{r7}
 8003340:	b083      	sub	sp, #12
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
 8003346:	460b      	mov	r3, r1
 8003348:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	440b      	add	r3, r1
 8003358:	334c      	adds	r3, #76	; 0x4c
 800335a:	681b      	ldr	r3, [r3, #0]
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 fe77 	bl	8008068 <USB_GetCurrentFrame>
 800337a:	4603      	mov	r3, r0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f004 fe52 	bl	800803a <USB_GetHostSpeed>
 8003396:	4603      	mov	r3, r0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	460b      	mov	r3, r1
 80033aa:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80033b6:	78fb      	ldrb	r3, [r7, #3]
 80033b8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d119      	bne.n	8003404 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	015a      	lsls	r2, r3, #5
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033dc:	461a      	mov	r2, r3
 80033de:	2304      	movs	r3, #4
 80033e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	0151      	lsls	r1, r2, #5
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	440a      	add	r2, r1
 80033f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	60d3      	str	r3, [r2, #12]
 8003402:	e0ce      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003416:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800341a:	d12c      	bne.n	8003476 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003428:	461a      	mov	r2, r3
 800342a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800342e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68fa      	ldr	r2, [r7, #12]
 8003434:	4613      	mov	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	440b      	add	r3, r1
 800343e:	335d      	adds	r3, #93	; 0x5d
 8003440:	2207      	movs	r2, #7
 8003442:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	440a      	add	r2, r1
 800345a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800345e:	f043 0302 	orr.w	r3, r3, #2
 8003462:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f005 f86b 	bl	800854a <USB_HC_Halt>
 8003474:	e095      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4413      	add	r3, r2
 800347e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b20      	cmp	r3, #32
 800348a:	d109      	bne.n	80034a0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	461a      	mov	r2, r3
 800349a:	2320      	movs	r3, #32
 800349c:	6093      	str	r3, [r2, #8]
 800349e:	e080      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d134      	bne.n	8003520 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	0151      	lsls	r1, r2, #5
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	440a      	add	r2, r1
 80034cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034d0:	f043 0302 	orr.w	r3, r3, #2
 80034d4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	440b      	add	r3, r1
 80034e4:	335d      	adds	r3, #93	; 0x5d
 80034e6:	2205      	movs	r2, #5
 80034e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	015a      	lsls	r2, r3, #5
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	4413      	add	r3, r2
 80034f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034f6:	461a      	mov	r2, r3
 80034f8:	2310      	movs	r3, #16
 80034fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	461a      	mov	r2, r3
 800350a:	2308      	movs	r3, #8
 800350c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	4611      	mov	r1, r2
 8003518:	4618      	mov	r0, r3
 800351a:	f005 f816 	bl	800854a <USB_HC_Halt>
 800351e:	e040      	b.n	80035a2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003536:	d134      	bne.n	80035a2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4413      	add	r3, r2
 8003540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	0151      	lsls	r1, r2, #5
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	440a      	add	r2, r1
 800354e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003552:	f043 0302 	orr.w	r3, r3, #2
 8003556:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f004 fff1 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003574:	461a      	mov	r2, r3
 8003576:	2310      	movs	r3, #16
 8003578:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4613      	mov	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	440b      	add	r3, r1
 8003588:	335d      	adds	r3, #93	; 0x5d
 800358a:	2208      	movs	r2, #8
 800358c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4413      	add	r3, r2
 8003596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800359a:	461a      	mov	r2, r3
 800359c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035a0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035b8:	d122      	bne.n	8003600 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 ffb0 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	015a      	lsls	r2, r3, #5
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4413      	add	r3, r2
 80035f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f6:	461a      	mov	r2, r3
 80035f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035fc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80035fe:	e300      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4413      	add	r3, r2
 8003608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 80fd 	bne.w	8003812 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d01b      	beq.n	8003658 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4613      	mov	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	440b      	add	r3, r1
 800362e:	3348      	adds	r3, #72	; 0x48
 8003630:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0159      	lsls	r1, r3, #5
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	440b      	add	r3, r1
 800363a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003644:	1ad1      	subs	r1, r2, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	4403      	add	r3, r0
 8003654:	334c      	adds	r3, #76	; 0x4c
 8003656:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003658:	6879      	ldr	r1, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	440b      	add	r3, r1
 8003666:	335d      	adds	r3, #93	; 0x5d
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	440b      	add	r3, r1
 800367a:	3358      	adds	r3, #88	; 0x58
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	2301      	movs	r3, #1
 8003690:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	440b      	add	r3, r1
 80036a0:	333f      	adds	r3, #63	; 0x3f
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00a      	beq.n	80036be <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	333f      	adds	r3, #63	; 0x3f
 80036b8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d121      	bne.n	8003702 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	015a      	lsls	r2, r3, #5
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	4413      	add	r3, r2
 80036c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	0151      	lsls	r1, r2, #5
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	440a      	add	r2, r1
 80036d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 ff2e 	bl	800854a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	015a      	lsls	r2, r3, #5
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	4413      	add	r3, r2
 80036f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fa:	461a      	mov	r2, r3
 80036fc:	2310      	movs	r3, #16
 80036fe:	6093      	str	r3, [r2, #8]
 8003700:	e070      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	440b      	add	r3, r1
 8003710:	333f      	adds	r3, #63	; 0x3f
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b03      	cmp	r3, #3
 8003716:	d12a      	bne.n	800376e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003736:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	335c      	adds	r3, #92	; 0x5c
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	b2d8      	uxtb	r0, r3
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	440b      	add	r3, r1
 800375e:	335c      	adds	r3, #92	; 0x5c
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	4601      	mov	r1, r0
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f00a fd2a 	bl	800e1c0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800376c:	e03a      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	440b      	add	r3, r1
 800377c:	333f      	adds	r3, #63	; 0x3f
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d12f      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	440b      	add	r3, r1
 8003792:	335c      	adds	r3, #92	; 0x5c
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4613      	mov	r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	440b      	add	r3, r1
 80037a6:	3350      	adds	r3, #80	; 0x50
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	f083 0301 	eor.w	r3, r3, #1
 80037ae:	b2d8      	uxtb	r0, r3
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	3350      	adds	r3, #80	; 0x50
 80037c0:	4602      	mov	r2, r0
 80037c2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	b2d8      	uxtb	r0, r3
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	335c      	adds	r3, #92	; 0x5c
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	461a      	mov	r2, r3
 80037dc:	4601      	mov	r1, r0
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f00a fcee 	bl	800e1c0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	68fa      	ldr	r2, [r7, #12]
 80037e8:	4613      	mov	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	4413      	add	r3, r2
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	440b      	add	r3, r1
 80037f2:	3350      	adds	r3, #80	; 0x50
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	f083 0301 	eor.w	r3, r3, #1
 80037fa:	b2d8      	uxtb	r0, r3
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	3350      	adds	r3, #80	; 0x50
 800380c:	4602      	mov	r2, r0
 800380e:	701a      	strb	r2, [r3, #0]
}
 8003810:	e1f7      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4413      	add	r3, r2
 800381a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	f040 811a 	bne.w	8003a5e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4413      	add	r3, r2
 8003832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	440a      	add	r2, r1
 8003840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003844:	f023 0302 	bic.w	r3, r3, #2
 8003848:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	00db      	lsls	r3, r3, #3
 8003856:	440b      	add	r3, r1
 8003858:	335d      	adds	r3, #93	; 0x5d
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10a      	bne.n	8003876 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4613      	mov	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	440b      	add	r3, r1
 800386e:	335c      	adds	r3, #92	; 0x5c
 8003870:	2201      	movs	r2, #1
 8003872:	701a      	strb	r2, [r3, #0]
 8003874:	e0d9      	b.n	8003a2a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003876:	6879      	ldr	r1, [r7, #4]
 8003878:	68fa      	ldr	r2, [r7, #12]
 800387a:	4613      	mov	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4413      	add	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	440b      	add	r3, r1
 8003884:	335d      	adds	r3, #93	; 0x5d
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	2b05      	cmp	r3, #5
 800388a:	d10a      	bne.n	80038a2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	440b      	add	r3, r1
 800389a:	335c      	adds	r3, #92	; 0x5c
 800389c:	2205      	movs	r2, #5
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e0c3      	b.n	8003a2a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	440b      	add	r3, r1
 80038b0:	335d      	adds	r3, #93	; 0x5d
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d00a      	beq.n	80038ce <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80038b8:	6879      	ldr	r1, [r7, #4]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4613      	mov	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	440b      	add	r3, r1
 80038c6:	335d      	adds	r3, #93	; 0x5d
 80038c8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d156      	bne.n	800397c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	440b      	add	r3, r1
 80038dc:	3358      	adds	r3, #88	; 0x58
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	1c59      	adds	r1, r3, #1
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	4613      	mov	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	00db      	lsls	r3, r3, #3
 80038ee:	4403      	add	r3, r0
 80038f0:	3358      	adds	r3, #88	; 0x58
 80038f2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3358      	adds	r3, #88	; 0x58
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b03      	cmp	r3, #3
 8003908:	d914      	bls.n	8003934 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	3358      	adds	r3, #88	; 0x58
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800391e:	6879      	ldr	r1, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4613      	mov	r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	335c      	adds	r3, #92	; 0x5c
 800392e:	2204      	movs	r2, #4
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e009      	b.n	8003948 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	335c      	adds	r3, #92	; 0x5c
 8003944:	2202      	movs	r2, #2
 8003946:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800395e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003966:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	015a      	lsls	r2, r3, #5
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	4413      	add	r3, r2
 8003970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003974:	461a      	mov	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e056      	b.n	8003a2a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	335d      	adds	r3, #93	; 0x5d
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d123      	bne.n	80039da <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	440b      	add	r3, r1
 80039a0:	335c      	adds	r3, #92	; 0x5c
 80039a2:	2202      	movs	r2, #2
 80039a4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039bc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039c4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	015a      	lsls	r2, r3, #5
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	4413      	add	r3, r2
 80039ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d2:	461a      	mov	r2, r3
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	e027      	b.n	8003a2a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	440b      	add	r3, r1
 80039e8:	335d      	adds	r3, #93	; 0x5d
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b07      	cmp	r3, #7
 80039ee:	d11c      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4613      	mov	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	440b      	add	r3, r1
 80039fe:	3358      	adds	r3, #88	; 0x58
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	1c59      	adds	r1, r3, #1
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	4403      	add	r3, r0
 8003a12:	3358      	adds	r3, #88	; 0x58
 8003a14:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	440b      	add	r3, r1
 8003a24:	335c      	adds	r3, #92	; 0x5c
 8003a26:	2204      	movs	r2, #4
 8003a28:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2302      	movs	r3, #2
 8003a3a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	b2d8      	uxtb	r0, r3
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	440b      	add	r3, r1
 8003a4e:	335c      	adds	r3, #92	; 0x5c
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	461a      	mov	r2, r3
 8003a54:	4601      	mov	r1, r0
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f00a fbb2 	bl	800e1c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003a5c:	e0d1      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d13e      	bne.n	8003af2 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	0151      	lsls	r1, r2, #5
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	440a      	add	r2, r1
 8003a8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3358      	adds	r3, #88	; 0x58
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	1c59      	adds	r1, r3, #1
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	4403      	add	r3, r0
 8003ab6:	3358      	adds	r3, #88	; 0x58
 8003ab8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	335d      	adds	r3, #93	; 0x5d
 8003aca:	2206      	movs	r2, #6
 8003acc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 fd36 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aea:	461a      	mov	r2, r3
 8003aec:	2380      	movs	r3, #128	; 0x80
 8003aee:	6093      	str	r3, [r2, #8]
}
 8003af0:	e087      	b.n	8003c02 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b10      	cmp	r3, #16
 8003b06:	d17c      	bne.n	8003c02 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	440b      	add	r3, r1
 8003b16:	333f      	adds	r3, #63	; 0x3f
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b03      	cmp	r3, #3
 8003b1c:	d122      	bne.n	8003b64 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3358      	adds	r3, #88	; 0x58
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b4c:	f043 0302 	orr.w	r3, r3, #2
 8003b50:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f004 fcf4 	bl	800854a <USB_HC_Halt>
 8003b62:	e045      	b.n	8003bf0 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	440b      	add	r3, r1
 8003b72:	333f      	adds	r3, #63	; 0x3f
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	440b      	add	r3, r1
 8003b88:	333f      	adds	r3, #63	; 0x3f
 8003b8a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d12f      	bne.n	8003bf0 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	3358      	adds	r3, #88	; 0x58
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d121      	bne.n	8003bf0 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	440b      	add	r3, r1
 8003bba:	335d      	adds	r3, #93	; 0x5d
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	0151      	lsls	r1, r2, #5
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	440a      	add	r2, r1
 8003bd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bda:	f043 0302 	orr.w	r3, r3, #2
 8003bde:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f004 fcad 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	2310      	movs	r3, #16
 8003c00:	6093      	str	r3, [r2, #8]
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c20:	78fb      	ldrb	r3, [r7, #3]
 8003c22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d119      	bne.n	8003c6e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c46:	461a      	mov	r2, r3
 8003c48:	2304      	movs	r3, #4
 8003c4a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	015a      	lsls	r2, r3, #5
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	4413      	add	r3, r2
 8003c54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c66:	f043 0302 	orr.w	r3, r3, #2
 8003c6a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003c6c:	e33e      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b20      	cmp	r3, #32
 8003c82:	d141      	bne.n	8003d08 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	461a      	mov	r2, r3
 8003c92:	2320      	movs	r3, #32
 8003c94:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	333d      	adds	r3, #61	; 0x3d
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	f040 831f 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4413      	add	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	440b      	add	r3, r1
 8003cbc:	333d      	adds	r3, #61	; 0x3d
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	440b      	add	r3, r1
 8003cd0:	335c      	adds	r3, #92	; 0x5c
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	4611      	mov	r1, r2
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 fc22 	bl	800854a <USB_HC_Halt>
}
 8003d06:	e2f1      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d13f      	bne.n	8003d9e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	335d      	adds	r3, #93	; 0x5d
 8003d2e:	2204      	movs	r2, #4
 8003d30:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d32:	6879      	ldr	r1, [r7, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	440b      	add	r3, r1
 8003d40:	333d      	adds	r3, #61	; 0x3d
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d46:	6879      	ldr	r1, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	440b      	add	r3, r1
 8003d54:	3358      	adds	r3, #88	; 0x58
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 fbe0 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	015a      	lsls	r2, r3, #5
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d96:	461a      	mov	r2, r3
 8003d98:	2340      	movs	r3, #64	; 0x40
 8003d9a:	6093      	str	r3, [r2, #8]
}
 8003d9c:	e2a6      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003db4:	d122      	bne.n	8003dfc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	0151      	lsls	r1, r2, #5
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	440a      	add	r2, r1
 8003dcc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f004 fbb2 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df2:	461a      	mov	r2, r3
 8003df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003df8:	6093      	str	r3, [r2, #8]
}
 8003dfa:	e277      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d135      	bne.n	8003e7e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	4613      	mov	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4413      	add	r3, r2
 8003e1c:	00db      	lsls	r3, r3, #3
 8003e1e:	440b      	add	r3, r1
 8003e20:	3358      	adds	r3, #88	; 0x58
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	0151      	lsls	r1, r2, #5
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	440a      	add	r2, r1
 8003e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e40:	f043 0302 	orr.w	r3, r3, #2
 8003e44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f004 fb7a 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	461a      	mov	r2, r3
 8003e64:	2301      	movs	r3, #1
 8003e66:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	440b      	add	r3, r1
 8003e76:	335d      	adds	r3, #93	; 0x5d
 8003e78:	2201      	movs	r2, #1
 8003e7a:	701a      	strb	r2, [r3, #0]
}
 8003e7c:	e236      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d12b      	bne.n	8003eec <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	0151      	lsls	r1, r2, #5
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	440a      	add	r2, r1
 8003ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec0:	f043 0302 	orr.w	r3, r3, #2
 8003ec4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f004 fb3a 	bl	800854a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	4613      	mov	r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4413      	add	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	440b      	add	r3, r1
 8003ee4:	335d      	adds	r3, #93	; 0x5d
 8003ee6:	2205      	movs	r2, #5
 8003ee8:	701a      	strb	r2, [r3, #0]
}
 8003eea:	e1ff      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b10      	cmp	r3, #16
 8003f00:	d155      	bne.n	8003fae <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	440b      	add	r3, r1
 8003f10:	3358      	adds	r3, #88	; 0x58
 8003f12:	2200      	movs	r2, #0
 8003f14:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	440b      	add	r3, r1
 8003f24:	335d      	adds	r3, #93	; 0x5d
 8003f26:	2203      	movs	r2, #3
 8003f28:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	333d      	adds	r3, #61	; 0x3d
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d114      	bne.n	8003f6a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	4613      	mov	r3, r2
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	4413      	add	r3, r2
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	440b      	add	r3, r1
 8003f4e:	333c      	adds	r3, #60	; 0x3c
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	440b      	add	r3, r1
 8003f64:	333d      	adds	r3, #61	; 0x3d
 8003f66:	2201      	movs	r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	0151      	lsls	r1, r2, #5
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	440a      	add	r2, r1
 8003f80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f004 fad8 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2310      	movs	r3, #16
 8003faa:	6093      	str	r3, [r2, #8]
}
 8003fac:	e19e      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d12b      	bne.n	800401c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	0151      	lsls	r1, r2, #5
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	440a      	add	r2, r1
 8003fda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fde:	f043 0302 	orr.w	r3, r3, #2
 8003fe2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f004 faab 	bl	800854a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	335d      	adds	r3, #93	; 0x5d
 8004004:	2206      	movs	r2, #6
 8004006:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	461a      	mov	r2, r3
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	6093      	str	r3, [r2, #8]
}
 800401a:	e167      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800402e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004032:	d135      	bne.n	80040a0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	0151      	lsls	r1, r2, #5
 8004046:	693a      	ldr	r2, [r7, #16]
 8004048:	440a      	add	r2, r1
 800404a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f004 fa73 	bl	800854a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004070:	461a      	mov	r2, r3
 8004072:	2310      	movs	r3, #16
 8004074:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	4413      	add	r3, r2
 800407e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004082:	461a      	mov	r2, r3
 8004084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004088:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4613      	mov	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	440b      	add	r3, r1
 8004098:	335d      	adds	r3, #93	; 0x5d
 800409a:	2208      	movs	r2, #8
 800409c:	701a      	strb	r2, [r3, #0]
}
 800409e:	e125      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	f040 811a 	bne.w	80042ec <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040d2:	f023 0302 	bic.w	r3, r3, #2
 80040d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4613      	mov	r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	4413      	add	r3, r2
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	440b      	add	r3, r1
 80040e6:	335d      	adds	r3, #93	; 0x5d
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d137      	bne.n	800415e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335c      	adds	r3, #92	; 0x5c
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	333f      	adds	r3, #63	; 0x3f
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d00b      	beq.n	8004130 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	00db      	lsls	r3, r3, #3
 8004124:	440b      	add	r3, r1
 8004126:	333f      	adds	r3, #63	; 0x3f
 8004128:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800412a:	2b03      	cmp	r3, #3
 800412c:	f040 80c5 	bne.w	80042ba <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	440b      	add	r3, r1
 800413e:	3351      	adds	r3, #81	; 0x51
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	f083 0301 	eor.w	r3, r3, #1
 8004146:	b2d8      	uxtb	r0, r3
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	00db      	lsls	r3, r3, #3
 8004154:	440b      	add	r3, r1
 8004156:	3351      	adds	r3, #81	; 0x51
 8004158:	4602      	mov	r2, r0
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e0ad      	b.n	80042ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	440b      	add	r3, r1
 800416c:	335d      	adds	r3, #93	; 0x5d
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d10a      	bne.n	800418a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	440b      	add	r3, r1
 8004182:	335c      	adds	r3, #92	; 0x5c
 8004184:	2202      	movs	r2, #2
 8004186:	701a      	strb	r2, [r3, #0]
 8004188:	e097      	b.n	80042ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	440b      	add	r3, r1
 8004198:	335d      	adds	r3, #93	; 0x5d
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b04      	cmp	r3, #4
 800419e:	d10a      	bne.n	80041b6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	440b      	add	r3, r1
 80041ae:	335c      	adds	r3, #92	; 0x5c
 80041b0:	2202      	movs	r2, #2
 80041b2:	701a      	strb	r2, [r3, #0]
 80041b4:	e081      	b.n	80042ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	4613      	mov	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	440b      	add	r3, r1
 80041c4:	335d      	adds	r3, #93	; 0x5d
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b05      	cmp	r3, #5
 80041ca:	d10a      	bne.n	80041e2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	335c      	adds	r3, #92	; 0x5c
 80041dc:	2205      	movs	r2, #5
 80041de:	701a      	strb	r2, [r3, #0]
 80041e0:	e06b      	b.n	80042ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	00db      	lsls	r3, r3, #3
 80041ee:	440b      	add	r3, r1
 80041f0:	335d      	adds	r3, #93	; 0x5d
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b06      	cmp	r3, #6
 80041f6:	d00a      	beq.n	800420e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	440b      	add	r3, r1
 8004206:	335d      	adds	r3, #93	; 0x5d
 8004208:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800420a:	2b08      	cmp	r3, #8
 800420c:	d155      	bne.n	80042ba <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	440b      	add	r3, r1
 800421c:	3358      	adds	r3, #88	; 0x58
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	1c59      	adds	r1, r3, #1
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	4613      	mov	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4403      	add	r3, r0
 8004230:	3358      	adds	r3, #88	; 0x58
 8004232:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	3358      	adds	r3, #88	; 0x58
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d914      	bls.n	8004274 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	440b      	add	r3, r1
 8004258:	3358      	adds	r3, #88	; 0x58
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800425e:	6879      	ldr	r1, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	440b      	add	r3, r1
 800426c:	335c      	adds	r3, #92	; 0x5c
 800426e:	2204      	movs	r2, #4
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e009      	b.n	8004288 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	440b      	add	r3, r1
 8004282:	335c      	adds	r3, #92	; 0x5c
 8004284:	2202      	movs	r2, #2
 8004286:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800429e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b4:	461a      	mov	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042c6:	461a      	mov	r2, r3
 80042c8:	2302      	movs	r3, #2
 80042ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	b2d8      	uxtb	r0, r3
 80042d0:	6879      	ldr	r1, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	4601      	mov	r1, r0
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f009 ff6a 	bl	800e1c0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80042ec:	bf00      	nop
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	; 0x28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	0c5b      	lsrs	r3, r3, #17
 800431a:	f003 030f 	and.w	r3, r3, #15
 800431e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	091b      	lsrs	r3, r3, #4
 8004324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004328:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d003      	beq.n	8004338 <HCD_RXQLVL_IRQHandler+0x44>
 8004330:	2b05      	cmp	r3, #5
 8004332:	f000 8082 	beq.w	800443a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004336:	e083      	b.n	8004440 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d07f      	beq.n	800443e <HCD_RXQLVL_IRQHandler+0x14a>
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	3344      	adds	r3, #68	; 0x44
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d074      	beq.n	800443e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	440b      	add	r3, r1
 8004366:	3344      	adds	r3, #68	; 0x44
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	b292      	uxth	r2, r2
 800436e:	4619      	mov	r1, r3
 8004370:	f003 fc8b 	bl	8007c8a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004374:	6879      	ldr	r1, [r7, #4]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	440b      	add	r3, r1
 8004382:	3344      	adds	r3, #68	; 0x44
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	18d1      	adds	r1, r2, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4613      	mov	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4403      	add	r3, r0
 8004398:	3344      	adds	r3, #68	; 0x44
 800439a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800439c:	6879      	ldr	r1, [r7, #4]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4613      	mov	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4413      	add	r3, r2
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	440b      	add	r3, r1
 80043aa:	334c      	adds	r3, #76	; 0x4c
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	18d1      	adds	r1, r2, r3
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4613      	mov	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4413      	add	r3, r2
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4403      	add	r3, r0
 80043c0:	334c      	adds	r3, #76	; 0x4c
 80043c2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	4b1d      	ldr	r3, [pc, #116]	; (8004448 <HCD_RXQLVL_IRQHandler+0x154>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d031      	beq.n	800443e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043f0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	4413      	add	r3, r2
 8004402:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	440b      	add	r3, r1
 800441a:	3350      	adds	r3, #80	; 0x50
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	f083 0301 	eor.w	r3, r3, #1
 8004422:	b2d8      	uxtb	r0, r3
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	440b      	add	r3, r1
 8004432:	3350      	adds	r3, #80	; 0x50
 8004434:	4602      	mov	r2, r0
 8004436:	701a      	strb	r2, [r3, #0]
      break;
 8004438:	e001      	b.n	800443e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800443e:	bf00      	nop
  }
}
 8004440:	bf00      	nop
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	1ff80000 	.word	0x1ff80000

0800444c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004478:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b02      	cmp	r3, #2
 8004482:	d10b      	bne.n	800449c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f009 fe7a 	bl	800e188 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f043 0302 	orr.w	r3, r3, #2
 800449a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d132      	bne.n	800450c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f043 0308 	orr.w	r3, r3, #8
 80044ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b04      	cmp	r3, #4
 80044b6:	d126      	bne.n	8004506 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d113      	bne.n	80044e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80044c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80044ca:	d106      	bne.n	80044da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2102      	movs	r1, #2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f003 fd14 	bl	8007f00 <USB_InitFSLSPClkSel>
 80044d8:	e011      	b.n	80044fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f003 fd0d 	bl	8007f00 <USB_InitFSLSPClkSel>
 80044e6:	e00a      	b.n	80044fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d106      	bne.n	80044fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f6:	461a      	mov	r2, r3
 80044f8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f009 fe6c 	bl	800e1dc <HAL_HCD_PortEnabled_Callback>
 8004504:	e002      	b.n	800450c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f009 fe76 	bl	800e1f8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0320 	and.w	r3, r3, #32
 8004512:	2b20      	cmp	r3, #32
 8004514:	d103      	bne.n	800451e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f043 0320 	orr.w	r3, r3, #32
 800451c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004524:	461a      	mov	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6013      	str	r3, [r2, #0]
}
 800452a:	bf00      	nop
 800452c:	3718      	adds	r7, #24
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e11f      	b.n	8004786 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f7fd f868 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004586:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004596:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004598:	f002 fa4e 	bl	8006a38 <HAL_RCC_GetPCLK1Freq>
 800459c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	4a7b      	ldr	r2, [pc, #492]	; (8004790 <HAL_I2C_Init+0x25c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d807      	bhi.n	80045b8 <HAL_I2C_Init+0x84>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4a7a      	ldr	r2, [pc, #488]	; (8004794 <HAL_I2C_Init+0x260>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	bf94      	ite	ls
 80045b0:	2301      	movls	r3, #1
 80045b2:	2300      	movhi	r3, #0
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	e006      	b.n	80045c6 <HAL_I2C_Init+0x92>
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a77      	ldr	r2, [pc, #476]	; (8004798 <HAL_I2C_Init+0x264>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	bf94      	ite	ls
 80045c0:	2301      	movls	r3, #1
 80045c2:	2300      	movhi	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0db      	b.n	8004786 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4a72      	ldr	r2, [pc, #456]	; (800479c <HAL_I2C_Init+0x268>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	0c9b      	lsrs	r3, r3, #18
 80045d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a64      	ldr	r2, [pc, #400]	; (8004790 <HAL_I2C_Init+0x25c>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d802      	bhi.n	8004608 <HAL_I2C_Init+0xd4>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	3301      	adds	r3, #1
 8004606:	e009      	b.n	800461c <HAL_I2C_Init+0xe8>
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800460e:	fb02 f303 	mul.w	r3, r2, r3
 8004612:	4a63      	ldr	r2, [pc, #396]	; (80047a0 <HAL_I2C_Init+0x26c>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	3301      	adds	r3, #1
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	430b      	orrs	r3, r1
 8004622:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800462e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4956      	ldr	r1, [pc, #344]	; (8004790 <HAL_I2C_Init+0x25c>)
 8004638:	428b      	cmp	r3, r1
 800463a:	d80d      	bhi.n	8004658 <HAL_I2C_Init+0x124>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	1e59      	subs	r1, r3, #1
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fbb1 f3f3 	udiv	r3, r1, r3
 800464a:	3301      	adds	r3, #1
 800464c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004650:	2b04      	cmp	r3, #4
 8004652:	bf38      	it	cc
 8004654:	2304      	movcc	r3, #4
 8004656:	e04f      	b.n	80046f8 <HAL_I2C_Init+0x1c4>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d111      	bne.n	8004684 <HAL_I2C_Init+0x150>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	440b      	add	r3, r1
 800466e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e012      	b.n	80046aa <HAL_I2C_Init+0x176>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e58      	subs	r0, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	0099      	lsls	r1, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	fbb0 f3f3 	udiv	r3, r0, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_Init+0x17e>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e022      	b.n	80046f8 <HAL_I2C_Init+0x1c4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <HAL_I2C_Init+0x1a4>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1e58      	subs	r0, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	440b      	add	r3, r1
 80046c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	e00f      	b.n	80046f8 <HAL_I2C_Init+0x1c4>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	0099      	lsls	r1, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	6809      	ldr	r1, [r1, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6911      	ldr	r1, [r2, #16]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430b      	orrs	r3, r1
 800473a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	000186a0 	.word	0x000186a0
 8004794:	001e847f 	.word	0x001e847f
 8004798:	003d08ff 	.word	0x003d08ff
 800479c:	431bde83 	.word	0x431bde83
 80047a0:	10624dd3 	.word	0x10624dd3

080047a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	461a      	mov	r2, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	817b      	strh	r3, [r7, #10]
 80047b4:	4613      	mov	r3, r2
 80047b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fd fb46 	bl	8001e48 <HAL_GetTick>
 80047bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	f040 80e0 	bne.w	800498c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2319      	movs	r3, #25
 80047d2:	2201      	movs	r2, #1
 80047d4:	4970      	ldr	r1, [pc, #448]	; (8004998 <HAL_I2C_Master_Transmit+0x1f4>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fd84 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	e0d3      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2C_Master_Transmit+0x50>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e0cc      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ea>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d007      	beq.n	800481a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2221      	movs	r2, #33	; 0x21
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2210      	movs	r2, #16
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	893a      	ldrh	r2, [r7, #8]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a50      	ldr	r2, [pc, #320]	; (800499c <HAL_I2C_Master_Transmit+0x1f8>)
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800485c:	8979      	ldrh	r1, [r7, #10]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6a3a      	ldr	r2, [r7, #32]
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fbf0 	bl	8005048 <I2C_MasterRequestWrite>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e08d      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	613b      	str	r3, [r7, #16]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004888:	e066      	b.n	8004958 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488a:	697a      	ldr	r2, [r7, #20]
 800488c:	6a39      	ldr	r1, [r7, #32]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fdfe 	bl	8005490 <I2C_WaitOnTXEFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00d      	beq.n	80048b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d107      	bne.n	80048b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e06b      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	781a      	ldrb	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	3b01      	subs	r3, #1
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b04      	cmp	r3, #4
 80048f2:	d11b      	bne.n	800492c <HAL_I2C_Master_Transmit+0x188>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d017      	beq.n	800492c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	781a      	ldrb	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490c:	1c5a      	adds	r2, r3, #1
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004916:	b29b      	uxth	r3, r3
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004924:	3b01      	subs	r3, #1
 8004926:	b29a      	uxth	r2, r3
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	6a39      	ldr	r1, [r7, #32]
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 fdee 	bl	8005512 <I2C_WaitOnBTFFlagUntilTimeout>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	2b04      	cmp	r3, #4
 8004942:	d107      	bne.n	8004954 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004952:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e01a      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d194      	bne.n	800488a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800496e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3718      	adds	r7, #24
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	00100002 	.word	0x00100002
 800499c:	ffff0000 	.word	0xffff0000

080049a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	461a      	mov	r2, r3
 80049ac:	460b      	mov	r3, r1
 80049ae:	817b      	strh	r3, [r7, #10]
 80049b0:	4613      	mov	r3, r2
 80049b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049b4:	f7fd fa48 	bl	8001e48 <HAL_GetTick>
 80049b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b20      	cmp	r3, #32
 80049c4:	f040 820b 	bne.w	8004dde <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	2319      	movs	r3, #25
 80049ce:	2201      	movs	r2, #1
 80049d0:	497c      	ldr	r1, [pc, #496]	; (8004bc4 <HAL_I2C_Master_Receive+0x224>)
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 fc86 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80049de:	2302      	movs	r3, #2
 80049e0:	e1fe      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_I2C_Master_Receive+0x50>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e1f7      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d007      	beq.n	8004a16 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2222      	movs	r2, #34	; 0x22
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2210      	movs	r2, #16
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	893a      	ldrh	r2, [r7, #8]
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4a5c      	ldr	r2, [pc, #368]	; (8004bc8 <HAL_I2C_Master_Receive+0x228>)
 8004a56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004a58:	8979      	ldrh	r1, [r7, #10]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 fb74 	bl	800514c <I2C_MasterRequestRead>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e1b8      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d113      	bne.n	8004a9e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	695b      	ldr	r3, [r3, #20]
 8004a80:	623b      	str	r3, [r7, #32]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	623b      	str	r3, [r7, #32]
 8004a8a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	e18c      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d11b      	bne.n	8004ade <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	61fb      	str	r3, [r7, #28]
 8004aca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	e16c      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d11b      	bne.n	8004b1e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	61bb      	str	r3, [r7, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	e14c      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	617b      	str	r3, [r7, #20]
 8004b42:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b44:	e138      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	f200 80f1 	bhi.w	8004d32 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d123      	bne.n	8004ba0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fd19 	bl	8005594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e139      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691a      	ldr	r2, [r3, #16]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	b2d2      	uxtb	r2, r2
 8004b78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	3b01      	subs	r3, #1
 8004b98:	b29a      	uxth	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b9e:	e10b      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d14e      	bne.n	8004c46 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	9300      	str	r3, [sp, #0]
 8004bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bae:	2200      	movs	r2, #0
 8004bb0:	4906      	ldr	r1, [pc, #24]	; (8004bcc <HAL_I2C_Master_Receive+0x22c>)
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fb96 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e10e      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
 8004bc2:	bf00      	nop
 8004bc4:	00100002 	.word	0x00100002
 8004bc8:	ffff0000 	.word	0xffff0000
 8004bcc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	1c5a      	adds	r2, r3, #1
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691a      	ldr	r2, [r3, #16]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c44:	e0b8      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	9300      	str	r3, [sp, #0]
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	4966      	ldr	r1, [pc, #408]	; (8004de8 <HAL_I2C_Master_Receive+0x448>)
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 fb47 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d001      	beq.n	8004c60 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0bf      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	2200      	movs	r2, #0
 8004caa:	494f      	ldr	r1, [pc, #316]	; (8004de8 <HAL_I2C_Master_Receive+0x448>)
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 fb19 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e091      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	691a      	ldr	r2, [r3, #16]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d30:	e042      	b.n	8004db8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d36:	68f8      	ldr	r0, [r7, #12]
 8004d38:	f000 fc2c 	bl	8005594 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e04c      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d118      	bne.n	8004db8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f47f aec2 	bne.w	8004b46 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	e000      	b.n	8004de0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004dde:	2302      	movs	r3, #2
  }
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	; 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	00010004 	.word	0x00010004

08004dec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af02      	add	r7, sp, #8
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	607a      	str	r2, [r7, #4]
 8004df6:	603b      	str	r3, [r7, #0]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004dfc:	f7fd f824 	bl	8001e48 <HAL_GetTick>
 8004e00:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e02:	2301      	movs	r3, #1
 8004e04:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	f040 8110 	bne.w	8005034 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	2319      	movs	r3, #25
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4988      	ldr	r1, [pc, #544]	; (8005040 <HAL_I2C_IsDeviceReady+0x254>)
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 fa60 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d001      	beq.n	8004e2e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e103      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d101      	bne.n	8004e3c <HAL_I2C_IsDeviceReady+0x50>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e0fc      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d007      	beq.n	8004e62 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2224      	movs	r2, #36	; 0x24
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	4a70      	ldr	r2, [pc, #448]	; (8005044 <HAL_I2C_IsDeviceReady+0x258>)
 8004e84:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e94:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fa1e 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ec2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e0b6      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ec8:	897b      	ldrh	r3, [r7, #10]
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ed6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004ed8:	f7fc ffb6 	bl	8001e48 <HAL_GetTick>
 8004edc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b02      	cmp	r3, #2
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f0c:	e025      	b.n	8004f5a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fc ff9b 	bl	8001e48 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <HAL_I2C_IsDeviceReady+0x138>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	22a0      	movs	r2, #160	; 0xa0
 8004f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	bf0c      	ite	eq
 8004f52:	2301      	moveq	r3, #1
 8004f54:	2300      	movne	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2ba0      	cmp	r3, #160	; 0xa0
 8004f64:	d005      	beq.n	8004f72 <HAL_I2C_IsDeviceReady+0x186>
 8004f66:	7dfb      	ldrb	r3, [r7, #23]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d102      	bne.n	8004f72 <HAL_I2C_IsDeviceReady+0x186>
 8004f6c:	7dbb      	ldrb	r3, [r7, #22]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0cd      	beq.n	8004f0e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d129      	bne.n	8004fdc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f96:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f98:	2300      	movs	r3, #0
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	699b      	ldr	r3, [r3, #24]
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	2319      	movs	r3, #25
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	4922      	ldr	r1, [pc, #136]	; (8005040 <HAL_I2C_IsDeviceReady+0x254>)
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f993 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e036      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e02c      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fea:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ff4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	2319      	movs	r3, #25
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	4910      	ldr	r1, [pc, #64]	; (8005040 <HAL_I2C_IsDeviceReady+0x254>)
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f96f 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e012      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	3301      	adds	r3, #1
 8005014:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	429a      	cmp	r2, r3
 800501c:	f4ff af33 	bcc.w	8004e86 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e000      	b.n	8005036 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005034:	2302      	movs	r3, #2
  }
}
 8005036:	4618      	mov	r0, r3
 8005038:	3720      	adds	r7, #32
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	00100002 	.word	0x00100002
 8005044:	ffff0000 	.word	0xffff0000

08005048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af02      	add	r7, sp, #8
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	460b      	mov	r3, r1
 8005056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800505c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b08      	cmp	r3, #8
 8005062:	d006      	beq.n	8005072 <I2C_MasterRequestWrite+0x2a>
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d003      	beq.n	8005072 <I2C_MasterRequestWrite+0x2a>
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005070:	d108      	bne.n	8005084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	e00b      	b.n	800509c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	2b12      	cmp	r3, #18
 800508a:	d107      	bne.n	800509c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f91b 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00c      	beq.n	80050ce <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d003      	beq.n	80050ca <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e035      	b.n	800513a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d6:	d108      	bne.n	80050ea <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050e6:	611a      	str	r2, [r3, #16]
 80050e8:	e01b      	b.n	8005122 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050ea:	897b      	ldrh	r3, [r7, #10]
 80050ec:	11db      	asrs	r3, r3, #7
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 0306 	and.w	r3, r3, #6
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f063 030f 	orn	r3, r3, #15
 80050fa:	b2da      	uxtb	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	490f      	ldr	r1, [pc, #60]	; (8005144 <I2C_MasterRequestWrite+0xfc>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f942 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e010      	b.n	800513a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005118:	897b      	ldrh	r3, [r7, #10]
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	4908      	ldr	r1, [pc, #32]	; (8005148 <I2C_MasterRequestWrite+0x100>)
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f932 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e000      	b.n	800513a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	00010008 	.word	0x00010008
 8005148:	00010002 	.word	0x00010002

0800514c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b088      	sub	sp, #32
 8005150:	af02      	add	r7, sp, #8
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	460b      	mov	r3, r1
 800515a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005160:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005170:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d006      	beq.n	8005186 <I2C_MasterRequestRead+0x3a>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d003      	beq.n	8005186 <I2C_MasterRequestRead+0x3a>
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005184:	d108      	bne.n	8005198 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e00b      	b.n	80051b0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800519c:	2b11      	cmp	r3, #17
 800519e:	d107      	bne.n	80051b0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f000 f891 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e078      	b.n	80052d4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051ea:	d108      	bne.n	80051fe <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80051ec:	897b      	ldrh	r3, [r7, #10]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f043 0301 	orr.w	r3, r3, #1
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	611a      	str	r2, [r3, #16]
 80051fc:	e05e      	b.n	80052bc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80051fe:	897b      	ldrh	r3, [r7, #10]
 8005200:	11db      	asrs	r3, r3, #7
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0306 	and.w	r3, r3, #6
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f063 030f 	orn	r3, r3, #15
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	4930      	ldr	r1, [pc, #192]	; (80052dc <I2C_MasterRequestRead+0x190>)
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f000 f8b8 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e053      	b.n	80052d4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800522c:	897b      	ldrh	r3, [r7, #10]
 800522e:	b2da      	uxtb	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	4929      	ldr	r1, [pc, #164]	; (80052e0 <I2C_MasterRequestRead+0x194>)
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f8a8 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d001      	beq.n	800524c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e043      	b.n	80052d4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	613b      	str	r3, [r7, #16]
 8005260:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005270:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 f830 	bl	80052e4 <I2C_WaitOnFlagUntilTimeout>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800529e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e017      	b.n	80052d4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80052a4:	897b      	ldrh	r3, [r7, #10]
 80052a6:	11db      	asrs	r3, r3, #7
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	f003 0306 	and.w	r3, r3, #6
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f063 030e 	orn	r3, r3, #14
 80052b4:	b2da      	uxtb	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	4907      	ldr	r1, [pc, #28]	; (80052e0 <I2C_MasterRequestRead+0x194>)
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f865 	bl	8005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3718      	adds	r7, #24
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	00010008 	.word	0x00010008
 80052e0:	00010002 	.word	0x00010002

080052e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052f4:	e025      	b.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fc:	d021      	beq.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fe:	f7fc fda3 	bl	8001e48 <HAL_GetTick>
 8005302:	4602      	mov	r2, r0
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d302      	bcc.n	8005314 <I2C_WaitOnFlagUntilTimeout+0x30>
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d116      	bne.n	8005342 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	f043 0220 	orr.w	r2, r3, #32
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e023      	b.n	800538a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	0c1b      	lsrs	r3, r3, #16
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b01      	cmp	r3, #1
 800534a:	d10d      	bne.n	8005368 <I2C_WaitOnFlagUntilTimeout+0x84>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	43da      	mvns	r2, r3
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4013      	ands	r3, r2
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	461a      	mov	r2, r3
 8005366:	e00c      	b.n	8005382 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	43da      	mvns	r2, r3
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4013      	ands	r3, r2
 8005374:	b29b      	uxth	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	bf0c      	ite	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	2300      	movne	r3, #0
 800537e:	b2db      	uxtb	r3, r3
 8005380:	461a      	mov	r2, r3
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	429a      	cmp	r2, r3
 8005386:	d0b6      	beq.n	80052f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
 800539e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053a0:	e051      	b.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b0:	d123      	bne.n	80053fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80053ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f043 0204 	orr.w	r2, r3, #4
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e046      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d021      	beq.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005402:	f7fc fd21 	bl	8001e48 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	429a      	cmp	r2, r3
 8005410:	d302      	bcc.n	8005418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e020      	b.n	8005488 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b01      	cmp	r3, #1
 800544e:	d10c      	bne.n	800546a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	43da      	mvns	r2, r3
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	bf14      	ite	ne
 8005462:	2301      	movne	r3, #1
 8005464:	2300      	moveq	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	e00b      	b.n	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf14      	ite	ne
 800547c:	2301      	movne	r3, #1
 800547e:	2300      	moveq	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d18d      	bne.n	80053a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3710      	adds	r7, #16
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800549c:	e02d      	b.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 f8ce 	bl	8005640 <I2C_IsAcknowledgeFailed>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e02d      	b.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d021      	beq.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b6:	f7fc fcc7 	bl	8001e48 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d302      	bcc.n	80054cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d116      	bne.n	80054fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0220 	orr.w	r2, r3, #32
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e007      	b.n	800550a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d1ca      	bne.n	800549e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	60f8      	str	r0, [r7, #12]
 800551a:	60b9      	str	r1, [r7, #8]
 800551c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800551e:	e02d      	b.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f000 f88d 	bl	8005640 <I2C_IsAcknowledgeFailed>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d001      	beq.n	8005530 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e02d      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	d021      	beq.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005538:	f7fc fc86 	bl	8001e48 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	429a      	cmp	r2, r3
 8005546:	d302      	bcc.n	800554e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d116      	bne.n	800557c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2220      	movs	r2, #32
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005568:	f043 0220 	orr.w	r2, r3, #32
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e007      	b.n	800558c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b04      	cmp	r3, #4
 8005588:	d1ca      	bne.n	8005520 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b084      	sub	sp, #16
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80055a0:	e042      	b.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b10      	cmp	r3, #16
 80055ae:	d119      	bne.n	80055e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0210 	mvn.w	r2, #16
 80055b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e029      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e4:	f7fc fc30 	bl	8001e48 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d302      	bcc.n	80055fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d116      	bne.n	8005628 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e007      	b.n	8005638 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b40      	cmp	r3, #64	; 0x40
 8005634:	d1b5      	bne.n	80055a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d11b      	bne.n	8005690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567c:	f043 0204 	orr.w	r2, r3, #4
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e000      	b.n	8005692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	370c      	adds	r7, #12
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b088      	sub	sp, #32
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e128      	b.n	8005904 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d109      	bne.n	80056d2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a90      	ldr	r2, [pc, #576]	; (800590c <HAL_I2S_Init+0x26c>)
 80056ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f7fc f83d 	bl	800174c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2202      	movs	r2, #2
 80056d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	6812      	ldr	r2, [r2, #0]
 80056e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80056e8:	f023 030f 	bic.w	r3, r3, #15
 80056ec:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	2202      	movs	r2, #2
 80056f4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d060      	beq.n	80057c0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005706:	2310      	movs	r3, #16
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	e001      	b.n	8005710 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800570c:	2320      	movs	r3, #32
 800570e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b20      	cmp	r3, #32
 8005716:	d802      	bhi.n	800571e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	005b      	lsls	r3, r3, #1
 800571c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800571e:	2001      	movs	r0, #1
 8005720:	f001 fad0 	bl	8006cc4 <HAL_RCCEx_GetPeriphCLKFreq>
 8005724:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800572e:	d125      	bne.n	800577c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d010      	beq.n	800575a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005742:	4613      	mov	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4413      	add	r3, r2
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	461a      	mov	r2, r3
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	3305      	adds	r3, #5
 8005756:	613b      	str	r3, [r7, #16]
 8005758:	e01f      	b.n	800579a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	fbb2 f2f3 	udiv	r2, r2, r3
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	461a      	mov	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	3305      	adds	r3, #5
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	e00e      	b.n	800579a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	fbb2 f2f3 	udiv	r2, r2, r3
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	461a      	mov	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	fbb2 f3f3 	udiv	r3, r2, r3
 8005796:	3305      	adds	r3, #5
 8005798:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4a5c      	ldr	r2, [pc, #368]	; (8005910 <HAL_I2S_Init+0x270>)
 800579e:	fba2 2303 	umull	r2, r3, r2, r3
 80057a2:	08db      	lsrs	r3, r3, #3
 80057a4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	f003 0301 	and.w	r3, r3, #1
 80057ac:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	e003      	b.n	80057c8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80057c0:	2302      	movs	r3, #2
 80057c2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d902      	bls.n	80057d4 <HAL_I2S_Init+0x134>
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	2bff      	cmp	r3, #255	; 0xff
 80057d2:	d907      	bls.n	80057e4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	f043 0210 	orr.w	r2, r3, #16
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e08f      	b.n	8005904 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	ea42 0103 	orr.w	r1, r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69fa      	ldr	r2, [r7, #28]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005802:	f023 030f 	bic.w	r3, r3, #15
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6851      	ldr	r1, [r2, #4]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	4311      	orrs	r1, r2
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68d2      	ldr	r2, [r2, #12]
 8005814:	4311      	orrs	r1, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6992      	ldr	r2, [r2, #24]
 800581a:	430a      	orrs	r2, r1
 800581c:	431a      	orrs	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005826:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d161      	bne.n	80058f4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a38      	ldr	r2, [pc, #224]	; (8005914 <HAL_I2S_Init+0x274>)
 8005834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a37      	ldr	r2, [pc, #220]	; (8005918 <HAL_I2S_Init+0x278>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d101      	bne.n	8005844 <HAL_I2S_Init+0x1a4>
 8005840:	4b36      	ldr	r3, [pc, #216]	; (800591c <HAL_I2S_Init+0x27c>)
 8005842:	e001      	b.n	8005848 <HAL_I2S_Init+0x1a8>
 8005844:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6812      	ldr	r2, [r2, #0]
 800584e:	4932      	ldr	r1, [pc, #200]	; (8005918 <HAL_I2S_Init+0x278>)
 8005850:	428a      	cmp	r2, r1
 8005852:	d101      	bne.n	8005858 <HAL_I2S_Init+0x1b8>
 8005854:	4a31      	ldr	r2, [pc, #196]	; (800591c <HAL_I2S_Init+0x27c>)
 8005856:	e001      	b.n	800585c <HAL_I2S_Init+0x1bc>
 8005858:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800585c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005860:	f023 030f 	bic.w	r3, r3, #15
 8005864:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a2b      	ldr	r2, [pc, #172]	; (8005918 <HAL_I2S_Init+0x278>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d101      	bne.n	8005874 <HAL_I2S_Init+0x1d4>
 8005870:	4b2a      	ldr	r3, [pc, #168]	; (800591c <HAL_I2S_Init+0x27c>)
 8005872:	e001      	b.n	8005878 <HAL_I2S_Init+0x1d8>
 8005874:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005878:	2202      	movs	r2, #2
 800587a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a25      	ldr	r2, [pc, #148]	; (8005918 <HAL_I2S_Init+0x278>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_I2S_Init+0x1ea>
 8005886:	4b25      	ldr	r3, [pc, #148]	; (800591c <HAL_I2S_Init+0x27c>)
 8005888:	e001      	b.n	800588e <HAL_I2S_Init+0x1ee>
 800588a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800589a:	d003      	beq.n	80058a4 <HAL_I2S_Init+0x204>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80058a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	e001      	b.n	80058b0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80058ac:	2300      	movs	r3, #0
 80058ae:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	b299      	uxth	r1, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80058c6:	4303      	orrs	r3, r0
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	430b      	orrs	r3, r1
 80058cc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80058ce:	4313      	orrs	r3, r2
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	897b      	ldrh	r3, [r7, #10]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058dc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <HAL_I2S_Init+0x278>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_I2S_Init+0x24c>
 80058e8:	4b0c      	ldr	r3, [pc, #48]	; (800591c <HAL_I2S_Init+0x27c>)
 80058ea:	e001      	b.n	80058f0 <HAL_I2S_Init+0x250>
 80058ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058f0:	897a      	ldrh	r2, [r7, #10]
 80058f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08005bfd 	.word	0x08005bfd
 8005910:	cccccccd 	.word	0xcccccccd
 8005914:	08005d11 	.word	0x08005d11
 8005918:	40003800 	.word	0x40003800
 800591c:	40003400 	.word	0x40003400

08005920 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <HAL_I2S_Transmit_DMA+0x1a>
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e08e      	b.n	8005a5c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_I2S_Transmit_DMA+0x2e>
 800594a:	2302      	movs	r3, #2
 800594c:	e086      	b.n	8005a5c <HAL_I2S_Transmit_DMA+0x13c>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b01      	cmp	r3, #1
 8005960:	d005      	beq.n	800596e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	e076      	b.n	8005a5c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2203      	movs	r2, #3
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d002      	beq.n	800599a <HAL_I2S_Transmit_DMA+0x7a>
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b05      	cmp	r3, #5
 8005998:	d10a      	bne.n	80059b0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 800599a:	88fb      	ldrh	r3, [r7, #6]
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059ae:	e005      	b.n	80059bc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	88fa      	ldrh	r2, [r7, #6]
 80059b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	88fa      	ldrh	r2, [r7, #6]
 80059ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	4a28      	ldr	r2, [pc, #160]	; (8005a64 <HAL_I2S_Transmit_DMA+0x144>)
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	4a27      	ldr	r2, [pc, #156]	; (8005a68 <HAL_I2S_Transmit_DMA+0x148>)
 80059ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	4a26      	ldr	r2, [pc, #152]	; (8005a6c <HAL_I2S_Transmit_DMA+0x14c>)
 80059d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059dc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059e4:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80059ec:	f7fc fc1a 	bl	8002224 <HAL_DMA_Start_IT>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00f      	beq.n	8005a16 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059fa:	f043 0208 	orr.w	r2, r3, #8
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e022      	b.n	8005a5c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	69db      	ldr	r3, [r3, #28]
 8005a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d107      	bne.n	8005a34 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005a32:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d107      	bne.n	8005a52 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 0202 	orr.w	r2, r2, #2
 8005a50:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3718      	adds	r7, #24
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	08005adb 	.word	0x08005adb
 8005a68:	08005a99 	.word	0x08005a99
 8005a6c:	08005af7 	.word	0x08005af7

08005a70 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005a78:	bf00      	nop
 8005a7a:	370c      	adds	r7, #12
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10e      	bne.n	8005acc <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0202 	bic.w	r2, r2, #2
 8005abc:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7fb f869 	bl	8000ba4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7fb f86d 	bl	8000bc8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0203 	bic.w	r2, r2, #3
 8005b12:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b2c:	f043 0208 	orr.w	r2, r3, #8
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff ffa5 	bl	8005a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b082      	sub	sp, #8
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10e      	bne.n	8005b96 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7fb f807 	bl	8000ba4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b082      	sub	sp, #8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	1c9a      	adds	r2, r3, #2
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10e      	bne.n	8005bf4 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005be4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff ff3e 	bl	8005a70 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005bf4:	bf00      	nop
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	d13a      	bne.n	8005c8e <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d109      	bne.n	8005c36 <I2S_IRQHandler+0x3a>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b40      	cmp	r3, #64	; 0x40
 8005c2e:	d102      	bne.n	8005c36 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ffb4 	bl	8005b9e <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3c:	2b40      	cmp	r3, #64	; 0x40
 8005c3e:	d126      	bne.n	8005c8e <I2S_IRQHandler+0x92>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d11f      	bne.n	8005c8e <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c5c:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c5e:	2300      	movs	r3, #0
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	613b      	str	r3, [r7, #16]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c80:	f043 0202 	orr.w	r2, r3, #2
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f7ff fefb 	bl	8005a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d136      	bne.n	8005d08 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d109      	bne.n	8005cb8 <I2S_IRQHandler+0xbc>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cae:	2b80      	cmp	r3, #128	; 0x80
 8005cb0:	d102      	bne.n	8005cb8 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff ff45 	bl	8005b42 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f003 0308 	and.w	r3, r3, #8
 8005cbe:	2b08      	cmp	r3, #8
 8005cc0:	d122      	bne.n	8005d08 <I2S_IRQHandler+0x10c>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d11b      	bne.n	8005d08 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cde:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfa:	f043 0204 	orr.w	r2, r3, #4
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7ff febe 	bl	8005a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d08:	bf00      	nop
 8005d0a:	3718      	adds	r7, #24
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b088      	sub	sp, #32
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4aa2      	ldr	r2, [pc, #648]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005d2a:	4ba2      	ldr	r3, [pc, #648]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d2c:	e001      	b.n	8005d32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a9b      	ldr	r2, [pc, #620]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005d48:	4b9a      	ldr	r3, [pc, #616]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d4a:	e001      	b.n	8005d50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005d4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5c:	d004      	beq.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 8099 	bne.w	8005e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d107      	bne.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f925 	bl	8005fcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d002      	beq.n	8005d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f9c8 	bl	800612c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da2:	2b40      	cmp	r3, #64	; 0x40
 8005da4:	d13a      	bne.n	8005e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d035      	beq.n	8005e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a7e      	ldr	r2, [pc, #504]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d101      	bne.n	8005dbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005dba:	4b7e      	ldr	r3, [pc, #504]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dbc:	e001      	b.n	8005dc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc2:	685a      	ldr	r2, [r3, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4979      	ldr	r1, [pc, #484]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dca:	428b      	cmp	r3, r1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005dce:	4b79      	ldr	r3, [pc, #484]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dd0:	e001      	b.n	8005dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005dea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60fb      	str	r3, [r7, #12]
 8005e00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0e:	f043 0202 	orr.w	r2, r3, #2
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7ff fe34 	bl	8005a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b08      	cmp	r3, #8
 8005e24:	f040 80be 	bne.w	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f003 0320 	and.w	r3, r3, #32
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80b8 	beq.w	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a59      	ldr	r2, [pc, #356]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d101      	bne.n	8005e52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005e4e:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e50:	e001      	b.n	8005e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4954      	ldr	r1, [pc, #336]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e5e:	428b      	cmp	r3, r1
 8005e60:	d101      	bne.n	8005e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e62:	4b54      	ldr	r3, [pc, #336]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e64:	e001      	b.n	8005e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e70:	2300      	movs	r3, #0
 8005e72:	60bb      	str	r3, [r7, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f043 0204 	orr.w	r2, r3, #4
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fdf6 	bl	8005a84 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e98:	e084      	b.n	8005fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d107      	bne.n	8005eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8be 	bl	8006030 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f003 0301 	and.w	r3, r3, #1
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f8fd 	bl	80060c8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ece:	69fb      	ldr	r3, [r7, #28]
 8005ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed4:	2b40      	cmp	r3, #64	; 0x40
 8005ed6:	d12f      	bne.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d02a      	beq.n	8005f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ef0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d101      	bne.n	8005f00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005efc:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005efe:	e001      	b.n	8005f04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4929      	ldr	r1, [pc, #164]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f0c:	428b      	cmp	r3, r1
 8005f0e:	d101      	bne.n	8005f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f10:	4b28      	ldr	r3, [pc, #160]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f12:	e001      	b.n	8005f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2a:	f043 0202 	orr.w	r2, r3, #2
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7ff fda6 	bl	8005a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d131      	bne.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f003 0320 	and.w	r3, r3, #32
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02c      	beq.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a17      	ldr	r2, [pc, #92]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d101      	bne.n	8005f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005f56:	4b17      	ldr	r3, [pc, #92]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f58:	e001      	b.n	8005f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005f5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4912      	ldr	r1, [pc, #72]	; (8005fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f66:	428b      	cmp	r3, r1
 8005f68:	d101      	bne.n	8005f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f6c:	e001      	b.n	8005f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005f6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff fd71 	bl	8005a84 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa2:	e000      	b.n	8005fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005fa4:	bf00      	nop
}
 8005fa6:	bf00      	nop
 8005fa8:	3720      	adds	r7, #32
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40003800 	.word	0x40003800
 8005fb4:	40003400 	.word	0x40003400

08005fb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	1c99      	adds	r1, r3, #2
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	6251      	str	r1, [r2, #36]	; 0x24
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29a      	uxth	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d113      	bne.n	8006026 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800600c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff ffc9 	bl	8005fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b082      	sub	sp, #8
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603c:	1c99      	adds	r1, r3, #2
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6251      	str	r1, [r2, #36]	; 0x24
 8006042:	8819      	ldrh	r1, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1d      	ldr	r2, [pc, #116]	; (80060c0 <I2SEx_TxISR_I2SExt+0x90>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <I2SEx_TxISR_I2SExt+0x22>
 800604e:	4b1d      	ldr	r3, [pc, #116]	; (80060c4 <I2SEx_TxISR_I2SExt+0x94>)
 8006050:	e001      	b.n	8006056 <I2SEx_TxISR_I2SExt+0x26>
 8006052:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006056:	460a      	mov	r2, r1
 8006058:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606c:	b29b      	uxth	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d121      	bne.n	80060b6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a12      	ldr	r2, [pc, #72]	; (80060c0 <I2SEx_TxISR_I2SExt+0x90>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d101      	bne.n	8006080 <I2SEx_TxISR_I2SExt+0x50>
 800607c:	4b11      	ldr	r3, [pc, #68]	; (80060c4 <I2SEx_TxISR_I2SExt+0x94>)
 800607e:	e001      	b.n	8006084 <I2SEx_TxISR_I2SExt+0x54>
 8006080:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	490d      	ldr	r1, [pc, #52]	; (80060c0 <I2SEx_TxISR_I2SExt+0x90>)
 800608c:	428b      	cmp	r3, r1
 800608e:	d101      	bne.n	8006094 <I2SEx_TxISR_I2SExt+0x64>
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <I2SEx_TxISR_I2SExt+0x94>)
 8006092:	e001      	b.n	8006098 <I2SEx_TxISR_I2SExt+0x68>
 8006094:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006098:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800609c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f7ff ff81 	bl	8005fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	40003800 	.word	0x40003800
 80060c4:	40003400 	.word	0x40003400

080060c8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68d8      	ldr	r0, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060da:	1c99      	adds	r1, r3, #2
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060e0:	b282      	uxth	r2, r0
 80060e2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060f6:	b29b      	uxth	r3, r3
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d113      	bne.n	8006124 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800610a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006110:	b29b      	uxth	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff ff4a 	bl	8005fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006124:	bf00      	nop
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a20      	ldr	r2, [pc, #128]	; (80061bc <I2SEx_RxISR_I2SExt+0x90>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d101      	bne.n	8006142 <I2SEx_RxISR_I2SExt+0x16>
 800613e:	4b20      	ldr	r3, [pc, #128]	; (80061c0 <I2SEx_RxISR_I2SExt+0x94>)
 8006140:	e001      	b.n	8006146 <I2SEx_RxISR_I2SExt+0x1a>
 8006142:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006146:	68d8      	ldr	r0, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	1c99      	adds	r1, r3, #2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006152:	b282      	uxth	r2, r0
 8006154:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800615a:	b29b      	uxth	r3, r3
 800615c:	3b01      	subs	r3, #1
 800615e:	b29a      	uxth	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006168:	b29b      	uxth	r3, r3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d121      	bne.n	80061b2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a12      	ldr	r2, [pc, #72]	; (80061bc <I2SEx_RxISR_I2SExt+0x90>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <I2SEx_RxISR_I2SExt+0x50>
 8006178:	4b11      	ldr	r3, [pc, #68]	; (80061c0 <I2SEx_RxISR_I2SExt+0x94>)
 800617a:	e001      	b.n	8006180 <I2SEx_RxISR_I2SExt+0x54>
 800617c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006180:	685a      	ldr	r2, [r3, #4]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	490d      	ldr	r1, [pc, #52]	; (80061bc <I2SEx_RxISR_I2SExt+0x90>)
 8006188:	428b      	cmp	r3, r1
 800618a:	d101      	bne.n	8006190 <I2SEx_RxISR_I2SExt+0x64>
 800618c:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <I2SEx_RxISR_I2SExt+0x94>)
 800618e:	e001      	b.n	8006194 <I2SEx_RxISR_I2SExt+0x68>
 8006190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006194:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006198:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619e:	b29b      	uxth	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d106      	bne.n	80061b2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff ff03 	bl	8005fb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061b2:	bf00      	nop
 80061b4:	3708      	adds	r7, #8
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	40003800 	.word	0x40003800
 80061c0:	40003400 	.word	0x40003400

080061c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b086      	sub	sp, #24
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e25b      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d075      	beq.n	80062ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061e2:	4ba3      	ldr	r3, [pc, #652]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 030c 	and.w	r3, r3, #12
 80061ea:	2b04      	cmp	r3, #4
 80061ec:	d00c      	beq.n	8006208 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061ee:	4ba0      	ldr	r3, [pc, #640]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80061f6:	2b08      	cmp	r3, #8
 80061f8:	d112      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061fa:	4b9d      	ldr	r3, [pc, #628]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006206:	d10b      	bne.n	8006220 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006208:	4b99      	ldr	r3, [pc, #612]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006210:	2b00      	cmp	r3, #0
 8006212:	d05b      	beq.n	80062cc <HAL_RCC_OscConfig+0x108>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d157      	bne.n	80062cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e236      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006228:	d106      	bne.n	8006238 <HAL_RCC_OscConfig+0x74>
 800622a:	4b91      	ldr	r3, [pc, #580]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a90      	ldr	r2, [pc, #576]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006234:	6013      	str	r3, [r2, #0]
 8006236:	e01d      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006240:	d10c      	bne.n	800625c <HAL_RCC_OscConfig+0x98>
 8006242:	4b8b      	ldr	r3, [pc, #556]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a8a      	ldr	r2, [pc, #552]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006248:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	4b88      	ldr	r3, [pc, #544]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a87      	ldr	r2, [pc, #540]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006254:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e00b      	b.n	8006274 <HAL_RCC_OscConfig+0xb0>
 800625c:	4b84      	ldr	r3, [pc, #528]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a83      	ldr	r2, [pc, #524]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	4b81      	ldr	r3, [pc, #516]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a80      	ldr	r2, [pc, #512]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 800626e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d013      	beq.n	80062a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fb fde4 	bl	8001e48 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006284:	f7fb fde0 	bl	8001e48 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b64      	cmp	r3, #100	; 0x64
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e1fb      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b76      	ldr	r3, [pc, #472]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0f0      	beq.n	8006284 <HAL_RCC_OscConfig+0xc0>
 80062a2:	e014      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a4:	f7fb fdd0 	bl	8001e48 <HAL_GetTick>
 80062a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062aa:	e008      	b.n	80062be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062ac:	f7fb fdcc 	bl	8001e48 <HAL_GetTick>
 80062b0:	4602      	mov	r2, r0
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	2b64      	cmp	r3, #100	; 0x64
 80062b8:	d901      	bls.n	80062be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e1e7      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062be:	4b6c      	ldr	r3, [pc, #432]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d1f0      	bne.n	80062ac <HAL_RCC_OscConfig+0xe8>
 80062ca:	e000      	b.n	80062ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d063      	beq.n	80063a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062da:	4b65      	ldr	r3, [pc, #404]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00b      	beq.n	80062fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062e6:	4b62      	ldr	r3, [pc, #392]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d11c      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062f2:	4b5f      	ldr	r3, [pc, #380]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d116      	bne.n	800632c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062fe:	4b5c      	ldr	r3, [pc, #368]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d005      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	2b01      	cmp	r3, #1
 8006310:	d001      	beq.n	8006316 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e1bb      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006316:	4b56      	ldr	r3, [pc, #344]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4952      	ldr	r1, [pc, #328]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006326:	4313      	orrs	r3, r2
 8006328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800632a:	e03a      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006334:	4b4f      	ldr	r3, [pc, #316]	; (8006474 <HAL_RCC_OscConfig+0x2b0>)
 8006336:	2201      	movs	r2, #1
 8006338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800633a:	f7fb fd85 	bl	8001e48 <HAL_GetTick>
 800633e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006340:	e008      	b.n	8006354 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006342:	f7fb fd81 	bl	8001e48 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	2b02      	cmp	r3, #2
 800634e:	d901      	bls.n	8006354 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e19c      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006354:	4b46      	ldr	r3, [pc, #280]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0302 	and.w	r3, r3, #2
 800635c:	2b00      	cmp	r3, #0
 800635e:	d0f0      	beq.n	8006342 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006360:	4b43      	ldr	r3, [pc, #268]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	4940      	ldr	r1, [pc, #256]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006370:	4313      	orrs	r3, r2
 8006372:	600b      	str	r3, [r1, #0]
 8006374:	e015      	b.n	80063a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006376:	4b3f      	ldr	r3, [pc, #252]	; (8006474 <HAL_RCC_OscConfig+0x2b0>)
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637c:	f7fb fd64 	bl	8001e48 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006384:	f7fb fd60 	bl	8001e48 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b02      	cmp	r3, #2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e17b      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	4b36      	ldr	r3, [pc, #216]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1f0      	bne.n	8006384 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d030      	beq.n	8006410 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063b6:	4b30      	ldr	r3, [pc, #192]	; (8006478 <HAL_RCC_OscConfig+0x2b4>)
 80063b8:	2201      	movs	r2, #1
 80063ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063bc:	f7fb fd44 	bl	8001e48 <HAL_GetTick>
 80063c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063c4:	f7fb fd40 	bl	8001e48 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e15b      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063d6:	4b26      	ldr	r3, [pc, #152]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	f003 0302 	and.w	r3, r3, #2
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x200>
 80063e2:	e015      	b.n	8006410 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063e4:	4b24      	ldr	r3, [pc, #144]	; (8006478 <HAL_RCC_OscConfig+0x2b4>)
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063ea:	f7fb fd2d 	bl	8001e48 <HAL_GetTick>
 80063ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063f0:	e008      	b.n	8006404 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063f2:	f7fb fd29 	bl	8001e48 <HAL_GetTick>
 80063f6:	4602      	mov	r2, r0
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e144      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006404:	4b1a      	ldr	r3, [pc, #104]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1f0      	bne.n	80063f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0304 	and.w	r3, r3, #4
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 80a0 	beq.w	800655e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800641e:	2300      	movs	r3, #0
 8006420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006422:	4b13      	ldr	r3, [pc, #76]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800642e:	2300      	movs	r3, #0
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	4b0f      	ldr	r3, [pc, #60]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	4a0e      	ldr	r2, [pc, #56]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643c:	6413      	str	r3, [r2, #64]	; 0x40
 800643e:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <HAL_RCC_OscConfig+0x2ac>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006446:	60bb      	str	r3, [r7, #8]
 8006448:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800644a:	2301      	movs	r3, #1
 800644c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCC_OscConfig+0x2b8>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	2b00      	cmp	r3, #0
 8006458:	d121      	bne.n	800649e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800645a:	4b08      	ldr	r3, [pc, #32]	; (800647c <HAL_RCC_OscConfig+0x2b8>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a07      	ldr	r2, [pc, #28]	; (800647c <HAL_RCC_OscConfig+0x2b8>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006466:	f7fb fcef 	bl	8001e48 <HAL_GetTick>
 800646a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800646c:	e011      	b.n	8006492 <HAL_RCC_OscConfig+0x2ce>
 800646e:	bf00      	nop
 8006470:	40023800 	.word	0x40023800
 8006474:	42470000 	.word	0x42470000
 8006478:	42470e80 	.word	0x42470e80
 800647c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006480:	f7fb fce2 	bl	8001e48 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b02      	cmp	r3, #2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e0fd      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006492:	4b81      	ldr	r3, [pc, #516]	; (8006698 <HAL_RCC_OscConfig+0x4d4>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d0f0      	beq.n	8006480 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d106      	bne.n	80064b4 <HAL_RCC_OscConfig+0x2f0>
 80064a6:	4b7d      	ldr	r3, [pc, #500]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064aa:	4a7c      	ldr	r2, [pc, #496]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064ac:	f043 0301 	orr.w	r3, r3, #1
 80064b0:	6713      	str	r3, [r2, #112]	; 0x70
 80064b2:	e01c      	b.n	80064ee <HAL_RCC_OscConfig+0x32a>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b05      	cmp	r3, #5
 80064ba:	d10c      	bne.n	80064d6 <HAL_RCC_OscConfig+0x312>
 80064bc:	4b77      	ldr	r3, [pc, #476]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c0:	4a76      	ldr	r2, [pc, #472]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064c2:	f043 0304 	orr.w	r3, r3, #4
 80064c6:	6713      	str	r3, [r2, #112]	; 0x70
 80064c8:	4b74      	ldr	r3, [pc, #464]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064cc:	4a73      	ldr	r2, [pc, #460]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064ce:	f043 0301 	orr.w	r3, r3, #1
 80064d2:	6713      	str	r3, [r2, #112]	; 0x70
 80064d4:	e00b      	b.n	80064ee <HAL_RCC_OscConfig+0x32a>
 80064d6:	4b71      	ldr	r3, [pc, #452]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064da:	4a70      	ldr	r2, [pc, #448]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064dc:	f023 0301 	bic.w	r3, r3, #1
 80064e0:	6713      	str	r3, [r2, #112]	; 0x70
 80064e2:	4b6e      	ldr	r3, [pc, #440]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e6:	4a6d      	ldr	r2, [pc, #436]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80064e8:	f023 0304 	bic.w	r3, r3, #4
 80064ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d015      	beq.n	8006522 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064f6:	f7fb fca7 	bl	8001e48 <HAL_GetTick>
 80064fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064fc:	e00a      	b.n	8006514 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064fe:	f7fb fca3 	bl	8001e48 <HAL_GetTick>
 8006502:	4602      	mov	r2, r0
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	f241 3288 	movw	r2, #5000	; 0x1388
 800650c:	4293      	cmp	r3, r2
 800650e:	d901      	bls.n	8006514 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e0bc      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006514:	4b61      	ldr	r3, [pc, #388]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	f003 0302 	and.w	r3, r3, #2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d0ee      	beq.n	80064fe <HAL_RCC_OscConfig+0x33a>
 8006520:	e014      	b.n	800654c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006522:	f7fb fc91 	bl	8001e48 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fb fc8d 	bl	8001e48 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e0a6      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006540:	4b56      	ldr	r3, [pc, #344]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1ee      	bne.n	800652a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006552:	4b52      	ldr	r3, [pc, #328]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	4a51      	ldr	r2, [pc, #324]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 8006558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800655c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8092 	beq.w	800668c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006568:	4b4c      	ldr	r3, [pc, #304]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b08      	cmp	r3, #8
 8006572:	d05c      	beq.n	800662e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	2b02      	cmp	r3, #2
 800657a:	d141      	bne.n	8006600 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800657c:	4b48      	ldr	r3, [pc, #288]	; (80066a0 <HAL_RCC_OscConfig+0x4dc>)
 800657e:	2200      	movs	r2, #0
 8006580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006582:	f7fb fc61 	bl	8001e48 <HAL_GetTick>
 8006586:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006588:	e008      	b.n	800659c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800658a:	f7fb fc5d 	bl	8001e48 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e078      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800659c:	4b3f      	ldr	r3, [pc, #252]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1f0      	bne.n	800658a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b6:	019b      	lsls	r3, r3, #6
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	3b01      	subs	r3, #1
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	431a      	orrs	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ca:	061b      	lsls	r3, r3, #24
 80065cc:	4933      	ldr	r1, [pc, #204]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065d2:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <HAL_RCC_OscConfig+0x4dc>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d8:	f7fb fc36 	bl	8001e48 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065e0:	f7fb fc32 	bl	8001e48 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e04d      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065f2:	4b2a      	ldr	r3, [pc, #168]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0x41c>
 80065fe:	e045      	b.n	800668c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006600:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <HAL_RCC_OscConfig+0x4dc>)
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006606:	f7fb fc1f 	bl	8001e48 <HAL_GetTick>
 800660a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660c:	e008      	b.n	8006620 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800660e:	f7fb fc1b 	bl	8001e48 <HAL_GetTick>
 8006612:	4602      	mov	r2, r0
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	1ad3      	subs	r3, r2, r3
 8006618:	2b02      	cmp	r3, #2
 800661a:	d901      	bls.n	8006620 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800661c:	2303      	movs	r3, #3
 800661e:	e036      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006620:	4b1e      	ldr	r3, [pc, #120]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d1f0      	bne.n	800660e <HAL_RCC_OscConfig+0x44a>
 800662c:	e02e      	b.n	800668c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	2b01      	cmp	r3, #1
 8006634:	d101      	bne.n	800663a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e029      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800663a:	4b18      	ldr	r3, [pc, #96]	; (800669c <HAL_RCC_OscConfig+0x4d8>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	429a      	cmp	r2, r3
 800664c:	d11c      	bne.n	8006688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006658:	429a      	cmp	r2, r3
 800665a:	d115      	bne.n	8006688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800665c:	68fa      	ldr	r2, [r7, #12]
 800665e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006662:	4013      	ands	r3, r2
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006668:	4293      	cmp	r3, r2
 800666a:	d10d      	bne.n	8006688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006676:	429a      	cmp	r2, r3
 8006678:	d106      	bne.n	8006688 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006684:	429a      	cmp	r2, r3
 8006686:	d001      	beq.n	800668c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	40007000 	.word	0x40007000
 800669c:	40023800 	.word	0x40023800
 80066a0:	42470060 	.word	0x42470060

080066a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0cc      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80066b8:	4b68      	ldr	r3, [pc, #416]	; (800685c <HAL_RCC_ClockConfig+0x1b8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d90c      	bls.n	80066e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066c6:	4b65      	ldr	r3, [pc, #404]	; (800685c <HAL_RCC_ClockConfig+0x1b8>)
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ce:	4b63      	ldr	r3, [pc, #396]	; (800685c <HAL_RCC_ClockConfig+0x1b8>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 030f 	and.w	r3, r3, #15
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0b8      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d020      	beq.n	800672e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0304 	and.w	r3, r3, #4
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d005      	beq.n	8006704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066f8:	4b59      	ldr	r3, [pc, #356]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	4a58      	ldr	r2, [pc, #352]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 80066fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d005      	beq.n	800671c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006710:	4b53      	ldr	r3, [pc, #332]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	4a52      	ldr	r2, [pc, #328]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800671a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800671c:	4b50      	ldr	r3, [pc, #320]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	494d      	ldr	r1, [pc, #308]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 800672a:	4313      	orrs	r3, r2
 800672c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d044      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d107      	bne.n	8006752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006742:	4b47      	ldr	r3, [pc, #284]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d119      	bne.n	8006782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800674e:	2301      	movs	r3, #1
 8006750:	e07f      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	2b02      	cmp	r3, #2
 8006758:	d003      	beq.n	8006762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800675e:	2b03      	cmp	r3, #3
 8006760:	d107      	bne.n	8006772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006762:	4b3f      	ldr	r3, [pc, #252]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d109      	bne.n	8006782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e06f      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006772:	4b3b      	ldr	r3, [pc, #236]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0302 	and.w	r3, r3, #2
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e067      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006782:	4b37      	ldr	r3, [pc, #220]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f023 0203 	bic.w	r2, r3, #3
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4934      	ldr	r1, [pc, #208]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	4313      	orrs	r3, r2
 8006792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006794:	f7fb fb58 	bl	8001e48 <HAL_GetTick>
 8006798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800679a:	e00a      	b.n	80067b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800679c:	f7fb fb54 	bl	8001e48 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d901      	bls.n	80067b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067ae:	2303      	movs	r3, #3
 80067b0:	e04f      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067b2:	4b2b      	ldr	r3, [pc, #172]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 020c 	and.w	r2, r3, #12
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d1eb      	bne.n	800679c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80067c4:	4b25      	ldr	r3, [pc, #148]	; (800685c <HAL_RCC_ClockConfig+0x1b8>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	683a      	ldr	r2, [r7, #0]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d20c      	bcs.n	80067ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d2:	4b22      	ldr	r3, [pc, #136]	; (800685c <HAL_RCC_ClockConfig+0x1b8>)
 80067d4:	683a      	ldr	r2, [r7, #0]
 80067d6:	b2d2      	uxtb	r2, r2
 80067d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b20      	ldr	r3, [pc, #128]	; (800685c <HAL_RCC_ClockConfig+0x1b8>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d001      	beq.n	80067ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e032      	b.n	8006852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d008      	beq.n	800680a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067f8:	4b19      	ldr	r3, [pc, #100]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	4916      	ldr	r1, [pc, #88]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006806:	4313      	orrs	r3, r2
 8006808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 0308 	and.w	r3, r3, #8
 8006812:	2b00      	cmp	r3, #0
 8006814:	d009      	beq.n	800682a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006816:	4b12      	ldr	r3, [pc, #72]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	490e      	ldr	r1, [pc, #56]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	4313      	orrs	r3, r2
 8006828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800682a:	f000 f821 	bl	8006870 <HAL_RCC_GetSysClockFreq>
 800682e:	4601      	mov	r1, r0
 8006830:	4b0b      	ldr	r3, [pc, #44]	; (8006860 <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	091b      	lsrs	r3, r3, #4
 8006836:	f003 030f 	and.w	r3, r3, #15
 800683a:	4a0a      	ldr	r2, [pc, #40]	; (8006864 <HAL_RCC_ClockConfig+0x1c0>)
 800683c:	5cd3      	ldrb	r3, [r2, r3]
 800683e:	fa21 f303 	lsr.w	r3, r1, r3
 8006842:	4a09      	ldr	r2, [pc, #36]	; (8006868 <HAL_RCC_ClockConfig+0x1c4>)
 8006844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006846:	4b09      	ldr	r3, [pc, #36]	; (800686c <HAL_RCC_ClockConfig+0x1c8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fb fab8 	bl	8001dc0 <HAL_InitTick>

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40023c00 	.word	0x40023c00
 8006860:	40023800 	.word	0x40023800
 8006864:	0800eff4 	.word	0x0800eff4
 8006868:	20000000 	.word	0x20000000
 800686c:	20000004 	.word	0x20000004

08006870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006872:	b085      	sub	sp, #20
 8006874:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	2300      	movs	r3, #0
 8006880:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006886:	4b63      	ldr	r3, [pc, #396]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 030c 	and.w	r3, r3, #12
 800688e:	2b04      	cmp	r3, #4
 8006890:	d007      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0x32>
 8006892:	2b08      	cmp	r3, #8
 8006894:	d008      	beq.n	80068a8 <HAL_RCC_GetSysClockFreq+0x38>
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 80b4 	bne.w	8006a04 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800689c:	4b5e      	ldr	r3, [pc, #376]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800689e:	60bb      	str	r3, [r7, #8]
       break;
 80068a0:	e0b3      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068a2:	4b5e      	ldr	r3, [pc, #376]	; (8006a1c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80068a4:	60bb      	str	r3, [r7, #8]
      break;
 80068a6:	e0b0      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068a8:	4b5a      	ldr	r3, [pc, #360]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80068b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80068b2:	4b58      	ldr	r3, [pc, #352]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d04a      	beq.n	8006954 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068be:	4b55      	ldr	r3, [pc, #340]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	099b      	lsrs	r3, r3, #6
 80068c4:	f04f 0400 	mov.w	r4, #0
 80068c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	ea03 0501 	and.w	r5, r3, r1
 80068d4:	ea04 0602 	and.w	r6, r4, r2
 80068d8:	4629      	mov	r1, r5
 80068da:	4632      	mov	r2, r6
 80068dc:	f04f 0300 	mov.w	r3, #0
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	0154      	lsls	r4, r2, #5
 80068e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068ea:	014b      	lsls	r3, r1, #5
 80068ec:	4619      	mov	r1, r3
 80068ee:	4622      	mov	r2, r4
 80068f0:	1b49      	subs	r1, r1, r5
 80068f2:	eb62 0206 	sbc.w	r2, r2, r6
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	f04f 0400 	mov.w	r4, #0
 80068fe:	0194      	lsls	r4, r2, #6
 8006900:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006904:	018b      	lsls	r3, r1, #6
 8006906:	1a5b      	subs	r3, r3, r1
 8006908:	eb64 0402 	sbc.w	r4, r4, r2
 800690c:	f04f 0100 	mov.w	r1, #0
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	00e2      	lsls	r2, r4, #3
 8006916:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800691a:	00d9      	lsls	r1, r3, #3
 800691c:	460b      	mov	r3, r1
 800691e:	4614      	mov	r4, r2
 8006920:	195b      	adds	r3, r3, r5
 8006922:	eb44 0406 	adc.w	r4, r4, r6
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	f04f 0200 	mov.w	r2, #0
 800692e:	0262      	lsls	r2, r4, #9
 8006930:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006934:	0259      	lsls	r1, r3, #9
 8006936:	460b      	mov	r3, r1
 8006938:	4614      	mov	r4, r2
 800693a:	4618      	mov	r0, r3
 800693c:	4621      	mov	r1, r4
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f04f 0400 	mov.w	r4, #0
 8006944:	461a      	mov	r2, r3
 8006946:	4623      	mov	r3, r4
 8006948:	f7f9 fca2 	bl	8000290 <__aeabi_uldivmod>
 800694c:	4603      	mov	r3, r0
 800694e:	460c      	mov	r4, r1
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e049      	b.n	80069e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006954:	4b2f      	ldr	r3, [pc, #188]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	099b      	lsrs	r3, r3, #6
 800695a:	f04f 0400 	mov.w	r4, #0
 800695e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006962:	f04f 0200 	mov.w	r2, #0
 8006966:	ea03 0501 	and.w	r5, r3, r1
 800696a:	ea04 0602 	and.w	r6, r4, r2
 800696e:	4629      	mov	r1, r5
 8006970:	4632      	mov	r2, r6
 8006972:	f04f 0300 	mov.w	r3, #0
 8006976:	f04f 0400 	mov.w	r4, #0
 800697a:	0154      	lsls	r4, r2, #5
 800697c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006980:	014b      	lsls	r3, r1, #5
 8006982:	4619      	mov	r1, r3
 8006984:	4622      	mov	r2, r4
 8006986:	1b49      	subs	r1, r1, r5
 8006988:	eb62 0206 	sbc.w	r2, r2, r6
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	f04f 0400 	mov.w	r4, #0
 8006994:	0194      	lsls	r4, r2, #6
 8006996:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800699a:	018b      	lsls	r3, r1, #6
 800699c:	1a5b      	subs	r3, r3, r1
 800699e:	eb64 0402 	sbc.w	r4, r4, r2
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	f04f 0200 	mov.w	r2, #0
 80069aa:	00e2      	lsls	r2, r4, #3
 80069ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069b0:	00d9      	lsls	r1, r3, #3
 80069b2:	460b      	mov	r3, r1
 80069b4:	4614      	mov	r4, r2
 80069b6:	195b      	adds	r3, r3, r5
 80069b8:	eb44 0406 	adc.w	r4, r4, r6
 80069bc:	f04f 0100 	mov.w	r1, #0
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	02a2      	lsls	r2, r4, #10
 80069c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80069ca:	0299      	lsls	r1, r3, #10
 80069cc:	460b      	mov	r3, r1
 80069ce:	4614      	mov	r4, r2
 80069d0:	4618      	mov	r0, r3
 80069d2:	4621      	mov	r1, r4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f04f 0400 	mov.w	r4, #0
 80069da:	461a      	mov	r2, r3
 80069dc:	4623      	mov	r3, r4
 80069de:	f7f9 fc57 	bl	8000290 <__aeabi_uldivmod>
 80069e2:	4603      	mov	r3, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	3301      	adds	r3, #1
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	60bb      	str	r3, [r7, #8]
      break;
 8006a02:	e002      	b.n	8006a0a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a04:	4b04      	ldr	r3, [pc, #16]	; (8006a18 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a06:	60bb      	str	r3, [r7, #8]
      break;
 8006a08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a14:	40023800 	.word	0x40023800
 8006a18:	00f42400 	.word	0x00f42400
 8006a1c:	007a1200 	.word	0x007a1200

08006a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a26:	681b      	ldr	r3, [r3, #0]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	20000000 	.word	0x20000000

08006a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a3c:	f7ff fff0 	bl	8006a20 <HAL_RCC_GetHCLKFreq>
 8006a40:	4601      	mov	r1, r0
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	0a9b      	lsrs	r3, r3, #10
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	4a03      	ldr	r2, [pc, #12]	; (8006a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a4e:	5cd3      	ldrb	r3, [r2, r3]
 8006a50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	40023800 	.word	0x40023800
 8006a5c:	0800f004 	.word	0x0800f004

08006a60 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d105      	bne.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d038      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a88:	4b68      	ldr	r3, [pc, #416]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a8e:	f7fb f9db 	bl	8001e48 <HAL_GetTick>
 8006a92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a94:	e008      	b.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a96:	f7fb f9d7 	bl	8001e48 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e0bd      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006aa8:	4b61      	ldr	r3, [pc, #388]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1f0      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685a      	ldr	r2, [r3, #4]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	019b      	lsls	r3, r3, #6
 8006abe:	431a      	orrs	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	071b      	lsls	r3, r3, #28
 8006ac6:	495a      	ldr	r1, [pc, #360]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ace:	4b57      	ldr	r3, [pc, #348]	; (8006c2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ad4:	f7fb f9b8 	bl	8001e48 <HAL_GetTick>
 8006ad8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ada:	e008      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006adc:	f7fb f9b4 	bl	8001e48 <HAL_GetTick>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d901      	bls.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e09a      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006aee:	4b50      	ldr	r3, [pc, #320]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f0      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0302 	and.w	r3, r3, #2
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8083 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]
 8006b0c:	4b48      	ldr	r3, [pc, #288]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	4a47      	ldr	r2, [pc, #284]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b16:	6413      	str	r3, [r2, #64]	; 0x40
 8006b18:	4b45      	ldr	r3, [pc, #276]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b20:	60fb      	str	r3, [r7, #12]
 8006b22:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006b24:	4b43      	ldr	r3, [pc, #268]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a42      	ldr	r2, [pc, #264]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b2e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006b30:	f7fb f98a 	bl	8001e48 <HAL_GetTick>
 8006b34:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b36:	e008      	b.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006b38:	f7fb f986 	bl	8001e48 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e06c      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b4a:	4b3a      	ldr	r3, [pc, #232]	; (8006c34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d0f0      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b56:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02f      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d028      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b74:	4b2e      	ldr	r3, [pc, #184]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b7c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b7e:	4b2e      	ldr	r3, [pc, #184]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b84:	4b2c      	ldr	r3, [pc, #176]	; (8006c38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b8a:	4a29      	ldr	r2, [pc, #164]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b90:	4b27      	ldr	r3, [pc, #156]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d114      	bne.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b9c:	f7fb f954 	bl	8001e48 <HAL_GetTick>
 8006ba0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba2:	e00a      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ba4:	f7fb f950 	bl	8001e48 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e034      	b.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0ee      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd2:	d10d      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006bd4:	4b16      	ldr	r3, [pc, #88]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	691b      	ldr	r3, [r3, #16]
 8006be0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006be4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006be8:	4911      	ldr	r1, [pc, #68]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
 8006bee:	e005      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006bf0:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4a0e      	ldr	r2, [pc, #56]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bfa:	6093      	str	r3, [r2, #8]
 8006bfc:	4b0c      	ldr	r3, [pc, #48]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c08:	4909      	ldr	r1, [pc, #36]	; (8006c30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0308 	and.w	r3, r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7d1a      	ldrb	r2, [r3, #20]
 8006c1e:	4b07      	ldr	r3, [pc, #28]	; (8006c3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006c20:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3718      	adds	r7, #24
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}
 8006c2c:	42470068 	.word	0x42470068
 8006c30:	40023800 	.word	0x40023800
 8006c34:	40007000 	.word	0x40007000
 8006c38:	42470e40 	.word	0x42470e40
 8006c3c:	424711e0 	.word	0x424711e0

08006c40 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2203      	movs	r2, #3
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c54:	099b      	lsrs	r3, r3, #6
 8006c56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006c5e:	4b18      	ldr	r3, [pc, #96]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c64:	0f1b      	lsrs	r3, r3, #28
 8006c66:	f003 0207 	and.w	r2, r3, #7
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8006c6e:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006c7c:	4b10      	ldr	r3, [pc, #64]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006c84:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006c86:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	431a      	orrs	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8006c96:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006c98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d103      	bne.n	8006cac <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006caa:	e002      	b.n	8006cb2 <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	751a      	strb	r2, [r3, #20]
}
 8006cb2:	bf00      	nop
 8006cb4:	3714      	adds	r7, #20
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	40023800 	.word	0x40023800

08006cc4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d13f      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d131      	bne.n	8006d5a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	; (8006d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006cf8:	617b      	str	r3, [r7, #20]
          break;
 8006cfa:	e031      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006cfc:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006d0a:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d14:	4a18      	ldr	r2, [pc, #96]	; (8006d78 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	e008      	b.n	8006d30 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006d1e:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d28:	4a14      	ldr	r2, [pc, #80]	; (8006d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006d30:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d36:	099b      	lsrs	r3, r3, #6
 8006d38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4a:	0f1b      	lsrs	r3, r3, #28
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d56:	617b      	str	r3, [r7, #20]
          break;
 8006d58:	e002      	b.n	8006d60 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	617b      	str	r3, [r7, #20]
          break;
 8006d5e:	bf00      	nop
        }
      }
      break;
 8006d60:	bf00      	nop
    }
  }
  return frequency;
 8006d62:	697b      	ldr	r3, [r7, #20]
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	371c      	adds	r7, #28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	40023800 	.word	0x40023800
 8006d74:	00bb8000 	.word	0x00bb8000
 8006d78:	007a1200 	.word	0x007a1200
 8006d7c:	00f42400 	.word	0x00f42400

08006d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e01d      	b.n	8006dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d98:	b2db      	uxtb	r3, r3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d106      	bne.n	8006dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7fa fd76 	bl	8001898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3304      	adds	r3, #4
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4610      	mov	r0, r2
 8006dc0:	f000 fb10 	bl	80073e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3708      	adds	r7, #8
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b085      	sub	sp, #20
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f042 0201 	orr.w	r2, r2, #1
 8006dec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	d007      	beq.n	8006e10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e01d      	b.n	8006e6c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d106      	bne.n	8006e4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7fa fd6d 	bl	8001924 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3304      	adds	r3, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	f000 fac1 	bl	80073e4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d122      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d11b      	bne.n	8006ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f06f 0202 	mvn.w	r2, #2
 8006ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d003      	beq.n	8006ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa75 	bl	80073a6 <HAL_TIM_IC_CaptureCallback>
 8006ebc:	e005      	b.n	8006eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fa67 	bl	8007392 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa78 	bl	80073ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f003 0304 	and.w	r3, r3, #4
 8006eda:	2b04      	cmp	r3, #4
 8006edc:	d122      	bne.n	8006f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f003 0304 	and.w	r3, r3, #4
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d11b      	bne.n	8006f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f06f 0204 	mvn.w	r2, #4
 8006ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2202      	movs	r2, #2
 8006efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa4b 	bl	80073a6 <HAL_TIM_IC_CaptureCallback>
 8006f10:	e005      	b.n	8006f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa3d 	bl	8007392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fa4e 	bl	80073ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f003 0308 	and.w	r3, r3, #8
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d122      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	f003 0308 	and.w	r3, r3, #8
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d11b      	bne.n	8006f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f06f 0208 	mvn.w	r2, #8
 8006f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69db      	ldr	r3, [r3, #28]
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d003      	beq.n	8006f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fa21 	bl	80073a6 <HAL_TIM_IC_CaptureCallback>
 8006f64:	e005      	b.n	8006f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa13 	bl	8007392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 fa24 	bl	80073ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0310 	and.w	r3, r3, #16
 8006f82:	2b10      	cmp	r3, #16
 8006f84:	d122      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d11b      	bne.n	8006fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0210 	mvn.w	r2, #16
 8006f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2208      	movs	r2, #8
 8006fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9f7 	bl	80073a6 <HAL_TIM_IC_CaptureCallback>
 8006fb8:	e005      	b.n	8006fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f9e9 	bl	8007392 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f9fa 	bl	80073ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d10e      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d107      	bne.n	8006ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f06f 0201 	mvn.w	r2, #1
 8006ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f9c3 	bl	800737e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d10e      	bne.n	8007024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007010:	2b80      	cmp	r3, #128	; 0x80
 8007012:	d107      	bne.n	8007024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800701c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fcfe 	bl	8007a20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b40      	cmp	r3, #64	; 0x40
 8007030:	d10e      	bne.n	8007050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d107      	bne.n	8007050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f9bf 	bl	80073ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	f003 0320 	and.w	r3, r3, #32
 800705a:	2b20      	cmp	r3, #32
 800705c:	d10e      	bne.n	800707c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b20      	cmp	r3, #32
 800706a:	d107      	bne.n	800707c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f06f 0220 	mvn.w	r2, #32
 8007074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fcc8 	bl	8007a0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007096:	2b01      	cmp	r3, #1
 8007098:	d101      	bne.n	800709e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800709a:	2302      	movs	r3, #2
 800709c:	e0b4      	b.n	8007208 <HAL_TIM_PWM_ConfigChannel+0x184>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2202      	movs	r2, #2
 80070aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	f200 809f 	bhi.w	80071f4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070f1 	.word	0x080070f1
 80070c0:	080071f5 	.word	0x080071f5
 80070c4:	080071f5 	.word	0x080071f5
 80070c8:	080071f5 	.word	0x080071f5
 80070cc:	08007131 	.word	0x08007131
 80070d0:	080071f5 	.word	0x080071f5
 80070d4:	080071f5 	.word	0x080071f5
 80070d8:	080071f5 	.word	0x080071f5
 80070dc:	08007173 	.word	0x08007173
 80070e0:	080071f5 	.word	0x080071f5
 80070e4:	080071f5 	.word	0x080071f5
 80070e8:	080071f5 	.word	0x080071f5
 80070ec:	080071b3 	.word	0x080071b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f000 f9f4 	bl	80074e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699a      	ldr	r2, [r3, #24]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0208 	orr.w	r2, r2, #8
 800710a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0204 	bic.w	r2, r2, #4
 800711a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6999      	ldr	r1, [r3, #24]
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	619a      	str	r2, [r3, #24]
      break;
 800712e:	e062      	b.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68b9      	ldr	r1, [r7, #8]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 fa3a 	bl	80075b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	699a      	ldr	r2, [r3, #24]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800714a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	699a      	ldr	r2, [r3, #24]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6999      	ldr	r1, [r3, #24]
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	021a      	lsls	r2, r3, #8
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	619a      	str	r2, [r3, #24]
      break;
 8007170:	e041      	b.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fa85 	bl	8007688 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69da      	ldr	r2, [r3, #28]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0208 	orr.w	r2, r2, #8
 800718c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69da      	ldr	r2, [r3, #28]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0204 	bic.w	r2, r2, #4
 800719c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	69d9      	ldr	r1, [r3, #28]
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	61da      	str	r2, [r3, #28]
      break;
 80071b0:	e021      	b.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 facf 	bl	800775c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	69da      	ldr	r2, [r3, #28]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	69da      	ldr	r2, [r3, #28]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69d9      	ldr	r1, [r3, #28]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	021a      	lsls	r2, r3, #8
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	430a      	orrs	r2, r1
 80071f0:	61da      	str	r2, [r3, #28]
      break;
 80071f2:	e000      	b.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80071f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007206:	2300      	movs	r3, #0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <HAL_TIM_ConfigClockSource+0x18>
 8007224:	2302      	movs	r3, #2
 8007226:	e0a6      	b.n	8007376 <HAL_TIM_ConfigClockSource+0x166>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007246:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800724e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b40      	cmp	r3, #64	; 0x40
 800725e:	d067      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0x120>
 8007260:	2b40      	cmp	r3, #64	; 0x40
 8007262:	d80b      	bhi.n	800727c <HAL_TIM_ConfigClockSource+0x6c>
 8007264:	2b10      	cmp	r3, #16
 8007266:	d073      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0x140>
 8007268:	2b10      	cmp	r3, #16
 800726a:	d802      	bhi.n	8007272 <HAL_TIM_ConfigClockSource+0x62>
 800726c:	2b00      	cmp	r3, #0
 800726e:	d06f      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007270:	e078      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007272:	2b20      	cmp	r3, #32
 8007274:	d06c      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0x140>
 8007276:	2b30      	cmp	r3, #48	; 0x30
 8007278:	d06a      	beq.n	8007350 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800727a:	e073      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800727c:	2b70      	cmp	r3, #112	; 0x70
 800727e:	d00d      	beq.n	800729c <HAL_TIM_ConfigClockSource+0x8c>
 8007280:	2b70      	cmp	r3, #112	; 0x70
 8007282:	d804      	bhi.n	800728e <HAL_TIM_ConfigClockSource+0x7e>
 8007284:	2b50      	cmp	r3, #80	; 0x50
 8007286:	d033      	beq.n	80072f0 <HAL_TIM_ConfigClockSource+0xe0>
 8007288:	2b60      	cmp	r3, #96	; 0x60
 800728a:	d041      	beq.n	8007310 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800728c:	e06a      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800728e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007292:	d066      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0x152>
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007298:	d017      	beq.n	80072ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800729a:	e063      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6818      	ldr	r0, [r3, #0]
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	6899      	ldr	r1, [r3, #8]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f000 fb20 	bl	80078f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80072be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	609a      	str	r2, [r3, #8]
      break;
 80072c8:	e04c      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6818      	ldr	r0, [r3, #0]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	6899      	ldr	r1, [r3, #8]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	f000 fb09 	bl	80078f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072ec:	609a      	str	r2, [r3, #8]
      break;
 80072ee:	e039      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	461a      	mov	r2, r3
 80072fe:	f000 fa7d 	bl	80077fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2150      	movs	r1, #80	; 0x50
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fad6 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 800730e:	e029      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6859      	ldr	r1, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	461a      	mov	r2, r3
 800731e:	f000 fa9c 	bl	800785a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2160      	movs	r1, #96	; 0x60
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fac6 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 800732e:	e019      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	6859      	ldr	r1, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	461a      	mov	r2, r3
 800733e:	f000 fa5d 	bl	80077fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2140      	movs	r1, #64	; 0x40
 8007348:	4618      	mov	r0, r3
 800734a:	f000 fab6 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 800734e:	e009      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4619      	mov	r1, r3
 800735a:	4610      	mov	r0, r2
 800735c:	f000 faad 	bl	80078ba <TIM_ITRx_SetConfig>
      break;
 8007360:	e000      	b.n	8007364 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2200      	movs	r2, #0
 8007370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800739a:	bf00      	nop
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073ae:	bf00      	nop
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b083      	sub	sp, #12
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073d6:	bf00      	nop
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a34      	ldr	r2, [pc, #208]	; (80074c8 <TIM_Base_SetConfig+0xe4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00f      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007402:	d00b      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a31      	ldr	r2, [pc, #196]	; (80074cc <TIM_Base_SetConfig+0xe8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d007      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a30      	ldr	r2, [pc, #192]	; (80074d0 <TIM_Base_SetConfig+0xec>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d003      	beq.n	800741c <TIM_Base_SetConfig+0x38>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a2f      	ldr	r2, [pc, #188]	; (80074d4 <TIM_Base_SetConfig+0xf0>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d108      	bne.n	800742e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007422:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	4313      	orrs	r3, r2
 800742c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <TIM_Base_SetConfig+0xe4>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d01b      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800743c:	d017      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a22      	ldr	r2, [pc, #136]	; (80074cc <TIM_Base_SetConfig+0xe8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d013      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <TIM_Base_SetConfig+0xec>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d00f      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a20      	ldr	r2, [pc, #128]	; (80074d4 <TIM_Base_SetConfig+0xf0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00b      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a1f      	ldr	r2, [pc, #124]	; (80074d8 <TIM_Base_SetConfig+0xf4>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d007      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	4a1e      	ldr	r2, [pc, #120]	; (80074dc <TIM_Base_SetConfig+0xf8>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d003      	beq.n	800746e <TIM_Base_SetConfig+0x8a>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a1d      	ldr	r2, [pc, #116]	; (80074e0 <TIM_Base_SetConfig+0xfc>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d108      	bne.n	8007480 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4313      	orrs	r3, r2
 800747e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689a      	ldr	r2, [r3, #8]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a08      	ldr	r2, [pc, #32]	; (80074c8 <TIM_Base_SetConfig+0xe4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d103      	bne.n	80074b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	615a      	str	r2, [r3, #20]
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40010000 	.word	0x40010000
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40014000 	.word	0x40014000
 80074dc:	40014400 	.word	0x40014400
 80074e0:	40014800 	.word	0x40014800

080074e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	f023 0201 	bic.w	r2, r3, #1
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0303 	bic.w	r3, r3, #3
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 0302 	bic.w	r3, r3, #2
 800752c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	689b      	ldr	r3, [r3, #8]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a1c      	ldr	r2, [pc, #112]	; (80075ac <TIM_OC1_SetConfig+0xc8>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d10c      	bne.n	800755a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f023 0308 	bic.w	r3, r3, #8
 8007546:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	f023 0304 	bic.w	r3, r3, #4
 8007558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <TIM_OC1_SetConfig+0xc8>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d111      	bne.n	8007586 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4313      	orrs	r3, r2
 8007584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	68fa      	ldr	r2, [r7, #12]
 8007590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	685a      	ldr	r2, [r3, #4]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr
 80075ac:	40010000 	.word	0x40010000

080075b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0210 	bic.w	r2, r3, #16
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	699b      	ldr	r3, [r3, #24]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	021b      	lsls	r3, r3, #8
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f023 0320 	bic.w	r3, r3, #32
 80075fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	697a      	ldr	r2, [r7, #20]
 8007604:	4313      	orrs	r3, r2
 8007606:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a1e      	ldr	r2, [pc, #120]	; (8007684 <TIM_OC2_SetConfig+0xd4>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d10d      	bne.n	800762c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800762a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a15      	ldr	r2, [pc, #84]	; (8007684 <TIM_OC2_SetConfig+0xd4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d113      	bne.n	800765c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800763a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	695b      	ldr	r3, [r3, #20]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	4313      	orrs	r3, r2
 800764e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	621a      	str	r2, [r3, #32]
}
 8007676:	bf00      	nop
 8007678:	371c      	adds	r7, #28
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40010000 	.word	0x40010000

08007688 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f023 0303 	bic.w	r3, r3, #3
 80076be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	021b      	lsls	r3, r3, #8
 80076d8:	697a      	ldr	r2, [r7, #20]
 80076da:	4313      	orrs	r3, r2
 80076dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a1d      	ldr	r2, [pc, #116]	; (8007758 <TIM_OC3_SetConfig+0xd0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d10d      	bne.n	8007702 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80076ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a14      	ldr	r2, [pc, #80]	; (8007758 <TIM_OC3_SetConfig+0xd0>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d113      	bne.n	8007732 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	695b      	ldr	r3, [r3, #20]
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	693a      	ldr	r2, [r7, #16]
 8007722:	4313      	orrs	r3, r2
 8007724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	011b      	lsls	r3, r3, #4
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	693a      	ldr	r2, [r7, #16]
 8007736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	621a      	str	r2, [r3, #32]
}
 800774c:	bf00      	nop
 800774e:	371c      	adds	r7, #28
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	40010000 	.word	0x40010000

0800775c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6a1b      	ldr	r3, [r3, #32]
 8007776:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800778a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	68fa      	ldr	r2, [r7, #12]
 800779c:	4313      	orrs	r3, r2
 800779e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	031b      	lsls	r3, r3, #12
 80077ae:	693a      	ldr	r2, [r7, #16]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <TIM_OC4_SetConfig+0x9c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d109      	bne.n	80077d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80077c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	019b      	lsls	r3, r3, #6
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	697a      	ldr	r2, [r7, #20]
 80077d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	621a      	str	r2, [r3, #32]
}
 80077ea:	bf00      	nop
 80077ec:	371c      	adds	r7, #28
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	40010000 	.word	0x40010000

080077fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6a1b      	ldr	r3, [r3, #32]
 800780c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f023 0201 	bic.w	r2, r3, #1
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	011b      	lsls	r3, r3, #4
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4313      	orrs	r3, r2
 8007830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f023 030a 	bic.w	r3, r3, #10
 8007838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr

0800785a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800785a:	b480      	push	{r7}
 800785c:	b087      	sub	sp, #28
 800785e:	af00      	add	r7, sp, #0
 8007860:	60f8      	str	r0, [r7, #12]
 8007862:	60b9      	str	r1, [r7, #8]
 8007864:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	6a1b      	ldr	r3, [r3, #32]
 800786a:	f023 0210 	bic.w	r2, r3, #16
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007884:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	031b      	lsls	r3, r3, #12
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	4313      	orrs	r3, r2
 800788e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007896:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	011b      	lsls	r3, r3, #4
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	4313      	orrs	r3, r2
 80078a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	697a      	ldr	r2, [r7, #20]
 80078a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	621a      	str	r2, [r3, #32]
}
 80078ae:	bf00      	nop
 80078b0:	371c      	adds	r7, #28
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f043 0307 	orr.w	r3, r3, #7
 80078dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	609a      	str	r2, [r3, #8]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b087      	sub	sp, #28
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
 80078fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800790a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	021a      	lsls	r2, r3, #8
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	431a      	orrs	r2, r3
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	609a      	str	r2, [r3, #8]
}
 8007924:	bf00      	nop
 8007926:	371c      	adds	r7, #28
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007944:	2302      	movs	r3, #2
 8007946:	e050      	b.n	80079ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4313      	orrs	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68fa      	ldr	r2, [r7, #12]
 8007980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a1c      	ldr	r2, [pc, #112]	; (80079f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d018      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007994:	d013      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a18      	ldr	r2, [pc, #96]	; (80079fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00e      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d009      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d004      	beq.n	80079be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d10c      	bne.n	80079d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40000400 	.word	0x40000400
 8007a00:	40000800 	.word	0x40000800
 8007a04:	40000c00 	.word	0x40000c00
 8007a08:	40014000 	.word	0x40014000

08007a0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a14:	bf00      	nop
 8007a16:	370c      	adds	r7, #12
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a34:	b084      	sub	sp, #16
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
 8007a3e:	f107 001c 	add.w	r0, r7, #28
 8007a42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d122      	bne.n	8007a92 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007a60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d105      	bne.n	8007a86 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f94a 	bl	8007d20 <USB_CoreReset>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
 8007a90:	e01a      	b.n	8007ac8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f93e 	bl	8007d20 <USB_CoreReset>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aba:	e005      	b.n	8007ac8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d10b      	bne.n	8007ae6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f043 0206 	orr.w	r2, r3, #6
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f043 0220 	orr.w	r2, r3, #32
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007af2:	b004      	add	sp, #16
 8007af4:	4770      	bx	lr

08007af6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f043 0201 	orr.w	r2, r3, #1
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f023 0201 	bic.w	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	370c      	adds	r7, #12
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr

08007b3a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	460b      	mov	r3, r1
 8007b44:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007b52:	78fb      	ldrb	r3, [r7, #3]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d106      	bne.n	8007b66 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	60da      	str	r2, [r3, #12]
 8007b64:	e00b      	b.n	8007b7e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007b66:	78fb      	ldrb	r3, [r7, #3]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	60da      	str	r2, [r3, #12]
 8007b78:	e001      	b.n	8007b7e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e003      	b.n	8007b86 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007b7e:	2032      	movs	r0, #50	; 0x32
 8007b80:	f7fa f96e 	bl	8001e60 <HAL_Delay>

  return HAL_OK;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	019b      	lsls	r3, r3, #6
 8007ba2:	f043 0220 	orr.w	r2, r3, #32
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a09      	ldr	r2, [pc, #36]	; (8007bd8 <USB_FlushTxFifo+0x48>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d901      	bls.n	8007bbc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e006      	b.n	8007bca <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	f003 0320 	and.w	r3, r3, #32
 8007bc4:	2b20      	cmp	r3, #32
 8007bc6:	d0f0      	beq.n	8007baa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007bc8:	2300      	movs	r3, #0
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	00030d40 	.word	0x00030d40

08007bdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007be4:	2300      	movs	r3, #0
 8007be6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2210      	movs	r2, #16
 8007bec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	4a09      	ldr	r2, [pc, #36]	; (8007c1c <USB_FlushRxFifo+0x40>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d901      	bls.n	8007c00 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e006      	b.n	8007c0e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	691b      	ldr	r3, [r3, #16]
 8007c04:	f003 0310 	and.w	r3, r3, #16
 8007c08:	2b10      	cmp	r3, #16
 8007c0a:	d0f0      	beq.n	8007bee <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop
 8007c1c:	00030d40 	.word	0x00030d40

08007c20 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	; 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	460b      	mov	r3, r1
 8007c30:	71fb      	strb	r3, [r7, #7]
 8007c32:	4613      	mov	r3, r2
 8007c34:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d11a      	bne.n	8007c7c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c46:	88bb      	ldrh	r3, [r7, #4]
 8007c48:	3303      	adds	r3, #3
 8007c4a:	089b      	lsrs	r3, r3, #2
 8007c4c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	61bb      	str	r3, [r7, #24]
 8007c52:	e00f      	b.n	8007c74 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	031a      	lsls	r2, r3, #12
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c60:	461a      	mov	r2, r3
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007c6e:	69bb      	ldr	r3, [r7, #24]
 8007c70:	3301      	adds	r3, #1
 8007c72:	61bb      	str	r3, [r7, #24]
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d3eb      	bcc.n	8007c54 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3724      	adds	r7, #36	; 0x24
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b089      	sub	sp, #36	; 0x24
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	60f8      	str	r0, [r7, #12]
 8007c92:	60b9      	str	r1, [r7, #8]
 8007c94:	4613      	mov	r3, r2
 8007c96:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	3303      	adds	r3, #3
 8007ca4:	089b      	lsrs	r3, r3, #2
 8007ca6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61bb      	str	r3, [r7, #24]
 8007cac:	e00b      	b.n	8007cc6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	601a      	str	r2, [r3, #0]
    pDest++;
 8007cba:	69fb      	ldr	r3, [r7, #28]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61bb      	str	r3, [r7, #24]
 8007cc6:	69ba      	ldr	r2, [r7, #24]
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	429a      	cmp	r2, r3
 8007ccc:	d3ef      	bcc.n	8007cae <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007cce:	69fb      	ldr	r3, [r7, #28]
}
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	3724      	adds	r7, #36	; 0x24
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	695b      	ldr	r3, [r3, #20]
 8007ce8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	370c      	adds	r7, #12
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d20:	b480      	push	{r7}
 8007d22:	b085      	sub	sp, #20
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	60fb      	str	r3, [r7, #12]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <USB_CoreReset+0x64>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d901      	bls.n	8007d3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e01b      	b.n	8007d76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	daf2      	bge.n	8007d2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f043 0201 	orr.w	r2, r3, #1
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	4a09      	ldr	r2, [pc, #36]	; (8007d84 <USB_CoreReset+0x64>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e006      	b.n	8007d76 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d0f0      	beq.n	8007d56 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3714      	adds	r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	00030d40 	.word	0x00030d40

08007d88 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d88:	b084      	sub	sp, #16
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	f107 001c 	add.w	r0, r7, #28
 8007d96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007da4:	461a      	mov	r2, r3
 8007da6:	2300      	movs	r3, #0
 8007da8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dba:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d018      	beq.n	8007e0c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d10a      	bne.n	8007df6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007dee:	f043 0304 	orr.w	r3, r3, #4
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	e014      	b.n	8007e20 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	68ba      	ldr	r2, [r7, #8]
 8007e00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e04:	f023 0304 	bic.w	r3, r3, #4
 8007e08:	6013      	str	r3, [r2, #0]
 8007e0a:	e009      	b.n	8007e20 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007e1a:	f023 0304 	bic.w	r3, r3, #4
 8007e1e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007e20:	2110      	movs	r1, #16
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7ff feb4 	bl	8007b90 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f7ff fed7 	bl	8007bdc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
 8007e32:	e015      	b.n	8007e60 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	015a      	lsls	r2, r3, #5
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e40:	461a      	mov	r2, r3
 8007e42:	f04f 33ff 	mov.w	r3, #4294967295
 8007e46:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	015a      	lsls	r2, r3, #5
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4413      	add	r3, r2
 8007e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e54:	461a      	mov	r2, r3
 8007e56:	2300      	movs	r3, #0
 8007e58:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	60fb      	str	r3, [r7, #12]
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d3e5      	bcc.n	8007e34 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007e68:	2101      	movs	r1, #1
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 f8ac 	bl	8007fc8 <USB_DriveVbus>

  HAL_Delay(200U);
 8007e70:	20c8      	movs	r0, #200	; 0xc8
 8007e72:	f7f9 fff5 	bl	8001e60 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00b      	beq.n	8007ea8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e96:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4a14      	ldr	r2, [pc, #80]	; (8007eec <USB_HostInit+0x164>)
 8007e9c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a13      	ldr	r2, [pc, #76]	; (8007ef0 <USB_HostInit+0x168>)
 8007ea2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007ea6:	e009      	b.n	8007ebc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2280      	movs	r2, #128	; 0x80
 8007eac:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <USB_HostInit+0x16c>)
 8007eb2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a10      	ldr	r2, [pc, #64]	; (8007ef8 <USB_HostInit+0x170>)
 8007eb8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d105      	bne.n	8007ece <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	f043 0210 	orr.w	r2, r3, #16
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	699a      	ldr	r2, [r3, #24]
 8007ed2:	4b0a      	ldr	r3, [pc, #40]	; (8007efc <USB_HostInit+0x174>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ee6:	b004      	add	sp, #16
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	01000200 	.word	0x01000200
 8007ef0:	00e00300 	.word	0x00e00300
 8007ef4:	00600080 	.word	0x00600080
 8007ef8:	004000e0 	.word	0x004000e0
 8007efc:	a3200008 	.word	0xa3200008

08007f00 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
 8007f22:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	78fb      	ldrb	r3, [r7, #3]
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	68f9      	ldr	r1, [r7, #12]
 8007f34:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d107      	bne.n	8007f52 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f4e:	6053      	str	r3, [r2, #4]
 8007f50:	e009      	b.n	8007f66 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d106      	bne.n	8007f66 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f241 7370 	movw	r3, #6000	; 0x1770
 8007f64:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3714      	adds	r7, #20
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007f94:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007f9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fa2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007fa4:	2064      	movs	r0, #100	; 0x64
 8007fa6:	f7f9 ff5b 	bl	8001e60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fb6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007fb8:	200a      	movs	r0, #10
 8007fba:	f7f9 ff51 	bl	8001e60 <HAL_Delay>

  return HAL_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b085      	sub	sp, #20
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007fec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d109      	bne.n	800800c <USB_DriveVbus+0x44>
 8007ff8:	78fb      	ldrb	r3, [r7, #3]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d106      	bne.n	800800c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	68fa      	ldr	r2, [r7, #12]
 8008002:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800800a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008016:	d109      	bne.n	800802c <USB_DriveVbus+0x64>
 8008018:	78fb      	ldrb	r3, [r7, #3]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800802a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800803a:	b480      	push	{r7}
 800803c:	b085      	sub	sp, #20
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	0c5b      	lsrs	r3, r3, #17
 8008058:	f003 0303 	and.w	r3, r3, #3
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008068:	b480      	push	{r7}
 800806a:	b085      	sub	sp, #20
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	b29b      	uxth	r3, r3
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
	...

0800808c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	4608      	mov	r0, r1
 8008096:	4611      	mov	r1, r2
 8008098:	461a      	mov	r2, r3
 800809a:	4603      	mov	r3, r0
 800809c:	70fb      	strb	r3, [r7, #3]
 800809e:	460b      	mov	r3, r1
 80080a0:	70bb      	strb	r3, [r7, #2]
 80080a2:	4613      	mov	r3, r2
 80080a4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80080ae:	78fb      	ldrb	r3, [r7, #3]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ba:	461a      	mov	r2, r3
 80080bc:	f04f 33ff 	mov.w	r3, #4294967295
 80080c0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80080c2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080c6:	2b03      	cmp	r3, #3
 80080c8:	d87e      	bhi.n	80081c8 <USB_HC_Init+0x13c>
 80080ca:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <USB_HC_Init+0x44>)
 80080cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d0:	080080e1 	.word	0x080080e1
 80080d4:	0800818b 	.word	0x0800818b
 80080d8:	080080e1 	.word	0x080080e1
 80080dc:	0800814d 	.word	0x0800814d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80080e0:	78fb      	ldrb	r3, [r7, #3]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080ec:	461a      	mov	r2, r3
 80080ee:	f240 439d 	movw	r3, #1181	; 0x49d
 80080f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80080f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	da10      	bge.n	800811e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	4413      	add	r3, r2
 8008104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	78fa      	ldrb	r2, [r7, #3]
 800810c:	0151      	lsls	r1, r2, #5
 800810e:	68ba      	ldr	r2, [r7, #8]
 8008110:	440a      	add	r2, r1
 8008112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800811a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800811c:	e057      	b.n	80081ce <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008126:	2b00      	cmp	r3, #0
 8008128:	d051      	beq.n	80081ce <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800812a:	78fb      	ldrb	r3, [r7, #3]
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4413      	add	r3, r2
 8008132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	78fa      	ldrb	r2, [r7, #3]
 800813a:	0151      	lsls	r1, r2, #5
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	440a      	add	r2, r1
 8008140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008144:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008148:	60d3      	str	r3, [r2, #12]
      break;
 800814a:	e040      	b.n	80081ce <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800814c:	78fb      	ldrb	r3, [r7, #3]
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	4413      	add	r3, r2
 8008154:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008158:	461a      	mov	r2, r3
 800815a:	f240 639d 	movw	r3, #1693	; 0x69d
 800815e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008160:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da34      	bge.n	80081d2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	4413      	add	r3, r2
 8008170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	0151      	lsls	r1, r2, #5
 800817a:	68ba      	ldr	r2, [r7, #8]
 800817c:	440a      	add	r2, r1
 800817e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008186:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008188:	e023      	b.n	80081d2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800818a:	78fb      	ldrb	r3, [r7, #3]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008196:	461a      	mov	r2, r3
 8008198:	f240 2325 	movw	r3, #549	; 0x225
 800819c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800819e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da17      	bge.n	80081d6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80081c0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80081c4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80081c6:	e006      	b.n	80081d6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	75fb      	strb	r3, [r7, #23]
      break;
 80081cc:	e004      	b.n	80081d8 <USB_HC_Init+0x14c>
      break;
 80081ce:	bf00      	nop
 80081d0:	e002      	b.n	80081d8 <USB_HC_Init+0x14c>
      break;
 80081d2:	bf00      	nop
 80081d4:	e000      	b.n	80081d8 <USB_HC_Init+0x14c>
      break;
 80081d6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081de:	699a      	ldr	r2, [r3, #24]
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	2101      	movs	r1, #1
 80081e8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ec:	68b9      	ldr	r1, [r7, #8]
 80081ee:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081f2:	4313      	orrs	r3, r2
 80081f4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008202:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008206:	2b00      	cmp	r3, #0
 8008208:	da03      	bge.n	8008212 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800820a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	e001      	b.n	8008216 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008216:	f897 3020 	ldrb.w	r3, [r7, #32]
 800821a:	2b02      	cmp	r3, #2
 800821c:	d103      	bne.n	8008226 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800821e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008222:	60fb      	str	r3, [r7, #12]
 8008224:	e001      	b.n	800822a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008226:	2300      	movs	r3, #0
 8008228:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800822a:	787b      	ldrb	r3, [r7, #1]
 800822c:	059b      	lsls	r3, r3, #22
 800822e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008232:	78bb      	ldrb	r3, [r7, #2]
 8008234:	02db      	lsls	r3, r3, #11
 8008236:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800823a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800823c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008240:	049b      	lsls	r3, r3, #18
 8008242:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008246:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008248:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800824a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800824e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	0159      	lsls	r1, r3, #5
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	440b      	add	r3, r1
 800825c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008260:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008266:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008268:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800826c:	2b03      	cmp	r3, #3
 800826e:	d10f      	bne.n	8008290 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	78fa      	ldrb	r2, [r7, #3]
 8008280:	0151      	lsls	r1, r2, #5
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	440a      	add	r2, r1
 8008286:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800828a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800828e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008290:	7dfb      	ldrb	r3, [r7, #23]
}
 8008292:	4618      	mov	r0, r3
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop

080082a0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08c      	sub	sp, #48	; 0x30
 80082a4:	af02      	add	r7, sp, #8
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80082b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082bc:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d028      	beq.n	800831c <USB_HC_StartXfer+0x7c>
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	791b      	ldrb	r3, [r3, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d124      	bne.n	800831c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d10b      	bne.n	80082f0 <USB_HC_StartXfer+0x50>
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	795b      	ldrb	r3, [r3, #5]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d107      	bne.n	80082f0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	785b      	ldrb	r3, [r3, #1]
 80082e4:	4619      	mov	r1, r3
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 fa2e 	bl	8008748 <USB_DoPing>
      return HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e112      	b.n	8008516 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	2b01      	cmp	r3, #1
 80082f4:	d112      	bne.n	800831c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80082f6:	69fb      	ldr	r3, [r7, #28]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008302:	68db      	ldr	r3, [r3, #12]
 8008304:	69fa      	ldr	r2, [r7, #28]
 8008306:	0151      	lsls	r1, r2, #5
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	440a      	add	r2, r1
 800830c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008310:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008314:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	2200      	movs	r2, #0
 800831a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	691b      	ldr	r3, [r3, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d018      	beq.n	8008356 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	8912      	ldrh	r2, [r2, #8]
 800832c:	4413      	add	r3, r2
 800832e:	3b01      	subs	r3, #1
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	8912      	ldrh	r2, [r2, #8]
 8008334:	fbb3 f3f2 	udiv	r3, r3, r2
 8008338:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800833a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800833c:	8b7b      	ldrh	r3, [r7, #26]
 800833e:	429a      	cmp	r2, r3
 8008340:	d90b      	bls.n	800835a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008342:	8b7b      	ldrh	r3, [r7, #26]
 8008344:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008346:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	8912      	ldrh	r2, [r2, #8]
 800834c:	fb02 f203 	mul.w	r2, r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	611a      	str	r2, [r3, #16]
 8008354:	e001      	b.n	800835a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008356:	2301      	movs	r3, #1
 8008358:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	78db      	ldrb	r3, [r3, #3]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d006      	beq.n	8008370 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008362:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	8912      	ldrh	r2, [r2, #8]
 8008368:	fb02 f203 	mul.w	r2, r2, r3
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008378:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800837a:	04d9      	lsls	r1, r3, #19
 800837c:	4b68      	ldr	r3, [pc, #416]	; (8008520 <USB_HC_StartXfer+0x280>)
 800837e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008380:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	7a9b      	ldrb	r3, [r3, #10]
 8008386:	075b      	lsls	r3, r3, #29
 8008388:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800838c:	69f9      	ldr	r1, [r7, #28]
 800838e:	0148      	lsls	r0, r1, #5
 8008390:	6a39      	ldr	r1, [r7, #32]
 8008392:	4401      	add	r1, r0
 8008394:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008398:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800839a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d009      	beq.n	80083b6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	68d9      	ldr	r1, [r3, #12]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083b2:	460a      	mov	r2, r1
 80083b4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bf0c      	ite	eq
 80083c6:	2301      	moveq	r3, #1
 80083c8:	2300      	movne	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	69fa      	ldr	r2, [r7, #28]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	6a3a      	ldr	r2, [r7, #32]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80083ec:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	7e7b      	ldrb	r3, [r7, #25]
 80083fe:	075b      	lsls	r3, r3, #29
 8008400:	69f9      	ldr	r1, [r7, #28]
 8008402:	0148      	lsls	r0, r1, #5
 8008404:	6a39      	ldr	r1, [r7, #32]
 8008406:	4401      	add	r1, r0
 8008408:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800840c:	4313      	orrs	r3, r2
 800840e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008410:	69fb      	ldr	r3, [r7, #28]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	6a3b      	ldr	r3, [r7, #32]
 8008416:	4413      	add	r3, r2
 8008418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a41      	ldr	r2, [pc, #260]	; (8008524 <USB_HC_StartXfer+0x284>)
 8008420:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008422:	4b40      	ldr	r3, [pc, #256]	; (8008524 <USB_HC_StartXfer+0x284>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800842a:	4a3e      	ldr	r2, [pc, #248]	; (8008524 <USB_HC_StartXfer+0x284>)
 800842c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	78db      	ldrb	r3, [r3, #3]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d006      	beq.n	8008444 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008436:	4b3b      	ldr	r3, [pc, #236]	; (8008524 <USB_HC_StartXfer+0x284>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843e:	4a39      	ldr	r2, [pc, #228]	; (8008524 <USB_HC_StartXfer+0x284>)
 8008440:	6013      	str	r3, [r2, #0]
 8008442:	e005      	b.n	8008450 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008444:	4b37      	ldr	r3, [pc, #220]	; (8008524 <USB_HC_StartXfer+0x284>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800844c:	4a35      	ldr	r2, [pc, #212]	; (8008524 <USB_HC_StartXfer+0x284>)
 800844e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008450:	4b34      	ldr	r3, [pc, #208]	; (8008524 <USB_HC_StartXfer+0x284>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008458:	4a32      	ldr	r2, [pc, #200]	; (8008524 <USB_HC_StartXfer+0x284>)
 800845a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	4413      	add	r3, r2
 8008464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008468:	461a      	mov	r2, r3
 800846a:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <USB_HC_StartXfer+0x284>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8008470:	79fb      	ldrb	r3, [r7, #7]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d14e      	bne.n	8008514 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	78db      	ldrb	r3, [r3, #3]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d14a      	bne.n	8008514 <USB_HC_StartXfer+0x274>
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d046      	beq.n	8008514 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	79db      	ldrb	r3, [r3, #7]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d830      	bhi.n	80084f0 <USB_HC_StartXfer+0x250>
 800848e:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <USB_HC_StartXfer+0x1f4>)
 8008490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008494:	080084a5 	.word	0x080084a5
 8008498:	080084c9 	.word	0x080084c9
 800849c:	080084a5 	.word	0x080084a5
 80084a0:	080084c9 	.word	0x080084c9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	3303      	adds	r3, #3
 80084aa:	089b      	lsrs	r3, r3, #2
 80084ac:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80084ae:	8afa      	ldrh	r2, [r7, #22]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d91c      	bls.n	80084f4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	f043 0220 	orr.w	r2, r3, #32
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	619a      	str	r2, [r3, #24]
          }
          break;
 80084c6:	e015      	b.n	80084f4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	3303      	adds	r3, #3
 80084ce:	089b      	lsrs	r3, r3, #2
 80084d0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80084d2:	8afa      	ldrh	r2, [r7, #22]
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	b29b      	uxth	r3, r3
 80084de:	429a      	cmp	r2, r3
 80084e0:	d90a      	bls.n	80084f8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	619a      	str	r2, [r3, #24]
          }
          break;
 80084ee:	e003      	b.n	80084f8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80084f0:	bf00      	nop
 80084f2:	e002      	b.n	80084fa <USB_HC_StartXfer+0x25a>
          break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <USB_HC_StartXfer+0x25a>
          break;
 80084f8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	68d9      	ldr	r1, [r3, #12]
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	785a      	ldrb	r2, [r3, #1]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	b298      	uxth	r0, r3
 8008508:	2300      	movs	r3, #0
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	4603      	mov	r3, r0
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fb86 	bl	8007c20 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3728      	adds	r7, #40	; 0x28
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	1ff80000 	.word	0x1ff80000
 8008524:	20001358 	.word	0x20001358

08008528 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008528:	b480      	push	{r7}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	b29b      	uxth	r3, r3
}
 800853e:	4618      	mov	r0, r3
 8008540:	3714      	adds	r7, #20
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800854a:	b480      	push	{r7}
 800854c:	b087      	sub	sp, #28
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800855a:	78fb      	ldrb	r3, [r7, #3]
 800855c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800855e:	2300      	movs	r3, #0
 8008560:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	015a      	lsls	r2, r3, #5
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	4413      	add	r3, r2
 800856a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	0c9b      	lsrs	r3, r3, #18
 8008572:	f003 0303 	and.w	r3, r3, #3
 8008576:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <USB_HC_Halt+0x3a>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d16c      	bne.n	800865e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	015a      	lsls	r2, r3, #5
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	4413      	add	r3, r2
 800858c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	0151      	lsls	r1, r2, #5
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	440a      	add	r2, r1
 800859a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800859e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80085a2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d143      	bne.n	8008638 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	0151      	lsls	r1, r2, #5
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	440a      	add	r2, r1
 80085c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	693a      	ldr	r2, [r7, #16]
 8008604:	440a      	add	r2, r1
 8008606:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800860a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800860e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	3301      	adds	r3, #1
 8008614:	617b      	str	r3, [r7, #20]
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800861c:	d81d      	bhi.n	800865a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	4413      	add	r3, r2
 8008626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008630:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008634:	d0ec      	beq.n	8008610 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008636:	e080      	b.n	800873a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	440a      	add	r2, r1
 800864e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008652:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008656:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008658:	e06f      	b.n	800873a <USB_HC_Halt+0x1f0>
          break;
 800865a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800865c:	e06d      	b.n	800873a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	693a      	ldr	r2, [r7, #16]
 8008672:	440a      	add	r2, r1
 8008674:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800867c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d143      	bne.n	8008716 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	4413      	add	r3, r2
 8008696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	0151      	lsls	r1, r2, #5
 80086c0:	693a      	ldr	r2, [r7, #16]
 80086c2:	440a      	add	r2, r1
 80086c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80086cc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80086ec:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	3301      	adds	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086fa:	d81d      	bhi.n	8008738 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4413      	add	r3, r2
 8008704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800870e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008712:	d0ec      	beq.n	80086ee <USB_HC_Halt+0x1a4>
 8008714:	e011      	b.n	800873a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	015a      	lsls	r2, r3, #5
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	4413      	add	r3, r2
 800871e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	0151      	lsls	r1, r2, #5
 8008728:	693a      	ldr	r2, [r7, #16]
 800872a:	440a      	add	r2, r1
 800872c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	e000      	b.n	800873a <USB_HC_Halt+0x1f0>
          break;
 8008738:	bf00      	nop
    }
  }

  return HAL_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008748:	b480      	push	{r7}
 800874a:	b087      	sub	sp, #28
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	460b      	mov	r3, r1
 8008752:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800875c:	2301      	movs	r3, #1
 800875e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	04da      	lsls	r2, r3, #19
 8008764:	4b15      	ldr	r3, [pc, #84]	; (80087bc <USB_DoPing+0x74>)
 8008766:	4013      	ands	r3, r2
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	440a      	add	r2, r1
 8008770:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008774:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008778:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008790:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008798:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087a6:	461a      	mov	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	371c      	adds	r7, #28
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
 80087ba:	bf00      	nop
 80087bc:	1ff80000 	.word	0x1ff80000

080087c0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f7ff f9a1 	bl	8007b18 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80087d6:	2110      	movs	r1, #16
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff f9d9 	bl	8007b90 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f7ff f9fc 	bl	8007bdc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80087e4:	2300      	movs	r3, #0
 80087e6:	613b      	str	r3, [r7, #16]
 80087e8:	e01f      	b.n	800882a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	015a      	lsls	r2, r3, #5
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4413      	add	r3, r2
 80087f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008800:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008808:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008810:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	4413      	add	r3, r2
 800881a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800881e:	461a      	mov	r2, r3
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	3301      	adds	r3, #1
 8008828:	613b      	str	r3, [r7, #16]
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	2b0f      	cmp	r3, #15
 800882e:	d9dc      	bls.n	80087ea <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008830:	2300      	movs	r3, #0
 8008832:	613b      	str	r3, [r7, #16]
 8008834:	e034      	b.n	80088a0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	015a      	lsls	r2, r3, #5
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	4413      	add	r3, r2
 800883e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800884c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008854:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800885c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800886a:	461a      	mov	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	3301      	adds	r3, #1
 8008874:	617b      	str	r3, [r7, #20]
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800887c:	d80c      	bhi.n	8008898 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	4413      	add	r3, r2
 8008886:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008894:	d0ec      	beq.n	8008870 <USB_StopHost+0xb0>
 8008896:	e000      	b.n	800889a <USB_StopHost+0xda>
        break;
 8008898:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3301      	adds	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	2b0f      	cmp	r3, #15
 80088a4:	d9c7      	bls.n	8008836 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ac:	461a      	mov	r2, r3
 80088ae:	f04f 33ff 	mov.w	r3, #4294967295
 80088b2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f04f 32ff 	mov.w	r2, #4294967295
 80088ba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f7ff f91a 	bl	8007af6 <USB_EnableGlobalInt>

  return HAL_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80088d0:	4904      	ldr	r1, [pc, #16]	; (80088e4 <MX_FATFS_Init+0x18>)
 80088d2:	4805      	ldr	r0, [pc, #20]	; (80088e8 <MX_FATFS_Init+0x1c>)
 80088d4:	f005 fb7a 	bl	800dfcc <FATFS_LinkDriver>
 80088d8:	4603      	mov	r3, r0
 80088da:	461a      	mov	r2, r3
 80088dc:	4b03      	ldr	r3, [pc, #12]	; (80088ec <MX_FATFS_Init+0x20>)
 80088de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80088e0:	bf00      	nop
 80088e2:	bd80      	pop	{r7, pc}
 80088e4:	200015b0 	.word	0x200015b0
 80088e8:	0800f014 	.word	0x0800f014
 80088ec:	20001a14 	.word	0x20001a14

080088f0 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80088f0:	b480      	push	{r7}
 80088f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80088f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	4619      	mov	r1, r3
 800892a:	4808      	ldr	r0, [pc, #32]	; (800894c <USBH_status+0x34>)
 800892c:	f000 fe11 	bl	8009552 <USBH_MSC_UnitIsReady>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <USBH_status+0x24>
  {
    res = RES_OK;
 8008936:	2300      	movs	r3, #0
 8008938:	73fb      	strb	r3, [r7, #15]
 800893a:	e001      	b.n	8008940 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008940:	7bfb      	ldrb	r3, [r7, #15]
}
 8008942:	4618      	mov	r0, r3
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	20001a18 	.word	0x20001a18

08008950 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b094      	sub	sp, #80	; 0x50
 8008954:	af02      	add	r7, sp, #8
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	4603      	mov	r3, r0
 800895e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008966:	7bf9      	ldrb	r1, [r7, #15]
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	4812      	ldr	r0, [pc, #72]	; (80089bc <USBH_read+0x6c>)
 8008972:	f000 fe38 	bl	80095e6 <USBH_MSC_Read>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d103      	bne.n	8008984 <USBH_read+0x34>
  {
    res = RES_OK;
 800897c:	2300      	movs	r3, #0
 800897e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008982:	e015      	b.n	80089b0 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008984:	f107 0210 	add.w	r2, r7, #16
 8008988:	7bfb      	ldrb	r3, [r7, #15]
 800898a:	4619      	mov	r1, r3
 800898c:	480b      	ldr	r0, [pc, #44]	; (80089bc <USBH_read+0x6c>)
 800898e:	f000 fe06 	bl	800959e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008992:	7f7b      	ldrb	r3, [r7, #29]
 8008994:	2b28      	cmp	r3, #40	; 0x28
 8008996:	d003      	beq.n	80089a0 <USBH_read+0x50>
 8008998:	2b3a      	cmp	r3, #58	; 0x3a
 800899a:	d001      	beq.n	80089a0 <USBH_read+0x50>
 800899c:	2b04      	cmp	r3, #4
 800899e:	d103      	bne.n	80089a8 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80089a0:	2303      	movs	r3, #3
 80089a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80089a6:	e003      	b.n	80089b0 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80089ae:	bf00      	nop
    }
  }

  return res;
 80089b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3748      	adds	r7, #72	; 0x48
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20001a18 	.word	0x20001a18

080089c0 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b094      	sub	sp, #80	; 0x50
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60b9      	str	r1, [r7, #8]
 80089c8:	607a      	str	r2, [r7, #4]
 80089ca:	603b      	str	r3, [r7, #0]
 80089cc:	4603      	mov	r3, r0
 80089ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80089d6:	7bf9      	ldrb	r1, [r7, #15]
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	9300      	str	r3, [sp, #0]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	4817      	ldr	r0, [pc, #92]	; (8008a40 <USBH_write+0x80>)
 80089e2:	f000 fe69 	bl	80096b8 <USBH_MSC_Write>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d103      	bne.n	80089f4 <USBH_write+0x34>
  {
    res = RES_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80089f2:	e01f      	b.n	8008a34 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80089f4:	f107 0210 	add.w	r2, r7, #16
 80089f8:	7bfb      	ldrb	r3, [r7, #15]
 80089fa:	4619      	mov	r1, r3
 80089fc:	4810      	ldr	r0, [pc, #64]	; (8008a40 <USBH_write+0x80>)
 80089fe:	f000 fdce 	bl	800959e <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008a02:	7f7b      	ldrb	r3, [r7, #29]
 8008a04:	2b27      	cmp	r3, #39	; 0x27
 8008a06:	d009      	beq.n	8008a1c <USBH_write+0x5c>
 8008a08:	2b27      	cmp	r3, #39	; 0x27
 8008a0a:	dc02      	bgt.n	8008a12 <USBH_write+0x52>
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d009      	beq.n	8008a24 <USBH_write+0x64>
 8008a10:	e00c      	b.n	8008a2c <USBH_write+0x6c>
 8008a12:	2b28      	cmp	r3, #40	; 0x28
 8008a14:	d006      	beq.n	8008a24 <USBH_write+0x64>
 8008a16:	2b3a      	cmp	r3, #58	; 0x3a
 8008a18:	d004      	beq.n	8008a24 <USBH_write+0x64>
 8008a1a:	e007      	b.n	8008a2c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008a1c:	2302      	movs	r3, #2
 8008a1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a22:	e007      	b.n	8008a34 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008a24:	2303      	movs	r3, #3
 8008a26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a2a:	e003      	b.n	8008a34 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008a32:	bf00      	nop
    }
  }

  return res;
 8008a34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3748      	adds	r7, #72	; 0x48
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20001a18 	.word	0x20001a18

08008a44 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b090      	sub	sp, #64	; 0x40
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	603a      	str	r2, [r7, #0]
 8008a4e:	71fb      	strb	r3, [r7, #7]
 8008a50:	460b      	mov	r3, r1
 8008a52:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008a5a:	79bb      	ldrb	r3, [r7, #6]
 8008a5c:	2b03      	cmp	r3, #3
 8008a5e:	d852      	bhi.n	8008b06 <USBH_ioctl+0xc2>
 8008a60:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <USBH_ioctl+0x24>)
 8008a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a66:	bf00      	nop
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008a81 	.word	0x08008a81
 8008a70:	08008aab 	.word	0x08008aab
 8008a74:	08008ad7 	.word	0x08008ad7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008a7e:	e045      	b.n	8008b0c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008a80:	f107 0208 	add.w	r2, r7, #8
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	4619      	mov	r1, r3
 8008a88:	4823      	ldr	r0, [pc, #140]	; (8008b18 <USBH_ioctl+0xd4>)
 8008a8a:	f000 fd88 	bl	800959e <USBH_MSC_GetLUNInfo>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d106      	bne.n	8008aa2 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008aa0:	e034      	b.n	8008b0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008aa8:	e030      	b.n	8008b0c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	79fb      	ldrb	r3, [r7, #7]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4819      	ldr	r0, [pc, #100]	; (8008b18 <USBH_ioctl+0xd4>)
 8008ab4:	f000 fd73 	bl	800959e <USBH_MSC_GetLUNInfo>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d107      	bne.n	8008ace <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008abe:	8a3b      	ldrh	r3, [r7, #16]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008acc:	e01e      	b.n	8008b0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ad4:	e01a      	b.n	8008b0c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ad6:	f107 0208 	add.w	r2, r7, #8
 8008ada:	79fb      	ldrb	r3, [r7, #7]
 8008adc:	4619      	mov	r1, r3
 8008ade:	480e      	ldr	r0, [pc, #56]	; (8008b18 <USBH_ioctl+0xd4>)
 8008ae0:	f000 fd5d 	bl	800959e <USBH_MSC_GetLUNInfo>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d109      	bne.n	8008afe <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008aea:	8a3b      	ldrh	r3, [r7, #16]
 8008aec:	0a5b      	lsrs	r3, r3, #9
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	461a      	mov	r2, r3
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008afc:	e006      	b.n	8008b0c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008b04:	e002      	b.n	8008b0c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008b06:	2304      	movs	r3, #4
 8008b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008b0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3740      	adds	r7, #64	; 0x40
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20001a18 	.word	0x20001a18

08008b1c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008b1c:	b590      	push	{r4, r7, lr}
 8008b1e:	b089      	sub	sp, #36	; 0x24
 8008b20:	af04      	add	r7, sp, #16
 8008b22:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b2a:	7919      	ldrb	r1, [r3, #4]
 8008b2c:	2350      	movs	r3, #80	; 0x50
 8008b2e:	2206      	movs	r2, #6
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f001 fc4f 	bl	800a3d4 <USBH_FindInterface>
 8008b36:	4603      	mov	r3, r0
 8008b38:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
 8008b3c:	2bff      	cmp	r3, #255	; 0xff
 8008b3e:	d002      	beq.n	8008b46 <USBH_MSC_InterfaceInit+0x2a>
 8008b40:	7bfb      	ldrb	r3, [r7, #15]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d901      	bls.n	8008b4a <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008b46:	2302      	movs	r3, #2
 8008b48:	e0ef      	b.n	8008d2a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008b4a:	7bfb      	ldrb	r3, [r7, #15]
 8008b4c:	4619      	mov	r1, r3
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fc24 	bl	800a39c <USBH_SelectInterface>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008b58:	7bbb      	ldrb	r3, [r7, #14]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e0e3      	b.n	8008d2a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008b68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008b6c:	f005 fda4 	bl	800e6b8 <malloc>
 8008b70:	4603      	mov	r3, r0
 8008b72:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008b7a:	69db      	ldr	r3, [r3, #28]
 8008b7c:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008b84:	2302      	movs	r3, #2
 8008b86:	e0d0      	b.n	8008d2a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008b88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	68b8      	ldr	r0, [r7, #8]
 8008b90:	f005 fdad 	bl	800e6ee <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008b94:	7bfb      	ldrb	r3, [r7, #15]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	211a      	movs	r1, #26
 8008b9a:	fb01 f303 	mul.w	r3, r1, r3
 8008b9e:	4413      	add	r3, r2
 8008ba0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	b25b      	sxtb	r3, r3
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	da16      	bge.n	8008bda <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	211a      	movs	r1, #26
 8008bb2:	fb01 f303 	mul.w	r3, r1, r3
 8008bb6:	4413      	add	r3, r2
 8008bb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bbc:	781a      	ldrb	r2, [r3, #0]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bc2:	7bfb      	ldrb	r3, [r7, #15]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	211a      	movs	r1, #26
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008bd2:	881a      	ldrh	r2, [r3, #0]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	815a      	strh	r2, [r3, #10]
 8008bd8:	e015      	b.n	8008c06 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008bda:	7bfb      	ldrb	r3, [r7, #15]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	211a      	movs	r1, #26
 8008be0:	fb01 f303 	mul.w	r3, r1, r3
 8008be4:	4413      	add	r3, r2
 8008be6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	211a      	movs	r1, #26
 8008bf6:	fb01 f303 	mul.w	r3, r1, r3
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c00:	881a      	ldrh	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008c06:	7bfb      	ldrb	r3, [r7, #15]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	211a      	movs	r1, #26
 8008c0c:	fb01 f303 	mul.w	r3, r1, r3
 8008c10:	4413      	add	r3, r2
 8008c12:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	b25b      	sxtb	r3, r3
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	da16      	bge.n	8008c4c <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	211a      	movs	r1, #26
 8008c24:	fb01 f303 	mul.w	r3, r1, r3
 8008c28:	4413      	add	r3, r2
 8008c2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	211a      	movs	r1, #26
 8008c3a:	fb01 f303 	mul.w	r3, r1, r3
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c44:	881a      	ldrh	r2, [r3, #0]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	815a      	strh	r2, [r3, #10]
 8008c4a:	e015      	b.n	8008c78 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	211a      	movs	r1, #26
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008c5c:	781a      	ldrb	r2, [r3, #0]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	211a      	movs	r1, #26
 8008c68:	fb01 f303 	mul.w	r3, r1, r3
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008c72:	881a      	ldrh	r2, [r3, #0]
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2200      	movs	r2, #0
 8008c82:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	2200      	movs	r2, #0
 8008c88:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	799b      	ldrb	r3, [r3, #6]
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f002 fdc2 	bl	800b81a <USBH_AllocPipe>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	79db      	ldrb	r3, [r3, #7]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f002 fdb8 	bl	800b81a <USBH_AllocPipe>
 8008caa:	4603      	mov	r3, r0
 8008cac:	461a      	mov	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fda4 	bl	8009800 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	7959      	ldrb	r1, [r3, #5]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	7998      	ldrb	r0, [r3, #6]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008ccc:	68ba      	ldr	r2, [r7, #8]
 8008cce:	8912      	ldrh	r2, [r2, #8]
 8008cd0:	9202      	str	r2, [sp, #8]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	9201      	str	r2, [sp, #4]
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	4623      	mov	r3, r4
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f002 fd6d 	bl	800b7bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	7919      	ldrb	r1, [r3, #4]
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	79d8      	ldrb	r0, [r3, #7]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	8952      	ldrh	r2, [r2, #10]
 8008cfa:	9202      	str	r2, [sp, #8]
 8008cfc:	2202      	movs	r2, #2
 8008cfe:	9201      	str	r2, [sp, #4]
 8008d00:	9300      	str	r3, [sp, #0]
 8008d02:	4623      	mov	r3, r4
 8008d04:	4602      	mov	r2, r0
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f002 fd58 	bl	800b7bc <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	791b      	ldrb	r3, [r3, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	4619      	mov	r1, r3
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f005 fbeb 	bl	800e4f0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	795b      	ldrb	r3, [r3, #5]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	4619      	mov	r1, r3
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f005 fbe4 	bl	800e4f0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd90      	pop	{r4, r7, pc}

08008d32 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	795b      	ldrb	r3, [r3, #5]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00e      	beq.n	8008d6a <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	795b      	ldrb	r3, [r3, #5]
 8008d50:	4619      	mov	r1, r3
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f002 fd51 	bl	800b7fa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	795b      	ldrb	r3, [r3, #5]
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 fd7c 	bl	800b85c <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	791b      	ldrb	r3, [r3, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00e      	beq.n	8008d90 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	791b      	ldrb	r3, [r3, #4]
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f002 fd3e 	bl	800b7fa <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	791b      	ldrb	r3, [r3, #4]
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f002 fd69 	bl	800b85c <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d00b      	beq.n	8008db4 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008da2:	69db      	ldr	r3, [r3, #28]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f005 fc8f 	bl	800e6c8 <free>
    phost->pActiveClass->pData = 0U;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db0:	2200      	movs	r2, #0
 8008db2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dcc:	69db      	ldr	r3, [r3, #28]
 8008dce:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	7b9b      	ldrb	r3, [r3, #14]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d004      	beq.n	8008de6 <USBH_MSC_ClassRequest+0x28>
 8008ddc:	2b03      	cmp	r3, #3
 8008dde:	d03e      	beq.n	8008e5e <USBH_MSC_ClassRequest+0xa0>
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d000      	beq.n	8008de6 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8008de4:	e04a      	b.n	8008e7c <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	4619      	mov	r1, r3
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fcea 	bl	80097c4 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008df0:	4603      	mov	r3, r0
 8008df2:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	2b03      	cmp	r3, #3
 8008df8:	d104      	bne.n	8008e04 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8008e04:	7bfb      	ldrb	r3, [r7, #15]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d135      	bne.n	8008e76 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	d804      	bhi.n	8008e1c <USBH_MSC_ClassRequest+0x5e>
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	3301      	adds	r3, #1
 8008e18:	b2da      	uxtb	r2, r3
 8008e1a:	e000      	b.n	8008e1e <USBH_MSC_ClassRequest+0x60>
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	73bb      	strb	r3, [r7, #14]
 8008e26:	e014      	b.n	8008e52 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	2134      	movs	r1, #52	; 0x34
 8008e2e:	fb01 f303 	mul.w	r3, r1, r3
 8008e32:	4413      	add	r3, r2
 8008e34:	3392      	adds	r3, #146	; 0x92
 8008e36:	2202      	movs	r2, #2
 8008e38:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	2134      	movs	r1, #52	; 0x34
 8008e40:	fb01 f303 	mul.w	r3, r1, r3
 8008e44:	4413      	add	r3, r2
 8008e46:	33c1      	adds	r3, #193	; 0xc1
 8008e48:	2200      	movs	r2, #0
 8008e4a:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008e4c:	7bbb      	ldrb	r3, [r7, #14]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	73bb      	strb	r3, [r7, #14]
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	7bba      	ldrb	r2, [r7, #14]
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d3e5      	bcc.n	8008e28 <USBH_MSC_ClassRequest+0x6a>
      break;
 8008e5c:	e00b      	b.n	8008e76 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f002 f878 	bl	800af56 <USBH_ClrFeature>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d106      	bne.n	8008e7a <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	7bda      	ldrb	r2, [r3, #15]
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	739a      	strb	r2, [r3, #14]
      break;
 8008e74:	e001      	b.n	8008e7a <USBH_MSC_ClassRequest+0xbc>
      break;
 8008e76:	bf00      	nop
 8008e78:	e000      	b.n	8008e7c <USBH_MSC_ClassRequest+0xbe>
      break;
 8008e7a:	bf00      	nop
  }

  return status;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e96:	69db      	ldr	r3, [r3, #28]
 8008e98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	7b1b      	ldrb	r3, [r3, #12]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <USBH_MSC_Process+0x2e>
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	f000 8271 	beq.w	8009396 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008eb4:	e272      	b.n	800939c <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	781b      	ldrb	r3, [r3, #0]
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	f080 824f 	bcs.w	8009366 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ece:	4619      	mov	r1, r3
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	2334      	movs	r3, #52	; 0x34
 8008ed4:	fb03 f301 	mul.w	r3, r3, r1
 8008ed8:	4413      	add	r3, r2
 8008eda:	3391      	adds	r3, #145	; 0x91
 8008edc:	2201      	movs	r2, #1
 8008ede:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	2334      	movs	r3, #52	; 0x34
 8008eec:	fb03 f301 	mul.w	r3, r3, r1
 8008ef0:	4413      	add	r3, r2
 8008ef2:	3390      	adds	r3, #144	; 0x90
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	f200 8243 	bhi.w	8009382 <USBH_MSC_Process+0x4fa>
 8008efc:	a201      	add	r2, pc, #4	; (adr r2, 8008f04 <USBH_MSC_Process+0x7c>)
 8008efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f02:	bf00      	nop
 8008f04:	08008f29 	.word	0x08008f29
 8008f08:	08009383 	.word	0x08009383
 8008f0c:	08008ff1 	.word	0x08008ff1
 8008f10:	08009175 	.word	0x08009175
 8008f14:	08008f4f 	.word	0x08008f4f
 8008f18:	08009241 	.word	0x08009241
 8008f1c:	08009383 	.word	0x08009383
 8008f20:	08009383 	.word	0x08009383
 8008f24:	08009355 	.word	0x08009355
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008f28:	693b      	ldr	r3, [r7, #16]
 8008f2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f2e:	4619      	mov	r1, r3
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	2334      	movs	r3, #52	; 0x34
 8008f34:	fb03 f301 	mul.w	r3, r3, r1
 8008f38:	4413      	add	r3, r2
 8008f3a:	3390      	adds	r3, #144	; 0x90
 8008f3c:	2204      	movs	r2, #4
 8008f3e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008f4c:	e222      	b.n	8009394 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f54:	b2d9      	uxtb	r1, r3
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	2334      	movs	r3, #52	; 0x34
 8008f60:	fb03 f302 	mul.w	r3, r3, r2
 8008f64:	3398      	adds	r3, #152	; 0x98
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	3307      	adds	r3, #7
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 ff68 	bl	8009e44 <USBH_MSC_SCSI_Inquiry>
 8008f74:	4603      	mov	r3, r0
 8008f76:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008f84:	4619      	mov	r1, r3
 8008f86:	693a      	ldr	r2, [r7, #16]
 8008f88:	2334      	movs	r3, #52	; 0x34
 8008f8a:	fb03 f301 	mul.w	r3, r3, r1
 8008f8e:	4413      	add	r3, r2
 8008f90:	3390      	adds	r3, #144	; 0x90
 8008f92:	2202      	movs	r2, #2
 8008f94:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d10c      	bne.n	8008fb6 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	2334      	movs	r3, #52	; 0x34
 8008fa8:	fb03 f301 	mul.w	r3, r3, r1
 8008fac:	4413      	add	r3, r2
 8008fae:	3390      	adds	r3, #144	; 0x90
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	701a      	strb	r2, [r3, #0]
            break;
 8008fb4:	e1e7      	b.n	8009386 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	2b04      	cmp	r3, #4
 8008fba:	f040 81e4 	bne.w	8009386 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	2334      	movs	r3, #52	; 0x34
 8008fca:	fb03 f301 	mul.w	r3, r3, r1
 8008fce:	4413      	add	r3, r2
 8008fd0:	3390      	adds	r3, #144	; 0x90
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008fdc:	4619      	mov	r1, r3
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	2334      	movs	r3, #52	; 0x34
 8008fe2:	fb03 f301 	mul.w	r3, r3, r1
 8008fe6:	4413      	add	r3, r2
 8008fe8:	3391      	adds	r3, #145	; 0x91
 8008fea:	2202      	movs	r2, #2
 8008fec:	701a      	strb	r2, [r3, #0]
            break;
 8008fee:	e1ca      	b.n	8009386 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fe64 	bl	8009cc8 <USBH_MSC_SCSI_TestUnitReady>
 8009000:	4603      	mov	r3, r0
 8009002:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d149      	bne.n	800909e <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009010:	4619      	mov	r1, r3
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	2334      	movs	r3, #52	; 0x34
 8009016:	fb03 f301 	mul.w	r3, r3, r1
 800901a:	4413      	add	r3, r2
 800901c:	3392      	adds	r3, #146	; 0x92
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00c      	beq.n	800903e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800902a:	4619      	mov	r1, r3
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	2334      	movs	r3, #52	; 0x34
 8009030:	fb03 f301 	mul.w	r3, r3, r1
 8009034:	4413      	add	r3, r2
 8009036:	33c1      	adds	r3, #193	; 0xc1
 8009038:	2201      	movs	r2, #1
 800903a:	701a      	strb	r2, [r3, #0]
 800903c:	e00b      	b.n	8009056 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009044:	4619      	mov	r1, r3
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	2334      	movs	r3, #52	; 0x34
 800904a:	fb03 f301 	mul.w	r3, r3, r1
 800904e:	4413      	add	r3, r2
 8009050:	33c1      	adds	r3, #193	; 0xc1
 8009052:	2200      	movs	r2, #0
 8009054:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800905c:	4619      	mov	r1, r3
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	2334      	movs	r3, #52	; 0x34
 8009062:	fb03 f301 	mul.w	r3, r3, r1
 8009066:	4413      	add	r3, r2
 8009068:	3390      	adds	r3, #144	; 0x90
 800906a:	2203      	movs	r2, #3
 800906c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009074:	4619      	mov	r1, r3
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	2334      	movs	r3, #52	; 0x34
 800907a:	fb03 f301 	mul.w	r3, r3, r1
 800907e:	4413      	add	r3, r2
 8009080:	3391      	adds	r3, #145	; 0x91
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800908c:	4619      	mov	r1, r3
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	2334      	movs	r3, #52	; 0x34
 8009092:	fb03 f301 	mul.w	r3, r3, r1
 8009096:	4413      	add	r3, r2
 8009098:	3392      	adds	r3, #146	; 0x92
 800909a:	2200      	movs	r2, #0
 800909c:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800909e:	7bbb      	ldrb	r3, [r7, #14]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d14a      	bne.n	800913a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090aa:	4619      	mov	r1, r3
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	2334      	movs	r3, #52	; 0x34
 80090b0:	fb03 f301 	mul.w	r3, r3, r1
 80090b4:	4413      	add	r3, r2
 80090b6:	3392      	adds	r3, #146	; 0x92
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d00c      	beq.n	80090d8 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c4:	4619      	mov	r1, r3
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	2334      	movs	r3, #52	; 0x34
 80090ca:	fb03 f301 	mul.w	r3, r3, r1
 80090ce:	4413      	add	r3, r2
 80090d0:	33c1      	adds	r3, #193	; 0xc1
 80090d2:	2201      	movs	r2, #1
 80090d4:	701a      	strb	r2, [r3, #0]
 80090d6:	e00b      	b.n	80090f0 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090de:	4619      	mov	r1, r3
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	2334      	movs	r3, #52	; 0x34
 80090e4:	fb03 f301 	mul.w	r3, r3, r1
 80090e8:	4413      	add	r3, r2
 80090ea:	33c1      	adds	r3, #193	; 0xc1
 80090ec:	2200      	movs	r2, #0
 80090ee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090f6:	4619      	mov	r1, r3
 80090f8:	693a      	ldr	r2, [r7, #16]
 80090fa:	2334      	movs	r3, #52	; 0x34
 80090fc:	fb03 f301 	mul.w	r3, r3, r1
 8009100:	4413      	add	r3, r2
 8009102:	3390      	adds	r3, #144	; 0x90
 8009104:	2205      	movs	r2, #5
 8009106:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800910e:	4619      	mov	r1, r3
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	2334      	movs	r3, #52	; 0x34
 8009114:	fb03 f301 	mul.w	r3, r3, r1
 8009118:	4413      	add	r3, r2
 800911a:	3391      	adds	r3, #145	; 0x91
 800911c:	2201      	movs	r2, #1
 800911e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009126:	4619      	mov	r1, r3
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	2334      	movs	r3, #52	; 0x34
 800912c:	fb03 f301 	mul.w	r3, r3, r1
 8009130:	4413      	add	r3, r2
 8009132:	3392      	adds	r3, #146	; 0x92
 8009134:	2202      	movs	r2, #2
 8009136:	701a      	strb	r2, [r3, #0]
            break;
 8009138:	e127      	b.n	800938a <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800913a:	7bbb      	ldrb	r3, [r7, #14]
 800913c:	2b04      	cmp	r3, #4
 800913e:	f040 8124 	bne.w	800938a <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009148:	4619      	mov	r1, r3
 800914a:	693a      	ldr	r2, [r7, #16]
 800914c:	2334      	movs	r3, #52	; 0x34
 800914e:	fb03 f301 	mul.w	r3, r3, r1
 8009152:	4413      	add	r3, r2
 8009154:	3390      	adds	r3, #144	; 0x90
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009160:	4619      	mov	r1, r3
 8009162:	693a      	ldr	r2, [r7, #16]
 8009164:	2334      	movs	r3, #52	; 0x34
 8009166:	fb03 f301 	mul.w	r3, r3, r1
 800916a:	4413      	add	r3, r2
 800916c:	3391      	adds	r3, #145	; 0x91
 800916e:	2202      	movs	r2, #2
 8009170:	701a      	strb	r2, [r3, #0]
            break;
 8009172:	e10a      	b.n	800938a <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800917a:	b2d9      	uxtb	r1, r3
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009182:	461a      	mov	r2, r3
 8009184:	2334      	movs	r3, #52	; 0x34
 8009186:	fb03 f302 	mul.w	r3, r3, r2
 800918a:	3390      	adds	r3, #144	; 0x90
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	4413      	add	r3, r2
 8009190:	3304      	adds	r3, #4
 8009192:	461a      	mov	r2, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fdda 	bl	8009d4e <USBH_MSC_SCSI_ReadCapacity>
 800919a:	4603      	mov	r3, r0
 800919c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800919e:	7bfb      	ldrb	r3, [r7, #15]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d120      	bne.n	80091e6 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091aa:	4619      	mov	r1, r3
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	2334      	movs	r3, #52	; 0x34
 80091b0:	fb03 f301 	mul.w	r3, r3, r1
 80091b4:	4413      	add	r3, r2
 80091b6:	3390      	adds	r3, #144	; 0x90
 80091b8:	2201      	movs	r2, #1
 80091ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091c2:	4619      	mov	r1, r3
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	2334      	movs	r3, #52	; 0x34
 80091c8:	fb03 f301 	mul.w	r3, r3, r1
 80091cc:	4413      	add	r3, r2
 80091ce:	3391      	adds	r3, #145	; 0x91
 80091d0:	2200      	movs	r2, #0
 80091d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091da:	3301      	adds	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80091e4:	e0d3      	b.n	800938e <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 80091e6:	7bfb      	ldrb	r3, [r7, #15]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d10c      	bne.n	8009206 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091f2:	4619      	mov	r1, r3
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	2334      	movs	r3, #52	; 0x34
 80091f8:	fb03 f301 	mul.w	r3, r3, r1
 80091fc:	4413      	add	r3, r2
 80091fe:	3390      	adds	r3, #144	; 0x90
 8009200:	2205      	movs	r2, #5
 8009202:	701a      	strb	r2, [r3, #0]
            break;
 8009204:	e0c3      	b.n	800938e <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009206:	7bfb      	ldrb	r3, [r7, #15]
 8009208:	2b04      	cmp	r3, #4
 800920a:	f040 80c0 	bne.w	800938e <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009214:	4619      	mov	r1, r3
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	2334      	movs	r3, #52	; 0x34
 800921a:	fb03 f301 	mul.w	r3, r3, r1
 800921e:	4413      	add	r3, r2
 8009220:	3390      	adds	r3, #144	; 0x90
 8009222:	2201      	movs	r2, #1
 8009224:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800922c:	4619      	mov	r1, r3
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	2334      	movs	r3, #52	; 0x34
 8009232:	fb03 f301 	mul.w	r3, r3, r1
 8009236:	4413      	add	r3, r2
 8009238:	3391      	adds	r3, #145	; 0x91
 800923a:	2202      	movs	r2, #2
 800923c:	701a      	strb	r2, [r3, #0]
            break;
 800923e:	e0a6      	b.n	800938e <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009246:	b2d9      	uxtb	r1, r3
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800924e:	461a      	mov	r2, r3
 8009250:	2334      	movs	r3, #52	; 0x34
 8009252:	fb03 f302 	mul.w	r3, r3, r2
 8009256:	3398      	adds	r3, #152	; 0x98
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	4413      	add	r3, r2
 800925c:	3304      	adds	r3, #4
 800925e:	461a      	mov	r2, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fe94 	bl	8009f8e <USBH_MSC_SCSI_RequestSense>
 8009266:	4603      	mov	r3, r0
 8009268:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d145      	bne.n	80092fc <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009276:	4619      	mov	r1, r3
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	2334      	movs	r3, #52	; 0x34
 800927c:	fb03 f301 	mul.w	r3, r3, r1
 8009280:	4413      	add	r3, r2
 8009282:	339c      	adds	r3, #156	; 0x9c
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	2b06      	cmp	r3, #6
 8009288:	d00c      	beq.n	80092a4 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009290:	4619      	mov	r1, r3
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	2334      	movs	r3, #52	; 0x34
 8009296:	fb03 f301 	mul.w	r3, r3, r1
 800929a:	4413      	add	r3, r2
 800929c:	339c      	adds	r3, #156	; 0x9c
 800929e:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d117      	bne.n	80092d4 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d80c      	bhi.n	80092d4 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092c0:	4619      	mov	r1, r3
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	2334      	movs	r3, #52	; 0x34
 80092c6:	fb03 f301 	mul.w	r3, r3, r1
 80092ca:	4413      	add	r3, r2
 80092cc:	3390      	adds	r3, #144	; 0x90
 80092ce:	2202      	movs	r2, #2
 80092d0:	701a      	strb	r2, [r3, #0]
                  break;
 80092d2:	e05f      	b.n	8009394 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092da:	4619      	mov	r1, r3
 80092dc:	693a      	ldr	r2, [r7, #16]
 80092de:	2334      	movs	r3, #52	; 0x34
 80092e0:	fb03 f301 	mul.w	r3, r3, r1
 80092e4:	4413      	add	r3, r2
 80092e6:	3390      	adds	r3, #144	; 0x90
 80092e8:	2201      	movs	r2, #1
 80092ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092f2:	3301      	adds	r3, #1
 80092f4:	b29a      	uxth	r2, r3
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
 80092fe:	2b02      	cmp	r3, #2
 8009300:	d10c      	bne.n	800931c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009308:	4619      	mov	r1, r3
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	2334      	movs	r3, #52	; 0x34
 800930e:	fb03 f301 	mul.w	r3, r3, r1
 8009312:	4413      	add	r3, r2
 8009314:	3390      	adds	r3, #144	; 0x90
 8009316:	2208      	movs	r2, #8
 8009318:	701a      	strb	r2, [r3, #0]
            break;
 800931a:	e03a      	b.n	8009392 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	2b04      	cmp	r3, #4
 8009320:	d137      	bne.n	8009392 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009328:	4619      	mov	r1, r3
 800932a:	693a      	ldr	r2, [r7, #16]
 800932c:	2334      	movs	r3, #52	; 0x34
 800932e:	fb03 f301 	mul.w	r3, r3, r1
 8009332:	4413      	add	r3, r2
 8009334:	3390      	adds	r3, #144	; 0x90
 8009336:	2201      	movs	r2, #1
 8009338:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009340:	4619      	mov	r1, r3
 8009342:	693a      	ldr	r2, [r7, #16]
 8009344:	2334      	movs	r3, #52	; 0x34
 8009346:	fb03 f301 	mul.w	r3, r3, r1
 800934a:	4413      	add	r3, r2
 800934c:	3391      	adds	r3, #145	; 0x91
 800934e:	2202      	movs	r2, #2
 8009350:	701a      	strb	r2, [r3, #0]
            break;
 8009352:	e01e      	b.n	8009392 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800935a:	3301      	adds	r3, #1
 800935c:	b29a      	uxth	r2, r3
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009364:	e016      	b.n	8009394 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2200      	movs	r2, #0
 800936a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2201      	movs	r2, #1
 8009372:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800937a:	2102      	movs	r1, #2
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	4798      	blx	r3
      break;
 8009380:	e00c      	b.n	800939c <USBH_MSC_Process+0x514>
            break;
 8009382:	bf00      	nop
 8009384:	e00a      	b.n	800939c <USBH_MSC_Process+0x514>
            break;
 8009386:	bf00      	nop
 8009388:	e008      	b.n	800939c <USBH_MSC_Process+0x514>
            break;
 800938a:	bf00      	nop
 800938c:	e006      	b.n	800939c <USBH_MSC_Process+0x514>
            break;
 800938e:	bf00      	nop
 8009390:	e004      	b.n	800939c <USBH_MSC_Process+0x514>
            break;
 8009392:	bf00      	nop
      break;
 8009394:	e002      	b.n	800939c <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]
      break;
 800939a:	bf00      	nop
  }
  return error;
 800939c:	7dfb      	ldrb	r3, [r7, #23]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3718      	adds	r7, #24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop

080093a8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80093be:	b580      	push	{r7, lr}
 80093c0:	b088      	sub	sp, #32
 80093c2:	af02      	add	r7, sp, #8
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80093d0:	69db      	ldr	r3, [r3, #28]
 80093d2:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80093d4:	2301      	movs	r3, #1
 80093d6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80093d8:	2301      	movs	r3, #1
 80093da:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	693a      	ldr	r2, [r7, #16]
 80093e0:	2134      	movs	r1, #52	; 0x34
 80093e2:	fb01 f303 	mul.w	r3, r1, r3
 80093e6:	4413      	add	r3, r2
 80093e8:	3390      	adds	r3, #144	; 0x90
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b06      	cmp	r3, #6
 80093ee:	d004      	beq.n	80093fa <USBH_MSC_RdWrProcess+0x3c>
 80093f0:	2b07      	cmp	r3, #7
 80093f2:	d037      	beq.n	8009464 <USBH_MSC_RdWrProcess+0xa6>
 80093f4:	2b05      	cmp	r3, #5
 80093f6:	d06a      	beq.n	80094ce <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 80093f8:	e0a6      	b.n	8009548 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80093fa:	78f9      	ldrb	r1, [r7, #3]
 80093fc:	2300      	movs	r3, #0
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	2300      	movs	r3, #0
 8009402:	2200      	movs	r2, #0
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 fea6 	bl	800a156 <USBH_MSC_SCSI_Read>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d10b      	bne.n	800942c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009414:	78fb      	ldrb	r3, [r7, #3]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	2134      	movs	r1, #52	; 0x34
 800941a:	fb01 f303 	mul.w	r3, r1, r3
 800941e:	4413      	add	r3, r2
 8009420:	3390      	adds	r3, #144	; 0x90
 8009422:	2201      	movs	r2, #1
 8009424:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009426:	2300      	movs	r3, #0
 8009428:	75fb      	strb	r3, [r7, #23]
      break;
 800942a:	e088      	b.n	800953e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b02      	cmp	r3, #2
 8009430:	d109      	bne.n	8009446 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	693a      	ldr	r2, [r7, #16]
 8009436:	2134      	movs	r1, #52	; 0x34
 8009438:	fb01 f303 	mul.w	r3, r1, r3
 800943c:	4413      	add	r3, r2
 800943e:	3390      	adds	r3, #144	; 0x90
 8009440:	2205      	movs	r2, #5
 8009442:	701a      	strb	r2, [r3, #0]
      break;
 8009444:	e07b      	b.n	800953e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	2b04      	cmp	r3, #4
 800944a:	d178      	bne.n	800953e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	2134      	movs	r1, #52	; 0x34
 8009452:	fb01 f303 	mul.w	r3, r1, r3
 8009456:	4413      	add	r3, r2
 8009458:	3390      	adds	r3, #144	; 0x90
 800945a:	2208      	movs	r2, #8
 800945c:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800945e:	2302      	movs	r3, #2
 8009460:	75fb      	strb	r3, [r7, #23]
      break;
 8009462:	e06c      	b.n	800953e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009464:	78f9      	ldrb	r1, [r7, #3]
 8009466:	2300      	movs	r3, #0
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	2300      	movs	r3, #0
 800946c:	2200      	movs	r2, #0
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 fe06 	bl	800a080 <USBH_MSC_SCSI_Write>
 8009474:	4603      	mov	r3, r0
 8009476:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009478:	7bfb      	ldrb	r3, [r7, #15]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d10b      	bne.n	8009496 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	2134      	movs	r1, #52	; 0x34
 8009484:	fb01 f303 	mul.w	r3, r1, r3
 8009488:	4413      	add	r3, r2
 800948a:	3390      	adds	r3, #144	; 0x90
 800948c:	2201      	movs	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	75fb      	strb	r3, [r7, #23]
      break;
 8009494:	e055      	b.n	8009542 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	2b02      	cmp	r3, #2
 800949a:	d109      	bne.n	80094b0 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	2134      	movs	r1, #52	; 0x34
 80094a2:	fb01 f303 	mul.w	r3, r1, r3
 80094a6:	4413      	add	r3, r2
 80094a8:	3390      	adds	r3, #144	; 0x90
 80094aa:	2205      	movs	r2, #5
 80094ac:	701a      	strb	r2, [r3, #0]
      break;
 80094ae:	e048      	b.n	8009542 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d145      	bne.n	8009542 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80094b6:	78fb      	ldrb	r3, [r7, #3]
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	2134      	movs	r1, #52	; 0x34
 80094bc:	fb01 f303 	mul.w	r3, r1, r3
 80094c0:	4413      	add	r3, r2
 80094c2:	3390      	adds	r3, #144	; 0x90
 80094c4:	2208      	movs	r2, #8
 80094c6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80094c8:	2302      	movs	r3, #2
 80094ca:	75fb      	strb	r3, [r7, #23]
      break;
 80094cc:	e039      	b.n	8009542 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80094ce:	78fb      	ldrb	r3, [r7, #3]
 80094d0:	2234      	movs	r2, #52	; 0x34
 80094d2:	fb02 f303 	mul.w	r3, r2, r3
 80094d6:	3398      	adds	r3, #152	; 0x98
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4413      	add	r3, r2
 80094dc:	1d1a      	adds	r2, r3, #4
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 fd53 	bl	8009f8e <USBH_MSC_SCSI_RequestSense>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d113      	bne.n	800951a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80094f2:	78fb      	ldrb	r3, [r7, #3]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	2134      	movs	r1, #52	; 0x34
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	4413      	add	r3, r2
 80094fe:	3390      	adds	r3, #144	; 0x90
 8009500:	2201      	movs	r2, #1
 8009502:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009504:	78fb      	ldrb	r3, [r7, #3]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	2134      	movs	r1, #52	; 0x34
 800950a:	fb01 f303 	mul.w	r3, r1, r3
 800950e:	4413      	add	r3, r2
 8009510:	3391      	adds	r3, #145	; 0x91
 8009512:	2202      	movs	r2, #2
 8009514:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8009516:	2302      	movs	r3, #2
 8009518:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800951a:	7bfb      	ldrb	r3, [r7, #15]
 800951c:	2b02      	cmp	r3, #2
 800951e:	d012      	beq.n	8009546 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	2b04      	cmp	r3, #4
 8009524:	d10f      	bne.n	8009546 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009526:	78fb      	ldrb	r3, [r7, #3]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	2134      	movs	r1, #52	; 0x34
 800952c:	fb01 f303 	mul.w	r3, r1, r3
 8009530:	4413      	add	r3, r2
 8009532:	3390      	adds	r3, #144	; 0x90
 8009534:	2208      	movs	r2, #8
 8009536:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009538:	2302      	movs	r3, #2
 800953a:	75fb      	strb	r3, [r7, #23]
      break;
 800953c:	e003      	b.n	8009546 <USBH_MSC_RdWrProcess+0x188>
      break;
 800953e:	bf00      	nop
 8009540:	e002      	b.n	8009548 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8009542:	bf00      	nop
 8009544:	e000      	b.n	8009548 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8009546:	bf00      	nop

  }
  return error;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}

08009552 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	460b      	mov	r3, r1
 800955c:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	b2db      	uxtb	r3, r3
 800956e:	2b0b      	cmp	r3, #11
 8009570:	d10c      	bne.n	800958c <USBH_MSC_UnitIsReady+0x3a>
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	2134      	movs	r1, #52	; 0x34
 8009578:	fb01 f303 	mul.w	r3, r1, r3
 800957c:	4413      	add	r3, r2
 800957e:	3391      	adds	r3, #145	; 0x91
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8009586:	2301      	movs	r3, #1
 8009588:	73fb      	strb	r3, [r7, #15]
 800958a:	e001      	b.n	8009590 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3714      	adds	r7, #20
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b086      	sub	sp, #24
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	460b      	mov	r3, r1
 80095a8:	607a      	str	r2, [r7, #4]
 80095aa:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	2b0b      	cmp	r3, #11
 80095be:	d10d      	bne.n	80095dc <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	2234      	movs	r2, #52	; 0x34
 80095c4:	fb02 f303 	mul.w	r3, r2, r3
 80095c8:	3390      	adds	r3, #144	; 0x90
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	4413      	add	r3, r2
 80095ce:	2234      	movs	r2, #52	; 0x34
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f005 f880 	bl	800e6d8 <memcpy>
    return USBH_OK;
 80095d8:	2300      	movs	r3, #0
 80095da:	e000      	b.n	80095de <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 80095dc:	2302      	movs	r3, #2
  }
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3718      	adds	r7, #24
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b088      	sub	sp, #32
 80095ea:	af02      	add	r7, sp, #8
 80095ec:	60f8      	str	r0, [r7, #12]
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	603b      	str	r3, [r7, #0]
 80095f2:	460b      	mov	r3, r1
 80095f4:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d00e      	beq.n	800962a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009612:	2b0b      	cmp	r3, #11
 8009614:	d109      	bne.n	800962a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009616:	7afb      	ldrb	r3, [r7, #11]
 8009618:	697a      	ldr	r2, [r7, #20]
 800961a:	2134      	movs	r1, #52	; 0x34
 800961c:	fb01 f303 	mul.w	r3, r1, r3
 8009620:	4413      	add	r3, r2
 8009622:	3390      	adds	r3, #144	; 0x90
 8009624:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009626:	2b01      	cmp	r3, #1
 8009628:	d001      	beq.n	800962e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800962a:	2302      	movs	r3, #2
 800962c:	e040      	b.n	80096b0 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	2206      	movs	r2, #6
 8009632:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	697a      	ldr	r2, [r7, #20]
 8009638:	2134      	movs	r1, #52	; 0x34
 800963a:	fb01 f303 	mul.w	r3, r1, r3
 800963e:	4413      	add	r3, r2
 8009640:	3390      	adds	r3, #144	; 0x90
 8009642:	2206      	movs	r2, #6
 8009644:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	b29a      	uxth	r2, r3
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009650:	7af9      	ldrb	r1, [r7, #11]
 8009652:	6a3b      	ldr	r3, [r7, #32]
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f000 fd7b 	bl	800a156 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009666:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009668:	e016      	b.n	8009698 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	1ad2      	subs	r2, r2, r3
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	f242 7110 	movw	r1, #10000	; 0x2710
 800967a:	fb01 f303 	mul.w	r3, r1, r3
 800967e:	429a      	cmp	r2, r3
 8009680:	d805      	bhi.n	800968e <USBH_MSC_Read+0xa8>
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d104      	bne.n	8009698 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	2201      	movs	r2, #1
 8009692:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009694:	2302      	movs	r3, #2
 8009696:	e00b      	b.n	80096b0 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009698:	7afb      	ldrb	r3, [r7, #11]
 800969a:	4619      	mov	r1, r3
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff fe8e 	bl	80093be <USBH_MSC_RdWrProcess>
 80096a2:	4603      	mov	r3, r0
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d0e0      	beq.n	800966a <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	2201      	movs	r2, #1
 80096ac:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	607a      	str	r2, [r7, #4]
 80096c2:	603b      	str	r3, [r7, #0]
 80096c4:	460b      	mov	r3, r1
 80096c6:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ce:	69db      	ldr	r3, [r3, #28]
 80096d0:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80096d8:	b2db      	uxtb	r3, r3
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d00e      	beq.n	80096fc <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80096e4:	2b0b      	cmp	r3, #11
 80096e6:	d109      	bne.n	80096fc <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80096e8:	7afb      	ldrb	r3, [r7, #11]
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	2134      	movs	r1, #52	; 0x34
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	3390      	adds	r3, #144	; 0x90
 80096f6:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d001      	beq.n	8009700 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80096fc:	2302      	movs	r3, #2
 80096fe:	e040      	b.n	8009782 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	2207      	movs	r2, #7
 8009704:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8009706:	7afb      	ldrb	r3, [r7, #11]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	2134      	movs	r1, #52	; 0x34
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	4413      	add	r3, r2
 8009712:	3390      	adds	r3, #144	; 0x90
 8009714:	2207      	movs	r2, #7
 8009716:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009718:	7afb      	ldrb	r3, [r7, #11]
 800971a:	b29a      	uxth	r2, r3
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009722:	7af9      	ldrb	r1, [r7, #11]
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f000 fca7 	bl	800a080 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009738:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800973a:	e016      	b.n	800976a <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	6a3b      	ldr	r3, [r7, #32]
 8009748:	f242 7110 	movw	r1, #10000	; 0x2710
 800974c:	fb01 f303 	mul.w	r3, r1, r3
 8009750:	429a      	cmp	r2, r3
 8009752:	d805      	bhi.n	8009760 <USBH_MSC_Write+0xa8>
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d104      	bne.n	800976a <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	2201      	movs	r2, #1
 8009764:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8009766:	2302      	movs	r3, #2
 8009768:	e00b      	b.n	8009782 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	4619      	mov	r1, r3
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f7ff fe25 	bl	80093be <USBH_MSC_RdWrProcess>
 8009774:	4603      	mov	r3, r0
 8009776:	2b01      	cmp	r3, #1
 8009778:	d0e0      	beq.n	800973c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2201      	movs	r2, #1
 800977e:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2221      	movs	r2, #33	; 0x21
 8009796:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	22ff      	movs	r2, #255	; 0xff
 800979c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80097b0:	2200      	movs	r2, #0
 80097b2:	2100      	movs	r1, #0
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f001 fdae 	bl	800b316 <USBH_CtlReq>
 80097ba:	4603      	mov	r3, r0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3708      	adds	r7, #8
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}

080097c4 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	22a1      	movs	r2, #161	; 0xa1
 80097d2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	22fe      	movs	r2, #254	; 0xfe
 80097d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80097ec:	2201      	movs	r2, #1
 80097ee:	6839      	ldr	r1, [r7, #0]
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fd90 	bl	800b316 <USBH_CtlReq>
 80097f6:	4603      	mov	r3, r0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3708      	adds	r7, #8
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009800:	b480      	push	{r7}
 8009802:	b085      	sub	sp, #20
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800980e:	69db      	ldr	r3, [r3, #28]
 8009810:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	4a09      	ldr	r2, [pc, #36]	; (800983c <USBH_MSC_BOT_Init+0x3c>)
 8009816:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4a09      	ldr	r2, [pc, #36]	; (8009840 <USBH_MSC_BOT_Init+0x40>)
 800981c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2201      	movs	r2, #1
 800982a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800982e:	2300      	movs	r3, #0
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	43425355 	.word	0x43425355
 8009840:	20304050 	.word	0x20304050

08009844 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af02      	add	r7, sp, #8
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009850:	2301      	movs	r3, #1
 8009852:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009854:	2301      	movs	r3, #1
 8009856:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009858:	2301      	movs	r3, #1
 800985a:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800985c:	2300      	movs	r3, #0
 800985e:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009874:	3b01      	subs	r3, #1
 8009876:	2b0a      	cmp	r3, #10
 8009878:	f200 81a1 	bhi.w	8009bbe <USBH_MSC_BOT_Process+0x37a>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <USBH_MSC_BOT_Process+0x40>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098b1 	.word	0x080098b1
 8009888:	080098db 	.word	0x080098db
 800988c:	08009945 	.word	0x08009945
 8009890:	08009963 	.word	0x08009963
 8009894:	080099e7 	.word	0x080099e7
 8009898:	08009a0b 	.word	0x08009a0b
 800989c:	08009aa5 	.word	0x08009aa5
 80098a0:	08009ac1 	.word	0x08009ac1
 80098a4:	08009b13 	.word	0x08009b13
 80098a8:	08009b43 	.word	0x08009b43
 80098ac:	08009ba5 	.word	0x08009ba5
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	795a      	ldrb	r2, [r3, #5]
 80098ca:	2301      	movs	r3, #1
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	4613      	mov	r3, r2
 80098d0:	221f      	movs	r2, #31
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f001 ff2f 	bl	800b736 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80098d8:	e180      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	795b      	ldrb	r3, [r3, #5]
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f004 fddb 	bl	800e49c <USBH_LL_GetURBState>
 80098e6:	4603      	mov	r3, r0
 80098e8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80098ea:	7d3b      	ldrb	r3, [r7, #20]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d118      	bne.n	8009922 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d00f      	beq.n	8009918 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80098fe:	b25b      	sxtb	r3, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	da04      	bge.n	800990e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	2203      	movs	r2, #3
 8009908:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800990c:	e159      	b.n	8009bc2 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	2205      	movs	r2, #5
 8009912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009916:	e154      	b.n	8009bc2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2207      	movs	r2, #7
 800991c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009920:	e14f      	b.n	8009bc2 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009922:	7d3b      	ldrb	r3, [r7, #20]
 8009924:	2b02      	cmp	r3, #2
 8009926:	d104      	bne.n	8009932 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009930:	e147      	b.n	8009bc2 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009932:	7d3b      	ldrb	r3, [r7, #20]
 8009934:	2b05      	cmp	r3, #5
 8009936:	f040 8144 	bne.w	8009bc2 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	220a      	movs	r2, #10
 800993e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009942:	e13e      	b.n	8009bc2 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	895a      	ldrh	r2, [r3, #10]
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	791b      	ldrb	r3, [r3, #4]
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f001 ff14 	bl	800b780 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	2204      	movs	r2, #4
 800995c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009960:	e13c      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	791b      	ldrb	r3, [r3, #4]
 8009966:	4619      	mov	r1, r3
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f004 fd97 	bl	800e49c <USBH_LL_GetURBState>
 800996e:	4603      	mov	r3, r0
 8009970:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009972:	7d3b      	ldrb	r3, [r7, #20]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d12d      	bne.n	80099d4 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800997c:	693a      	ldr	r2, [r7, #16]
 800997e:	8952      	ldrh	r2, [r2, #10]
 8009980:	4293      	cmp	r3, r2
 8009982:	d910      	bls.n	80099a6 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	8952      	ldrh	r2, [r2, #10]
 800998e:	441a      	add	r2, r3
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	8952      	ldrh	r2, [r2, #10]
 800999e:	1a9a      	subs	r2, r3, r2
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80099a4:	e002      	b.n	80099ac <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	2200      	movs	r2, #0
 80099aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00a      	beq.n	80099ca <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	895a      	ldrh	r2, [r3, #10]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	791b      	ldrb	r3, [r3, #4]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 fedc 	bl	800b780 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80099c8:	e0fd      	b.n	8009bc6 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	2207      	movs	r2, #7
 80099ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099d2:	e0f8      	b.n	8009bc6 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80099d4:	7d3b      	ldrb	r3, [r7, #20]
 80099d6:	2b05      	cmp	r3, #5
 80099d8:	f040 80f5 	bne.w	8009bc6 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	2209      	movs	r2, #9
 80099e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80099e4:	e0ef      	b.n	8009bc6 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	891a      	ldrh	r2, [r3, #8]
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	7958      	ldrb	r0, [r3, #5]
 80099f4:	2301      	movs	r3, #1
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	4603      	mov	r3, r0
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 fe9b 	bl	800b736 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	2206      	movs	r2, #6
 8009a04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a08:	e0e8      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	795b      	ldrb	r3, [r3, #5]
 8009a0e:	4619      	mov	r1, r3
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f004 fd43 	bl	800e49c <USBH_LL_GetURBState>
 8009a16:	4603      	mov	r3, r0
 8009a18:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a1a:	7d3b      	ldrb	r3, [r7, #20]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d130      	bne.n	8009a82 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	8912      	ldrh	r2, [r2, #8]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d910      	bls.n	8009a4e <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	8912      	ldrh	r2, [r2, #8]
 8009a36:	441a      	add	r2, r3
 8009a38:	693b      	ldr	r3, [r7, #16]
 8009a3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	8912      	ldrh	r2, [r2, #8]
 8009a46:	1a9a      	subs	r2, r3, r2
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a4c:	e002      	b.n	8009a54 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	2200      	movs	r2, #0
 8009a52:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00d      	beq.n	8009a78 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	891a      	ldrh	r2, [r3, #8]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	7958      	ldrb	r0, [r3, #5]
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	4603      	mov	r3, r0
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f001 fe60 	bl	800b736 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009a76:	e0a8      	b.n	8009bca <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	2207      	movs	r2, #7
 8009a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a80:	e0a3      	b.n	8009bca <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a82:	7d3b      	ldrb	r3, [r7, #20]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d104      	bne.n	8009a92 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	2205      	movs	r2, #5
 8009a8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a90:	e09b      	b.n	8009bca <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009a92:	7d3b      	ldrb	r3, [r7, #20]
 8009a94:	2b05      	cmp	r3, #5
 8009a96:	f040 8098 	bne.w	8009bca <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	220a      	movs	r2, #10
 8009a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009aa2:	e092      	b.n	8009bca <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009aaa:	693b      	ldr	r3, [r7, #16]
 8009aac:	791b      	ldrb	r3, [r3, #4]
 8009aae:	220d      	movs	r2, #13
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fe65 	bl	800b780 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	2208      	movs	r2, #8
 8009aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009abe:	e08d      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	791b      	ldrb	r3, [r3, #4]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f004 fce8 	bl	800e49c <USBH_LL_GetURBState>
 8009acc:	4603      	mov	r3, r0
 8009ace:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009ad0:	7d3b      	ldrb	r3, [r7, #20]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d115      	bne.n	8009b02 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 f8aa 	bl	8009c40 <USBH_MSC_DecodeCSW>
 8009aec:	4603      	mov	r3, r0
 8009aee:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009af0:	7d7b      	ldrb	r3, [r7, #21]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009afa:	e068      	b.n	8009bce <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009afc:	2302      	movs	r3, #2
 8009afe:	75fb      	strb	r3, [r7, #23]
      break;
 8009b00:	e065      	b.n	8009bce <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009b02:	7d3b      	ldrb	r3, [r7, #20]
 8009b04:	2b05      	cmp	r3, #5
 8009b06:	d162      	bne.n	8009bce <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	2209      	movs	r2, #9
 8009b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b10:	e05d      	b.n	8009bce <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009b12:	78fb      	ldrb	r3, [r7, #3]
 8009b14:	2200      	movs	r2, #0
 8009b16:	4619      	mov	r1, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f865 	bl	8009be8 <USBH_MSC_BOT_Abort>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b22:	7dbb      	ldrb	r3, [r7, #22]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d104      	bne.n	8009b32 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	2207      	movs	r2, #7
 8009b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009b30:	e04f      	b.n	8009bd2 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009b32:	7dbb      	ldrb	r3, [r7, #22]
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	d14c      	bne.n	8009bd2 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	220b      	movs	r2, #11
 8009b3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b40:	e047      	b.n	8009bd2 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009b42:	78fb      	ldrb	r3, [r7, #3]
 8009b44:	2201      	movs	r2, #1
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f84d 	bl	8009be8 <USBH_MSC_BOT_Abort>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009b52:	7dbb      	ldrb	r3, [r7, #22]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d11d      	bne.n	8009b94 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	795b      	ldrb	r3, [r3, #5]
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f004 fcf9 	bl	800e556 <USBH_LL_GetToggle>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	7959      	ldrb	r1, [r3, #5]
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	f1c3 0301 	rsb	r3, r3, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	461a      	mov	r2, r3
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f004 fcba 	bl	800e4f0 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	791b      	ldrb	r3, [r3, #4]
 8009b80:	2200      	movs	r2, #0
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f004 fcb3 	bl	800e4f0 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2209      	movs	r2, #9
 8009b8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009b92:	e020      	b.n	8009bd6 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009b94:	7dbb      	ldrb	r3, [r7, #22]
 8009b96:	2b04      	cmp	r3, #4
 8009b98:	d11d      	bne.n	8009bd6 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009b9a:	693b      	ldr	r3, [r7, #16]
 8009b9c:	220b      	movs	r2, #11
 8009b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ba2:	e018      	b.n	8009bd6 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff fdf0 	bl	800978a <USBH_MSC_BOT_REQ_Reset>
 8009baa:	4603      	mov	r3, r0
 8009bac:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009bae:	7dfb      	ldrb	r3, [r7, #23]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d112      	bne.n	8009bda <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009bbc:	e00d      	b.n	8009bda <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009bbe:	bf00      	nop
 8009bc0:	e00c      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bc2:	bf00      	nop
 8009bc4:	e00a      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bc6:	bf00      	nop
 8009bc8:	e008      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bca:	bf00      	nop
 8009bcc:	e006      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bce:	bf00      	nop
 8009bd0:	e004      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bd2:	bf00      	nop
 8009bd4:	e002      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bd6:	bf00      	nop
 8009bd8:	e000      	b.n	8009bdc <USBH_MSC_BOT_Process+0x398>
      break;
 8009bda:	bf00      	nop
  }
  return status;
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3718      	adds	r7, #24
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop

08009be8 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	70fb      	strb	r3, [r7, #3]
 8009bf4:	4613      	mov	r3, r2
 8009bf6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009c06:	78bb      	ldrb	r3, [r7, #2]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d002      	beq.n	8009c12 <USBH_MSC_BOT_Abort+0x2a>
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d009      	beq.n	8009c24 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009c10:	e011      	b.n	8009c36 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	79db      	ldrb	r3, [r3, #7]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f001 f99c 	bl	800af56 <USBH_ClrFeature>
 8009c1e:	4603      	mov	r3, r0
 8009c20:	73fb      	strb	r3, [r7, #15]
      break;
 8009c22:	e008      	b.n	8009c36 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	799b      	ldrb	r3, [r3, #6]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f001 f993 	bl	800af56 <USBH_ClrFeature>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73fb      	strb	r3, [r7, #15]
      break;
 8009c34:	bf00      	nop
  }
  return status;
 8009c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3710      	adds	r7, #16
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c4e:	69db      	ldr	r3, [r3, #28]
 8009c50:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009c52:	2301      	movs	r3, #1
 8009c54:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	791b      	ldrb	r3, [r3, #4]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f004 fb8b 	bl	800e378 <USBH_LL_GetLastXferSize>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b0d      	cmp	r3, #13
 8009c66:	d002      	beq.n	8009c6e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009c68:	2302      	movs	r3, #2
 8009c6a:	73fb      	strb	r3, [r7, #15]
 8009c6c:	e024      	b.n	8009cb8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c72:	4a14      	ldr	r2, [pc, #80]	; (8009cc4 <USBH_MSC_DecodeCSW+0x84>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d11d      	bne.n	8009cb4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d119      	bne.n	8009cb8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d102      	bne.n	8009c94 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009c8e:	2300      	movs	r3, #0
 8009c90:	73fb      	strb	r3, [r7, #15]
 8009c92:	e011      	b.n	8009cb8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d102      	bne.n	8009ca4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	73fb      	strb	r3, [r7, #15]
 8009ca2:	e009      	b.n	8009cb8 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d104      	bne.n	8009cb8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009cae:	2302      	movs	r3, #2
 8009cb0:	73fb      	strb	r3, [r7, #15]
 8009cb2:	e001      	b.n	8009cb8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009cb4:	2302      	movs	r3, #2
 8009cb6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	53425355 	.word	0x53425355

08009cc8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009cd4:	2302      	movs	r3, #2
 8009cd6:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cde:	69db      	ldr	r3, [r3, #28]
 8009ce0:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d002      	beq.n	8009cf2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	d021      	beq.n	8009d34 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009cf0:	e028      	b.n	8009d44 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	220a      	movs	r2, #10
 8009d04:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	3363      	adds	r3, #99	; 0x63
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f004 fcec 	bl	800e6ee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009d16:	68bb      	ldr	r3, [r7, #8]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	2201      	movs	r2, #1
 8009d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	73fb      	strb	r3, [r7, #15]
      break;
 8009d32:	e007      	b.n	8009d44 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f7ff fd83 	bl	8009844 <USBH_MSC_BOT_Process>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73fb      	strb	r3, [r7, #15]
      break;
 8009d42:	bf00      	nop
  }

  return error;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b086      	sub	sp, #24
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	460b      	mov	r3, r1
 8009d58:	607a      	str	r2, [r7, #4]
 8009d5a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d66:	69db      	ldr	r3, [r3, #28]
 8009d68:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d002      	beq.n	8009d7a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d027      	beq.n	8009dc8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009d78:	e05f      	b.n	8009e3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	2208      	movs	r2, #8
 8009d7e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	2280      	movs	r2, #128	; 0x80
 8009d84:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	3363      	adds	r3, #99	; 0x63
 8009d94:	2210      	movs	r2, #16
 8009d96:	2100      	movs	r1, #0
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f004 fca8 	bl	800e6ee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2225      	movs	r2, #37	; 0x25
 8009da2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f103 0210 	add.w	r2, r3, #16
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc6:	e038      	b.n	8009e3a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009dc8:	7afb      	ldrb	r3, [r7, #11]
 8009dca:	4619      	mov	r1, r3
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7ff fd39 	bl	8009844 <USBH_MSC_BOT_Process>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009dd6:	7dfb      	ldrb	r3, [r7, #23]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d12d      	bne.n	8009e38 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009de2:	3303      	adds	r3, #3
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	461a      	mov	r2, r3
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dee:	3302      	adds	r3, #2
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	021b      	lsls	r3, r3, #8
 8009df4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e02:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e1a:	3307      	adds	r3, #7
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009e26:	3306      	adds	r3, #6
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	021b      	lsls	r3, r3, #8
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4313      	orrs	r3, r2
 8009e32:	b29a      	uxth	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	809a      	strh	r2, [r3, #4]
      break;
 8009e38:	bf00      	nop
  }

  return error;
 8009e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009e52:	2302      	movs	r3, #2
 8009e54:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e5c:	69db      	ldr	r3, [r3, #28]
 8009e5e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d002      	beq.n	8009e70 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d03d      	beq.n	8009eea <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009e6e:	e089      	b.n	8009f84 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	2224      	movs	r2, #36	; 0x24
 8009e74:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2280      	movs	r2, #128	; 0x80
 8009e7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	220a      	movs	r2, #10
 8009e82:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	3363      	adds	r3, #99	; 0x63
 8009e8a:	220a      	movs	r2, #10
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f004 fc2d 	bl	800e6ee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	2212      	movs	r2, #18
 8009e98:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009e9c:	7afb      	ldrb	r3, [r7, #11]
 8009e9e:	015b      	lsls	r3, r3, #5
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	2224      	movs	r2, #36	; 0x24
 8009ebc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f103 0210 	add.w	r2, r3, #16
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee8:	e04c      	b.n	8009f84 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	4619      	mov	r1, r3
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f7ff fca8 	bl	8009844 <USBH_MSC_BOT_Process>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009ef8:	7dfb      	ldrb	r3, [r7, #23]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d141      	bne.n	8009f82 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009efe:	2222      	movs	r2, #34	; 0x22
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f004 fbf3 	bl	800e6ee <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	f003 031f 	and.w	r3, r3, #31
 8009f14:	b2da      	uxtb	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	095b      	lsrs	r3, r3, #5
 8009f24:	b2da      	uxtb	r2, r3
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f30:	3301      	adds	r3, #1
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	b25b      	sxtb	r3, r3
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	da03      	bge.n	8009f42 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2201      	movs	r2, #1
 8009f3e:	709a      	strb	r2, [r3, #2]
 8009f40:	e002      	b.n	8009f48 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	1cd8      	adds	r0, r3, #3
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f52:	3308      	adds	r3, #8
 8009f54:	2208      	movs	r2, #8
 8009f56:	4619      	mov	r1, r3
 8009f58:	f004 fbbe 	bl	800e6d8 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f103 000c 	add.w	r0, r3, #12
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f68:	3310      	adds	r3, #16
 8009f6a:	2210      	movs	r2, #16
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f004 fbb3 	bl	800e6d8 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	331d      	adds	r3, #29
 8009f76:	693a      	ldr	r2, [r7, #16]
 8009f78:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009f7c:	3220      	adds	r2, #32
 8009f7e:	6812      	ldr	r2, [r2, #0]
 8009f80:	601a      	str	r2, [r3, #0]
      break;
 8009f82:	bf00      	nop
  }

  return error;
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}

08009f8e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b086      	sub	sp, #24
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	60f8      	str	r0, [r7, #12]
 8009f96:	460b      	mov	r3, r1
 8009f98:	607a      	str	r2, [r7, #4]
 8009f9a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fa6:	69db      	ldr	r3, [r3, #28]
 8009fa8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d002      	beq.n	8009fba <USBH_MSC_SCSI_RequestSense+0x2c>
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d03d      	beq.n	800a034 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009fb8:	e05d      	b.n	800a076 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	220e      	movs	r2, #14
 8009fbe:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	2280      	movs	r2, #128	; 0x80
 8009fc4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	220a      	movs	r2, #10
 8009fcc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	3363      	adds	r3, #99	; 0x63
 8009fd4:	2210      	movs	r2, #16
 8009fd6:	2100      	movs	r1, #0
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f004 fb88 	bl	800e6ee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009fe6:	7afb      	ldrb	r3, [r7, #11]
 8009fe8:	015b      	lsls	r3, r3, #5
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	220e      	movs	r2, #14
 800a006:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	2202      	movs	r2, #2
 800a01e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a022:	693b      	ldr	r3, [r7, #16]
 800a024:	f103 0210 	add.w	r2, r3, #16
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a02e:	2301      	movs	r3, #1
 800a030:	75fb      	strb	r3, [r7, #23]
      break;
 800a032:	e020      	b.n	800a076 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a034:	7afb      	ldrb	r3, [r7, #11]
 800a036:	4619      	mov	r1, r3
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f7ff fc03 	bl	8009844 <USBH_MSC_BOT_Process>
 800a03e:	4603      	mov	r3, r0
 800a040:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a042:	7dfb      	ldrb	r3, [r7, #23]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d115      	bne.n	800a074 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a04e:	3302      	adds	r3, #2
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	f003 030f 	and.w	r3, r3, #15
 800a056:	b2da      	uxtb	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a062:	7b1a      	ldrb	r2, [r3, #12]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a06e:	7b5a      	ldrb	r2, [r3, #13]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	709a      	strb	r2, [r3, #2]
      break;
 800a074:	bf00      	nop
  }

  return error;
 800a076:	7dfb      	ldrb	r3, [r7, #23]
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3718      	adds	r7, #24
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	607a      	str	r2, [r7, #4]
 800a08a:	603b      	str	r3, [r7, #0]
 800a08c:	460b      	mov	r3, r1
 800a08e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a090:	2302      	movs	r3, #2
 800a092:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d002      	beq.n	800a0ae <USBH_MSC_SCSI_Write+0x2e>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	d047      	beq.n	800a13c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a0ac:	e04e      	b.n	800a14c <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a0ae:	693b      	ldr	r3, [r7, #16]
 800a0b0:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	6a3b      	ldr	r3, [r7, #32]
 800a0b8:	fb03 f202 	mul.w	r2, r3, r2
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	3363      	adds	r3, #99	; 0x63
 800a0d4:	2210      	movs	r2, #16
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f004 fb08 	bl	800e6ee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	222a      	movs	r2, #42	; 0x2a
 800a0e2:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a0e6:	79fa      	ldrb	r2, [r7, #7]
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a0ee:	79ba      	ldrb	r2, [r7, #6]
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a0f6:	797a      	ldrb	r2, [r7, #5]
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a0fe:	1d3b      	adds	r3, r7, #4
 800a100:	781a      	ldrb	r2, [r3, #0]
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a108:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a112:	f107 0320 	add.w	r3, r7, #32
 800a116:	781a      	ldrb	r2, [r3, #0]
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2202      	movs	r2, #2
 800a12a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	683a      	ldr	r2, [r7, #0]
 800a132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	e007      	b.n	800a14c <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a13c:	7afb      	ldrb	r3, [r7, #11]
 800a13e:	4619      	mov	r1, r3
 800a140:	68f8      	ldr	r0, [r7, #12]
 800a142:	f7ff fb7f 	bl	8009844 <USBH_MSC_BOT_Process>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
      break;
 800a14a:	bf00      	nop
  }

  return error;
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b086      	sub	sp, #24
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	60f8      	str	r0, [r7, #12]
 800a15e:	607a      	str	r2, [r7, #4]
 800a160:	603b      	str	r3, [r7, #0]
 800a162:	460b      	mov	r3, r1
 800a164:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a166:	2302      	movs	r3, #2
 800a168:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a170:	69db      	ldr	r3, [r3, #28]
 800a172:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d002      	beq.n	800a184 <USBH_MSC_SCSI_Read+0x2e>
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d047      	beq.n	800a212 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a182:	e04e      	b.n	800a222 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a18a:	461a      	mov	r2, r3
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	fb03 f202 	mul.w	r2, r3, r2
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a196:	693b      	ldr	r3, [r7, #16]
 800a198:	2280      	movs	r2, #128	; 0x80
 800a19a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a19e:	693b      	ldr	r3, [r7, #16]
 800a1a0:	220a      	movs	r2, #10
 800a1a2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1a6:	693b      	ldr	r3, [r7, #16]
 800a1a8:	3363      	adds	r3, #99	; 0x63
 800a1aa:	2210      	movs	r2, #16
 800a1ac:	2100      	movs	r1, #0
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f004 fa9d 	bl	800e6ee <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2228      	movs	r2, #40	; 0x28
 800a1b8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a1bc:	79fa      	ldrb	r2, [r7, #7]
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a1c4:	79ba      	ldrb	r2, [r7, #6]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a1cc:	797a      	ldrb	r2, [r7, #5]
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a1d4:	1d3b      	adds	r3, r7, #4
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a1de:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a1e8:	f107 0320 	add.w	r3, r7, #32
 800a1ec:	781a      	ldrb	r2, [r3, #0]
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a20c:	2301      	movs	r3, #1
 800a20e:	75fb      	strb	r3, [r7, #23]
      break;
 800a210:	e007      	b.n	800a222 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a212:	7afb      	ldrb	r3, [r7, #11]
 800a214:	4619      	mov	r1, r3
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f7ff fb14 	bl	8009844 <USBH_MSC_BOT_Process>
 800a21c:	4603      	mov	r3, r0
 800a21e:	75fb      	strb	r3, [r7, #23]
      break;
 800a220:	bf00      	nop
  }

  return error;
 800a222:	7dfb      	ldrb	r3, [r7, #23]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3718      	adds	r7, #24
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	60f8      	str	r0, [r7, #12]
 800a234:	60b9      	str	r1, [r7, #8]
 800a236:	4613      	mov	r3, r2
 800a238:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d101      	bne.n	800a244 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a240:	2302      	movs	r3, #2
 800a242:	e029      	b.n	800a298 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	79fa      	ldrb	r2, [r7, #7]
 800a248:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2200      	movs	r2, #0
 800a258:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f81f 	bl	800a2a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2200      	movs	r2, #0
 800a27e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d003      	beq.n	800a290 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f003 ffbf 	bl	800e214 <USBH_LL_Init>

  return USBH_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e009      	b.n	800a2c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	33e0      	adds	r3, #224	; 0xe0
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	2200      	movs	r2, #0
 800a2be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b0e      	cmp	r3, #14
 800a2ca:	d9f2      	bls.n	800a2b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	e009      	b.n	800a2e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4413      	add	r3, r2
 800a2d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2dc:	2200      	movs	r2, #0
 800a2de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2ec:	d3f1      	bcc.n	800a2d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2240      	movs	r2, #64	; 0x40
 800a312:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2200      	movs	r2, #0
 800a336:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a33a:	2300      	movs	r3, #0
}
 800a33c:	4618      	mov	r0, r3
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d016      	beq.n	800a38a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10e      	bne.n	800a384 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a36c:	1c59      	adds	r1, r3, #1
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	33de      	adds	r3, #222	; 0xde
 800a378:	6839      	ldr	r1, [r7, #0]
 800a37a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a37e:	2300      	movs	r3, #0
 800a380:	73fb      	strb	r3, [r7, #15]
 800a382:	e004      	b.n	800a38e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a384:	2302      	movs	r3, #2
 800a386:	73fb      	strb	r3, [r7, #15]
 800a388:	e001      	b.n	800a38e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a38a:	2302      	movs	r3, #2
 800a38c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a3b2:	78fa      	ldrb	r2, [r7, #3]
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d204      	bcs.n	800a3c2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	78fa      	ldrb	r2, [r7, #3]
 800a3bc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3c0:	e001      	b.n	800a3c6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b087      	sub	sp, #28
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	4608      	mov	r0, r1
 800a3de:	4611      	mov	r1, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	70fb      	strb	r3, [r7, #3]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	70bb      	strb	r3, [r7, #2]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3fc:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3fe:	e025      	b.n	800a44c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a400:	7dfb      	ldrb	r3, [r7, #23]
 800a402:	221a      	movs	r2, #26
 800a404:	fb02 f303 	mul.w	r3, r2, r3
 800a408:	3308      	adds	r3, #8
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	3302      	adds	r3, #2
 800a410:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	795b      	ldrb	r3, [r3, #5]
 800a416:	78fa      	ldrb	r2, [r7, #3]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d002      	beq.n	800a422 <USBH_FindInterface+0x4e>
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	2bff      	cmp	r3, #255	; 0xff
 800a420:	d111      	bne.n	800a446 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a426:	78ba      	ldrb	r2, [r7, #2]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d002      	beq.n	800a432 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a42c:	78bb      	ldrb	r3, [r7, #2]
 800a42e:	2bff      	cmp	r3, #255	; 0xff
 800a430:	d109      	bne.n	800a446 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a436:	787a      	ldrb	r2, [r7, #1]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d002      	beq.n	800a442 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a43c:	787b      	ldrb	r3, [r7, #1]
 800a43e:	2bff      	cmp	r3, #255	; 0xff
 800a440:	d101      	bne.n	800a446 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
 800a444:	e006      	b.n	800a454 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a446:	7dfb      	ldrb	r3, [r7, #23]
 800a448:	3301      	adds	r3, #1
 800a44a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a44c:	7dfb      	ldrb	r3, [r7, #23]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d9d6      	bls.n	800a400 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a452:	23ff      	movs	r3, #255	; 0xff
}
 800a454:	4618      	mov	r0, r3
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f003 ff0f 	bl	800e28c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a46e:	2101      	movs	r1, #1
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f004 f826 	bl	800e4c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b088      	sub	sp, #32
 800a484:	af04      	add	r7, sp, #16
 800a486:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a488:	2302      	movs	r3, #2
 800a48a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a496:	b2db      	uxtb	r3, r3
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d102      	bne.n	800a4a2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2203      	movs	r2, #3
 800a4a0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b0b      	cmp	r3, #11
 800a4aa:	f200 81b3 	bhi.w	800a814 <USBH_Process+0x394>
 800a4ae:	a201      	add	r2, pc, #4	; (adr r2, 800a4b4 <USBH_Process+0x34>)
 800a4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b4:	0800a4e5 	.word	0x0800a4e5
 800a4b8:	0800a517 	.word	0x0800a517
 800a4bc:	0800a57f 	.word	0x0800a57f
 800a4c0:	0800a7af 	.word	0x0800a7af
 800a4c4:	0800a815 	.word	0x0800a815
 800a4c8:	0800a623 	.word	0x0800a623
 800a4cc:	0800a755 	.word	0x0800a755
 800a4d0:	0800a659 	.word	0x0800a659
 800a4d4:	0800a679 	.word	0x0800a679
 800a4d8:	0800a699 	.word	0x0800a699
 800a4dc:	0800a6c7 	.word	0x0800a6c7
 800a4e0:	0800a797 	.word	0x0800a797
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 8193 	beq.w	800a818 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2201      	movs	r2, #1
 800a4f6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4f8:	20c8      	movs	r0, #200	; 0xc8
 800a4fa:	f004 f85f 	bl	800e5bc <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f003 ff1f 	bl	800e342 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a514:	e180      	b.n	800a818 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d107      	bne.n	800a530 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2202      	movs	r2, #2
 800a52c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a52e:	e182      	b.n	800a836 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a536:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a53a:	d914      	bls.n	800a566 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a542:	3301      	adds	r3, #1
 800a544:	b2da      	uxtb	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a552:	2b03      	cmp	r3, #3
 800a554:	d903      	bls.n	800a55e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	220d      	movs	r2, #13
 800a55a:	701a      	strb	r2, [r3, #0]
      break;
 800a55c:	e16b      	b.n	800a836 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	701a      	strb	r2, [r3, #0]
      break;
 800a564:	e167      	b.n	800a836 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a56c:	f103 020a 	add.w	r2, r3, #10
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a576:	200a      	movs	r0, #10
 800a578:	f004 f820 	bl	800e5bc <USBH_Delay>
      break;
 800a57c:	e15b      	b.n	800a836 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a584:	2b00      	cmp	r3, #0
 800a586:	d005      	beq.n	800a594 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a58e:	2104      	movs	r1, #4
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a594:	2064      	movs	r0, #100	; 0x64
 800a596:	f004 f811 	bl	800e5bc <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f003 feac 	bl	800e2f8 <USBH_LL_GetSpeed>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2205      	movs	r2, #5
 800a5ae:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f001 f931 	bl	800b81a <USBH_AllocPipe>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5c0:	2180      	movs	r1, #128	; 0x80
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f001 f929 	bl	800b81a <USBH_AllocPipe>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	7919      	ldrb	r1, [r3, #4]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5e4:	b292      	uxth	r2, r2
 800a5e6:	9202      	str	r2, [sp, #8]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	9201      	str	r2, [sp, #4]
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2280      	movs	r2, #128	; 0x80
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f001 f8e2 	bl	800b7bc <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7959      	ldrb	r1, [r3, #5]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a60c:	b292      	uxth	r2, r2
 800a60e:	9202      	str	r2, [sp, #8]
 800a610:	2200      	movs	r2, #0
 800a612:	9201      	str	r2, [sp, #4]
 800a614:	9300      	str	r3, [sp, #0]
 800a616:	4603      	mov	r3, r0
 800a618:	2200      	movs	r2, #0
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f001 f8ce 	bl	800b7bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a620:	e109      	b.n	800a836 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f90c 	bl	800a840 <USBH_HandleEnum>
 800a628:	4603      	mov	r3, r0
 800a62a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	b2db      	uxtb	r3, r3
 800a630:	2b00      	cmp	r3, #0
 800a632:	f040 80f3 	bne.w	800a81c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a644:	2b01      	cmp	r3, #1
 800a646:	d103      	bne.n	800a650 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2208      	movs	r2, #8
 800a64c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a64e:	e0e5      	b.n	800a81c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2207      	movs	r2, #7
 800a654:	701a      	strb	r2, [r3, #0]
      break;
 800a656:	e0e1      	b.n	800a81c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	f000 80de 	beq.w	800a820 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a66a:	2101      	movs	r1, #1
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2208      	movs	r2, #8
 800a674:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a676:	e0d3      	b.n	800a820 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a67e:	b29b      	uxth	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 fc20 	bl	800aec8 <USBH_SetCfg>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	f040 80ca 	bne.w	800a824 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2209      	movs	r2, #9
 800a694:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a696:	e0c5      	b.n	800a824 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a69e:	f003 0320 	and.w	r3, r3, #32
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fc30 	bl	800af0e <USBH_SetFeature>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f040 80b9 	bne.w	800a828 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	220a      	movs	r2, #10
 800a6ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a6bc:	e0b4      	b.n	800a828 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	220a      	movs	r2, #10
 800a6c2:	701a      	strb	r2, [r3, #0]
      break;
 800a6c4:	e0b0      	b.n	800a828 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f000 80ad 	beq.w	800a82c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a6da:	2300      	movs	r3, #0
 800a6dc:	73fb      	strb	r3, [r7, #15]
 800a6de:	e016      	b.n	800a70e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a6e0:	7bfa      	ldrb	r2, [r7, #15]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	32de      	adds	r2, #222	; 0xde
 800a6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ea:	791a      	ldrb	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d108      	bne.n	800a708 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a6f6:	7bfa      	ldrb	r2, [r7, #15]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	32de      	adds	r2, #222	; 0xde
 800a6fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a706:	e005      	b.n	800a714 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	3301      	adds	r3, #1
 800a70c:	73fb      	strb	r3, [r7, #15]
 800a70e:	7bfb      	ldrb	r3, [r7, #15]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0e5      	beq.n	800a6e0 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d016      	beq.n	800a74c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	4798      	blx	r3
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d109      	bne.n	800a744 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2206      	movs	r2, #6
 800a734:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a73c:	2103      	movs	r1, #3
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a742:	e073      	b.n	800a82c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	220d      	movs	r2, #13
 800a748:	701a      	strb	r2, [r3, #0]
      break;
 800a74a:	e06f      	b.n	800a82c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	220d      	movs	r2, #13
 800a750:	701a      	strb	r2, [r3, #0]
      break;
 800a752:	e06b      	b.n	800a82c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d017      	beq.n	800a78e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	4798      	blx	r3
 800a76a:	4603      	mov	r3, r0
 800a76c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a76e:	7bbb      	ldrb	r3, [r7, #14]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	2b00      	cmp	r3, #0
 800a774:	d103      	bne.n	800a77e <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	220b      	movs	r2, #11
 800a77a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a77c:	e058      	b.n	800a830 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b02      	cmp	r3, #2
 800a784:	d154      	bne.n	800a830 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	220d      	movs	r2, #13
 800a78a:	701a      	strb	r2, [r3, #0]
      break;
 800a78c:	e050      	b.n	800a830 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	220d      	movs	r2, #13
 800a792:	701a      	strb	r2, [r3, #0]
      break;
 800a794:	e04c      	b.n	800a830 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d049      	beq.n	800a834 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7a6:	695b      	ldr	r3, [r3, #20]
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	4798      	blx	r3
      }
      break;
 800a7ac:	e042      	b.n	800a834 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f7ff fd72 	bl	800a2a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d009      	beq.n	800a7da <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d005      	beq.n	800a7f0 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a7ea:	2105      	movs	r1, #5
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	2b01      	cmp	r3, #1
 800a7fa:	d107      	bne.n	800a80c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	f7ff fe2b 	bl	800a460 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a80a:	e014      	b.n	800a836 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f003 fd3d 	bl	800e28c <USBH_LL_Start>
      break;
 800a812:	e010      	b.n	800a836 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a814:	bf00      	nop
 800a816:	e00e      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a818:	bf00      	nop
 800a81a:	e00c      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a81c:	bf00      	nop
 800a81e:	e00a      	b.n	800a836 <USBH_Process+0x3b6>
    break;
 800a820:	bf00      	nop
 800a822:	e008      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a824:	bf00      	nop
 800a826:	e006      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a828:	bf00      	nop
 800a82a:	e004      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a82c:	bf00      	nop
 800a82e:	e002      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a830:	bf00      	nop
 800a832:	e000      	b.n	800a836 <USBH_Process+0x3b6>
      break;
 800a834:	bf00      	nop
  }
  return USBH_OK;
 800a836:	2300      	movs	r3, #0
}
 800a838:	4618      	mov	r0, r3
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af04      	add	r7, sp, #16
 800a846:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a848:	2301      	movs	r3, #1
 800a84a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a84c:	2301      	movs	r3, #1
 800a84e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	785b      	ldrb	r3, [r3, #1]
 800a854:	2b07      	cmp	r3, #7
 800a856:	f200 81c1 	bhi.w	800abdc <USBH_HandleEnum+0x39c>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <USBH_HandleEnum+0x20>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a881 	.word	0x0800a881
 800a864:	0800a93f 	.word	0x0800a93f
 800a868:	0800a9a9 	.word	0x0800a9a9
 800a86c:	0800aa37 	.word	0x0800aa37
 800a870:	0800aaa1 	.word	0x0800aaa1
 800a874:	0800ab11 	.word	0x0800ab11
 800a878:	0800ab57 	.word	0x0800ab57
 800a87c:	0800ab9d 	.word	0x0800ab9d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a880:	2108      	movs	r1, #8
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa50 	bl	800ad28 <USBH_Get_DevDesc>
 800a888:	4603      	mov	r3, r0
 800a88a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a88c:	7bbb      	ldrb	r3, [r7, #14]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d130      	bne.n	800a8f4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7919      	ldrb	r1, [r3, #4]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a8b2:	687a      	ldr	r2, [r7, #4]
 800a8b4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	9202      	str	r2, [sp, #8]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	9201      	str	r2, [sp, #4]
 800a8be:	9300      	str	r3, [sp, #0]
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2280      	movs	r2, #128	; 0x80
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 ff79 	bl	800b7bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	7959      	ldrb	r1, [r3, #5]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a8da:	687a      	ldr	r2, [r7, #4]
 800a8dc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a8de:	b292      	uxth	r2, r2
 800a8e0:	9202      	str	r2, [sp, #8]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	9201      	str	r2, [sp, #4]
 800a8e6:	9300      	str	r3, [sp, #0]
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 ff65 	bl	800b7bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a8f2:	e175      	b.n	800abe0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a8f4:	7bbb      	ldrb	r3, [r7, #14]
 800a8f6:	2b03      	cmp	r3, #3
 800a8f8:	f040 8172 	bne.w	800abe0 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a902:	3301      	adds	r3, #1
 800a904:	b2da      	uxtb	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a912:	2b03      	cmp	r3, #3
 800a914:	d903      	bls.n	800a91e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	220d      	movs	r2, #13
 800a91a:	701a      	strb	r2, [r3, #0]
      break;
 800a91c:	e160      	b.n	800abe0 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	795b      	ldrb	r3, [r3, #5]
 800a922:	4619      	mov	r1, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 ff99 	bl	800b85c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	791b      	ldrb	r3, [r3, #4]
 800a92e:	4619      	mov	r1, r3
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f000 ff93 	bl	800b85c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	701a      	strb	r2, [r3, #0]
      break;
 800a93c:	e150      	b.n	800abe0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a93e:	2112      	movs	r1, #18
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f9f1 	bl	800ad28 <USBH_Get_DevDesc>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2202      	movs	r2, #2
 800a954:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a956:	e145      	b.n	800abe4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a958:	7bbb      	ldrb	r3, [r7, #14]
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	f040 8142 	bne.w	800abe4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a966:	3301      	adds	r3, #1
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a976:	2b03      	cmp	r3, #3
 800a978:	d903      	bls.n	800a982 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	220d      	movs	r2, #13
 800a97e:	701a      	strb	r2, [r3, #0]
      break;
 800a980:	e130      	b.n	800abe4 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	795b      	ldrb	r3, [r3, #5]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 ff67 	bl	800b85c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	791b      	ldrb	r3, [r3, #4]
 800a992:	4619      	mov	r1, r3
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f000 ff61 	bl	800b85c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	701a      	strb	r2, [r3, #0]
      break;
 800a9a6:	e11d      	b.n	800abe4 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fa68 	bl	800ae80 <USBH_SetAddress>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9b4:	7bbb      	ldrb	r3, [r7, #14]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d132      	bne.n	800aa20 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a9ba:	2002      	movs	r0, #2
 800a9bc:	f003 fdfe 	bl	800e5bc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	7919      	ldrb	r1, [r3, #4]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a9e2:	b292      	uxth	r2, r2
 800a9e4:	9202      	str	r2, [sp, #8]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	9201      	str	r2, [sp, #4]
 800a9ea:	9300      	str	r3, [sp, #0]
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2280      	movs	r2, #128	; 0x80
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f000 fee3 	bl	800b7bc <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	7959      	ldrb	r1, [r3, #5]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa0a:	b292      	uxth	r2, r2
 800aa0c:	9202      	str	r2, [sp, #8]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	9201      	str	r2, [sp, #4]
 800aa12:	9300      	str	r3, [sp, #0]
 800aa14:	4603      	mov	r3, r0
 800aa16:	2200      	movs	r2, #0
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 fecf 	bl	800b7bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa1e:	e0e3      	b.n	800abe8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa20:	7bbb      	ldrb	r3, [r7, #14]
 800aa22:	2b03      	cmp	r3, #3
 800aa24:	f040 80e0 	bne.w	800abe8 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	220d      	movs	r2, #13
 800aa2c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	705a      	strb	r2, [r3, #1]
      break;
 800aa34:	e0d8      	b.n	800abe8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800aa36:	2109      	movs	r1, #9
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f99d 	bl	800ad78 <USBH_Get_CfgDesc>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d103      	bne.n	800aa50 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa4e:	e0cd      	b.n	800abec <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	2b03      	cmp	r3, #3
 800aa54:	f040 80ca 	bne.w	800abec <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa5e:	3301      	adds	r3, #1
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa6e:	2b03      	cmp	r3, #3
 800aa70:	d903      	bls.n	800aa7a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	220d      	movs	r2, #13
 800aa76:	701a      	strb	r2, [r3, #0]
      break;
 800aa78:	e0b8      	b.n	800abec <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	795b      	ldrb	r3, [r3, #5]
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f000 feeb 	bl	800b85c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	791b      	ldrb	r3, [r3, #4]
 800aa8a:	4619      	mov	r1, r3
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fee5 	bl	800b85c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	701a      	strb	r2, [r3, #0]
      break;
 800aa9e:	e0a5      	b.n	800abec <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f965 	bl	800ad78 <USBH_Get_CfgDesc>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aab2:	7bbb      	ldrb	r3, [r7, #14]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d103      	bne.n	800aac0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2205      	movs	r2, #5
 800aabc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aabe:	e097      	b.n	800abf0 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b03      	cmp	r3, #3
 800aac4:	f040 8094 	bne.w	800abf0 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aace:	3301      	adds	r3, #1
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d903      	bls.n	800aaea <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	220d      	movs	r2, #13
 800aae6:	701a      	strb	r2, [r3, #0]
      break;
 800aae8:	e082      	b.n	800abf0 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	795b      	ldrb	r3, [r3, #5]
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 feb3 	bl	800b85c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	791b      	ldrb	r3, [r3, #4]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 fead 	bl	800b85c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	701a      	strb	r2, [r3, #0]
      break;
 800ab0e:	e06f      	b.n	800abf0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d019      	beq.n	800ab4e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ab26:	23ff      	movs	r3, #255	; 0xff
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f949 	bl	800adc0 <USBH_Get_StringDesc>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab32:	7bbb      	ldrb	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d103      	bne.n	800ab40 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2206      	movs	r2, #6
 800ab3c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab3e:	e059      	b.n	800abf4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab40:	7bbb      	ldrb	r3, [r7, #14]
 800ab42:	2b03      	cmp	r3, #3
 800ab44:	d156      	bne.n	800abf4 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2206      	movs	r2, #6
 800ab4a:	705a      	strb	r2, [r3, #1]
      break;
 800ab4c:	e052      	b.n	800abf4 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2206      	movs	r2, #6
 800ab52:	705a      	strb	r2, [r3, #1]
      break;
 800ab54:	e04e      	b.n	800abf4 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d019      	beq.n	800ab94 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ab6c:	23ff      	movs	r3, #255	; 0xff
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f926 	bl	800adc0 <USBH_Get_StringDesc>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d103      	bne.n	800ab86 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2207      	movs	r2, #7
 800ab82:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ab84:	e038      	b.n	800abf8 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab86:	7bbb      	ldrb	r3, [r7, #14]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d135      	bne.n	800abf8 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2207      	movs	r2, #7
 800ab90:	705a      	strb	r2, [r3, #1]
      break;
 800ab92:	e031      	b.n	800abf8 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2207      	movs	r2, #7
 800ab98:	705a      	strb	r2, [r3, #1]
      break;
 800ab9a:	e02d      	b.n	800abf8 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d017      	beq.n	800abd6 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800abb2:	23ff      	movs	r3, #255	; 0xff
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f903 	bl	800adc0 <USBH_Get_StringDesc>
 800abba:	4603      	mov	r3, r0
 800abbc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d102      	bne.n	800abca <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800abc8:	e018      	b.n	800abfc <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	2b03      	cmp	r3, #3
 800abce:	d115      	bne.n	800abfc <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
      break;
 800abd4:	e012      	b.n	800abfc <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	73fb      	strb	r3, [r7, #15]
      break;
 800abda:	e00f      	b.n	800abfc <USBH_HandleEnum+0x3bc>

    default:
      break;
 800abdc:	bf00      	nop
 800abde:	e00e      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abe0:	bf00      	nop
 800abe2:	e00c      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abe4:	bf00      	nop
 800abe6:	e00a      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abe8:	bf00      	nop
 800abea:	e008      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abec:	bf00      	nop
 800abee:	e006      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abf0:	bf00      	nop
 800abf2:	e004      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abf4:	bf00      	nop
 800abf6:	e002      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abf8:	bf00      	nop
 800abfa:	e000      	b.n	800abfe <USBH_HandleEnum+0x3be>
      break;
 800abfc:	bf00      	nop
  }
  return Status;
 800abfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b083      	sub	sp, #12
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ac1a:	bf00      	nop
 800ac1c:	370c      	adds	r7, #12
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ac26:	b580      	push	{r7, lr}
 800ac28:	b082      	sub	sp, #8
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ac34:	1c5a      	adds	r2, r3, #1
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f804 	bl	800ac4a <USBH_HandleSof>
}
 800ac42:	bf00      	nop
 800ac44:	3708      	adds	r7, #8
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b082      	sub	sp, #8
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	b2db      	uxtb	r3, r3
 800ac58:	2b0b      	cmp	r3, #11
 800ac5a:	d10a      	bne.n	800ac72 <USBH_HandleSof+0x28>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d005      	beq.n	800ac72 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	4798      	blx	r3
  }
}
 800ac72:	bf00      	nop
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2201      	movs	r2, #1
 800ac86:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800ac8a:	bf00      	nop
}
 800ac8c:	370c      	adds	r7, #12
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr

0800ac96 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ac96:	b480      	push	{r7}
 800ac98:	b083      	sub	sp, #12
 800ac9a:	af00      	add	r7, sp, #0
 800ac9c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2200      	movs	r2, #0
 800aca2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800aca6:	bf00      	nop
}
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b083      	sub	sp, #12
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800acd2:	2300      	movs	r3, #0
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2201      	movs	r2, #1
 800acec:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f003 fade 	bl	800e2c2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	791b      	ldrb	r3, [r3, #4]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 fda5 	bl	800b85c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	795b      	ldrb	r3, [r3, #5]
 800ad16:	4619      	mov	r1, r3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fd9f 	bl	800b85c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3708      	adds	r7, #8
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	9300      	str	r3, [sp, #0]
 800ad40:	4613      	mov	r3, r2
 800ad42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad46:	2100      	movs	r1, #0
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f864 	bl	800ae16 <USBH_GetDescriptor>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	73fb      	strb	r3, [r7, #15]
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10a      	bne.n	800ad6e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ad64:	78fa      	ldrb	r2, [r7, #3]
 800ad66:	b292      	uxth	r2, r2
 800ad68:	4619      	mov	r1, r3
 800ad6a:	f000 f918 	bl	800af9e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	331c      	adds	r3, #28
 800ad88:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ad8a:	887b      	ldrh	r3, [r7, #2]
 800ad8c:	9300      	str	r3, [sp, #0]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad94:	2100      	movs	r1, #0
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f83d 	bl	800ae16 <USBH_GetDescriptor>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	72fb      	strb	r3, [r7, #11]
 800ada0:	7afb      	ldrb	r3, [r7, #11]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d107      	bne.n	800adb6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800adac:	887a      	ldrh	r2, [r7, #2]
 800adae:	68f9      	ldr	r1, [r7, #12]
 800adb0:	4618      	mov	r0, r3
 800adb2:	f000 f964 	bl	800b07e <USBH_ParseCfgDesc>
  }

  return status;
 800adb6:	7afb      	ldrb	r3, [r7, #11]
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3710      	adds	r7, #16
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}

0800adc0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b088      	sub	sp, #32
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	607a      	str	r2, [r7, #4]
 800adca:	461a      	mov	r2, r3
 800adcc:	460b      	mov	r3, r1
 800adce:	72fb      	strb	r3, [r7, #11]
 800add0:	4613      	mov	r3, r2
 800add2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800add4:	7afb      	ldrb	r3, [r7, #11]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800addc:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ade4:	893b      	ldrh	r3, [r7, #8]
 800ade6:	9300      	str	r3, [sp, #0]
 800ade8:	460b      	mov	r3, r1
 800adea:	2100      	movs	r1, #0
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f000 f812 	bl	800ae16 <USBH_GetDescriptor>
 800adf2:	4603      	mov	r3, r0
 800adf4:	75fb      	strb	r3, [r7, #23]
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d107      	bne.n	800ae0c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae02:	893a      	ldrh	r2, [r7, #8]
 800ae04:	6879      	ldr	r1, [r7, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 fa37 	bl	800b27a <USBH_ParseStringDesc>
  }

  return status;
 800ae0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b084      	sub	sp, #16
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	60f8      	str	r0, [r7, #12]
 800ae1e:	607b      	str	r3, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	72fb      	strb	r3, [r7, #11]
 800ae24:	4613      	mov	r3, r2
 800ae26:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	789b      	ldrb	r3, [r3, #2]
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d11c      	bne.n	800ae6a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2206      	movs	r2, #6
 800ae40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	893a      	ldrh	r2, [r7, #8]
 800ae46:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ae48:	893b      	ldrh	r3, [r7, #8]
 800ae4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae52:	d104      	bne.n	800ae5e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f240 4209 	movw	r2, #1033	; 0x409
 800ae5a:	829a      	strh	r2, [r3, #20]
 800ae5c:	e002      	b.n	800ae64 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	8b3a      	ldrh	r2, [r7, #24]
 800ae68:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ae6a:	8b3b      	ldrh	r3, [r7, #24]
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f000 fa50 	bl	800b316 <USBH_CtlReq>
 800ae76:	4603      	mov	r3, r0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}

0800ae80 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	789b      	ldrb	r3, [r3, #2]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d10f      	bne.n	800aeb4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2205      	movs	r2, #5
 800ae9e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800aea0:	78fb      	ldrb	r3, [r7, #3]
 800aea2:	b29a      	uxth	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fa2c 	bl	800b316 <USBH_CtlReq>
 800aebe:	4603      	mov	r3, r0
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3708      	adds	r7, #8
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	460b      	mov	r3, r1
 800aed2:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	789b      	ldrb	r3, [r3, #2]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d10e      	bne.n	800aefa <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2209      	movs	r2, #9
 800aee6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	887a      	ldrh	r2, [r7, #2]
 800aeec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2200      	movs	r2, #0
 800aef2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800aefa:	2200      	movs	r2, #0
 800aefc:	2100      	movs	r1, #0
 800aefe:	6878      	ldr	r0, [r7, #4]
 800af00:	f000 fa09 	bl	800b316 <USBH_CtlReq>
 800af04:	4603      	mov	r3, r0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}

0800af0e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b082      	sub	sp, #8
 800af12:	af00      	add	r7, sp, #0
 800af14:	6078      	str	r0, [r7, #4]
 800af16:	460b      	mov	r3, r1
 800af18:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	789b      	ldrb	r3, [r3, #2]
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d10f      	bne.n	800af42 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2203      	movs	r2, #3
 800af2c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800af2e:	78fb      	ldrb	r3, [r7, #3]
 800af30:	b29a      	uxth	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2200      	movs	r2, #0
 800af40:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800af42:	2200      	movs	r2, #0
 800af44:	2100      	movs	r1, #0
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 f9e5 	bl	800b316 <USBH_CtlReq>
 800af4c:	4603      	mov	r3, r0
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b082      	sub	sp, #8
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
 800af5e:	460b      	mov	r3, r1
 800af60:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	789b      	ldrb	r3, [r3, #2]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d10f      	bne.n	800af8a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2202      	movs	r2, #2
 800af6e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800af7c:	78fb      	ldrb	r3, [r7, #3]
 800af7e:	b29a      	uxth	r2, r3
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800af8a:	2200      	movs	r2, #0
 800af8c:	2100      	movs	r1, #0
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 f9c1 	bl	800b316 <USBH_CtlReq>
 800af94:	4603      	mov	r3, r0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3708      	adds	r7, #8
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	4613      	mov	r3, r2
 800afaa:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	781a      	ldrb	r2, [r3, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	785a      	ldrb	r2, [r3, #1]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	3302      	adds	r3, #2
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	b29a      	uxth	r2, r3
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	3303      	adds	r3, #3
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	b29b      	uxth	r3, r3
 800afcc:	021b      	lsls	r3, r3, #8
 800afce:	b29b      	uxth	r3, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	791a      	ldrb	r2, [r3, #4]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	795a      	ldrb	r2, [r3, #5]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	799a      	ldrb	r2, [r3, #6]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	79da      	ldrb	r2, [r3, #7]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800aff8:	88fb      	ldrh	r3, [r7, #6]
 800affa:	2b08      	cmp	r3, #8
 800affc:	d939      	bls.n	800b072 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	3308      	adds	r3, #8
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b29a      	uxth	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	3309      	adds	r3, #9
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	021b      	lsls	r3, r3, #8
 800b010:	b29b      	uxth	r3, r3
 800b012:	4313      	orrs	r3, r2
 800b014:	b29a      	uxth	r2, r3
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	330a      	adds	r3, #10
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	b29a      	uxth	r2, r3
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	330b      	adds	r3, #11
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	4313      	orrs	r3, r2
 800b030:	b29a      	uxth	r2, r3
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	330c      	adds	r3, #12
 800b03a:	781b      	ldrb	r3, [r3, #0]
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	330d      	adds	r3, #13
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	b29b      	uxth	r3, r3
 800b046:	021b      	lsls	r3, r3, #8
 800b048:	b29b      	uxth	r3, r3
 800b04a:	4313      	orrs	r3, r2
 800b04c:	b29a      	uxth	r2, r3
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	7b9a      	ldrb	r2, [r3, #14]
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	7bda      	ldrb	r2, [r3, #15]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	7c1a      	ldrb	r2, [r3, #16]
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	7c5a      	ldrb	r2, [r3, #17]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	745a      	strb	r2, [r3, #17]
  }
}
 800b072:	bf00      	nop
 800b074:	3714      	adds	r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07c:	4770      	bx	lr

0800b07e <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b08a      	sub	sp, #40	; 0x28
 800b082:	af00      	add	r7, sp, #0
 800b084:	60f8      	str	r0, [r7, #12]
 800b086:	60b9      	str	r1, [r7, #8]
 800b088:	4613      	mov	r3, r2
 800b08a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b090:	2300      	movs	r3, #0
 800b092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	781a      	ldrb	r2, [r3, #0]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	785a      	ldrb	r2, [r3, #1]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	3302      	adds	r3, #2
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	3303      	adds	r3, #3
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	021b      	lsls	r3, r3, #8
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	791a      	ldrb	r2, [r3, #4]
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	795a      	ldrb	r2, [r3, #5]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	799a      	ldrb	r2, [r3, #6]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	79da      	ldrb	r2, [r3, #7]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	7a1a      	ldrb	r2, [r3, #8]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b0f4:	88fb      	ldrh	r3, [r7, #6]
 800b0f6:	2b09      	cmp	r3, #9
 800b0f8:	d95f      	bls.n	800b1ba <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b0fa:	2309      	movs	r3, #9
 800b0fc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b102:	e051      	b.n	800b1a8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b104:	f107 0316 	add.w	r3, r7, #22
 800b108:	4619      	mov	r1, r3
 800b10a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b10c:	f000 f8e8 	bl	800b2e0 <USBH_GetNextDesc>
 800b110:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	2b04      	cmp	r3, #4
 800b118:	d146      	bne.n	800b1a8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b11a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b11e:	221a      	movs	r2, #26
 800b120:	fb02 f303 	mul.w	r3, r2, r3
 800b124:	3308      	adds	r3, #8
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	4413      	add	r3, r2
 800b12a:	3302      	adds	r3, #2
 800b12c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b12e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b130:	69f8      	ldr	r0, [r7, #28]
 800b132:	f000 f846 	bl	800b1c2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b136:	2300      	movs	r3, #0
 800b138:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b13c:	2300      	movs	r3, #0
 800b13e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b140:	e022      	b.n	800b188 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b142:	f107 0316 	add.w	r3, r7, #22
 800b146:	4619      	mov	r1, r3
 800b148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b14a:	f000 f8c9 	bl	800b2e0 <USBH_GetNextDesc>
 800b14e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	785b      	ldrb	r3, [r3, #1]
 800b154:	2b05      	cmp	r3, #5
 800b156:	d117      	bne.n	800b188 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b158:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b15c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b160:	3201      	adds	r2, #1
 800b162:	00d2      	lsls	r2, r2, #3
 800b164:	211a      	movs	r1, #26
 800b166:	fb01 f303 	mul.w	r3, r1, r3
 800b16a:	4413      	add	r3, r2
 800b16c:	3308      	adds	r3, #8
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	4413      	add	r3, r2
 800b172:	3304      	adds	r3, #4
 800b174:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b178:	69b8      	ldr	r0, [r7, #24]
 800b17a:	f000 f851 	bl	800b220 <USBH_ParseEPDesc>
            ep_ix++;
 800b17e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b182:	3301      	adds	r3, #1
 800b184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	791b      	ldrb	r3, [r3, #4]
 800b18c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b190:	429a      	cmp	r2, r3
 800b192:	d204      	bcs.n	800b19e <USBH_ParseCfgDesc+0x120>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	885a      	ldrh	r2, [r3, #2]
 800b198:	8afb      	ldrh	r3, [r7, #22]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d8d1      	bhi.n	800b142 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b19e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b1a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d804      	bhi.n	800b1ba <USBH_ParseCfgDesc+0x13c>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	885a      	ldrh	r2, [r3, #2]
 800b1b4:	8afb      	ldrh	r3, [r7, #22]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d8a4      	bhi.n	800b104 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b1ba:	bf00      	nop
 800b1bc:	3728      	adds	r7, #40	; 0x28
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b1c2:	b480      	push	{r7}
 800b1c4:	b083      	sub	sp, #12
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	781a      	ldrb	r2, [r3, #0]
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	785a      	ldrb	r2, [r3, #1]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	789a      	ldrb	r2, [r3, #2]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b1e4:	683b      	ldr	r3, [r7, #0]
 800b1e6:	78da      	ldrb	r2, [r3, #3]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	791a      	ldrb	r2, [r3, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	795a      	ldrb	r2, [r3, #5]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	799a      	ldrb	r2, [r3, #6]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	79da      	ldrb	r2, [r3, #7]
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	7a1a      	ldrb	r2, [r3, #8]
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	721a      	strb	r2, [r3, #8]
}
 800b214:	bf00      	nop
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr

0800b220 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b220:	b480      	push	{r7}
 800b222:	b083      	sub	sp, #12
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
 800b228:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	785a      	ldrb	r2, [r3, #1]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	789a      	ldrb	r2, [r3, #2]
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	78da      	ldrb	r2, [r3, #3]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	3304      	adds	r3, #4
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	b29a      	uxth	r2, r3
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	3305      	adds	r3, #5
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	b29b      	uxth	r3, r3
 800b25a:	021b      	lsls	r3, r3, #8
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	4313      	orrs	r3, r2
 800b260:	b29a      	uxth	r2, r3
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	799a      	ldrb	r2, [r3, #6]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	719a      	strb	r2, [r3, #6]
}
 800b26e:	bf00      	nop
 800b270:	370c      	adds	r7, #12
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b27a:	b480      	push	{r7}
 800b27c:	b087      	sub	sp, #28
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	4613      	mov	r3, r2
 800b286:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	3301      	adds	r3, #1
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	2b03      	cmp	r3, #3
 800b290:	d120      	bne.n	800b2d4 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	1e9a      	subs	r2, r3, #2
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	4293      	cmp	r3, r2
 800b29c:	bf28      	it	cs
 800b29e:	4613      	movcs	r3, r2
 800b2a0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	3302      	adds	r3, #2
 800b2a6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	82fb      	strh	r3, [r7, #22]
 800b2ac:	e00b      	b.n	800b2c6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b2ae:	8afb      	ldrh	r3, [r7, #22]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4413      	add	r3, r2
 800b2b4:	781a      	ldrb	r2, [r3, #0]
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b2c0:	8afb      	ldrh	r3, [r7, #22]
 800b2c2:	3302      	adds	r3, #2
 800b2c4:	82fb      	strh	r3, [r7, #22]
 800b2c6:	8afa      	ldrh	r2, [r7, #22]
 800b2c8:	8abb      	ldrh	r3, [r7, #20]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d3ef      	bcc.n	800b2ae <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	701a      	strb	r2, [r3, #0]
  }
}
 800b2d4:	bf00      	nop
 800b2d6:	371c      	adds	r7, #28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b085      	sub	sp, #20
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	881a      	ldrh	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4413      	add	r3, r2
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4413      	add	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b308:	68fb      	ldr	r3, [r7, #12]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3714      	adds	r7, #20
 800b30e:	46bd      	mov	sp, r7
 800b310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b314:	4770      	bx	lr

0800b316 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b086      	sub	sp, #24
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	4613      	mov	r3, r2
 800b322:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b324:	2301      	movs	r3, #1
 800b326:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	789b      	ldrb	r3, [r3, #2]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d002      	beq.n	800b336 <USBH_CtlReq+0x20>
 800b330:	2b02      	cmp	r3, #2
 800b332:	d00f      	beq.n	800b354 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b334:	e027      	b.n	800b386 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	88fa      	ldrh	r2, [r7, #6]
 800b340:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	2201      	movs	r2, #1
 800b346:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2202      	movs	r2, #2
 800b34c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b34e:	2301      	movs	r3, #1
 800b350:	75fb      	strb	r3, [r7, #23]
      break;
 800b352:	e018      	b.n	800b386 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f000 f81b 	bl	800b390 <USBH_HandleControl>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d002      	beq.n	800b36a <USBH_CtlReq+0x54>
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	2b03      	cmp	r3, #3
 800b368:	d106      	bne.n	800b378 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2201      	movs	r2, #1
 800b36e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	761a      	strb	r2, [r3, #24]
      break;
 800b376:	e005      	b.n	800b384 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b378:	7dfb      	ldrb	r3, [r7, #23]
 800b37a:	2b02      	cmp	r3, #2
 800b37c:	d102      	bne.n	800b384 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2201      	movs	r2, #1
 800b382:	709a      	strb	r2, [r3, #2]
      break;
 800b384:	bf00      	nop
  }
  return status;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3718      	adds	r7, #24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b086      	sub	sp, #24
 800b394:	af02      	add	r7, sp, #8
 800b396:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b398:	2301      	movs	r3, #1
 800b39a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b39c:	2300      	movs	r3, #0
 800b39e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	7e1b      	ldrb	r3, [r3, #24]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	2b0a      	cmp	r3, #10
 800b3a8:	f200 8158 	bhi.w	800b65c <USBH_HandleControl+0x2cc>
 800b3ac:	a201      	add	r2, pc, #4	; (adr r2, 800b3b4 <USBH_HandleControl+0x24>)
 800b3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b2:	bf00      	nop
 800b3b4:	0800b3e1 	.word	0x0800b3e1
 800b3b8:	0800b3fb 	.word	0x0800b3fb
 800b3bc:	0800b465 	.word	0x0800b465
 800b3c0:	0800b48b 	.word	0x0800b48b
 800b3c4:	0800b4c3 	.word	0x0800b4c3
 800b3c8:	0800b4ef 	.word	0x0800b4ef
 800b3cc:	0800b541 	.word	0x0800b541
 800b3d0:	0800b563 	.word	0x0800b563
 800b3d4:	0800b59f 	.word	0x0800b59f
 800b3d8:	0800b5c7 	.word	0x0800b5c7
 800b3dc:	0800b605 	.word	0x0800b605
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f103 0110 	add.w	r1, r3, #16
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	795b      	ldrb	r3, [r3, #5]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 f945 	bl	800b67c <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2202      	movs	r2, #2
 800b3f6:	761a      	strb	r2, [r3, #24]
      break;
 800b3f8:	e13b      	b.n	800b672 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	795b      	ldrb	r3, [r3, #5]
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f003 f84b 	bl	800e49c <USBH_LL_GetURBState>
 800b406:	4603      	mov	r3, r0
 800b408:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b40a:	7bbb      	ldrb	r3, [r7, #14]
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d11e      	bne.n	800b44e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	7c1b      	ldrb	r3, [r3, #16]
 800b414:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b418:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	8adb      	ldrh	r3, [r3, #22]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00a      	beq.n	800b438 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b422:	7b7b      	ldrb	r3, [r7, #13]
 800b424:	2b80      	cmp	r3, #128	; 0x80
 800b426:	d103      	bne.n	800b430 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2203      	movs	r2, #3
 800b42c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b42e:	e117      	b.n	800b660 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2205      	movs	r2, #5
 800b434:	761a      	strb	r2, [r3, #24]
      break;
 800b436:	e113      	b.n	800b660 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b438:	7b7b      	ldrb	r3, [r7, #13]
 800b43a:	2b80      	cmp	r3, #128	; 0x80
 800b43c:	d103      	bne.n	800b446 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2209      	movs	r2, #9
 800b442:	761a      	strb	r2, [r3, #24]
      break;
 800b444:	e10c      	b.n	800b660 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2207      	movs	r2, #7
 800b44a:	761a      	strb	r2, [r3, #24]
      break;
 800b44c:	e108      	b.n	800b660 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b44e:	7bbb      	ldrb	r3, [r7, #14]
 800b450:	2b04      	cmp	r3, #4
 800b452:	d003      	beq.n	800b45c <USBH_HandleControl+0xcc>
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	2b02      	cmp	r3, #2
 800b458:	f040 8102 	bne.w	800b660 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	220b      	movs	r2, #11
 800b460:	761a      	strb	r2, [r3, #24]
      break;
 800b462:	e0fd      	b.n	800b660 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b46a:	b29a      	uxth	r2, r3
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6899      	ldr	r1, [r3, #8]
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	899a      	ldrh	r2, [r3, #12]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	791b      	ldrb	r3, [r3, #4]
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f93c 	bl	800b6fa <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2204      	movs	r2, #4
 800b486:	761a      	strb	r2, [r3, #24]
      break;
 800b488:	e0f3      	b.n	800b672 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	791b      	ldrb	r3, [r3, #4]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f003 f803 	bl	800e49c <USBH_LL_GetURBState>
 800b496:	4603      	mov	r3, r0
 800b498:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b01      	cmp	r3, #1
 800b49e:	d102      	bne.n	800b4a6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2209      	movs	r2, #9
 800b4a4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	2b05      	cmp	r3, #5
 800b4aa:	d102      	bne.n	800b4b2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b4b0:	e0d8      	b.n	800b664 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b4b2:	7bbb      	ldrb	r3, [r7, #14]
 800b4b4:	2b04      	cmp	r3, #4
 800b4b6:	f040 80d5 	bne.w	800b664 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	220b      	movs	r2, #11
 800b4be:	761a      	strb	r2, [r3, #24]
      break;
 800b4c0:	e0d0      	b.n	800b664 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6899      	ldr	r1, [r3, #8]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	899a      	ldrh	r2, [r3, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	7958      	ldrb	r0, [r3, #5]
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f8eb 	bl	800b6b0 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b4e0:	b29a      	uxth	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2206      	movs	r2, #6
 800b4ea:	761a      	strb	r2, [r3, #24]
      break;
 800b4ec:	e0c1      	b.n	800b672 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	795b      	ldrb	r3, [r3, #5]
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f002 ffd1 	bl	800e49c <USBH_LL_GetURBState>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b4fe:	7bbb      	ldrb	r3, [r7, #14]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d103      	bne.n	800b50c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2207      	movs	r2, #7
 800b508:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b50a:	e0ad      	b.n	800b668 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b50c:	7bbb      	ldrb	r3, [r7, #14]
 800b50e:	2b05      	cmp	r3, #5
 800b510:	d105      	bne.n	800b51e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	220c      	movs	r2, #12
 800b516:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b518:	2303      	movs	r3, #3
 800b51a:	73fb      	strb	r3, [r7, #15]
      break;
 800b51c:	e0a4      	b.n	800b668 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b51e:	7bbb      	ldrb	r3, [r7, #14]
 800b520:	2b02      	cmp	r3, #2
 800b522:	d103      	bne.n	800b52c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2205      	movs	r2, #5
 800b528:	761a      	strb	r2, [r3, #24]
      break;
 800b52a:	e09d      	b.n	800b668 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b52c:	7bbb      	ldrb	r3, [r7, #14]
 800b52e:	2b04      	cmp	r3, #4
 800b530:	f040 809a 	bne.w	800b668 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	220b      	movs	r2, #11
 800b538:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b53a:	2302      	movs	r3, #2
 800b53c:	73fb      	strb	r3, [r7, #15]
      break;
 800b53e:	e093      	b.n	800b668 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	791b      	ldrb	r3, [r3, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	2100      	movs	r1, #0
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f000 f8d6 	bl	800b6fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2208      	movs	r2, #8
 800b55e:	761a      	strb	r2, [r3, #24]

      break;
 800b560:	e087      	b.n	800b672 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	791b      	ldrb	r3, [r3, #4]
 800b566:	4619      	mov	r1, r3
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f002 ff97 	bl	800e49c <USBH_LL_GetURBState>
 800b56e:	4603      	mov	r3, r0
 800b570:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b01      	cmp	r3, #1
 800b576:	d105      	bne.n	800b584 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	220d      	movs	r2, #13
 800b57c:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b582:	e073      	b.n	800b66c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b584:	7bbb      	ldrb	r3, [r7, #14]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d103      	bne.n	800b592 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	220b      	movs	r2, #11
 800b58e:	761a      	strb	r2, [r3, #24]
      break;
 800b590:	e06c      	b.n	800b66c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	2b05      	cmp	r3, #5
 800b596:	d169      	bne.n	800b66c <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b598:	2303      	movs	r3, #3
 800b59a:	73fb      	strb	r3, [r7, #15]
      break;
 800b59c:	e066      	b.n	800b66c <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	795a      	ldrb	r2, [r3, #5]
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	9300      	str	r3, [sp, #0]
 800b5a6:	4613      	mov	r3, r2
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	2100      	movs	r1, #0
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f000 f87f 	bl	800b6b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	220a      	movs	r2, #10
 800b5c2:	761a      	strb	r2, [r3, #24]
      break;
 800b5c4:	e055      	b.n	800b672 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	795b      	ldrb	r3, [r3, #5]
 800b5ca:	4619      	mov	r1, r3
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f002 ff65 	bl	800e49c <USBH_LL_GetURBState>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d105      	bne.n	800b5e8 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	220d      	movs	r2, #13
 800b5e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5e6:	e043      	b.n	800b670 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b5e8:	7bbb      	ldrb	r3, [r7, #14]
 800b5ea:	2b02      	cmp	r3, #2
 800b5ec:	d103      	bne.n	800b5f6 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2209      	movs	r2, #9
 800b5f2:	761a      	strb	r2, [r3, #24]
      break;
 800b5f4:	e03c      	b.n	800b670 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b5f6:	7bbb      	ldrb	r3, [r7, #14]
 800b5f8:	2b04      	cmp	r3, #4
 800b5fa:	d139      	bne.n	800b670 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	220b      	movs	r2, #11
 800b600:	761a      	strb	r2, [r3, #24]
      break;
 800b602:	e035      	b.n	800b670 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7e5b      	ldrb	r3, [r3, #25]
 800b608:	3301      	adds	r3, #1
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	765a      	strb	r2, [r3, #25]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	7e5b      	ldrb	r3, [r3, #25]
 800b614:	2b02      	cmp	r3, #2
 800b616:	d806      	bhi.n	800b626 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2201      	movs	r2, #1
 800b622:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b624:	e025      	b.n	800b672 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b62c:	2106      	movs	r1, #6
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	795b      	ldrb	r3, [r3, #5]
 800b63c:	4619      	mov	r1, r3
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f90c 	bl	800b85c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	791b      	ldrb	r3, [r3, #4]
 800b648:	4619      	mov	r1, r3
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f906 	bl	800b85c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b656:	2302      	movs	r3, #2
 800b658:	73fb      	strb	r3, [r7, #15]
      break;
 800b65a:	e00a      	b.n	800b672 <USBH_HandleControl+0x2e2>

    default:
      break;
 800b65c:	bf00      	nop
 800b65e:	e008      	b.n	800b672 <USBH_HandleControl+0x2e2>
      break;
 800b660:	bf00      	nop
 800b662:	e006      	b.n	800b672 <USBH_HandleControl+0x2e2>
      break;
 800b664:	bf00      	nop
 800b666:	e004      	b.n	800b672 <USBH_HandleControl+0x2e2>
      break;
 800b668:	bf00      	nop
 800b66a:	e002      	b.n	800b672 <USBH_HandleControl+0x2e2>
      break;
 800b66c:	bf00      	nop
 800b66e:	e000      	b.n	800b672 <USBH_HandleControl+0x2e2>
      break;
 800b670:	bf00      	nop
  }

  return status;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b088      	sub	sp, #32
 800b680:	af04      	add	r7, sp, #16
 800b682:	60f8      	str	r0, [r7, #12]
 800b684:	60b9      	str	r1, [r7, #8]
 800b686:	4613      	mov	r3, r2
 800b688:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b68a:	79f9      	ldrb	r1, [r7, #7]
 800b68c:	2300      	movs	r3, #0
 800b68e:	9303      	str	r3, [sp, #12]
 800b690:	2308      	movs	r3, #8
 800b692:	9302      	str	r3, [sp, #8]
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	9301      	str	r3, [sp, #4]
 800b698:	2300      	movs	r3, #0
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	2300      	movs	r3, #0
 800b69e:	2200      	movs	r2, #0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f002 feca 	bl	800e43a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af04      	add	r7, sp, #16
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	461a      	mov	r2, r3
 800b6be:	460b      	mov	r3, r1
 800b6c0:	80fb      	strh	r3, [r7, #6]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d001      	beq.n	800b6d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b6d4:	7979      	ldrb	r1, [r7, #5]
 800b6d6:	7e3b      	ldrb	r3, [r7, #24]
 800b6d8:	9303      	str	r3, [sp, #12]
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	9302      	str	r3, [sp, #8]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	9301      	str	r3, [sp, #4]
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	9300      	str	r3, [sp, #0]
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	68f8      	ldr	r0, [r7, #12]
 800b6ec:	f002 fea5 	bl	800e43a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}

0800b6fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b088      	sub	sp, #32
 800b6fe:	af04      	add	r7, sp, #16
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	4611      	mov	r1, r2
 800b706:	461a      	mov	r2, r3
 800b708:	460b      	mov	r3, r1
 800b70a:	80fb      	strh	r3, [r7, #6]
 800b70c:	4613      	mov	r3, r2
 800b70e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b710:	7979      	ldrb	r1, [r7, #5]
 800b712:	2300      	movs	r3, #0
 800b714:	9303      	str	r3, [sp, #12]
 800b716:	88fb      	ldrh	r3, [r7, #6]
 800b718:	9302      	str	r3, [sp, #8]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	9301      	str	r3, [sp, #4]
 800b71e:	2301      	movs	r3, #1
 800b720:	9300      	str	r3, [sp, #0]
 800b722:	2300      	movs	r3, #0
 800b724:	2201      	movs	r2, #1
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f002 fe87 	bl	800e43a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b72c:	2300      	movs	r3, #0

}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af04      	add	r7, sp, #16
 800b73c:	60f8      	str	r0, [r7, #12]
 800b73e:	60b9      	str	r1, [r7, #8]
 800b740:	4611      	mov	r1, r2
 800b742:	461a      	mov	r2, r3
 800b744:	460b      	mov	r3, r1
 800b746:	80fb      	strh	r3, [r7, #6]
 800b748:	4613      	mov	r3, r2
 800b74a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b756:	2300      	movs	r3, #0
 800b758:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b75a:	7979      	ldrb	r1, [r7, #5]
 800b75c:	7e3b      	ldrb	r3, [r7, #24]
 800b75e:	9303      	str	r3, [sp, #12]
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	9302      	str	r3, [sp, #8]
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	9301      	str	r3, [sp, #4]
 800b768:	2301      	movs	r3, #1
 800b76a:	9300      	str	r3, [sp, #0]
 800b76c:	2302      	movs	r3, #2
 800b76e:	2200      	movs	r2, #0
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f002 fe62 	bl	800e43a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3710      	adds	r7, #16
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af04      	add	r7, sp, #16
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	4611      	mov	r1, r2
 800b78c:	461a      	mov	r2, r3
 800b78e:	460b      	mov	r3, r1
 800b790:	80fb      	strh	r3, [r7, #6]
 800b792:	4613      	mov	r3, r2
 800b794:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b796:	7979      	ldrb	r1, [r7, #5]
 800b798:	2300      	movs	r3, #0
 800b79a:	9303      	str	r3, [sp, #12]
 800b79c:	88fb      	ldrh	r3, [r7, #6]
 800b79e:	9302      	str	r3, [sp, #8]
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f002 fe44 	bl	800e43a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}

0800b7bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af04      	add	r7, sp, #16
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	4608      	mov	r0, r1
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	70fb      	strb	r3, [r7, #3]
 800b7ce:	460b      	mov	r3, r1
 800b7d0:	70bb      	strb	r3, [r7, #2]
 800b7d2:	4613      	mov	r3, r2
 800b7d4:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b7d6:	7878      	ldrb	r0, [r7, #1]
 800b7d8:	78ba      	ldrb	r2, [r7, #2]
 800b7da:	78f9      	ldrb	r1, [r7, #3]
 800b7dc:	8b3b      	ldrh	r3, [r7, #24]
 800b7de:	9302      	str	r3, [sp, #8]
 800b7e0:	7d3b      	ldrb	r3, [r7, #20]
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	7c3b      	ldrb	r3, [r7, #16]
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	6878      	ldr	r0, [r7, #4]
 800b7ec:	f002 fdd7 	bl	800e39e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b7f0:	2300      	movs	r3, #0
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
 800b802:	460b      	mov	r3, r1
 800b804:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b806:	78fb      	ldrb	r3, [r7, #3]
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f002 fdf6 	bl	800e3fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800b810:	2300      	movs	r3, #0
}
 800b812:	4618      	mov	r0, r3
 800b814:	3708      	adds	r7, #8
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b084      	sub	sp, #16
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
 800b822:	460b      	mov	r3, r1
 800b824:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b826:	6878      	ldr	r0, [r7, #4]
 800b828:	f000 f836 	bl	800b898 <USBH_GetFreePipe>
 800b82c:	4603      	mov	r3, r0
 800b82e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b830:	89fb      	ldrh	r3, [r7, #14]
 800b832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b836:	4293      	cmp	r3, r2
 800b838:	d00a      	beq.n	800b850 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b83a:	78fa      	ldrb	r2, [r7, #3]
 800b83c:	89fb      	ldrh	r3, [r7, #14]
 800b83e:	f003 030f 	and.w	r3, r3, #15
 800b842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b846:	6879      	ldr	r1, [r7, #4]
 800b848:	33e0      	adds	r3, #224	; 0xe0
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	440b      	add	r3, r1
 800b84e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b850:	89fb      	ldrh	r3, [r7, #14]
 800b852:	b2db      	uxtb	r3, r3
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b85c:	b480      	push	{r7}
 800b85e:	b083      	sub	sp, #12
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	460b      	mov	r3, r1
 800b866:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b868:	78fb      	ldrb	r3, [r7, #3]
 800b86a:	2b0a      	cmp	r3, #10
 800b86c:	d80d      	bhi.n	800b88a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b86e:	78fb      	ldrb	r3, [r7, #3]
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	33e0      	adds	r3, #224	; 0xe0
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	4413      	add	r3, r2
 800b878:	685a      	ldr	r2, [r3, #4]
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b880:	6879      	ldr	r1, [r7, #4]
 800b882:	33e0      	adds	r3, #224	; 0xe0
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	440b      	add	r3, r1
 800b888:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b88a:	2300      	movs	r3, #0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	370c      	adds	r7, #12
 800b890:	46bd      	mov	sp, r7
 800b892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b896:	4770      	bx	lr

0800b898 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b898:	b480      	push	{r7}
 800b89a:	b085      	sub	sp, #20
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
 800b8a8:	e00f      	b.n	800b8ca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b8aa:	7bfb      	ldrb	r3, [r7, #15]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	33e0      	adds	r3, #224	; 0xe0
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	e007      	b.n	800b8d4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b8c4:	7bfb      	ldrb	r3, [r7, #15]
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	73fb      	strb	r3, [r7, #15]
 800b8ca:	7bfb      	ldrb	r3, [r7, #15]
 800b8cc:	2b0a      	cmp	r3, #10
 800b8ce:	d9ec      	bls.n	800b8aa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b8d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3714      	adds	r7, #20
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b8ea:	79fb      	ldrb	r3, [r7, #7]
 800b8ec:	4a08      	ldr	r2, [pc, #32]	; (800b910 <disk_status+0x30>)
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	79fa      	ldrb	r2, [r7, #7]
 800b8f8:	4905      	ldr	r1, [pc, #20]	; (800b910 <disk_status+0x30>)
 800b8fa:	440a      	add	r2, r1
 800b8fc:	7a12      	ldrb	r2, [r2, #8]
 800b8fe:	4610      	mov	r0, r2
 800b900:	4798      	blx	r3
 800b902:	4603      	mov	r3, r0
 800b904:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b906:	7bfb      	ldrb	r3, [r7, #15]
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3710      	adds	r7, #16
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	20001384 	.word	0x20001384

0800b914 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b91e:	2300      	movs	r3, #0
 800b920:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b922:	79fb      	ldrb	r3, [r7, #7]
 800b924:	4a0d      	ldr	r2, [pc, #52]	; (800b95c <disk_initialize+0x48>)
 800b926:	5cd3      	ldrb	r3, [r2, r3]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d111      	bne.n	800b950 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b92c:	79fb      	ldrb	r3, [r7, #7]
 800b92e:	4a0b      	ldr	r2, [pc, #44]	; (800b95c <disk_initialize+0x48>)
 800b930:	2101      	movs	r1, #1
 800b932:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b934:	79fb      	ldrb	r3, [r7, #7]
 800b936:	4a09      	ldr	r2, [pc, #36]	; (800b95c <disk_initialize+0x48>)
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4413      	add	r3, r2
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	79fa      	ldrb	r2, [r7, #7]
 800b942:	4906      	ldr	r1, [pc, #24]	; (800b95c <disk_initialize+0x48>)
 800b944:	440a      	add	r2, r1
 800b946:	7a12      	ldrb	r2, [r2, #8]
 800b948:	4610      	mov	r0, r2
 800b94a:	4798      	blx	r3
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	20001384 	.word	0x20001384

0800b960 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b960:	b590      	push	{r4, r7, lr}
 800b962:	b087      	sub	sp, #28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60b9      	str	r1, [r7, #8]
 800b968:	607a      	str	r2, [r7, #4]
 800b96a:	603b      	str	r3, [r7, #0]
 800b96c:	4603      	mov	r3, r0
 800b96e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b970:	7bfb      	ldrb	r3, [r7, #15]
 800b972:	4a0a      	ldr	r2, [pc, #40]	; (800b99c <disk_read+0x3c>)
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	685b      	ldr	r3, [r3, #4]
 800b97a:	689c      	ldr	r4, [r3, #8]
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	4a07      	ldr	r2, [pc, #28]	; (800b99c <disk_read+0x3c>)
 800b980:	4413      	add	r3, r2
 800b982:	7a18      	ldrb	r0, [r3, #8]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	68b9      	ldr	r1, [r7, #8]
 800b98a:	47a0      	blx	r4
 800b98c:	4603      	mov	r3, r0
 800b98e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b990:	7dfb      	ldrb	r3, [r7, #23]
}
 800b992:	4618      	mov	r0, r3
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	bd90      	pop	{r4, r7, pc}
 800b99a:	bf00      	nop
 800b99c:	20001384 	.word	0x20001384

0800b9a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b9a0:	b590      	push	{r4, r7, lr}
 800b9a2:	b087      	sub	sp, #28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	4a0a      	ldr	r2, [pc, #40]	; (800b9dc <disk_write+0x3c>)
 800b9b4:	009b      	lsls	r3, r3, #2
 800b9b6:	4413      	add	r3, r2
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	68dc      	ldr	r4, [r3, #12]
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	4a07      	ldr	r2, [pc, #28]	; (800b9dc <disk_write+0x3c>)
 800b9c0:	4413      	add	r3, r2
 800b9c2:	7a18      	ldrb	r0, [r3, #8]
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	68b9      	ldr	r1, [r7, #8]
 800b9ca:	47a0      	blx	r4
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd90      	pop	{r4, r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	20001384 	.word	0x20001384

0800b9e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	603a      	str	r2, [r7, #0]
 800b9ea:	71fb      	strb	r3, [r7, #7]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b9f0:	79fb      	ldrb	r3, [r7, #7]
 800b9f2:	4a09      	ldr	r2, [pc, #36]	; (800ba18 <disk_ioctl+0x38>)
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4413      	add	r3, r2
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	79fa      	ldrb	r2, [r7, #7]
 800b9fe:	4906      	ldr	r1, [pc, #24]	; (800ba18 <disk_ioctl+0x38>)
 800ba00:	440a      	add	r2, r1
 800ba02:	7a10      	ldrb	r0, [r2, #8]
 800ba04:	79b9      	ldrb	r1, [r7, #6]
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	4798      	blx	r3
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	73fb      	strb	r3, [r7, #15]
  return res;
 800ba0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20001384 	.word	0x20001384

0800ba1c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	3301      	adds	r3, #1
 800ba28:	781b      	ldrb	r3, [r3, #0]
 800ba2a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ba2c:	89fb      	ldrh	r3, [r7, #14]
 800ba2e:	021b      	lsls	r3, r3, #8
 800ba30:	b21a      	sxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	b21b      	sxth	r3, r3
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	b21b      	sxth	r3, r3
 800ba3c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ba3e:	89fb      	ldrh	r3, [r7, #14]
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3714      	adds	r7, #20
 800ba44:	46bd      	mov	sp, r7
 800ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4a:	4770      	bx	lr

0800ba4c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b085      	sub	sp, #20
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	3303      	adds	r3, #3
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	021b      	lsls	r3, r3, #8
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	3202      	adds	r2, #2
 800ba64:	7812      	ldrb	r2, [r2, #0]
 800ba66:	4313      	orrs	r3, r2
 800ba68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	021b      	lsls	r3, r3, #8
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	3201      	adds	r2, #1
 800ba72:	7812      	ldrb	r2, [r2, #0]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	7812      	ldrb	r2, [r2, #0]
 800ba80:	4313      	orrs	r3, r2
 800ba82:	60fb      	str	r3, [r7, #12]
	return rv;
 800ba84:	68fb      	ldr	r3, [r7, #12]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr

0800ba92 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ba92:	b480      	push	{r7}
 800ba94:	b083      	sub	sp, #12
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	1c5a      	adds	r2, r3, #1
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	887a      	ldrh	r2, [r7, #2]
 800baa6:	b2d2      	uxtb	r2, r2
 800baa8:	701a      	strb	r2, [r3, #0]
 800baaa:	887b      	ldrh	r3, [r7, #2]
 800baac:	0a1b      	lsrs	r3, r3, #8
 800baae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	1c5a      	adds	r2, r3, #1
 800bab4:	607a      	str	r2, [r7, #4]
 800bab6:	887a      	ldrh	r2, [r7, #2]
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	701a      	strb	r2, [r3, #0]
}
 800babc:	bf00      	nop
 800babe:	370c      	adds	r7, #12
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bac8:	b480      	push	{r7}
 800baca:	b083      	sub	sp, #12
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	1c5a      	adds	r2, r3, #1
 800bad6:	607a      	str	r2, [r7, #4]
 800bad8:	683a      	ldr	r2, [r7, #0]
 800bada:	b2d2      	uxtb	r2, r2
 800badc:	701a      	strb	r2, [r3, #0]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	0a1b      	lsrs	r3, r3, #8
 800bae2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	607a      	str	r2, [r7, #4]
 800baea:	683a      	ldr	r2, [r7, #0]
 800baec:	b2d2      	uxtb	r2, r2
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	0a1b      	lsrs	r3, r3, #8
 800baf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	683a      	ldr	r2, [r7, #0]
 800bafe:	b2d2      	uxtb	r2, r2
 800bb00:	701a      	strb	r2, [r3, #0]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	0a1b      	lsrs	r3, r3, #8
 800bb06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	1c5a      	adds	r2, r3, #1
 800bb0c:	607a      	str	r2, [r7, #4]
 800bb0e:	683a      	ldr	r2, [r7, #0]
 800bb10:	b2d2      	uxtb	r2, r2
 800bb12:	701a      	strb	r2, [r3, #0]
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bb20:	b480      	push	{r7}
 800bb22:	b087      	sub	sp, #28
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00d      	beq.n	800bb56 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bb3a:	693a      	ldr	r2, [r7, #16]
 800bb3c:	1c53      	adds	r3, r2, #1
 800bb3e:	613b      	str	r3, [r7, #16]
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	1c59      	adds	r1, r3, #1
 800bb44:	6179      	str	r1, [r7, #20]
 800bb46:	7812      	ldrb	r2, [r2, #0]
 800bb48:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	607b      	str	r3, [r7, #4]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d1f1      	bne.n	800bb3a <mem_cpy+0x1a>
	}
}
 800bb56:	bf00      	nop
 800bb58:	371c      	adds	r7, #28
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bb62:	b480      	push	{r7}
 800bb64:	b087      	sub	sp, #28
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	617a      	str	r2, [r7, #20]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	b2d2      	uxtb	r2, r2
 800bb7c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	607b      	str	r3, [r7, #4]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1f3      	bne.n	800bb72 <mem_set+0x10>
}
 800bb8a:	bf00      	nop
 800bb8c:	371c      	adds	r7, #28
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bb96:	b480      	push	{r7}
 800bb98:	b089      	sub	sp, #36	; 0x24
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	60f8      	str	r0, [r7, #12]
 800bb9e:	60b9      	str	r1, [r7, #8]
 800bba0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	61fb      	str	r3, [r7, #28]
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bbaa:	2300      	movs	r3, #0
 800bbac:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	1c5a      	adds	r2, r3, #1
 800bbb2:	61fa      	str	r2, [r7, #28]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	1c5a      	adds	r2, r3, #1
 800bbbc:	61ba      	str	r2, [r7, #24]
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	1acb      	subs	r3, r1, r3
 800bbc2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	607b      	str	r3, [r7, #4]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d002      	beq.n	800bbd6 <mem_cmp+0x40>
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d0eb      	beq.n	800bbae <mem_cmp+0x18>

	return r;
 800bbd6:	697b      	ldr	r3, [r7, #20]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3724      	adds	r7, #36	; 0x24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bbee:	e002      	b.n	800bbf6 <chk_chr+0x12>
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	607b      	str	r3, [r7, #4]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d005      	beq.n	800bc0a <chk_chr+0x26>
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	461a      	mov	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	4293      	cmp	r3, r2
 800bc08:	d1f2      	bne.n	800bbf0 <chk_chr+0xc>
	return *str;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
	...

0800bc1c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc26:	2300      	movs	r3, #0
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	e029      	b.n	800bc84 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bc30:	4a27      	ldr	r2, [pc, #156]	; (800bcd0 <chk_lock+0xb4>)
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	4413      	add	r3, r2
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d01d      	beq.n	800bc7a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc3e:	4a24      	ldr	r2, [pc, #144]	; (800bcd0 <chk_lock+0xb4>)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	011b      	lsls	r3, r3, #4
 800bc44:	4413      	add	r3, r2
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d116      	bne.n	800bc7e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bc50:	4a1f      	ldr	r2, [pc, #124]	; (800bcd0 <chk_lock+0xb4>)
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	011b      	lsls	r3, r3, #4
 800bc56:	4413      	add	r3, r2
 800bc58:	3304      	adds	r3, #4
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d10c      	bne.n	800bc7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc64:	4a1a      	ldr	r2, [pc, #104]	; (800bcd0 <chk_lock+0xb4>)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	011b      	lsls	r3, r3, #4
 800bc6a:	4413      	add	r3, r2
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d102      	bne.n	800bc7e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bc78:	e007      	b.n	800bc8a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	3301      	adds	r3, #1
 800bc82:	60fb      	str	r3, [r7, #12]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	d9d2      	bls.n	800bc30 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d109      	bne.n	800bca4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bc90:	68bb      	ldr	r3, [r7, #8]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d102      	bne.n	800bc9c <chk_lock+0x80>
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d101      	bne.n	800bca0 <chk_lock+0x84>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	e010      	b.n	800bcc2 <chk_lock+0xa6>
 800bca0:	2312      	movs	r3, #18
 800bca2:	e00e      	b.n	800bcc2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d108      	bne.n	800bcbc <chk_lock+0xa0>
 800bcaa:	4a09      	ldr	r2, [pc, #36]	; (800bcd0 <chk_lock+0xb4>)
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	011b      	lsls	r3, r3, #4
 800bcb0:	4413      	add	r3, r2
 800bcb2:	330c      	adds	r3, #12
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcba:	d101      	bne.n	800bcc0 <chk_lock+0xa4>
 800bcbc:	2310      	movs	r3, #16
 800bcbe:	e000      	b.n	800bcc2 <chk_lock+0xa6>
 800bcc0:	2300      	movs	r3, #0
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3714      	adds	r7, #20
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bccc:	4770      	bx	lr
 800bcce:	bf00      	nop
 800bcd0:	20001364 	.word	0x20001364

0800bcd4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	607b      	str	r3, [r7, #4]
 800bcde:	e002      	b.n	800bce6 <enq_lock+0x12>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	3301      	adds	r3, #1
 800bce4:	607b      	str	r3, [r7, #4]
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d806      	bhi.n	800bcfa <enq_lock+0x26>
 800bcec:	4a09      	ldr	r2, [pc, #36]	; (800bd14 <enq_lock+0x40>)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	4413      	add	r3, r2
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d1f2      	bne.n	800bce0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	bf14      	ite	ne
 800bd00:	2301      	movne	r3, #1
 800bd02:	2300      	moveq	r3, #0
 800bd04:	b2db      	uxtb	r3, r3
}
 800bd06:	4618      	mov	r0, r3
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	20001364 	.word	0x20001364

0800bd18 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd22:	2300      	movs	r3, #0
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	e01f      	b.n	800bd68 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bd28:	4a41      	ldr	r2, [pc, #260]	; (800be30 <inc_lock+0x118>)
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	011b      	lsls	r3, r3, #4
 800bd2e:	4413      	add	r3, r2
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d113      	bne.n	800bd62 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bd3a:	4a3d      	ldr	r2, [pc, #244]	; (800be30 <inc_lock+0x118>)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	011b      	lsls	r3, r3, #4
 800bd40:	4413      	add	r3, r2
 800bd42:	3304      	adds	r3, #4
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d109      	bne.n	800bd62 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bd4e:	4a38      	ldr	r2, [pc, #224]	; (800be30 <inc_lock+0x118>)
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	011b      	lsls	r3, r3, #4
 800bd54:	4413      	add	r3, r2
 800bd56:	3308      	adds	r3, #8
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d006      	beq.n	800bd70 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3301      	adds	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d9dc      	bls.n	800bd28 <inc_lock+0x10>
 800bd6e:	e000      	b.n	800bd72 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bd70:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	2b02      	cmp	r3, #2
 800bd76:	d132      	bne.n	800bdde <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	e002      	b.n	800bd84 <inc_lock+0x6c>
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	3301      	adds	r3, #1
 800bd82:	60fb      	str	r3, [r7, #12]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d806      	bhi.n	800bd98 <inc_lock+0x80>
 800bd8a:	4a29      	ldr	r2, [pc, #164]	; (800be30 <inc_lock+0x118>)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	011b      	lsls	r3, r3, #4
 800bd90:	4413      	add	r3, r2
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1f2      	bne.n	800bd7e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b02      	cmp	r3, #2
 800bd9c:	d101      	bne.n	800bda2 <inc_lock+0x8a>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	e040      	b.n	800be24 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681a      	ldr	r2, [r3, #0]
 800bda6:	4922      	ldr	r1, [pc, #136]	; (800be30 <inc_lock+0x118>)
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	011b      	lsls	r3, r3, #4
 800bdac:	440b      	add	r3, r1
 800bdae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	689a      	ldr	r2, [r3, #8]
 800bdb4:	491e      	ldr	r1, [pc, #120]	; (800be30 <inc_lock+0x118>)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	011b      	lsls	r3, r3, #4
 800bdba:	440b      	add	r3, r1
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	695a      	ldr	r2, [r3, #20]
 800bdc4:	491a      	ldr	r1, [pc, #104]	; (800be30 <inc_lock+0x118>)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	011b      	lsls	r3, r3, #4
 800bdca:	440b      	add	r3, r1
 800bdcc:	3308      	adds	r3, #8
 800bdce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bdd0:	4a17      	ldr	r2, [pc, #92]	; (800be30 <inc_lock+0x118>)
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	011b      	lsls	r3, r3, #4
 800bdd6:	4413      	add	r3, r2
 800bdd8:	330c      	adds	r3, #12
 800bdda:	2200      	movs	r2, #0
 800bddc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d009      	beq.n	800bdf8 <inc_lock+0xe0>
 800bde4:	4a12      	ldr	r2, [pc, #72]	; (800be30 <inc_lock+0x118>)
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	011b      	lsls	r3, r3, #4
 800bdea:	4413      	add	r3, r2
 800bdec:	330c      	adds	r3, #12
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d001      	beq.n	800bdf8 <inc_lock+0xe0>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	e015      	b.n	800be24 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d108      	bne.n	800be10 <inc_lock+0xf8>
 800bdfe:	4a0c      	ldr	r2, [pc, #48]	; (800be30 <inc_lock+0x118>)
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	011b      	lsls	r3, r3, #4
 800be04:	4413      	add	r3, r2
 800be06:	330c      	adds	r3, #12
 800be08:	881b      	ldrh	r3, [r3, #0]
 800be0a:	3301      	adds	r3, #1
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	e001      	b.n	800be14 <inc_lock+0xfc>
 800be10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be14:	4906      	ldr	r1, [pc, #24]	; (800be30 <inc_lock+0x118>)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	011b      	lsls	r3, r3, #4
 800be1a:	440b      	add	r3, r1
 800be1c:	330c      	adds	r3, #12
 800be1e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3301      	adds	r3, #1
}
 800be24:	4618      	mov	r0, r3
 800be26:	3714      	adds	r7, #20
 800be28:	46bd      	mov	sp, r7
 800be2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2e:	4770      	bx	lr
 800be30:	20001364 	.word	0x20001364

0800be34 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	3b01      	subs	r3, #1
 800be40:	607b      	str	r3, [r7, #4]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d825      	bhi.n	800be94 <dec_lock+0x60>
		n = Files[i].ctr;
 800be48:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <dec_lock+0x74>)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	4413      	add	r3, r2
 800be50:	330c      	adds	r3, #12
 800be52:	881b      	ldrh	r3, [r3, #0]
 800be54:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800be56:	89fb      	ldrh	r3, [r7, #14]
 800be58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be5c:	d101      	bne.n	800be62 <dec_lock+0x2e>
 800be5e:	2300      	movs	r3, #0
 800be60:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800be62:	89fb      	ldrh	r3, [r7, #14]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <dec_lock+0x3a>
 800be68:	89fb      	ldrh	r3, [r7, #14]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800be6e:	4a0e      	ldr	r2, [pc, #56]	; (800bea8 <dec_lock+0x74>)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	011b      	lsls	r3, r3, #4
 800be74:	4413      	add	r3, r2
 800be76:	330c      	adds	r3, #12
 800be78:	89fa      	ldrh	r2, [r7, #14]
 800be7a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800be7c:	89fb      	ldrh	r3, [r7, #14]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d105      	bne.n	800be8e <dec_lock+0x5a>
 800be82:	4a09      	ldr	r2, [pc, #36]	; (800bea8 <dec_lock+0x74>)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	4413      	add	r3, r2
 800be8a:	2200      	movs	r2, #0
 800be8c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	737b      	strb	r3, [r7, #13]
 800be92:	e001      	b.n	800be98 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800be94:	2302      	movs	r3, #2
 800be96:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800be98:	7b7b      	ldrb	r3, [r7, #13]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	20001364 	.word	0x20001364

0800beac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800beb4:	2300      	movs	r3, #0
 800beb6:	60fb      	str	r3, [r7, #12]
 800beb8:	e010      	b.n	800bedc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800beba:	4a0d      	ldr	r2, [pc, #52]	; (800bef0 <clear_lock+0x44>)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	011b      	lsls	r3, r3, #4
 800bec0:	4413      	add	r3, r2
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	429a      	cmp	r2, r3
 800bec8:	d105      	bne.n	800bed6 <clear_lock+0x2a>
 800beca:	4a09      	ldr	r2, [pc, #36]	; (800bef0 <clear_lock+0x44>)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	4413      	add	r3, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3301      	adds	r3, #1
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d9eb      	bls.n	800beba <clear_lock+0xe>
	}
}
 800bee2:	bf00      	nop
 800bee4:	3714      	adds	r7, #20
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop
 800bef0:	20001364 	.word	0x20001364

0800bef4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b086      	sub	sp, #24
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800befc:	2300      	movs	r3, #0
 800befe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	78db      	ldrb	r3, [r3, #3]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d034      	beq.n	800bf72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7858      	ldrb	r0, [r3, #1]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf18:	2301      	movs	r3, #1
 800bf1a:	697a      	ldr	r2, [r7, #20]
 800bf1c:	f7ff fd40 	bl	800b9a0 <disk_write>
 800bf20:	4603      	mov	r3, r0
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d002      	beq.n	800bf2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	73fb      	strb	r3, [r7, #15]
 800bf2a:	e022      	b.n	800bf72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6a1b      	ldr	r3, [r3, #32]
 800bf36:	697a      	ldr	r2, [r7, #20]
 800bf38:	1ad2      	subs	r2, r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	699b      	ldr	r3, [r3, #24]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d217      	bcs.n	800bf72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	789b      	ldrb	r3, [r3, #2]
 800bf46:	613b      	str	r3, [r7, #16]
 800bf48:	e010      	b.n	800bf6c <sync_window+0x78>
					wsect += fs->fsize;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	699b      	ldr	r3, [r3, #24]
 800bf4e:	697a      	ldr	r2, [r7, #20]
 800bf50:	4413      	add	r3, r2
 800bf52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	7858      	ldrb	r0, [r3, #1]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bf5e:	2301      	movs	r3, #1
 800bf60:	697a      	ldr	r2, [r7, #20]
 800bf62:	f7ff fd1d 	bl	800b9a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	3b01      	subs	r3, #1
 800bf6a:	613b      	str	r3, [r7, #16]
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d8eb      	bhi.n	800bf4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800bf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3718      	adds	r7, #24
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d01b      	beq.n	800bfcc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7ff ffad 	bl	800bef4 <sync_window>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800bf9e:	7bfb      	ldrb	r3, [r7, #15]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d113      	bne.n	800bfcc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	7858      	ldrb	r0, [r3, #1]
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bfae:	2301      	movs	r3, #1
 800bfb0:	683a      	ldr	r2, [r7, #0]
 800bfb2:	f7ff fcd5 	bl	800b960 <disk_read>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d004      	beq.n	800bfc6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800bfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
	...

0800bfd8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f7ff ff87 	bl	800bef4 <sync_window>
 800bfe6:	4603      	mov	r3, r0
 800bfe8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d158      	bne.n	800c0a2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	2b03      	cmp	r3, #3
 800bff6:	d148      	bne.n	800c08a <sync_fs+0xb2>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	791b      	ldrb	r3, [r3, #4]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d144      	bne.n	800c08a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	3330      	adds	r3, #48	; 0x30
 800c004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c008:	2100      	movs	r1, #0
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff fda9 	bl	800bb62 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	3330      	adds	r3, #48	; 0x30
 800c014:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c018:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7ff fd38 	bl	800ba92 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	3330      	adds	r3, #48	; 0x30
 800c026:	4921      	ldr	r1, [pc, #132]	; (800c0ac <sync_fs+0xd4>)
 800c028:	4618      	mov	r0, r3
 800c02a:	f7ff fd4d 	bl	800bac8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	3330      	adds	r3, #48	; 0x30
 800c032:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c036:	491e      	ldr	r1, [pc, #120]	; (800c0b0 <sync_fs+0xd8>)
 800c038:	4618      	mov	r0, r3
 800c03a:	f7ff fd45 	bl	800bac8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3330      	adds	r3, #48	; 0x30
 800c042:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7ff fd3b 	bl	800bac8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	3330      	adds	r3, #48	; 0x30
 800c056:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	4619      	mov	r1, r3
 800c060:	4610      	mov	r0, r2
 800c062:	f7ff fd31 	bl	800bac8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	1c5a      	adds	r2, r3, #1
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	7858      	ldrb	r0, [r3, #1]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c07e:	2301      	movs	r3, #1
 800c080:	f7ff fc8e 	bl	800b9a0 <disk_write>
			fs->fsi_flag = 0;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	2200      	movs	r2, #0
 800c088:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	785b      	ldrb	r3, [r3, #1]
 800c08e:	2200      	movs	r2, #0
 800c090:	2100      	movs	r1, #0
 800c092:	4618      	mov	r0, r3
 800c094:	f7ff fca4 	bl	800b9e0 <disk_ioctl>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d001      	beq.n	800c0a2 <sync_fs+0xca>
 800c09e:	2301      	movs	r3, #1
 800c0a0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3710      	adds	r7, #16
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	41615252 	.word	0x41615252
 800c0b0:	61417272 	.word	0x61417272

0800c0b4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b083      	sub	sp, #12
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	3b02      	subs	r3, #2
 800c0c2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	3b02      	subs	r3, #2
 800c0ca:	683a      	ldr	r2, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d301      	bcc.n	800c0d4 <clust2sect+0x20>
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	e008      	b.n	800c0e6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	895b      	ldrh	r3, [r3, #10]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	fb03 f202 	mul.w	r2, r3, r2
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e4:	4413      	add	r3, r2
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	370c      	adds	r7, #12
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f0:	4770      	bx	lr

0800c0f2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c0f2:	b580      	push	{r7, lr}
 800c0f4:	b086      	sub	sp, #24
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
 800c0fa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d904      	bls.n	800c112 <get_fat+0x20>
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	683a      	ldr	r2, [r7, #0]
 800c10e:	429a      	cmp	r2, r3
 800c110:	d302      	bcc.n	800c118 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	e08c      	b.n	800c232 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c118:	f04f 33ff 	mov.w	r3, #4294967295
 800c11c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	2b02      	cmp	r3, #2
 800c124:	d045      	beq.n	800c1b2 <get_fat+0xc0>
 800c126:	2b03      	cmp	r3, #3
 800c128:	d05d      	beq.n	800c1e6 <get_fat+0xf4>
 800c12a:	2b01      	cmp	r3, #1
 800c12c:	d177      	bne.n	800c21e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	60fb      	str	r3, [r7, #12]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	085b      	lsrs	r3, r3, #1
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	4413      	add	r3, r2
 800c13a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	6a1a      	ldr	r2, [r3, #32]
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	0a5b      	lsrs	r3, r3, #9
 800c144:	4413      	add	r3, r2
 800c146:	4619      	mov	r1, r3
 800c148:	6938      	ldr	r0, [r7, #16]
 800c14a:	f7ff ff17 	bl	800bf7c <move_window>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	d167      	bne.n	800c224 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	60fa      	str	r2, [r7, #12]
 800c15a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	4413      	add	r3, r2
 800c162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c166:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6a1a      	ldr	r2, [r3, #32]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	0a5b      	lsrs	r3, r3, #9
 800c170:	4413      	add	r3, r2
 800c172:	4619      	mov	r1, r3
 800c174:	6938      	ldr	r0, [r7, #16]
 800c176:	f7ff ff01 	bl	800bf7c <move_window>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d153      	bne.n	800c228 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c186:	693a      	ldr	r2, [r7, #16]
 800c188:	4413      	add	r3, r2
 800c18a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c18e:	021b      	lsls	r3, r3, #8
 800c190:	461a      	mov	r2, r3
 800c192:	68bb      	ldr	r3, [r7, #8]
 800c194:	4313      	orrs	r3, r2
 800c196:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	f003 0301 	and.w	r3, r3, #1
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d002      	beq.n	800c1a8 <get_fat+0xb6>
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	091b      	lsrs	r3, r3, #4
 800c1a6:	e002      	b.n	800c1ae <get_fat+0xbc>
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c1ae:	617b      	str	r3, [r7, #20]
			break;
 800c1b0:	e03f      	b.n	800c232 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	6a1a      	ldr	r2, [r3, #32]
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	0a1b      	lsrs	r3, r3, #8
 800c1ba:	4413      	add	r3, r2
 800c1bc:	4619      	mov	r1, r3
 800c1be:	6938      	ldr	r0, [r7, #16]
 800c1c0:	f7ff fedc 	bl	800bf7c <move_window>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d130      	bne.n	800c22c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	005b      	lsls	r3, r3, #1
 800c1d4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c1d8:	4413      	add	r3, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f7ff fc1e 	bl	800ba1c <ld_word>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	617b      	str	r3, [r7, #20]
			break;
 800c1e4:	e025      	b.n	800c232 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	6a1a      	ldr	r2, [r3, #32]
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	09db      	lsrs	r3, r3, #7
 800c1ee:	4413      	add	r3, r2
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6938      	ldr	r0, [r7, #16]
 800c1f4:	f7ff fec2 	bl	800bf7c <move_window>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d118      	bne.n	800c230 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	009b      	lsls	r3, r3, #2
 800c208:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c20c:	4413      	add	r3, r2
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff fc1c 	bl	800ba4c <ld_dword>
 800c214:	4603      	mov	r3, r0
 800c216:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c21a:	617b      	str	r3, [r7, #20]
			break;
 800c21c:	e009      	b.n	800c232 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c21e:	2301      	movs	r3, #1
 800c220:	617b      	str	r3, [r7, #20]
 800c222:	e006      	b.n	800c232 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c224:	bf00      	nop
 800c226:	e004      	b.n	800c232 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c228:	bf00      	nop
 800c22a:	e002      	b.n	800c232 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c22c:	bf00      	nop
 800c22e:	e000      	b.n	800c232 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c230:	bf00      	nop
		}
	}

	return val;
 800c232:	697b      	ldr	r3, [r7, #20]
}
 800c234:	4618      	mov	r0, r3
 800c236:	3718      	adds	r7, #24
 800c238:	46bd      	mov	sp, r7
 800c23a:	bd80      	pop	{r7, pc}

0800c23c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c23c:	b590      	push	{r4, r7, lr}
 800c23e:	b089      	sub	sp, #36	; 0x24
 800c240:	af00      	add	r7, sp, #0
 800c242:	60f8      	str	r0, [r7, #12]
 800c244:	60b9      	str	r1, [r7, #8]
 800c246:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c248:	2302      	movs	r3, #2
 800c24a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	f240 80d6 	bls.w	800c400 <put_fat+0x1c4>
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	f080 80d0 	bcs.w	800c400 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	2b02      	cmp	r3, #2
 800c266:	d073      	beq.n	800c350 <put_fat+0x114>
 800c268:	2b03      	cmp	r3, #3
 800c26a:	f000 8091 	beq.w	800c390 <put_fat+0x154>
 800c26e:	2b01      	cmp	r3, #1
 800c270:	f040 80c6 	bne.w	800c400 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	61bb      	str	r3, [r7, #24]
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	085b      	lsrs	r3, r3, #1
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	4413      	add	r3, r2
 800c280:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6a1a      	ldr	r2, [r3, #32]
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	0a5b      	lsrs	r3, r3, #9
 800c28a:	4413      	add	r3, r2
 800c28c:	4619      	mov	r1, r3
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fe74 	bl	800bf7c <move_window>
 800c294:	4603      	mov	r3, r0
 800c296:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c298:	7ffb      	ldrb	r3, [r7, #31]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	f040 80a9 	bne.w	800c3f2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	1c59      	adds	r1, r3, #1
 800c2aa:	61b9      	str	r1, [r7, #24]
 800c2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2b0:	4413      	add	r3, r2
 800c2b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d00d      	beq.n	800c2da <put_fat+0x9e>
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	f003 030f 	and.w	r3, r3, #15
 800c2c8:	b25a      	sxtb	r2, r3
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	011b      	lsls	r3, r3, #4
 800c2d0:	b25b      	sxtb	r3, r3
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	b25b      	sxtb	r3, r3
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	e001      	b.n	800c2de <put_fat+0xa2>
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	6a1a      	ldr	r2, [r3, #32]
 800c2ec:	69bb      	ldr	r3, [r7, #24]
 800c2ee:	0a5b      	lsrs	r3, r3, #9
 800c2f0:	4413      	add	r3, r2
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	68f8      	ldr	r0, [r7, #12]
 800c2f6:	f7ff fe41 	bl	800bf7c <move_window>
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2fe:	7ffb      	ldrb	r3, [r7, #31]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d178      	bne.n	800c3f6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c310:	4413      	add	r3, r2
 800c312:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d003      	beq.n	800c326 <put_fat+0xea>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	091b      	lsrs	r3, r3, #4
 800c322:	b2db      	uxtb	r3, r3
 800c324:	e00e      	b.n	800c344 <put_fat+0x108>
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	b25b      	sxtb	r3, r3
 800c32c:	f023 030f 	bic.w	r3, r3, #15
 800c330:	b25a      	sxtb	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	0a1b      	lsrs	r3, r3, #8
 800c336:	b25b      	sxtb	r3, r3
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	b25b      	sxtb	r3, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	b25b      	sxtb	r3, r3
 800c342:	b2db      	uxtb	r3, r3
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2201      	movs	r2, #1
 800c34c:	70da      	strb	r2, [r3, #3]
			break;
 800c34e:	e057      	b.n	800c400 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a1a      	ldr	r2, [r3, #32]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	0a1b      	lsrs	r3, r3, #8
 800c358:	4413      	add	r3, r2
 800c35a:	4619      	mov	r1, r3
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f7ff fe0d 	bl	800bf7c <move_window>
 800c362:	4603      	mov	r3, r0
 800c364:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c366:	7ffb      	ldrb	r3, [r7, #31]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d146      	bne.n	800c3fa <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c37a:	4413      	add	r3, r2
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	b292      	uxth	r2, r2
 800c380:	4611      	mov	r1, r2
 800c382:	4618      	mov	r0, r3
 800c384:	f7ff fb85 	bl	800ba92 <st_word>
			fs->wflag = 1;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2201      	movs	r2, #1
 800c38c:	70da      	strb	r2, [r3, #3]
			break;
 800c38e:	e037      	b.n	800c400 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6a1a      	ldr	r2, [r3, #32]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	09db      	lsrs	r3, r3, #7
 800c398:	4413      	add	r3, r2
 800c39a:	4619      	mov	r1, r3
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f7ff fded 	bl	800bf7c <move_window>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3a6:	7ffb      	ldrb	r3, [r7, #31]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d128      	bne.n	800c3fe <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3c0:	4413      	add	r3, r2
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff fb42 	bl	800ba4c <ld_dword>
 800c3c8:	4603      	mov	r3, r0
 800c3ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c3ce:	4323      	orrs	r3, r4
 800c3d0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c3e0:	4413      	add	r3, r2
 800c3e2:	6879      	ldr	r1, [r7, #4]
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7ff fb6f 	bl	800bac8 <st_dword>
			fs->wflag = 1;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	70da      	strb	r2, [r3, #3]
			break;
 800c3f0:	e006      	b.n	800c400 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3f2:	bf00      	nop
 800c3f4:	e004      	b.n	800c400 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3f6:	bf00      	nop
 800c3f8:	e002      	b.n	800c400 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3fa:	bf00      	nop
 800c3fc:	e000      	b.n	800c400 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c3fe:	bf00      	nop
		}
	}
	return res;
 800c400:	7ffb      	ldrb	r3, [r7, #31]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3724      	adds	r7, #36	; 0x24
 800c406:	46bd      	mov	sp, r7
 800c408:	bd90      	pop	{r4, r7, pc}

0800c40a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b088      	sub	sp, #32
 800c40e:	af00      	add	r7, sp, #0
 800c410:	60f8      	str	r0, [r7, #12]
 800c412:	60b9      	str	r1, [r7, #8]
 800c414:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c416:	2300      	movs	r3, #0
 800c418:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d904      	bls.n	800c430 <remove_chain+0x26>
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	695b      	ldr	r3, [r3, #20]
 800c42a:	68ba      	ldr	r2, [r7, #8]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d301      	bcc.n	800c434 <remove_chain+0x2a>
 800c430:	2302      	movs	r3, #2
 800c432:	e04b      	b.n	800c4cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00c      	beq.n	800c454 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c43a:	f04f 32ff 	mov.w	r2, #4294967295
 800c43e:	6879      	ldr	r1, [r7, #4]
 800c440:	69b8      	ldr	r0, [r7, #24]
 800c442:	f7ff fefb 	bl	800c23c <put_fat>
 800c446:	4603      	mov	r3, r0
 800c448:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c44a:	7ffb      	ldrb	r3, [r7, #31]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d001      	beq.n	800c454 <remove_chain+0x4a>
 800c450:	7ffb      	ldrb	r3, [r7, #31]
 800c452:	e03b      	b.n	800c4cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c454:	68b9      	ldr	r1, [r7, #8]
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f7ff fe4b 	bl	800c0f2 <get_fat>
 800c45c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d031      	beq.n	800c4c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	2b01      	cmp	r3, #1
 800c468:	d101      	bne.n	800c46e <remove_chain+0x64>
 800c46a:	2302      	movs	r3, #2
 800c46c:	e02e      	b.n	800c4cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c474:	d101      	bne.n	800c47a <remove_chain+0x70>
 800c476:	2301      	movs	r3, #1
 800c478:	e028      	b.n	800c4cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c47a:	2200      	movs	r2, #0
 800c47c:	68b9      	ldr	r1, [r7, #8]
 800c47e:	69b8      	ldr	r0, [r7, #24]
 800c480:	f7ff fedc 	bl	800c23c <put_fat>
 800c484:	4603      	mov	r3, r0
 800c486:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c488:	7ffb      	ldrb	r3, [r7, #31]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d001      	beq.n	800c492 <remove_chain+0x88>
 800c48e:	7ffb      	ldrb	r3, [r7, #31]
 800c490:	e01c      	b.n	800c4cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c492:	69bb      	ldr	r3, [r7, #24]
 800c494:	691a      	ldr	r2, [r3, #16]
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	695b      	ldr	r3, [r3, #20]
 800c49a:	3b02      	subs	r3, #2
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d20b      	bcs.n	800c4b8 <remove_chain+0xae>
			fs->free_clst++;
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	1c5a      	adds	r2, r3, #1
 800c4a6:	69bb      	ldr	r3, [r7, #24]
 800c4a8:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c4aa:	69bb      	ldr	r3, [r7, #24]
 800c4ac:	791b      	ldrb	r3, [r3, #4]
 800c4ae:	f043 0301 	orr.w	r3, r3, #1
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	695b      	ldr	r3, [r3, #20]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d3c6      	bcc.n	800c454 <remove_chain+0x4a>
 800c4c6:	e000      	b.n	800c4ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c4c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3720      	adds	r7, #32
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b088      	sub	sp, #32
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d10d      	bne.n	800c506 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4ea:	693b      	ldr	r3, [r7, #16]
 800c4ec:	68db      	ldr	r3, [r3, #12]
 800c4ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d004      	beq.n	800c500 <create_chain+0x2c>
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	69ba      	ldr	r2, [r7, #24]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d31b      	bcc.n	800c538 <create_chain+0x64>
 800c500:	2301      	movs	r3, #1
 800c502:	61bb      	str	r3, [r7, #24]
 800c504:	e018      	b.n	800c538 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f7ff fdf2 	bl	800c0f2 <get_fat>
 800c50e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d801      	bhi.n	800c51a <create_chain+0x46>
 800c516:	2301      	movs	r3, #1
 800c518:	e070      	b.n	800c5fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c520:	d101      	bne.n	800c526 <create_chain+0x52>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	e06a      	b.n	800c5fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d201      	bcs.n	800c534 <create_chain+0x60>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	e063      	b.n	800c5fc <create_chain+0x128>
		scl = clst;
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	3301      	adds	r3, #1
 800c540:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	69fa      	ldr	r2, [r7, #28]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d307      	bcc.n	800c55c <create_chain+0x88>
				ncl = 2;
 800c54c:	2302      	movs	r3, #2
 800c54e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c550:	69fa      	ldr	r2, [r7, #28]
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	429a      	cmp	r2, r3
 800c556:	d901      	bls.n	800c55c <create_chain+0x88>
 800c558:	2300      	movs	r3, #0
 800c55a:	e04f      	b.n	800c5fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c55c:	69f9      	ldr	r1, [r7, #28]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f7ff fdc7 	bl	800c0f2 <get_fat>
 800c564:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d00e      	beq.n	800c58a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b01      	cmp	r3, #1
 800c570:	d003      	beq.n	800c57a <create_chain+0xa6>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c578:	d101      	bne.n	800c57e <create_chain+0xaa>
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	e03e      	b.n	800c5fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c57e:	69fa      	ldr	r2, [r7, #28]
 800c580:	69bb      	ldr	r3, [r7, #24]
 800c582:	429a      	cmp	r2, r3
 800c584:	d1da      	bne.n	800c53c <create_chain+0x68>
 800c586:	2300      	movs	r3, #0
 800c588:	e038      	b.n	800c5fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c58a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c58c:	f04f 32ff 	mov.w	r2, #4294967295
 800c590:	69f9      	ldr	r1, [r7, #28]
 800c592:	6938      	ldr	r0, [r7, #16]
 800c594:	f7ff fe52 	bl	800c23c <put_fat>
 800c598:	4603      	mov	r3, r0
 800c59a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c59c:	7dfb      	ldrb	r3, [r7, #23]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d109      	bne.n	800c5b6 <create_chain+0xe2>
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d006      	beq.n	800c5b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c5a8:	69fa      	ldr	r2, [r7, #28]
 800c5aa:	6839      	ldr	r1, [r7, #0]
 800c5ac:	6938      	ldr	r0, [r7, #16]
 800c5ae:	f7ff fe45 	bl	800c23c <put_fat>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c5b6:	7dfb      	ldrb	r3, [r7, #23]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d116      	bne.n	800c5ea <create_chain+0x116>
		fs->last_clst = ncl;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	69fa      	ldr	r2, [r7, #28]
 800c5c0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	691a      	ldr	r2, [r3, #16]
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	695b      	ldr	r3, [r3, #20]
 800c5ca:	3b02      	subs	r3, #2
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d804      	bhi.n	800c5da <create_chain+0x106>
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	1e5a      	subs	r2, r3, #1
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	791b      	ldrb	r3, [r3, #4]
 800c5de:	f043 0301 	orr.w	r3, r3, #1
 800c5e2:	b2da      	uxtb	r2, r3
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	711a      	strb	r2, [r3, #4]
 800c5e8:	e007      	b.n	800c5fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5ea:	7dfb      	ldrb	r3, [r7, #23]
 800c5ec:	2b01      	cmp	r3, #1
 800c5ee:	d102      	bne.n	800c5f6 <create_chain+0x122>
 800c5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800c5f4:	e000      	b.n	800c5f8 <create_chain+0x124>
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5fa:	69fb      	ldr	r3, [r7, #28]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3720      	adds	r7, #32
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c604:	b480      	push	{r7}
 800c606:	b087      	sub	sp, #28
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	3304      	adds	r3, #4
 800c61a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	0a5b      	lsrs	r3, r3, #9
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	8952      	ldrh	r2, [r2, #10]
 800c624:	fbb3 f3f2 	udiv	r3, r3, r2
 800c628:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	1d1a      	adds	r2, r3, #4
 800c62e:	613a      	str	r2, [r7, #16]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d101      	bne.n	800c63e <clmt_clust+0x3a>
 800c63a:	2300      	movs	r3, #0
 800c63c:	e010      	b.n	800c660 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c63e:	697a      	ldr	r2, [r7, #20]
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	429a      	cmp	r2, r3
 800c644:	d307      	bcc.n	800c656 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	617b      	str	r3, [r7, #20]
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3304      	adds	r3, #4
 800c652:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c654:	e7e9      	b.n	800c62a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c656:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	4413      	add	r3, r2
}
 800c660:	4618      	mov	r0, r3
 800c662:	371c      	adds	r7, #28
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr

0800c66c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b086      	sub	sp, #24
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c682:	d204      	bcs.n	800c68e <dir_sdi+0x22>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	f003 031f 	and.w	r3, r3, #31
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d001      	beq.n	800c692 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c68e:	2302      	movs	r3, #2
 800c690:	e063      	b.n	800c75a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	683a      	ldr	r2, [r7, #0]
 800c696:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	689b      	ldr	r3, [r3, #8]
 800c69c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d106      	bne.n	800c6b2 <dir_sdi+0x46>
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	2b02      	cmp	r3, #2
 800c6aa:	d902      	bls.n	800c6b2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d10c      	bne.n	800c6d2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	095b      	lsrs	r3, r3, #5
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	8912      	ldrh	r2, [r2, #8]
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d301      	bcc.n	800c6c8 <dir_sdi+0x5c>
 800c6c4:	2302      	movs	r3, #2
 800c6c6:	e048      	b.n	800c75a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	61da      	str	r2, [r3, #28]
 800c6d0:	e029      	b.n	800c726 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c6d2:	693b      	ldr	r3, [r7, #16]
 800c6d4:	895b      	ldrh	r3, [r3, #10]
 800c6d6:	025b      	lsls	r3, r3, #9
 800c6d8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6da:	e019      	b.n	800c710 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6979      	ldr	r1, [r7, #20]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7ff fd06 	bl	800c0f2 <get_fat>
 800c6e6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6ee:	d101      	bne.n	800c6f4 <dir_sdi+0x88>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e032      	b.n	800c75a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	2b01      	cmp	r3, #1
 800c6f8:	d904      	bls.n	800c704 <dir_sdi+0x98>
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	429a      	cmp	r2, r3
 800c702:	d301      	bcc.n	800c708 <dir_sdi+0x9c>
 800c704:	2302      	movs	r3, #2
 800c706:	e028      	b.n	800c75a <dir_sdi+0xee>
			ofs -= csz;
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c710:	683a      	ldr	r2, [r7, #0]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	429a      	cmp	r2, r3
 800c716:	d2e1      	bcs.n	800c6dc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c718:	6979      	ldr	r1, [r7, #20]
 800c71a:	6938      	ldr	r0, [r7, #16]
 800c71c:	f7ff fcca 	bl	800c0b4 <clust2sect>
 800c720:	4602      	mov	r2, r0
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	697a      	ldr	r2, [r7, #20]
 800c72a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	69db      	ldr	r3, [r3, #28]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d101      	bne.n	800c738 <dir_sdi+0xcc>
 800c734:	2302      	movs	r3, #2
 800c736:	e010      	b.n	800c75a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	69da      	ldr	r2, [r3, #28]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	0a5b      	lsrs	r3, r3, #9
 800c740:	441a      	add	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c752:	441a      	add	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	3718      	adds	r7, #24
 800c75e:	46bd      	mov	sp, r7
 800c760:	bd80      	pop	{r7, pc}

0800c762 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c762:	b580      	push	{r7, lr}
 800c764:	b086      	sub	sp, #24
 800c766:	af00      	add	r7, sp, #0
 800c768:	6078      	str	r0, [r7, #4]
 800c76a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	3320      	adds	r3, #32
 800c778:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	69db      	ldr	r3, [r3, #28]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d003      	beq.n	800c78a <dir_next+0x28>
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c788:	d301      	bcc.n	800c78e <dir_next+0x2c>
 800c78a:	2304      	movs	r3, #4
 800c78c:	e0aa      	b.n	800c8e4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c794:	2b00      	cmp	r3, #0
 800c796:	f040 8098 	bne.w	800c8ca <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	699b      	ldr	r3, [r3, #24]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10b      	bne.n	800c7c4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	095b      	lsrs	r3, r3, #5
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	8912      	ldrh	r2, [r2, #8]
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	f0c0 8088 	bcc.w	800c8ca <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	61da      	str	r2, [r3, #28]
 800c7c0:	2304      	movs	r3, #4
 800c7c2:	e08f      	b.n	800c8e4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	0a5b      	lsrs	r3, r3, #9
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	8952      	ldrh	r2, [r2, #10]
 800c7cc:	3a01      	subs	r2, #1
 800c7ce:	4013      	ands	r3, r2
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d17a      	bne.n	800c8ca <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	699b      	ldr	r3, [r3, #24]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	4610      	mov	r0, r2
 800c7de:	f7ff fc88 	bl	800c0f2 <get_fat>
 800c7e2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2b01      	cmp	r3, #1
 800c7e8:	d801      	bhi.n	800c7ee <dir_next+0x8c>
 800c7ea:	2302      	movs	r3, #2
 800c7ec:	e07a      	b.n	800c8e4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7ee:	697b      	ldr	r3, [r7, #20]
 800c7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7f4:	d101      	bne.n	800c7fa <dir_next+0x98>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e074      	b.n	800c8e4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	695b      	ldr	r3, [r3, #20]
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	429a      	cmp	r2, r3
 800c802:	d358      	bcc.n	800c8b6 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d104      	bne.n	800c814 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	61da      	str	r2, [r3, #28]
 800c810:	2304      	movs	r3, #4
 800c812:	e067      	b.n	800c8e4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	699b      	ldr	r3, [r3, #24]
 800c81a:	4619      	mov	r1, r3
 800c81c:	4610      	mov	r0, r2
 800c81e:	f7ff fe59 	bl	800c4d4 <create_chain>
 800c822:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d101      	bne.n	800c82e <dir_next+0xcc>
 800c82a:	2307      	movs	r3, #7
 800c82c:	e05a      	b.n	800c8e4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d101      	bne.n	800c838 <dir_next+0xd6>
 800c834:	2302      	movs	r3, #2
 800c836:	e055      	b.n	800c8e4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c83e:	d101      	bne.n	800c844 <dir_next+0xe2>
 800c840:	2301      	movs	r3, #1
 800c842:	e04f      	b.n	800c8e4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f7ff fb55 	bl	800bef4 <sync_window>
 800c84a:	4603      	mov	r3, r0
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d001      	beq.n	800c854 <dir_next+0xf2>
 800c850:	2301      	movs	r3, #1
 800c852:	e047      	b.n	800c8e4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	3330      	adds	r3, #48	; 0x30
 800c858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c85c:	2100      	movs	r1, #0
 800c85e:	4618      	mov	r0, r3
 800c860:	f7ff f97f 	bl	800bb62 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c864:	2300      	movs	r3, #0
 800c866:	613b      	str	r3, [r7, #16]
 800c868:	6979      	ldr	r1, [r7, #20]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f7ff fc22 	bl	800c0b4 <clust2sect>
 800c870:	4602      	mov	r2, r0
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	62da      	str	r2, [r3, #44]	; 0x2c
 800c876:	e012      	b.n	800c89e <dir_next+0x13c>
						fs->wflag = 1;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	2201      	movs	r2, #1
 800c87c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c87e:	68f8      	ldr	r0, [r7, #12]
 800c880:	f7ff fb38 	bl	800bef4 <sync_window>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d001      	beq.n	800c88e <dir_next+0x12c>
 800c88a:	2301      	movs	r3, #1
 800c88c:	e02a      	b.n	800c8e4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	3301      	adds	r3, #1
 800c892:	613b      	str	r3, [r7, #16]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	895b      	ldrh	r3, [r3, #10]
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d3e6      	bcc.n	800c878 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	1ad2      	subs	r2, r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8bc:	6979      	ldr	r1, [r7, #20]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff fbf8 	bl	800c0b4 <clust2sect>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	68ba      	ldr	r2, [r7, #8]
 800c8ce:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8dc:	441a      	add	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3718      	adds	r7, #24
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b086      	sub	sp, #24
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f7ff feb4 	bl	800c66c <dir_sdi>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c908:	7dfb      	ldrb	r3, [r7, #23]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d12b      	bne.n	800c966 <dir_alloc+0x7a>
		n = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	69db      	ldr	r3, [r3, #28]
 800c916:	4619      	mov	r1, r3
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f7ff fb2f 	bl	800bf7c <move_window>
 800c91e:	4603      	mov	r3, r0
 800c920:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c922:	7dfb      	ldrb	r3, [r7, #23]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d11d      	bne.n	800c964 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6a1b      	ldr	r3, [r3, #32]
 800c92c:	781b      	ldrb	r3, [r3, #0]
 800c92e:	2be5      	cmp	r3, #229	; 0xe5
 800c930:	d004      	beq.n	800c93c <dir_alloc+0x50>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a1b      	ldr	r3, [r3, #32]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d107      	bne.n	800c94c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	3301      	adds	r3, #1
 800c940:	613b      	str	r3, [r7, #16]
 800c942:	693a      	ldr	r2, [r7, #16]
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	429a      	cmp	r2, r3
 800c948:	d102      	bne.n	800c950 <dir_alloc+0x64>
 800c94a:	e00c      	b.n	800c966 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c94c:	2300      	movs	r3, #0
 800c94e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c950:	2101      	movs	r1, #1
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f7ff ff05 	bl	800c762 <dir_next>
 800c958:	4603      	mov	r3, r0
 800c95a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c95c:	7dfb      	ldrb	r3, [r7, #23]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0d7      	beq.n	800c912 <dir_alloc+0x26>
 800c962:	e000      	b.n	800c966 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c964:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d101      	bne.n	800c970 <dir_alloc+0x84>
 800c96c:	2307      	movs	r3, #7
 800c96e:	75fb      	strb	r3, [r7, #23]
	return res;
 800c970:	7dfb      	ldrb	r3, [r7, #23]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3718      	adds	r7, #24
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b084      	sub	sp, #16
 800c97e:	af00      	add	r7, sp, #0
 800c980:	6078      	str	r0, [r7, #4]
 800c982:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	331a      	adds	r3, #26
 800c988:	4618      	mov	r0, r3
 800c98a:	f7ff f847 	bl	800ba1c <ld_word>
 800c98e:	4603      	mov	r3, r0
 800c990:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b03      	cmp	r3, #3
 800c998:	d109      	bne.n	800c9ae <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	3314      	adds	r3, #20
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7ff f83c 	bl	800ba1c <ld_word>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	041b      	lsls	r3, r3, #16
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b084      	sub	sp, #16
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	60f8      	str	r0, [r7, #12]
 800c9c0:	60b9      	str	r1, [r7, #8]
 800c9c2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	331a      	adds	r3, #26
 800c9c8:	687a      	ldr	r2, [r7, #4]
 800c9ca:	b292      	uxth	r2, r2
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f7ff f85f 	bl	800ba92 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	781b      	ldrb	r3, [r3, #0]
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d109      	bne.n	800c9f0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	f103 0214 	add.w	r2, r3, #20
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	0c1b      	lsrs	r3, r3, #16
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	f7ff f851 	bl	800ba92 <st_word>
	}
}
 800c9f0:	bf00      	nop
 800c9f2:	3710      	adds	r7, #16
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b086      	sub	sp, #24
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca06:	2100      	movs	r1, #0
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f7ff fe2f 	bl	800c66c <dir_sdi>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <dir_find+0x24>
 800ca18:	7dfb      	ldrb	r3, [r7, #23]
 800ca1a:	e03e      	b.n	800ca9a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	69db      	ldr	r3, [r3, #28]
 800ca20:	4619      	mov	r1, r3
 800ca22:	6938      	ldr	r0, [r7, #16]
 800ca24:	f7ff faaa 	bl	800bf7c <move_window>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d12f      	bne.n	800ca92 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6a1b      	ldr	r3, [r3, #32]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca3a:	7bfb      	ldrb	r3, [r7, #15]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d102      	bne.n	800ca46 <dir_find+0x4e>
 800ca40:	2304      	movs	r3, #4
 800ca42:	75fb      	strb	r3, [r7, #23]
 800ca44:	e028      	b.n	800ca98 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	330b      	adds	r3, #11
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6a1b      	ldr	r3, [r3, #32]
 800ca5c:	330b      	adds	r3, #11
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	f003 0308 	and.w	r3, r3, #8
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d10a      	bne.n	800ca7e <dir_find+0x86>
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6a18      	ldr	r0, [r3, #32]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	3324      	adds	r3, #36	; 0x24
 800ca70:	220b      	movs	r2, #11
 800ca72:	4619      	mov	r1, r3
 800ca74:	f7ff f88f 	bl	800bb96 <mem_cmp>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00b      	beq.n	800ca96 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca7e:	2100      	movs	r1, #0
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff fe6e 	bl	800c762 <dir_next>
 800ca86:	4603      	mov	r3, r0
 800ca88:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d0c5      	beq.n	800ca1c <dir_find+0x24>
 800ca90:	e002      	b.n	800ca98 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ca92:	bf00      	nop
 800ca94:	e000      	b.n	800ca98 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca96:	bf00      	nop

	return res;
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3718      	adds	r7, #24
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cab0:	2101      	movs	r1, #1
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff ff1a 	bl	800c8ec <dir_alloc>
 800cab8:	4603      	mov	r3, r0
 800caba:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cabc:	7bfb      	ldrb	r3, [r7, #15]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d11c      	bne.n	800cafc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	4619      	mov	r1, r3
 800cac8:	68b8      	ldr	r0, [r7, #8]
 800caca:	f7ff fa57 	bl	800bf7c <move_window>
 800cace:	4603      	mov	r3, r0
 800cad0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d111      	bne.n	800cafc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6a1b      	ldr	r3, [r3, #32]
 800cadc:	2220      	movs	r2, #32
 800cade:	2100      	movs	r1, #0
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7ff f83e 	bl	800bb62 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6a18      	ldr	r0, [r3, #32]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	3324      	adds	r3, #36	; 0x24
 800caee:	220b      	movs	r2, #11
 800caf0:	4619      	mov	r1, r3
 800caf2:	f7ff f815 	bl	800bb20 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	2201      	movs	r2, #1
 800cafa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cafc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3710      	adds	r7, #16
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
	...

0800cb08 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b088      	sub	sp, #32
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3324      	adds	r3, #36	; 0x24
 800cb1c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb1e:	220b      	movs	r2, #11
 800cb20:	2120      	movs	r1, #32
 800cb22:	68b8      	ldr	r0, [r7, #8]
 800cb24:	f7ff f81d 	bl	800bb62 <mem_set>
	si = i = 0; ni = 8;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	613b      	str	r3, [r7, #16]
 800cb2c:	693b      	ldr	r3, [r7, #16]
 800cb2e:	617b      	str	r3, [r7, #20]
 800cb30:	2308      	movs	r3, #8
 800cb32:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	617a      	str	r2, [r7, #20]
 800cb3a:	68fa      	ldr	r2, [r7, #12]
 800cb3c:	4413      	add	r3, r2
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb42:	7ffb      	ldrb	r3, [r7, #31]
 800cb44:	2b20      	cmp	r3, #32
 800cb46:	d94e      	bls.n	800cbe6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb48:	7ffb      	ldrb	r3, [r7, #31]
 800cb4a:	2b2f      	cmp	r3, #47	; 0x2f
 800cb4c:	d006      	beq.n	800cb5c <create_name+0x54>
 800cb4e:	7ffb      	ldrb	r3, [r7, #31]
 800cb50:	2b5c      	cmp	r3, #92	; 0x5c
 800cb52:	d110      	bne.n	800cb76 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb54:	e002      	b.n	800cb5c <create_name+0x54>
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	617b      	str	r3, [r7, #20]
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	4413      	add	r3, r2
 800cb62:	781b      	ldrb	r3, [r3, #0]
 800cb64:	2b2f      	cmp	r3, #47	; 0x2f
 800cb66:	d0f6      	beq.n	800cb56 <create_name+0x4e>
 800cb68:	68fa      	ldr	r2, [r7, #12]
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	2b5c      	cmp	r3, #92	; 0x5c
 800cb72:	d0f0      	beq.n	800cb56 <create_name+0x4e>
			break;
 800cb74:	e038      	b.n	800cbe8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb76:	7ffb      	ldrb	r3, [r7, #31]
 800cb78:	2b2e      	cmp	r3, #46	; 0x2e
 800cb7a:	d003      	beq.n	800cb84 <create_name+0x7c>
 800cb7c:	693a      	ldr	r2, [r7, #16]
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d30c      	bcc.n	800cb9e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb84:	69bb      	ldr	r3, [r7, #24]
 800cb86:	2b0b      	cmp	r3, #11
 800cb88:	d002      	beq.n	800cb90 <create_name+0x88>
 800cb8a:	7ffb      	ldrb	r3, [r7, #31]
 800cb8c:	2b2e      	cmp	r3, #46	; 0x2e
 800cb8e:	d001      	beq.n	800cb94 <create_name+0x8c>
 800cb90:	2306      	movs	r3, #6
 800cb92:	e044      	b.n	800cc1e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb94:	2308      	movs	r3, #8
 800cb96:	613b      	str	r3, [r7, #16]
 800cb98:	230b      	movs	r3, #11
 800cb9a:	61bb      	str	r3, [r7, #24]
			continue;
 800cb9c:	e022      	b.n	800cbe4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	da04      	bge.n	800cbb0 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cba6:	7ffb      	ldrb	r3, [r7, #31]
 800cba8:	3b80      	subs	r3, #128	; 0x80
 800cbaa:	4a1f      	ldr	r2, [pc, #124]	; (800cc28 <create_name+0x120>)
 800cbac:	5cd3      	ldrb	r3, [r2, r3]
 800cbae:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cbb0:	7ffb      	ldrb	r3, [r7, #31]
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	481d      	ldr	r0, [pc, #116]	; (800cc2c <create_name+0x124>)
 800cbb6:	f7ff f815 	bl	800bbe4 <chk_chr>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d001      	beq.n	800cbc4 <create_name+0xbc>
 800cbc0:	2306      	movs	r3, #6
 800cbc2:	e02c      	b.n	800cc1e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cbc4:	7ffb      	ldrb	r3, [r7, #31]
 800cbc6:	2b60      	cmp	r3, #96	; 0x60
 800cbc8:	d905      	bls.n	800cbd6 <create_name+0xce>
 800cbca:	7ffb      	ldrb	r3, [r7, #31]
 800cbcc:	2b7a      	cmp	r3, #122	; 0x7a
 800cbce:	d802      	bhi.n	800cbd6 <create_name+0xce>
 800cbd0:	7ffb      	ldrb	r3, [r7, #31]
 800cbd2:	3b20      	subs	r3, #32
 800cbd4:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	613a      	str	r2, [r7, #16]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	4413      	add	r3, r2
 800cbe0:	7ffa      	ldrb	r2, [r7, #31]
 800cbe2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cbe4:	e7a6      	b.n	800cb34 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbe6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	441a      	add	r2, r3
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cbf2:	693b      	ldr	r3, [r7, #16]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d101      	bne.n	800cbfc <create_name+0xf4>
 800cbf8:	2306      	movs	r3, #6
 800cbfa:	e010      	b.n	800cc1e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	2be5      	cmp	r3, #229	; 0xe5
 800cc02:	d102      	bne.n	800cc0a <create_name+0x102>
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	2205      	movs	r2, #5
 800cc08:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cc0a:	7ffb      	ldrb	r3, [r7, #31]
 800cc0c:	2b20      	cmp	r3, #32
 800cc0e:	d801      	bhi.n	800cc14 <create_name+0x10c>
 800cc10:	2204      	movs	r2, #4
 800cc12:	e000      	b.n	800cc16 <create_name+0x10e>
 800cc14:	2200      	movs	r2, #0
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	330b      	adds	r3, #11
 800cc1a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc1c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3720      	adds	r7, #32
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	0800f028 	.word	0x0800f028
 800cc2c:	0800ef50 	.word	0x0800ef50

0800cc30 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b086      	sub	sp, #24
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc44:	e002      	b.n	800cc4c <follow_path+0x1c>
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	603b      	str	r3, [r7, #0]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	2b2f      	cmp	r3, #47	; 0x2f
 800cc52:	d0f8      	beq.n	800cc46 <follow_path+0x16>
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	2b5c      	cmp	r3, #92	; 0x5c
 800cc5a:	d0f4      	beq.n	800cc46 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	2b1f      	cmp	r3, #31
 800cc68:	d80a      	bhi.n	800cc80 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2280      	movs	r2, #128	; 0x80
 800cc6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cc72:	2100      	movs	r1, #0
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f7ff fcf9 	bl	800c66c <dir_sdi>
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	75fb      	strb	r3, [r7, #23]
 800cc7e:	e043      	b.n	800cd08 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc80:	463b      	mov	r3, r7
 800cc82:	4619      	mov	r1, r3
 800cc84:	6878      	ldr	r0, [r7, #4]
 800cc86:	f7ff ff3f 	bl	800cb08 <create_name>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d134      	bne.n	800ccfe <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f7ff feaf 	bl	800c9f8 <dir_find>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cca4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cca6:	7dfb      	ldrb	r3, [r7, #23]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00a      	beq.n	800ccc2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d127      	bne.n	800cd02 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ccb2:	7afb      	ldrb	r3, [r7, #11]
 800ccb4:	f003 0304 	and.w	r3, r3, #4
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d122      	bne.n	800cd02 <follow_path+0xd2>
 800ccbc:	2305      	movs	r3, #5
 800ccbe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ccc0:	e01f      	b.n	800cd02 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccc2:	7afb      	ldrb	r3, [r7, #11]
 800ccc4:	f003 0304 	and.w	r3, r3, #4
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d11c      	bne.n	800cd06 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	799b      	ldrb	r3, [r3, #6]
 800ccd0:	f003 0310 	and.w	r3, r3, #16
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d102      	bne.n	800ccde <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ccd8:	2305      	movs	r3, #5
 800ccda:	75fb      	strb	r3, [r7, #23]
 800ccdc:	e014      	b.n	800cd08 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	695b      	ldr	r3, [r3, #20]
 800cce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccec:	4413      	add	r3, r2
 800ccee:	4619      	mov	r1, r3
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f7ff fe42 	bl	800c97a <ld_clust>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccfc:	e7c0      	b.n	800cc80 <follow_path+0x50>
			if (res != FR_OK) break;
 800ccfe:	bf00      	nop
 800cd00:	e002      	b.n	800cd08 <follow_path+0xd8>
				break;
 800cd02:	bf00      	nop
 800cd04:	e000      	b.n	800cd08 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd06:	bf00      	nop
			}
		}
	}

	return res;
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd12:	b480      	push	{r7}
 800cd14:	b087      	sub	sp, #28
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd1a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd1e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d031      	beq.n	800cd8c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	617b      	str	r3, [r7, #20]
 800cd2e:	e002      	b.n	800cd36 <get_ldnumber+0x24>
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	3301      	adds	r3, #1
 800cd34:	617b      	str	r3, [r7, #20]
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	2b20      	cmp	r3, #32
 800cd3c:	d903      	bls.n	800cd46 <get_ldnumber+0x34>
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	2b3a      	cmp	r3, #58	; 0x3a
 800cd44:	d1f4      	bne.n	800cd30 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	2b3a      	cmp	r3, #58	; 0x3a
 800cd4c:	d11c      	bne.n	800cd88 <get_ldnumber+0x76>
			tp = *path;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	60fa      	str	r2, [r7, #12]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	3b30      	subs	r3, #48	; 0x30
 800cd5e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b09      	cmp	r3, #9
 800cd64:	d80e      	bhi.n	800cd84 <get_ldnumber+0x72>
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d10a      	bne.n	800cd84 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d107      	bne.n	800cd84 <get_ldnumber+0x72>
					vol = (int)i;
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	617b      	str	r3, [r7, #20]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	697a      	ldr	r2, [r7, #20]
 800cd82:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	e002      	b.n	800cd8e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd88:	2300      	movs	r3, #0
 800cd8a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd8c:	693b      	ldr	r3, [r7, #16]
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	371c      	adds	r7, #28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
	...

0800cd9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2200      	movs	r2, #0
 800cdaa:	70da      	strb	r2, [r3, #3]
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cdb4:	6839      	ldr	r1, [r7, #0]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff f8e0 	bl	800bf7c <move_window>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <check_fs+0x2a>
 800cdc2:	2304      	movs	r3, #4
 800cdc4:	e038      	b.n	800ce38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	3330      	adds	r3, #48	; 0x30
 800cdca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f7fe fe24 	bl	800ba1c <ld_word>
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d001      	beq.n	800cde4 <check_fs+0x48>
 800cde0:	2303      	movs	r3, #3
 800cde2:	e029      	b.n	800ce38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdea:	2be9      	cmp	r3, #233	; 0xe9
 800cdec:	d009      	beq.n	800ce02 <check_fs+0x66>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cdf4:	2beb      	cmp	r3, #235	; 0xeb
 800cdf6:	d11e      	bne.n	800ce36 <check_fs+0x9a>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cdfe:	2b90      	cmp	r3, #144	; 0x90
 800ce00:	d119      	bne.n	800ce36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	3330      	adds	r3, #48	; 0x30
 800ce06:	3336      	adds	r3, #54	; 0x36
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe fe1f 	bl	800ba4c <ld_dword>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce14:	4a0a      	ldr	r2, [pc, #40]	; (800ce40 <check_fs+0xa4>)
 800ce16:	4293      	cmp	r3, r2
 800ce18:	d101      	bne.n	800ce1e <check_fs+0x82>
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	e00c      	b.n	800ce38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	3330      	adds	r3, #48	; 0x30
 800ce22:	3352      	adds	r3, #82	; 0x52
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fe fe11 	bl	800ba4c <ld_dword>
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <check_fs+0xa8>)
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d101      	bne.n	800ce36 <check_fs+0x9a>
 800ce32:	2300      	movs	r3, #0
 800ce34:	e000      	b.n	800ce38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce36:	2302      	movs	r3, #2
}
 800ce38:	4618      	mov	r0, r3
 800ce3a:	3708      	adds	r7, #8
 800ce3c:	46bd      	mov	sp, r7
 800ce3e:	bd80      	pop	{r7, pc}
 800ce40:	00544146 	.word	0x00544146
 800ce44:	33544146 	.word	0x33544146

0800ce48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b096      	sub	sp, #88	; 0x58
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	60f8      	str	r0, [r7, #12]
 800ce50:	60b9      	str	r1, [r7, #8]
 800ce52:	4613      	mov	r3, r2
 800ce54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f7ff ff58 	bl	800cd12 <get_ldnumber>
 800ce62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	da01      	bge.n	800ce6e <find_volume+0x26>
 800ce6a:	230b      	movs	r3, #11
 800ce6c:	e22e      	b.n	800d2cc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce6e:	4aa8      	ldr	r2, [pc, #672]	; (800d110 <find_volume+0x2c8>)
 800ce70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d101      	bne.n	800ce82 <find_volume+0x3a>
 800ce7e:	230c      	movs	r3, #12
 800ce80:	e224      	b.n	800d2cc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce86:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	f023 0301 	bic.w	r3, r3, #1
 800ce8e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce92:	781b      	ldrb	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d01a      	beq.n	800cece <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9a:	785b      	ldrb	r3, [r3, #1]
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f7fe fd1f 	bl	800b8e0 <disk_status>
 800cea2:	4603      	mov	r3, r0
 800cea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d10c      	bne.n	800cece <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ceb4:	79fb      	ldrb	r3, [r7, #7]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <find_volume+0x82>
 800ceba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cebe:	f003 0304 	and.w	r3, r3, #4
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cec6:	230a      	movs	r3, #10
 800cec8:	e200      	b.n	800d2cc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800ceca:	2300      	movs	r3, #0
 800cecc:	e1fe      	b.n	800d2cc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ced4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceda:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	785b      	ldrb	r3, [r3, #1]
 800cee0:	4618      	mov	r0, r3
 800cee2:	f7fe fd17 	bl	800b914 <disk_initialize>
 800cee6:	4603      	mov	r3, r0
 800cee8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ceec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cef0:	f003 0301 	and.w	r3, r3, #1
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d001      	beq.n	800cefc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cef8:	2303      	movs	r3, #3
 800cefa:	e1e7      	b.n	800d2cc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d007      	beq.n	800cf12 <find_volume+0xca>
 800cf02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf06:	f003 0304 	and.w	r3, r3, #4
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d001      	beq.n	800cf12 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf0e:	230a      	movs	r3, #10
 800cf10:	e1dc      	b.n	800d2cc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf12:	2300      	movs	r3, #0
 800cf14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf1a:	f7ff ff3f 	bl	800cd9c <check_fs>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf28:	2b02      	cmp	r3, #2
 800cf2a:	d14b      	bne.n	800cfc4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	643b      	str	r3, [r7, #64]	; 0x40
 800cf30:	e01f      	b.n	800cf72 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf3a:	011b      	lsls	r3, r3, #4
 800cf3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf40:	4413      	add	r3, r2
 800cf42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf46:	3304      	adds	r3, #4
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d006      	beq.n	800cf5c <find_volume+0x114>
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	3308      	adds	r3, #8
 800cf52:	4618      	mov	r0, r3
 800cf54:	f7fe fd7a 	bl	800ba4c <ld_dword>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	e000      	b.n	800cf5e <find_volume+0x116>
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800cf66:	440b      	add	r3, r1
 800cf68:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf6e:	3301      	adds	r3, #1
 800cf70:	643b      	str	r3, [r7, #64]	; 0x40
 800cf72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d9dc      	bls.n	800cf32 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cf78:	2300      	movs	r3, #0
 800cf7a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <find_volume+0x140>
 800cf82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf84:	3b01      	subs	r3, #1
 800cf86:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cf88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800cf90:	4413      	add	r3, r2
 800cf92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cf96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cf98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d005      	beq.n	800cfaa <find_volume+0x162>
 800cf9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfa2:	f7ff fefb 	bl	800cd9c <check_fs>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	e000      	b.n	800cfac <find_volume+0x164>
 800cfaa:	2303      	movs	r3, #3
 800cfac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cfb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d905      	bls.n	800cfc4 <find_volume+0x17c>
 800cfb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfba:	3301      	adds	r3, #1
 800cfbc:	643b      	str	r3, [r7, #64]	; 0x40
 800cfbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc0:	2b03      	cmp	r3, #3
 800cfc2:	d9e1      	bls.n	800cf88 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cfc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	d101      	bne.n	800cfd0 <find_volume+0x188>
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e17d      	b.n	800d2cc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cfd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d901      	bls.n	800cfdc <find_volume+0x194>
 800cfd8:	230d      	movs	r3, #13
 800cfda:	e177      	b.n	800d2cc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfde:	3330      	adds	r3, #48	; 0x30
 800cfe0:	330b      	adds	r3, #11
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f7fe fd1a 	bl	800ba1c <ld_word>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfee:	d001      	beq.n	800cff4 <find_volume+0x1ac>
 800cff0:	230d      	movs	r3, #13
 800cff2:	e16b      	b.n	800d2cc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff6:	3330      	adds	r3, #48	; 0x30
 800cff8:	3316      	adds	r3, #22
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fd0e 	bl	800ba1c <ld_word>
 800d000:	4603      	mov	r3, r0
 800d002:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d004:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <find_volume+0x1d0>
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	3330      	adds	r3, #48	; 0x30
 800d00e:	3324      	adds	r3, #36	; 0x24
 800d010:	4618      	mov	r0, r3
 800d012:	f7fe fd1b 	bl	800ba4c <ld_dword>
 800d016:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d01a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d01c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d01e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d020:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d026:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d02a:	789b      	ldrb	r3, [r3, #2]
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	d005      	beq.n	800d03c <find_volume+0x1f4>
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	789b      	ldrb	r3, [r3, #2]
 800d034:	2b02      	cmp	r3, #2
 800d036:	d001      	beq.n	800d03c <find_volume+0x1f4>
 800d038:	230d      	movs	r3, #13
 800d03a:	e147      	b.n	800d2cc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	789b      	ldrb	r3, [r3, #2]
 800d040:	461a      	mov	r2, r3
 800d042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d044:	fb02 f303 	mul.w	r3, r2, r3
 800d048:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d050:	b29a      	uxth	r2, r3
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	895b      	ldrh	r3, [r3, #10]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d008      	beq.n	800d070 <find_volume+0x228>
 800d05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	461a      	mov	r2, r3
 800d064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d066:	895b      	ldrh	r3, [r3, #10]
 800d068:	3b01      	subs	r3, #1
 800d06a:	4013      	ands	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <find_volume+0x22c>
 800d070:	230d      	movs	r3, #13
 800d072:	e12b      	b.n	800d2cc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d076:	3330      	adds	r3, #48	; 0x30
 800d078:	3311      	adds	r3, #17
 800d07a:	4618      	mov	r0, r3
 800d07c:	f7fe fcce 	bl	800ba1c <ld_word>
 800d080:	4603      	mov	r3, r0
 800d082:	461a      	mov	r2, r3
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d08a:	891b      	ldrh	r3, [r3, #8]
 800d08c:	f003 030f 	and.w	r3, r3, #15
 800d090:	b29b      	uxth	r3, r3
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <find_volume+0x252>
 800d096:	230d      	movs	r3, #13
 800d098:	e118      	b.n	800d2cc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	3330      	adds	r3, #48	; 0x30
 800d09e:	3313      	adds	r3, #19
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe fcbb 	bl	800ba1c <ld_word>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d0aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d106      	bne.n	800d0be <find_volume+0x276>
 800d0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b2:	3330      	adds	r3, #48	; 0x30
 800d0b4:	3320      	adds	r3, #32
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7fe fcc8 	bl	800ba4c <ld_dword>
 800d0bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c0:	3330      	adds	r3, #48	; 0x30
 800d0c2:	330e      	adds	r3, #14
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f7fe fca9 	bl	800ba1c <ld_word>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d0ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d101      	bne.n	800d0d8 <find_volume+0x290>
 800d0d4:	230d      	movs	r3, #13
 800d0d6:	e0f9      	b.n	800d2cc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d0d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0dc:	4413      	add	r3, r2
 800d0de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0e0:	8912      	ldrh	r2, [r2, #8]
 800d0e2:	0912      	lsrs	r2, r2, #4
 800d0e4:	b292      	uxth	r2, r2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d0ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d201      	bcs.n	800d0f6 <find_volume+0x2ae>
 800d0f2:	230d      	movs	r3, #13
 800d0f4:	e0ea      	b.n	800d2cc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d0f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	1ad3      	subs	r3, r2, r3
 800d0fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0fe:	8952      	ldrh	r2, [r2, #10]
 800d100:	fbb3 f3f2 	udiv	r3, r3, r2
 800d104:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d103      	bne.n	800d114 <find_volume+0x2cc>
 800d10c:	230d      	movs	r3, #13
 800d10e:	e0dd      	b.n	800d2cc <find_volume+0x484>
 800d110:	2000135c 	.word	0x2000135c
		fmt = FS_FAT32;
 800d114:	2303      	movs	r3, #3
 800d116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d11c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d120:	4293      	cmp	r3, r2
 800d122:	d802      	bhi.n	800d12a <find_volume+0x2e2>
 800d124:	2302      	movs	r3, #2
 800d126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d130:	4293      	cmp	r3, r2
 800d132:	d802      	bhi.n	800d13a <find_volume+0x2f2>
 800d134:	2301      	movs	r3, #1
 800d136:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	1c9a      	adds	r2, r3, #2
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d146:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d148:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d14a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d14c:	441a      	add	r2, r3
 800d14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d150:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d152:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d156:	441a      	add	r2, r3
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d15c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d160:	2b03      	cmp	r3, #3
 800d162:	d11e      	bne.n	800d1a2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d166:	3330      	adds	r3, #48	; 0x30
 800d168:	332a      	adds	r3, #42	; 0x2a
 800d16a:	4618      	mov	r0, r3
 800d16c:	f7fe fc56 	bl	800ba1c <ld_word>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	d001      	beq.n	800d17a <find_volume+0x332>
 800d176:	230d      	movs	r3, #13
 800d178:	e0a8      	b.n	800d2cc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	891b      	ldrh	r3, [r3, #8]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d001      	beq.n	800d186 <find_volume+0x33e>
 800d182:	230d      	movs	r3, #13
 800d184:	e0a2      	b.n	800d2cc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d188:	3330      	adds	r3, #48	; 0x30
 800d18a:	332c      	adds	r3, #44	; 0x2c
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7fe fc5d 	bl	800ba4c <ld_dword>
 800d192:	4602      	mov	r2, r0
 800d194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d196:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	695b      	ldr	r3, [r3, #20]
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	647b      	str	r3, [r7, #68]	; 0x44
 800d1a0:	e01f      	b.n	800d1e2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	891b      	ldrh	r3, [r3, #8]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d101      	bne.n	800d1ae <find_volume+0x366>
 800d1aa:	230d      	movs	r3, #13
 800d1ac:	e08e      	b.n	800d2cc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	6a1a      	ldr	r2, [r3, #32]
 800d1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1b4:	441a      	add	r2, r3
 800d1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b8:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d1ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1be:	2b02      	cmp	r3, #2
 800d1c0:	d103      	bne.n	800d1ca <find_volume+0x382>
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	e00a      	b.n	800d1e0 <find_volume+0x398>
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1cc:	695a      	ldr	r2, [r3, #20]
 800d1ce:	4613      	mov	r3, r2
 800d1d0:	005b      	lsls	r3, r3, #1
 800d1d2:	4413      	add	r3, r2
 800d1d4:	085a      	lsrs	r2, r3, #1
 800d1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d8:	695b      	ldr	r3, [r3, #20]
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d1e0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	699a      	ldr	r2, [r3, #24]
 800d1e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d1ec:	0a5b      	lsrs	r3, r3, #9
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d201      	bcs.n	800d1f6 <find_volume+0x3ae>
 800d1f2:	230d      	movs	r3, #13
 800d1f4:	e06a      	b.n	800d2cc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1fc:	611a      	str	r2, [r3, #16]
 800d1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d200:	691a      	ldr	r2, [r3, #16]
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d208:	2280      	movs	r2, #128	; 0x80
 800d20a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d210:	2b03      	cmp	r3, #3
 800d212:	d149      	bne.n	800d2a8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d216:	3330      	adds	r3, #48	; 0x30
 800d218:	3330      	adds	r3, #48	; 0x30
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe fbfe 	bl	800ba1c <ld_word>
 800d220:	4603      	mov	r3, r0
 800d222:	2b01      	cmp	r3, #1
 800d224:	d140      	bne.n	800d2a8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d228:	3301      	adds	r3, #1
 800d22a:	4619      	mov	r1, r3
 800d22c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d22e:	f7fe fea5 	bl	800bf7c <move_window>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d137      	bne.n	800d2a8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23a:	2200      	movs	r2, #0
 800d23c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d240:	3330      	adds	r3, #48	; 0x30
 800d242:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe fbe8 	bl	800ba1c <ld_word>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d254:	429a      	cmp	r2, r3
 800d256:	d127      	bne.n	800d2a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25a:	3330      	adds	r3, #48	; 0x30
 800d25c:	4618      	mov	r0, r3
 800d25e:	f7fe fbf5 	bl	800ba4c <ld_dword>
 800d262:	4602      	mov	r2, r0
 800d264:	4b1b      	ldr	r3, [pc, #108]	; (800d2d4 <find_volume+0x48c>)
 800d266:	429a      	cmp	r2, r3
 800d268:	d11e      	bne.n	800d2a8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	3330      	adds	r3, #48	; 0x30
 800d26e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d272:	4618      	mov	r0, r3
 800d274:	f7fe fbea 	bl	800ba4c <ld_dword>
 800d278:	4602      	mov	r2, r0
 800d27a:	4b17      	ldr	r3, [pc, #92]	; (800d2d8 <find_volume+0x490>)
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d113      	bne.n	800d2a8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	3330      	adds	r3, #48	; 0x30
 800d284:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe fbdf 	bl	800ba4c <ld_dword>
 800d28e:	4602      	mov	r2, r0
 800d290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d292:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d296:	3330      	adds	r3, #48	; 0x30
 800d298:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d29c:	4618      	mov	r0, r3
 800d29e:	f7fe fbd5 	bl	800ba4c <ld_dword>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2aa:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d2ae:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d2b0:	4b0a      	ldr	r3, [pc, #40]	; (800d2dc <find_volume+0x494>)
 800d2b2:	881b      	ldrh	r3, [r3, #0]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	4b08      	ldr	r3, [pc, #32]	; (800d2dc <find_volume+0x494>)
 800d2ba:	801a      	strh	r2, [r3, #0]
 800d2bc:	4b07      	ldr	r3, [pc, #28]	; (800d2dc <find_volume+0x494>)
 800d2be:	881a      	ldrh	r2, [r3, #0]
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d2c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d2c6:	f7fe fdf1 	bl	800beac <clear_lock>
#endif
	return FR_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3758      	adds	r7, #88	; 0x58
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}
 800d2d4:	41615252 	.word	0x41615252
 800d2d8:	61417272 	.word	0x61417272
 800d2dc:	20001360 	.word	0x20001360

0800d2e0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d2ea:	2309      	movs	r3, #9
 800d2ec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d01c      	beq.n	800d32e <validate+0x4e>
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d018      	beq.n	800d32e <validate+0x4e>
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d013      	beq.n	800d32e <validate+0x4e>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	889a      	ldrh	r2, [r3, #4]
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	88db      	ldrh	r3, [r3, #6]
 800d310:	429a      	cmp	r2, r3
 800d312:	d10c      	bne.n	800d32e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	785b      	ldrb	r3, [r3, #1]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7fe fae0 	bl	800b8e0 <disk_status>
 800d320:	4603      	mov	r3, r0
 800d322:	f003 0301 	and.w	r3, r3, #1
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <validate+0x4e>
			res = FR_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d102      	bne.n	800d33a <validate+0x5a>
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	e000      	b.n	800d33c <validate+0x5c>
 800d33a:	2300      	movs	r3, #0
 800d33c:	683a      	ldr	r2, [r7, #0]
 800d33e:	6013      	str	r3, [r2, #0]
	return res;
 800d340:	7bfb      	ldrb	r3, [r7, #15]
}
 800d342:	4618      	mov	r0, r3
 800d344:	3710      	adds	r7, #16
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
	...

0800d34c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b088      	sub	sp, #32
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	4613      	mov	r3, r2
 800d358:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d35e:	f107 0310 	add.w	r3, r7, #16
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff fcd5 	bl	800cd12 <get_ldnumber>
 800d368:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	da01      	bge.n	800d374 <f_mount+0x28>
 800d370:	230b      	movs	r3, #11
 800d372:	e02b      	b.n	800d3cc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d374:	4a17      	ldr	r2, [pc, #92]	; (800d3d4 <f_mount+0x88>)
 800d376:	69fb      	ldr	r3, [r7, #28]
 800d378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d37c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d37e:	69bb      	ldr	r3, [r7, #24]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d005      	beq.n	800d390 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d384:	69b8      	ldr	r0, [r7, #24]
 800d386:	f7fe fd91 	bl	800beac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d38a:	69bb      	ldr	r3, [r7, #24]
 800d38c:	2200      	movs	r2, #0
 800d38e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2200      	movs	r2, #0
 800d39a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	490d      	ldr	r1, [pc, #52]	; (800d3d4 <f_mount+0x88>)
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <f_mount+0x66>
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d001      	beq.n	800d3b6 <f_mount+0x6a>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e00a      	b.n	800d3cc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d3b6:	f107 010c 	add.w	r1, r7, #12
 800d3ba:	f107 0308 	add.w	r3, r7, #8
 800d3be:	2200      	movs	r2, #0
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7ff fd41 	bl	800ce48 <find_volume>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}
 800d3d4:	2000135c 	.word	0x2000135c

0800d3d8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b098      	sub	sp, #96	; 0x60
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d101      	bne.n	800d3f0 <f_open+0x18>
 800d3ec:	2309      	movs	r3, #9
 800d3ee:	e1ad      	b.n	800d74c <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d3f0:	79fb      	ldrb	r3, [r7, #7]
 800d3f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d3f8:	79fa      	ldrb	r2, [r7, #7]
 800d3fa:	f107 0110 	add.w	r1, r7, #16
 800d3fe:	f107 0308 	add.w	r3, r7, #8
 800d402:	4618      	mov	r0, r3
 800d404:	f7ff fd20 	bl	800ce48 <find_volume>
 800d408:	4603      	mov	r3, r0
 800d40a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d40e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d412:	2b00      	cmp	r3, #0
 800d414:	f040 8191 	bne.w	800d73a <f_open+0x362>
		dj.obj.fs = fs;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	f107 0314 	add.w	r3, r7, #20
 800d422:	4611      	mov	r1, r2
 800d424:	4618      	mov	r0, r3
 800d426:	f7ff fc03 	bl	800cc30 <follow_path>
 800d42a:	4603      	mov	r3, r0
 800d42c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d434:	2b00      	cmp	r3, #0
 800d436:	d11a      	bne.n	800d46e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d438:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d43c:	b25b      	sxtb	r3, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	da03      	bge.n	800d44a <f_open+0x72>
				res = FR_INVALID_NAME;
 800d442:	2306      	movs	r3, #6
 800d444:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d448:	e011      	b.n	800d46e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	f023 0301 	bic.w	r3, r3, #1
 800d450:	2b00      	cmp	r3, #0
 800d452:	bf14      	ite	ne
 800d454:	2301      	movne	r3, #1
 800d456:	2300      	moveq	r3, #0
 800d458:	b2db      	uxtb	r3, r3
 800d45a:	461a      	mov	r2, r3
 800d45c:	f107 0314 	add.w	r3, r7, #20
 800d460:	4611      	mov	r1, r2
 800d462:	4618      	mov	r0, r3
 800d464:	f7fe fbda 	bl	800bc1c <chk_lock>
 800d468:	4603      	mov	r3, r0
 800d46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d46e:	79fb      	ldrb	r3, [r7, #7]
 800d470:	f003 031c 	and.w	r3, r3, #28
 800d474:	2b00      	cmp	r3, #0
 800d476:	d07f      	beq.n	800d578 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d478:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d017      	beq.n	800d4b0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d484:	2b04      	cmp	r3, #4
 800d486:	d10e      	bne.n	800d4a6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d488:	f7fe fc24 	bl	800bcd4 <enq_lock>
 800d48c:	4603      	mov	r3, r0
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d006      	beq.n	800d4a0 <f_open+0xc8>
 800d492:	f107 0314 	add.w	r3, r7, #20
 800d496:	4618      	mov	r0, r3
 800d498:	f7ff fb03 	bl	800caa2 <dir_register>
 800d49c:	4603      	mov	r3, r0
 800d49e:	e000      	b.n	800d4a2 <f_open+0xca>
 800d4a0:	2312      	movs	r3, #18
 800d4a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d4a6:	79fb      	ldrb	r3, [r7, #7]
 800d4a8:	f043 0308 	orr.w	r3, r3, #8
 800d4ac:	71fb      	strb	r3, [r7, #7]
 800d4ae:	e010      	b.n	800d4d2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d4b0:	7ebb      	ldrb	r3, [r7, #26]
 800d4b2:	f003 0311 	and.w	r3, r3, #17
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d003      	beq.n	800d4c2 <f_open+0xea>
					res = FR_DENIED;
 800d4ba:	2307      	movs	r3, #7
 800d4bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4c0:	e007      	b.n	800d4d2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d4c2:	79fb      	ldrb	r3, [r7, #7]
 800d4c4:	f003 0304 	and.w	r3, r3, #4
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <f_open+0xfa>
 800d4cc:	2308      	movs	r3, #8
 800d4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d4d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d168      	bne.n	800d5ac <f_open+0x1d4>
 800d4da:	79fb      	ldrb	r3, [r7, #7]
 800d4dc:	f003 0308 	and.w	r3, r3, #8
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d063      	beq.n	800d5ac <f_open+0x1d4>
				dw = GET_FATTIME();
 800d4e4:	f7fb fa04 	bl	80088f0 <get_fattime>
 800d4e8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4ec:	330e      	adds	r3, #14
 800d4ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7fe fae9 	bl	800bac8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f8:	3316      	adds	r3, #22
 800d4fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f7fe fae3 	bl	800bac8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d504:	330b      	adds	r3, #11
 800d506:	2220      	movs	r2, #32
 800d508:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d50e:	4611      	mov	r1, r2
 800d510:	4618      	mov	r0, r3
 800d512:	f7ff fa32 	bl	800c97a <ld_clust>
 800d516:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d518:	693b      	ldr	r3, [r7, #16]
 800d51a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d51c:	2200      	movs	r2, #0
 800d51e:	4618      	mov	r0, r3
 800d520:	f7ff fa4a 	bl	800c9b8 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d526:	331c      	adds	r3, #28
 800d528:	2100      	movs	r1, #0
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe facc 	bl	800bac8 <st_dword>
					fs->wflag = 1;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	2201      	movs	r2, #1
 800d534:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d037      	beq.n	800d5ac <f_open+0x1d4>
						dw = fs->winsect;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d540:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d542:	f107 0314 	add.w	r3, r7, #20
 800d546:	2200      	movs	r2, #0
 800d548:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7fe ff5d 	bl	800c40a <remove_chain>
 800d550:	4603      	mov	r3, r0
 800d552:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d556:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d126      	bne.n	800d5ac <f_open+0x1d4>
							res = move_window(fs, dw);
 800d55e:	693b      	ldr	r3, [r7, #16]
 800d560:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d562:	4618      	mov	r0, r3
 800d564:	f7fe fd0a 	bl	800bf7c <move_window>
 800d568:	4603      	mov	r3, r0
 800d56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d572:	3a01      	subs	r2, #1
 800d574:	60da      	str	r2, [r3, #12]
 800d576:	e019      	b.n	800d5ac <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d115      	bne.n	800d5ac <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d580:	7ebb      	ldrb	r3, [r7, #26]
 800d582:	f003 0310 	and.w	r3, r3, #16
 800d586:	2b00      	cmp	r3, #0
 800d588:	d003      	beq.n	800d592 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d58a:	2304      	movs	r3, #4
 800d58c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d590:	e00c      	b.n	800d5ac <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d007      	beq.n	800d5ac <f_open+0x1d4>
 800d59c:	7ebb      	ldrb	r3, [r7, #26]
 800d59e:	f003 0301 	and.w	r3, r3, #1
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d002      	beq.n	800d5ac <f_open+0x1d4>
						res = FR_DENIED;
 800d5a6:	2307      	movs	r3, #7
 800d5a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d128      	bne.n	800d606 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d5b4:	79fb      	ldrb	r3, [r7, #7]
 800d5b6:	f003 0308 	and.w	r3, r3, #8
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d003      	beq.n	800d5c6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d5ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d5d4:	79fb      	ldrb	r3, [r7, #7]
 800d5d6:	f023 0301 	bic.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	bf14      	ite	ne
 800d5de:	2301      	movne	r3, #1
 800d5e0:	2300      	moveq	r3, #0
 800d5e2:	b2db      	uxtb	r3, r3
 800d5e4:	461a      	mov	r2, r3
 800d5e6:	f107 0314 	add.w	r3, r7, #20
 800d5ea:	4611      	mov	r1, r2
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fb93 	bl	800bd18 <inc_lock>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	691b      	ldr	r3, [r3, #16]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d102      	bne.n	800d606 <f_open+0x22e>
 800d600:	2302      	movs	r3, #2
 800d602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d606:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f040 8095 	bne.w	800d73a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f7ff f9af 	bl	800c97a <ld_clust>
 800d61c:	4602      	mov	r2, r0
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	331c      	adds	r3, #28
 800d626:	4618      	mov	r0, r3
 800d628:	f7fe fa10 	bl	800ba4c <ld_dword>
 800d62c:	4602      	mov	r2, r0
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d638:	693a      	ldr	r2, [r7, #16]
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	88da      	ldrh	r2, [r3, #6]
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	79fa      	ldrb	r2, [r7, #7]
 800d64a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2200      	movs	r2, #0
 800d650:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2200      	movs	r2, #0
 800d656:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2200      	movs	r2, #0
 800d65c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	3330      	adds	r3, #48	; 0x30
 800d662:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d666:	2100      	movs	r1, #0
 800d668:	4618      	mov	r0, r3
 800d66a:	f7fe fa7a 	bl	800bb62 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d66e:	79fb      	ldrb	r3, [r7, #7]
 800d670:	f003 0320 	and.w	r3, r3, #32
 800d674:	2b00      	cmp	r3, #0
 800d676:	d060      	beq.n	800d73a <f_open+0x362>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	68db      	ldr	r3, [r3, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d05c      	beq.n	800d73a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	68da      	ldr	r2, [r3, #12]
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d688:	693b      	ldr	r3, [r7, #16]
 800d68a:	895b      	ldrh	r3, [r3, #10]
 800d68c:	025b      	lsls	r3, r3, #9
 800d68e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	657b      	str	r3, [r7, #84]	; 0x54
 800d69c:	e016      	b.n	800d6cc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7fe fd25 	bl	800c0f2 <get_fat>
 800d6a8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d6aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d802      	bhi.n	800d6b6 <f_open+0x2de>
 800d6b0:	2302      	movs	r3, #2
 800d6b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d6b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6bc:	d102      	bne.n	800d6c4 <f_open+0x2ec>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d6c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6c8:	1ad3      	subs	r3, r2, r3
 800d6ca:	657b      	str	r3, [r7, #84]	; 0x54
 800d6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d103      	bne.n	800d6dc <f_open+0x304>
 800d6d4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d8e0      	bhi.n	800d69e <f_open+0x2c6>
				}
				fp->clust = clst;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6e0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d6e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d127      	bne.n	800d73a <f_open+0x362>
 800d6ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d022      	beq.n	800d73a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f7fe fcdb 	bl	800c0b4 <clust2sect>
 800d6fe:	6478      	str	r0, [r7, #68]	; 0x44
 800d700:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d702:	2b00      	cmp	r3, #0
 800d704:	d103      	bne.n	800d70e <f_open+0x336>
						res = FR_INT_ERR;
 800d706:	2302      	movs	r3, #2
 800d708:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d70c:	e015      	b.n	800d73a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d710:	0a5a      	lsrs	r2, r3, #9
 800d712:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d714:	441a      	add	r2, r3
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	7858      	ldrb	r0, [r3, #1]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6a1a      	ldr	r2, [r3, #32]
 800d728:	2301      	movs	r3, #1
 800d72a:	f7fe f919 	bl	800b960 <disk_read>
 800d72e:	4603      	mov	r3, r0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d002      	beq.n	800d73a <f_open+0x362>
 800d734:	2301      	movs	r3, #1
 800d736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d73a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d002      	beq.n	800d748 <f_open+0x370>
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d748:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3760      	adds	r7, #96	; 0x60
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b08e      	sub	sp, #56	; 0x38
 800d758:	af00      	add	r7, sp, #0
 800d75a:	60f8      	str	r0, [r7, #12]
 800d75c:	60b9      	str	r1, [r7, #8]
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	2200      	movs	r2, #0
 800d76a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f107 0214 	add.w	r2, r7, #20
 800d772:	4611      	mov	r1, r2
 800d774:	4618      	mov	r0, r3
 800d776:	f7ff fdb3 	bl	800d2e0 <validate>
 800d77a:	4603      	mov	r3, r0
 800d77c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d780:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d784:	2b00      	cmp	r3, #0
 800d786:	d107      	bne.n	800d798 <f_read+0x44>
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	7d5b      	ldrb	r3, [r3, #21]
 800d78c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d794:	2b00      	cmp	r3, #0
 800d796:	d002      	beq.n	800d79e <f_read+0x4a>
 800d798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d79c:	e115      	b.n	800d9ca <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	7d1b      	ldrb	r3, [r3, #20]
 800d7a2:	f003 0301 	and.w	r3, r3, #1
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d101      	bne.n	800d7ae <f_read+0x5a>
 800d7aa:	2307      	movs	r3, #7
 800d7ac:	e10d      	b.n	800d9ca <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	699b      	ldr	r3, [r3, #24]
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d7ba:	687a      	ldr	r2, [r7, #4]
 800d7bc:	6a3b      	ldr	r3, [r7, #32]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	f240 80fe 	bls.w	800d9c0 <f_read+0x26c>
 800d7c4:	6a3b      	ldr	r3, [r7, #32]
 800d7c6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d7c8:	e0fa      	b.n	800d9c0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	699b      	ldr	r3, [r3, #24]
 800d7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f040 80c6 	bne.w	800d964 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	699b      	ldr	r3, [r3, #24]
 800d7dc:	0a5b      	lsrs	r3, r3, #9
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	8952      	ldrh	r2, [r2, #10]
 800d7e2:	3a01      	subs	r2, #1
 800d7e4:	4013      	ands	r3, r2
 800d7e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d12f      	bne.n	800d84e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	699b      	ldr	r3, [r3, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d103      	bne.n	800d7fe <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	689b      	ldr	r3, [r3, #8]
 800d7fa:	633b      	str	r3, [r7, #48]	; 0x30
 800d7fc:	e013      	b.n	800d826 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d802:	2b00      	cmp	r3, #0
 800d804:	d007      	beq.n	800d816 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	699b      	ldr	r3, [r3, #24]
 800d80a:	4619      	mov	r1, r3
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f7fe fef9 	bl	800c604 <clmt_clust>
 800d812:	6338      	str	r0, [r7, #48]	; 0x30
 800d814:	e007      	b.n	800d826 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d816:	68fa      	ldr	r2, [r7, #12]
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	69db      	ldr	r3, [r3, #28]
 800d81c:	4619      	mov	r1, r3
 800d81e:	4610      	mov	r0, r2
 800d820:	f7fe fc67 	bl	800c0f2 <get_fat>
 800d824:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d804      	bhi.n	800d836 <f_read+0xe2>
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2202      	movs	r2, #2
 800d830:	755a      	strb	r2, [r3, #21]
 800d832:	2302      	movs	r3, #2
 800d834:	e0c9      	b.n	800d9ca <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d83c:	d104      	bne.n	800d848 <f_read+0xf4>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2201      	movs	r2, #1
 800d842:	755a      	strb	r2, [r3, #21]
 800d844:	2301      	movs	r3, #1
 800d846:	e0c0      	b.n	800d9ca <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d84c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d84e:	697a      	ldr	r2, [r7, #20]
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	69db      	ldr	r3, [r3, #28]
 800d854:	4619      	mov	r1, r3
 800d856:	4610      	mov	r0, r2
 800d858:	f7fe fc2c 	bl	800c0b4 <clust2sect>
 800d85c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d85e:	69bb      	ldr	r3, [r7, #24]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d104      	bne.n	800d86e <f_read+0x11a>
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2202      	movs	r2, #2
 800d868:	755a      	strb	r2, [r3, #21]
 800d86a:	2302      	movs	r3, #2
 800d86c:	e0ad      	b.n	800d9ca <f_read+0x276>
			sect += csect;
 800d86e:	69ba      	ldr	r2, [r7, #24]
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	4413      	add	r3, r2
 800d874:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	0a5b      	lsrs	r3, r3, #9
 800d87a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d039      	beq.n	800d8f6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	4413      	add	r3, r2
 800d888:	697a      	ldr	r2, [r7, #20]
 800d88a:	8952      	ldrh	r2, [r2, #10]
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d905      	bls.n	800d89c <f_read+0x148>
					cc = fs->csize - csect;
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	895b      	ldrh	r3, [r3, #10]
 800d894:	461a      	mov	r2, r3
 800d896:	69fb      	ldr	r3, [r7, #28]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d89c:	697b      	ldr	r3, [r7, #20]
 800d89e:	7858      	ldrb	r0, [r3, #1]
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	69ba      	ldr	r2, [r7, #24]
 800d8a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8a6:	f7fe f85b 	bl	800b960 <disk_read>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d004      	beq.n	800d8ba <f_read+0x166>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	755a      	strb	r2, [r3, #21]
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e087      	b.n	800d9ca <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	7d1b      	ldrb	r3, [r3, #20]
 800d8be:	b25b      	sxtb	r3, r3
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	da14      	bge.n	800d8ee <f_read+0x19a>
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	6a1a      	ldr	r2, [r3, #32]
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	1ad3      	subs	r3, r2, r3
 800d8cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	d90d      	bls.n	800d8ee <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	6a1a      	ldr	r2, [r3, #32]
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	1ad3      	subs	r3, r2, r3
 800d8da:	025b      	lsls	r3, r3, #9
 800d8dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8de:	18d0      	adds	r0, r2, r3
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	3330      	adds	r3, #48	; 0x30
 800d8e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	f7fe f919 	bl	800bb20 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	025b      	lsls	r3, r3, #9
 800d8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d8f4:	e050      	b.n	800d998 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	69ba      	ldr	r2, [r7, #24]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d02e      	beq.n	800d95e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	7d1b      	ldrb	r3, [r3, #20]
 800d904:	b25b      	sxtb	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	da18      	bge.n	800d93c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	7858      	ldrb	r0, [r3, #1]
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6a1a      	ldr	r2, [r3, #32]
 800d918:	2301      	movs	r3, #1
 800d91a:	f7fe f841 	bl	800b9a0 <disk_write>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d004      	beq.n	800d92e <f_read+0x1da>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2201      	movs	r2, #1
 800d928:	755a      	strb	r2, [r3, #21]
 800d92a:	2301      	movs	r3, #1
 800d92c:	e04d      	b.n	800d9ca <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	7d1b      	ldrb	r3, [r3, #20]
 800d932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d936:	b2da      	uxtb	r2, r3
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	7858      	ldrb	r0, [r3, #1]
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d946:	2301      	movs	r3, #1
 800d948:	69ba      	ldr	r2, [r7, #24]
 800d94a:	f7fe f809 	bl	800b960 <disk_read>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d004      	beq.n	800d95e <f_read+0x20a>
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2201      	movs	r2, #1
 800d958:	755a      	strb	r2, [r3, #21]
 800d95a:	2301      	movs	r3, #1
 800d95c:	e035      	b.n	800d9ca <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	69ba      	ldr	r2, [r7, #24]
 800d962:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d96c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d970:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	429a      	cmp	r2, r3
 800d978:	d901      	bls.n	800d97e <f_read+0x22a>
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98c:	4413      	add	r3, r2
 800d98e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d990:	4619      	mov	r1, r3
 800d992:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d994:	f7fe f8c4 	bl	800bb20 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99c:	4413      	add	r3, r2
 800d99e:	627b      	str	r3, [r7, #36]	; 0x24
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	699a      	ldr	r2, [r3, #24]
 800d9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a6:	441a      	add	r2, r3
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	619a      	str	r2, [r3, #24]
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	681a      	ldr	r2, [r3, #0]
 800d9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b2:	441a      	add	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	f47f af01 	bne.w	800d7ca <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d9c8:	2300      	movs	r3, #0
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3738      	adds	r7, #56	; 0x38
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}

0800d9d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b086      	sub	sp, #24
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f107 0208 	add.w	r2, r7, #8
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7ff fc7c 	bl	800d2e0 <validate>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d168      	bne.n	800dac4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	7d1b      	ldrb	r3, [r3, #20]
 800d9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d062      	beq.n	800dac4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	7d1b      	ldrb	r3, [r3, #20]
 800da02:	b25b      	sxtb	r3, r3
 800da04:	2b00      	cmp	r3, #0
 800da06:	da15      	bge.n	800da34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	7858      	ldrb	r0, [r3, #1]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	6a1a      	ldr	r2, [r3, #32]
 800da16:	2301      	movs	r3, #1
 800da18:	f7fd ffc2 	bl	800b9a0 <disk_write>
 800da1c:	4603      	mov	r3, r0
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d001      	beq.n	800da26 <f_sync+0x54>
 800da22:	2301      	movs	r3, #1
 800da24:	e04f      	b.n	800dac6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800da34:	f7fa ff5c 	bl	80088f0 <get_fattime>
 800da38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da40:	4619      	mov	r1, r3
 800da42:	4610      	mov	r0, r2
 800da44:	f7fe fa9a 	bl	800bf7c <move_window>
 800da48:	4603      	mov	r3, r0
 800da4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800da4c:	7dfb      	ldrb	r3, [r7, #23]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d138      	bne.n	800dac4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	330b      	adds	r3, #11
 800da5c:	781a      	ldrb	r2, [r3, #0]
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	330b      	adds	r3, #11
 800da62:	f042 0220 	orr.w	r2, r2, #32
 800da66:	b2d2      	uxtb	r2, r2
 800da68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6818      	ldr	r0, [r3, #0]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	461a      	mov	r2, r3
 800da74:	68f9      	ldr	r1, [r7, #12]
 800da76:	f7fe ff9f 	bl	800c9b8 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f103 021c 	add.w	r2, r3, #28
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	68db      	ldr	r3, [r3, #12]
 800da84:	4619      	mov	r1, r3
 800da86:	4610      	mov	r0, r2
 800da88:	f7fe f81e 	bl	800bac8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3316      	adds	r3, #22
 800da90:	6939      	ldr	r1, [r7, #16]
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe f818 	bl	800bac8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3312      	adds	r3, #18
 800da9c:	2100      	movs	r1, #0
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fd fff7 	bl	800ba92 <st_word>
					fs->wflag = 1;
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	2201      	movs	r2, #1
 800daa8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	4618      	mov	r0, r3
 800daae:	f7fe fa93 	bl	800bfd8 <sync_fs>
 800dab2:	4603      	mov	r3, r0
 800dab4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	7d1b      	ldrb	r3, [r3, #20]
 800daba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dabe:	b2da      	uxtb	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dac4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3718      	adds	r7, #24
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dace:	b580      	push	{r7, lr}
 800dad0:	b084      	sub	sp, #16
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f7ff ff7b 	bl	800d9d2 <f_sync>
 800dadc:	4603      	mov	r3, r0
 800dade:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dae0:	7bfb      	ldrb	r3, [r7, #15]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d118      	bne.n	800db18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f107 0208 	add.w	r2, r7, #8
 800daec:	4611      	mov	r1, r2
 800daee:	4618      	mov	r0, r3
 800daf0:	f7ff fbf6 	bl	800d2e0 <validate>
 800daf4:	4603      	mov	r3, r0
 800daf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d10c      	bne.n	800db18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	691b      	ldr	r3, [r3, #16]
 800db02:	4618      	mov	r0, r3
 800db04:	f7fe f996 	bl	800be34 <dec_lock>
 800db08:	4603      	mov	r3, r0
 800db0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d102      	bne.n	800db18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	2200      	movs	r2, #0
 800db16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800db18:	7bfb      	ldrb	r3, [r7, #15]
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b090      	sub	sp, #64	; 0x40
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
 800db2a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f107 0208 	add.w	r2, r7, #8
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fbd3 	bl	800d2e0 <validate>
 800db3a:	4603      	mov	r3, r0
 800db3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800db40:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db44:	2b00      	cmp	r3, #0
 800db46:	d103      	bne.n	800db50 <f_lseek+0x2e>
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	7d5b      	ldrb	r3, [r3, #21]
 800db4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800db50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db54:	2b00      	cmp	r3, #0
 800db56:	d002      	beq.n	800db5e <f_lseek+0x3c>
 800db58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db5c:	e1e6      	b.n	800df2c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 80d1 	beq.w	800dd0a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db6e:	d15a      	bne.n	800dc26 <f_lseek+0x104>
			tbl = fp->cltbl;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db74:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800db76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db78:	1d1a      	adds	r2, r3, #4
 800db7a:	627a      	str	r2, [r7, #36]	; 0x24
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	617b      	str	r3, [r7, #20]
 800db80:	2302      	movs	r3, #2
 800db82:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	689b      	ldr	r3, [r3, #8]
 800db88:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800db8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d03a      	beq.n	800dc06 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800db90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db92:	613b      	str	r3, [r7, #16]
 800db94:	2300      	movs	r3, #0
 800db96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9a:	3302      	adds	r3, #2
 800db9c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800db9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba0:	60fb      	str	r3, [r7, #12]
 800dba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba4:	3301      	adds	r3, #1
 800dba6:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dbac:	4618      	mov	r0, r3
 800dbae:	f7fe faa0 	bl	800c0f2 <get_fat>
 800dbb2:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb6:	2b01      	cmp	r3, #1
 800dbb8:	d804      	bhi.n	800dbc4 <f_lseek+0xa2>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2202      	movs	r2, #2
 800dbbe:	755a      	strb	r2, [r3, #21]
 800dbc0:	2302      	movs	r3, #2
 800dbc2:	e1b3      	b.n	800df2c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbca:	d104      	bne.n	800dbd6 <f_lseek+0xb4>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	755a      	strb	r2, [r3, #21]
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	e1aa      	b.n	800df2c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	3301      	adds	r3, #1
 800dbda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d0de      	beq.n	800db9e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dbe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d809      	bhi.n	800dbfc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dbe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbea:	1d1a      	adds	r2, r3, #4
 800dbec:	627a      	str	r2, [r7, #36]	; 0x24
 800dbee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf0:	601a      	str	r2, [r3, #0]
 800dbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf4:	1d1a      	adds	r2, r3, #4
 800dbf6:	627a      	str	r2, [r7, #36]	; 0x24
 800dbf8:	693a      	ldr	r2, [r7, #16]
 800dbfa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	695b      	ldr	r3, [r3, #20]
 800dc00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc02:	429a      	cmp	r2, r3
 800dc04:	d3c4      	bcc.n	800db90 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc0c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dc0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d803      	bhi.n	800dc1e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc18:	2200      	movs	r2, #0
 800dc1a:	601a      	str	r2, [r3, #0]
 800dc1c:	e184      	b.n	800df28 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dc1e:	2311      	movs	r3, #17
 800dc20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dc24:	e180      	b.n	800df28 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	68db      	ldr	r3, [r3, #12]
 800dc2a:	683a      	ldr	r2, [r7, #0]
 800dc2c:	429a      	cmp	r2, r3
 800dc2e:	d902      	bls.n	800dc36 <f_lseek+0x114>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	68db      	ldr	r3, [r3, #12]
 800dc34:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	683a      	ldr	r2, [r7, #0]
 800dc3a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f000 8172 	beq.w	800df28 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	4619      	mov	r1, r3
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7fe fcda 	bl	800c604 <clmt_clust>
 800dc50:	4602      	mov	r2, r0
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	69db      	ldr	r3, [r3, #28]
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	4610      	mov	r0, r2
 800dc60:	f7fe fa28 	bl	800c0b4 <clust2sect>
 800dc64:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d104      	bne.n	800dc76 <f_lseek+0x154>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2202      	movs	r2, #2
 800dc70:	755a      	strb	r2, [r3, #21]
 800dc72:	2302      	movs	r3, #2
 800dc74:	e15a      	b.n	800df2c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	3b01      	subs	r3, #1
 800dc7a:	0a5b      	lsrs	r3, r3, #9
 800dc7c:	68ba      	ldr	r2, [r7, #8]
 800dc7e:	8952      	ldrh	r2, [r2, #10]
 800dc80:	3a01      	subs	r2, #1
 800dc82:	4013      	ands	r3, r2
 800dc84:	69ba      	ldr	r2, [r7, #24]
 800dc86:	4413      	add	r3, r2
 800dc88:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	699b      	ldr	r3, [r3, #24]
 800dc8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8148 	beq.w	800df28 <f_lseek+0x406>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a1b      	ldr	r3, [r3, #32]
 800dc9c:	69ba      	ldr	r2, [r7, #24]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	f000 8142 	beq.w	800df28 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	7d1b      	ldrb	r3, [r3, #20]
 800dca8:	b25b      	sxtb	r3, r3
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	da18      	bge.n	800dce0 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	7858      	ldrb	r0, [r3, #1]
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6a1a      	ldr	r2, [r3, #32]
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	f7fd fe6f 	bl	800b9a0 <disk_write>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d004      	beq.n	800dcd2 <f_lseek+0x1b0>
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2201      	movs	r2, #1
 800dccc:	755a      	strb	r2, [r3, #21]
 800dcce:	2301      	movs	r3, #1
 800dcd0:	e12c      	b.n	800df2c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	7d1b      	ldrb	r3, [r3, #20]
 800dcd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dcda:	b2da      	uxtb	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	7858      	ldrb	r0, [r3, #1]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dcea:	2301      	movs	r3, #1
 800dcec:	69ba      	ldr	r2, [r7, #24]
 800dcee:	f7fd fe37 	bl	800b960 <disk_read>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d004      	beq.n	800dd02 <f_lseek+0x1e0>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	755a      	strb	r2, [r3, #21]
 800dcfe:	2301      	movs	r3, #1
 800dd00:	e114      	b.n	800df2c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	69ba      	ldr	r2, [r7, #24]
 800dd06:	621a      	str	r2, [r3, #32]
 800dd08:	e10e      	b.n	800df28 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68db      	ldr	r3, [r3, #12]
 800dd0e:	683a      	ldr	r2, [r7, #0]
 800dd10:	429a      	cmp	r2, r3
 800dd12:	d908      	bls.n	800dd26 <f_lseek+0x204>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7d1b      	ldrb	r3, [r3, #20]
 800dd18:	f003 0302 	and.w	r3, r3, #2
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d102      	bne.n	800dd26 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	699b      	ldr	r3, [r3, #24]
 800dd2a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	637b      	str	r3, [r7, #52]	; 0x34
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd34:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80a7 	beq.w	800de8c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	025b      	lsls	r3, r3, #9
 800dd44:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800dd46:	6a3b      	ldr	r3, [r7, #32]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d01b      	beq.n	800dd84 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	1e5a      	subs	r2, r3, #1
 800dd50:	69fb      	ldr	r3, [r7, #28]
 800dd52:	fbb2 f2f3 	udiv	r2, r2, r3
 800dd56:	6a3b      	ldr	r3, [r7, #32]
 800dd58:	1e59      	subs	r1, r3, #1
 800dd5a:	69fb      	ldr	r3, [r7, #28]
 800dd5c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d30f      	bcc.n	800dd84 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800dd64:	6a3b      	ldr	r3, [r7, #32]
 800dd66:	1e5a      	subs	r2, r3, #1
 800dd68:	69fb      	ldr	r3, [r7, #28]
 800dd6a:	425b      	negs	r3, r3
 800dd6c:	401a      	ands	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	699b      	ldr	r3, [r3, #24]
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	1ad3      	subs	r3, r2, r3
 800dd7a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	69db      	ldr	r3, [r3, #28]
 800dd80:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd82:	e022      	b.n	800ddca <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800dd8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d119      	bne.n	800ddc4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2100      	movs	r1, #0
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe fb9d 	bl	800c4d4 <create_chain>
 800dd9a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dd9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d104      	bne.n	800ddac <f_lseek+0x28a>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2202      	movs	r2, #2
 800dda6:	755a      	strb	r2, [r3, #21]
 800dda8:	2302      	movs	r3, #2
 800ddaa:	e0bf      	b.n	800df2c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ddac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb2:	d104      	bne.n	800ddbe <f_lseek+0x29c>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	755a      	strb	r2, [r3, #21]
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e0b6      	b.n	800df2c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddc2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddc8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ddca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d05d      	beq.n	800de8c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ddd0:	e03a      	b.n	800de48 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ddd2:	683a      	ldr	r2, [r7, #0]
 800ddd4:	69fb      	ldr	r3, [r7, #28]
 800ddd6:	1ad3      	subs	r3, r2, r3
 800ddd8:	603b      	str	r3, [r7, #0]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	699a      	ldr	r2, [r3, #24]
 800ddde:	69fb      	ldr	r3, [r7, #28]
 800dde0:	441a      	add	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	7d1b      	ldrb	r3, [r3, #20]
 800ddea:	f003 0302 	and.w	r3, r3, #2
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00b      	beq.n	800de0a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fe fb6c 	bl	800c4d4 <create_chain>
 800ddfc:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ddfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de00:	2b00      	cmp	r3, #0
 800de02:	d108      	bne.n	800de16 <f_lseek+0x2f4>
							ofs = 0; break;
 800de04:	2300      	movs	r3, #0
 800de06:	603b      	str	r3, [r7, #0]
 800de08:	e022      	b.n	800de50 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe f96f 	bl	800c0f2 <get_fat>
 800de14:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800de16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de1c:	d104      	bne.n	800de28 <f_lseek+0x306>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2201      	movs	r2, #1
 800de22:	755a      	strb	r2, [r3, #21]
 800de24:	2301      	movs	r3, #1
 800de26:	e081      	b.n	800df2c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800de28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de2a:	2b01      	cmp	r3, #1
 800de2c:	d904      	bls.n	800de38 <f_lseek+0x316>
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de34:	429a      	cmp	r2, r3
 800de36:	d304      	bcc.n	800de42 <f_lseek+0x320>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2202      	movs	r2, #2
 800de3c:	755a      	strb	r2, [r3, #21]
 800de3e:	2302      	movs	r3, #2
 800de40:	e074      	b.n	800df2c <f_lseek+0x40a>
					fp->clust = clst;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de46:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800de48:	683a      	ldr	r2, [r7, #0]
 800de4a:	69fb      	ldr	r3, [r7, #28]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d8c0      	bhi.n	800ddd2 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	699a      	ldr	r2, [r3, #24]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	441a      	add	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de62:	2b00      	cmp	r3, #0
 800de64:	d012      	beq.n	800de8c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fe f922 	bl	800c0b4 <clust2sect>
 800de70:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800de72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de74:	2b00      	cmp	r3, #0
 800de76:	d104      	bne.n	800de82 <f_lseek+0x360>
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2202      	movs	r2, #2
 800de7c:	755a      	strb	r2, [r3, #21]
 800de7e:	2302      	movs	r3, #2
 800de80:	e054      	b.n	800df2c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	0a5b      	lsrs	r3, r3, #9
 800de86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de88:	4413      	add	r3, r2
 800de8a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	699a      	ldr	r2, [r3, #24]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	68db      	ldr	r3, [r3, #12]
 800de94:	429a      	cmp	r2, r3
 800de96:	d90a      	bls.n	800deae <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	699a      	ldr	r2, [r3, #24]
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	7d1b      	ldrb	r3, [r3, #20]
 800dea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	699b      	ldr	r3, [r3, #24]
 800deb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d036      	beq.n	800df28 <f_lseek+0x406>
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6a1b      	ldr	r3, [r3, #32]
 800debe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d031      	beq.n	800df28 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	7d1b      	ldrb	r3, [r3, #20]
 800dec8:	b25b      	sxtb	r3, r3
 800deca:	2b00      	cmp	r3, #0
 800decc:	da18      	bge.n	800df00 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	7858      	ldrb	r0, [r3, #1]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a1a      	ldr	r2, [r3, #32]
 800dedc:	2301      	movs	r3, #1
 800dede:	f7fd fd5f 	bl	800b9a0 <disk_write>
 800dee2:	4603      	mov	r3, r0
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d004      	beq.n	800def2 <f_lseek+0x3d0>
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2201      	movs	r2, #1
 800deec:	755a      	strb	r2, [r3, #21]
 800deee:	2301      	movs	r3, #1
 800def0:	e01c      	b.n	800df2c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	7d1b      	ldrb	r3, [r3, #20]
 800def6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defa:	b2da      	uxtb	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	7858      	ldrb	r0, [r3, #1]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800df0a:	2301      	movs	r3, #1
 800df0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df0e:	f7fd fd27 	bl	800b960 <disk_read>
 800df12:	4603      	mov	r3, r0
 800df14:	2b00      	cmp	r3, #0
 800df16:	d004      	beq.n	800df22 <f_lseek+0x400>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2201      	movs	r2, #1
 800df1c:	755a      	strb	r2, [r3, #21]
 800df1e:	2301      	movs	r3, #1
 800df20:	e004      	b.n	800df2c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800df26:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800df28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3740      	adds	r7, #64	; 0x40
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800df34:	b480      	push	{r7}
 800df36:	b087      	sub	sp, #28
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	4613      	mov	r3, r2
 800df40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800df42:	2301      	movs	r3, #1
 800df44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800df4a:	4b1f      	ldr	r3, [pc, #124]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df4c:	7a5b      	ldrb	r3, [r3, #9]
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	2b00      	cmp	r3, #0
 800df52:	d131      	bne.n	800dfb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800df54:	4b1c      	ldr	r3, [pc, #112]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df56:	7a5b      	ldrb	r3, [r3, #9]
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	461a      	mov	r2, r3
 800df5c:	4b1a      	ldr	r3, [pc, #104]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df5e:	2100      	movs	r1, #0
 800df60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800df62:	4b19      	ldr	r3, [pc, #100]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df64:	7a5b      	ldrb	r3, [r3, #9]
 800df66:	b2db      	uxtb	r3, r3
 800df68:	4a17      	ldr	r2, [pc, #92]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4413      	add	r3, r2
 800df6e:	68fa      	ldr	r2, [r7, #12]
 800df70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800df72:	4b15      	ldr	r3, [pc, #84]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df74:	7a5b      	ldrb	r3, [r3, #9]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	461a      	mov	r2, r3
 800df7a:	4b13      	ldr	r3, [pc, #76]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df7c:	4413      	add	r3, r2
 800df7e:	79fa      	ldrb	r2, [r7, #7]
 800df80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800df82:	4b11      	ldr	r3, [pc, #68]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df84:	7a5b      	ldrb	r3, [r3, #9]
 800df86:	b2db      	uxtb	r3, r3
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	b2d1      	uxtb	r1, r2
 800df8c:	4a0e      	ldr	r2, [pc, #56]	; (800dfc8 <FATFS_LinkDriverEx+0x94>)
 800df8e:	7251      	strb	r1, [r2, #9]
 800df90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800df92:	7dbb      	ldrb	r3, [r7, #22]
 800df94:	3330      	adds	r3, #48	; 0x30
 800df96:	b2da      	uxtb	r2, r3
 800df98:	68bb      	ldr	r3, [r7, #8]
 800df9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	223a      	movs	r2, #58	; 0x3a
 800dfa2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	222f      	movs	r2, #47	; 0x2f
 800dfaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	3303      	adds	r3, #3
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dfb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	371c      	adds	r7, #28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	bf00      	nop
 800dfc8:	20001384 	.word	0x20001384

0800dfcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b082      	sub	sp, #8
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	6839      	ldr	r1, [r7, #0]
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f7ff ffaa 	bl	800df34 <FATFS_LinkDriverEx>
 800dfe0:	4603      	mov	r3, r0
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800dff0:	2201      	movs	r2, #1
 800dff2:	490e      	ldr	r1, [pc, #56]	; (800e02c <MX_USB_HOST_Init+0x40>)
 800dff4:	480e      	ldr	r0, [pc, #56]	; (800e030 <MX_USB_HOST_Init+0x44>)
 800dff6:	f7fc f919 	bl	800a22c <USBH_Init>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e000:	f7f3 fae6 	bl	80015d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e004:	490b      	ldr	r1, [pc, #44]	; (800e034 <MX_USB_HOST_Init+0x48>)
 800e006:	480a      	ldr	r0, [pc, #40]	; (800e030 <MX_USB_HOST_Init+0x44>)
 800e008:	f7fc f99e 	bl	800a348 <USBH_RegisterClass>
 800e00c:	4603      	mov	r3, r0
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d001      	beq.n	800e016 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e012:	f7f3 fadd 	bl	80015d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e016:	4806      	ldr	r0, [pc, #24]	; (800e030 <MX_USB_HOST_Init+0x44>)
 800e018:	f7fc fa22 	bl	800a460 <USBH_Start>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d001      	beq.n	800e026 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e022:	f7f3 fad5 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e026:	bf00      	nop
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	0800e04d 	.word	0x0800e04d
 800e030:	20001a18 	.word	0x20001a18
 800e034:	2000000c 	.word	0x2000000c

0800e038 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e03c:	4802      	ldr	r0, [pc, #8]	; (800e048 <MX_USB_HOST_Process+0x10>)
 800e03e:	f7fc fa1f 	bl	800a480 <USBH_Process>
}
 800e042:	bf00      	nop
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop
 800e048:	20001a18 	.word	0x20001a18

0800e04c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e04c:	b480      	push	{r7}
 800e04e:	b083      	sub	sp, #12
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e058:	78fb      	ldrb	r3, [r7, #3]
 800e05a:	3b01      	subs	r3, #1
 800e05c:	2b04      	cmp	r3, #4
 800e05e:	d819      	bhi.n	800e094 <USBH_UserProcess+0x48>
 800e060:	a201      	add	r2, pc, #4	; (adr r2, 800e068 <USBH_UserProcess+0x1c>)
 800e062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e066:	bf00      	nop
 800e068:	0800e095 	.word	0x0800e095
 800e06c:	0800e085 	.word	0x0800e085
 800e070:	0800e095 	.word	0x0800e095
 800e074:	0800e08d 	.word	0x0800e08d
 800e078:	0800e07d 	.word	0x0800e07d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e07c:	4b09      	ldr	r3, [pc, #36]	; (800e0a4 <USBH_UserProcess+0x58>)
 800e07e:	2203      	movs	r2, #3
 800e080:	701a      	strb	r2, [r3, #0]
  break;
 800e082:	e008      	b.n	800e096 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e084:	4b07      	ldr	r3, [pc, #28]	; (800e0a4 <USBH_UserProcess+0x58>)
 800e086:	2202      	movs	r2, #2
 800e088:	701a      	strb	r2, [r3, #0]
  break;
 800e08a:	e004      	b.n	800e096 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e08c:	4b05      	ldr	r3, [pc, #20]	; (800e0a4 <USBH_UserProcess+0x58>)
 800e08e:	2201      	movs	r2, #1
 800e090:	701a      	strb	r2, [r3, #0]
  break;
 800e092:	e000      	b.n	800e096 <USBH_UserProcess+0x4a>

  default:
  break;
 800e094:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop
 800e0a4:	20001390 	.word	0x20001390

0800e0a8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b08a      	sub	sp, #40	; 0x28
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e0b0:	f107 0314 	add.w	r3, r7, #20
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	601a      	str	r2, [r3, #0]
 800e0b8:	605a      	str	r2, [r3, #4]
 800e0ba:	609a      	str	r2, [r3, #8]
 800e0bc:	60da      	str	r2, [r3, #12]
 800e0be:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e0c8:	d147      	bne.n	800e15a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	613b      	str	r3, [r7, #16]
 800e0ce:	4b25      	ldr	r3, [pc, #148]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d2:	4a24      	ldr	r2, [pc, #144]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e0d4:	f043 0301 	orr.w	r3, r3, #1
 800e0d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0da:	4b22      	ldr	r3, [pc, #136]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0de:	f003 0301 	and.w	r3, r3, #1
 800e0e2:	613b      	str	r3, [r7, #16]
 800e0e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e0e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e0f4:	f107 0314 	add.w	r3, r7, #20
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	481b      	ldr	r0, [pc, #108]	; (800e168 <HAL_HCD_MspInit+0xc0>)
 800e0fc:	f7f4 fb52 	bl	80027a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e100:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e106:	2302      	movs	r3, #2
 800e108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e10a:	2300      	movs	r3, #0
 800e10c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e10e:	2303      	movs	r3, #3
 800e110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e112:	230a      	movs	r3, #10
 800e114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e116:	f107 0314 	add.w	r3, r7, #20
 800e11a:	4619      	mov	r1, r3
 800e11c:	4812      	ldr	r0, [pc, #72]	; (800e168 <HAL_HCD_MspInit+0xc0>)
 800e11e:	f7f4 fb41 	bl	80027a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e122:	4b10      	ldr	r3, [pc, #64]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e126:	4a0f      	ldr	r2, [pc, #60]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e12c:	6353      	str	r3, [r2, #52]	; 0x34
 800e12e:	2300      	movs	r3, #0
 800e130:	60fb      	str	r3, [r7, #12]
 800e132:	4b0c      	ldr	r3, [pc, #48]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e136:	4a0b      	ldr	r2, [pc, #44]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e13c:	6453      	str	r3, [r2, #68]	; 0x44
 800e13e:	4b09      	ldr	r3, [pc, #36]	; (800e164 <HAL_HCD_MspInit+0xbc>)
 800e140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e146:	60fb      	str	r3, [r7, #12]
 800e148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e14a:	2200      	movs	r2, #0
 800e14c:	2100      	movs	r1, #0
 800e14e:	2043      	movs	r0, #67	; 0x43
 800e150:	f7f3 ff83 	bl	800205a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e154:	2043      	movs	r0, #67	; 0x43
 800e156:	f7f3 ff9c 	bl	8002092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e15a:	bf00      	nop
 800e15c:	3728      	adds	r7, #40	; 0x28
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	40023800 	.word	0x40023800
 800e168:	40020000 	.word	0x40020000

0800e16c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fc fd53 	bl	800ac26 <USBH_LL_IncTimer>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e196:	4618      	mov	r0, r3
 800e198:	f7fc fd8b 	bl	800acb2 <USBH_LL_Connect>
}
 800e19c:	bf00      	nop
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7fc fd94 	bl	800ace0 <USBH_LL_Disconnect>
}
 800e1b8:	bf00      	nop
 800e1ba:	3708      	adds	r7, #8
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	bd80      	pop	{r7, pc}

0800e1c0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
 800e1c8:	460b      	mov	r3, r1
 800e1ca:	70fb      	strb	r3, [r7, #3]
 800e1cc:	4613      	mov	r3, r2
 800e1ce:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e1d0:	bf00      	nop
 800e1d2:	370c      	adds	r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fc fd45 	bl	800ac7a <USBH_LL_PortEnabled>
} 
 800e1f0:	bf00      	nop
 800e1f2:	3708      	adds	r7, #8
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e206:	4618      	mov	r0, r3
 800e208:	f7fc fd45 	bl	800ac96 <USBH_LL_PortDisabled>
} 
 800e20c:	bf00      	nop
 800e20e:	3708      	adds	r7, #8
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b082      	sub	sp, #8
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e222:	2b01      	cmp	r3, #1
 800e224:	d12a      	bne.n	800e27c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e226:	4a18      	ldr	r2, [pc, #96]	; (800e288 <USBH_LL_Init+0x74>)
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4a15      	ldr	r2, [pc, #84]	; (800e288 <USBH_LL_Init+0x74>)
 800e232:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e236:	4b14      	ldr	r3, [pc, #80]	; (800e288 <USBH_LL_Init+0x74>)
 800e238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e23c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e23e:	4b12      	ldr	r3, [pc, #72]	; (800e288 <USBH_LL_Init+0x74>)
 800e240:	2208      	movs	r2, #8
 800e242:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e244:	4b10      	ldr	r3, [pc, #64]	; (800e288 <USBH_LL_Init+0x74>)
 800e246:	2201      	movs	r2, #1
 800e248:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e24a:	4b0f      	ldr	r3, [pc, #60]	; (800e288 <USBH_LL_Init+0x74>)
 800e24c:	2200      	movs	r2, #0
 800e24e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e250:	4b0d      	ldr	r3, [pc, #52]	; (800e288 <USBH_LL_Init+0x74>)
 800e252:	2202      	movs	r2, #2
 800e254:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e256:	4b0c      	ldr	r3, [pc, #48]	; (800e288 <USBH_LL_Init+0x74>)
 800e258:	2200      	movs	r2, #0
 800e25a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e25c:	480a      	ldr	r0, [pc, #40]	; (800e288 <USBH_LL_Init+0x74>)
 800e25e:	f7f4 fc78 	bl	8002b52 <HAL_HCD_Init>
 800e262:	4603      	mov	r3, r0
 800e264:	2b00      	cmp	r3, #0
 800e266:	d001      	beq.n	800e26c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e268:	f7f3 f9b2 	bl	80015d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e26c:	4806      	ldr	r0, [pc, #24]	; (800e288 <USBH_LL_Init+0x74>)
 800e26e:	f7f5 f87b 	bl	8003368 <HAL_HCD_GetCurrentFrame>
 800e272:	4603      	mov	r3, r0
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f7fc fcc6 	bl	800ac08 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e27c:	2300      	movs	r3, #0
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	20001df0 	.word	0x20001df0

0800e28c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b084      	sub	sp, #16
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e294:	2300      	movs	r3, #0
 800e296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e298:	2300      	movs	r3, #0
 800e29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7f4 ffe8 	bl	8003278 <HAL_HCD_Start>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 f990 	bl	800e5d4 <USBH_Get_USB_Status>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e2b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e2c2:	b580      	push	{r7, lr}
 800e2c4:	b084      	sub	sp, #16
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f7f4 fff0 	bl	80032be <HAL_HCD_Stop>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f000 f975 	bl	800e5d4 <USBH_Get_USB_Status>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800e2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	3710      	adds	r7, #16
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd80      	pop	{r7, pc}

0800e2f8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e300:	2301      	movs	r3, #1
 800e302:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7f5 f83a 	bl	8003384 <HAL_HCD_GetCurrentSpeed>
 800e310:	4603      	mov	r3, r0
 800e312:	2b01      	cmp	r3, #1
 800e314:	d007      	beq.n	800e326 <USBH_LL_GetSpeed+0x2e>
 800e316:	2b01      	cmp	r3, #1
 800e318:	d302      	bcc.n	800e320 <USBH_LL_GetSpeed+0x28>
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d006      	beq.n	800e32c <USBH_LL_GetSpeed+0x34>
 800e31e:	e008      	b.n	800e332 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]
    break;
 800e324:	e008      	b.n	800e338 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e326:	2301      	movs	r3, #1
 800e328:	73fb      	strb	r3, [r7, #15]
    break;
 800e32a:	e005      	b.n	800e338 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e32c:	2302      	movs	r3, #2
 800e32e:	73fb      	strb	r3, [r7, #15]
    break;
 800e330:	e002      	b.n	800e338 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e332:	2301      	movs	r3, #1
 800e334:	73fb      	strb	r3, [r7, #15]
    break;
 800e336:	bf00      	nop
  }
  return  speed;
 800e338:	7bfb      	ldrb	r3, [r7, #15]
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3710      	adds	r7, #16
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}

0800e342 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e342:	b580      	push	{r7, lr}
 800e344:	b084      	sub	sp, #16
 800e346:	af00      	add	r7, sp, #0
 800e348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e34e:	2300      	movs	r3, #0
 800e350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e358:	4618      	mov	r0, r3
 800e35a:	f7f4 ffcd 	bl	80032f8 <HAL_HCD_ResetPort>
 800e35e:	4603      	mov	r3, r0
 800e360:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	4618      	mov	r0, r3
 800e366:	f000 f935 	bl	800e5d4 <USBH_Get_USB_Status>
 800e36a:	4603      	mov	r3, r0
 800e36c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e36e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e370:	4618      	mov	r0, r3
 800e372:	3710      	adds	r7, #16
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b082      	sub	sp, #8
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	460b      	mov	r3, r1
 800e382:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e38a:	78fa      	ldrb	r2, [r7, #3]
 800e38c:	4611      	mov	r1, r2
 800e38e:	4618      	mov	r0, r3
 800e390:	f7f4 ffd5 	bl	800333e <HAL_HCD_HC_GetXferCount>
 800e394:	4603      	mov	r3, r0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3708      	adds	r7, #8
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}

0800e39e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e39e:	b590      	push	{r4, r7, lr}
 800e3a0:	b089      	sub	sp, #36	; 0x24
 800e3a2:	af04      	add	r7, sp, #16
 800e3a4:	6078      	str	r0, [r7, #4]
 800e3a6:	4608      	mov	r0, r1
 800e3a8:	4611      	mov	r1, r2
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	70fb      	strb	r3, [r7, #3]
 800e3b0:	460b      	mov	r3, r1
 800e3b2:	70bb      	strb	r3, [r7, #2]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e3c6:	787c      	ldrb	r4, [r7, #1]
 800e3c8:	78ba      	ldrb	r2, [r7, #2]
 800e3ca:	78f9      	ldrb	r1, [r7, #3]
 800e3cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3ce:	9302      	str	r3, [sp, #8]
 800e3d0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3d4:	9301      	str	r3, [sp, #4]
 800e3d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	4623      	mov	r3, r4
 800e3de:	f7f4 fc1a 	bl	8002c16 <HAL_HCD_HC_Init>
 800e3e2:	4603      	mov	r3, r0
 800e3e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3e6:	7bfb      	ldrb	r3, [r7, #15]
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f000 f8f3 	bl	800e5d4 <USBH_Get_USB_Status>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e3f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3714      	adds	r7, #20
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd90      	pop	{r4, r7, pc}

0800e3fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	460b      	mov	r3, r1
 800e406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e416:	78fa      	ldrb	r2, [r7, #3]
 800e418:	4611      	mov	r1, r2
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f4 fc93 	bl	8002d46 <HAL_HCD_HC_Halt>
 800e420:	4603      	mov	r3, r0
 800e422:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e424:	7bfb      	ldrb	r3, [r7, #15]
 800e426:	4618      	mov	r0, r3
 800e428:	f000 f8d4 	bl	800e5d4 <USBH_Get_USB_Status>
 800e42c:	4603      	mov	r3, r0
 800e42e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e430:	7bbb      	ldrb	r3, [r7, #14]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3710      	adds	r7, #16
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}

0800e43a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e43a:	b590      	push	{r4, r7, lr}
 800e43c:	b089      	sub	sp, #36	; 0x24
 800e43e:	af04      	add	r7, sp, #16
 800e440:	6078      	str	r0, [r7, #4]
 800e442:	4608      	mov	r0, r1
 800e444:	4611      	mov	r1, r2
 800e446:	461a      	mov	r2, r3
 800e448:	4603      	mov	r3, r0
 800e44a:	70fb      	strb	r3, [r7, #3]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70bb      	strb	r3, [r7, #2]
 800e450:	4613      	mov	r3, r2
 800e452:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e454:	2300      	movs	r3, #0
 800e456:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e462:	787c      	ldrb	r4, [r7, #1]
 800e464:	78ba      	ldrb	r2, [r7, #2]
 800e466:	78f9      	ldrb	r1, [r7, #3]
 800e468:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e46c:	9303      	str	r3, [sp, #12]
 800e46e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e470:	9302      	str	r3, [sp, #8]
 800e472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e474:	9301      	str	r3, [sp, #4]
 800e476:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e47a:	9300      	str	r3, [sp, #0]
 800e47c:	4623      	mov	r3, r4
 800e47e:	f7f4 fc85 	bl	8002d8c <HAL_HCD_HC_SubmitRequest>
 800e482:	4603      	mov	r3, r0
 800e484:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 f8a3 	bl	800e5d4 <USBH_Get_USB_Status>
 800e48e:	4603      	mov	r3, r0
 800e490:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e492:	7bbb      	ldrb	r3, [r7, #14]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3714      	adds	r7, #20
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd90      	pop	{r4, r7, pc}

0800e49c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4ae:	78fa      	ldrb	r2, [r7, #3]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f4 ff2e 	bl	8003314 <HAL_HCD_HC_GetURBState>
 800e4b8:	4603      	mov	r3, r0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e4c2:	b580      	push	{r7, lr}
 800e4c4:	b082      	sub	sp, #8
 800e4c6:	af00      	add	r7, sp, #0
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	460b      	mov	r3, r1
 800e4cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d103      	bne.n	800e4e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e4d8:	78fb      	ldrb	r3, [r7, #3]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 f8a6 	bl	800e62c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e4e0:	20c8      	movs	r0, #200	; 0xc8
 800e4e2:	f7f3 fcbd 	bl	8001e60 <HAL_Delay>
  return USBH_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	70fb      	strb	r3, [r7, #3]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e506:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e508:	78fa      	ldrb	r2, [r7, #3]
 800e50a:	68f9      	ldr	r1, [r7, #12]
 800e50c:	4613      	mov	r3, r2
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	4413      	add	r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	440b      	add	r3, r1
 800e516:	333b      	adds	r3, #59	; 0x3b
 800e518:	781b      	ldrb	r3, [r3, #0]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d00a      	beq.n	800e534 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e51e:	78fa      	ldrb	r2, [r7, #3]
 800e520:	68f9      	ldr	r1, [r7, #12]
 800e522:	4613      	mov	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	00db      	lsls	r3, r3, #3
 800e52a:	440b      	add	r3, r1
 800e52c:	3350      	adds	r3, #80	; 0x50
 800e52e:	78ba      	ldrb	r2, [r7, #2]
 800e530:	701a      	strb	r2, [r3, #0]
 800e532:	e009      	b.n	800e548 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e534:	78fa      	ldrb	r2, [r7, #3]
 800e536:	68f9      	ldr	r1, [r7, #12]
 800e538:	4613      	mov	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	4413      	add	r3, r2
 800e53e:	00db      	lsls	r3, r3, #3
 800e540:	440b      	add	r3, r1
 800e542:	3351      	adds	r3, #81	; 0x51
 800e544:	78ba      	ldrb	r2, [r7, #2]
 800e546:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e548:	2300      	movs	r3, #0
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e556:	b480      	push	{r7}
 800e558:	b085      	sub	sp, #20
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	6078      	str	r0, [r7, #4]
 800e55e:	460b      	mov	r3, r1
 800e560:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e562:	2300      	movs	r3, #0
 800e564:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e56c:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e56e:	78fa      	ldrb	r2, [r7, #3]
 800e570:	68b9      	ldr	r1, [r7, #8]
 800e572:	4613      	mov	r3, r2
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	00db      	lsls	r3, r3, #3
 800e57a:	440b      	add	r3, r1
 800e57c:	333b      	adds	r3, #59	; 0x3b
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00a      	beq.n	800e59a <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e584:	78fa      	ldrb	r2, [r7, #3]
 800e586:	68b9      	ldr	r1, [r7, #8]
 800e588:	4613      	mov	r3, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	4413      	add	r3, r2
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	440b      	add	r3, r1
 800e592:	3350      	adds	r3, #80	; 0x50
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	73fb      	strb	r3, [r7, #15]
 800e598:	e009      	b.n	800e5ae <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e59a:	78fa      	ldrb	r2, [r7, #3]
 800e59c:	68b9      	ldr	r1, [r7, #8]
 800e59e:	4613      	mov	r3, r2
 800e5a0:	009b      	lsls	r3, r3, #2
 800e5a2:	4413      	add	r3, r2
 800e5a4:	00db      	lsls	r3, r3, #3
 800e5a6:	440b      	add	r3, r1
 800e5a8:	3351      	adds	r3, #81	; 0x51
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	3714      	adds	r7, #20
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ba:	4770      	bx	lr

0800e5bc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	b082      	sub	sp, #8
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7f3 fc4b 	bl	8001e60 <HAL_Delay>
}
 800e5ca:	bf00      	nop
 800e5cc:	3708      	adds	r7, #8
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
	...

0800e5d4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b085      	sub	sp, #20
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	4603      	mov	r3, r0
 800e5dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	2b03      	cmp	r3, #3
 800e5e6:	d817      	bhi.n	800e618 <USBH_Get_USB_Status+0x44>
 800e5e8:	a201      	add	r2, pc, #4	; (adr r2, 800e5f0 <USBH_Get_USB_Status+0x1c>)
 800e5ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5ee:	bf00      	nop
 800e5f0:	0800e601 	.word	0x0800e601
 800e5f4:	0800e607 	.word	0x0800e607
 800e5f8:	0800e60d 	.word	0x0800e60d
 800e5fc:	0800e613 	.word	0x0800e613
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e600:	2300      	movs	r3, #0
 800e602:	73fb      	strb	r3, [r7, #15]
    break;
 800e604:	e00b      	b.n	800e61e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e606:	2302      	movs	r3, #2
 800e608:	73fb      	strb	r3, [r7, #15]
    break;
 800e60a:	e008      	b.n	800e61e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e60c:	2301      	movs	r3, #1
 800e60e:	73fb      	strb	r3, [r7, #15]
    break;
 800e610:	e005      	b.n	800e61e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e612:	2302      	movs	r3, #2
 800e614:	73fb      	strb	r3, [r7, #15]
    break;
 800e616:	e002      	b.n	800e61e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e618:	2302      	movs	r3, #2
 800e61a:	73fb      	strb	r3, [r7, #15]
    break;
 800e61c:	bf00      	nop
  }
  return usb_status;
 800e61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr

0800e62c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	4603      	mov	r3, r0
 800e634:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800e636:	79fb      	ldrb	r3, [r7, #7]
 800e638:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d102      	bne.n	800e646 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800e640:	2301      	movs	r3, #1
 800e642:	73fb      	strb	r3, [r7, #15]
 800e644:	e001      	b.n	800e64a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e646:	2300      	movs	r3, #0
 800e648:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e64a:	7bfb      	ldrb	r3, [r7, #15]
 800e64c:	461a      	mov	r2, r3
 800e64e:	2101      	movs	r1, #1
 800e650:	4803      	ldr	r0, [pc, #12]	; (800e660 <MX_DriverVbusFS+0x34>)
 800e652:	f7f4 fa41 	bl	8002ad8 <HAL_GPIO_WritePin>
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	40020800 	.word	0x40020800

0800e664 <__errno>:
 800e664:	4b01      	ldr	r3, [pc, #4]	; (800e66c <__errno+0x8>)
 800e666:	6818      	ldr	r0, [r3, #0]
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop
 800e66c:	2000002c 	.word	0x2000002c

0800e670 <__libc_init_array>:
 800e670:	b570      	push	{r4, r5, r6, lr}
 800e672:	4e0d      	ldr	r6, [pc, #52]	; (800e6a8 <__libc_init_array+0x38>)
 800e674:	4c0d      	ldr	r4, [pc, #52]	; (800e6ac <__libc_init_array+0x3c>)
 800e676:	1ba4      	subs	r4, r4, r6
 800e678:	10a4      	asrs	r4, r4, #2
 800e67a:	2500      	movs	r5, #0
 800e67c:	42a5      	cmp	r5, r4
 800e67e:	d109      	bne.n	800e694 <__libc_init_array+0x24>
 800e680:	4e0b      	ldr	r6, [pc, #44]	; (800e6b0 <__libc_init_array+0x40>)
 800e682:	4c0c      	ldr	r4, [pc, #48]	; (800e6b4 <__libc_init_array+0x44>)
 800e684:	f000 fc38 	bl	800eef8 <_init>
 800e688:	1ba4      	subs	r4, r4, r6
 800e68a:	10a4      	asrs	r4, r4, #2
 800e68c:	2500      	movs	r5, #0
 800e68e:	42a5      	cmp	r5, r4
 800e690:	d105      	bne.n	800e69e <__libc_init_array+0x2e>
 800e692:	bd70      	pop	{r4, r5, r6, pc}
 800e694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e698:	4798      	blx	r3
 800e69a:	3501      	adds	r5, #1
 800e69c:	e7ee      	b.n	800e67c <__libc_init_array+0xc>
 800e69e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e6a2:	4798      	blx	r3
 800e6a4:	3501      	adds	r5, #1
 800e6a6:	e7f2      	b.n	800e68e <__libc_init_array+0x1e>
 800e6a8:	0800f0e4 	.word	0x0800f0e4
 800e6ac:	0800f0e4 	.word	0x0800f0e4
 800e6b0:	0800f0e4 	.word	0x0800f0e4
 800e6b4:	0800f0e8 	.word	0x0800f0e8

0800e6b8 <malloc>:
 800e6b8:	4b02      	ldr	r3, [pc, #8]	; (800e6c4 <malloc+0xc>)
 800e6ba:	4601      	mov	r1, r0
 800e6bc:	6818      	ldr	r0, [r3, #0]
 800e6be:	f000 b86d 	b.w	800e79c <_malloc_r>
 800e6c2:	bf00      	nop
 800e6c4:	2000002c 	.word	0x2000002c

0800e6c8 <free>:
 800e6c8:	4b02      	ldr	r3, [pc, #8]	; (800e6d4 <free+0xc>)
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	6818      	ldr	r0, [r3, #0]
 800e6ce:	f000 b817 	b.w	800e700 <_free_r>
 800e6d2:	bf00      	nop
 800e6d4:	2000002c 	.word	0x2000002c

0800e6d8 <memcpy>:
 800e6d8:	b510      	push	{r4, lr}
 800e6da:	1e43      	subs	r3, r0, #1
 800e6dc:	440a      	add	r2, r1
 800e6de:	4291      	cmp	r1, r2
 800e6e0:	d100      	bne.n	800e6e4 <memcpy+0xc>
 800e6e2:	bd10      	pop	{r4, pc}
 800e6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6ec:	e7f7      	b.n	800e6de <memcpy+0x6>

0800e6ee <memset>:
 800e6ee:	4402      	add	r2, r0
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d100      	bne.n	800e6f8 <memset+0xa>
 800e6f6:	4770      	bx	lr
 800e6f8:	f803 1b01 	strb.w	r1, [r3], #1
 800e6fc:	e7f9      	b.n	800e6f2 <memset+0x4>
	...

0800e700 <_free_r>:
 800e700:	b538      	push	{r3, r4, r5, lr}
 800e702:	4605      	mov	r5, r0
 800e704:	2900      	cmp	r1, #0
 800e706:	d045      	beq.n	800e794 <_free_r+0x94>
 800e708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e70c:	1f0c      	subs	r4, r1, #4
 800e70e:	2b00      	cmp	r3, #0
 800e710:	bfb8      	it	lt
 800e712:	18e4      	addlt	r4, r4, r3
 800e714:	f000 f8cc 	bl	800e8b0 <__malloc_lock>
 800e718:	4a1f      	ldr	r2, [pc, #124]	; (800e798 <_free_r+0x98>)
 800e71a:	6813      	ldr	r3, [r2, #0]
 800e71c:	4610      	mov	r0, r2
 800e71e:	b933      	cbnz	r3, 800e72e <_free_r+0x2e>
 800e720:	6063      	str	r3, [r4, #4]
 800e722:	6014      	str	r4, [r2, #0]
 800e724:	4628      	mov	r0, r5
 800e726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e72a:	f000 b8c2 	b.w	800e8b2 <__malloc_unlock>
 800e72e:	42a3      	cmp	r3, r4
 800e730:	d90c      	bls.n	800e74c <_free_r+0x4c>
 800e732:	6821      	ldr	r1, [r4, #0]
 800e734:	1862      	adds	r2, r4, r1
 800e736:	4293      	cmp	r3, r2
 800e738:	bf04      	itt	eq
 800e73a:	681a      	ldreq	r2, [r3, #0]
 800e73c:	685b      	ldreq	r3, [r3, #4]
 800e73e:	6063      	str	r3, [r4, #4]
 800e740:	bf04      	itt	eq
 800e742:	1852      	addeq	r2, r2, r1
 800e744:	6022      	streq	r2, [r4, #0]
 800e746:	6004      	str	r4, [r0, #0]
 800e748:	e7ec      	b.n	800e724 <_free_r+0x24>
 800e74a:	4613      	mov	r3, r2
 800e74c:	685a      	ldr	r2, [r3, #4]
 800e74e:	b10a      	cbz	r2, 800e754 <_free_r+0x54>
 800e750:	42a2      	cmp	r2, r4
 800e752:	d9fa      	bls.n	800e74a <_free_r+0x4a>
 800e754:	6819      	ldr	r1, [r3, #0]
 800e756:	1858      	adds	r0, r3, r1
 800e758:	42a0      	cmp	r0, r4
 800e75a:	d10b      	bne.n	800e774 <_free_r+0x74>
 800e75c:	6820      	ldr	r0, [r4, #0]
 800e75e:	4401      	add	r1, r0
 800e760:	1858      	adds	r0, r3, r1
 800e762:	4282      	cmp	r2, r0
 800e764:	6019      	str	r1, [r3, #0]
 800e766:	d1dd      	bne.n	800e724 <_free_r+0x24>
 800e768:	6810      	ldr	r0, [r2, #0]
 800e76a:	6852      	ldr	r2, [r2, #4]
 800e76c:	605a      	str	r2, [r3, #4]
 800e76e:	4401      	add	r1, r0
 800e770:	6019      	str	r1, [r3, #0]
 800e772:	e7d7      	b.n	800e724 <_free_r+0x24>
 800e774:	d902      	bls.n	800e77c <_free_r+0x7c>
 800e776:	230c      	movs	r3, #12
 800e778:	602b      	str	r3, [r5, #0]
 800e77a:	e7d3      	b.n	800e724 <_free_r+0x24>
 800e77c:	6820      	ldr	r0, [r4, #0]
 800e77e:	1821      	adds	r1, r4, r0
 800e780:	428a      	cmp	r2, r1
 800e782:	bf04      	itt	eq
 800e784:	6811      	ldreq	r1, [r2, #0]
 800e786:	6852      	ldreq	r2, [r2, #4]
 800e788:	6062      	str	r2, [r4, #4]
 800e78a:	bf04      	itt	eq
 800e78c:	1809      	addeq	r1, r1, r0
 800e78e:	6021      	streq	r1, [r4, #0]
 800e790:	605c      	str	r4, [r3, #4]
 800e792:	e7c7      	b.n	800e724 <_free_r+0x24>
 800e794:	bd38      	pop	{r3, r4, r5, pc}
 800e796:	bf00      	nop
 800e798:	20001394 	.word	0x20001394

0800e79c <_malloc_r>:
 800e79c:	b570      	push	{r4, r5, r6, lr}
 800e79e:	1ccd      	adds	r5, r1, #3
 800e7a0:	f025 0503 	bic.w	r5, r5, #3
 800e7a4:	3508      	adds	r5, #8
 800e7a6:	2d0c      	cmp	r5, #12
 800e7a8:	bf38      	it	cc
 800e7aa:	250c      	movcc	r5, #12
 800e7ac:	2d00      	cmp	r5, #0
 800e7ae:	4606      	mov	r6, r0
 800e7b0:	db01      	blt.n	800e7b6 <_malloc_r+0x1a>
 800e7b2:	42a9      	cmp	r1, r5
 800e7b4:	d903      	bls.n	800e7be <_malloc_r+0x22>
 800e7b6:	230c      	movs	r3, #12
 800e7b8:	6033      	str	r3, [r6, #0]
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	bd70      	pop	{r4, r5, r6, pc}
 800e7be:	f000 f877 	bl	800e8b0 <__malloc_lock>
 800e7c2:	4a21      	ldr	r2, [pc, #132]	; (800e848 <_malloc_r+0xac>)
 800e7c4:	6814      	ldr	r4, [r2, #0]
 800e7c6:	4621      	mov	r1, r4
 800e7c8:	b991      	cbnz	r1, 800e7f0 <_malloc_r+0x54>
 800e7ca:	4c20      	ldr	r4, [pc, #128]	; (800e84c <_malloc_r+0xb0>)
 800e7cc:	6823      	ldr	r3, [r4, #0]
 800e7ce:	b91b      	cbnz	r3, 800e7d8 <_malloc_r+0x3c>
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f000 f83d 	bl	800e850 <_sbrk_r>
 800e7d6:	6020      	str	r0, [r4, #0]
 800e7d8:	4629      	mov	r1, r5
 800e7da:	4630      	mov	r0, r6
 800e7dc:	f000 f838 	bl	800e850 <_sbrk_r>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d124      	bne.n	800e82e <_malloc_r+0x92>
 800e7e4:	230c      	movs	r3, #12
 800e7e6:	6033      	str	r3, [r6, #0]
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f000 f862 	bl	800e8b2 <__malloc_unlock>
 800e7ee:	e7e4      	b.n	800e7ba <_malloc_r+0x1e>
 800e7f0:	680b      	ldr	r3, [r1, #0]
 800e7f2:	1b5b      	subs	r3, r3, r5
 800e7f4:	d418      	bmi.n	800e828 <_malloc_r+0x8c>
 800e7f6:	2b0b      	cmp	r3, #11
 800e7f8:	d90f      	bls.n	800e81a <_malloc_r+0x7e>
 800e7fa:	600b      	str	r3, [r1, #0]
 800e7fc:	50cd      	str	r5, [r1, r3]
 800e7fe:	18cc      	adds	r4, r1, r3
 800e800:	4630      	mov	r0, r6
 800e802:	f000 f856 	bl	800e8b2 <__malloc_unlock>
 800e806:	f104 000b 	add.w	r0, r4, #11
 800e80a:	1d23      	adds	r3, r4, #4
 800e80c:	f020 0007 	bic.w	r0, r0, #7
 800e810:	1ac3      	subs	r3, r0, r3
 800e812:	d0d3      	beq.n	800e7bc <_malloc_r+0x20>
 800e814:	425a      	negs	r2, r3
 800e816:	50e2      	str	r2, [r4, r3]
 800e818:	e7d0      	b.n	800e7bc <_malloc_r+0x20>
 800e81a:	428c      	cmp	r4, r1
 800e81c:	684b      	ldr	r3, [r1, #4]
 800e81e:	bf16      	itet	ne
 800e820:	6063      	strne	r3, [r4, #4]
 800e822:	6013      	streq	r3, [r2, #0]
 800e824:	460c      	movne	r4, r1
 800e826:	e7eb      	b.n	800e800 <_malloc_r+0x64>
 800e828:	460c      	mov	r4, r1
 800e82a:	6849      	ldr	r1, [r1, #4]
 800e82c:	e7cc      	b.n	800e7c8 <_malloc_r+0x2c>
 800e82e:	1cc4      	adds	r4, r0, #3
 800e830:	f024 0403 	bic.w	r4, r4, #3
 800e834:	42a0      	cmp	r0, r4
 800e836:	d005      	beq.n	800e844 <_malloc_r+0xa8>
 800e838:	1a21      	subs	r1, r4, r0
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 f808 	bl	800e850 <_sbrk_r>
 800e840:	3001      	adds	r0, #1
 800e842:	d0cf      	beq.n	800e7e4 <_malloc_r+0x48>
 800e844:	6025      	str	r5, [r4, #0]
 800e846:	e7db      	b.n	800e800 <_malloc_r+0x64>
 800e848:	20001394 	.word	0x20001394
 800e84c:	20001398 	.word	0x20001398

0800e850 <_sbrk_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4c06      	ldr	r4, [pc, #24]	; (800e86c <_sbrk_r+0x1c>)
 800e854:	2300      	movs	r3, #0
 800e856:	4605      	mov	r5, r0
 800e858:	4608      	mov	r0, r1
 800e85a:	6023      	str	r3, [r4, #0]
 800e85c:	f7f3 f92a 	bl	8001ab4 <_sbrk>
 800e860:	1c43      	adds	r3, r0, #1
 800e862:	d102      	bne.n	800e86a <_sbrk_r+0x1a>
 800e864:	6823      	ldr	r3, [r4, #0]
 800e866:	b103      	cbz	r3, 800e86a <_sbrk_r+0x1a>
 800e868:	602b      	str	r3, [r5, #0]
 800e86a:	bd38      	pop	{r3, r4, r5, pc}
 800e86c:	200020b4 	.word	0x200020b4

0800e870 <_vsiprintf_r>:
 800e870:	b500      	push	{lr}
 800e872:	b09b      	sub	sp, #108	; 0x6c
 800e874:	9100      	str	r1, [sp, #0]
 800e876:	9104      	str	r1, [sp, #16]
 800e878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e87c:	9105      	str	r1, [sp, #20]
 800e87e:	9102      	str	r1, [sp, #8]
 800e880:	4905      	ldr	r1, [pc, #20]	; (800e898 <_vsiprintf_r+0x28>)
 800e882:	9103      	str	r1, [sp, #12]
 800e884:	4669      	mov	r1, sp
 800e886:	f000 f86f 	bl	800e968 <_svfiprintf_r>
 800e88a:	9b00      	ldr	r3, [sp, #0]
 800e88c:	2200      	movs	r2, #0
 800e88e:	701a      	strb	r2, [r3, #0]
 800e890:	b01b      	add	sp, #108	; 0x6c
 800e892:	f85d fb04 	ldr.w	pc, [sp], #4
 800e896:	bf00      	nop
 800e898:	ffff0208 	.word	0xffff0208

0800e89c <vsiprintf>:
 800e89c:	4613      	mov	r3, r2
 800e89e:	460a      	mov	r2, r1
 800e8a0:	4601      	mov	r1, r0
 800e8a2:	4802      	ldr	r0, [pc, #8]	; (800e8ac <vsiprintf+0x10>)
 800e8a4:	6800      	ldr	r0, [r0, #0]
 800e8a6:	f7ff bfe3 	b.w	800e870 <_vsiprintf_r>
 800e8aa:	bf00      	nop
 800e8ac:	2000002c 	.word	0x2000002c

0800e8b0 <__malloc_lock>:
 800e8b0:	4770      	bx	lr

0800e8b2 <__malloc_unlock>:
 800e8b2:	4770      	bx	lr

0800e8b4 <__ssputs_r>:
 800e8b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b8:	688e      	ldr	r6, [r1, #8]
 800e8ba:	429e      	cmp	r6, r3
 800e8bc:	4682      	mov	sl, r0
 800e8be:	460c      	mov	r4, r1
 800e8c0:	4690      	mov	r8, r2
 800e8c2:	4699      	mov	r9, r3
 800e8c4:	d837      	bhi.n	800e936 <__ssputs_r+0x82>
 800e8c6:	898a      	ldrh	r2, [r1, #12]
 800e8c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8cc:	d031      	beq.n	800e932 <__ssputs_r+0x7e>
 800e8ce:	6825      	ldr	r5, [r4, #0]
 800e8d0:	6909      	ldr	r1, [r1, #16]
 800e8d2:	1a6f      	subs	r7, r5, r1
 800e8d4:	6965      	ldr	r5, [r4, #20]
 800e8d6:	2302      	movs	r3, #2
 800e8d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8dc:	fb95 f5f3 	sdiv	r5, r5, r3
 800e8e0:	f109 0301 	add.w	r3, r9, #1
 800e8e4:	443b      	add	r3, r7
 800e8e6:	429d      	cmp	r5, r3
 800e8e8:	bf38      	it	cc
 800e8ea:	461d      	movcc	r5, r3
 800e8ec:	0553      	lsls	r3, r2, #21
 800e8ee:	d530      	bpl.n	800e952 <__ssputs_r+0x9e>
 800e8f0:	4629      	mov	r1, r5
 800e8f2:	f7ff ff53 	bl	800e79c <_malloc_r>
 800e8f6:	4606      	mov	r6, r0
 800e8f8:	b950      	cbnz	r0, 800e910 <__ssputs_r+0x5c>
 800e8fa:	230c      	movs	r3, #12
 800e8fc:	f8ca 3000 	str.w	r3, [sl]
 800e900:	89a3      	ldrh	r3, [r4, #12]
 800e902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e906:	81a3      	strh	r3, [r4, #12]
 800e908:	f04f 30ff 	mov.w	r0, #4294967295
 800e90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e910:	463a      	mov	r2, r7
 800e912:	6921      	ldr	r1, [r4, #16]
 800e914:	f7ff fee0 	bl	800e6d8 <memcpy>
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e922:	81a3      	strh	r3, [r4, #12]
 800e924:	6126      	str	r6, [r4, #16]
 800e926:	6165      	str	r5, [r4, #20]
 800e928:	443e      	add	r6, r7
 800e92a:	1bed      	subs	r5, r5, r7
 800e92c:	6026      	str	r6, [r4, #0]
 800e92e:	60a5      	str	r5, [r4, #8]
 800e930:	464e      	mov	r6, r9
 800e932:	454e      	cmp	r6, r9
 800e934:	d900      	bls.n	800e938 <__ssputs_r+0x84>
 800e936:	464e      	mov	r6, r9
 800e938:	4632      	mov	r2, r6
 800e93a:	4641      	mov	r1, r8
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	f000 fa93 	bl	800ee68 <memmove>
 800e942:	68a3      	ldr	r3, [r4, #8]
 800e944:	1b9b      	subs	r3, r3, r6
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	6823      	ldr	r3, [r4, #0]
 800e94a:	441e      	add	r6, r3
 800e94c:	6026      	str	r6, [r4, #0]
 800e94e:	2000      	movs	r0, #0
 800e950:	e7dc      	b.n	800e90c <__ssputs_r+0x58>
 800e952:	462a      	mov	r2, r5
 800e954:	f000 faa1 	bl	800ee9a <_realloc_r>
 800e958:	4606      	mov	r6, r0
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d1e2      	bne.n	800e924 <__ssputs_r+0x70>
 800e95e:	6921      	ldr	r1, [r4, #16]
 800e960:	4650      	mov	r0, sl
 800e962:	f7ff fecd 	bl	800e700 <_free_r>
 800e966:	e7c8      	b.n	800e8fa <__ssputs_r+0x46>

0800e968 <_svfiprintf_r>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	461d      	mov	r5, r3
 800e96e:	898b      	ldrh	r3, [r1, #12]
 800e970:	061f      	lsls	r7, r3, #24
 800e972:	b09d      	sub	sp, #116	; 0x74
 800e974:	4680      	mov	r8, r0
 800e976:	460c      	mov	r4, r1
 800e978:	4616      	mov	r6, r2
 800e97a:	d50f      	bpl.n	800e99c <_svfiprintf_r+0x34>
 800e97c:	690b      	ldr	r3, [r1, #16]
 800e97e:	b96b      	cbnz	r3, 800e99c <_svfiprintf_r+0x34>
 800e980:	2140      	movs	r1, #64	; 0x40
 800e982:	f7ff ff0b 	bl	800e79c <_malloc_r>
 800e986:	6020      	str	r0, [r4, #0]
 800e988:	6120      	str	r0, [r4, #16]
 800e98a:	b928      	cbnz	r0, 800e998 <_svfiprintf_r+0x30>
 800e98c:	230c      	movs	r3, #12
 800e98e:	f8c8 3000 	str.w	r3, [r8]
 800e992:	f04f 30ff 	mov.w	r0, #4294967295
 800e996:	e0c8      	b.n	800eb2a <_svfiprintf_r+0x1c2>
 800e998:	2340      	movs	r3, #64	; 0x40
 800e99a:	6163      	str	r3, [r4, #20]
 800e99c:	2300      	movs	r3, #0
 800e99e:	9309      	str	r3, [sp, #36]	; 0x24
 800e9a0:	2320      	movs	r3, #32
 800e9a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9a6:	2330      	movs	r3, #48	; 0x30
 800e9a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9ac:	9503      	str	r5, [sp, #12]
 800e9ae:	f04f 0b01 	mov.w	fp, #1
 800e9b2:	4637      	mov	r7, r6
 800e9b4:	463d      	mov	r5, r7
 800e9b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e9ba:	b10b      	cbz	r3, 800e9c0 <_svfiprintf_r+0x58>
 800e9bc:	2b25      	cmp	r3, #37	; 0x25
 800e9be:	d13e      	bne.n	800ea3e <_svfiprintf_r+0xd6>
 800e9c0:	ebb7 0a06 	subs.w	sl, r7, r6
 800e9c4:	d00b      	beq.n	800e9de <_svfiprintf_r+0x76>
 800e9c6:	4653      	mov	r3, sl
 800e9c8:	4632      	mov	r2, r6
 800e9ca:	4621      	mov	r1, r4
 800e9cc:	4640      	mov	r0, r8
 800e9ce:	f7ff ff71 	bl	800e8b4 <__ssputs_r>
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	f000 80a4 	beq.w	800eb20 <_svfiprintf_r+0x1b8>
 800e9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9da:	4453      	add	r3, sl
 800e9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e9de:	783b      	ldrb	r3, [r7, #0]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 809d 	beq.w	800eb20 <_svfiprintf_r+0x1b8>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	9307      	str	r3, [sp, #28]
 800e9f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9f8:	931a      	str	r3, [sp, #104]	; 0x68
 800e9fa:	462f      	mov	r7, r5
 800e9fc:	2205      	movs	r2, #5
 800e9fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ea02:	4850      	ldr	r0, [pc, #320]	; (800eb44 <_svfiprintf_r+0x1dc>)
 800ea04:	f7f1 fbf4 	bl	80001f0 <memchr>
 800ea08:	9b04      	ldr	r3, [sp, #16]
 800ea0a:	b9d0      	cbnz	r0, 800ea42 <_svfiprintf_r+0xda>
 800ea0c:	06d9      	lsls	r1, r3, #27
 800ea0e:	bf44      	itt	mi
 800ea10:	2220      	movmi	r2, #32
 800ea12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea16:	071a      	lsls	r2, r3, #28
 800ea18:	bf44      	itt	mi
 800ea1a:	222b      	movmi	r2, #43	; 0x2b
 800ea1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea20:	782a      	ldrb	r2, [r5, #0]
 800ea22:	2a2a      	cmp	r2, #42	; 0x2a
 800ea24:	d015      	beq.n	800ea52 <_svfiprintf_r+0xea>
 800ea26:	9a07      	ldr	r2, [sp, #28]
 800ea28:	462f      	mov	r7, r5
 800ea2a:	2000      	movs	r0, #0
 800ea2c:	250a      	movs	r5, #10
 800ea2e:	4639      	mov	r1, r7
 800ea30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea34:	3b30      	subs	r3, #48	; 0x30
 800ea36:	2b09      	cmp	r3, #9
 800ea38:	d94d      	bls.n	800ead6 <_svfiprintf_r+0x16e>
 800ea3a:	b1b8      	cbz	r0, 800ea6c <_svfiprintf_r+0x104>
 800ea3c:	e00f      	b.n	800ea5e <_svfiprintf_r+0xf6>
 800ea3e:	462f      	mov	r7, r5
 800ea40:	e7b8      	b.n	800e9b4 <_svfiprintf_r+0x4c>
 800ea42:	4a40      	ldr	r2, [pc, #256]	; (800eb44 <_svfiprintf_r+0x1dc>)
 800ea44:	1a80      	subs	r0, r0, r2
 800ea46:	fa0b f000 	lsl.w	r0, fp, r0
 800ea4a:	4318      	orrs	r0, r3
 800ea4c:	9004      	str	r0, [sp, #16]
 800ea4e:	463d      	mov	r5, r7
 800ea50:	e7d3      	b.n	800e9fa <_svfiprintf_r+0x92>
 800ea52:	9a03      	ldr	r2, [sp, #12]
 800ea54:	1d11      	adds	r1, r2, #4
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	9103      	str	r1, [sp, #12]
 800ea5a:	2a00      	cmp	r2, #0
 800ea5c:	db01      	blt.n	800ea62 <_svfiprintf_r+0xfa>
 800ea5e:	9207      	str	r2, [sp, #28]
 800ea60:	e004      	b.n	800ea6c <_svfiprintf_r+0x104>
 800ea62:	4252      	negs	r2, r2
 800ea64:	f043 0302 	orr.w	r3, r3, #2
 800ea68:	9207      	str	r2, [sp, #28]
 800ea6a:	9304      	str	r3, [sp, #16]
 800ea6c:	783b      	ldrb	r3, [r7, #0]
 800ea6e:	2b2e      	cmp	r3, #46	; 0x2e
 800ea70:	d10c      	bne.n	800ea8c <_svfiprintf_r+0x124>
 800ea72:	787b      	ldrb	r3, [r7, #1]
 800ea74:	2b2a      	cmp	r3, #42	; 0x2a
 800ea76:	d133      	bne.n	800eae0 <_svfiprintf_r+0x178>
 800ea78:	9b03      	ldr	r3, [sp, #12]
 800ea7a:	1d1a      	adds	r2, r3, #4
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	9203      	str	r2, [sp, #12]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	bfb8      	it	lt
 800ea84:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea88:	3702      	adds	r7, #2
 800ea8a:	9305      	str	r3, [sp, #20]
 800ea8c:	4d2e      	ldr	r5, [pc, #184]	; (800eb48 <_svfiprintf_r+0x1e0>)
 800ea8e:	7839      	ldrb	r1, [r7, #0]
 800ea90:	2203      	movs	r2, #3
 800ea92:	4628      	mov	r0, r5
 800ea94:	f7f1 fbac 	bl	80001f0 <memchr>
 800ea98:	b138      	cbz	r0, 800eaaa <_svfiprintf_r+0x142>
 800ea9a:	2340      	movs	r3, #64	; 0x40
 800ea9c:	1b40      	subs	r0, r0, r5
 800ea9e:	fa03 f000 	lsl.w	r0, r3, r0
 800eaa2:	9b04      	ldr	r3, [sp, #16]
 800eaa4:	4303      	orrs	r3, r0
 800eaa6:	3701      	adds	r7, #1
 800eaa8:	9304      	str	r3, [sp, #16]
 800eaaa:	7839      	ldrb	r1, [r7, #0]
 800eaac:	4827      	ldr	r0, [pc, #156]	; (800eb4c <_svfiprintf_r+0x1e4>)
 800eaae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eab2:	2206      	movs	r2, #6
 800eab4:	1c7e      	adds	r6, r7, #1
 800eab6:	f7f1 fb9b 	bl	80001f0 <memchr>
 800eaba:	2800      	cmp	r0, #0
 800eabc:	d038      	beq.n	800eb30 <_svfiprintf_r+0x1c8>
 800eabe:	4b24      	ldr	r3, [pc, #144]	; (800eb50 <_svfiprintf_r+0x1e8>)
 800eac0:	bb13      	cbnz	r3, 800eb08 <_svfiprintf_r+0x1a0>
 800eac2:	9b03      	ldr	r3, [sp, #12]
 800eac4:	3307      	adds	r3, #7
 800eac6:	f023 0307 	bic.w	r3, r3, #7
 800eaca:	3308      	adds	r3, #8
 800eacc:	9303      	str	r3, [sp, #12]
 800eace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead0:	444b      	add	r3, r9
 800ead2:	9309      	str	r3, [sp, #36]	; 0x24
 800ead4:	e76d      	b.n	800e9b2 <_svfiprintf_r+0x4a>
 800ead6:	fb05 3202 	mla	r2, r5, r2, r3
 800eada:	2001      	movs	r0, #1
 800eadc:	460f      	mov	r7, r1
 800eade:	e7a6      	b.n	800ea2e <_svfiprintf_r+0xc6>
 800eae0:	2300      	movs	r3, #0
 800eae2:	3701      	adds	r7, #1
 800eae4:	9305      	str	r3, [sp, #20]
 800eae6:	4619      	mov	r1, r3
 800eae8:	250a      	movs	r5, #10
 800eaea:	4638      	mov	r0, r7
 800eaec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaf0:	3a30      	subs	r2, #48	; 0x30
 800eaf2:	2a09      	cmp	r2, #9
 800eaf4:	d903      	bls.n	800eafe <_svfiprintf_r+0x196>
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d0c8      	beq.n	800ea8c <_svfiprintf_r+0x124>
 800eafa:	9105      	str	r1, [sp, #20]
 800eafc:	e7c6      	b.n	800ea8c <_svfiprintf_r+0x124>
 800eafe:	fb05 2101 	mla	r1, r5, r1, r2
 800eb02:	2301      	movs	r3, #1
 800eb04:	4607      	mov	r7, r0
 800eb06:	e7f0      	b.n	800eaea <_svfiprintf_r+0x182>
 800eb08:	ab03      	add	r3, sp, #12
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	4622      	mov	r2, r4
 800eb0e:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <_svfiprintf_r+0x1ec>)
 800eb10:	a904      	add	r1, sp, #16
 800eb12:	4640      	mov	r0, r8
 800eb14:	f3af 8000 	nop.w
 800eb18:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eb1c:	4681      	mov	r9, r0
 800eb1e:	d1d6      	bne.n	800eace <_svfiprintf_r+0x166>
 800eb20:	89a3      	ldrh	r3, [r4, #12]
 800eb22:	065b      	lsls	r3, r3, #25
 800eb24:	f53f af35 	bmi.w	800e992 <_svfiprintf_r+0x2a>
 800eb28:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb2a:	b01d      	add	sp, #116	; 0x74
 800eb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb30:	ab03      	add	r3, sp, #12
 800eb32:	9300      	str	r3, [sp, #0]
 800eb34:	4622      	mov	r2, r4
 800eb36:	4b07      	ldr	r3, [pc, #28]	; (800eb54 <_svfiprintf_r+0x1ec>)
 800eb38:	a904      	add	r1, sp, #16
 800eb3a:	4640      	mov	r0, r8
 800eb3c:	f000 f882 	bl	800ec44 <_printf_i>
 800eb40:	e7ea      	b.n	800eb18 <_svfiprintf_r+0x1b0>
 800eb42:	bf00      	nop
 800eb44:	0800f0a8 	.word	0x0800f0a8
 800eb48:	0800f0ae 	.word	0x0800f0ae
 800eb4c:	0800f0b2 	.word	0x0800f0b2
 800eb50:	00000000 	.word	0x00000000
 800eb54:	0800e8b5 	.word	0x0800e8b5

0800eb58 <_printf_common>:
 800eb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb5c:	4691      	mov	r9, r2
 800eb5e:	461f      	mov	r7, r3
 800eb60:	688a      	ldr	r2, [r1, #8]
 800eb62:	690b      	ldr	r3, [r1, #16]
 800eb64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	bfb8      	it	lt
 800eb6c:	4613      	movlt	r3, r2
 800eb6e:	f8c9 3000 	str.w	r3, [r9]
 800eb72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb76:	4606      	mov	r6, r0
 800eb78:	460c      	mov	r4, r1
 800eb7a:	b112      	cbz	r2, 800eb82 <_printf_common+0x2a>
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	f8c9 3000 	str.w	r3, [r9]
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	0699      	lsls	r1, r3, #26
 800eb86:	bf42      	ittt	mi
 800eb88:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb8c:	3302      	addmi	r3, #2
 800eb8e:	f8c9 3000 	strmi.w	r3, [r9]
 800eb92:	6825      	ldr	r5, [r4, #0]
 800eb94:	f015 0506 	ands.w	r5, r5, #6
 800eb98:	d107      	bne.n	800ebaa <_printf_common+0x52>
 800eb9a:	f104 0a19 	add.w	sl, r4, #25
 800eb9e:	68e3      	ldr	r3, [r4, #12]
 800eba0:	f8d9 2000 	ldr.w	r2, [r9]
 800eba4:	1a9b      	subs	r3, r3, r2
 800eba6:	42ab      	cmp	r3, r5
 800eba8:	dc28      	bgt.n	800ebfc <_printf_common+0xa4>
 800ebaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ebae:	6822      	ldr	r2, [r4, #0]
 800ebb0:	3300      	adds	r3, #0
 800ebb2:	bf18      	it	ne
 800ebb4:	2301      	movne	r3, #1
 800ebb6:	0692      	lsls	r2, r2, #26
 800ebb8:	d42d      	bmi.n	800ec16 <_printf_common+0xbe>
 800ebba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ebbe:	4639      	mov	r1, r7
 800ebc0:	4630      	mov	r0, r6
 800ebc2:	47c0      	blx	r8
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d020      	beq.n	800ec0a <_printf_common+0xb2>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	68e5      	ldr	r5, [r4, #12]
 800ebcc:	f8d9 2000 	ldr.w	r2, [r9]
 800ebd0:	f003 0306 	and.w	r3, r3, #6
 800ebd4:	2b04      	cmp	r3, #4
 800ebd6:	bf08      	it	eq
 800ebd8:	1aad      	subeq	r5, r5, r2
 800ebda:	68a3      	ldr	r3, [r4, #8]
 800ebdc:	6922      	ldr	r2, [r4, #16]
 800ebde:	bf0c      	ite	eq
 800ebe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebe4:	2500      	movne	r5, #0
 800ebe6:	4293      	cmp	r3, r2
 800ebe8:	bfc4      	itt	gt
 800ebea:	1a9b      	subgt	r3, r3, r2
 800ebec:	18ed      	addgt	r5, r5, r3
 800ebee:	f04f 0900 	mov.w	r9, #0
 800ebf2:	341a      	adds	r4, #26
 800ebf4:	454d      	cmp	r5, r9
 800ebf6:	d11a      	bne.n	800ec2e <_printf_common+0xd6>
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	e008      	b.n	800ec0e <_printf_common+0xb6>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	4652      	mov	r2, sl
 800ec00:	4639      	mov	r1, r7
 800ec02:	4630      	mov	r0, r6
 800ec04:	47c0      	blx	r8
 800ec06:	3001      	adds	r0, #1
 800ec08:	d103      	bne.n	800ec12 <_printf_common+0xba>
 800ec0a:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec12:	3501      	adds	r5, #1
 800ec14:	e7c3      	b.n	800eb9e <_printf_common+0x46>
 800ec16:	18e1      	adds	r1, r4, r3
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	2030      	movs	r0, #48	; 0x30
 800ec1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec20:	4422      	add	r2, r4
 800ec22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec2a:	3302      	adds	r3, #2
 800ec2c:	e7c5      	b.n	800ebba <_printf_common+0x62>
 800ec2e:	2301      	movs	r3, #1
 800ec30:	4622      	mov	r2, r4
 800ec32:	4639      	mov	r1, r7
 800ec34:	4630      	mov	r0, r6
 800ec36:	47c0      	blx	r8
 800ec38:	3001      	adds	r0, #1
 800ec3a:	d0e6      	beq.n	800ec0a <_printf_common+0xb2>
 800ec3c:	f109 0901 	add.w	r9, r9, #1
 800ec40:	e7d8      	b.n	800ebf4 <_printf_common+0x9c>
	...

0800ec44 <_printf_i>:
 800ec44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	7e09      	ldrb	r1, [r1, #24]
 800ec50:	b085      	sub	sp, #20
 800ec52:	296e      	cmp	r1, #110	; 0x6e
 800ec54:	4617      	mov	r7, r2
 800ec56:	4606      	mov	r6, r0
 800ec58:	4698      	mov	r8, r3
 800ec5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec5c:	f000 80b3 	beq.w	800edc6 <_printf_i+0x182>
 800ec60:	d822      	bhi.n	800eca8 <_printf_i+0x64>
 800ec62:	2963      	cmp	r1, #99	; 0x63
 800ec64:	d036      	beq.n	800ecd4 <_printf_i+0x90>
 800ec66:	d80a      	bhi.n	800ec7e <_printf_i+0x3a>
 800ec68:	2900      	cmp	r1, #0
 800ec6a:	f000 80b9 	beq.w	800ede0 <_printf_i+0x19c>
 800ec6e:	2958      	cmp	r1, #88	; 0x58
 800ec70:	f000 8083 	beq.w	800ed7a <_printf_i+0x136>
 800ec74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec7c:	e032      	b.n	800ece4 <_printf_i+0xa0>
 800ec7e:	2964      	cmp	r1, #100	; 0x64
 800ec80:	d001      	beq.n	800ec86 <_printf_i+0x42>
 800ec82:	2969      	cmp	r1, #105	; 0x69
 800ec84:	d1f6      	bne.n	800ec74 <_printf_i+0x30>
 800ec86:	6820      	ldr	r0, [r4, #0]
 800ec88:	6813      	ldr	r3, [r2, #0]
 800ec8a:	0605      	lsls	r5, r0, #24
 800ec8c:	f103 0104 	add.w	r1, r3, #4
 800ec90:	d52a      	bpl.n	800ece8 <_printf_i+0xa4>
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	6011      	str	r1, [r2, #0]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	da03      	bge.n	800eca2 <_printf_i+0x5e>
 800ec9a:	222d      	movs	r2, #45	; 0x2d
 800ec9c:	425b      	negs	r3, r3
 800ec9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800eca2:	486f      	ldr	r0, [pc, #444]	; (800ee60 <_printf_i+0x21c>)
 800eca4:	220a      	movs	r2, #10
 800eca6:	e039      	b.n	800ed1c <_printf_i+0xd8>
 800eca8:	2973      	cmp	r1, #115	; 0x73
 800ecaa:	f000 809d 	beq.w	800ede8 <_printf_i+0x1a4>
 800ecae:	d808      	bhi.n	800ecc2 <_printf_i+0x7e>
 800ecb0:	296f      	cmp	r1, #111	; 0x6f
 800ecb2:	d020      	beq.n	800ecf6 <_printf_i+0xb2>
 800ecb4:	2970      	cmp	r1, #112	; 0x70
 800ecb6:	d1dd      	bne.n	800ec74 <_printf_i+0x30>
 800ecb8:	6823      	ldr	r3, [r4, #0]
 800ecba:	f043 0320 	orr.w	r3, r3, #32
 800ecbe:	6023      	str	r3, [r4, #0]
 800ecc0:	e003      	b.n	800ecca <_printf_i+0x86>
 800ecc2:	2975      	cmp	r1, #117	; 0x75
 800ecc4:	d017      	beq.n	800ecf6 <_printf_i+0xb2>
 800ecc6:	2978      	cmp	r1, #120	; 0x78
 800ecc8:	d1d4      	bne.n	800ec74 <_printf_i+0x30>
 800ecca:	2378      	movs	r3, #120	; 0x78
 800eccc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ecd0:	4864      	ldr	r0, [pc, #400]	; (800ee64 <_printf_i+0x220>)
 800ecd2:	e055      	b.n	800ed80 <_printf_i+0x13c>
 800ecd4:	6813      	ldr	r3, [r2, #0]
 800ecd6:	1d19      	adds	r1, r3, #4
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6011      	str	r1, [r2, #0]
 800ecdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ece0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ece4:	2301      	movs	r3, #1
 800ece6:	e08c      	b.n	800ee02 <_printf_i+0x1be>
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	6011      	str	r1, [r2, #0]
 800ecec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ecf0:	bf18      	it	ne
 800ecf2:	b21b      	sxthne	r3, r3
 800ecf4:	e7cf      	b.n	800ec96 <_printf_i+0x52>
 800ecf6:	6813      	ldr	r3, [r2, #0]
 800ecf8:	6825      	ldr	r5, [r4, #0]
 800ecfa:	1d18      	adds	r0, r3, #4
 800ecfc:	6010      	str	r0, [r2, #0]
 800ecfe:	0628      	lsls	r0, r5, #24
 800ed00:	d501      	bpl.n	800ed06 <_printf_i+0xc2>
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	e002      	b.n	800ed0c <_printf_i+0xc8>
 800ed06:	0668      	lsls	r0, r5, #25
 800ed08:	d5fb      	bpl.n	800ed02 <_printf_i+0xbe>
 800ed0a:	881b      	ldrh	r3, [r3, #0]
 800ed0c:	4854      	ldr	r0, [pc, #336]	; (800ee60 <_printf_i+0x21c>)
 800ed0e:	296f      	cmp	r1, #111	; 0x6f
 800ed10:	bf14      	ite	ne
 800ed12:	220a      	movne	r2, #10
 800ed14:	2208      	moveq	r2, #8
 800ed16:	2100      	movs	r1, #0
 800ed18:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ed1c:	6865      	ldr	r5, [r4, #4]
 800ed1e:	60a5      	str	r5, [r4, #8]
 800ed20:	2d00      	cmp	r5, #0
 800ed22:	f2c0 8095 	blt.w	800ee50 <_printf_i+0x20c>
 800ed26:	6821      	ldr	r1, [r4, #0]
 800ed28:	f021 0104 	bic.w	r1, r1, #4
 800ed2c:	6021      	str	r1, [r4, #0]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d13d      	bne.n	800edae <_printf_i+0x16a>
 800ed32:	2d00      	cmp	r5, #0
 800ed34:	f040 808e 	bne.w	800ee54 <_printf_i+0x210>
 800ed38:	4665      	mov	r5, ip
 800ed3a:	2a08      	cmp	r2, #8
 800ed3c:	d10b      	bne.n	800ed56 <_printf_i+0x112>
 800ed3e:	6823      	ldr	r3, [r4, #0]
 800ed40:	07db      	lsls	r3, r3, #31
 800ed42:	d508      	bpl.n	800ed56 <_printf_i+0x112>
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	6862      	ldr	r2, [r4, #4]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	bfde      	ittt	le
 800ed4c:	2330      	movle	r3, #48	; 0x30
 800ed4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed52:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed56:	ebac 0305 	sub.w	r3, ip, r5
 800ed5a:	6123      	str	r3, [r4, #16]
 800ed5c:	f8cd 8000 	str.w	r8, [sp]
 800ed60:	463b      	mov	r3, r7
 800ed62:	aa03      	add	r2, sp, #12
 800ed64:	4621      	mov	r1, r4
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7ff fef6 	bl	800eb58 <_printf_common>
 800ed6c:	3001      	adds	r0, #1
 800ed6e:	d14d      	bne.n	800ee0c <_printf_i+0x1c8>
 800ed70:	f04f 30ff 	mov.w	r0, #4294967295
 800ed74:	b005      	add	sp, #20
 800ed76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	4839      	ldr	r0, [pc, #228]	; (800ee60 <_printf_i+0x21c>)
 800ed7c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed80:	6813      	ldr	r3, [r2, #0]
 800ed82:	6821      	ldr	r1, [r4, #0]
 800ed84:	1d1d      	adds	r5, r3, #4
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6015      	str	r5, [r2, #0]
 800ed8a:	060a      	lsls	r2, r1, #24
 800ed8c:	d50b      	bpl.n	800eda6 <_printf_i+0x162>
 800ed8e:	07ca      	lsls	r2, r1, #31
 800ed90:	bf44      	itt	mi
 800ed92:	f041 0120 	orrmi.w	r1, r1, #32
 800ed96:	6021      	strmi	r1, [r4, #0]
 800ed98:	b91b      	cbnz	r3, 800eda2 <_printf_i+0x15e>
 800ed9a:	6822      	ldr	r2, [r4, #0]
 800ed9c:	f022 0220 	bic.w	r2, r2, #32
 800eda0:	6022      	str	r2, [r4, #0]
 800eda2:	2210      	movs	r2, #16
 800eda4:	e7b7      	b.n	800ed16 <_printf_i+0xd2>
 800eda6:	064d      	lsls	r5, r1, #25
 800eda8:	bf48      	it	mi
 800edaa:	b29b      	uxthmi	r3, r3
 800edac:	e7ef      	b.n	800ed8e <_printf_i+0x14a>
 800edae:	4665      	mov	r5, ip
 800edb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800edb4:	fb02 3311 	mls	r3, r2, r1, r3
 800edb8:	5cc3      	ldrb	r3, [r0, r3]
 800edba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800edbe:	460b      	mov	r3, r1
 800edc0:	2900      	cmp	r1, #0
 800edc2:	d1f5      	bne.n	800edb0 <_printf_i+0x16c>
 800edc4:	e7b9      	b.n	800ed3a <_printf_i+0xf6>
 800edc6:	6813      	ldr	r3, [r2, #0]
 800edc8:	6825      	ldr	r5, [r4, #0]
 800edca:	6961      	ldr	r1, [r4, #20]
 800edcc:	1d18      	adds	r0, r3, #4
 800edce:	6010      	str	r0, [r2, #0]
 800edd0:	0628      	lsls	r0, r5, #24
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	d501      	bpl.n	800edda <_printf_i+0x196>
 800edd6:	6019      	str	r1, [r3, #0]
 800edd8:	e002      	b.n	800ede0 <_printf_i+0x19c>
 800edda:	066a      	lsls	r2, r5, #25
 800eddc:	d5fb      	bpl.n	800edd6 <_printf_i+0x192>
 800edde:	8019      	strh	r1, [r3, #0]
 800ede0:	2300      	movs	r3, #0
 800ede2:	6123      	str	r3, [r4, #16]
 800ede4:	4665      	mov	r5, ip
 800ede6:	e7b9      	b.n	800ed5c <_printf_i+0x118>
 800ede8:	6813      	ldr	r3, [r2, #0]
 800edea:	1d19      	adds	r1, r3, #4
 800edec:	6011      	str	r1, [r2, #0]
 800edee:	681d      	ldr	r5, [r3, #0]
 800edf0:	6862      	ldr	r2, [r4, #4]
 800edf2:	2100      	movs	r1, #0
 800edf4:	4628      	mov	r0, r5
 800edf6:	f7f1 f9fb 	bl	80001f0 <memchr>
 800edfa:	b108      	cbz	r0, 800ee00 <_printf_i+0x1bc>
 800edfc:	1b40      	subs	r0, r0, r5
 800edfe:	6060      	str	r0, [r4, #4]
 800ee00:	6863      	ldr	r3, [r4, #4]
 800ee02:	6123      	str	r3, [r4, #16]
 800ee04:	2300      	movs	r3, #0
 800ee06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee0a:	e7a7      	b.n	800ed5c <_printf_i+0x118>
 800ee0c:	6923      	ldr	r3, [r4, #16]
 800ee0e:	462a      	mov	r2, r5
 800ee10:	4639      	mov	r1, r7
 800ee12:	4630      	mov	r0, r6
 800ee14:	47c0      	blx	r8
 800ee16:	3001      	adds	r0, #1
 800ee18:	d0aa      	beq.n	800ed70 <_printf_i+0x12c>
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	079b      	lsls	r3, r3, #30
 800ee1e:	d413      	bmi.n	800ee48 <_printf_i+0x204>
 800ee20:	68e0      	ldr	r0, [r4, #12]
 800ee22:	9b03      	ldr	r3, [sp, #12]
 800ee24:	4298      	cmp	r0, r3
 800ee26:	bfb8      	it	lt
 800ee28:	4618      	movlt	r0, r3
 800ee2a:	e7a3      	b.n	800ed74 <_printf_i+0x130>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	464a      	mov	r2, r9
 800ee30:	4639      	mov	r1, r7
 800ee32:	4630      	mov	r0, r6
 800ee34:	47c0      	blx	r8
 800ee36:	3001      	adds	r0, #1
 800ee38:	d09a      	beq.n	800ed70 <_printf_i+0x12c>
 800ee3a:	3501      	adds	r5, #1
 800ee3c:	68e3      	ldr	r3, [r4, #12]
 800ee3e:	9a03      	ldr	r2, [sp, #12]
 800ee40:	1a9b      	subs	r3, r3, r2
 800ee42:	42ab      	cmp	r3, r5
 800ee44:	dcf2      	bgt.n	800ee2c <_printf_i+0x1e8>
 800ee46:	e7eb      	b.n	800ee20 <_printf_i+0x1dc>
 800ee48:	2500      	movs	r5, #0
 800ee4a:	f104 0919 	add.w	r9, r4, #25
 800ee4e:	e7f5      	b.n	800ee3c <_printf_i+0x1f8>
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d1ac      	bne.n	800edae <_printf_i+0x16a>
 800ee54:	7803      	ldrb	r3, [r0, #0]
 800ee56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee5e:	e76c      	b.n	800ed3a <_printf_i+0xf6>
 800ee60:	0800f0b9 	.word	0x0800f0b9
 800ee64:	0800f0ca 	.word	0x0800f0ca

0800ee68 <memmove>:
 800ee68:	4288      	cmp	r0, r1
 800ee6a:	b510      	push	{r4, lr}
 800ee6c:	eb01 0302 	add.w	r3, r1, r2
 800ee70:	d807      	bhi.n	800ee82 <memmove+0x1a>
 800ee72:	1e42      	subs	r2, r0, #1
 800ee74:	4299      	cmp	r1, r3
 800ee76:	d00a      	beq.n	800ee8e <memmove+0x26>
 800ee78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ee80:	e7f8      	b.n	800ee74 <memmove+0xc>
 800ee82:	4283      	cmp	r3, r0
 800ee84:	d9f5      	bls.n	800ee72 <memmove+0xa>
 800ee86:	1881      	adds	r1, r0, r2
 800ee88:	1ad2      	subs	r2, r2, r3
 800ee8a:	42d3      	cmn	r3, r2
 800ee8c:	d100      	bne.n	800ee90 <memmove+0x28>
 800ee8e:	bd10      	pop	{r4, pc}
 800ee90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ee94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ee98:	e7f7      	b.n	800ee8a <memmove+0x22>

0800ee9a <_realloc_r>:
 800ee9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee9c:	4607      	mov	r7, r0
 800ee9e:	4614      	mov	r4, r2
 800eea0:	460e      	mov	r6, r1
 800eea2:	b921      	cbnz	r1, 800eeae <_realloc_r+0x14>
 800eea4:	4611      	mov	r1, r2
 800eea6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800eeaa:	f7ff bc77 	b.w	800e79c <_malloc_r>
 800eeae:	b922      	cbnz	r2, 800eeba <_realloc_r+0x20>
 800eeb0:	f7ff fc26 	bl	800e700 <_free_r>
 800eeb4:	4625      	mov	r5, r4
 800eeb6:	4628      	mov	r0, r5
 800eeb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eeba:	f000 f814 	bl	800eee6 <_malloc_usable_size_r>
 800eebe:	42a0      	cmp	r0, r4
 800eec0:	d20f      	bcs.n	800eee2 <_realloc_r+0x48>
 800eec2:	4621      	mov	r1, r4
 800eec4:	4638      	mov	r0, r7
 800eec6:	f7ff fc69 	bl	800e79c <_malloc_r>
 800eeca:	4605      	mov	r5, r0
 800eecc:	2800      	cmp	r0, #0
 800eece:	d0f2      	beq.n	800eeb6 <_realloc_r+0x1c>
 800eed0:	4631      	mov	r1, r6
 800eed2:	4622      	mov	r2, r4
 800eed4:	f7ff fc00 	bl	800e6d8 <memcpy>
 800eed8:	4631      	mov	r1, r6
 800eeda:	4638      	mov	r0, r7
 800eedc:	f7ff fc10 	bl	800e700 <_free_r>
 800eee0:	e7e9      	b.n	800eeb6 <_realloc_r+0x1c>
 800eee2:	4635      	mov	r5, r6
 800eee4:	e7e7      	b.n	800eeb6 <_realloc_r+0x1c>

0800eee6 <_malloc_usable_size_r>:
 800eee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeea:	1f18      	subs	r0, r3, #4
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	bfbc      	itt	lt
 800eef0:	580b      	ldrlt	r3, [r1, r0]
 800eef2:	18c0      	addlt	r0, r0, r3
 800eef4:	4770      	bx	lr
	...

0800eef8 <_init>:
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	bf00      	nop
 800eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefe:	bc08      	pop	{r3}
 800ef00:	469e      	mov	lr, r3
 800ef02:	4770      	bx	lr

0800ef04 <_fini>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	bf00      	nop
 800ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0a:	bc08      	pop	{r3}
 800ef0c:	469e      	mov	lr, r3
 800ef0e:	4770      	bx	lr
