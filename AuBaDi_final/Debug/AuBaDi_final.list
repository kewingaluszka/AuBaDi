
AuBaDi_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fbd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  0800fd70  0800fd70  0001fd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ffa4  0800ffa4  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ffa4  0800ffa4  0001ffa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffac  0800ffac  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffac  0800ffac  0001ffac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffb0  0800ffb0  0001ffb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800ffb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000209c  200000a4  08010058  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  20002140  08010058  00022140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cc51  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000057c0  00000000  00000000  0004cd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a98  00000000  00000000  000524e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001860  00000000  00000000  00053f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d7dc  00000000  00000000  000557e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c1c5  00000000  00000000  00072fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009649f  00000000  00000000  0008f181  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125620  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070b8  00000000  00000000  0012569c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd58 	.word	0x0800fd58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800fd58 	.word	0x0800fd58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <write_register+0x30>)
 80005b4:	f004 fd98 	bl	80050e8 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000c0 	.word	0x200000c0

080005c4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	2194      	movs	r1, #148	; 0x94
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <read_register+0x3c>)
 80005e2:	f004 fd81 	bl	80050e8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	2194      	movs	r1, #148	; 0x94
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <read_register+0x3c>)
 80005f2:	f004 fe77 	bl	80052e4 <HAL_I2C_Master_Receive>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000c0 	.word	0x200000c0

08000604 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	f107 0c10 	add.w	ip, r7, #16
 8000610:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000614:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <CS43_Init+0x200>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800061c:	4b79      	ldr	r3, [pc, #484]	; (8000804 <CS43_Init+0x200>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	4b78      	ldr	r3, [pc, #480]	; (8000804 <CS43_Init+0x200>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800062a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4875      	ldr	r0, [pc, #468]	; (8000808 <CS43_Init+0x204>)
 8000632:	f002 fee3 	bl	80033fc <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000636:	4b75      	ldr	r3, [pc, #468]	; (800080c <CS43_Init+0x208>)
 8000638:	4618      	mov	r0, r3
 800063a:	f107 0110 	add.w	r1, r7, #16
 800063e:	2354      	movs	r3, #84	; 0x54
 8000640:	461a      	mov	r2, r3
 8000642:	f00e ff79 	bl	800f538 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000646:	2301      	movs	r3, #1
 8000648:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff9e 	bl	8000590 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	b2db      	uxtb	r3, r3
 8000660:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	f043 030c 	orr.w	r3, r3, #12
 8000668:	b2db      	uxtb	r3, r3
 800066a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800066c:	797b      	ldrb	r3, [r7, #5]
 800066e:	f043 0303 	orr.w	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff87 	bl	8000590 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	3301      	adds	r3, #1
 800068a:	4619      	mov	r1, r3
 800068c:	2005      	movs	r0, #5
 800068e:	f7ff ff7f 	bl	8000590 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	2006      	movs	r0, #6
 8000698:	f7ff ff94 	bl	80005c4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0310 	bic.w	r3, r3, #16
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	f023 0304 	bic.w	r3, r3, #4
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	f043 0303 	orr.w	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	2006      	movs	r0, #6
 80006ea:	f7ff ff51 	bl	8000590 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff65 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	b2db      	uxtb	r3, r3
 8000702:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2008      	movs	r0, #8
 8000716:	f7ff ff3b 	bl	8000590 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	2009      	movs	r0, #9
 8000722:	f7ff ff4f 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	b2db      	uxtb	r3, r3
 800072e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	3301      	adds	r3, #1
 800073e:	4619      	mov	r1, r3
 8000740:	2009      	movs	r0, #9
 8000742:	f7ff ff25 	bl	8000590 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	3301      	adds	r3, #1
 800074a:	4619      	mov	r1, r3
 800074c:	200e      	movs	r0, #14
 800074e:	f7ff ff39 	bl	80005c4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000752:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000756:	2b01      	cmp	r3, #1
 8000758:	d119      	bne.n	800078e <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	b2db      	uxtb	r3, r3
 800076c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	f023 0320 	bic.w	r3, r3, #32
 8000774:	b2db      	uxtb	r3, r3
 8000776:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	f023 0310 	bic.w	r3, r3, #16
 800077e:	b2db      	uxtb	r3, r3
 8000780:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000782:	797b      	ldrb	r3, [r7, #5]
 8000784:	f023 0308 	bic.w	r3, r3, #8
 8000788:	b2db      	uxtb	r3, r3
 800078a:	717b      	strb	r3, [r7, #5]
 800078c:	e005      	b.n	800079a <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 800078e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000796:	2302      	movs	r3, #2
 8000798:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	3301      	adds	r3, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	200e      	movs	r0, #14
 80007a2:	f7ff fef5 	bl	8000590 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	3301      	adds	r3, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff ff09 	bl	80005c4 <read_register>
	iData[1] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	200f      	movs	r0, #15
 80007be:	f7ff fee7 	bl	8000590 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	3301      	adds	r3, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	2014      	movs	r0, #20
 80007ce:	f7ff fedf 	bl	8000590 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	3301      	adds	r3, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	2015      	movs	r0, #21
 80007da:	f7ff fed9 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	3301      	adds	r3, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	201a      	movs	r0, #26
 80007e6:	f7ff fed3 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	3301      	adds	r3, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	201b      	movs	r0, #27
 80007f2:	f7ff fecd 	bl	8000590 <write_register>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	200015ec 	.word	0x200015ec
 8000808:	40020c00 	.word	0x40020c00
 800080c:	200000c0 	.word	0x200000c0

08000810 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d82b      	bhi.n	8000878 <CS43_Enable_RightLeft+0x68>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <CS43_Enable_RightLeft+0x18>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000839 	.word	0x08000839
 800082c:	08000849 	.word	0x08000849
 8000830:	08000859 	.word	0x08000859
 8000834:	08000869 	.word	0x08000869
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000838:	23c0      	movs	r3, #192	; 0xc0
 800083a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000842:	b2db      	uxtb	r3, r3
 8000844:	737b      	strb	r3, [r7, #13]
			break;
 8000846:	e018      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000852:	b2db      	uxtb	r3, r3
 8000854:	737b      	strb	r3, [r7, #13]
			break;
 8000856:	e010      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	737b      	strb	r3, [r7, #13]
			break;
 8000866:	e008      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	b2db      	uxtb	r3, r3
 8000874:	737b      	strb	r3, [r7, #13]
			break;
 8000876:	e000      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000878:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800087a:	7b7b      	ldrb	r3, [r7, #13]
 800087c:	f043 030c 	orr.w	r3, r3, #12
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2004      	movs	r0, #4
 8000898:	f7ff fe7a 	bl	8000590 <write_register>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3319      	adds	r3, #25
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	3301      	adds	r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	2020      	movs	r0, #32
 80008c0:	f7ff fe66 	bl	8000590 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	3301      	adds	r3, #1
 80008ca:	4619      	mov	r1, r3
 80008cc:	2021      	movs	r0, #33	; 0x21
 80008ce:	f7ff fe5f 	bl	8000590 <write_register>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d019      	beq.n	800091e <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2004      	movs	r0, #4
 80008f8:	f7ff fe4a 	bl	8000590 <write_register>
    iData[1] = 0x01;
 80008fc:	2301      	movs	r3, #1
 80008fe:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	3301      	adds	r3, #1
 8000906:	4619      	mov	r1, r3
 8000908:	2022      	movs	r0, #34	; 0x22
 800090a:	f7ff fe41 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	3301      	adds	r3, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2023      	movs	r0, #35	; 0x23
 8000918:	f7ff fe3a 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 800091c:	e018      	b.n	8000950 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	3301      	adds	r3, #1
 8000928:	4619      	mov	r1, r3
 800092a:	2022      	movs	r0, #34	; 0x22
 800092c:	f7ff fe30 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	3301      	adds	r3, #1
 8000936:	4619      	mov	r1, r3
 8000938:	2023      	movs	r0, #35	; 0x23
 800093a:	f7ff fe29 	bl	8000590 <write_register>
    iData[1] = 0xAF;
 800093e:	23af      	movs	r3, #175	; 0xaf
 8000940:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	3301      	adds	r3, #1
 8000948:	4619      	mov	r1, r3
 800094a:	2004      	movs	r0, #4
 800094c:	f7ff fe20 	bl	8000590 <write_register>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffbb 	bl	80008da <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000964:	2399      	movs	r3, #153	; 0x99
 8000966:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	3301      	adds	r3, #1
 800096c:	4619      	mov	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fe0e 	bl	8000590 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	3301      	adds	r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	2047      	movs	r0, #71	; 0x47
 8000980:	f7ff fe06 	bl	8000590 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	3301      	adds	r3, #1
 8000988:	4619      	mov	r1, r3
 800098a:	2032      	movs	r0, #50	; 0x32
 800098c:	f7ff fe1a 	bl	80005c4 <read_register>
	iData[1] |= 0x80;
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000996:	b2db      	uxtb	r3, r3
 8000998:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	3301      	adds	r3, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	2032      	movs	r0, #50	; 0x32
 80009a2:	f7ff fdf5 	bl	8000590 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	2032      	movs	r0, #50	; 0x32
 80009ae:	f7ff fe09 	bl	80005c4 <read_register>
	iData[1] &= ~(0x80);
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	3301      	adds	r3, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f7ff fde4 	bl	8000590 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	3301      	adds	r3, #1
 80009d0:	4619      	mov	r1, r3
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fddc 	bl	8000590 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009d8:	239e      	movs	r3, #158	; 0x9e
 80009da:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	3301      	adds	r3, #1
 80009e0:	4619      	mov	r1, r3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fdd4 	bl	8000590 <write_register>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <CS43_Stop>:

void CS43_Stop(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff ff6f 	bl	80008da <CS43_SetMute>
  iData[1] = 0x04;
 80009fc:	2304      	movs	r3, #4
 80009fe:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	3301      	adds	r3, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	200e      	movs	r0, #14
 8000a08:	f7ff fdc2 	bl	8000590 <write_register>
	iData[1] = 0x9F;
 8000a0c:	239f      	movs	r3, #159	; 0x9f
 8000a0e:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	3301      	adds	r3, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fdba 	bl	8000590 <write_register>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a32:	23ff      	movs	r3, #255	; 0xff
 8000a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a3e:	e010      	b.n	8000a62 <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <audioI2S_pllClockConfig+0xa4>)
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d103      	bne.n	8000a58 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8000a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a66:	2b07      	cmp	r3, #7
 8000a68:	d9ea      	bls.n	8000a40 <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 ff9c 	bl	80079ac <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d113      	bne.n	8000aa8 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <audioI2S_pllClockConfig+0xa8>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <audioI2S_pllClockConfig+0xac>)
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f006 fe93 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000aa6:	e00b      	b.n	8000ac0 <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000aac:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000ab0:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 fe86 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	0800fe5c 	.word	0x0800fe5c
 8000acc:	0800fe7c 	.word	0x0800fe7c
 8000ad0:	0800fe9c 	.word	0x0800fe9c

08000ad4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <I2S3_freqUpdate+0x84>)
 8000ae2:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69da      	ldr	r2, [r3, #28]
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af6:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 fa53 	bl	8005fe4 <HAL_I2S_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e000      	b.n	8000b4a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b48:	2301      	movs	r3, #1
  }
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000114 	.word	0x20000114
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <audioI2S_setHandle+0x1c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000114 	.word	0x20000114

08000b7c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff4d 	bl	8000a24 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa2 	bl	8000ad4 <I2S3_freqUpdate>
  return true;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ba6:	f7ff fed7 	bl	8000958 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <audioI2S_play+0x38>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bb4:	d203      	bcs.n	8000bbe <audioI2S_play+0x22>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	085b      	lsrs	r3, r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	e001      	b.n	8000bc2 <audioI2S_play+0x26>
 8000bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f005 fb4d 	bl	8006264 <HAL_I2S_Transmit_DMA>
  return true;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000114 	.word	0x20000114

08000bd8 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000bdc:	f7ff ff08 	bl	80009f0 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <audioI2S_stop+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 fbe5 	bl	80063b4 <HAL_I2S_DMAStop>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000114 	.word	0x20000114

08000bf4 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_I2S_TxCpltCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000c06:	f001 fcbd 	bl	8002584 <audioI2S_fullTransfer_Callback>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40003c00 	.word	0x40003c00

08000c18 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000c2a:	f001 fc9f 	bl	800256c <audioI2S_halfTransfer_Callback>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40003c00 	.word	0x40003c00

08000c3c <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f023 030f 	bic.w	r3, r3, #15
 8000c52:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	f043 030c 	orr.w	r3, r3, #12
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	723b      	strb	r3, [r7, #8]
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	727b      	strb	r3, [r7, #9]
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	f043 030c 	orr.w	r3, r3, #12
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	72bb      	strb	r3, [r7, #10]
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <lcd16x2_i2c_sendCommand+0x60>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <lcd16x2_i2c_sendCommand+0x64>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b299      	uxth	r1, r3
 8000c86:	f107 0208 	add.w	r2, r7, #8
 8000c8a:	23c8      	movs	r3, #200	; 0xc8
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2304      	movs	r3, #4
 8000c90:	f004 fa2a 	bl	80050e8 <HAL_I2C_Master_Transmit>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000118 	.word	0x20000118
 8000ca0:	2000011c 	.word	0x2000011c

08000ca4 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f023 030f 	bic.w	r3, r3, #15
 8000cba:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f043 030d 	orr.w	r3, r3, #13
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	723b      	strb	r3, [r7, #8]
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f043 0309 	orr.w	r3, r3, #9
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	727b      	strb	r3, [r7, #9]
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f043 030d 	orr.w	r3, r3, #13
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	72bb      	strb	r3, [r7, #10]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0309 	orr.w	r3, r3, #9
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <lcd16x2_i2c_sendData+0x60>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <lcd16x2_i2c_sendData+0x64>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b299      	uxth	r1, r3
 8000cee:	f107 0208 	add.w	r2, r7, #8
 8000cf2:	23c8      	movs	r3, #200	; 0xc8
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	f004 f9f6 	bl	80050e8 <HAL_I2C_Master_Transmit>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000118 	.word	0x20000118
 8000d08:	2000011c 	.word	0x2000011c

08000d0c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f001 fcdd 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <lcd16x2_i2c_init+0xd0>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <lcd16x2_i2c_init+0xd0>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d28:	2205      	movs	r2, #5
 8000d2a:	214e      	movs	r1, #78	; 0x4e
 8000d2c:	f004 fd00 	bl	8005730 <HAL_I2C_IsDeviceReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d010      	beq.n	8000d58 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <lcd16x2_i2c_init+0xd0>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d3e:	2205      	movs	r2, #5
 8000d40:	217e      	movs	r1, #126	; 0x7e
 8000d42:	f004 fcf5 	bl	8005730 <HAL_I2C_IsDeviceReady>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e040      	b.n	8000dd2 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <lcd16x2_i2c_init+0xd4>)
 8000d52:	227e      	movs	r2, #126	; 0x7e
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e002      	b.n	8000d5e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <lcd16x2_i2c_init+0xd4>)
 8000d5a:	224e      	movs	r2, #78	; 0x4e
 8000d5c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000d5e:	202d      	movs	r0, #45	; 0x2d
 8000d60:	f001 fcb8 	bl	80026d4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000d64:	2030      	movs	r0, #48	; 0x30
 8000d66:	f7ff ff69 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f001 fcb2 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d70:	2030      	movs	r0, #48	; 0x30
 8000d72:	f7ff ff63 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f001 fcac 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d7c:	2030      	movs	r0, #48	; 0x30
 8000d7e:	f7ff ff5d 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d82:	2008      	movs	r0, #8
 8000d84:	f001 fca6 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000d88:	2020      	movs	r0, #32
 8000d8a:	f7ff ff57 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d8e:	2008      	movs	r0, #8
 8000d90:	f001 fca0 	bl	80026d4 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000d94:	2028      	movs	r0, #40	; 0x28
 8000d96:	f7ff ff51 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f001 fc9a 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000da0:	2008      	movs	r0, #8
 8000da2:	f7ff ff4b 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f001 fc94 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff45 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000db2:	2003      	movs	r0, #3
 8000db4:	f001 fc8e 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000db8:	2006      	movs	r0, #6
 8000dba:	f7ff ff3f 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f001 fc88 	bl	80026d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000dc4:	200c      	movs	r0, #12
 8000dc6:	f7ff ff39 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f001 fc82 	bl	80026d4 <HAL_Delay>

  return true;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000118 	.word	0x20000118
 8000de0:	2000011c 	.word	0x2000011c

08000de4 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d108      	bne.n	8000e14 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e08:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff15 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000e12:	e007      	b.n	8000e24 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e1a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff0c 	bl	8000c3c <lcd16x2_i2c_sendCommand>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ffd6 	bl	8000de4 <lcd16x2_i2c_setCursor>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff ffce 	bl	8000de4 <lcd16x2_i2c_setCursor>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fef3 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f001 fc3c 	bl	80026d4 <HAL_Delay>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000e60:	b40f      	push	{r0, r1, r2, r3}
 8000e62:	b590      	push	{r4, r7, lr}
 8000e64:	b089      	sub	sp, #36	; 0x24
 8000e66:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e6c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00e fc40 	bl	800f6fc <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	77fb      	strb	r3, [r7, #31]
 8000e80:	e00b      	b.n	8000e9a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	f107 0220 	add.w	r2, r7, #32
 8000e88:	4413      	add	r3, r2
 8000e8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff08 	bl	8000ca4 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	3301      	adds	r3, #1
 8000e98:	77fb      	strb	r3, [r7, #31]
 8000e9a:	7ffc      	ldrb	r4, [r7, #31]
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f99d 	bl	80001e0 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	d202      	bcs.n	8000eb2 <lcd16x2_i2c_printf+0x52>
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d9e7      	bls.n	8000e82 <lcd16x2_i2c_printf+0x22>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM10_Init(void);
static void MX_TIM3_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
    if (htim == &htim10) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a5f      	ldr	r2, [pc, #380]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d10d      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x2c>
        if (duty < 1000) {
 8000ed0:	4b5e      	ldr	r3, [pc, #376]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed8:	da05      	bge.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x26>
            duty++;
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a5a      	ldr	r2, [pc, #360]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e002      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x2c>
        } else
            duty = 0;
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
    }
    if (htim == &htim4) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a58      	ldr	r2, [pc, #352]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d13d      	bne.n	8000f70 <HAL_TIM_PeriodElapsedCallback+0xb0>
        HAL_GPIO_TogglePin(step_GPIO_Port, step_Pin);
 8000ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef8:	4856      	ldr	r0, [pc, #344]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000efa:	f002 fa98 	bl	800342e <HAL_GPIO_TogglePin>
        //  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        step--;
 8000efe:	4b56      	ldr	r3, [pc, #344]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	4a54      	ldr	r2, [pc, #336]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f06:	6013      	str	r3, [r2, #0]
        step_beg--;
 8000f08:	4b54      	ldr	r3, [pc, #336]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4a53      	ldr	r2, [pc, #332]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f10:	6013      	str	r3, [r2, #0]
        in_progress = 1;
 8000f12:	4b53      	ldr	r3, [pc, #332]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

        if (step == 0) {
 8000f18:	4b4f      	ldr	r3, [pc, #316]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d108      	bne.n	8000f32 <HAL_TIM_PeriodElapsedCallback+0x72>
            HAL_TIM_Base_Stop_IT(&htim4);
 8000f20:	484b      	ldr	r0, [pc, #300]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f22:	f006 fe32 	bl	8007b8a <HAL_TIM_Base_Stop_IT>
            //HAL_TIM_Base_Start_IT(&htim3);
            flag_busy = 0;
 8000f26:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
            //          flag_busy = 0;
            //iter--;
            in_progress = 0;
 8000f2c:	4b4c      	ldr	r3, [pc, #304]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
        }
        if (step_beg == 0) {
 8000f32:	4b4a      	ldr	r3, [pc, #296]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <HAL_TIM_PeriodElapsedCallback+0x90>
            HAL_TIM_Base_Stop_IT(&htim4);
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000f3c:	f006 fe25 	bl	8007b8a <HAL_TIM_Base_Stop_IT>
            HAL_TIM_Base_Start_IT(&htim3);
 8000f40:	4849      	ldr	r0, [pc, #292]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f42:	f006 fdfe 	bl	8007b42 <HAL_TIM_Base_Start_IT>
            //flag_busy = 0;
            //flag_busy = 0;
            iter--;
 8000f46:	4b49      	ldr	r3, [pc, #292]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	4a47      	ldr	r2, [pc, #284]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f4e:	6013      	str	r3, [r2, #0]
            //in_progress = 0;
        }
        if (iter < 0) {
 8000f50:	4b46      	ldr	r3, [pc, #280]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	da0b      	bge.n	8000f70 <HAL_TIM_PeriodElapsedCallback+0xb0>
            iter = 5;
 8000f58:	4b44      	ldr	r3, [pc, #272]	; (800106c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000f5a:	2205      	movs	r2, #5
 8000f5c:	601a      	str	r2, [r3, #0]
            confirm = 0;
 8000f5e:	4b44      	ldr	r3, [pc, #272]	; (8001070 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
            wake(0); // check
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 f8bd 	bl	80010e4 <wake>
            in_progress = 0;
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
        }
    }

    if (htim == &htim3) {
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4a3d      	ldr	r2, [pc, #244]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d163      	bne.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x180>
        switch (pour_position) {
 8000f78:	4b3e      	ldr	r3, [pc, #248]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	d82e      	bhi.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000f82:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f88:	08000f9d 	.word	0x08000f9d
 8000f8c:	08000fa9 	.word	0x08000fa9
 8000f90:	08000fb7 	.word	0x08000fb7
 8000f94:	08000fc5 	.word	0x08000fc5
 8000f98:	08000fd3 	.word	0x08000fd3

            case 1:



                    HAL_GPIO_WritePin(pump_relay1_GPIO_Port, pump_relay1_Pin, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	4835      	ldr	r0, [pc, #212]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fa2:	f002 fa2b 	bl	80033fc <HAL_GPIO_WritePin>

                break;
 8000fa6:	e01b      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x120>

            case 2:


                    HAL_GPIO_WritePin(pump_relay2_GPIO_Port, pump_relay2_Pin, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fae:	4832      	ldr	r0, [pc, #200]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fb0:	f002 fa24 	bl	80033fc <HAL_GPIO_WritePin>

                break;
 8000fb4:	e014      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x120>
            case 3:


                    HAL_GPIO_WritePin(pump_relay3_GPIO_Port, pump_relay3_Pin, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fbc:	482e      	ldr	r0, [pc, #184]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fbe:	f002 fa1d 	bl	80033fc <HAL_GPIO_WritePin>

                break;
 8000fc2:	e00d      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x120>
            case 4:


                    HAL_GPIO_WritePin(pump_relay4_GPIO_Port, pump_relay4_Pin, 0);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fca:	482b      	ldr	r0, [pc, #172]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fcc:	f002 fa16 	bl	80033fc <HAL_GPIO_WritePin>

                break;
 8000fd0:	e006      	b.n	8000fe0 <HAL_TIM_PeriodElapsedCallback+0x120>

            case 5:


                    HAL_GPIO_WritePin(pump_relay5_GPIO_Port, pump_relay5_Pin, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fd8:	4827      	ldr	r0, [pc, #156]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000fda:	f002 fa0f 	bl	80033fc <HAL_GPIO_WritePin>

                break;
 8000fde:	bf00      	nop

            }
        if (time_pour > 0) {
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	dd05      	ble.n	8000ff4 <HAL_TIM_PeriodElapsedCallback+0x134>
            time_pour--;
 8000fe8:	4b24      	ldr	r3, [pc, #144]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	4a23      	ldr	r2, [pc, #140]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000ff0:	6013      	str	r3, [r2, #0]
            HAL_TIM_Base_Stop_IT(&htim3);
            flag_busy = 0;

        }
    }
}
 8000ff2:	e025      	b.n	8001040 <HAL_TIM_PeriodElapsedCallback+0x180>
            time_pour = 0;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
            HAL_GPIO_WritePin(pump_relay1_GPIO_Port, pump_relay1_Pin, 1);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	2180      	movs	r1, #128	; 0x80
 8000ffe:	481e      	ldr	r0, [pc, #120]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001000:	f002 f9fc 	bl	80033fc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(pump_relay2_GPIO_Port, pump_relay2_Pin, 1);
 8001004:	2201      	movs	r2, #1
 8001006:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100a:	481b      	ldr	r0, [pc, #108]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800100c:	f002 f9f6 	bl	80033fc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(pump_relay3_GPIO_Port, pump_relay3_Pin, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001016:	4818      	ldr	r0, [pc, #96]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001018:	f002 f9f0 	bl	80033fc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(pump_relay4_GPIO_Port, pump_relay4_Pin, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	4815      	ldr	r0, [pc, #84]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001024:	f002 f9ea 	bl	80033fc <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(pump_relay5_GPIO_Port, pump_relay5_Pin, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800102e:	4812      	ldr	r0, [pc, #72]	; (8001078 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001030:	f002 f9e4 	bl	80033fc <HAL_GPIO_WritePin>
            HAL_TIM_Base_Stop_IT(&htim3);
 8001034:	480c      	ldr	r0, [pc, #48]	; (8001068 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001036:	f006 fda8 	bl	8007b8a <HAL_TIM_Base_Stop_IT>
            flag_busy = 0;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20001470 	.word	0x20001470
 800104c:	20000120 	.word	0x20000120
 8001050:	200013dc 	.word	0x200013dc
 8001054:	40020800 	.word	0x40020800
 8001058:	20000004 	.word	0x20000004
 800105c:	200015e8 	.word	0x200015e8
 8001060:	20000144 	.word	0x20000144
 8001064:	20000138 	.word	0x20000138
 8001068:	20001544 	.word	0x20001544
 800106c:	20000008 	.word	0x20000008
 8001070:	20000124 	.word	0x20000124
 8001074:	20000148 	.word	0x20000148
 8001078:	40021000 	.word	0x40021000
 800107c:	20000130 	.word	0x20000130

08001080 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	80fb      	strh	r3, [r7, #6]
    //  left button
    if (GPIO_Pin == button_left_Pin) {
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d104      	bne.n	800109a <HAL_GPIO_EXTI_Callback+0x1a>
        //confirm = 0;
        selection--;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	3b01      	subs	r3, #1
 8001096:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001098:	6013      	str	r3, [r2, #0]
    }
    //  right button
    if (GPIO_Pin == button_right_Pin) {
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d104      	bne.n	80010aa <HAL_GPIO_EXTI_Callback+0x2a>
        //confirm = 0;
        selection++;
 80010a0:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x58>)
 80010a8:	6013      	str	r3, [r2, #0]
    }
    //  menu button
    if (GPIO_Pin == button_select_Pin) {
 80010aa:	88fb      	ldrh	r3, [r7, #6]
 80010ac:	2b20      	cmp	r3, #32
 80010ae:	d102      	bne.n	80010b6 <HAL_GPIO_EXTI_Callback+0x36>
        confirm = 1;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_GPIO_EXTI_Callback+0x5c>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	601a      	str	r2, [r3, #0]
    }
    // endstop
    if (GPIO_Pin == endstop_Pin)
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010bc:	d103      	bne.n	80010c6 <HAL_GPIO_EXTI_Callback+0x46>
        flag_endofroad = 1;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x60>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]
    else
        flag_endofroad = 0;
}
 80010c4:	e002      	b.n	80010cc <HAL_GPIO_EXTI_Callback+0x4c>
        flag_endofroad = 0;
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_GPIO_EXTI_Callback+0x60>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000128 	.word	0x20000128
 80010dc:	20000124 	.word	0x20000124
 80010e0:	20000134 	.word	0x20000134

080010e4 <wake>:

void wake(int flag) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    if (flag == 1) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d106      	bne.n	8001100 <wake+0x1c>
        HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, 1);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f8:	4806      	ldr	r0, [pc, #24]	; (8001114 <wake+0x30>)
 80010fa:	f002 f97f 	bl	80033fc <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, 0);
    }
}
 80010fe:	e005      	b.n	800110c <wake+0x28>
        HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <wake+0x30>)
 8001108:	f002 f978 	bl	80033fc <HAL_GPIO_WritePin>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020000 	.word	0x40020000

08001118 <move>:

void move(int direction, int steps) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    step = steps;
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <move+0x54>)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	6013      	str	r3, [r2, #0]
    switch (direction) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d002      	beq.n	8001134 <move+0x1c>
 800112e:	2b01      	cmp	r3, #1
 8001130:	d00c      	beq.n	800114c <move+0x34>
        wake(1);
        HAL_TIM_Base_Start_IT(&htim4);
        break;
    }

}
 8001132:	e017      	b.n	8001164 <move+0x4c>
        HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2140      	movs	r1, #64	; 0x40
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <move+0x58>)
 800113a:	f002 f95f 	bl	80033fc <HAL_GPIO_WritePin>
        wake(1);
 800113e:	2001      	movs	r0, #1
 8001140:	f7ff ffd0 	bl	80010e4 <wake>
        HAL_TIM_Base_Start_IT(&htim4);
 8001144:	480b      	ldr	r0, [pc, #44]	; (8001174 <move+0x5c>)
 8001146:	f006 fcfc 	bl	8007b42 <HAL_TIM_Base_Start_IT>
        break;
 800114a:	e00b      	b.n	8001164 <move+0x4c>
        HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, 1);
 800114c:	2201      	movs	r2, #1
 800114e:	2140      	movs	r1, #64	; 0x40
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <move+0x58>)
 8001152:	f002 f953 	bl	80033fc <HAL_GPIO_WritePin>
        wake(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff ffc4 	bl	80010e4 <wake>
        HAL_TIM_Base_Start_IT(&htim4);
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <move+0x5c>)
 800115e:	f006 fcf0 	bl	8007b42 <HAL_TIM_Base_Start_IT>
        break;
 8001162:	bf00      	nop
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000004 	.word	0x20000004
 8001170:	40020800 	.word	0x40020800
 8001174:	200013dc 	.word	0x200013dc

08001178 <move_begin>:

void move_begin() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    wake(1);
 800117c:	2001      	movs	r0, #1
 800117e:	f7ff ffb1 	bl	80010e4 <wake>
    while (flag_endofroad == 0) {
 8001182:	e003      	b.n	800118c <move_begin+0x14>
        move(0, 1);
 8001184:	2101      	movs	r1, #1
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff ffc6 	bl	8001118 <move>
    while (flag_endofroad == 0) {
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <move_begin+0x2c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d0f7      	beq.n	8001184 <move_begin+0xc>
    }
    flag_endofroad = 0;
 8001194:	4b03      	ldr	r3, [pc, #12]	; (80011a4 <move_begin+0x2c>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
    wake(0);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff ffa2 	bl	80010e4 <wake>
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000134 	.word	0x20000134

080011a8 <setPosition>:
//  }
//  last_position = position;
//
//}

void setPosition(int position, int time) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
    pour_position = position;
 80011b2:	4a27      	ldr	r2, [pc, #156]	; (8001250 <setPosition+0xa8>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6013      	str	r3, [r2, #0]
    flag_busy = 1;
 80011b8:	4b26      	ldr	r3, [pc, #152]	; (8001254 <setPosition+0xac>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	601a      	str	r2, [r3, #0]
    time_pour = time;
 80011be:	4a26      	ldr	r2, [pc, #152]	; (8001258 <setPosition+0xb0>)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	6013      	str	r3, [r2, #0]
    int target;
    flag_endofroad = 0;
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <setPosition+0xb4>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]

    if (position >= 0) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db37      	blt.n	8001240 <setPosition+0x98>


        if (last_position > position) {
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <setPosition+0xb8>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	da15      	bge.n	8001206 <setPosition+0x5e>
            wake(1);
 80011da:	2001      	movs	r0, #1
 80011dc:	f7ff ff82 	bl	80010e4 <wake>
            target = STEPS / 2 * abs((position - last_position));
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <setPosition+0xb8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	bfb8      	it	lt
 80011ec:	425b      	neglt	r3, r3
 80011ee:	f240 32d9 	movw	r2, #985	; 0x3d9
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	60fb      	str	r3, [r7, #12]
            move(0, target+10);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	330a      	adds	r3, #10
 80011fc:	4619      	mov	r1, r3
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff ff8a 	bl	8001118 <move>
 8001204:	e019      	b.n	800123a <setPosition+0x92>

        }

        else if (last_position < position) {
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <setPosition+0xb8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dd14      	ble.n	800123a <setPosition+0x92>
            wake(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff ff67 	bl	80010e4 <wake>
            target = STEPS / 2 * abs((last_position - position));
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <setPosition+0xb8>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	bfb8      	it	lt
 8001222:	425b      	neglt	r3, r3
 8001224:	f240 32d9 	movw	r2, #985	; 0x3d9
 8001228:	fb02 f303 	mul.w	r3, r2, r3
 800122c:	60fb      	str	r3, [r7, #12]
            move(1, target+10);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	330a      	adds	r3, #10
 8001232:	4619      	mov	r1, r3
 8001234:	2001      	movs	r0, #1
 8001236:	f7ff ff6f 	bl	8001118 <move>

        }

        step_beg = target;
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <setPosition+0xbc>)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6013      	str	r3, [r2, #0]
    }
    last_position = position;
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <setPosition+0xb8>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000148 	.word	0x20000148
 8001254:	20000138 	.word	0x20000138
 8001258:	20000130 	.word	0x20000130
 800125c:	20000134 	.word	0x20000134
 8001260:	2000013c 	.word	0x2000013c
 8001264:	200015e8 	.word	0x200015e8

08001268 <pumpInit>:
//        break;
//
//    }
//
//}
void pumpInit() {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(pump_relay1_GPIO_Port, pump_relay1_Pin, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	480e      	ldr	r0, [pc, #56]	; (80012ac <pumpInit+0x44>)
 8001272:	f002 f8c3 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pump_relay2_GPIO_Port, pump_relay2_Pin, 1);
 8001276:	2201      	movs	r2, #1
 8001278:	f44f 7100 	mov.w	r1, #512	; 0x200
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <pumpInit+0x44>)
 800127e:	f002 f8bd 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pump_relay3_GPIO_Port, pump_relay3_Pin, 1);
 8001282:	2201      	movs	r2, #1
 8001284:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001288:	4808      	ldr	r0, [pc, #32]	; (80012ac <pumpInit+0x44>)
 800128a:	f002 f8b7 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pump_relay4_GPIO_Port, pump_relay4_Pin, 1);
 800128e:	2201      	movs	r2, #1
 8001290:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <pumpInit+0x44>)
 8001296:	f002 f8b1 	bl	80033fc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(pump_relay5_GPIO_Port, pump_relay5_Pin, 1);
 800129a:	2201      	movs	r2, #1
 800129c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <pumpInit+0x44>)
 80012a2:	f002 f8ab 	bl	80033fc <HAL_GPIO_WritePin>
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80012b0:	b590      	push	{r4, r7, lr}
 80012b2:	b095      	sub	sp, #84	; 0x54
 80012b4:	af12      	add	r7, sp, #72	; 0x48
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80012b6:	f001 f99b 	bl	80025f0 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80012ba:	f000 fa15 	bl	80016e8 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80012be:	f000 fc71 	bl	8001ba4 <MX_GPIO_Init>
    MX_DMA_Init();
 80012c2:	f000 fc4f 	bl	8001b64 <MX_DMA_Init>
    MX_I2C1_Init();
 80012c6:	f000 fa93 	bl	80017f0 <MX_I2C1_Init>
    MX_I2S3_Init();
 80012ca:	f000 faed 	bl	80018a8 <MX_I2S3_Init>
    MX_USB_HOST_Init();
 80012ce:	f00d fdbd 	bl	800ee4c <MX_USB_HOST_Init>
    MX_FATFS_Init();
 80012d2:	f008 fa2b 	bl	800972c <MX_FATFS_Init>
    MX_I2C2_Init();
 80012d6:	f000 fab9 	bl	800184c <MX_I2C2_Init>
    MX_TIM4_Init();
 80012da:	f000 fb61 	bl	80019a0 <MX_TIM4_Init>
    MX_TIM5_Init();
 80012de:	f000 fbad 	bl	8001a3c <MX_TIM5_Init>
    MX_TIM10_Init();
 80012e2:	f000 fc1b 	bl	8001b1c <MX_TIM10_Init>
    MX_TIM3_Init();
 80012e6:	f000 fb0d 	bl	8001904 <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */
    /******************************** MENU INIT ************************************/
    pumpInit();
 80012ea:	f7ff ffbd 	bl	8001268 <pumpInit>

    /****************************** DAC AUDIO INIT ******************************/
    CS43_Init(hi2c1, MODE_I2S);
 80012ee:	4cb4      	ldr	r4, [pc, #720]	; (80015c0 <main+0x310>)
 80012f0:	2300      	movs	r3, #0
 80012f2:	9311      	str	r3, [sp, #68]	; 0x44
 80012f4:	4668      	mov	r0, sp
 80012f6:	f104 0310 	add.w	r3, r4, #16
 80012fa:	2244      	movs	r2, #68	; 0x44
 80012fc:	4619      	mov	r1, r3
 80012fe:	f00e f91b 	bl	800f538 <memcpy>
 8001302:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001306:	f7ff f97d 	bl	8000604 <CS43_Init>
    CS43_SetVolume(200); //0-255
 800130a:	20c8      	movs	r0, #200	; 0xc8
 800130c:	f7ff faca 	bl	80008a4 <CS43_SetVolume>
    CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001310:	2003      	movs	r0, #3
 8001312:	f7ff fa7d 	bl	8000810 <CS43_Enable_RightLeft>
    audioI2S_setHandle(&hi2s3);
 8001316:	48ab      	ldr	r0, [pc, #684]	; (80015c4 <main+0x314>)
 8001318:	f7ff fc20 	bl	8000b5c <audioI2S_setHandle>
    bool isSdCardMounted = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	71fb      	strb	r3, [r7, #7]
    bool pauseResumeToggle = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	71bb      	strb	r3, [r7, #6]

    /****************************** LCD INIT ************************************/
    lcd16x2_i2c_init(&hi2c2);
 8001324:	48a8      	ldr	r0, [pc, #672]	; (80015c8 <main+0x318>)
 8001326:	f7ff fcf1 	bl	8000d0c <lcd16x2_i2c_init>
    lcd16x2_i2c_1stLine();
 800132a:	f7ff fd7f 	bl	8000e2c <lcd16x2_i2c_1stLine>
    lcd16x2_i2c_printf(" Barman AuBaDi ");
 800132e:	48a7      	ldr	r0, [pc, #668]	; (80015cc <main+0x31c>)
 8001330:	f7ff fd96 	bl	8000e60 <lcd16x2_i2c_printf>
    lcd16x2_i2c_2ndLine();
 8001334:	f7ff fd82 	bl	8000e3c <lcd16x2_i2c_2ndLine>
    lcd16x2_i2c_printf(" KALIBRACJA ");
 8001338:	48a5      	ldr	r0, [pc, #660]	; (80015d0 <main+0x320>)
 800133a:	f7ff fd91 	bl	8000e60 <lcd16x2_i2c_printf>

    /****************************** PWM LIGHTNING INIT **************************/
    HAL_TIM_Base_Start_IT(&htim10);
 800133e:	48a5      	ldr	r0, [pc, #660]	; (80015d4 <main+0x324>)
 8001340:	f006 fbff 	bl	8007b42 <HAL_TIM_Base_Start_IT>
//blue LED
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8001344:	4ba4      	ldr	r3, [pc, #656]	; (80015d8 <main+0x328>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2200      	movs	r2, #0
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800134c:	2104      	movs	r1, #4
 800134e:	48a2      	ldr	r0, [pc, #648]	; (80015d8 <main+0x328>)
 8001350:	f006 fc72 	bl	8007c38 <HAL_TIM_PWM_Start>
//green LED
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 8001354:	4ba0      	ldr	r3, [pc, #640]	; (80015d8 <main+0x328>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2200      	movs	r2, #0
 800135a:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800135c:	2108      	movs	r1, #8
 800135e:	489e      	ldr	r0, [pc, #632]	; (80015d8 <main+0x328>)
 8001360:	f006 fc6a 	bl	8007c38 <HAL_TIM_PWM_Start>
//red LED
    __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8001364:	4b9c      	ldr	r3, [pc, #624]	; (80015d8 <main+0x328>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2200      	movs	r2, #0
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800136c:	210c      	movs	r1, #12
 800136e:	489a      	ldr	r0, [pc, #616]	; (80015d8 <main+0x328>)
 8001370:	f006 fc62 	bl	8007c38 <HAL_TIM_PWM_Start>

    /****************************** MOTOR INIT ***********************************/
    move_begin();
 8001374:	f7ff ff00 	bl	8001178 <move_begin>
    wake(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff feb3 	bl	80010e4 <wake>
    /******************************** MENU INIT ************************************/
    iter = 5;
 800137e:	4b97      	ldr	r3, [pc, #604]	; (80015dc <main+0x32c>)
 8001380:	2205      	movs	r2, #5
 8001382:	601a      	str	r2, [r3, #0]
    in_progress = 0;
 8001384:	4b96      	ldr	r3, [pc, #600]	; (80015e0 <main+0x330>)
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN WHILE */
    while (1) {

        /*********************************** MENU ************************************/

        if (selection != old_selection) {
 800138a:	4b96      	ldr	r3, [pc, #600]	; (80015e4 <main+0x334>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b96      	ldr	r3, [pc, #600]	; (80015e8 <main+0x338>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	429a      	cmp	r2, r3
 8001394:	d079      	beq.n	800148a <main+0x1da>
            if (selection <= 3 && selection >= 0) {
 8001396:	4b93      	ldr	r3, [pc, #588]	; (80015e4 <main+0x334>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b03      	cmp	r3, #3
 800139c:	dc66      	bgt.n	800146c <main+0x1bc>
 800139e:	4b91      	ldr	r3, [pc, #580]	; (80015e4 <main+0x334>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	db62      	blt.n	800146c <main+0x1bc>
                switch (selection) {
 80013a6:	4b8f      	ldr	r3, [pc, #572]	; (80015e4 <main+0x334>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d859      	bhi.n	8001462 <main+0x1b2>
 80013ae:	a201      	add	r2, pc, #4	; (adr r2, 80013b4 <main+0x104>)
 80013b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b4:	080013c5 	.word	0x080013c5
 80013b8:	080013f1 	.word	0x080013f1
 80013bc:	08001417 	.word	0x08001417
 80013c0:	0800143d 	.word	0x0800143d

                case 0:
                    lcd16x2_i2c_clear();
 80013c4:	f7ff fd42 	bl	8000e4c <lcd16x2_i2c_clear>
                    lcd16x2_i2c_1stLine();
 80013c8:	f7ff fd30 	bl	8000e2c <lcd16x2_i2c_1stLine>
                    lcd16x2_i2c_printf(" Barman AuBaDi ");
 80013cc:	487f      	ldr	r0, [pc, #508]	; (80015cc <main+0x31c>)
 80013ce:	f7ff fd47 	bl	8000e60 <lcd16x2_i2c_printf>
                    lcd16x2_i2c_2ndLine();
 80013d2:	f7ff fd33 	bl	8000e3c <lcd16x2_i2c_2ndLine>
                    lcd16x2_i2c_printf("<-WYBOR NAPOJU->");
 80013d6:	4885      	ldr	r0, [pc, #532]	; (80015ec <main+0x33c>)
 80013d8:	f7ff fd42 	bl	8000e60 <lcd16x2_i2c_printf>
                    audio_flag = 4;
 80013dc:	4b84      	ldr	r3, [pc, #528]	; (80015f0 <main+0x340>)
 80013de:	2204      	movs	r2, #4
 80013e0:	601a      	str	r2, [r3, #0]
                    recipe = 0;
 80013e2:	4b84      	ldr	r3, [pc, #528]	; (80015f4 <main+0x344>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
                    confirm = 0;
 80013e8:	4b83      	ldr	r3, [pc, #524]	; (80015f8 <main+0x348>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
                    break;
 80013ee:	e038      	b.n	8001462 <main+0x1b2>

                case 1:
                    lcd16x2_i2c_clear();
 80013f0:	f7ff fd2c 	bl	8000e4c <lcd16x2_i2c_clear>
                    lcd16x2_i2c_1stLine();
 80013f4:	f7ff fd1a 	bl	8000e2c <lcd16x2_i2c_1stLine>
                    lcd16x2_i2c_printf("Barman AuBaDi ");
 80013f8:	4880      	ldr	r0, [pc, #512]	; (80015fc <main+0x34c>)
 80013fa:	f7ff fd31 	bl	8000e60 <lcd16x2_i2c_printf>
                    lcd16x2_i2c_2ndLine();
 80013fe:	f7ff fd1d 	bl	8000e3c <lcd16x2_i2c_2ndLine>
                    lcd16x2_i2c_printf("<-   NAPOJ 1  ->");
 8001402:	487f      	ldr	r0, [pc, #508]	; (8001600 <main+0x350>)
 8001404:	f7ff fd2c 	bl	8000e60 <lcd16x2_i2c_printf>
                    audio_flag = 1;
 8001408:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <main+0x340>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]
                    recipe = 1;
 800140e:	4b79      	ldr	r3, [pc, #484]	; (80015f4 <main+0x344>)
 8001410:	2201      	movs	r2, #1
 8001412:	601a      	str	r2, [r3, #0]
                    break;
 8001414:	e025      	b.n	8001462 <main+0x1b2>

                case 2:
                    lcd16x2_i2c_clear();
 8001416:	f7ff fd19 	bl	8000e4c <lcd16x2_i2c_clear>
                    lcd16x2_i2c_1stLine();
 800141a:	f7ff fd07 	bl	8000e2c <lcd16x2_i2c_1stLine>
                    lcd16x2_i2c_printf("Barman AuBaDi ");
 800141e:	4877      	ldr	r0, [pc, #476]	; (80015fc <main+0x34c>)
 8001420:	f7ff fd1e 	bl	8000e60 <lcd16x2_i2c_printf>
                    lcd16x2_i2c_2ndLine();
 8001424:	f7ff fd0a 	bl	8000e3c <lcd16x2_i2c_2ndLine>
                    lcd16x2_i2c_printf("<-   NAPOJ 2  ->");
 8001428:	4876      	ldr	r0, [pc, #472]	; (8001604 <main+0x354>)
 800142a:	f7ff fd19 	bl	8000e60 <lcd16x2_i2c_printf>
                    audio_flag = 2;
 800142e:	4b70      	ldr	r3, [pc, #448]	; (80015f0 <main+0x340>)
 8001430:	2202      	movs	r2, #2
 8001432:	601a      	str	r2, [r3, #0]
                    recipe = 2;
 8001434:	4b6f      	ldr	r3, [pc, #444]	; (80015f4 <main+0x344>)
 8001436:	2202      	movs	r2, #2
 8001438:	601a      	str	r2, [r3, #0]
                    break;
 800143a:	e012      	b.n	8001462 <main+0x1b2>

                case 3:
                    lcd16x2_i2c_clear();
 800143c:	f7ff fd06 	bl	8000e4c <lcd16x2_i2c_clear>
                    lcd16x2_i2c_1stLine();
 8001440:	f7ff fcf4 	bl	8000e2c <lcd16x2_i2c_1stLine>
                    lcd16x2_i2c_printf("Barman AuBaDi ");
 8001444:	486d      	ldr	r0, [pc, #436]	; (80015fc <main+0x34c>)
 8001446:	f7ff fd0b 	bl	8000e60 <lcd16x2_i2c_printf>
                    lcd16x2_i2c_2ndLine();
 800144a:	f7ff fcf7 	bl	8000e3c <lcd16x2_i2c_2ndLine>
                    lcd16x2_i2c_printf("<-   NAPOJ 3  ->");
 800144e:	486e      	ldr	r0, [pc, #440]	; (8001608 <main+0x358>)
 8001450:	f7ff fd06 	bl	8000e60 <lcd16x2_i2c_printf>
                    audio_flag = 3;
 8001454:	4b66      	ldr	r3, [pc, #408]	; (80015f0 <main+0x340>)
 8001456:	2203      	movs	r2, #3
 8001458:	601a      	str	r2, [r3, #0]
                    recipe = 3;
 800145a:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <main+0x344>)
 800145c:	2203      	movs	r2, #3
 800145e:	601a      	str	r2, [r3, #0]
                    break;
 8001460:	bf00      	nop
                }
                old_selection = selection;
 8001462:	4b60      	ldr	r3, [pc, #384]	; (80015e4 <main+0x334>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a60      	ldr	r2, [pc, #384]	; (80015e8 <main+0x338>)
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e00e      	b.n	800148a <main+0x1da>
//                  confirm = 0;
//                  break;
//              }
            }

            else if (selection < 0) {
 800146c:	4b5d      	ldr	r3, [pc, #372]	; (80015e4 <main+0x334>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da03      	bge.n	800147c <main+0x1cc>
                selection = 3;
 8001474:	4b5b      	ldr	r3, [pc, #364]	; (80015e4 <main+0x334>)
 8001476:	2203      	movs	r2, #3
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e006      	b.n	800148a <main+0x1da>
            } else if (selection > 3) {
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <main+0x334>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b03      	cmp	r3, #3
 8001482:	dd02      	ble.n	800148a <main+0x1da>
                selection = 0;
 8001484:	4b57      	ldr	r3, [pc, #348]	; (80015e4 <main+0x334>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
            }

        }

        /*********************************** LED PWM  ************************************/
        TIM5->CCR2 = duty;
 800148a:	4b60      	ldr	r3, [pc, #384]	; (800160c <main+0x35c>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	4b60      	ldr	r3, [pc, #384]	; (8001610 <main+0x360>)
 8001490:	639a      	str	r2, [r3, #56]	; 0x38
        TIM5->CCR3 = 1000;
 8001492:	4b5f      	ldr	r3, [pc, #380]	; (8001610 <main+0x360>)
 8001494:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001498:	63da      	str	r2, [r3, #60]	; 0x3c
        TIM5->CCR4 = (1000 - duty);
 800149a:	4b5c      	ldr	r3, [pc, #368]	; (800160c <main+0x35c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80014a2:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <main+0x360>)
 80014a4:	641a      	str	r2, [r3, #64]	; 0x40

        /*********************************** AUDIO ****************************************/

        if (Appli_state == APPLICATION_START) {
 80014a6:	4b5b      	ldr	r3, [pc, #364]	; (8001614 <main+0x364>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d106      	bne.n	80014bc <main+0x20c>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b4:	4858      	ldr	r0, [pc, #352]	; (8001618 <main+0x368>)
 80014b6:	f001 ffa1 	bl	80033fc <HAL_GPIO_WritePin>
 80014ba:	e009      	b.n	80014d0 <main+0x220>
        }

        else if (Appli_state == APPLICATION_DISCONNECT) {
 80014bc:	4b55      	ldr	r3, [pc, #340]	; (8001614 <main+0x364>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b03      	cmp	r3, #3
 80014c2:	d105      	bne.n	80014d0 <main+0x220>
            HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	4853      	ldr	r0, [pc, #332]	; (8001618 <main+0x368>)
 80014cc:	f001 ff96 	bl	80033fc <HAL_GPIO_WritePin>

        }

        if (Appli_state == APPLICATION_READY) {
 80014d0:	4b50      	ldr	r3, [pc, #320]	; (8001614 <main+0x364>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	f040 80ca 	bne.w	800166e <main+0x3be>
            if (!isSdCardMounted) {
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d006      	beq.n	80014f4 <main+0x244>
                f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	494c      	ldr	r1, [pc, #304]	; (800161c <main+0x36c>)
 80014ea:	484d      	ldr	r0, [pc, #308]	; (8001620 <main+0x370>)
 80014ec:	f00c fe5e 	bl	800e1ac <f_mount>
                isSdCardMounted = 1;
 80014f0:	2301      	movs	r3, #1
 80014f2:	71fb      	strb	r3, [r7, #7]
            }

            if (audio_flag == 1) {
 80014f4:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <main+0x340>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d11d      	bne.n	8001538 <main+0x288>
                if (!wavPlayer_isFinished()) {
 80014fc:	f001 f82a 	bl	8002554 <wavPlayer_isFinished>
 8001500:	4603      	mov	r3, r0
 8001502:	f083 0301 	eor.w	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <main+0x262>
                    wavPlayer_stop();
 800150c:	f001 f816 	bl	800253c <wavPlayer_stop>
 8001510:	e0ad      	b.n	800166e <main+0x3be>
                } else {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001512:	2201      	movs	r2, #1
 8001514:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001518:	483f      	ldr	r0, [pc, #252]	; (8001618 <main+0x368>)
 800151a:	f001 ff6f 	bl	80033fc <HAL_GPIO_WritePin>
                    HAL_Delay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001522:	f001 f8d7 	bl	80026d4 <HAL_Delay>
                    wavPlayer_fileSelect(WAV_FILE_1);
 8001526:	483f      	ldr	r0, [pc, #252]	; (8001624 <main+0x374>)
 8001528:	f000 ff3a 	bl	80023a0 <wavPlayer_fileSelect>
                    wavPlayer_play();
 800152c:	f000 ff62 	bl	80023f4 <wavPlayer_play>
                    audio_flag = 0;
 8001530:	4b2f      	ldr	r3, [pc, #188]	; (80015f0 <main+0x340>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	e09a      	b.n	800166e <main+0x3be>
                }
            }

            else if (audio_flag == 2) {
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <main+0x340>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d11d      	bne.n	800157c <main+0x2cc>
                if (!wavPlayer_isFinished()) {
 8001540:	f001 f808 	bl	8002554 <wavPlayer_isFinished>
 8001544:	4603      	mov	r3, r0
 8001546:	f083 0301 	eor.w	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <main+0x2a6>
                    wavPlayer_stop();
 8001550:	f000 fff4 	bl	800253c <wavPlayer_stop>
 8001554:	e08b      	b.n	800166e <main+0x3be>
                } else {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001556:	2201      	movs	r2, #1
 8001558:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155c:	482e      	ldr	r0, [pc, #184]	; (8001618 <main+0x368>)
 800155e:	f001 ff4d 	bl	80033fc <HAL_GPIO_WritePin>
                    HAL_Delay(500);
 8001562:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001566:	f001 f8b5 	bl	80026d4 <HAL_Delay>
                    wavPlayer_fileSelect(WAV_FILE_2);
 800156a:	482f      	ldr	r0, [pc, #188]	; (8001628 <main+0x378>)
 800156c:	f000 ff18 	bl	80023a0 <wavPlayer_fileSelect>
                    wavPlayer_play();
 8001570:	f000 ff40 	bl	80023f4 <wavPlayer_play>
                    audio_flag = 0;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <main+0x340>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	e078      	b.n	800166e <main+0x3be>
                }
            }

            else if (audio_flag == 3) {
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <main+0x340>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d153      	bne.n	800162c <main+0x37c>
                if (!wavPlayer_isFinished()) {
 8001584:	f000 ffe6 	bl	8002554 <wavPlayer_isFinished>
 8001588:	4603      	mov	r3, r0
 800158a:	f083 0301 	eor.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d002      	beq.n	800159a <main+0x2ea>
                    wavPlayer_stop();
 8001594:	f000 ffd2 	bl	800253c <wavPlayer_stop>
 8001598:	e069      	b.n	800166e <main+0x3be>
                } else {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a0:	481d      	ldr	r0, [pc, #116]	; (8001618 <main+0x368>)
 80015a2:	f001 ff2b 	bl	80033fc <HAL_GPIO_WritePin>
                    HAL_Delay(500);
 80015a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015aa:	f001 f893 	bl	80026d4 <HAL_Delay>
                    wavPlayer_fileSelect(WAV_FILE_3);
 80015ae:	481d      	ldr	r0, [pc, #116]	; (8001624 <main+0x374>)
 80015b0:	f000 fef6 	bl	80023a0 <wavPlayer_fileSelect>
                    wavPlayer_play();
 80015b4:	f000 ff1e 	bl	80023f4 <wavPlayer_play>
                    audio_flag = 0;
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <main+0x340>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	e056      	b.n	800166e <main+0x3be>
 80015c0:	2000141c 	.word	0x2000141c
 80015c4:	200015ec 	.word	0x200015ec
 80015c8:	200014b0 	.word	0x200014b0
 80015cc:	0800fd70 	.word	0x0800fd70
 80015d0:	0800fd80 	.word	0x0800fd80
 80015d4:	20001470 	.word	0x20001470
 80015d8:	20001504 	.word	0x20001504
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000144 	.word	0x20000144
 80015e4:	20000128 	.word	0x20000128
 80015e8:	20000000 	.word	0x20000000
 80015ec:	0800fd90 	.word	0x0800fd90
 80015f0:	2000012c 	.word	0x2000012c
 80015f4:	20000140 	.word	0x20000140
 80015f8:	20000124 	.word	0x20000124
 80015fc:	0800fda4 	.word	0x0800fda4
 8001600:	0800fdb4 	.word	0x0800fdb4
 8001604:	0800fdc8 	.word	0x0800fdc8
 8001608:	0800fddc 	.word	0x0800fddc
 800160c:	20000120 	.word	0x20000120
 8001610:	40000c00 	.word	0x40000c00
 8001614:	200013cc 	.word	0x200013cc
 8001618:	40020c00 	.word	0x40020c00
 800161c:	20001638 	.word	0x20001638
 8001620:	2000186c 	.word	0x2000186c
 8001624:	0800fdf0 	.word	0x0800fdf0
 8001628:	0800fe00 	.word	0x0800fe00
                }
            }

            else if (audio_flag == 4) {
 800162c:	4b25      	ldr	r3, [pc, #148]	; (80016c4 <main+0x414>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b04      	cmp	r3, #4
 8001632:	d11c      	bne.n	800166e <main+0x3be>
                if (!wavPlayer_isFinished()) {
 8001634:	f000 ff8e 	bl	8002554 <wavPlayer_isFinished>
 8001638:	4603      	mov	r3, r0
 800163a:	f083 0301 	eor.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	d002      	beq.n	800164a <main+0x39a>
                    wavPlayer_stop();
 8001644:	f000 ff7a 	bl	800253c <wavPlayer_stop>
 8001648:	e011      	b.n	800166e <main+0x3be>
                } else {
                    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <main+0x418>)
 8001652:	f001 fed3 	bl	80033fc <HAL_GPIO_WritePin>
                    HAL_Delay(500);
 8001656:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800165a:	f001 f83b 	bl	80026d4 <HAL_Delay>
                    wavPlayer_fileSelect(WAV_FILE_menu);
 800165e:	481b      	ldr	r0, [pc, #108]	; (80016cc <main+0x41c>)
 8001660:	f000 fe9e 	bl	80023a0 <wavPlayer_fileSelect>
                    wavPlayer_play();
 8001664:	f000 fec6 	bl	80023f4 <wavPlayer_play>
                    audio_flag = 0;
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <main+0x414>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
                }
            }

        }

        wavPlayer_process();
 800166e:	f000 fef3 	bl	8002458 <wavPlayer_process>

        /*********************************** MOTOR  ************************************/
        if (confirm == 1) {
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <main+0x420>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d121      	bne.n	80016be <main+0x40e>

            if (flag_busy == 0) {
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <main+0x424>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d11d      	bne.n	80016be <main+0x40e>

                if (iter >= 0) {
 8001682:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <main+0x428>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	db0b      	blt.n	80016a2 <main+0x3f2>
                    //pour(recipe_1[iter], iter);
                    jedz_na = queue[iter];
 800168a:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <main+0x428>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <main+0x42c>)
 8001690:	5cd3      	ldrb	r3, [r2, r3]
 8001692:	461a      	mov	r2, r3
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <main+0x430>)
 8001696:	601a      	str	r2, [r3, #0]
                    lej = 1000; //recipe_1[iter];
 8001698:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <main+0x434>)
 800169a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	e005      	b.n	80016ae <main+0x3fe>
//                  if (flag_busy == 0) {
//                      pour(recipe_1[iter], iter);
//                  }
                } else {
                    jedz_na = 0;
 80016a2:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <main+0x430>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
                    lej = 0;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <main+0x434>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
                }

                setPosition(jedz_na, lej);
 80016ae:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <main+0x430>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <main+0x434>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fd75 	bl	80011a8 <setPosition>
        }

        //*********************************** PUMPS  ************************************/

        /* USER CODE END WHILE */
        MX_USB_HOST_Process();
 80016be:	f00d fbeb 	bl	800ee98 <MX_USB_HOST_Process>
        if (selection != old_selection) {
 80016c2:	e662      	b.n	800138a <main+0xda>
 80016c4:	2000012c 	.word	0x2000012c
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	0800fe00 	.word	0x0800fe00
 80016d0:	20000124 	.word	0x20000124
 80016d4:	20000138 	.word	0x20000138
 80016d8:	20000008 	.word	0x20000008
 80016dc:	2000000c 	.word	0x2000000c
 80016e0:	200015e4 	.word	0x200015e4
 80016e4:	200013d8 	.word	0x200013d8

080016e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09a      	sub	sp, #104	; 0x68
 80016ec:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016f2:	2230      	movs	r2, #48	; 0x30
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f00d ff29 	bl	800f54e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
 800171c:	615a      	str	r2, [r3, #20]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	4b31      	ldr	r3, [pc, #196]	; (80017e8 <SystemClock_Config+0x100>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a30      	ldr	r2, [pc, #192]	; (80017e8 <SystemClock_Config+0x100>)
 8001728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b2e      	ldr	r3, [pc, #184]	; (80017e8 <SystemClock_Config+0x100>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001736:	60bb      	str	r3, [r7, #8]
 8001738:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <SystemClock_Config+0x104>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a2a      	ldr	r2, [pc, #168]	; (80017ec <SystemClock_Config+0x104>)
 8001744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <SystemClock_Config+0x104>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001752:	607b      	str	r3, [r7, #4]
 8001754:	687b      	ldr	r3, [r7, #4]
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001756:	2301      	movs	r3, #1
 8001758:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800175a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800175e:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001760:	2302      	movs	r3, #2
 8001762:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001764:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001768:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLM = 4;
 800176a:	2304      	movs	r3, #4
 800176c:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLN = 72;
 800176e:	2348      	movs	r3, #72	; 0x48
 8001770:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001772:	2302      	movs	r3, #2
 8001774:	663b      	str	r3, [r7, #96]	; 0x60
    RCC_OscInitStruct.PLL.PLLQ = 3;
 8001776:	2303      	movs	r3, #3
 8001778:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800177a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800177e:	4618      	mov	r0, r3
 8001780:	f005 fbd6 	bl	8006f30 <HAL_RCC_OscConfig>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <SystemClock_Config+0xa6>
        Error_Handler();
 800178a:	f000 fb13 	bl	8001db4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB busses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800178e:	230f      	movs	r3, #15
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001792:	2302      	movs	r3, #2
 8001794:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001796:	2300      	movs	r3, #0
 8001798:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800179a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179e:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	637b      	str	r3, [r7, #52]	; 0x34

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80017a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017a8:	2102      	movs	r1, #2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f005 fe30 	bl	8007410 <HAL_RCC_ClockConfig>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <SystemClock_Config+0xd2>
        Error_Handler();
 80017b6:	f000 fafd 	bl	8001db4 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80017ba:	2301      	movs	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 288;
 80017be:	f44f 7390 	mov.w	r3, #288	; 0x120
 80017c2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80017c4:	2308      	movs	r3, #8
 80017c6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80017c8:	2306      	movs	r3, #6
 80017ca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	4618      	mov	r0, r3
 80017d2:	f005 fffb 	bl	80077cc <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0xf8>
        Error_Handler();
 80017dc:	f000 faea 	bl	8001db4 <Error_Handler>
    }
}
 80017e0:	bf00      	nop
 80017e2:	3768      	adds	r7, #104	; 0x68
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80017f4:	4b12      	ldr	r3, [pc, #72]	; (8001840 <MX_I2C1_Init+0x50>)
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_I2C1_Init+0x54>)
 80017f8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80017fa:	4b11      	ldr	r3, [pc, #68]	; (8001840 <MX_I2C1_Init+0x50>)
 80017fc:	4a12      	ldr	r2, [pc, #72]	; (8001848 <MX_I2C1_Init+0x58>)
 80017fe:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001800:	4b0f      	ldr	r3, [pc, #60]	; (8001840 <MX_I2C1_Init+0x50>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8001806:	4b0e      	ldr	r3, [pc, #56]	; (8001840 <MX_I2C1_Init+0x50>)
 8001808:	2200      	movs	r2, #0
 800180a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <MX_I2C1_Init+0x50>)
 800180e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001812:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001814:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <MX_I2C1_Init+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <MX_I2C1_Init+0x50>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800182c:	4804      	ldr	r0, [pc, #16]	; (8001840 <MX_I2C1_Init+0x50>)
 800182e:	f003 fb23 	bl	8004e78 <HAL_I2C_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_I2C1_Init+0x4c>
        Error_Handler();
 8001838:	f000 fabc 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	bd80      	pop	{r7, pc}
 8001840:	2000141c 	.word	0x2000141c
 8001844:	40005400 	.word	0x40005400
 8001848:	000186a0 	.word	0x000186a0

0800184c <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C2_Init 0 */

    /* USER CODE BEGIN I2C2_Init 1 */

    /* USER CODE END I2C2_Init 1 */
    hi2c2.Instance = I2C2;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <MX_I2C2_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <MX_I2C2_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
    hi2c2.Init.ClockSpeed = 100000;
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_I2C2_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	; (80018a4 <MX_I2C2_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
    hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <MX_I2C2_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
    hi2c2.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_I2C2_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
    hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_I2C2_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800186e:	611a      	str	r2, [r3, #16]
    hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	; (800189c <MX_I2C2_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
    hi2c2.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_I2C2_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
    hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <MX_I2C2_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
    hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_I2C2_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001888:	4804      	ldr	r0, [pc, #16]	; (800189c <MX_I2C2_Init+0x50>)
 800188a:	f003 faf5 	bl	8004e78 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C2_Init+0x4c>
        Error_Handler();
 8001894:	f000 fa8e 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C2_Init 2 */

    /* USER CODE END I2C2_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200014b0 	.word	0x200014b0
 80018a0:	40005800 	.word	0x40005800
 80018a4:	000186a0 	.word	0x000186a0

080018a8 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
    /* USER CODE END I2S3_Init 0 */

    /* USER CODE BEGIN I2S3_Init 1 */

    /* USER CODE END I2S3_Init 1 */
    hi2s3.Instance = SPI3;
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <MX_I2S3_Init+0x54>)
 80018ae:	4a14      	ldr	r2, [pc, #80]	; (8001900 <MX_I2S3_Init+0x58>)
 80018b0:	601a      	str	r2, [r3, #0]
    hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_I2S3_Init+0x54>)
 80018b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018b8:	605a      	str	r2, [r3, #4]
    hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <MX_I2S3_Init+0x54>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
    hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_I2S3_Init+0x54>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	60da      	str	r2, [r3, #12]
    hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80018c6:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <MX_I2S3_Init+0x54>)
 80018c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018cc:	611a      	str	r2, [r3, #16]
    hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <MX_I2S3_Init+0x54>)
 80018d0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80018d4:	615a      	str	r2, [r3, #20]
    hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_I2S3_Init+0x54>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
    hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_I2S3_Init+0x54>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
    hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_I2S3_Init+0x54>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
    if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_I2S3_Init+0x54>)
 80018ea:	f004 fb7b 	bl	8005fe4 <HAL_I2S_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2S3_Init+0x50>
        Error_Handler();
 80018f4:	f000 fa5e 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN I2S3_Init 2 */

    /* USER CODE END I2S3_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	200015ec 	.word	0x200015ec
 8001900:	40003c00 	.word	0x40003c00

08001904 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	605a      	str	r2, [r3, #4]
 8001914:	609a      	str	r2, [r3, #8]
 8001916:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001918:	463b      	mov	r3, r7
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <MX_TIM3_Init+0x94>)
 8001922:	4a1e      	ldr	r2, [pc, #120]	; (800199c <MX_TIM3_Init+0x98>)
 8001924:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = TIM3_PRESCALER;
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <MX_TIM3_Init+0x94>)
 8001928:	22ee      	movs	r2, #238	; 0xee
 800192a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <MX_TIM3_Init+0x94>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = TIM3_PERIOD;
 8001932:	4b19      	ldr	r3, [pc, #100]	; (8001998 <MX_TIM3_Init+0x94>)
 8001934:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001938:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b17      	ldr	r3, [pc, #92]	; (8001998 <MX_TIM3_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <MX_TIM3_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001946:	4814      	ldr	r0, [pc, #80]	; (8001998 <MX_TIM3_Init+0x94>)
 8001948:	f006 f8d0 	bl	8007aec <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM3_Init+0x52>
        Error_Handler();
 8001952:	f000 fa2f 	bl	8001db4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195a:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	4619      	mov	r1, r3
 8001962:	480d      	ldr	r0, [pc, #52]	; (8001998 <MX_TIM3_Init+0x94>)
 8001964:	f006 fb68 	bl	8008038 <HAL_TIM_ConfigClockSource>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM3_Init+0x6e>
        Error_Handler();
 800196e:	f000 fa21 	bl	8001db4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800197a:	463b      	mov	r3, r7
 800197c:	4619      	mov	r1, r3
 800197e:	4806      	ldr	r0, [pc, #24]	; (8001998 <MX_TIM3_Init+0x94>)
 8001980:	f006 ff06 	bl	8008790 <HAL_TIMEx_MasterConfigSynchronization>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM3_Init+0x8a>
            != HAL_OK) {
        Error_Handler();
 800198a:	f000 fa13 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20001544 	.word	0x20001544
 800199c:	40000400 	.word	0x40000400

080019a0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019b4:	463b      	mov	r3, r7
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 80019bc:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <MX_TIM4_Init+0x98>)
 80019c0:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = TIM4_PRESCALER;
 80019c2:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019c4:	22c8      	movs	r2, #200	; 0xc8
 80019c6:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = TIM4_PERIOD;
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019d0:	f240 3252 	movw	r2, #850	; 0x352
 80019d4:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d6:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019d8:	2200      	movs	r2, #0
 80019da:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80019e2:	4814      	ldr	r0, [pc, #80]	; (8001a34 <MX_TIM4_Init+0x94>)
 80019e4:	f006 f882 	bl	8007aec <HAL_TIM_Base_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM4_Init+0x52>
        Error_Handler();
 80019ee:	f000 f9e1 	bl	8001db4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f6:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	4619      	mov	r1, r3
 80019fe:	480d      	ldr	r0, [pc, #52]	; (8001a34 <MX_TIM4_Init+0x94>)
 8001a00:	f006 fb1a 	bl	8008038 <HAL_TIM_ConfigClockSource>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM4_Init+0x6e>
        Error_Handler();
 8001a0a:	f000 f9d3 	bl	8001db4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001a16:	463b      	mov	r3, r7
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4806      	ldr	r0, [pc, #24]	; (8001a34 <MX_TIM4_Init+0x94>)
 8001a1c:	f006 feb8 	bl	8008790 <HAL_TIMEx_MasterConfigSynchronization>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM4_Init+0x8a>
            != HAL_OK) {
        Error_Handler();
 8001a26:	f000 f9c5 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200013dc 	.word	0x200013dc
 8001a38:	40000800 	.word	0x40000800

08001a3c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08a      	sub	sp, #40	; 0x28
 8001a40:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	615a      	str	r2, [r3, #20]
 8001a5c:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8001a5e:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a60:	4a2d      	ldr	r2, [pc, #180]	; (8001b18 <MX_TIM5_Init+0xdc>)
 8001a62:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = TIM5_PRESCALER;
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a66:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a6a:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b29      	ldr	r3, [pc, #164]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = TIM5_PERIOD;
 8001a72:	4b28      	ldr	r3, [pc, #160]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a74:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001a78:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001a86:	4823      	ldr	r0, [pc, #140]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001a88:	f006 f8aa 	bl	8007be0 <HAL_TIM_PWM_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM5_Init+0x5a>
        Error_Handler();
 8001a92:	f000 f98f 	bl	8001db4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8001a9e:	f107 0320 	add.w	r3, r7, #32
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481b      	ldr	r0, [pc, #108]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001aa6:	f006 fe73 	bl	8008790 <HAL_TIMEx_MasterConfigSynchronization>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM5_Init+0x78>
            != HAL_OK) {
        Error_Handler();
 8001ab0:	f000 f980 	bl	8001db4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab4:	2360      	movs	r3, #96	; 0x60
 8001ab6:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4812      	ldr	r0, [pc, #72]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001acc:	f006 f9ee 	bl	8007eac <HAL_TIM_PWM_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM5_Init+0x9e>
            != HAL_OK) {
        Error_Handler();
 8001ad6:	f000 f96d 	bl	8001db4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 8001ada:	1d3b      	adds	r3, r7, #4
 8001adc:	2208      	movs	r2, #8
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001ae2:	f006 f9e3 	bl	8007eac <HAL_TIM_PWM_ConfigChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM5_Init+0xb4>
            != HAL_OK) {
        Error_Handler();
 8001aec:	f000 f962 	bl	8001db4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8001af0:	1d3b      	adds	r3, r7, #4
 8001af2:	220c      	movs	r2, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	4807      	ldr	r0, [pc, #28]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001af8:	f006 f9d8 	bl	8007eac <HAL_TIM_PWM_ConfigChannel>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM5_Init+0xca>
            != HAL_OK) {
        Error_Handler();
 8001b02:	f000 f957 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */
    HAL_TIM_MspPostInit(&htim5);
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <MX_TIM5_Init+0xd8>)
 8001b08:	f000 fb3e 	bl	8002188 <HAL_TIM_MspPostInit>

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20001504 	.word	0x20001504
 8001b18:	40000c00 	.word	0x40000c00

08001b1c <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    /* USER CODE END TIM10_Init 0 */

    /* USER CODE BEGIN TIM10_Init 1 */

    /* USER CODE END TIM10_Init 1 */
    htim10.Instance = TIM10;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <MX_TIM10_Init+0x44>)
 8001b24:	601a      	str	r2, [r3, #0]
    htim10.Init.Prescaler = TIM10_PRESCALER;
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b28:	f240 3252 	movw	r2, #850	; 0x352
 8001b2c:	605a      	str	r2, [r3, #4]
    htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
    htim10.Init.Period = TIM10_PERIOD;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b36:	f240 3252 	movw	r2, #850	; 0x352
 8001b3a:	60da      	str	r2, [r3, #12]
    htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	611a      	str	r2, [r3, #16]
    htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b42:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001b48:	4804      	ldr	r0, [pc, #16]	; (8001b5c <MX_TIM10_Init+0x40>)
 8001b4a:	f005 ffcf 	bl	8007aec <HAL_TIM_Base_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM10_Init+0x3c>
        Error_Handler();
 8001b54:	f000 f92e 	bl	8001db4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM10_Init 2 */

    /* USER CODE END TIM10_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20001470 	.word	0x20001470
 8001b60:	40014400 	.word	0x40014400

08001b64 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a0b      	ldr	r2, [pc, #44]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_DMA_Init+0x3c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Stream5_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2010      	movs	r0, #16
 8001b8c:	f000 fe9f 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b90:	2010      	movs	r0, #16
 8001b92:	f000 feb8 	bl	8002906 <HAL_NVIC_EnableIRQ>

}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	4b77      	ldr	r3, [pc, #476]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a76      	ldr	r2, [pc, #472]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b74      	ldr	r3, [pc, #464]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b70      	ldr	r3, [pc, #448]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a6f      	ldr	r2, [pc, #444]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b69      	ldr	r3, [pc, #420]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a68      	ldr	r2, [pc, #416]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b66      	ldr	r3, [pc, #408]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a61      	ldr	r2, [pc, #388]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a5a      	ldr	r2, [pc, #360]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b58      	ldr	r3, [pc, #352]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a53      	ldr	r2, [pc, #332]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b51      	ldr	r3, [pc, #324]	; (8001d9c <MX_GPIO_Init+0x1f8>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOC, USB_power_Pin | dir_Pin | step_Pin,
 8001c62:	2200      	movs	r2, #0
 8001c64:	f240 1141 	movw	r1, #321	; 0x141
 8001c68:	484d      	ldr	r0, [pc, #308]	; (8001da0 <MX_GPIO_Init+0x1fc>)
 8001c6a:	f001 fbc7 	bl	80033fc <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOE,
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f64a 2180 	movw	r1, #43648	; 0xaa80
 8001c74:	484b      	ldr	r0, [pc, #300]	; (8001da4 <MX_GPIO_Init+0x200>)
 8001c76:	f001 fbc1 	bl	80033fc <HAL_GPIO_WritePin>
            pump_relay1_Pin | pump_relay2_Pin | pump_relay3_Pin
                    | pump_relay4_Pin | pump_relay5_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD,
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001c80:	4849      	ldr	r0, [pc, #292]	; (8001da8 <MX_GPIO_Init+0x204>)
 8001c82:	f001 fbbb 	bl	80033fc <HAL_GPIO_WritePin>
            GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
                    | Audio_RST_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c8c:	4847      	ldr	r0, [pc, #284]	; (8001dac <MX_GPIO_Init+0x208>)
 8001c8e:	f001 fbb5 	bl	80033fc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : button_left_Pin button_select_Pin button_right_Pin */
    GPIO_InitStruct.Pin =
 8001c92:	232a      	movs	r3, #42	; 0x2a
 8001c94:	61fb      	str	r3, [r7, #28]
            button_left_Pin | button_select_Pin | button_right_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c96:	4b46      	ldr	r3, [pc, #280]	; (8001db0 <MX_GPIO_Init+0x20c>)
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	483f      	ldr	r0, [pc, #252]	; (8001da4 <MX_GPIO_Init+0x200>)
 8001ca6:	f001 fa27 	bl	80030f8 <HAL_GPIO_Init>

    /*Configure GPIO pins : USB_power_Pin dir_Pin step_Pin */
    GPIO_InitStruct.Pin = USB_power_Pin | dir_Pin | step_Pin;
 8001caa:	f240 1341 	movw	r3, #321	; 0x141
 8001cae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 031c 	add.w	r3, r7, #28
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4837      	ldr	r0, [pc, #220]	; (8001da0 <MX_GPIO_Init+0x1fc>)
 8001cc4:	f001 fa18 	bl	80030f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 031c 	add.w	r3, r7, #28
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4834      	ldr	r0, [pc, #208]	; (8001dac <MX_GPIO_Init+0x208>)
 8001cdc:	f001 fa0c 	bl	80030f8 <HAL_GPIO_Init>

    /*Configure GPIO pins : pump_relay1_Pin pump_relay2_Pin pump_relay3_Pin pump_relay4_Pin
     pump_relay5_Pin */
    GPIO_InitStruct.Pin = pump_relay1_Pin | pump_relay2_Pin | pump_relay3_Pin
 8001ce0:	f64a 2380 	movw	r3, #43648	; 0xaa80
 8001ce4:	61fb      	str	r3, [r7, #28]
            | pump_relay4_Pin | pump_relay5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ce6:	2311      	movs	r3, #17
 8001ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	482a      	ldr	r0, [pc, #168]	; (8001da4 <MX_GPIO_Init+0x200>)
 8001cfa:	f001 f9fd 	bl	80030f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : endstop_Pin */
    GPIO_InitStruct.Pin = endstop_Pin;
 8001cfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <MX_GPIO_Init+0x20c>)
 8001d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(endstop_GPIO_Port, &GPIO_InitStruct);
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4825      	ldr	r0, [pc, #148]	; (8001da8 <MX_GPIO_Init+0x204>)
 8001d14:	f001 f9f0 	bl	80030f8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PD12 PD13 PD14 PD15
     Audio_RST_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 8001d18:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d1c:	61fb      	str	r3, [r7, #28]
            | Audio_RST_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	481d      	ldr	r0, [pc, #116]	; (8001da8 <MX_GPIO_Init+0x204>)
 8001d32:	f001 f9e1 	bl	80030f8 <HAL_GPIO_Init>

    /*Configure GPIO pin : slp_rst_Pin */
    GPIO_InitStruct.Pin = slp_rst_Pin;
 8001d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(slp_rst_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4817      	ldr	r0, [pc, #92]	; (8001dac <MX_GPIO_Init+0x208>)
 8001d50:	f001 f9d2 	bl	80030f8 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2100      	movs	r1, #0
 8001d58:	2007      	movs	r0, #7
 8001d5a:	f000 fdb8 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d5e:	2007      	movs	r0, #7
 8001d60:	f000 fdd1 	bl	8002906 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2009      	movs	r0, #9
 8001d6a:	f000 fdb0 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001d6e:	2009      	movs	r0, #9
 8001d70:	f000 fdc9 	bl	8002906 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2017      	movs	r0, #23
 8001d7a:	f000 fda8 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d7e:	2017      	movs	r0, #23
 8001d80:	f000 fdc1 	bl	8002906 <HAL_NVIC_EnableIRQ>

    HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2028      	movs	r0, #40	; 0x28
 8001d8a:	f000 fda0 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d8e:	2028      	movs	r0, #40	; 0x28
 8001d90:	f000 fdb9 	bl	8002906 <HAL_NVIC_EnableIRQ>

}
 8001d94:	bf00      	nop
 8001d96:	3730      	adds	r7, #48	; 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020800 	.word	0x40020800
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40020c00 	.word	0x40020c00
 8001dac:	40020000 	.word	0x40020000
 8001db0:	10110000 	.word	0x10110000

08001db4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
	...

08001dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_MspInit+0x4c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_MspInit+0x4c>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	603b      	str	r3, [r7, #0]
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_MspInit+0x4c>)
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_MspInit+0x4c>)
 8001df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df4:	6413      	str	r3, [r2, #64]	; 0x40
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e02:	2007      	movs	r0, #7
 8001e04:	f000 fd58 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800

08001e14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3b      	ldr	r2, [pc, #236]	; (8001f20 <HAL_I2C_MspInit+0x10c>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12d      	bne.n	8001e92 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a39      	ldr	r2, [pc, #228]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2X1_SCL_Pin|I2C1_SDA_Pin;
 8001e52:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e58:	2312      	movs	r3, #18
 8001e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e60:	2303      	movs	r3, #3
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e64:	2304      	movs	r3, #4
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	482e      	ldr	r0, [pc, #184]	; (8001f28 <HAL_I2C_MspInit+0x114>)
 8001e70:	f001 f942 	bl	80030f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7c:	4a29      	ldr	r2, [pc, #164]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001e7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e82:	6413      	str	r3, [r2, #64]	; 0x40
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e90:	e041      	b.n	8001f16 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_I2C_MspInit+0x118>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d13c      	bne.n	8001f16 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001ea6:	f043 0302 	orr.w	r3, r3, #2
 8001eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebe:	2312      	movs	r3, #18
 8001ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4814      	ldr	r0, [pc, #80]	; (8001f28 <HAL_I2C_MspInit+0x114>)
 8001ed6:	f001 f90f 	bl	80030f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001eda:	2308      	movs	r3, #8
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ede:	2312      	movs	r3, #18
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001eea:	2309      	movs	r3, #9
 8001eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	480c      	ldr	r0, [pc, #48]	; (8001f28 <HAL_I2C_MspInit+0x114>)
 8001ef6:	f001 f8ff 	bl	80030f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a08      	ldr	r2, [pc, #32]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001f04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_I2C_MspInit+0x110>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	bf00      	nop
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40005400 	.word	0x40005400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40005800 	.word	0x40005800

08001f30 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08a      	sub	sp, #40	; 0x28
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a45      	ldr	r2, [pc, #276]	; (8002064 <HAL_I2S_MspInit+0x134>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	f040 8084 	bne.w	800205c <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	4a42      	ldr	r2, [pc, #264]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f62:	6413      	str	r3, [r2, #64]	; 0x40
 8001f64:	4b40      	ldr	r3, [pc, #256]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4a3b      	ldr	r2, [pc, #236]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	4b35      	ldr	r3, [pc, #212]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	4a34      	ldr	r2, [pc, #208]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_I2S_MspInit+0x138>)
 8001f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001fa8:	2310      	movs	r3, #16
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fac:	2302      	movs	r3, #2
 8001fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fb8:	2306      	movs	r3, #6
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	482a      	ldr	r0, [pc, #168]	; (800206c <HAL_I2S_MspInit+0x13c>)
 8001fc4:	f001 f898 	bl	80030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_CK_Pin|I2S3_SD_Pin;
 8001fc8:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fda:	2306      	movs	r3, #6
 8001fdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4822      	ldr	r0, [pc, #136]	; (8002070 <HAL_I2S_MspInit+0x140>)
 8001fe6:	f001 f887 	bl	80030f8 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8001fec:	4a22      	ldr	r2, [pc, #136]	; (8002078 <HAL_I2S_MspInit+0x148>)
 8001fee:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ff6:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8001ff8:	2240      	movs	r2, #64	; 0x40
 8001ffa:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002002:	4b1c      	ldr	r3, [pc, #112]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002004:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002008:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <HAL_I2S_MspInit+0x144>)
 800200c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002010:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002018:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800201a:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_I2S_MspInit+0x144>)
 800201c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002020:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002022:	4b14      	ldr	r3, [pc, #80]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002028:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_I2S_MspInit+0x144>)
 800202a:	2204      	movs	r2, #4
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800202e:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002030:	2203      	movs	r2, #3
 8002032:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002034:	4b0f      	ldr	r3, [pc, #60]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002036:	2200      	movs	r2, #0
 8002038:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800203a:	4b0e      	ldr	r3, [pc, #56]	; (8002074 <HAL_I2S_MspInit+0x144>)
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002042:	f000 fc7b 	bl	800293c <HAL_DMA_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 800204c:	f7ff feb2 	bl	8001db4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a08      	ldr	r2, [pc, #32]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_I2S_MspInit+0x144>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800205c:	bf00      	nop
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40003c00 	.word	0x40003c00
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40020800 	.word	0x40020800
 8002074:	20001584 	.word	0x20001584
 8002078:	40026088 	.word	0x40026088

0800207c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_TIM_Base_MspInit+0xb8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d116      	bne.n	80020bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 8002098:	f043 0302 	orr.w	r3, r3, #2
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b26      	ldr	r3, [pc, #152]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	201d      	movs	r0, #29
 80020b0:	f000 fc0d 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020b4:	201d      	movs	r0, #29
 80020b6:	f000 fc26 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80020ba:	e036      	b.n	800212a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1e      	ldr	r2, [pc, #120]	; (800213c <HAL_TIM_Base_MspInit+0xc0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d116      	bne.n	80020f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
 80020ca:	4b1b      	ldr	r3, [pc, #108]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a1a      	ldr	r2, [pc, #104]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	201e      	movs	r0, #30
 80020e8:	f000 fbf1 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020ec:	201e      	movs	r0, #30
 80020ee:	f000 fc0a 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 80020f2:	e01a      	b.n	800212a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_TIM_Base_MspInit+0xc4>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d115      	bne.n	800212a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002106:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	6453      	str	r3, [r2, #68]	; 0x44
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <HAL_TIM_Base_MspInit+0xbc>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800211a:	2200      	movs	r2, #0
 800211c:	2100      	movs	r1, #0
 800211e:	2019      	movs	r0, #25
 8002120:	f000 fbd5 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002124:	2019      	movs	r0, #25
 8002126:	f000 fbee 	bl	8002906 <HAL_NVIC_EnableIRQ>
}
 800212a:	bf00      	nop
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40000400 	.word	0x40000400
 8002138:	40023800 	.word	0x40023800
 800213c:	40000800 	.word	0x40000800
 8002140:	40014400 	.word	0x40014400

08002144 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_TIM_PWM_MspInit+0x3c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10d      	bne.n	8002172 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_TIM_PWM_MspInit+0x40>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_TIM_PWM_MspInit+0x40>)
 8002160:	f043 0308 	orr.w	r3, r3, #8
 8002164:	6413      	str	r3, [r2, #64]	; 0x40
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <HAL_TIM_PWM_MspInit+0x40>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40000c00 	.word	0x40000c00
 8002184:	40023800 	.word	0x40023800

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d11d      	bne.n	80021e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021c6:	230e      	movs	r3, #14
 80021c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ca:	2302      	movs	r3, #2
 80021cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021d6:	2302      	movs	r3, #2
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_TIM_MspPostInit+0x70>)
 80021e2:	f000 ff89 	bl	80030f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40000c00 	.word	0x40000c00
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220e:	e7fe      	b.n	800220e <HardFault_Handler+0x4>

08002210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002214:	e7fe      	b.n	8002214 <MemManage_Handler+0x4>

08002216 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221a:	e7fe      	b.n	800221a <BusFault_Handler+0x4>

0800221c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002220:	e7fe      	b.n	8002220 <UsageFault_Handler+0x4>

08002222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002222:	b480      	push	{r7}
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002250:	f000 fa20 	bl	8002694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}

08002258 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800225c:	2002      	movs	r0, #2
 800225e:	f001 f901 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}

08002266 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800226a:	2008      	movs	r0, #8
 800226c:	f001 f8fa 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002270:	bf00      	nop
 8002272:	bd80      	pop	{r7, pc}

08002274 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8002278:	4802      	ldr	r0, [pc, #8]	; (8002284 <DMA1_Stream5_IRQHandler+0x10>)
 800227a:	f000 fcd5 	bl	8002c28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	20001584 	.word	0x20001584

08002288 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800228c:	2020      	movs	r0, #32
 800228e:	f001 f8e9 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800229c:	4802      	ldr	r0, [pc, #8]	; (80022a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800229e:	f005 fcfd 	bl	8007c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20001470 	.word	0x20001470

080022ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b0:	4802      	ldr	r0, [pc, #8]	; (80022bc <TIM3_IRQHandler+0x10>)
 80022b2:	f005 fcf3 	bl	8007c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20001544 	.word	0x20001544

080022c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <TIM4_IRQHandler+0x10>)
 80022c6:	f005 fce9 	bl	8007c9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200013dc 	.word	0x200013dc

080022d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80022d8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80022dc:	f001 f8c2 	bl	8003464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <OTG_FS_IRQHandler+0x10>)
 80022ea:	f001 fb63 	bl	80039b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20001e78 	.word	0x20001e78

080022f8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <_sbrk+0x50>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d102      	bne.n	800230e <_sbrk+0x16>
		heap_end = &end;
 8002308:	4b0f      	ldr	r3, [pc, #60]	; (8002348 <_sbrk+0x50>)
 800230a:	4a10      	ldr	r2, [pc, #64]	; (800234c <_sbrk+0x54>)
 800230c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <_sbrk+0x50>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <_sbrk+0x50>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	466a      	mov	r2, sp
 800231e:	4293      	cmp	r3, r2
 8002320:	d907      	bls.n	8002332 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002322:	f00d f8cf 	bl	800f4c4 <__errno>
 8002326:	4602      	mov	r2, r0
 8002328:	230c      	movs	r3, #12
 800232a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	e006      	b.n	8002340 <_sbrk+0x48>
	}

	heap_end += incr;
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <_sbrk+0x50>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	4a03      	ldr	r2, [pc, #12]	; (8002348 <_sbrk+0x50>)
 800233c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800233e:	68fb      	ldr	r3, [r7, #12]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	2000014c 	.word	0x2000014c
 800234c:	20002140 	.word	0x20002140

08002350 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <SystemInit+0x28>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235a:	4a07      	ldr	r2, [pc, #28]	; (8002378 <SystemInit+0x28>)
 800235c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <SystemInit+0x28>)
 8002366:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800236a:	609a      	str	r2, [r3, #8]
#endif
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	e000ed00 	.word	0xe000ed00

0800237c <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8002380:	4b05      	ldr	r3, [pc, #20]	; (8002398 <wavPlayer_reset+0x1c>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <wavPlayer_reset+0x20>)
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	20001384 	.word	0x20001384
 800239c:	2000138c 	.word	0x2000138c

080023a0 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b08e      	sub	sp, #56	; 0x38
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 80023ac:	2201      	movs	r2, #1
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	480d      	ldr	r0, [pc, #52]	; (80023e8 <wavPlayer_fileSelect+0x48>)
 80023b2:	f00b ff41 	bl	800e238 <f_open>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 80023bc:	2300      	movs	r3, #0
 80023be:	e00e      	b.n	80023de <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	f107 010c 	add.w	r1, r7, #12
 80023c8:	222c      	movs	r2, #44	; 0x2c
 80023ca:	4807      	ldr	r0, [pc, #28]	; (80023e8 <wavPlayer_fileSelect+0x48>)
 80023cc:	f00c f8f2 	bl	800e5b4 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4a06      	ldr	r2, [pc, #24]	; (80023ec <wavPlayer_fileSelect+0x4c>)
 80023d4:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <wavPlayer_fileSelect+0x50>)
 80023da:	6013      	str	r3, [r2, #0]
  return true;
 80023dc:	2301      	movs	r3, #1
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3738      	adds	r7, #56	; 0x38
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000150 	.word	0x20000150
 80023ec:	20000380 	.word	0x20000380
 80023f0:	20001388 	.word	0x20001388

080023f4 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  isFinished = false;
 80023f8:	4b10      	ldr	r3, [pc, #64]	; (800243c <wavPlayer_play+0x48>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <wavPlayer_play+0x4c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fbba 	bl	8000b7c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8002408:	2100      	movs	r1, #0
 800240a:	480e      	ldr	r0, [pc, #56]	; (8002444 <wavPlayer_play+0x50>)
 800240c:	f00c fab9 	bl	800e982 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <wavPlayer_play+0x54>)
 8002412:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002416:	490d      	ldr	r1, [pc, #52]	; (800244c <wavPlayer_play+0x58>)
 8002418:	480a      	ldr	r0, [pc, #40]	; (8002444 <wavPlayer_play+0x50>)
 800241a:	f00c f8cb 	bl	800e5b4 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <wavPlayer_play+0x5c>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b09      	ldr	r3, [pc, #36]	; (8002448 <wavPlayer_play+0x54>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <wavPlayer_play+0x60>)
 800242a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 800242c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002430:	4806      	ldr	r0, [pc, #24]	; (800244c <wavPlayer_play+0x58>)
 8002432:	f7fe fbb3 	bl	8000b9c <audioI2S_play>
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20001390 	.word	0x20001390
 8002440:	20001388 	.word	0x20001388
 8002444:	20000150 	.word	0x20000150
 8002448:	2000138c 	.word	0x2000138c
 800244c:	20000384 	.word	0x20000384
 8002450:	20000380 	.word	0x20000380
 8002454:	20001384 	.word	0x20001384

08002458 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 800245c:	4b30      	ldr	r3, [pc, #192]	; (8002520 <wavPlayer_process+0xc8>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b03      	cmp	r3, #3
 8002464:	d859      	bhi.n	800251a <wavPlayer_process+0xc2>
 8002466:	a201      	add	r2, pc, #4	; (adr r2, 800246c <wavPlayer_process+0x14>)
 8002468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246c:	08002519 	.word	0x08002519
 8002470:	0800247d 	.word	0x0800247d
 8002474:	080024bf 	.word	0x080024bf
 8002478:	08002501 	.word	0x08002501
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 800247c:	4b29      	ldr	r3, [pc, #164]	; (8002524 <wavPlayer_process+0xcc>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8002482:	4b27      	ldr	r3, [pc, #156]	; (8002520 <wavPlayer_process+0xc8>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8002488:	4b26      	ldr	r3, [pc, #152]	; (8002524 <wavPlayer_process+0xcc>)
 800248a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800248e:	4926      	ldr	r1, [pc, #152]	; (8002528 <wavPlayer_process+0xd0>)
 8002490:	4826      	ldr	r0, [pc, #152]	; (800252c <wavPlayer_process+0xd4>)
 8002492:	f00c f88f 	bl	800e5b4 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8002496:	4b26      	ldr	r3, [pc, #152]	; (8002530 <wavPlayer_process+0xd8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800249e:	d907      	bls.n	80024b0 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 80024a0:	4b23      	ldr	r3, [pc, #140]	; (8002530 <wavPlayer_process+0xd8>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <wavPlayer_process+0xcc>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	4a21      	ldr	r2, [pc, #132]	; (8002530 <wavPlayer_process+0xd8>)
 80024ac:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80024ae:	e034      	b.n	800251a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <wavPlayer_process+0xd8>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80024b6:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <wavPlayer_process+0xc8>)
 80024b8:	2203      	movs	r2, #3
 80024ba:	701a      	strb	r2, [r3, #0]
    break;
 80024bc:	e02d      	b.n	800251a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 80024be:	4b19      	ldr	r3, [pc, #100]	; (8002524 <wavPlayer_process+0xcc>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80024c4:	4b16      	ldr	r3, [pc, #88]	; (8002520 <wavPlayer_process+0xc8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80024ca:	4b16      	ldr	r3, [pc, #88]	; (8002524 <wavPlayer_process+0xcc>)
 80024cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024d0:	4918      	ldr	r1, [pc, #96]	; (8002534 <wavPlayer_process+0xdc>)
 80024d2:	4816      	ldr	r0, [pc, #88]	; (800252c <wavPlayer_process+0xd4>)
 80024d4:	f00c f86e 	bl	800e5b4 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <wavPlayer_process+0xd8>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024e0:	d907      	bls.n	80024f2 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 80024e2:	4b13      	ldr	r3, [pc, #76]	; (8002530 <wavPlayer_process+0xd8>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	4b0f      	ldr	r3, [pc, #60]	; (8002524 <wavPlayer_process+0xcc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	4a10      	ldr	r2, [pc, #64]	; (8002530 <wavPlayer_process+0xd8>)
 80024ee:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80024f0:	e013      	b.n	800251a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80024f2:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <wavPlayer_process+0xd8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <wavPlayer_process+0xc8>)
 80024fa:	2203      	movs	r2, #3
 80024fc:	701a      	strb	r2, [r3, #0]
    break;
 80024fe:	e00c      	b.n	800251a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8002500:	480a      	ldr	r0, [pc, #40]	; (800252c <wavPlayer_process+0xd4>)
 8002502:	f00c fa14 	bl	800e92e <f_close>
    wavPlayer_reset();
 8002506:	f7ff ff39 	bl	800237c <wavPlayer_reset>
    isFinished = true;
 800250a:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <wavPlayer_process+0xe0>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <wavPlayer_process+0xc8>)
 8002512:	2200      	movs	r2, #0
 8002514:	701a      	strb	r2, [r3, #0]
    break;
 8002516:	e000      	b.n	800251a <wavPlayer_process+0xc2>
    break;
 8002518:	bf00      	nop
  }
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	20001391 	.word	0x20001391
 8002524:	2000138c 	.word	0x2000138c
 8002528:	20000384 	.word	0x20000384
 800252c:	20000150 	.word	0x20000150
 8002530:	20001384 	.word	0x20001384
 8002534:	20000b84 	.word	0x20000b84
 8002538:	20001390 	.word	0x20001390

0800253c <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8002540:	f7fe fb4a 	bl	8000bd8 <audioI2S_stop>
  isFinished = true;
 8002544:	4b02      	ldr	r3, [pc, #8]	; (8002550 <wavPlayer_stop+0x14>)
 8002546:	2201      	movs	r2, #1
 8002548:	701a      	strb	r2, [r3, #0]
}
 800254a:	bf00      	nop
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	20001390 	.word	0x20001390

08002554 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return isFinished;
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <wavPlayer_isFinished+0x14>)
 800255a:	781b      	ldrb	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20001390 	.word	0x20001390

0800256c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <audioI2S_halfTransfer_Callback+0x14>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	20001391 	.word	0x20001391

08002584 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8002588:	4b03      	ldr	r3, [pc, #12]	; (8002598 <audioI2S_fullTransfer_Callback+0x14>)
 800258a:	2202      	movs	r2, #2
 800258c:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 800258e:	bf00      	nop
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	20001391 	.word	0x20001391

0800259c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800259c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80025a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80025a2:	e003      	b.n	80025ac <LoopCopyDataInit>

080025a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80025a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80025a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80025aa:	3104      	adds	r1, #4

080025ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80025ac:	480b      	ldr	r0, [pc, #44]	; (80025dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80025b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80025b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025b4:	d3f6      	bcc.n	80025a4 <CopyDataInit>
  ldr  r2, =_sbss
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80025b8:	e002      	b.n	80025c0 <LoopFillZerobss>

080025ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025bc:	f842 3b04 	str.w	r3, [r2], #4

080025c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80025c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025c4:	d3f9      	bcc.n	80025ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80025c6:	f7ff fec3 	bl	8002350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025ca:	f00c ff81 	bl	800f4d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025ce:	f7fe fe6f 	bl	80012b0 <main>
  bx  lr    
 80025d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80025d8:	0800ffb4 	.word	0x0800ffb4
  ldr  r0, =_sdata
 80025dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80025e0:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80025e4:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 80025e8:	20002140 	.word	0x20002140

080025ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025ec:	e7fe      	b.n	80025ec <ADC_IRQHandler>
	...

080025f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <HAL_Init+0x40>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a0d      	ldr	r2, [pc, #52]	; (8002630 <HAL_Init+0x40>)
 80025fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_Init+0x40>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <HAL_Init+0x40>)
 8002606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <HAL_Init+0x40>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <HAL_Init+0x40>)
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002618:	2003      	movs	r0, #3
 800261a:	f000 f94d 	bl	80028b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800261e:	2000      	movs	r0, #0
 8002620:	f000 f808 	bl	8002634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002624:	f7ff fbce 	bl	8001dc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00

08002634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800263c:	4b12      	ldr	r3, [pc, #72]	; (8002688 <HAL_InitTick+0x54>)
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_InitTick+0x58>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	4619      	mov	r1, r3
 8002646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800264a:	fbb3 f3f1 	udiv	r3, r3, r1
 800264e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002652:	4618      	mov	r0, r3
 8002654:	f000 f965 	bl	8002922 <HAL_SYSTICK_Config>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e00e      	b.n	8002680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b0f      	cmp	r3, #15
 8002666:	d80a      	bhi.n	800267e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002668:	2200      	movs	r2, #0
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f000 f92d 	bl	80028ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002674:	4a06      	ldr	r2, [pc, #24]	; (8002690 <HAL_InitTick+0x5c>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	e000      	b.n	8002680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000014 	.word	0x20000014
 800268c:	2000001c 	.word	0x2000001c
 8002690:	20000018 	.word	0x20000018

08002694 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <HAL_IncTick+0x20>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b06      	ldr	r3, [pc, #24]	; (80026b8 <HAL_IncTick+0x24>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4413      	add	r3, r2
 80026a4:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <HAL_IncTick+0x24>)
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	2000001c 	.word	0x2000001c
 80026b8:	20001634 	.word	0x20001634

080026bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return uwTick;
 80026c0:	4b03      	ldr	r3, [pc, #12]	; (80026d0 <HAL_GetTick+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20001634 	.word	0x20001634

080026d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026dc:	f7ff ffee 	bl	80026bc <HAL_GetTick>
 80026e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d005      	beq.n	80026fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <HAL_Delay+0x40>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4413      	add	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026fa:	bf00      	nop
 80026fc:	f7ff ffde 	bl	80026bc <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	429a      	cmp	r2, r3
 800270a:	d8f7      	bhi.n	80026fc <HAL_Delay+0x28>
  {
  }
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000001c 	.word	0x2000001c

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800274a:	4a04      	ldr	r2, [pc, #16]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	60d3      	str	r3, [r2, #12]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
	...

08002874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	3b01      	subs	r3, #1
 8002880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002884:	d301      	bcc.n	800288a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002886:	2301      	movs	r3, #1
 8002888:	e00f      	b.n	80028aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800288a:	4a0a      	ldr	r2, [pc, #40]	; (80028b4 <SysTick_Config+0x40>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3b01      	subs	r3, #1
 8002890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002892:	210f      	movs	r1, #15
 8002894:	f04f 30ff 	mov.w	r0, #4294967295
 8002898:	f7ff ff8e 	bl	80027b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <SysTick_Config+0x40>)
 800289e:	2200      	movs	r2, #0
 80028a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <SysTick_Config+0x40>)
 80028a4:	2207      	movs	r2, #7
 80028a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	e000e010 	.word	0xe000e010

080028b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff ff29 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b086      	sub	sp, #24
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	607a      	str	r2, [r7, #4]
 80028da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028e0:	f7ff ff3e 	bl	8002760 <__NVIC_GetPriorityGrouping>
 80028e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	68b9      	ldr	r1, [r7, #8]
 80028ea:	6978      	ldr	r0, [r7, #20]
 80028ec:	f7ff ff8e 	bl	800280c <NVIC_EncodePriority>
 80028f0:	4602      	mov	r2, r0
 80028f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff5d 	bl	80027b8 <__NVIC_SetPriority>
}
 80028fe:	bf00      	nop
 8002900:	3718      	adds	r7, #24
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff31 	bl	800277c <__NVIC_EnableIRQ>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ffa2 	bl	8002874 <SysTick_Config>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff feb8 	bl	80026bc <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e099      	b.n	8002a8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2202      	movs	r2, #2
 8002964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f022 0201 	bic.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002978:	e00f      	b.n	800299a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800297a:	f7ff fe9f 	bl	80026bc <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b05      	cmp	r3, #5
 8002986:	d908      	bls.n	800299a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2220      	movs	r2, #32
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2203      	movs	r2, #3
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e078      	b.n	8002a8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e8      	bne.n	800297a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <HAL_DMA_Init+0x158>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	2b04      	cmp	r3, #4
 80029f2:	d107      	bne.n	8002a04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	4313      	orrs	r3, r2
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0307 	bic.w	r3, r3, #7
 8002a1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	d117      	bne.n	8002a5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00e      	beq.n	8002a5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fadf 	bl	8003004 <DMA_CheckFifoParam>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d008      	beq.n	8002a5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2240      	movs	r2, #64	; 0x40
 8002a50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e016      	b.n	8002a8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa96 	bl	8002f98 <DMA_CalcBaseAndBitshift>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a74:	223f      	movs	r2, #63	; 0x3f
 8002a76:	409a      	lsls	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	f010803f 	.word	0xf010803f

08002a98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_Start_IT+0x26>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e040      	b.n	8002b40 <HAL_DMA_Start_IT+0xa8>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d12f      	bne.n	8002b32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	68b9      	ldr	r1, [r7, #8]
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 fa28 	bl	8002f3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	223f      	movs	r2, #63	; 0x3f
 8002af2:	409a      	lsls	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0216 	orr.w	r2, r2, #22
 8002b06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0208 	orr.w	r2, r2, #8
 8002b1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e005      	b.n	8002b3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b56:	f7ff fdb1 	bl	80026bc <HAL_GetTick>
 8002b5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d008      	beq.n	8002b7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2280      	movs	r2, #128	; 0x80
 8002b6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e052      	b.n	8002c20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0216 	bic.w	r2, r2, #22
 8002b88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d103      	bne.n	8002baa <HAL_DMA_Abort+0x62>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0208 	bic.w	r2, r2, #8
 8002bb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bca:	e013      	b.n	8002bf4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bcc:	f7ff fd76 	bl	80026bc <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d90c      	bls.n	8002bf4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e015      	b.n	8002c20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1e4      	bne.n	8002bcc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c06:	223f      	movs	r2, #63	; 0x3f
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c34:	4b92      	ldr	r3, [pc, #584]	; (8002e80 <HAL_DMA_IRQHandler+0x258>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a92      	ldr	r2, [pc, #584]	; (8002e84 <HAL_DMA_IRQHandler+0x25c>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	0a9b      	lsrs	r3, r3, #10
 8002c40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c52:	2208      	movs	r2, #8
 8002c54:	409a      	lsls	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d01a      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d013      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0204 	bic.w	r2, r2, #4
 8002c7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2208      	movs	r2, #8
 8002c82:	409a      	lsls	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	2201      	movs	r2, #1
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d012      	beq.n	8002cca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00b      	beq.n	8002cca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc2:	f043 0202 	orr.w	r2, r3, #2
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cce:	2204      	movs	r2, #4
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d012      	beq.n	8002d00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2204      	movs	r2, #4
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf8:	f043 0204 	orr.w	r2, r3, #4
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	2210      	movs	r2, #16
 8002d06:	409a      	lsls	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d043      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d03c      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d22:	2210      	movs	r2, #16
 8002d24:	409a      	lsls	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d018      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d024      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	4798      	blx	r3
 8002d56:	e01f      	b.n	8002d98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d01b      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	4798      	blx	r3
 8002d68:	e016      	b.n	8002d98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d107      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0208 	bic.w	r2, r2, #8
 8002d86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4013      	ands	r3, r2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 808e 	beq.w	8002ec6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 8086 	beq.w	8002ec6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d136      	bne.n	8002e40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0216 	bic.w	r2, r2, #22
 8002de0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002df0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <HAL_DMA_IRQHandler+0x1da>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d007      	beq.n	8002e12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0208 	bic.w	r2, r2, #8
 8002e10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	223f      	movs	r2, #63	; 0x3f
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d07d      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
        }
        return;
 8002e3e:	e078      	b.n	8002f32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01c      	beq.n	8002e88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d030      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
 8002e6c:	e02b      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d027      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e022      	b.n	8002ec6 <HAL_DMA_IRQHandler+0x29e>
 8002e80:	20000014 	.word	0x20000014
 8002e84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0210 	bic.w	r2, r2, #16
 8002ea4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d032      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2205      	movs	r2, #5
 8002ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0201 	bic.w	r2, r2, #1
 8002ef0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d307      	bcc.n	8002f0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1f2      	bne.n	8002ef2 <HAL_DMA_IRQHandler+0x2ca>
 8002f0c:	e000      	b.n	8002f10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e000      	b.n	8002f34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f32:	bf00      	nop
    }
  }
}
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop

08002f3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]
 8002f48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d108      	bne.n	8002f7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f7a:	e007      	b.n	8002f8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
}
 8002f8c:	bf00      	nop
 8002f8e:	3714      	adds	r7, #20
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3b10      	subs	r3, #16
 8002fa8:	4a14      	ldr	r2, [pc, #80]	; (8002ffc <DMA_CalcBaseAndBitshift+0x64>)
 8002faa:	fba2 2303 	umull	r2, r3, r2, r3
 8002fae:	091b      	lsrs	r3, r3, #4
 8002fb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fb2:	4a13      	ldr	r2, [pc, #76]	; (8003000 <DMA_CalcBaseAndBitshift+0x68>)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d909      	bls.n	8002fda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	1d1a      	adds	r2, r3, #4
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fd8:	e007      	b.n	8002fea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	aaaaaaab 	.word	0xaaaaaaab
 8003000:	0800fed4 	.word	0x0800fed4

08003004 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d11f      	bne.n	800305e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d855      	bhi.n	80030d0 <DMA_CheckFifoParam+0xcc>
 8003024:	a201      	add	r2, pc, #4	; (adr r2, 800302c <DMA_CheckFifoParam+0x28>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	0800303d 	.word	0x0800303d
 8003030:	0800304f 	.word	0x0800304f
 8003034:	0800303d 	.word	0x0800303d
 8003038:	080030d1 	.word	0x080030d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d045      	beq.n	80030d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800304c:	e042      	b.n	80030d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003056:	d13f      	bne.n	80030d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800305c:	e03c      	b.n	80030d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003066:	d121      	bne.n	80030ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b03      	cmp	r3, #3
 800306c:	d836      	bhi.n	80030dc <DMA_CheckFifoParam+0xd8>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <DMA_CheckFifoParam+0x70>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003085 	.word	0x08003085
 8003078:	0800308b 	.word	0x0800308b
 800307c:	08003085 	.word	0x08003085
 8003080:	0800309d 	.word	0x0800309d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e02f      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d024      	beq.n	80030e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800309a:	e021      	b.n	80030e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030a4:	d11e      	bne.n	80030e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030aa:	e01b      	b.n	80030e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d902      	bls.n	80030b8 <DMA_CheckFifoParam+0xb4>
 80030b2:	2b03      	cmp	r3, #3
 80030b4:	d003      	beq.n	80030be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030b6:	e018      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e015      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00e      	beq.n	80030e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
      break;
 80030ce:	e00b      	b.n	80030e8 <DMA_CheckFifoParam+0xe4>
      break;
 80030d0:	bf00      	nop
 80030d2:	e00a      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;
 80030d4:	bf00      	nop
 80030d6:	e008      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;
 80030d8:	bf00      	nop
 80030da:	e006      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;
 80030dc:	bf00      	nop
 80030de:	e004      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;
 80030e0:	bf00      	nop
 80030e2:	e002      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;   
 80030e4:	bf00      	nop
 80030e6:	e000      	b.n	80030ea <DMA_CheckFifoParam+0xe6>
      break;
 80030e8:	bf00      	nop
    }
  } 
  
  return status; 
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e159      	b.n	80033c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	429a      	cmp	r2, r3
 800312e:	f040 8148 	bne.w	80033c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d00b      	beq.n	8003152 <HAL_GPIO_Init+0x5a>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003146:	2b11      	cmp	r3, #17
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b12      	cmp	r3, #18
 8003150:	d130      	bne.n	80031b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	2203      	movs	r2, #3
 800315e:	fa02 f303 	lsl.w	r3, r2, r3
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68da      	ldr	r2, [r3, #12]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa02 f303 	lsl.w	r3, r2, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003188:	2201      	movs	r2, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	4013      	ands	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 0201 	and.w	r2, r3, #1
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	2203      	movs	r2, #3
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_Init+0xfc>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b12      	cmp	r3, #18
 80031f2:	d123      	bne.n	800323c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	220f      	movs	r2, #15
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	2203      	movs	r2, #3
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a2 	beq.w	80033c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b56      	ldr	r3, [pc, #344]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003286:	4a55      	ldr	r2, [pc, #340]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 8003288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800328c:	6453      	str	r3, [r2, #68]	; 0x44
 800328e:	4b53      	ldr	r3, [pc, #332]	; (80033dc <HAL_GPIO_Init+0x2e4>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329a:	4a51      	ldr	r2, [pc, #324]	; (80033e0 <HAL_GPIO_Init+0x2e8>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_GPIO_Init+0x2ec>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d019      	beq.n	80032fa <HAL_GPIO_Init+0x202>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <HAL_GPIO_Init+0x2f0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_GPIO_Init+0x1fe>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a46      	ldr	r2, [pc, #280]	; (80033ec <HAL_GPIO_Init+0x2f4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00d      	beq.n	80032f2 <HAL_GPIO_Init+0x1fa>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a45      	ldr	r2, [pc, #276]	; (80033f0 <HAL_GPIO_Init+0x2f8>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d007      	beq.n	80032ee <HAL_GPIO_Init+0x1f6>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a44      	ldr	r2, [pc, #272]	; (80033f4 <HAL_GPIO_Init+0x2fc>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d101      	bne.n	80032ea <HAL_GPIO_Init+0x1f2>
 80032e6:	2304      	movs	r3, #4
 80032e8:	e008      	b.n	80032fc <HAL_GPIO_Init+0x204>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e006      	b.n	80032fc <HAL_GPIO_Init+0x204>
 80032ee:	2303      	movs	r3, #3
 80032f0:	e004      	b.n	80032fc <HAL_GPIO_Init+0x204>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e002      	b.n	80032fc <HAL_GPIO_Init+0x204>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e000      	b.n	80032fc <HAL_GPIO_Init+0x204>
 80032fa:	2300      	movs	r3, #0
 80032fc:	69fa      	ldr	r2, [r7, #28]
 80032fe:	f002 0203 	and.w	r2, r2, #3
 8003302:	0092      	lsls	r2, r2, #2
 8003304:	4093      	lsls	r3, r2
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800330c:	4934      	ldr	r1, [pc, #208]	; (80033e0 <HAL_GPIO_Init+0x2e8>)
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	089b      	lsrs	r3, r3, #2
 8003312:	3302      	adds	r3, #2
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800331a:	4b37      	ldr	r3, [pc, #220]	; (80033f8 <HAL_GPIO_Init+0x300>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800333e:	4a2e      	ldr	r2, [pc, #184]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003344:	4b2c      	ldr	r3, [pc, #176]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	43db      	mvns	r3, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4013      	ands	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003368:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_GPIO_Init+0x300>)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800336e:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003392:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <HAL_GPIO_Init+0x300>)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003398:	4b17      	ldr	r3, [pc, #92]	; (80033f8 <HAL_GPIO_Init+0x300>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4013      	ands	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033bc:	4a0e      	ldr	r2, [pc, #56]	; (80033f8 <HAL_GPIO_Init+0x300>)
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3301      	adds	r3, #1
 80033c6:	61fb      	str	r3, [r7, #28]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b0f      	cmp	r3, #15
 80033cc:	f67f aea2 	bls.w	8003114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033d0:	bf00      	nop
 80033d2:	3724      	adds	r7, #36	; 0x24
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40013800 	.word	0x40013800
 80033e4:	40020000 	.word	0x40020000
 80033e8:	40020400 	.word	0x40020400
 80033ec:	40020800 	.word	0x40020800
 80033f0:	40020c00 	.word	0x40020c00
 80033f4:	40021000 	.word	0x40021000
 80033f8:	40013c00 	.word	0x40013c00

080033fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	807b      	strh	r3, [r7, #2]
 8003408:	4613      	mov	r3, r2
 800340a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800340c:	787b      	ldrb	r3, [r7, #1]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003412:	887a      	ldrh	r2, [r7, #2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003418:	e003      	b.n	8003422 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800341a:	887b      	ldrh	r3, [r7, #2]
 800341c:	041a      	lsls	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	619a      	str	r2, [r3, #24]
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	887b      	ldrh	r3, [r7, #2]
 8003440:	401a      	ands	r2, r3
 8003442:	887b      	ldrh	r3, [r7, #2]
 8003444:	429a      	cmp	r2, r3
 8003446:	d104      	bne.n	8003452 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003448:	887b      	ldrh	r3, [r7, #2]
 800344a:	041a      	lsls	r2, r3, #16
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003450:	e002      	b.n	8003458 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003452:	887a      	ldrh	r2, [r7, #2]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	619a      	str	r2, [r3, #24]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800346e:	4b08      	ldr	r3, [pc, #32]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003470:	695a      	ldr	r2, [r3, #20]
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	4013      	ands	r3, r2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800347a:	4a05      	ldr	r2, [pc, #20]	; (8003490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800347c:	88fb      	ldrh	r3, [r7, #6]
 800347e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003480:	88fb      	ldrh	r3, [r7, #6]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd fdfc 	bl	8001080 <HAL_GPIO_EXTI_Callback>
  }
}
 8003488:	bf00      	nop
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003496:	b08f      	sub	sp, #60	; 0x3c
 8003498:	af0a      	add	r7, sp, #40	; 0x28
 800349a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e054      	b.n	8003550 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f00b fd21 	bl	800ef08 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2203      	movs	r2, #3
 80034ca:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d102      	bne.n	80034e0 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f005 fa47 	bl	8008978 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	687e      	ldr	r6, [r7, #4]
 80034f2:	466d      	mov	r5, sp
 80034f4:	f106 0410 	add.w	r4, r6, #16
 80034f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003504:	e885 0003 	stmia.w	r5, {r0, r1}
 8003508:	1d33      	adds	r3, r6, #4
 800350a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800350c:	6838      	ldr	r0, [r7, #0]
 800350e:	f005 f9c1 	bl	8008894 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2101      	movs	r1, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f005 fa3e 	bl	800899a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	687e      	ldr	r6, [r7, #4]
 8003526:	466d      	mov	r5, sp
 8003528:	f106 0410 	add.w	r4, r6, #16
 800352c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800352e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003530:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003532:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003534:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003538:	e885 0003 	stmia.w	r5, {r0, r1}
 800353c:	1d33      	adds	r3, r6, #4
 800353e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003540:	6838      	ldr	r0, [r7, #0]
 8003542:	f005 fb51 	bl	8008be8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003558 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b089      	sub	sp, #36	; 0x24
 800355c:	af04      	add	r7, sp, #16
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	4608      	mov	r0, r1
 8003562:	4611      	mov	r1, r2
 8003564:	461a      	mov	r2, r3
 8003566:	4603      	mov	r3, r0
 8003568:	70fb      	strb	r3, [r7, #3]
 800356a:	460b      	mov	r3, r1
 800356c:	70bb      	strb	r3, [r7, #2]
 800356e:	4613      	mov	r3, r2
 8003570:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_HCD_HC_Init+0x28>
 800357c:	2302      	movs	r3, #2
 800357e:	e07f      	b.n	8003680 <HAL_HCD_HC_Init+0x128>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	440b      	add	r3, r1
 8003596:	333d      	adds	r3, #61	; 0x3d
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	3338      	adds	r3, #56	; 0x38
 80035ac:	787a      	ldrb	r2, [r7, #1]
 80035ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80035b0:	78fa      	ldrb	r2, [r7, #3]
 80035b2:	6879      	ldr	r1, [r7, #4]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	440b      	add	r3, r1
 80035be:	3340      	adds	r3, #64	; 0x40
 80035c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80035c2:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	440b      	add	r3, r1
 80035d2:	3339      	adds	r3, #57	; 0x39
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4413      	add	r3, r2
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	440b      	add	r3, r1
 80035e6:	333f      	adds	r3, #63	; 0x3f
 80035e8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80035ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	78bb      	ldrb	r3, [r7, #2]
 80035f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f6:	b2d8      	uxtb	r0, r3
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	4613      	mov	r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	440b      	add	r3, r1
 8003604:	333a      	adds	r3, #58	; 0x3a
 8003606:	4602      	mov	r2, r0
 8003608:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800360a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da0a      	bge.n	8003628 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003612:	78fa      	ldrb	r2, [r7, #3]
 8003614:	6879      	ldr	r1, [r7, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	440b      	add	r3, r1
 8003620:	333b      	adds	r3, #59	; 0x3b
 8003622:	2201      	movs	r2, #1
 8003624:	701a      	strb	r2, [r3, #0]
 8003626:	e009      	b.n	800363c <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	333b      	adds	r3, #59	; 0x3b
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	333c      	adds	r3, #60	; 0x3c
 800364c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003650:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	787c      	ldrb	r4, [r7, #1]
 8003658:	78ba      	ldrb	r2, [r7, #2]
 800365a:	78f9      	ldrb	r1, [r7, #3]
 800365c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003664:	9301      	str	r3, [sp, #4]
 8003666:	f897 3020 	ldrb.w	r3, [r7, #32]
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	4623      	mov	r3, r4
 800366e:	f005 fc3d 	bl	8008eec <USB_HC_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800367e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bd90      	pop	{r4, r7, pc}

08003688 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_HCD_HC_Halt+0x1e>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e00f      	b.n	80036c6 <HAL_HCD_HC_Halt+0x3e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f005 fe77 	bl	80093aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
	...

080036d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	4608      	mov	r0, r1
 80036da:	4611      	mov	r1, r2
 80036dc:	461a      	mov	r2, r3
 80036de:	4603      	mov	r3, r0
 80036e0:	70fb      	strb	r3, [r7, #3]
 80036e2:	460b      	mov	r3, r1
 80036e4:	70bb      	strb	r3, [r7, #2]
 80036e6:	4613      	mov	r3, r2
 80036e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	440b      	add	r3, r1
 80036f8:	333b      	adds	r3, #59	; 0x3b
 80036fa:	78ba      	ldrb	r2, [r7, #2]
 80036fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	440b      	add	r3, r1
 800370c:	333f      	adds	r3, #63	; 0x3f
 800370e:	787a      	ldrb	r2, [r7, #1]
 8003710:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003712:	7c3b      	ldrb	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d114      	bne.n	8003742 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	440b      	add	r3, r1
 8003726:	3342      	adds	r3, #66	; 0x42
 8003728:	2203      	movs	r2, #3
 800372a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	00db      	lsls	r3, r3, #3
 8003738:	440b      	add	r3, r1
 800373a:	333d      	adds	r3, #61	; 0x3d
 800373c:	7f3a      	ldrb	r2, [r7, #28]
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	e009      	b.n	8003756 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003742:	78fa      	ldrb	r2, [r7, #3]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	440b      	add	r3, r1
 8003750:	3342      	adds	r3, #66	; 0x42
 8003752:	2202      	movs	r2, #2
 8003754:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003756:	787b      	ldrb	r3, [r7, #1]
 8003758:	2b03      	cmp	r3, #3
 800375a:	f200 80d6 	bhi.w	800390a <HAL_HCD_HC_SubmitRequest+0x23a>
 800375e:	a201      	add	r2, pc, #4	; (adr r2, 8003764 <HAL_HCD_HC_SubmitRequest+0x94>)
 8003760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003764:	08003775 	.word	0x08003775
 8003768:	080038f5 	.word	0x080038f5
 800376c:	080037e1 	.word	0x080037e1
 8003770:	0800386b 	.word	0x0800386b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003774:	7c3b      	ldrb	r3, [r7, #16]
 8003776:	2b01      	cmp	r3, #1
 8003778:	f040 80c9 	bne.w	800390e <HAL_HCD_HC_SubmitRequest+0x23e>
 800377c:	78bb      	ldrb	r3, [r7, #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 80c5 	bne.w	800390e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003784:	8b3b      	ldrh	r3, [r7, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	3351      	adds	r3, #81	; 0x51
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800379e:	78fa      	ldrb	r2, [r7, #3]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	440b      	add	r3, r1
 80037ac:	3351      	adds	r3, #81	; 0x51
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	440b      	add	r3, r1
 80037c2:	3342      	adds	r3, #66	; 0x42
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80037c8:	e0a1      	b.n	800390e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	440b      	add	r3, r1
 80037d8:	3342      	adds	r3, #66	; 0x42
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
      break;
 80037de:	e096      	b.n	800390e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80037e0:	78bb      	ldrb	r3, [r7, #2]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d120      	bne.n	8003828 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80037e6:	78fa      	ldrb	r2, [r7, #3]
 80037e8:	6879      	ldr	r1, [r7, #4]
 80037ea:	4613      	mov	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	440b      	add	r3, r1
 80037f4:	3351      	adds	r3, #81	; 0x51
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	4413      	add	r3, r2
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	440b      	add	r3, r1
 800380a:	3342      	adds	r3, #66	; 0x42
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003810:	e07e      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	440b      	add	r3, r1
 8003820:	3342      	adds	r3, #66	; 0x42
 8003822:	2202      	movs	r2, #2
 8003824:	701a      	strb	r2, [r3, #0]
      break;
 8003826:	e073      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	440b      	add	r3, r1
 8003836:	3350      	adds	r3, #80	; 0x50
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10a      	bne.n	8003854 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	440b      	add	r3, r1
 800384c:	3342      	adds	r3, #66	; 0x42
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
      break;
 8003852:	e05d      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	00db      	lsls	r3, r3, #3
 8003860:	440b      	add	r3, r1
 8003862:	3342      	adds	r3, #66	; 0x42
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
      break;
 8003868:	e052      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800386a:	78bb      	ldrb	r3, [r7, #2]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d120      	bne.n	80038b2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	440b      	add	r3, r1
 800387e:	3351      	adds	r3, #81	; 0x51
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10a      	bne.n	800389c <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	3342      	adds	r3, #66	; 0x42
 8003896:	2200      	movs	r2, #0
 8003898:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800389a:	e039      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	440b      	add	r3, r1
 80038aa:	3342      	adds	r3, #66	; 0x42
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
      break;
 80038b0:	e02e      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3350      	adds	r3, #80	; 0x50
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	440b      	add	r3, r1
 80038d6:	3342      	adds	r3, #66	; 0x42
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
      break;
 80038dc:	e018      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	440b      	add	r3, r1
 80038ec:	3342      	adds	r3, #66	; 0x42
 80038ee:	2202      	movs	r2, #2
 80038f0:	701a      	strb	r2, [r3, #0]
      break;
 80038f2:	e00d      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3342      	adds	r3, #66	; 0x42
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
      break;
 8003908:	e002      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800390a:	bf00      	nop
 800390c:	e000      	b.n	8003910 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 800390e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003910:	78fa      	ldrb	r2, [r7, #3]
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3344      	adds	r3, #68	; 0x44
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	8b39      	ldrh	r1, [r7, #24]
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4613      	mov	r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4403      	add	r3, r0
 8003934:	3348      	adds	r3, #72	; 0x48
 8003936:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003938:	78fa      	ldrb	r2, [r7, #3]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	440b      	add	r3, r1
 8003946:	335c      	adds	r3, #92	; 0x5c
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4413      	add	r3, r2
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	440b      	add	r3, r1
 800395a:	334c      	adds	r3, #76	; 0x4c
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003960:	78fa      	ldrb	r2, [r7, #3]
 8003962:	6879      	ldr	r1, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4413      	add	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	440b      	add	r3, r1
 800396e:	3339      	adds	r3, #57	; 0x39
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	440b      	add	r3, r1
 8003982:	335d      	adds	r3, #93	; 0x5d
 8003984:	2200      	movs	r2, #0
 8003986:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	4613      	mov	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	3338      	adds	r3, #56	; 0x38
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	18d1      	adds	r1, r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	f005 fbac 	bl	8009100 <USB_HC_StartXfer>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop

080039b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f005 f8c9 	bl	8008b62 <USB_GetMode>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	f040 80ef 	bne.w	8003bb6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f005 f8ad 	bl	8008b3c <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80e5 	beq.w	8003bb4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f005 f8a4 	bl	8008b3c <USB_ReadInterrupts>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039fe:	d104      	bne.n	8003a0a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a08:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f005 f894 	bl	8008b3c <USB_ReadInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a1e:	d104      	bne.n	8003a2a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f005 f884 	bl	8008b3c <USB_ReadInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a3e:	d104      	bne.n	8003a4a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f005 f874 	bl	8008b3c <USB_ReadInterrupts>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d103      	bne.n	8003a66 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2202      	movs	r2, #2
 8003a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f005 f866 	bl	8008b3c <USB_ReadInterrupts>
 8003a70:	4603      	mov	r3, r0
 8003a72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a7a:	d115      	bne.n	8003aa8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003a84:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d108      	bne.n	8003aa8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f00b fab4 	bl	800f004 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f005 f95c 	bl	8008d60 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4618      	mov	r0, r3
 8003aae:	f005 f845 	bl	8008b3c <USB_ReadInterrupts>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003abc:	d102      	bne.n	8003ac4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f001 f966 	bl	8004d90 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f005 f837 	bl	8008b3c <USB_ReadInterrupts>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b08      	cmp	r3, #8
 8003ad6:	d106      	bne.n	8003ae6 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f00b fa77 	bl	800efcc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f005 f826 	bl	8008b3c <USB_ReadInterrupts>
 8003af0:	4603      	mov	r3, r0
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003afa:	d138      	bne.n	8003b6e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f005 fc41 	bl	8009388 <USB_HC_ReadInterrupt>
 8003b06:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b08:	2300      	movs	r3, #0
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	e025      	b.n	8003b5a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f003 030f 	and.w	r3, r3, #15
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	015a      	lsls	r2, r3, #5
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	4413      	add	r3, r2
 8003b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b38:	d106      	bne.n	8003b48 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	4619      	mov	r1, r3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f8cf 	bl	8003ce4 <HCD_HC_IN_IRQHandler>
 8003b46:	e005      	b.n	8003b54 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 fcfd 	bl	800454e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3d4      	bcc.n	8003b0e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 ffe2 	bl	8008b3c <USB_ReadInterrupts>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d101      	bne.n	8003b86 <HAL_HCD_IRQHandler+0x1d2>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <HAL_HCD_IRQHandler+0x1d4>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d014      	beq.n	8003bb6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	699a      	ldr	r2, [r3, #24]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0210 	bic.w	r2, r2, #16
 8003b9a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f001 f84b 	bl	8004c38 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0210 	orr.w	r2, r2, #16
 8003bb0:	619a      	str	r2, [r3, #24]
 8003bb2:	e000      	b.n	8003bb6 <HAL_HCD_IRQHandler+0x202>
      return;
 8003bb4:	bf00      	nop
    }
  }
}
 8003bb6:	3718      	adds	r7, #24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_HCD_Start+0x16>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e013      	b.n	8003bfa <HAL_HCD_Start+0x3e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f004 feb9 	bl	8008956 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f005 f91c 	bl	8008e28 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b082      	sub	sp, #8
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_HCD_Stop+0x16>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e00d      	b.n	8003c34 <HAL_HCD_Stop+0x32>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f005 fcfb 	bl	8009620 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f005 f8c3 	bl	8008dd4 <USB_ResetPort>
 8003c4e:	4603      	mov	r3, r0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	460b      	mov	r3, r1
 8003c62:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	440b      	add	r3, r1
 8003c72:	335c      	adds	r3, #92	; 0x5c
 8003c74:	781b      	ldrb	r3, [r3, #0]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	440b      	add	r3, r1
 8003c9c:	334c      	adds	r3, #76	; 0x4c
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f005 f905 	bl	8008ec8 <USB_GetCurrentFrame>
 8003cbe:	4603      	mov	r3, r0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f005 f8e0 	bl	8008e9a <USB_GetHostSpeed>
 8003cda:	4603      	mov	r3, r0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0304 	and.w	r3, r3, #4
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d119      	bne.n	8003d48 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d20:	461a      	mov	r2, r3
 8003d22:	2304      	movs	r3, #4
 8003d24:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	0151      	lsls	r1, r2, #5
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	440a      	add	r2, r1
 8003d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	60d3      	str	r3, [r2, #12]
 8003d46:	e0ce      	b.n	8003ee6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d5e:	d12c      	bne.n	8003dba <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003d72:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	335d      	adds	r3, #93	; 0x5d
 8003d84:	2207      	movs	r2, #7
 8003d86:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	0151      	lsls	r1, r2, #5
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	440a      	add	r2, r1
 8003d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003da2:	f043 0302 	orr.w	r3, r3, #2
 8003da6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f005 faf9 	bl	80093aa <USB_HC_Halt>
 8003db8:	e095      	b.n	8003ee6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d109      	bne.n	8003de4 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2320      	movs	r3, #32
 8003de0:	6093      	str	r3, [r2, #8]
 8003de2:	e080      	b.n	8003ee6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d134      	bne.n	8003e64 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	440b      	add	r3, r1
 8003e28:	335d      	adds	r3, #93	; 0x5d
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2308      	movs	r3, #8
 8003e50:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 faa4 	bl	80093aa <USB_HC_Halt>
 8003e62:	e040      	b.n	8003ee6 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7a:	d134      	bne.n	8003ee6 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	68db      	ldr	r3, [r3, #12]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	0151      	lsls	r1, r2, #5
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	440a      	add	r2, r1
 8003e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e96:	f043 0302 	orr.w	r3, r3, #2
 8003e9a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	4611      	mov	r1, r2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f005 fa7f 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	461a      	mov	r2, r3
 8003eba:	2310      	movs	r3, #16
 8003ebc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	335d      	adds	r3, #93	; 0x5d
 8003ece:	2208      	movs	r2, #8
 8003ed0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ee4:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efc:	d122      	bne.n	8003f44 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f18:	f043 0302 	orr.w	r3, r3, #2
 8003f1c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f005 fa3e 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f40:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003f42:	e300      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	f040 80fd 	bne.w	8004156 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4413      	add	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	440b      	add	r3, r1
 8003f72:	3348      	adds	r3, #72	; 0x48
 8003f74:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0159      	lsls	r1, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	440b      	add	r3, r1
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003f88:	1ad1      	subs	r1, r2, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4403      	add	r3, r0
 8003f98:	334c      	adds	r3, #76	; 0x4c
 8003f9a:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	335d      	adds	r3, #93	; 0x5d
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fb0:	6879      	ldr	r1, [r7, #4]
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	440b      	add	r3, r1
 8003fbe:	3358      	adds	r3, #88	; 0x58
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	440b      	add	r3, r1
 8003fe4:	333f      	adds	r3, #63	; 0x3f
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	440b      	add	r3, r1
 8003ffa:	333f      	adds	r3, #63	; 0x3f
 8003ffc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d121      	bne.n	8004046 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	440a      	add	r2, r1
 8004018:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800401c:	f043 0302 	orr.w	r3, r3, #2
 8004020:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f005 f9bc 	bl	80093aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	015a      	lsls	r2, r3, #5
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	4413      	add	r3, r2
 800403a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800403e:	461a      	mov	r2, r3
 8004040:	2310      	movs	r3, #16
 8004042:	6093      	str	r3, [r2, #8]
 8004044:	e070      	b.n	8004128 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	333f      	adds	r3, #63	; 0x3f
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b03      	cmp	r3, #3
 800405a:	d12a      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800407a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	335c      	adds	r3, #92	; 0x5c
 800408c:	2201      	movs	r2, #1
 800408e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	b2d8      	uxtb	r0, r3
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	440b      	add	r3, r1
 80040a2:	335c      	adds	r3, #92	; 0x5c
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	461a      	mov	r2, r3
 80040a8:	4601      	mov	r1, r0
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f00a ffb8 	bl	800f020 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040b0:	e03a      	b.n	8004128 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	333f      	adds	r3, #63	; 0x3f
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d12f      	bne.n	8004128 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	440b      	add	r3, r1
 80040d6:	335c      	adds	r3, #92	; 0x5c
 80040d8:	2201      	movs	r2, #1
 80040da:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	440b      	add	r3, r1
 80040ea:	3350      	adds	r3, #80	; 0x50
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	f083 0301 	eor.w	r3, r3, #1
 80040f2:	b2d8      	uxtb	r0, r3
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	3350      	adds	r3, #80	; 0x50
 8004104:	4602      	mov	r2, r0
 8004106:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	b2d8      	uxtb	r0, r3
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4613      	mov	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4413      	add	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	440b      	add	r3, r1
 800411a:	335c      	adds	r3, #92	; 0x5c
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	4601      	mov	r1, r0
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f00a ff7c 	bl	800f020 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	3350      	adds	r3, #80	; 0x50
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	f083 0301 	eor.w	r3, r3, #1
 800413e:	b2d8      	uxtb	r0, r3
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	3350      	adds	r3, #80	; 0x50
 8004150:	4602      	mov	r2, r0
 8004152:	701a      	strb	r2, [r3, #0]
}
 8004154:	e1f7      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4413      	add	r3, r2
 800415e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	f040 811a 	bne.w	80043a2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	015a      	lsls	r2, r3, #5
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4413      	add	r3, r2
 8004176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	0151      	lsls	r1, r2, #5
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	440a      	add	r2, r1
 8004184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004188:	f023 0302 	bic.w	r3, r3, #2
 800418c:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4613      	mov	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4413      	add	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	440b      	add	r3, r1
 800419c:	335d      	adds	r3, #93	; 0x5d
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d10a      	bne.n	80041ba <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80041a4:	6879      	ldr	r1, [r7, #4]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	440b      	add	r3, r1
 80041b2:	335c      	adds	r3, #92	; 0x5c
 80041b4:	2201      	movs	r2, #1
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e0d9      	b.n	800436e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4613      	mov	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	440b      	add	r3, r1
 80041c8:	335d      	adds	r3, #93	; 0x5d
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d10a      	bne.n	80041e6 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	440b      	add	r3, r1
 80041de:	335c      	adds	r3, #92	; 0x5c
 80041e0:	2205      	movs	r2, #5
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e0c3      	b.n	800436e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	335d      	adds	r3, #93	; 0x5d
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b06      	cmp	r3, #6
 80041fa:	d00a      	beq.n	8004212 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	335d      	adds	r3, #93	; 0x5d
 800420c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800420e:	2b08      	cmp	r3, #8
 8004210:	d156      	bne.n	80042c0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	3358      	adds	r3, #88	; 0x58
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	4403      	add	r3, r0
 8004234:	3358      	adds	r3, #88	; 0x58
 8004236:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	440b      	add	r3, r1
 8004246:	3358      	adds	r3, #88	; 0x58
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b03      	cmp	r3, #3
 800424c:	d914      	bls.n	8004278 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800424e:	6879      	ldr	r1, [r7, #4]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4613      	mov	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	4413      	add	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	440b      	add	r3, r1
 800425c:	3358      	adds	r3, #88	; 0x58
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	440b      	add	r3, r1
 8004270:	335c      	adds	r3, #92	; 0x5c
 8004272:	2204      	movs	r2, #4
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e009      	b.n	800428c <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4613      	mov	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	440b      	add	r3, r1
 8004286:	335c      	adds	r3, #92	; 0x5c
 8004288:	2202      	movs	r2, #2
 800428a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	4413      	add	r3, r2
 8004294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042a2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042aa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	015a      	lsls	r2, r3, #5
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	4413      	add	r3, r2
 80042b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b8:	461a      	mov	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	6013      	str	r3, [r2, #0]
 80042be:	e056      	b.n	800436e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	335d      	adds	r3, #93	; 0x5d
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d123      	bne.n	800431e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	440b      	add	r3, r1
 80042e4:	335c      	adds	r3, #92	; 0x5c
 80042e6:	2202      	movs	r2, #2
 80042e8:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004300:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004308:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	015a      	lsls	r2, r3, #5
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4413      	add	r3, r2
 8004312:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004316:	461a      	mov	r2, r3
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	e027      	b.n	800436e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800431e:	6879      	ldr	r1, [r7, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4613      	mov	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	440b      	add	r3, r1
 800432c:	335d      	adds	r3, #93	; 0x5d
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b07      	cmp	r3, #7
 8004332:	d11c      	bne.n	800436e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	3358      	adds	r3, #88	; 0x58
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	1c59      	adds	r1, r3, #1
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	4613      	mov	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4413      	add	r3, r2
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	4403      	add	r3, r0
 8004356:	3358      	adds	r3, #88	; 0x58
 8004358:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800435a:	6879      	ldr	r1, [r7, #4]
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	4613      	mov	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	4413      	add	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	440b      	add	r3, r1
 8004368:	335c      	adds	r3, #92	; 0x5c
 800436a:	2204      	movs	r2, #4
 800436c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437a:	461a      	mov	r2, r3
 800437c:	2302      	movs	r3, #2
 800437e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	b2d8      	uxtb	r0, r3
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	440b      	add	r3, r1
 8004392:	335c      	adds	r3, #92	; 0x5c
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	4601      	mov	r1, r0
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f00a fe40 	bl	800f020 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80043a0:	e0d1      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	015a      	lsls	r2, r3, #5
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4413      	add	r3, r2
 80043aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043b4:	2b80      	cmp	r3, #128	; 0x80
 80043b6:	d13e      	bne.n	8004436 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043d2:	f043 0302 	orr.w	r3, r3, #2
 80043d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3358      	adds	r3, #88	; 0x58
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1c59      	adds	r1, r3, #1
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4403      	add	r3, r0
 80043fa:	3358      	adds	r3, #88	; 0x58
 80043fc:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	68fa      	ldr	r2, [r7, #12]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	440b      	add	r3, r1
 800440c:	335d      	adds	r3, #93	; 0x5d
 800440e:	2206      	movs	r2, #6
 8004410:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	4611      	mov	r1, r2
 800441c:	4618      	mov	r0, r3
 800441e:	f004 ffc4 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	015a      	lsls	r2, r3, #5
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	4413      	add	r3, r2
 800442a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442e:	461a      	mov	r2, r3
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	6093      	str	r3, [r2, #8]
}
 8004434:	e087      	b.n	8004546 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	2b10      	cmp	r3, #16
 800444a:	d17c      	bne.n	8004546 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4613      	mov	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	4413      	add	r3, r2
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	440b      	add	r3, r1
 800445a:	333f      	adds	r3, #63	; 0x3f
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d122      	bne.n	80044a8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4613      	mov	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	440b      	add	r3, r1
 8004470:	3358      	adds	r3, #88	; 0x58
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	0151      	lsls	r1, r2, #5
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	440a      	add	r2, r1
 800448c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	4611      	mov	r1, r2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f004 ff82 	bl	80093aa <USB_HC_Halt>
 80044a6:	e045      	b.n	8004534 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	440b      	add	r3, r1
 80044b6:	333f      	adds	r3, #63	; 0x3f
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	440b      	add	r3, r1
 80044cc:	333f      	adds	r3, #63	; 0x3f
 80044ce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d12f      	bne.n	8004534 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4613      	mov	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	440b      	add	r3, r1
 80044e2:	3358      	adds	r3, #88	; 0x58
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d121      	bne.n	8004534 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80044f0:	6879      	ldr	r1, [r7, #4]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	335d      	adds	r3, #93	; 0x5d
 8004500:	2203      	movs	r2, #3
 8004502:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4413      	add	r3, r2
 800450c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	693a      	ldr	r2, [r7, #16]
 8004518:	440a      	add	r2, r1
 800451a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	4611      	mov	r1, r2
 800452e:	4618      	mov	r0, r3
 8004530:	f004 ff3b 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4413      	add	r3, r2
 800453c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004540:	461a      	mov	r2, r3
 8004542:	2310      	movs	r3, #16
 8004544:	6093      	str	r3, [r2, #8]
}
 8004546:	bf00      	nop
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b086      	sub	sp, #24
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	460b      	mov	r3, r1
 8004558:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	4413      	add	r3, r2
 8004570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b04      	cmp	r3, #4
 800457c:	d119      	bne.n	80045b2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	015a      	lsls	r2, r3, #5
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4413      	add	r3, r2
 8004586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800458a:	461a      	mov	r2, r3
 800458c:	2304      	movs	r3, #4
 800458e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	0151      	lsls	r1, r2, #5
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	440a      	add	r2, r1
 80045a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045aa:	f043 0302 	orr.w	r3, r3, #2
 80045ae:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80045b0:	e33e      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0320 	and.w	r3, r3, #32
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	d141      	bne.n	800464c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d4:	461a      	mov	r2, r3
 80045d6:	2320      	movs	r3, #32
 80045d8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	4613      	mov	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	440b      	add	r3, r1
 80045e8:	333d      	adds	r3, #61	; 0x3d
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	f040 831f 	bne.w	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	68fa      	ldr	r2, [r7, #12]
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	440b      	add	r3, r1
 8004600:	333d      	adds	r3, #61	; 0x3d
 8004602:	2200      	movs	r2, #0
 8004604:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004606:	6879      	ldr	r1, [r7, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	440b      	add	r3, r1
 8004614:	335c      	adds	r3, #92	; 0x5c
 8004616:	2202      	movs	r2, #2
 8004618:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	4413      	add	r3, r2
 8004622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	0151      	lsls	r1, r2, #5
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	440a      	add	r2, r1
 8004630:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004634:	f043 0302 	orr.w	r3, r3, #2
 8004638:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	4611      	mov	r1, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f004 feb0 	bl	80093aa <USB_HC_Halt>
}
 800464a:	e2f1      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4413      	add	r3, r2
 8004654:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465e:	2b40      	cmp	r3, #64	; 0x40
 8004660:	d13f      	bne.n	80046e2 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	440b      	add	r3, r1
 8004670:	335d      	adds	r3, #93	; 0x5d
 8004672:	2204      	movs	r2, #4
 8004674:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	440b      	add	r3, r1
 8004684:	333d      	adds	r3, #61	; 0x3d
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	440b      	add	r3, r1
 8004698:	3358      	adds	r3, #88	; 0x58
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	0151      	lsls	r1, r2, #5
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	440a      	add	r2, r1
 80046b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046b8:	f043 0302 	orr.w	r3, r3, #2
 80046bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	b2d2      	uxtb	r2, r2
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f004 fe6e 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046da:	461a      	mov	r2, r3
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	6093      	str	r3, [r2, #8]
}
 80046e0:	e2a6      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046f8:	d122      	bne.n	8004740 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	015a      	lsls	r2, r3, #5
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	4413      	add	r3, r2
 8004702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	0151      	lsls	r1, r2, #5
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	440a      	add	r2, r1
 8004710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004714:	f043 0302 	orr.w	r3, r3, #2
 8004718:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	4611      	mov	r1, r2
 8004724:	4618      	mov	r0, r3
 8004726:	f004 fe40 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	4413      	add	r3, r2
 8004732:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004736:	461a      	mov	r2, r3
 8004738:	f44f 7300 	mov.w	r3, #512	; 0x200
 800473c:	6093      	str	r3, [r2, #8]
}
 800473e:	e277      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d135      	bne.n	80047c2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	440b      	add	r3, r1
 8004764:	3358      	adds	r3, #88	; 0x58
 8004766:	2200      	movs	r2, #0
 8004768:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4413      	add	r3, r2
 8004772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	0151      	lsls	r1, r2, #5
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	440a      	add	r2, r1
 8004780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004784:	f043 0302 	orr.w	r3, r3, #2
 8004788:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	b2d2      	uxtb	r2, r2
 8004792:	4611      	mov	r1, r2
 8004794:	4618      	mov	r0, r3
 8004796:	f004 fe08 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047a6:	461a      	mov	r2, r3
 80047a8:	2301      	movs	r3, #1
 80047aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	440b      	add	r3, r1
 80047ba:	335d      	adds	r3, #93	; 0x5d
 80047bc:	2201      	movs	r2, #1
 80047be:	701a      	strb	r2, [r3, #0]
}
 80047c0:	e236      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d12b      	bne.n	8004830 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047e4:	461a      	mov	r2, r3
 80047e6:	2308      	movs	r3, #8
 80047e8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	4611      	mov	r1, r2
 8004814:	4618      	mov	r0, r3
 8004816:	f004 fdc8 	bl	80093aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800481a:	6879      	ldr	r1, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	440b      	add	r3, r1
 8004828:	335d      	adds	r3, #93	; 0x5d
 800482a:	2205      	movs	r2, #5
 800482c:	701a      	strb	r2, [r3, #0]
}
 800482e:	e1ff      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	4413      	add	r3, r2
 8004838:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d155      	bne.n	80048f2 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	3358      	adds	r3, #88	; 0x58
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4613      	mov	r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	4413      	add	r3, r2
 8004864:	00db      	lsls	r3, r3, #3
 8004866:	440b      	add	r3, r1
 8004868:	335d      	adds	r3, #93	; 0x5d
 800486a:	2203      	movs	r2, #3
 800486c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	00db      	lsls	r3, r3, #3
 800487a:	440b      	add	r3, r1
 800487c:	333d      	adds	r3, #61	; 0x3d
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d114      	bne.n	80048ae <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	440b      	add	r3, r1
 8004892:	333c      	adds	r3, #60	; 0x3c
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	4613      	mov	r3, r2
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	440b      	add	r3, r1
 80048a8:	333d      	adds	r3, #61	; 0x3d
 80048aa:	2201      	movs	r2, #1
 80048ac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	0151      	lsls	r1, r2, #5
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	440a      	add	r2, r1
 80048c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048c8:	f043 0302 	orr.w	r3, r3, #2
 80048cc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f004 fd66 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	2310      	movs	r3, #16
 80048ee:	6093      	str	r3, [r2, #8]
}
 80048f0:	e19e      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004904:	2b80      	cmp	r3, #128	; 0x80
 8004906:	d12b      	bne.n	8004960 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	4413      	add	r3, r2
 8004910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	0151      	lsls	r1, r2, #5
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	440a      	add	r2, r1
 800491e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004922:	f043 0302 	orr.w	r3, r3, #2
 8004926:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f004 fd39 	bl	80093aa <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	440b      	add	r3, r1
 8004946:	335d      	adds	r3, #93	; 0x5d
 8004948:	2206      	movs	r2, #6
 800494a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4413      	add	r3, r2
 8004954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004958:	461a      	mov	r2, r3
 800495a:	2380      	movs	r3, #128	; 0x80
 800495c:	6093      	str	r3, [r2, #8]
}
 800495e:	e167      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4413      	add	r3, r2
 8004968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004976:	d135      	bne.n	80049e4 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	4413      	add	r3, r2
 8004980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	0151      	lsls	r1, r2, #5
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	440a      	add	r2, r1
 800498e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004992:	f043 0302 	orr.w	r3, r3, #2
 8004996:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	b2d2      	uxtb	r2, r2
 80049a0:	4611      	mov	r1, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f004 fd01 	bl	80093aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	2310      	movs	r3, #16
 80049b8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c6:	461a      	mov	r2, r3
 80049c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	440b      	add	r3, r1
 80049dc:	335d      	adds	r3, #93	; 0x5d
 80049de:	2208      	movs	r2, #8
 80049e0:	701a      	strb	r2, [r3, #0]
}
 80049e2:	e125      	b.n	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	f040 811a 	bne.w	8004c30 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	0151      	lsls	r1, r2, #5
 8004a0e:	693a      	ldr	r2, [r7, #16]
 8004a10:	440a      	add	r2, r1
 8004a12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a16:	f023 0302 	bic.w	r3, r3, #2
 8004a1a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004a1c:	6879      	ldr	r1, [r7, #4]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	440b      	add	r3, r1
 8004a2a:	335d      	adds	r3, #93	; 0x5d
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d137      	bne.n	8004aa2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	440b      	add	r3, r1
 8004a40:	335c      	adds	r3, #92	; 0x5c
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004a46:	6879      	ldr	r1, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	440b      	add	r3, r1
 8004a54:	333f      	adds	r3, #63	; 0x3f
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d00b      	beq.n	8004a74 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	440b      	add	r3, r1
 8004a6a:	333f      	adds	r3, #63	; 0x3f
 8004a6c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004a6e:	2b03      	cmp	r3, #3
 8004a70:	f040 80c5 	bne.w	8004bfe <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	440b      	add	r3, r1
 8004a82:	3351      	adds	r3, #81	; 0x51
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	f083 0301 	eor.w	r3, r3, #1
 8004a8a:	b2d8      	uxtb	r0, r3
 8004a8c:	6879      	ldr	r1, [r7, #4]
 8004a8e:	68fa      	ldr	r2, [r7, #12]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	3351      	adds	r3, #81	; 0x51
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e0ad      	b.n	8004bfe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	440b      	add	r3, r1
 8004ab0:	335d      	adds	r3, #93	; 0x5d
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d10a      	bne.n	8004ace <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	440b      	add	r3, r1
 8004ac6:	335c      	adds	r3, #92	; 0x5c
 8004ac8:	2202      	movs	r2, #2
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e097      	b.n	8004bfe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004ace:	6879      	ldr	r1, [r7, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	440b      	add	r3, r1
 8004adc:	335d      	adds	r3, #93	; 0x5d
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d10a      	bne.n	8004afa <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004ae4:	6879      	ldr	r1, [r7, #4]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	440b      	add	r3, r1
 8004af2:	335c      	adds	r3, #92	; 0x5c
 8004af4:	2202      	movs	r2, #2
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e081      	b.n	8004bfe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004afa:	6879      	ldr	r1, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4613      	mov	r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	4413      	add	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	440b      	add	r3, r1
 8004b08:	335d      	adds	r3, #93	; 0x5d
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d10a      	bne.n	8004b26 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	440b      	add	r3, r1
 8004b1e:	335c      	adds	r3, #92	; 0x5c
 8004b20:	2205      	movs	r2, #5
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e06b      	b.n	8004bfe <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b26:	6879      	ldr	r1, [r7, #4]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	440b      	add	r3, r1
 8004b34:	335d      	adds	r3, #93	; 0x5d
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b06      	cmp	r3, #6
 8004b3a:	d00a      	beq.n	8004b52 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4613      	mov	r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	440b      	add	r3, r1
 8004b4a:	335d      	adds	r3, #93	; 0x5d
 8004b4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d155      	bne.n	8004bfe <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	440b      	add	r3, r1
 8004b60:	3358      	adds	r3, #88	; 0x58
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	1c59      	adds	r1, r3, #1
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4403      	add	r3, r0
 8004b74:	3358      	adds	r3, #88	; 0x58
 8004b76:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004b78:	6879      	ldr	r1, [r7, #4]
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	440b      	add	r3, r1
 8004b86:	3358      	adds	r3, #88	; 0x58
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d914      	bls.n	8004bb8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3358      	adds	r3, #88	; 0x58
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004ba2:	6879      	ldr	r1, [r7, #4]
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	00db      	lsls	r3, r3, #3
 8004bae:	440b      	add	r3, r1
 8004bb0:	335c      	adds	r3, #92	; 0x5c
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	701a      	strb	r2, [r3, #0]
 8004bb6:	e009      	b.n	8004bcc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004bb8:	6879      	ldr	r1, [r7, #4]
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	440b      	add	r3, r1
 8004bc6:	335c      	adds	r3, #92	; 0x5c
 8004bc8:	2202      	movs	r2, #2
 8004bca:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004be2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004bea:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	015a      	lsls	r2, r3, #5
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4413      	add	r3, r2
 8004c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	b2d8      	uxtb	r0, r3
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	4413      	add	r3, r2
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	440b      	add	r3, r1
 8004c22:	335c      	adds	r3, #92	; 0x5c
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4601      	mov	r1, r0
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f00a f9f8 	bl	800f020 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004c30:	bf00      	nop
 8004c32:	3718      	adds	r7, #24
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	0c5b      	lsrs	r3, r3, #17
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c6c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d003      	beq.n	8004c7c <HCD_RXQLVL_IRQHandler+0x44>
 8004c74:	2b05      	cmp	r3, #5
 8004c76:	f000 8082 	beq.w	8004d7e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004c7a:	e083      	b.n	8004d84 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d07f      	beq.n	8004d82 <HCD_RXQLVL_IRQHandler+0x14a>
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4613      	mov	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4413      	add	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	440b      	add	r3, r1
 8004c90:	3344      	adds	r3, #68	; 0x44
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d074      	beq.n	8004d82 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	6879      	ldr	r1, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	00db      	lsls	r3, r3, #3
 8004ca8:	440b      	add	r3, r1
 8004caa:	3344      	adds	r3, #68	; 0x44
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	b292      	uxth	r2, r2
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f003 ff19 	bl	8008aea <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4413      	add	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	440b      	add	r3, r1
 8004cc6:	3344      	adds	r3, #68	; 0x44
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	18d1      	adds	r1, r2, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4403      	add	r3, r0
 8004cdc:	3344      	adds	r3, #68	; 0x44
 8004cde:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	334c      	adds	r3, #76	; 0x4c
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	18d1      	adds	r1, r2, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4403      	add	r3, r0
 8004d04:	334c      	adds	r3, #76	; 0x4c
 8004d06:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HCD_RXQLVL_IRQHandler+0x154>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d031      	beq.n	8004d82 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	015a      	lsls	r2, r3, #5
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	4413      	add	r3, r2
 8004d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d34:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d3c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	440b      	add	r3, r1
 8004d5e:	3350      	adds	r3, #80	; 0x50
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	f083 0301 	eor.w	r3, r3, #1
 8004d66:	b2d8      	uxtb	r0, r3
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	440b      	add	r3, r1
 8004d76:	3350      	adds	r3, #80	; 0x50
 8004d78:	4602      	mov	r2, r0
 8004d7a:	701a      	strb	r2, [r3, #0]
      break;
 8004d7c:	e001      	b.n	8004d82 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004d82:	bf00      	nop
  }
}
 8004d84:	bf00      	nop
 8004d86:	3728      	adds	r7, #40	; 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	1ff80000 	.word	0x1ff80000

08004d90 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004dbc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d10b      	bne.n	8004de0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d102      	bne.n	8004dd8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f00a f908 	bl	800efe8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	f043 0302 	orr.w	r3, r3, #2
 8004dde:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0308 	and.w	r3, r3, #8
 8004de6:	2b08      	cmp	r3, #8
 8004de8:	d132      	bne.n	8004e50 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f043 0308 	orr.w	r3, r3, #8
 8004df0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d126      	bne.n	8004e4a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d113      	bne.n	8004e2c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e0e:	d106      	bne.n	8004e1e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f003 ffa2 	bl	8008d60 <USB_InitFSLSPClkSel>
 8004e1c:	e011      	b.n	8004e42 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2101      	movs	r1, #1
 8004e24:	4618      	mov	r0, r3
 8004e26:	f003 ff9b 	bl	8008d60 <USB_InitFSLSPClkSel>
 8004e2a:	e00a      	b.n	8004e42 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004e40:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f00a f8fa 	bl	800f03c <HAL_HCD_PortEnabled_Callback>
 8004e48:	e002      	b.n	8004e50 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f00a f904 	bl	800f058 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d103      	bne.n	8004e62 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f043 0320 	orr.w	r3, r3, #32
 8004e60:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e68:	461a      	mov	r2, r3
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6013      	str	r3, [r2, #0]
}
 8004e6e:	bf00      	nop
 8004e70:	3718      	adds	r7, #24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d101      	bne.n	8004e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e11f      	b.n	80050ca <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f7fc ffb8 	bl	8001e14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2224      	movs	r2, #36	; 0x24
 8004ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004edc:	f002 fc62 	bl	80077a4 <HAL_RCC_GetPCLK1Freq>
 8004ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4a7b      	ldr	r2, [pc, #492]	; (80050d4 <HAL_I2C_Init+0x25c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d807      	bhi.n	8004efc <HAL_I2C_Init+0x84>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4a7a      	ldr	r2, [pc, #488]	; (80050d8 <HAL_I2C_Init+0x260>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	bf94      	ite	ls
 8004ef4:	2301      	movls	r3, #1
 8004ef6:	2300      	movhi	r3, #0
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	e006      	b.n	8004f0a <HAL_I2C_Init+0x92>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a77      	ldr	r2, [pc, #476]	; (80050dc <HAL_I2C_Init+0x264>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	bf94      	ite	ls
 8004f04:	2301      	movls	r3, #1
 8004f06:	2300      	movhi	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e0db      	b.n	80050ca <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a72      	ldr	r2, [pc, #456]	; (80050e0 <HAL_I2C_Init+0x268>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0c9b      	lsrs	r3, r3, #18
 8004f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a64      	ldr	r2, [pc, #400]	; (80050d4 <HAL_I2C_Init+0x25c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d802      	bhi.n	8004f4c <HAL_I2C_Init+0xd4>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e009      	b.n	8004f60 <HAL_I2C_Init+0xe8>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	4a63      	ldr	r2, [pc, #396]	; (80050e4 <HAL_I2C_Init+0x26c>)
 8004f58:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5c:	099b      	lsrs	r3, r3, #6
 8004f5e:	3301      	adds	r3, #1
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004f72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	4956      	ldr	r1, [pc, #344]	; (80050d4 <HAL_I2C_Init+0x25c>)
 8004f7c:	428b      	cmp	r3, r1
 8004f7e:	d80d      	bhi.n	8004f9c <HAL_I2C_Init+0x124>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	1e59      	subs	r1, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	bf38      	it	cc
 8004f98:	2304      	movcc	r3, #4
 8004f9a:	e04f      	b.n	800503c <HAL_I2C_Init+0x1c4>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d111      	bne.n	8004fc8 <HAL_I2C_Init+0x150>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	1e58      	subs	r0, r3, #1
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6859      	ldr	r1, [r3, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	440b      	add	r3, r1
 8004fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e012      	b.n	8004fee <HAL_I2C_Init+0x176>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	1e58      	subs	r0, r3, #1
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6859      	ldr	r1, [r3, #4]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	0099      	lsls	r1, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d001      	beq.n	8004ff6 <HAL_I2C_Init+0x17e>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e022      	b.n	800503c <HAL_I2C_Init+0x1c4>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10e      	bne.n	800501c <HAL_I2C_Init+0x1a4>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1e58      	subs	r0, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	440b      	add	r3, r1
 800500c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005010:	3301      	adds	r3, #1
 8005012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800501a:	e00f      	b.n	800503c <HAL_I2C_Init+0x1c4>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	1e58      	subs	r0, r3, #1
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	460b      	mov	r3, r1
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	0099      	lsls	r1, r3, #2
 800502c:	440b      	add	r3, r1
 800502e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005032:	3301      	adds	r3, #1
 8005034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005038:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	6809      	ldr	r1, [r1, #0]
 8005040:	4313      	orrs	r3, r2
 8005042:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69da      	ldr	r2, [r3, #28]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800506a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6911      	ldr	r1, [r2, #16]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	68d2      	ldr	r2, [r2, #12]
 8005076:	4311      	orrs	r1, r2
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6812      	ldr	r2, [r2, #0]
 800507c:	430b      	orrs	r3, r1
 800507e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0201 	orr.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80050c8:	2300      	movs	r3, #0
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3710      	adds	r7, #16
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	000186a0 	.word	0x000186a0
 80050d8:	001e847f 	.word	0x001e847f
 80050dc:	003d08ff 	.word	0x003d08ff
 80050e0:	431bde83 	.word	0x431bde83
 80050e4:	10624dd3 	.word	0x10624dd3

080050e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	461a      	mov	r2, r3
 80050f4:	460b      	mov	r3, r1
 80050f6:	817b      	strh	r3, [r7, #10]
 80050f8:	4613      	mov	r3, r2
 80050fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050fc:	f7fd fade 	bl	80026bc <HAL_GetTick>
 8005100:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b20      	cmp	r3, #32
 800510c:	f040 80e0 	bne.w	80052d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	2319      	movs	r3, #25
 8005116:	2201      	movs	r2, #1
 8005118:	4970      	ldr	r1, [pc, #448]	; (80052dc <HAL_I2C_Master_Transmit+0x1f4>)
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fd84 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
 8005128:	e0d3      	b.n	80052d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_I2C_Master_Transmit+0x50>
 8005134:	2302      	movs	r3, #2
 8005136:	e0cc      	b.n	80052d2 <HAL_I2C_Master_Transmit+0x1ea>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d007      	beq.n	800515e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800516c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2221      	movs	r2, #33	; 0x21
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2210      	movs	r2, #16
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	893a      	ldrh	r2, [r7, #8]
 800518e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4a50      	ldr	r2, [pc, #320]	; (80052e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800519e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80051a0:	8979      	ldrh	r1, [r7, #10]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 fbf0 	bl	800598c <I2C_MasterRequestWrite>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e08d      	b.n	80052d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051b6:	2300      	movs	r3, #0
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	613b      	str	r3, [r7, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80051cc:	e066      	b.n	800529c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	6a39      	ldr	r1, [r7, #32]
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fdfe 	bl	8005dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00d      	beq.n	80051fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d107      	bne.n	80051f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e06b      	b.n	80052d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	1c5a      	adds	r2, r3, #1
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29a      	uxth	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b04      	cmp	r3, #4
 8005236:	d11b      	bne.n	8005270 <HAL_I2C_Master_Transmit+0x188>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	2b00      	cmp	r3, #0
 800523e:	d017      	beq.n	8005270 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	6a39      	ldr	r1, [r7, #32]
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fdee 	bl	8005e56 <I2C_WaitOnBTFFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00d      	beq.n	800529c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005284:	2b04      	cmp	r3, #4
 8005286:	d107      	bne.n	8005298 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005296:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e01a      	b.n	80052d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d194      	bne.n	80051ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052cc:	2300      	movs	r3, #0
 80052ce:	e000      	b.n	80052d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80052d0:	2302      	movs	r3, #2
  }
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	00100002 	.word	0x00100002
 80052e0:	ffff0000 	.word	0xffff0000

080052e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08c      	sub	sp, #48	; 0x30
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	461a      	mov	r2, r3
 80052f0:	460b      	mov	r3, r1
 80052f2:	817b      	strh	r3, [r7, #10]
 80052f4:	4613      	mov	r3, r2
 80052f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052f8:	f7fd f9e0 	bl	80026bc <HAL_GetTick>
 80052fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005304:	b2db      	uxtb	r3, r3
 8005306:	2b20      	cmp	r3, #32
 8005308:	f040 820b 	bne.w	8005722 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	9300      	str	r3, [sp, #0]
 8005310:	2319      	movs	r3, #25
 8005312:	2201      	movs	r2, #1
 8005314:	497c      	ldr	r1, [pc, #496]	; (8005508 <HAL_I2C_Master_Receive+0x224>)
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 fc86 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005322:	2302      	movs	r3, #2
 8005324:	e1fe      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_I2C_Master_Receive+0x50>
 8005330:	2302      	movs	r3, #2
 8005332:	e1f7      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b01      	cmp	r3, #1
 8005348:	d007      	beq.n	800535a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0201 	orr.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005368:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2222      	movs	r2, #34	; 0x22
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2210      	movs	r2, #16
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	893a      	ldrh	r2, [r7, #8]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005390:	b29a      	uxth	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4a5c      	ldr	r2, [pc, #368]	; (800550c <HAL_I2C_Master_Receive+0x228>)
 800539a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800539c:	8979      	ldrh	r1, [r7, #10]
 800539e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f000 fb74 	bl	8005a90 <I2C_MasterRequestRead>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d001      	beq.n	80053b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e1b8      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d113      	bne.n	80053e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ba:	2300      	movs	r3, #0
 80053bc:	623b      	str	r3, [r7, #32]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	623b      	str	r3, [r7, #32]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	623b      	str	r3, [r7, #32]
 80053ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e18c      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d11b      	bne.n	8005422 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fa:	2300      	movs	r3, #0
 80053fc:	61fb      	str	r3, [r7, #28]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	61fb      	str	r3, [r7, #28]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	61fb      	str	r3, [r7, #28]
 800540e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	e16c      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005426:	2b02      	cmp	r3, #2
 8005428:	d11b      	bne.n	8005462 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005438:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005448:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544a:	2300      	movs	r3, #0
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	695b      	ldr	r3, [r3, #20]
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	61bb      	str	r3, [r7, #24]
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	e14c      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005470:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005472:	2300      	movs	r3, #0
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	617b      	str	r3, [r7, #20]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	699b      	ldr	r3, [r3, #24]
 8005484:	617b      	str	r3, [r7, #20]
 8005486:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005488:	e138      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548e:	2b03      	cmp	r3, #3
 8005490:	f200 80f1 	bhi.w	8005676 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005498:	2b01      	cmp	r3, #1
 800549a:	d123      	bne.n	80054e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800549c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800549e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fd19 	bl	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e139      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80054e2:	e10b      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d14e      	bne.n	800558a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	2200      	movs	r2, #0
 80054f4:	4906      	ldr	r1, [pc, #24]	; (8005510 <HAL_I2C_Master_Receive+0x22c>)
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 fb96 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d008      	beq.n	8005514 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e10e      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
 8005506:	bf00      	nop
 8005508:	00100002 	.word	0x00100002
 800550c:	ffff0000 	.word	0xffff0000
 8005510:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	b2d2      	uxtb	r2, r2
 8005530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	b29a      	uxth	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554c:	b29b      	uxth	r3, r3
 800554e:	3b01      	subs	r3, #1
 8005550:	b29a      	uxth	r2, r3
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557e:	b29b      	uxth	r3, r3
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005588:	e0b8      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	9300      	str	r3, [sp, #0]
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	2200      	movs	r2, #0
 8005592:	4966      	ldr	r1, [pc, #408]	; (800572c <HAL_I2C_Master_Receive+0x448>)
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 fb47 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0bf      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055d0:	3b01      	subs	r3, #1
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	2200      	movs	r2, #0
 80055ee:	494f      	ldr	r1, [pc, #316]	; (800572c <HAL_I2C_Master_Receive+0x448>)
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 fb19 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e091      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29a      	uxth	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	b2d2      	uxtb	r2, r2
 800564e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800566a:	b29b      	uxth	r3, r3
 800566c:	3b01      	subs	r3, #1
 800566e:	b29a      	uxth	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005674:	e042      	b.n	80056fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f000 fc2c 	bl	8005ed8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e04c      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	b2d2      	uxtb	r2, r2
 8005696:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569c:	1c5a      	adds	r2, r3, #1
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	3b01      	subs	r3, #1
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d118      	bne.n	80056fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056dc:	1c5a      	adds	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	3b01      	subs	r3, #1
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	f47f aec2 	bne.w	800548a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	e000      	b.n	8005724 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005722:	2302      	movs	r3, #2
  }
}
 8005724:	4618      	mov	r0, r3
 8005726:	3728      	adds	r7, #40	; 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	00010004 	.word	0x00010004

08005730 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08a      	sub	sp, #40	; 0x28
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	607a      	str	r2, [r7, #4]
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	460b      	mov	r3, r1
 800573e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005740:	f7fc ffbc 	bl	80026bc <HAL_GetTick>
 8005744:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005746:	2301      	movs	r3, #1
 8005748:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	f040 8110 	bne.w	8005978 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	2319      	movs	r3, #25
 800575e:	2201      	movs	r2, #1
 8005760:	4988      	ldr	r1, [pc, #544]	; (8005984 <HAL_I2C_IsDeviceReady+0x254>)
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f000 fa60 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d001      	beq.n	8005772 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800576e:	2302      	movs	r3, #2
 8005770:	e103      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_I2C_IsDeviceReady+0x50>
 800577c:	2302      	movs	r3, #2
 800577e:	e0fc      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b01      	cmp	r3, #1
 8005794:	d007      	beq.n	80057a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0201 	orr.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2224      	movs	r2, #36	; 0x24
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4a70      	ldr	r2, [pc, #448]	; (8005988 <HAL_I2C_IsDeviceReady+0x258>)
 80057c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fa1e 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e0b6      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	461a      	mov	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800581a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800581c:	f7fc ff4e 	bl	80026bc <HAL_GetTick>
 8005820:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005850:	e025      	b.n	800589e <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005852:	f7fc ff33 	bl	80026bc <HAL_GetTick>
 8005856:	4602      	mov	r2, r0
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d302      	bcc.n	8005868 <HAL_I2C_IsDeviceReady+0x138>
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d103      	bne.n	8005870 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	22a0      	movs	r2, #160	; 0xa0
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b02      	cmp	r3, #2
 800587c:	bf0c      	ite	eq
 800587e:	2301      	moveq	r3, #1
 8005880:	2300      	movne	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005894:	bf0c      	ite	eq
 8005896:	2301      	moveq	r3, #1
 8005898:	2300      	movne	r3, #0
 800589a:	b2db      	uxtb	r3, r3
 800589c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2ba0      	cmp	r3, #160	; 0xa0
 80058a8:	d005      	beq.n	80058b6 <HAL_I2C_IsDeviceReady+0x186>
 80058aa:	7dfb      	ldrb	r3, [r7, #23]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d102      	bne.n	80058b6 <HAL_I2C_IsDeviceReady+0x186>
 80058b0:	7dbb      	ldrb	r3, [r7, #22]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0cd      	beq.n	8005852 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d129      	bne.n	8005920 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058da:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058dc:	2300      	movs	r3, #0
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	613b      	str	r3, [r7, #16]
 80058f0:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	2319      	movs	r3, #25
 80058f8:	2201      	movs	r2, #1
 80058fa:	4922      	ldr	r1, [pc, #136]	; (8005984 <HAL_I2C_IsDeviceReady+0x254>)
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f993 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e036      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e02c      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800592e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005938:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	2319      	movs	r3, #25
 8005940:	2201      	movs	r2, #1
 8005942:	4910      	ldr	r1, [pc, #64]	; (8005984 <HAL_I2C_IsDeviceReady+0x254>)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f96f 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e012      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	3301      	adds	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	429a      	cmp	r2, r3
 8005960:	f4ff af33 	bcc.w	80057ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e000      	b.n	800597a <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3720      	adds	r7, #32
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	00100002 	.word	0x00100002
 8005988:	ffff0000 	.word	0xffff0000

0800598c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	460b      	mov	r3, r1
 800599a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b08      	cmp	r3, #8
 80059a6:	d006      	beq.n	80059b6 <I2C_MasterRequestWrite+0x2a>
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d003      	beq.n	80059b6 <I2C_MasterRequestWrite+0x2a>
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059b4:	d108      	bne.n	80059c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e00b      	b.n	80059e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059cc:	2b12      	cmp	r3, #18
 80059ce:	d107      	bne.n	80059e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f91b 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e035      	b.n	8005a7e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a1a:	d108      	bne.n	8005a2e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a1c:	897b      	ldrh	r3, [r7, #10]
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	461a      	mov	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005a2a:	611a      	str	r2, [r3, #16]
 8005a2c:	e01b      	b.n	8005a66 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a2e:	897b      	ldrh	r3, [r7, #10]
 8005a30:	11db      	asrs	r3, r3, #7
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	f003 0306 	and.w	r3, r3, #6
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f063 030f 	orn	r3, r3, #15
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	490f      	ldr	r1, [pc, #60]	; (8005a88 <I2C_MasterRequestWrite+0xfc>)
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f942 	bl	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e010      	b.n	8005a7e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a5c:	897b      	ldrh	r3, [r7, #10]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	4908      	ldr	r1, [pc, #32]	; (8005a8c <I2C_MasterRequestWrite+0x100>)
 8005a6c:	68f8      	ldr	r0, [r7, #12]
 8005a6e:	f000 f932 	bl	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e000      	b.n	8005a7e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	00010008 	.word	0x00010008
 8005a8c:	00010002 	.word	0x00010002

08005a90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ab4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d006      	beq.n	8005aca <I2C_MasterRequestRead+0x3a>
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d003      	beq.n	8005aca <I2C_MasterRequestRead+0x3a>
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ac8:	d108      	bne.n	8005adc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	e00b      	b.n	8005af4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	2b11      	cmp	r3, #17
 8005ae2:	d107      	bne.n	8005af4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005af2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f891 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00c      	beq.n	8005b26 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e078      	b.n	8005c18 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b2e:	d108      	bne.n	8005b42 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b30:	897b      	ldrh	r3, [r7, #10]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	611a      	str	r2, [r3, #16]
 8005b40:	e05e      	b.n	8005c00 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b42:	897b      	ldrh	r3, [r7, #10]
 8005b44:	11db      	asrs	r3, r3, #7
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0306 	and.w	r3, r3, #6
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f063 030f 	orn	r3, r3, #15
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	4930      	ldr	r1, [pc, #192]	; (8005c20 <I2C_MasterRequestRead+0x190>)
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f000 f8b8 	bl	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e053      	b.n	8005c18 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b70:	897b      	ldrh	r3, [r7, #10]
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	4929      	ldr	r1, [pc, #164]	; (8005c24 <I2C_MasterRequestRead+0x194>)
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f8a8 	bl	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e043      	b.n	8005c18 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	613b      	str	r3, [r7, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bb4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f830 	bl	8005c28 <I2C_WaitOnFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00c      	beq.n	8005be8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005be2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e017      	b.n	8005c18 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005be8:	897b      	ldrh	r3, [r7, #10]
 8005bea:	11db      	asrs	r3, r3, #7
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	f003 0306 	and.w	r3, r3, #6
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f063 030e 	orn	r3, r3, #14
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4907      	ldr	r1, [pc, #28]	; (8005c24 <I2C_MasterRequestRead+0x194>)
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f865 	bl	8005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e000      	b.n	8005c18 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	00010008 	.word	0x00010008
 8005c24:	00010002 	.word	0x00010002

08005c28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	603b      	str	r3, [r7, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c38:	e025      	b.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d021      	beq.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c42:	f7fc fd3b 	bl	80026bc <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d302      	bcc.n	8005c58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d116      	bne.n	8005c86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2220      	movs	r2, #32
 8005c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c72:	f043 0220 	orr.w	r2, r3, #32
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e023      	b.n	8005cce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	0c1b      	lsrs	r3, r3, #16
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10d      	bne.n	8005cac <I2C_WaitOnFlagUntilTimeout+0x84>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	43da      	mvns	r2, r3
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf0c      	ite	eq
 8005ca2:	2301      	moveq	r3, #1
 8005ca4:	2300      	movne	r3, #0
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	e00c      	b.n	8005cc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	43da      	mvns	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	bf0c      	ite	eq
 8005cbe:	2301      	moveq	r3, #1
 8005cc0:	2300      	movne	r3, #0
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d0b6      	beq.n	8005c3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	60b9      	str	r1, [r7, #8]
 8005ce0:	607a      	str	r2, [r7, #4]
 8005ce2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ce4:	e051      	b.n	8005d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf4:	d123      	bne.n	8005d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005d0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2220      	movs	r2, #32
 8005d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2a:	f043 0204 	orr.w	r2, r3, #4
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e046      	b.n	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d44:	d021      	beq.n	8005d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d46:	f7fc fcb9 	bl	80026bc <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d116      	bne.n	8005d8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	f043 0220 	orr.w	r2, r3, #32
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e020      	b.n	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d10c      	bne.n	8005dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	43da      	mvns	r2, r3
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	bf14      	ite	ne
 8005da6:	2301      	movne	r3, #1
 8005da8:	2300      	moveq	r3, #0
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	e00b      	b.n	8005dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	43da      	mvns	r2, r3
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4013      	ands	r3, r2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d18d      	bne.n	8005ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005de0:	e02d      	b.n	8005e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f8ce 	bl	8005f84 <I2C_IsAcknowledgeFailed>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e02d      	b.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005df8:	d021      	beq.n	8005e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dfa:	f7fc fc5f 	bl	80026bc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	68ba      	ldr	r2, [r7, #8]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d302      	bcc.n	8005e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d116      	bne.n	8005e3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e007      	b.n	8005e4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	695b      	ldr	r3, [r3, #20]
 8005e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e48:	2b80      	cmp	r3, #128	; 0x80
 8005e4a:	d1ca      	bne.n	8005de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3710      	adds	r7, #16
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}

08005e56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	60f8      	str	r0, [r7, #12]
 8005e5e:	60b9      	str	r1, [r7, #8]
 8005e60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005e62:	e02d      	b.n	8005ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 f88d 	bl	8005f84 <I2C_IsAcknowledgeFailed>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e02d      	b.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d021      	beq.n	8005ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7c:	f7fc fc1e 	bl	80026bc <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d302      	bcc.n	8005e92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d116      	bne.n	8005ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e007      	b.n	8005ed0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d1ca      	bne.n	8005e64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005ee4:	e042      	b.n	8005f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	f003 0310 	and.w	r3, r3, #16
 8005ef0:	2b10      	cmp	r3, #16
 8005ef2:	d119      	bne.n	8005f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0210 	mvn.w	r2, #16
 8005efc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e029      	b.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f28:	f7fc fbc8 	bl	80026bc <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d302      	bcc.n	8005f3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e007      	b.n	8005f7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f76:	2b40      	cmp	r3, #64	; 0x40
 8005f78:	d1b5      	bne.n	8005ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f9a:	d11b      	bne.n	8005fd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005fa4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	f043 0204 	orr.w	r2, r3, #4
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e000      	b.n	8005fd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
	...

08005fe4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e128      	b.n	8006248 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d109      	bne.n	8006016 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a90      	ldr	r2, [pc, #576]	; (8006250 <HAL_I2S_Init+0x26c>)
 800600e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fb ff8d 	bl	8001f30 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2202      	movs	r2, #2
 800601a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800602c:	f023 030f 	bic.w	r3, r3, #15
 8006030:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2202      	movs	r2, #2
 8006038:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d060      	beq.n	8006104 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800604a:	2310      	movs	r3, #16
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006050:	2320      	movs	r3, #32
 8006052:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2b20      	cmp	r3, #32
 800605a:	d802      	bhi.n	8006062 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006062:	2001      	movs	r0, #1
 8006064:	f001 fce4 	bl	8007a30 <HAL_RCCEx_GetPeriphCLKFreq>
 8006068:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	691b      	ldr	r3, [r3, #16]
 800606e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006072:	d125      	bne.n	80060c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d010      	beq.n	800609e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	fbb2 f2f3 	udiv	r2, r2, r3
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	3305      	adds	r3, #5
 800609a:	613b      	str	r3, [r7, #16]
 800609c:	e01f      	b.n	80060de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060ba:	3305      	adds	r3, #5
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	e00e      	b.n	80060de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80060c8:	4613      	mov	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	461a      	mov	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	3305      	adds	r3, #5
 80060dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4a5c      	ldr	r2, [pc, #368]	; (8006254 <HAL_I2S_Init+0x270>)
 80060e2:	fba2 2303 	umull	r2, r3, r2, r3
 80060e6:	08db      	lsrs	r3, r3, #3
 80060e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80060f2:	693a      	ldr	r2, [r7, #16]
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	085b      	lsrs	r3, r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	e003      	b.n	800610c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006104:	2302      	movs	r3, #2
 8006106:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d902      	bls.n	8006118 <HAL_I2S_Init+0x134>
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2bff      	cmp	r3, #255	; 0xff
 8006116:	d907      	bls.n	8006128 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611c:	f043 0210 	orr.w	r2, r3, #16
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e08f      	b.n	8006248 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	ea42 0103 	orr.w	r1, r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	430a      	orrs	r2, r1
 800613a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	69db      	ldr	r3, [r3, #28]
 8006142:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006146:	f023 030f 	bic.w	r3, r3, #15
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6851      	ldr	r1, [r2, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6892      	ldr	r2, [r2, #8]
 8006152:	4311      	orrs	r1, r2
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	68d2      	ldr	r2, [r2, #12]
 8006158:	4311      	orrs	r1, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	6992      	ldr	r2, [r2, #24]
 800615e:	430a      	orrs	r2, r1
 8006160:	431a      	orrs	r2, r3
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800616a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d161      	bne.n	8006238 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a38      	ldr	r2, [pc, #224]	; (8006258 <HAL_I2S_Init+0x274>)
 8006178:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a37      	ldr	r2, [pc, #220]	; (800625c <HAL_I2S_Init+0x278>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d101      	bne.n	8006188 <HAL_I2S_Init+0x1a4>
 8006184:	4b36      	ldr	r3, [pc, #216]	; (8006260 <HAL_I2S_Init+0x27c>)
 8006186:	e001      	b.n	800618c <HAL_I2S_Init+0x1a8>
 8006188:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	4932      	ldr	r1, [pc, #200]	; (800625c <HAL_I2S_Init+0x278>)
 8006194:	428a      	cmp	r2, r1
 8006196:	d101      	bne.n	800619c <HAL_I2S_Init+0x1b8>
 8006198:	4a31      	ldr	r2, [pc, #196]	; (8006260 <HAL_I2S_Init+0x27c>)
 800619a:	e001      	b.n	80061a0 <HAL_I2S_Init+0x1bc>
 800619c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80061a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80061a4:	f023 030f 	bic.w	r3, r3, #15
 80061a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2b      	ldr	r2, [pc, #172]	; (800625c <HAL_I2S_Init+0x278>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d101      	bne.n	80061b8 <HAL_I2S_Init+0x1d4>
 80061b4:	4b2a      	ldr	r3, [pc, #168]	; (8006260 <HAL_I2S_Init+0x27c>)
 80061b6:	e001      	b.n	80061bc <HAL_I2S_Init+0x1d8>
 80061b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061bc:	2202      	movs	r2, #2
 80061be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a25      	ldr	r2, [pc, #148]	; (800625c <HAL_I2S_Init+0x278>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_I2S_Init+0x1ea>
 80061ca:	4b25      	ldr	r3, [pc, #148]	; (8006260 <HAL_I2S_Init+0x27c>)
 80061cc:	e001      	b.n	80061d2 <HAL_I2S_Init+0x1ee>
 80061ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061de:	d003      	beq.n	80061e8 <HAL_I2S_Init+0x204>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d103      	bne.n	80061f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80061e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	e001      	b.n	80061f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80061f0:	2300      	movs	r3, #0
 80061f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	b299      	uxth	r1, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800620a:	4303      	orrs	r3, r0
 800620c:	b29b      	uxth	r3, r3
 800620e:	430b      	orrs	r3, r1
 8006210:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006212:	4313      	orrs	r3, r2
 8006214:	b29a      	uxth	r2, r3
 8006216:	897b      	ldrh	r3, [r7, #10]
 8006218:	4313      	orrs	r3, r2
 800621a:	b29b      	uxth	r3, r3
 800621c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006220:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a0d      	ldr	r2, [pc, #52]	; (800625c <HAL_I2S_Init+0x278>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <HAL_I2S_Init+0x24c>
 800622c:	4b0c      	ldr	r3, [pc, #48]	; (8006260 <HAL_I2S_Init+0x27c>)
 800622e:	e001      	b.n	8006234 <HAL_I2S_Init+0x250>
 8006230:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006234:	897a      	ldrh	r2, [r7, #10]
 8006236:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	080068f5 	.word	0x080068f5
 8006254:	cccccccd 	.word	0xcccccccd
 8006258:	08006a7d 	.word	0x08006a7d
 800625c:	40003800 	.word	0x40003800
 8006260:	40003400 	.word	0x40003400

08006264 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	4613      	mov	r3, r2
 8006270:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <HAL_I2S_Transmit_DMA+0x1a>
 8006278:	88fb      	ldrh	r3, [r7, #6]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e08e      	b.n	80063a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b01      	cmp	r3, #1
 800628c:	d101      	bne.n	8006292 <HAL_I2S_Transmit_DMA+0x2e>
 800628e:	2302      	movs	r3, #2
 8006290:	e086      	b.n	80063a0 <HAL_I2S_Transmit_DMA+0x13c>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d005      	beq.n	80062b2 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80062ae:	2302      	movs	r3, #2
 80062b0:	e076      	b.n	80063a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2203      	movs	r2, #3
 80062b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	68ba      	ldr	r2, [r7, #8]
 80062c4:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69db      	ldr	r3, [r3, #28]
 80062cc:	f003 0307 	and.w	r3, r3, #7
 80062d0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d002      	beq.n	80062de <HAL_I2S_Transmit_DMA+0x7a>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b05      	cmp	r3, #5
 80062dc:	d10a      	bne.n	80062f4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80062de:	88fb      	ldrh	r3, [r7, #6]
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80062f2:	e005      	b.n	8006300 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	88fa      	ldrh	r2, [r7, #6]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	88fa      	ldrh	r2, [r7, #6]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	4a28      	ldr	r2, [pc, #160]	; (80063a8 <HAL_I2S_Transmit_DMA+0x144>)
 8006306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800630c:	4a27      	ldr	r2, [pc, #156]	; (80063ac <HAL_I2S_Transmit_DMA+0x148>)
 800630e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006314:	4a26      	ldr	r2, [pc, #152]	; (80063b0 <HAL_I2S_Transmit_DMA+0x14c>)
 8006316:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006320:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006328:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800632e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006330:	f7fc fbb2 	bl	8002a98 <HAL_DMA_Start_IT>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00f      	beq.n	800635a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633e:	f043 0208 	orr.w	r2, r3, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e022      	b.n	80063a0 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	69da      	ldr	r2, [r3, #28]
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006376:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d107      	bne.n	8006396 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f042 0202 	orr.w	r2, r2, #2
 8006394:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	080067d3 	.word	0x080067d3
 80063ac:	08006791 	.word	0x08006791
 80063b0:	080067ef 	.word	0x080067ef

080063b4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 80063bc:	2300      	movs	r3, #0
 80063be:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c8:	d004      	beq.n	80063d4 <HAL_I2S_DMAStop+0x20>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f040 80d1 	bne.w	8006576 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00f      	beq.n	80063fc <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fc fbb1 	bl	8002b48 <HAL_DMA_Abort>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d007      	beq.n	80063fc <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f0:	f043 0208 	orr.w	r2, r3, #8
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80063fc:	2364      	movs	r3, #100	; 0x64
 80063fe:	2201      	movs	r2, #1
 8006400:	2102      	movs	r1, #2
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fb00 	bl	8006a08 <I2S_WaitFlagStateUntilTimeout>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00b      	beq.n	8006426 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006426:	2364      	movs	r3, #100	; 0x64
 8006428:	2200      	movs	r2, #0
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 faeb 	bl	8006a08 <I2S_WaitFlagStateUntilTimeout>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00b      	beq.n	8006450 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800645e:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	617b      	str	r3, [r7, #20]
 800646c:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0202 	bic.w	r2, r2, #2
 800647c:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b05      	cmp	r3, #5
 8006488:	f040 8165 	bne.w	8006756 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00f      	beq.n	80064b4 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006498:	4618      	mov	r0, r3
 800649a:	f7fc fb55 	bl	8002b48 <HAL_DMA_Abort>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d007      	beq.n	80064b4 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a8:	f043 0208 	orr.w	r2, r3, #8
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a8a      	ldr	r2, [pc, #552]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d101      	bne.n	80064c2 <HAL_I2S_DMAStop+0x10e>
 80064be:	4b8a      	ldr	r3, [pc, #552]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 80064c0:	e001      	b.n	80064c6 <HAL_I2S_DMAStop+0x112>
 80064c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c6:	69da      	ldr	r2, [r3, #28]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4985      	ldr	r1, [pc, #532]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 80064ce:	428b      	cmp	r3, r1
 80064d0:	d101      	bne.n	80064d6 <HAL_I2S_DMAStop+0x122>
 80064d2:	4b85      	ldr	r3, [pc, #532]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 80064d4:	e001      	b.n	80064da <HAL_I2S_DMAStop+0x126>
 80064d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064de:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a7e      	ldr	r2, [pc, #504]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d101      	bne.n	80064f2 <HAL_I2S_DMAStop+0x13e>
 80064ee:	4b7e      	ldr	r3, [pc, #504]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 80064f0:	e001      	b.n	80064f6 <HAL_I2S_DMAStop+0x142>
 80064f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a79      	ldr	r2, [pc, #484]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d101      	bne.n	8006508 <HAL_I2S_DMAStop+0x154>
 8006504:	4b78      	ldr	r3, [pc, #480]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 8006506:	e001      	b.n	800650c <HAL_I2S_DMAStop+0x158>
 8006508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a73      	ldr	r2, [pc, #460]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d101      	bne.n	8006520 <HAL_I2S_DMAStop+0x16c>
 800651c:	4b72      	ldr	r3, [pc, #456]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 800651e:	e001      	b.n	8006524 <HAL_I2S_DMAStop+0x170>
 8006520:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	496e      	ldr	r1, [pc, #440]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 800652c:	428b      	cmp	r3, r1
 800652e:	d101      	bne.n	8006534 <HAL_I2S_DMAStop+0x180>
 8006530:	4b6d      	ldr	r3, [pc, #436]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 8006532:	e001      	b.n	8006538 <HAL_I2S_DMAStop+0x184>
 8006534:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006538:	f022 0201 	bic.w	r2, r2, #1
 800653c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d10c      	bne.n	8006560 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800655e:	e0fa      	b.n	8006756 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a5f      	ldr	r2, [pc, #380]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d101      	bne.n	800656e <HAL_I2S_DMAStop+0x1ba>
 800656a:	4b5f      	ldr	r3, [pc, #380]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 800656c:	e001      	b.n	8006572 <HAL_I2S_DMAStop+0x1be>
 800656e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006572:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006574:	e0ef      	b.n	8006756 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800657e:	d005      	beq.n	800658c <HAL_I2S_DMAStop+0x1d8>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006588:	f040 80e5 	bne.w	8006756 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00f      	beq.n	80065b4 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006598:	4618      	mov	r0, r3
 800659a:	f7fc fad5 	bl	8002b48 <HAL_DMA_Abort>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d007      	beq.n	80065b4 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f043 0208 	orr.w	r2, r3, #8
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b05      	cmp	r3, #5
 80065be:	f040 809a 	bne.w	80066f6 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d00f      	beq.n	80065ea <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fc faba 	bl	8002b48 <HAL_DMA_Abort>
 80065d4:	4603      	mov	r3, r0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f043 0208 	orr.w	r2, r3, #8
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80065ea:	f7fc f867 	bl	80026bc <HAL_GetTick>
 80065ee:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80065f0:	e012      	b.n	8006618 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80065f2:	f7fc f863 	bl	80026bc <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b64      	cmp	r3, #100	; 0x64
 80065fe:	d90b      	bls.n	8006618 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006604:	f043 0201 	orr.w	r2, r3, #1
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a31      	ldr	r2, [pc, #196]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d101      	bne.n	8006626 <HAL_I2S_DMAStop+0x272>
 8006622:	4b31      	ldr	r3, [pc, #196]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 8006624:	e001      	b.n	800662a <HAL_I2S_DMAStop+0x276>
 8006626:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	f003 0302 	and.w	r3, r3, #2
 8006630:	2b02      	cmp	r3, #2
 8006632:	d1de      	bne.n	80065f2 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006634:	e012      	b.n	800665c <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006636:	f7fc f841 	bl	80026bc <HAL_GetTick>
 800663a:	4602      	mov	r2, r0
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	1ad3      	subs	r3, r2, r3
 8006640:	2b64      	cmp	r3, #100	; 0x64
 8006642:	d90b      	bls.n	800665c <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006648:	f043 0201 	orr.w	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a20      	ldr	r2, [pc, #128]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d101      	bne.n	800666a <HAL_I2S_DMAStop+0x2b6>
 8006666:	4b20      	ldr	r3, [pc, #128]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 8006668:	e001      	b.n	800666e <HAL_I2S_DMAStop+0x2ba>
 800666a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d0de      	beq.n	8006636 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a19      	ldr	r2, [pc, #100]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d101      	bne.n	8006686 <HAL_I2S_DMAStop+0x2d2>
 8006682:	4b19      	ldr	r3, [pc, #100]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 8006684:	e001      	b.n	800668a <HAL_I2S_DMAStop+0x2d6>
 8006686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800668a:	69da      	ldr	r2, [r3, #28]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4914      	ldr	r1, [pc, #80]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 8006692:	428b      	cmp	r3, r1
 8006694:	d101      	bne.n	800669a <HAL_I2S_DMAStop+0x2e6>
 8006696:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 8006698:	e001      	b.n	800669e <HAL_I2S_DMAStop+0x2ea>
 800669a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800669e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a2:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 80066a4:	2300      	movs	r3, #0
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a0d      	ldr	r2, [pc, #52]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d101      	bne.n	80066b6 <HAL_I2S_DMAStop+0x302>
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 80066b4:	e001      	b.n	80066ba <HAL_I2S_DMAStop+0x306>
 80066b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a07      	ldr	r2, [pc, #28]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d101      	bne.n	80066ce <HAL_I2S_DMAStop+0x31a>
 80066ca:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 80066cc:	e001      	b.n	80066d2 <HAL_I2S_DMAStop+0x31e>
 80066ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4902      	ldr	r1, [pc, #8]	; (80066e4 <HAL_I2S_DMAStop+0x330>)
 80066da:	428b      	cmp	r3, r1
 80066dc:	d106      	bne.n	80066ec <HAL_I2S_DMAStop+0x338>
 80066de:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <HAL_I2S_DMAStop+0x334>)
 80066e0:	e006      	b.n	80066f0 <HAL_I2S_DMAStop+0x33c>
 80066e2:	bf00      	nop
 80066e4:	40003800 	.word	0x40003800
 80066e8:	40003400 	.word	0x40003400
 80066ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066f0:	f022 0202 	bic.w	r2, r2, #2
 80066f4:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006704:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006706:	2300      	movs	r3, #0
 8006708:	60bb      	str	r3, [r7, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	60bb      	str	r3, [r7, #8]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f022 0201 	bic.w	r2, r2, #1
 800672a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006734:	d10c      	bne.n	8006750 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	77fb      	strb	r3, [r7, #31]
 800674e:	e002      	b.n	8006756 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800675e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006768:	b480      	push	{r7}
 800676a:	b083      	sub	sp, #12
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006784:	bf00      	nop
 8006786:	370c      	adds	r7, #12
 8006788:	46bd      	mov	sp, r7
 800678a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678e:	4770      	bx	lr

08006790 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d10e      	bne.n	80067c4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0202 	bic.w	r2, r2, #2
 80067b4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2201      	movs	r2, #1
 80067c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7fa fa15 	bl	8000bf4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067de:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f7fa fa19 	bl	8000c18 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0203 	bic.w	r2, r2, #3
 800680a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2200      	movs	r2, #0
 8006810:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006824:	f043 0208 	orr.w	r2, r3, #8
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f7ff ffa5 	bl	800677c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	881a      	ldrh	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006852:	1c9a      	adds	r2, r3, #2
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	3b01      	subs	r3, #1
 8006860:	b29a      	uxth	r2, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d10e      	bne.n	800688e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800687e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fa f9b3 	bl	8000bf4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800688e:	bf00      	nop
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b082      	sub	sp, #8
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	b292      	uxth	r2, r2
 80068aa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b0:	1c9a      	adds	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	3b01      	subs	r3, #1
 80068be:	b29a      	uxth	r2, r3
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10e      	bne.n	80068ec <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	685a      	ldr	r2, [r3, #4]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7ff ff3e 	bl	8006768 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80068ec:	bf00      	nop
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b04      	cmp	r3, #4
 800690e:	d13a      	bne.n	8006986 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	2b01      	cmp	r3, #1
 8006918:	d109      	bne.n	800692e <I2S_IRQHandler+0x3a>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d102      	bne.n	800692e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ffb4 	bl	8006896 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d126      	bne.n	8006986 <I2S_IRQHandler+0x92>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f003 0320 	and.w	r3, r3, #32
 8006942:	2b20      	cmp	r3, #32
 8006944:	d11f      	bne.n	8006986 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006954:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006956:	2300      	movs	r3, #0
 8006958:	613b      	str	r3, [r7, #16]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2201      	movs	r2, #1
 8006970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006978:	f043 0202 	orr.w	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff fefb 	bl	800677c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800698c:	b2db      	uxtb	r3, r3
 800698e:	2b03      	cmp	r3, #3
 8006990:	d136      	bne.n	8006a00 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	f003 0302 	and.w	r3, r3, #2
 8006998:	2b02      	cmp	r3, #2
 800699a:	d109      	bne.n	80069b0 <I2S_IRQHandler+0xbc>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069a6:	2b80      	cmp	r3, #128	; 0x80
 80069a8:	d102      	bne.n	80069b0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7ff ff45 	bl	800683a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f003 0308 	and.w	r3, r3, #8
 80069b6:	2b08      	cmp	r3, #8
 80069b8:	d122      	bne.n	8006a00 <I2S_IRQHandler+0x10c>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d11b      	bne.n	8006a00 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069d6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	f043 0204 	orr.w	r2, r3, #4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff febe 	bl	800677c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a00:	bf00      	nop
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	603b      	str	r3, [r7, #0]
 8006a14:	4613      	mov	r3, r2
 8006a16:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a18:	f7fb fe50 	bl	80026bc <HAL_GetTick>
 8006a1c:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006a1e:	e018      	b.n	8006a52 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a26:	d014      	beq.n	8006a52 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006a28:	f7fb fe48 	bl	80026bc <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d902      	bls.n	8006a3e <I2S_WaitFlagStateUntilTimeout+0x36>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e00f      	b.n	8006a72 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	bf0c      	ite	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	2300      	movne	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d1d7      	bne.n	8006a20 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4aa2      	ldr	r2, [pc, #648]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006a96:	4ba2      	ldr	r3, [pc, #648]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a98:	e001      	b.n	8006a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a9b      	ldr	r2, [pc, #620]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d101      	bne.n	8006ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006ab4:	4b9a      	ldr	r3, [pc, #616]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006ab6:	e001      	b.n	8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac8:	d004      	beq.n	8006ad4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f040 8099 	bne.w	8006c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b02      	cmp	r3, #2
 8006adc:	d107      	bne.n	8006aee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f925 	bl	8006d38 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f9c8 	bl	8006e98 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d13a      	bne.n	8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f003 0320 	and.w	r3, r3, #32
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d035      	beq.n	8006b88 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a7e      	ldr	r2, [pc, #504]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d101      	bne.n	8006b2a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006b26:	4b7e      	ldr	r3, [pc, #504]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b28:	e001      	b.n	8006b2e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4979      	ldr	r1, [pc, #484]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b36:	428b      	cmp	r3, r1
 8006b38:	d101      	bne.n	8006b3e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006b3a:	4b79      	ldr	r3, [pc, #484]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b3c:	e001      	b.n	8006b42 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006b3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b46:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68db      	ldr	r3, [r3, #12]
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7a:	f043 0202 	orr.w	r2, r3, #2
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fdfa 	bl	800677c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f003 0308 	and.w	r3, r3, #8
 8006b8e:	2b08      	cmp	r3, #8
 8006b90:	f040 80be 	bne.w	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80b8 	beq.w	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a59      	ldr	r2, [pc, #356]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d101      	bne.n	8006bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006bba:	4b59      	ldr	r3, [pc, #356]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bbc:	e001      	b.n	8006bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4954      	ldr	r1, [pc, #336]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006bca:	428b      	cmp	r3, r1
 8006bcc:	d101      	bne.n	8006bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006bce:	4b54      	ldr	r3, [pc, #336]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006bd0:	e001      	b.n	8006bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bda:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60bb      	str	r3, [r7, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	60bb      	str	r3, [r7, #8]
 8006be8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf6:	f043 0204 	orr.w	r2, r3, #4
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7ff fdbc 	bl	800677c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c04:	e084      	b.n	8006d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d107      	bne.n	8006c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d002      	beq.n	8006c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f8be 	bl	8006d9c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d107      	bne.n	8006c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f8fd 	bl	8006e34 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c40:	2b40      	cmp	r3, #64	; 0x40
 8006c42:	d12f      	bne.n	8006ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d02a      	beq.n	8006ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c5c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a2e      	ldr	r2, [pc, #184]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d101      	bne.n	8006c6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006c68:	4b2d      	ldr	r3, [pc, #180]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c6a:	e001      	b.n	8006c70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c70:	685a      	ldr	r2, [r3, #4]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4929      	ldr	r1, [pc, #164]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c78:	428b      	cmp	r3, r1
 8006c7a:	d101      	bne.n	8006c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006c7c:	4b28      	ldr	r3, [pc, #160]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c7e:	e001      	b.n	8006c84 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006c80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c88:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c96:	f043 0202 	orr.w	r2, r3, #2
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7ff fd6c 	bl	800677c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b08      	cmp	r3, #8
 8006cac:	d131      	bne.n	8006d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d02c      	beq.n	8006d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a17      	ldr	r2, [pc, #92]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d101      	bne.n	8006cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006cc2:	4b17      	ldr	r3, [pc, #92]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006cc4:	e001      	b.n	8006cca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006cc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4912      	ldr	r1, [pc, #72]	; (8006d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006cd2:	428b      	cmp	r3, r1
 8006cd4:	d101      	bne.n	8006cda <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006cd8:	e001      	b.n	8006cde <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006cde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ce2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006cf2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d00:	f043 0204 	orr.w	r2, r3, #4
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fd37 	bl	800677c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d0e:	e000      	b.n	8006d12 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d10:	bf00      	nop
}
 8006d12:	bf00      	nop
 8006d14:	3720      	adds	r7, #32
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40003800 	.word	0x40003800
 8006d20:	40003400 	.word	0x40003400

08006d24 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006d2c:	bf00      	nop
 8006d2e:	370c      	adds	r7, #12
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	1c99      	adds	r1, r3, #2
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	6251      	str	r1, [r2, #36]	; 0x24
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d113      	bne.n	8006d92 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d78:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d106      	bne.n	8006d92 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff ffc9 	bl	8006d24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	1c99      	adds	r1, r3, #2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6251      	str	r1, [r2, #36]	; 0x24
 8006dae:	8819      	ldrh	r1, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a1d      	ldr	r2, [pc, #116]	; (8006e2c <I2SEx_TxISR_I2SExt+0x90>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d101      	bne.n	8006dbe <I2SEx_TxISR_I2SExt+0x22>
 8006dba:	4b1d      	ldr	r3, [pc, #116]	; (8006e30 <I2SEx_TxISR_I2SExt+0x94>)
 8006dbc:	e001      	b.n	8006dc2 <I2SEx_TxISR_I2SExt+0x26>
 8006dbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dc2:	460a      	mov	r2, r1
 8006dc4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d121      	bne.n	8006e22 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a12      	ldr	r2, [pc, #72]	; (8006e2c <I2SEx_TxISR_I2SExt+0x90>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d101      	bne.n	8006dec <I2SEx_TxISR_I2SExt+0x50>
 8006de8:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <I2SEx_TxISR_I2SExt+0x94>)
 8006dea:	e001      	b.n	8006df0 <I2SEx_TxISR_I2SExt+0x54>
 8006dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	490d      	ldr	r1, [pc, #52]	; (8006e2c <I2SEx_TxISR_I2SExt+0x90>)
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	d101      	bne.n	8006e00 <I2SEx_TxISR_I2SExt+0x64>
 8006dfc:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <I2SEx_TxISR_I2SExt+0x94>)
 8006dfe:	e001      	b.n	8006e04 <I2SEx_TxISR_I2SExt+0x68>
 8006e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d106      	bne.n	8006e22 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f7ff ff81 	bl	8006d24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40003800 	.word	0x40003800
 8006e30:	40003400 	.word	0x40003400

08006e34 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68d8      	ldr	r0, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	1c99      	adds	r1, r3, #2
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006e4c:	b282      	uxth	r2, r0
 8006e4e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d113      	bne.n	8006e90 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e76:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d106      	bne.n	8006e90 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f7ff ff4a 	bl	8006d24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e90:	bf00      	nop
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a20      	ldr	r2, [pc, #128]	; (8006f28 <I2SEx_RxISR_I2SExt+0x90>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d101      	bne.n	8006eae <I2SEx_RxISR_I2SExt+0x16>
 8006eaa:	4b20      	ldr	r3, [pc, #128]	; (8006f2c <I2SEx_RxISR_I2SExt+0x94>)
 8006eac:	e001      	b.n	8006eb2 <I2SEx_RxISR_I2SExt+0x1a>
 8006eae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eb2:	68d8      	ldr	r0, [r3, #12]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	1c99      	adds	r1, r3, #2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006ebe:	b282      	uxth	r2, r0
 8006ec0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d121      	bne.n	8006f1e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a12      	ldr	r2, [pc, #72]	; (8006f28 <I2SEx_RxISR_I2SExt+0x90>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d101      	bne.n	8006ee8 <I2SEx_RxISR_I2SExt+0x50>
 8006ee4:	4b11      	ldr	r3, [pc, #68]	; (8006f2c <I2SEx_RxISR_I2SExt+0x94>)
 8006ee6:	e001      	b.n	8006eec <I2SEx_RxISR_I2SExt+0x54>
 8006ee8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	490d      	ldr	r1, [pc, #52]	; (8006f28 <I2SEx_RxISR_I2SExt+0x90>)
 8006ef4:	428b      	cmp	r3, r1
 8006ef6:	d101      	bne.n	8006efc <I2SEx_RxISR_I2SExt+0x64>
 8006ef8:	4b0c      	ldr	r3, [pc, #48]	; (8006f2c <I2SEx_RxISR_I2SExt+0x94>)
 8006efa:	e001      	b.n	8006f00 <I2SEx_RxISR_I2SExt+0x68>
 8006efc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f04:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d106      	bne.n	8006f1e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff ff03 	bl	8006d24 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40003800 	.word	0x40003800
 8006f2c:	40003400 	.word	0x40003400

08006f30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e25b      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d075      	beq.n	800703a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f4e:	4ba3      	ldr	r3, [pc, #652]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 030c 	and.w	r3, r3, #12
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d00c      	beq.n	8006f74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f5a:	4ba0      	ldr	r3, [pc, #640]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d112      	bne.n	8006f8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f66:	4b9d      	ldr	r3, [pc, #628]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f72:	d10b      	bne.n	8006f8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f74:	4b99      	ldr	r3, [pc, #612]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d05b      	beq.n	8007038 <HAL_RCC_OscConfig+0x108>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d157      	bne.n	8007038 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e236      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f94:	d106      	bne.n	8006fa4 <HAL_RCC_OscConfig+0x74>
 8006f96:	4b91      	ldr	r3, [pc, #580]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a90      	ldr	r2, [pc, #576]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e01d      	b.n	8006fe0 <HAL_RCC_OscConfig+0xb0>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fac:	d10c      	bne.n	8006fc8 <HAL_RCC_OscConfig+0x98>
 8006fae:	4b8b      	ldr	r3, [pc, #556]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a8a      	ldr	r2, [pc, #552]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fb8:	6013      	str	r3, [r2, #0]
 8006fba:	4b88      	ldr	r3, [pc, #544]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a87      	ldr	r2, [pc, #540]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e00b      	b.n	8006fe0 <HAL_RCC_OscConfig+0xb0>
 8006fc8:	4b84      	ldr	r3, [pc, #528]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a83      	ldr	r2, [pc, #524]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b81      	ldr	r3, [pc, #516]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a80      	ldr	r2, [pc, #512]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8006fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d013      	beq.n	8007010 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fe8:	f7fb fb68 	bl	80026bc <HAL_GetTick>
 8006fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fee:	e008      	b.n	8007002 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff0:	f7fb fb64 	bl	80026bc <HAL_GetTick>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	2b64      	cmp	r3, #100	; 0x64
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e1fb      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007002:	4b76      	ldr	r3, [pc, #472]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0f0      	beq.n	8006ff0 <HAL_RCC_OscConfig+0xc0>
 800700e:	e014      	b.n	800703a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007010:	f7fb fb54 	bl	80026bc <HAL_GetTick>
 8007014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007016:	e008      	b.n	800702a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007018:	f7fb fb50 	bl	80026bc <HAL_GetTick>
 800701c:	4602      	mov	r2, r0
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	1ad3      	subs	r3, r2, r3
 8007022:	2b64      	cmp	r3, #100	; 0x64
 8007024:	d901      	bls.n	800702a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007026:	2303      	movs	r3, #3
 8007028:	e1e7      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800702a:	4b6c      	ldr	r3, [pc, #432]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f0      	bne.n	8007018 <HAL_RCC_OscConfig+0xe8>
 8007036:	e000      	b.n	800703a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d063      	beq.n	800710e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007046:	4b65      	ldr	r3, [pc, #404]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	f003 030c 	and.w	r3, r3, #12
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007052:	4b62      	ldr	r3, [pc, #392]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800705a:	2b08      	cmp	r3, #8
 800705c:	d11c      	bne.n	8007098 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800705e:	4b5f      	ldr	r3, [pc, #380]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d116      	bne.n	8007098 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800706a:	4b5c      	ldr	r3, [pc, #368]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d005      	beq.n	8007082 <HAL_RCC_OscConfig+0x152>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d001      	beq.n	8007082 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e1bb      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007082:	4b56      	ldr	r3, [pc, #344]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	4952      	ldr	r1, [pc, #328]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007092:	4313      	orrs	r3, r2
 8007094:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007096:	e03a      	b.n	800710e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d020      	beq.n	80070e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070a0:	4b4f      	ldr	r3, [pc, #316]	; (80071e0 <HAL_RCC_OscConfig+0x2b0>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a6:	f7fb fb09 	bl	80026bc <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ac:	e008      	b.n	80070c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ae:	f7fb fb05 	bl	80026bc <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e19c      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070c0:	4b46      	ldr	r3, [pc, #280]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d0f0      	beq.n	80070ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070cc:	4b43      	ldr	r3, [pc, #268]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	00db      	lsls	r3, r3, #3
 80070da:	4940      	ldr	r1, [pc, #256]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	600b      	str	r3, [r1, #0]
 80070e0:	e015      	b.n	800710e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070e2:	4b3f      	ldr	r3, [pc, #252]	; (80071e0 <HAL_RCC_OscConfig+0x2b0>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e8:	f7fb fae8 	bl	80026bc <HAL_GetTick>
 80070ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070ee:	e008      	b.n	8007102 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070f0:	f7fb fae4 	bl	80026bc <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	1ad3      	subs	r3, r2, r3
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d901      	bls.n	8007102 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070fe:	2303      	movs	r3, #3
 8007100:	e17b      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	4b36      	ldr	r3, [pc, #216]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f0      	bne.n	80070f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 0308 	and.w	r3, r3, #8
 8007116:	2b00      	cmp	r3, #0
 8007118:	d030      	beq.n	800717c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d016      	beq.n	8007150 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007122:	4b30      	ldr	r3, [pc, #192]	; (80071e4 <HAL_RCC_OscConfig+0x2b4>)
 8007124:	2201      	movs	r2, #1
 8007126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007128:	f7fb fac8 	bl	80026bc <HAL_GetTick>
 800712c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800712e:	e008      	b.n	8007142 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007130:	f7fb fac4 	bl	80026bc <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b02      	cmp	r3, #2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e15b      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007142:	4b26      	ldr	r3, [pc, #152]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d0f0      	beq.n	8007130 <HAL_RCC_OscConfig+0x200>
 800714e:	e015      	b.n	800717c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007150:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <HAL_RCC_OscConfig+0x2b4>)
 8007152:	2200      	movs	r2, #0
 8007154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007156:	f7fb fab1 	bl	80026bc <HAL_GetTick>
 800715a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800715c:	e008      	b.n	8007170 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800715e:	f7fb faad 	bl	80026bc <HAL_GetTick>
 8007162:	4602      	mov	r2, r0
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b02      	cmp	r3, #2
 800716a:	d901      	bls.n	8007170 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e144      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007170:	4b1a      	ldr	r3, [pc, #104]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007174:	f003 0302 	and.w	r3, r3, #2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f0      	bne.n	800715e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 0304 	and.w	r3, r3, #4
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80a0 	beq.w	80072ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800718e:	4b13      	ldr	r3, [pc, #76]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d10f      	bne.n	80071ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800719a:	2300      	movs	r3, #0
 800719c:	60bb      	str	r3, [r7, #8]
 800719e:	4b0f      	ldr	r3, [pc, #60]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 80071a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a2:	4a0e      	ldr	r2, [pc, #56]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 80071a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a8:	6413      	str	r3, [r2, #64]	; 0x40
 80071aa:	4b0c      	ldr	r3, [pc, #48]	; (80071dc <HAL_RCC_OscConfig+0x2ac>)
 80071ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b2:	60bb      	str	r3, [r7, #8]
 80071b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <HAL_RCC_OscConfig+0x2b8>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d121      	bne.n	800720a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <HAL_RCC_OscConfig+0x2b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a07      	ldr	r2, [pc, #28]	; (80071e8 <HAL_RCC_OscConfig+0x2b8>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071d2:	f7fb fa73 	bl	80026bc <HAL_GetTick>
 80071d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071d8:	e011      	b.n	80071fe <HAL_RCC_OscConfig+0x2ce>
 80071da:	bf00      	nop
 80071dc:	40023800 	.word	0x40023800
 80071e0:	42470000 	.word	0x42470000
 80071e4:	42470e80 	.word	0x42470e80
 80071e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071ec:	f7fb fa66 	bl	80026bc <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e0fd      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fe:	4b81      	ldr	r3, [pc, #516]	; (8007404 <HAL_RCC_OscConfig+0x4d4>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007206:	2b00      	cmp	r3, #0
 8007208:	d0f0      	beq.n	80071ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d106      	bne.n	8007220 <HAL_RCC_OscConfig+0x2f0>
 8007212:	4b7d      	ldr	r3, [pc, #500]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	4a7c      	ldr	r2, [pc, #496]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007218:	f043 0301 	orr.w	r3, r3, #1
 800721c:	6713      	str	r3, [r2, #112]	; 0x70
 800721e:	e01c      	b.n	800725a <HAL_RCC_OscConfig+0x32a>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	2b05      	cmp	r3, #5
 8007226:	d10c      	bne.n	8007242 <HAL_RCC_OscConfig+0x312>
 8007228:	4b77      	ldr	r3, [pc, #476]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 800722a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722c:	4a76      	ldr	r2, [pc, #472]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 800722e:	f043 0304 	orr.w	r3, r3, #4
 8007232:	6713      	str	r3, [r2, #112]	; 0x70
 8007234:	4b74      	ldr	r3, [pc, #464]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007238:	4a73      	ldr	r2, [pc, #460]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6713      	str	r3, [r2, #112]	; 0x70
 8007240:	e00b      	b.n	800725a <HAL_RCC_OscConfig+0x32a>
 8007242:	4b71      	ldr	r3, [pc, #452]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	4a70      	ldr	r2, [pc, #448]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007248:	f023 0301 	bic.w	r3, r3, #1
 800724c:	6713      	str	r3, [r2, #112]	; 0x70
 800724e:	4b6e      	ldr	r3, [pc, #440]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	4a6d      	ldr	r2, [pc, #436]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007254:	f023 0304 	bic.w	r3, r3, #4
 8007258:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d015      	beq.n	800728e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007262:	f7fb fa2b 	bl	80026bc <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	e00a      	b.n	8007280 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7fb fa27 	bl	80026bc <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e0bc      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	4b61      	ldr	r3, [pc, #388]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ee      	beq.n	800726a <HAL_RCC_OscConfig+0x33a>
 800728c:	e014      	b.n	80072b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800728e:	f7fb fa15 	bl	80026bc <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007294:	e00a      	b.n	80072ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7fb fa11 	bl	80026bc <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e0a6      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072ac:	4b56      	ldr	r3, [pc, #344]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1ee      	bne.n	8007296 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80072b8:	7dfb      	ldrb	r3, [r7, #23]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d105      	bne.n	80072ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072be:	4b52      	ldr	r3, [pc, #328]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	4a51      	ldr	r2, [pc, #324]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 80072c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f000 8092 	beq.w	80073f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80072d4:	4b4c      	ldr	r3, [pc, #304]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 030c 	and.w	r3, r3, #12
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d05c      	beq.n	800739a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d141      	bne.n	800736c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072e8:	4b48      	ldr	r3, [pc, #288]	; (800740c <HAL_RCC_OscConfig+0x4dc>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ee:	f7fb f9e5 	bl	80026bc <HAL_GetTick>
 80072f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072f6:	f7fb f9e1 	bl	80026bc <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e078      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007308:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f0      	bne.n	80072f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	019b      	lsls	r3, r3, #6
 8007324:	431a      	orrs	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	3b01      	subs	r3, #1
 800732e:	041b      	lsls	r3, r3, #16
 8007330:	431a      	orrs	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	061b      	lsls	r3, r3, #24
 8007338:	4933      	ldr	r1, [pc, #204]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 800733a:	4313      	orrs	r3, r2
 800733c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800733e:	4b33      	ldr	r3, [pc, #204]	; (800740c <HAL_RCC_OscConfig+0x4dc>)
 8007340:	2201      	movs	r2, #1
 8007342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007344:	f7fb f9ba 	bl	80026bc <HAL_GetTick>
 8007348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800734a:	e008      	b.n	800735e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800734c:	f7fb f9b6 	bl	80026bc <HAL_GetTick>
 8007350:	4602      	mov	r2, r0
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	2b02      	cmp	r3, #2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e04d      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800735e:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0f0      	beq.n	800734c <HAL_RCC_OscConfig+0x41c>
 800736a:	e045      	b.n	80073f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800736c:	4b27      	ldr	r3, [pc, #156]	; (800740c <HAL_RCC_OscConfig+0x4dc>)
 800736e:	2200      	movs	r2, #0
 8007370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007372:	f7fb f9a3 	bl	80026bc <HAL_GetTick>
 8007376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007378:	e008      	b.n	800738c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800737a:	f7fb f99f 	bl	80026bc <HAL_GetTick>
 800737e:	4602      	mov	r2, r0
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	1ad3      	subs	r3, r2, r3
 8007384:	2b02      	cmp	r3, #2
 8007386:	d901      	bls.n	800738c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e036      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800738c:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d1f0      	bne.n	800737a <HAL_RCC_OscConfig+0x44a>
 8007398:	e02e      	b.n	80073f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d101      	bne.n	80073a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80073a2:	2301      	movs	r3, #1
 80073a4:	e029      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80073a6:	4b18      	ldr	r3, [pc, #96]	; (8007408 <HAL_RCC_OscConfig+0x4d8>)
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d11c      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d115      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80073ce:	4013      	ands	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d10d      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d106      	bne.n	80073f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d001      	beq.n	80073f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	e000      	b.n	80073fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	40007000 	.word	0x40007000
 8007408:	40023800 	.word	0x40023800
 800740c:	42470060 	.word	0x42470060

08007410 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d101      	bne.n	8007424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e0cc      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007424:	4b68      	ldr	r3, [pc, #416]	; (80075c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	429a      	cmp	r2, r3
 8007430:	d90c      	bls.n	800744c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007432:	4b65      	ldr	r3, [pc, #404]	; (80075c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	4b63      	ldr	r3, [pc, #396]	; (80075c8 <HAL_RCC_ClockConfig+0x1b8>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 030f 	and.w	r3, r3, #15
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	429a      	cmp	r2, r3
 8007446:	d001      	beq.n	800744c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	e0b8      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f003 0302 	and.w	r3, r3, #2
 8007454:	2b00      	cmp	r3, #0
 8007456:	d020      	beq.n	800749a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f003 0304 	and.w	r3, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	d005      	beq.n	8007470 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007464:	4b59      	ldr	r3, [pc, #356]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	4a58      	ldr	r2, [pc, #352]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 800746a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800746e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0308 	and.w	r3, r3, #8
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800747c:	4b53      	ldr	r3, [pc, #332]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	4a52      	ldr	r2, [pc, #328]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007486:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007488:	4b50      	ldr	r3, [pc, #320]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	494d      	ldr	r1, [pc, #308]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007496:	4313      	orrs	r3, r2
 8007498:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d044      	beq.n	8007530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d107      	bne.n	80074be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074ae:	4b47      	ldr	r3, [pc, #284]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d119      	bne.n	80074ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e07f      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2b02      	cmp	r3, #2
 80074c4:	d003      	beq.n	80074ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d107      	bne.n	80074de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ce:	4b3f      	ldr	r3, [pc, #252]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d109      	bne.n	80074ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e06f      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074de:	4b3b      	ldr	r3, [pc, #236]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f003 0302 	and.w	r3, r3, #2
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e067      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074ee:	4b37      	ldr	r3, [pc, #220]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 80074f0:	689b      	ldr	r3, [r3, #8]
 80074f2:	f023 0203 	bic.w	r2, r3, #3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	4934      	ldr	r1, [pc, #208]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 80074fc:	4313      	orrs	r3, r2
 80074fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007500:	f7fb f8dc 	bl	80026bc <HAL_GetTick>
 8007504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007506:	e00a      	b.n	800751e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007508:	f7fb f8d8 	bl	80026bc <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	f241 3288 	movw	r2, #5000	; 0x1388
 8007516:	4293      	cmp	r3, r2
 8007518:	d901      	bls.n	800751e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e04f      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800751e:	4b2b      	ldr	r3, [pc, #172]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 020c 	and.w	r2, r3, #12
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	429a      	cmp	r2, r3
 800752e:	d1eb      	bne.n	8007508 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007530:	4b25      	ldr	r3, [pc, #148]	; (80075c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 030f 	and.w	r3, r3, #15
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	429a      	cmp	r2, r3
 800753c:	d20c      	bcs.n	8007558 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800753e:	4b22      	ldr	r3, [pc, #136]	; (80075c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007546:	4b20      	ldr	r3, [pc, #128]	; (80075c8 <HAL_RCC_ClockConfig+0x1b8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	429a      	cmp	r2, r3
 8007552:	d001      	beq.n	8007558 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e032      	b.n	80075be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007564:	4b19      	ldr	r3, [pc, #100]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	4916      	ldr	r1, [pc, #88]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007572:	4313      	orrs	r3, r2
 8007574:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0308 	and.w	r3, r3, #8
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	691b      	ldr	r3, [r3, #16]
 800758e:	00db      	lsls	r3, r3, #3
 8007590:	490e      	ldr	r1, [pc, #56]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 8007592:	4313      	orrs	r3, r2
 8007594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007596:	f000 f821 	bl	80075dc <HAL_RCC_GetSysClockFreq>
 800759a:	4601      	mov	r1, r0
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <HAL_RCC_ClockConfig+0x1bc>)
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	091b      	lsrs	r3, r3, #4
 80075a2:	f003 030f 	and.w	r3, r3, #15
 80075a6:	4a0a      	ldr	r2, [pc, #40]	; (80075d0 <HAL_RCC_ClockConfig+0x1c0>)
 80075a8:	5cd3      	ldrb	r3, [r2, r3]
 80075aa:	fa21 f303 	lsr.w	r3, r1, r3
 80075ae:	4a09      	ldr	r2, [pc, #36]	; (80075d4 <HAL_RCC_ClockConfig+0x1c4>)
 80075b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80075b2:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <HAL_RCC_ClockConfig+0x1c8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fb f83c 	bl	8002634 <HAL_InitTick>

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	40023c00 	.word	0x40023c00
 80075cc:	40023800 	.word	0x40023800
 80075d0:	0800febc 	.word	0x0800febc
 80075d4:	20000014 	.word	0x20000014
 80075d8:	20000018 	.word	0x20000018

080075dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80075dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075de:	b085      	sub	sp, #20
 80075e0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80075e2:	2300      	movs	r3, #0
 80075e4:	607b      	str	r3, [r7, #4]
 80075e6:	2300      	movs	r3, #0
 80075e8:	60fb      	str	r3, [r7, #12]
 80075ea:	2300      	movs	r3, #0
 80075ec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075f2:	4b63      	ldr	r3, [pc, #396]	; (8007780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f003 030c 	and.w	r3, r3, #12
 80075fa:	2b04      	cmp	r3, #4
 80075fc:	d007      	beq.n	800760e <HAL_RCC_GetSysClockFreq+0x32>
 80075fe:	2b08      	cmp	r3, #8
 8007600:	d008      	beq.n	8007614 <HAL_RCC_GetSysClockFreq+0x38>
 8007602:	2b00      	cmp	r3, #0
 8007604:	f040 80b4 	bne.w	8007770 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007608:	4b5e      	ldr	r3, [pc, #376]	; (8007784 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800760a:	60bb      	str	r3, [r7, #8]
       break;
 800760c:	e0b3      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800760e:	4b5e      	ldr	r3, [pc, #376]	; (8007788 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007610:	60bb      	str	r3, [r7, #8]
      break;
 8007612:	e0b0      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007614:	4b5a      	ldr	r3, [pc, #360]	; (8007780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800761c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800761e:	4b58      	ldr	r3, [pc, #352]	; (8007780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d04a      	beq.n	80076c0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800762a:	4b55      	ldr	r3, [pc, #340]	; (8007780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	099b      	lsrs	r3, r3, #6
 8007630:	f04f 0400 	mov.w	r4, #0
 8007634:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	ea03 0501 	and.w	r5, r3, r1
 8007640:	ea04 0602 	and.w	r6, r4, r2
 8007644:	4629      	mov	r1, r5
 8007646:	4632      	mov	r2, r6
 8007648:	f04f 0300 	mov.w	r3, #0
 800764c:	f04f 0400 	mov.w	r4, #0
 8007650:	0154      	lsls	r4, r2, #5
 8007652:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007656:	014b      	lsls	r3, r1, #5
 8007658:	4619      	mov	r1, r3
 800765a:	4622      	mov	r2, r4
 800765c:	1b49      	subs	r1, r1, r5
 800765e:	eb62 0206 	sbc.w	r2, r2, r6
 8007662:	f04f 0300 	mov.w	r3, #0
 8007666:	f04f 0400 	mov.w	r4, #0
 800766a:	0194      	lsls	r4, r2, #6
 800766c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007670:	018b      	lsls	r3, r1, #6
 8007672:	1a5b      	subs	r3, r3, r1
 8007674:	eb64 0402 	sbc.w	r4, r4, r2
 8007678:	f04f 0100 	mov.w	r1, #0
 800767c:	f04f 0200 	mov.w	r2, #0
 8007680:	00e2      	lsls	r2, r4, #3
 8007682:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007686:	00d9      	lsls	r1, r3, #3
 8007688:	460b      	mov	r3, r1
 800768a:	4614      	mov	r4, r2
 800768c:	195b      	adds	r3, r3, r5
 800768e:	eb44 0406 	adc.w	r4, r4, r6
 8007692:	f04f 0100 	mov.w	r1, #0
 8007696:	f04f 0200 	mov.w	r2, #0
 800769a:	0262      	lsls	r2, r4, #9
 800769c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80076a0:	0259      	lsls	r1, r3, #9
 80076a2:	460b      	mov	r3, r1
 80076a4:	4614      	mov	r4, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	4621      	mov	r1, r4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f04f 0400 	mov.w	r4, #0
 80076b0:	461a      	mov	r2, r3
 80076b2:	4623      	mov	r3, r4
 80076b4:	f7f8 fdec 	bl	8000290 <__aeabi_uldivmod>
 80076b8:	4603      	mov	r3, r0
 80076ba:	460c      	mov	r4, r1
 80076bc:	60fb      	str	r3, [r7, #12]
 80076be:	e049      	b.n	8007754 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076c0:	4b2f      	ldr	r3, [pc, #188]	; (8007780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	099b      	lsrs	r3, r3, #6
 80076c6:	f04f 0400 	mov.w	r4, #0
 80076ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	ea03 0501 	and.w	r5, r3, r1
 80076d6:	ea04 0602 	and.w	r6, r4, r2
 80076da:	4629      	mov	r1, r5
 80076dc:	4632      	mov	r2, r6
 80076de:	f04f 0300 	mov.w	r3, #0
 80076e2:	f04f 0400 	mov.w	r4, #0
 80076e6:	0154      	lsls	r4, r2, #5
 80076e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076ec:	014b      	lsls	r3, r1, #5
 80076ee:	4619      	mov	r1, r3
 80076f0:	4622      	mov	r2, r4
 80076f2:	1b49      	subs	r1, r1, r5
 80076f4:	eb62 0206 	sbc.w	r2, r2, r6
 80076f8:	f04f 0300 	mov.w	r3, #0
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	0194      	lsls	r4, r2, #6
 8007702:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007706:	018b      	lsls	r3, r1, #6
 8007708:	1a5b      	subs	r3, r3, r1
 800770a:	eb64 0402 	sbc.w	r4, r4, r2
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	00e2      	lsls	r2, r4, #3
 8007718:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800771c:	00d9      	lsls	r1, r3, #3
 800771e:	460b      	mov	r3, r1
 8007720:	4614      	mov	r4, r2
 8007722:	195b      	adds	r3, r3, r5
 8007724:	eb44 0406 	adc.w	r4, r4, r6
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	02a2      	lsls	r2, r4, #10
 8007732:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007736:	0299      	lsls	r1, r3, #10
 8007738:	460b      	mov	r3, r1
 800773a:	4614      	mov	r4, r2
 800773c:	4618      	mov	r0, r3
 800773e:	4621      	mov	r1, r4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f04f 0400 	mov.w	r4, #0
 8007746:	461a      	mov	r2, r3
 8007748:	4623      	mov	r3, r4
 800774a:	f7f8 fda1 	bl	8000290 <__aeabi_uldivmod>
 800774e:	4603      	mov	r3, r0
 8007750:	460c      	mov	r4, r1
 8007752:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007754:	4b0a      	ldr	r3, [pc, #40]	; (8007780 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	0c1b      	lsrs	r3, r3, #16
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	3301      	adds	r3, #1
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	60bb      	str	r3, [r7, #8]
      break;
 800776e:	e002      	b.n	8007776 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007770:	4b04      	ldr	r3, [pc, #16]	; (8007784 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007772:	60bb      	str	r3, [r7, #8]
      break;
 8007774:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007776:	68bb      	ldr	r3, [r7, #8]
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007780:	40023800 	.word	0x40023800
 8007784:	00f42400 	.word	0x00f42400
 8007788:	007a1200 	.word	0x007a1200

0800778c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007790:	4b03      	ldr	r3, [pc, #12]	; (80077a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007792:	681b      	ldr	r3, [r3, #0]
}
 8007794:	4618      	mov	r0, r3
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000014 	.word	0x20000014

080077a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077a8:	f7ff fff0 	bl	800778c <HAL_RCC_GetHCLKFreq>
 80077ac:	4601      	mov	r1, r0
 80077ae:	4b05      	ldr	r3, [pc, #20]	; (80077c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	0a9b      	lsrs	r3, r3, #10
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	4a03      	ldr	r2, [pc, #12]	; (80077c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077ba:	5cd3      	ldrb	r3, [r2, r3]
 80077bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	40023800 	.word	0x40023800
 80077c8:	0800fecc 	.word	0x0800fecc

080077cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b086      	sub	sp, #24
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d105      	bne.n	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d038      	beq.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077f4:	4b68      	ldr	r3, [pc, #416]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80077fa:	f7fa ff5f 	bl	80026bc <HAL_GetTick>
 80077fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007800:	e008      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007802:	f7fa ff5b 	bl	80026bc <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e0bd      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007814:	4b61      	ldr	r3, [pc, #388]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1f0      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	019b      	lsls	r3, r3, #6
 800782a:	431a      	orrs	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	071b      	lsls	r3, r3, #28
 8007832:	495a      	ldr	r1, [pc, #360]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007834:	4313      	orrs	r3, r2
 8007836:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800783a:	4b57      	ldr	r3, [pc, #348]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007840:	f7fa ff3c 	bl	80026bc <HAL_GetTick>
 8007844:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007846:	e008      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007848:	f7fa ff38 	bl	80026bc <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e09a      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800785a:	4b50      	ldr	r3, [pc, #320]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0f0      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b00      	cmp	r3, #0
 8007870:	f000 8083 	beq.w	800797a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	4b48      	ldr	r3, [pc, #288]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787c:	4a47      	ldr	r2, [pc, #284]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800787e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007882:	6413      	str	r3, [r2, #64]	; 0x40
 8007884:	4b45      	ldr	r3, [pc, #276]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800788c:	60fb      	str	r3, [r7, #12]
 800788e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007890:	4b43      	ldr	r3, [pc, #268]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a42      	ldr	r2, [pc, #264]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800789a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800789c:	f7fa ff0e 	bl	80026bc <HAL_GetTick>
 80078a0:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078a2:	e008      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078a4:	f7fa ff0a 	bl	80026bc <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d901      	bls.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	e06c      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078b6:	4b3a      	ldr	r3, [pc, #232]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f0      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078c2:	4b36      	ldr	r3, [pc, #216]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ca:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d02f      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	691b      	ldr	r3, [r3, #16]
 80078d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078da:	693a      	ldr	r2, [r7, #16]
 80078dc:	429a      	cmp	r2, r3
 80078de:	d028      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80078e0:	4b2e      	ldr	r3, [pc, #184]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078e8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80078ea:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80078f0:	4b2c      	ldr	r3, [pc, #176]	; (80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80078f6:	4a29      	ldr	r2, [pc, #164]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80078fc:	4b27      	ldr	r3, [pc, #156]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b01      	cmp	r3, #1
 8007906:	d114      	bne.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007908:	f7fa fed8 	bl	80026bc <HAL_GetTick>
 800790c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800790e:	e00a      	b.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007910:	f7fa fed4 	bl	80026bc <HAL_GetTick>
 8007914:	4602      	mov	r2, r0
 8007916:	697b      	ldr	r3, [r7, #20]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	f241 3288 	movw	r2, #5000	; 0x1388
 800791e:	4293      	cmp	r3, r2
 8007920:	d901      	bls.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e034      	b.n	8007990 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007926:	4b1d      	ldr	r3, [pc, #116]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	d0ee      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800793a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800793e:	d10d      	bne.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007940:	4b16      	ldr	r3, [pc, #88]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007954:	4911      	ldr	r1, [pc, #68]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
 800795a:	e005      	b.n	8007968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800795c:	4b0f      	ldr	r3, [pc, #60]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4a0e      	ldr	r2, [pc, #56]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007962:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007966:	6093      	str	r3, [r2, #8]
 8007968:	4b0c      	ldr	r3, [pc, #48]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800796a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007974:	4909      	ldr	r1, [pc, #36]	; (800799c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007976:	4313      	orrs	r3, r2
 8007978:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0308 	and.w	r3, r3, #8
 8007982:	2b00      	cmp	r3, #0
 8007984:	d003      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7d1a      	ldrb	r2, [r3, #20]
 800798a:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800798c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	42470068 	.word	0x42470068
 800799c:	40023800 	.word	0x40023800
 80079a0:	40007000 	.word	0x40007000
 80079a4:	42470e40 	.word	0x42470e40
 80079a8:	424711e0 	.word	0x424711e0

080079ac <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2203      	movs	r2, #3
 80079b8:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80079ba:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80079bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079c0:	099b      	lsrs	r3, r3, #6
 80079c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079ca:	4b18      	ldr	r3, [pc, #96]	; (8007a2c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80079cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079d0:	0f1b      	lsrs	r3, r3, #28
 80079d2:	f003 0207 	and.w	r2, r3, #7
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80079dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80079e8:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80079f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80079f2:	4b0e      	ldr	r3, [pc, #56]	; (8007a2c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	431a      	orrs	r2, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007a04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d103      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8007a16:	e002      	b.n	8007a1e <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	751a      	strb	r2, [r3, #20]
}
 8007a1e:	bf00      	nop
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40023800 	.word	0x40023800

08007a30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007a44:	2300      	movs	r3, #0
 8007a46:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d13f      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007a4e:	4b23      	ldr	r3, [pc, #140]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a56:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d131      	bne.n	8007ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007a62:	4b1f      	ldr	r3, [pc, #124]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007a64:	617b      	str	r3, [r7, #20]
          break;
 8007a66:	e031      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007a68:	4b1c      	ldr	r3, [pc, #112]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a74:	d109      	bne.n	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a76:	4b19      	ldr	r3, [pc, #100]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a80:	4a18      	ldr	r2, [pc, #96]	; (8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	e008      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007a8a:	4b14      	ldr	r3, [pc, #80]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a94:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9a:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007a9c:	4b0f      	ldr	r3, [pc, #60]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007a9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa2:	099b      	lsrs	r3, r3, #6
 8007aa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	fb02 f303 	mul.w	r3, r2, r3
 8007aae:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007ab0:	4b0a      	ldr	r3, [pc, #40]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab6:	0f1b      	lsrs	r3, r3, #28
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac2:	617b      	str	r3, [r7, #20]
          break;
 8007ac4:	e002      	b.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	617b      	str	r3, [r7, #20]
          break;
 8007aca:	bf00      	nop
        }
      }
      break;
 8007acc:	bf00      	nop
    }
  }
  return frequency;
 8007ace:	697b      	ldr	r3, [r7, #20]
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	371c      	adds	r7, #28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	00bb8000 	.word	0x00bb8000
 8007ae4:	007a1200 	.word	0x007a1200
 8007ae8:	00f42400 	.word	0x00f42400

08007aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e01d      	b.n	8007b3a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa fab2 	bl	800207c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	3304      	adds	r3, #4
 8007b28:	4619      	mov	r1, r3
 8007b2a:	4610      	mov	r0, r2
 8007b2c:	f000 fb64 	bl	80081f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f003 0307 	and.w	r3, r3, #7
 8007b64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2b06      	cmp	r3, #6
 8007b6a:	d007      	beq.n	8007b7c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b083      	sub	sp, #12
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0201 	bic.w	r2, r2, #1
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6a1a      	ldr	r2, [r3, #32]
 8007ba8:	f241 1311 	movw	r3, #4369	; 0x1111
 8007bac:	4013      	ands	r3, r2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10f      	bne.n	8007bd2 <HAL_TIM_Base_Stop_IT+0x48>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6a1a      	ldr	r2, [r3, #32]
 8007bb8:	f240 4344 	movw	r3, #1092	; 0x444
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d107      	bne.n	8007bd2 <HAL_TIM_Base_Stop_IT+0x48>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f022 0201 	bic.w	r2, r2, #1
 8007bd0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e01d      	b.n	8007c2e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d106      	bne.n	8007c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fa fa9c 	bl	8002144 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	3304      	adds	r3, #4
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 faea 	bl	80081f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
	...

08007c38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2201      	movs	r2, #1
 8007c48:	6839      	ldr	r1, [r7, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fd7a 	bl	8008744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a10      	ldr	r2, [pc, #64]	; (8007c98 <HAL_TIM_PWM_Start+0x60>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d107      	bne.n	8007c6a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2b06      	cmp	r3, #6
 8007c7a:	d007      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	40010000 	.word	0x40010000

08007c9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	691b      	ldr	r3, [r3, #16]
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b02      	cmp	r3, #2
 8007cb0:	d122      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d11b      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f06f 0202 	mvn.w	r2, #2
 8007cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699b      	ldr	r3, [r3, #24]
 8007cd6:	f003 0303 	and.w	r3, r3, #3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa6b 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007ce4:	e005      	b.n	8007cf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fa5d 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fa6e 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0304 	and.w	r3, r3, #4
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	d122      	bne.n	8007d4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d11b      	bne.n	8007d4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f06f 0204 	mvn.w	r2, #4
 8007d1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fa41 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007d38:	e005      	b.n	8007d46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa33 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fa44 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	f003 0308 	and.w	r3, r3, #8
 8007d56:	2b08      	cmp	r3, #8
 8007d58:	d122      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	f003 0308 	and.w	r3, r3, #8
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d11b      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f06f 0208 	mvn.w	r2, #8
 8007d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2204      	movs	r2, #4
 8007d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa17 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007d8c:	e005      	b.n	8007d9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa09 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fa1a 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f003 0310 	and.w	r3, r3, #16
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d122      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f003 0310 	and.w	r3, r3, #16
 8007db8:	2b10      	cmp	r3, #16
 8007dba:	d11b      	bne.n	8007df4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f06f 0210 	mvn.w	r2, #16
 8007dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2208      	movs	r2, #8
 8007dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	69db      	ldr	r3, [r3, #28]
 8007dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f9ed 	bl	80081ba <HAL_TIM_IC_CaptureCallback>
 8007de0:	e005      	b.n	8007dee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f9df 	bl	80081a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f9f0 	bl	80081ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	691b      	ldr	r3, [r3, #16]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d10e      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	f003 0301 	and.w	r3, r3, #1
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d107      	bne.n	8007e20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f06f 0201 	mvn.w	r2, #1
 8007e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f9 f850 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e2a:	2b80      	cmp	r3, #128	; 0x80
 8007e2c:	d10e      	bne.n	8007e4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e38:	2b80      	cmp	r3, #128	; 0x80
 8007e3a:	d107      	bne.n	8007e4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fd1a 	bl	8008880 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	d10e      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e64:	2b40      	cmp	r3, #64	; 0x40
 8007e66:	d107      	bne.n	8007e78 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9b5 	bl	80081e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	691b      	ldr	r3, [r3, #16]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b20      	cmp	r3, #32
 8007e84:	d10e      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	f003 0320 	and.w	r3, r3, #32
 8007e90:	2b20      	cmp	r3, #32
 8007e92:	d107      	bne.n	8007ea4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f06f 0220 	mvn.w	r2, #32
 8007e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fce4 	bl	800886c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3708      	adds	r7, #8
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e0b4      	b.n	8008030 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2202      	movs	r2, #2
 8007ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b0c      	cmp	r3, #12
 8007eda:	f200 809f 	bhi.w	800801c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007ede:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f19 	.word	0x08007f19
 8007ee8:	0800801d 	.word	0x0800801d
 8007eec:	0800801d 	.word	0x0800801d
 8007ef0:	0800801d 	.word	0x0800801d
 8007ef4:	08007f59 	.word	0x08007f59
 8007ef8:	0800801d 	.word	0x0800801d
 8007efc:	0800801d 	.word	0x0800801d
 8007f00:	0800801d 	.word	0x0800801d
 8007f04:	08007f9b 	.word	0x08007f9b
 8007f08:	0800801d 	.word	0x0800801d
 8007f0c:	0800801d 	.word	0x0800801d
 8007f10:	0800801d 	.word	0x0800801d
 8007f14:	08007fdb 	.word	0x08007fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f9ea 	bl	80082f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0208 	orr.w	r2, r2, #8
 8007f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0204 	bic.w	r2, r2, #4
 8007f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6999      	ldr	r1, [r3, #24]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691a      	ldr	r2, [r3, #16]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	430a      	orrs	r2, r1
 8007f54:	619a      	str	r2, [r3, #24]
      break;
 8007f56:	e062      	b.n	800801e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fa30 	bl	80083c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	699a      	ldr	r2, [r3, #24]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6999      	ldr	r1, [r3, #24]
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	021a      	lsls	r2, r3, #8
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	619a      	str	r2, [r3, #24]
      break;
 8007f98:	e041      	b.n	800801e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fa7b 	bl	800849c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f042 0208 	orr.w	r2, r2, #8
 8007fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f022 0204 	bic.w	r2, r2, #4
 8007fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	691a      	ldr	r2, [r3, #16]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	430a      	orrs	r2, r1
 8007fd6:	61da      	str	r2, [r3, #28]
      break;
 8007fd8:	e021      	b.n	800801e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68b9      	ldr	r1, [r7, #8]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f000 fac5 	bl	8008570 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69da      	ldr	r2, [r3, #28]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	69d9      	ldr	r1, [r3, #28]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	021a      	lsls	r2, r3, #8
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	430a      	orrs	r2, r1
 8008018:	61da      	str	r2, [r3, #28]
      break;
 800801a:	e000      	b.n	800801e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800801c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800802e:	2300      	movs	r3, #0
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_TIM_ConfigClockSource+0x18>
 800804c:	2302      	movs	r3, #2
 800804e:	e0a6      	b.n	800819e <HAL_TIM_ConfigClockSource+0x166>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800806e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008076:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b40      	cmp	r3, #64	; 0x40
 8008086:	d067      	beq.n	8008158 <HAL_TIM_ConfigClockSource+0x120>
 8008088:	2b40      	cmp	r3, #64	; 0x40
 800808a:	d80b      	bhi.n	80080a4 <HAL_TIM_ConfigClockSource+0x6c>
 800808c:	2b10      	cmp	r3, #16
 800808e:	d073      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x140>
 8008090:	2b10      	cmp	r3, #16
 8008092:	d802      	bhi.n	800809a <HAL_TIM_ConfigClockSource+0x62>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d06f      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008098:	e078      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800809a:	2b20      	cmp	r3, #32
 800809c:	d06c      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x140>
 800809e:	2b30      	cmp	r3, #48	; 0x30
 80080a0:	d06a      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80080a2:	e073      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080a4:	2b70      	cmp	r3, #112	; 0x70
 80080a6:	d00d      	beq.n	80080c4 <HAL_TIM_ConfigClockSource+0x8c>
 80080a8:	2b70      	cmp	r3, #112	; 0x70
 80080aa:	d804      	bhi.n	80080b6 <HAL_TIM_ConfigClockSource+0x7e>
 80080ac:	2b50      	cmp	r3, #80	; 0x50
 80080ae:	d033      	beq.n	8008118 <HAL_TIM_ConfigClockSource+0xe0>
 80080b0:	2b60      	cmp	r3, #96	; 0x60
 80080b2:	d041      	beq.n	8008138 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80080b4:	e06a      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ba:	d066      	beq.n	800818a <HAL_TIM_ConfigClockSource+0x152>
 80080bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c0:	d017      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80080c2:	e063      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	6899      	ldr	r1, [r3, #8]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f000 fb16 	bl	8008704 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	609a      	str	r2, [r3, #8]
      break;
 80080f0:	e04c      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6899      	ldr	r1, [r3, #8]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f000 faff 	bl	8008704 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008114:	609a      	str	r2, [r3, #8]
      break;
 8008116:	e039      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6818      	ldr	r0, [r3, #0]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	6859      	ldr	r1, [r3, #4]
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	461a      	mov	r2, r3
 8008126:	f000 fa73 	bl	8008610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2150      	movs	r1, #80	; 0x50
 8008130:	4618      	mov	r0, r3
 8008132:	f000 facc 	bl	80086ce <TIM_ITRx_SetConfig>
      break;
 8008136:	e029      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6859      	ldr	r1, [r3, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	461a      	mov	r2, r3
 8008146:	f000 fa92 	bl	800866e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2160      	movs	r1, #96	; 0x60
 8008150:	4618      	mov	r0, r3
 8008152:	f000 fabc 	bl	80086ce <TIM_ITRx_SetConfig>
      break;
 8008156:	e019      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6818      	ldr	r0, [r3, #0]
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6859      	ldr	r1, [r3, #4]
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	461a      	mov	r2, r3
 8008166:	f000 fa53 	bl	8008610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2140      	movs	r1, #64	; 0x40
 8008170:	4618      	mov	r0, r3
 8008172:	f000 faac 	bl	80086ce <TIM_ITRx_SetConfig>
      break;
 8008176:	e009      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f000 faa3 	bl	80086ce <TIM_ITRx_SetConfig>
      break;
 8008188:	e000      	b.n	800818c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800818a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081a6:	b480      	push	{r7}
 80081a8:	b083      	sub	sp, #12
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081ae:	bf00      	nop
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr

080081ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ce:	b480      	push	{r7}
 80081d0:	b083      	sub	sp, #12
 80081d2:	af00      	add	r7, sp, #0
 80081d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081d6:	bf00      	nop
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
	...

080081f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a34      	ldr	r2, [pc, #208]	; (80082dc <TIM_Base_SetConfig+0xe4>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008216:	d00b      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a31      	ldr	r2, [pc, #196]	; (80082e0 <TIM_Base_SetConfig+0xe8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a30      	ldr	r2, [pc, #192]	; (80082e4 <TIM_Base_SetConfig+0xec>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_Base_SetConfig+0x38>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a2f      	ldr	r2, [pc, #188]	; (80082e8 <TIM_Base_SetConfig+0xf0>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d108      	bne.n	8008242 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008236:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	4313      	orrs	r3, r2
 8008240:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a25      	ldr	r2, [pc, #148]	; (80082dc <TIM_Base_SetConfig+0xe4>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d01b      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008250:	d017      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a22      	ldr	r2, [pc, #136]	; (80082e0 <TIM_Base_SetConfig+0xe8>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d013      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a21      	ldr	r2, [pc, #132]	; (80082e4 <TIM_Base_SetConfig+0xec>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d00f      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a20      	ldr	r2, [pc, #128]	; (80082e8 <TIM_Base_SetConfig+0xf0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d00b      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	4a1f      	ldr	r2, [pc, #124]	; (80082ec <TIM_Base_SetConfig+0xf4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d007      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1e      	ldr	r2, [pc, #120]	; (80082f0 <TIM_Base_SetConfig+0xf8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d003      	beq.n	8008282 <TIM_Base_SetConfig+0x8a>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <TIM_Base_SetConfig+0xfc>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d108      	bne.n	8008294 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4313      	orrs	r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	695b      	ldr	r3, [r3, #20]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a08      	ldr	r2, [pc, #32]	; (80082dc <TIM_Base_SetConfig+0xe4>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d103      	bne.n	80082c8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	691a      	ldr	r2, [r3, #16]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	615a      	str	r2, [r3, #20]
}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40010000 	.word	0x40010000
 80082e0:	40000400 	.word	0x40000400
 80082e4:	40000800 	.word	0x40000800
 80082e8:	40000c00 	.word	0x40000c00
 80082ec:	40014000 	.word	0x40014000
 80082f0:	40014400 	.word	0x40014400
 80082f4:	40014800 	.word	0x40014800

080082f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082f8:	b480      	push	{r7}
 80082fa:	b087      	sub	sp, #28
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
 8008300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0201 	bic.w	r2, r3, #1
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a1b      	ldr	r3, [r3, #32]
 8008312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f023 0303 	bic.w	r3, r3, #3
 800832e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	f023 0302 	bic.w	r3, r3, #2
 8008340:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	697a      	ldr	r2, [r7, #20]
 8008348:	4313      	orrs	r3, r2
 800834a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1c      	ldr	r2, [pc, #112]	; (80083c0 <TIM_OC1_SetConfig+0xc8>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d10c      	bne.n	800836e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	f023 0308 	bic.w	r3, r3, #8
 800835a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	68db      	ldr	r3, [r3, #12]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	4313      	orrs	r3, r2
 8008364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f023 0304 	bic.w	r3, r3, #4
 800836c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a13      	ldr	r2, [pc, #76]	; (80083c0 <TIM_OC1_SetConfig+0xc8>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d111      	bne.n	800839a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800837c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008384:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	693a      	ldr	r2, [r7, #16]
 800839e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	685a      	ldr	r2, [r3, #4]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	621a      	str	r2, [r3, #32]
}
 80083b4:	bf00      	nop
 80083b6:	371c      	adds	r7, #28
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	40010000 	.word	0x40010000

080083c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f023 0210 	bic.w	r2, r3, #16
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	021b      	lsls	r3, r3, #8
 8008402:	68fa      	ldr	r2, [r7, #12]
 8008404:	4313      	orrs	r3, r2
 8008406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f023 0320 	bic.w	r3, r3, #32
 800840e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	011b      	lsls	r3, r3, #4
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a1e      	ldr	r2, [pc, #120]	; (8008498 <TIM_OC2_SetConfig+0xd4>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d10d      	bne.n	8008440 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800843e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a15      	ldr	r2, [pc, #84]	; (8008498 <TIM_OC2_SetConfig+0xd4>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d113      	bne.n	8008470 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800844e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008456:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	695b      	ldr	r3, [r3, #20]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	693a      	ldr	r2, [r7, #16]
 800846c:	4313      	orrs	r3, r2
 800846e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	697a      	ldr	r2, [r7, #20]
 8008488:	621a      	str	r2, [r3, #32]
}
 800848a:	bf00      	nop
 800848c:	371c      	adds	r7, #28
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	40010000 	.word	0x40010000

0800849c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
 80084a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a1b      	ldr	r3, [r3, #32]
 80084aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a1b      	ldr	r3, [r3, #32]
 80084b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	69db      	ldr	r3, [r3, #28]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0303 	bic.w	r3, r3, #3
 80084d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	021b      	lsls	r3, r3, #8
 80084ec:	697a      	ldr	r2, [r7, #20]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a1d      	ldr	r2, [pc, #116]	; (800856c <TIM_OC3_SetConfig+0xd0>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d10d      	bne.n	8008516 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	021b      	lsls	r3, r3, #8
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a14      	ldr	r2, [pc, #80]	; (800856c <TIM_OC3_SetConfig+0xd0>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d113      	bne.n	8008546 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800852c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	699b      	ldr	r3, [r3, #24]
 800853e:	011b      	lsls	r3, r3, #4
 8008540:	693a      	ldr	r2, [r7, #16]
 8008542:	4313      	orrs	r3, r2
 8008544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	621a      	str	r2, [r3, #32]
}
 8008560:	bf00      	nop
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	40010000 	.word	0x40010000

08008570 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a1b      	ldr	r3, [r3, #32]
 800857e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a1b      	ldr	r3, [r3, #32]
 800858a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	69db      	ldr	r3, [r3, #28]
 8008596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800859e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	021b      	lsls	r3, r3, #8
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	689b      	ldr	r3, [r3, #8]
 80085c0:	031b      	lsls	r3, r3, #12
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a10      	ldr	r2, [pc, #64]	; (800860c <TIM_OC4_SetConfig+0x9c>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d109      	bne.n	80085e4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	695b      	ldr	r3, [r3, #20]
 80085dc:	019b      	lsls	r3, r3, #6
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	697a      	ldr	r2, [r7, #20]
 80085e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	621a      	str	r2, [r3, #32]
}
 80085fe:	bf00      	nop
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40010000 	.word	0x40010000

08008610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0201 	bic.w	r2, r3, #1
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800863a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	693a      	ldr	r2, [r7, #16]
 8008642:	4313      	orrs	r3, r2
 8008644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f023 030a 	bic.w	r3, r3, #10
 800864c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	621a      	str	r2, [r3, #32]
}
 8008662:	bf00      	nop
 8008664:	371c      	adds	r7, #28
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800866e:	b480      	push	{r7}
 8008670:	b087      	sub	sp, #28
 8008672:	af00      	add	r7, sp, #0
 8008674:	60f8      	str	r0, [r7, #12]
 8008676:	60b9      	str	r1, [r7, #8]
 8008678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f023 0210 	bic.w	r2, r3, #16
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	699b      	ldr	r3, [r3, #24]
 800868a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6a1b      	ldr	r3, [r3, #32]
 8008690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	031b      	lsls	r3, r3, #12
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	621a      	str	r2, [r3, #32]
}
 80086c2:	bf00      	nop
 80086c4:	371c      	adds	r7, #28
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086e6:	683a      	ldr	r2, [r7, #0]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f043 0307 	orr.w	r3, r3, #7
 80086f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	609a      	str	r2, [r3, #8]
}
 80086f8:	bf00      	nop
 80086fa:	3714      	adds	r7, #20
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr

08008704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800871e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	021a      	lsls	r2, r3, #8
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	431a      	orrs	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4313      	orrs	r3, r2
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	609a      	str	r2, [r3, #8]
}
 8008738:	bf00      	nop
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f003 031f 	and.w	r3, r3, #31
 8008756:	2201      	movs	r2, #1
 8008758:	fa02 f303 	lsl.w	r3, r2, r3
 800875c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a1a      	ldr	r2, [r3, #32]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	43db      	mvns	r3, r3
 8008766:	401a      	ands	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a1a      	ldr	r2, [r3, #32]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f003 031f 	and.w	r3, r3, #31
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	fa01 f303 	lsl.w	r3, r1, r3
 800877c:	431a      	orrs	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e050      	b.n	800884a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a1c      	ldr	r2, [pc, #112]	; (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d018      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087f4:	d013      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a18      	ldr	r2, [pc, #96]	; (800885c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d00e      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a16      	ldr	r2, [pc, #88]	; (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d009      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a15      	ldr	r2, [pc, #84]	; (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a13      	ldr	r2, [pc, #76]	; (8008868 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d10c      	bne.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4313      	orrs	r3, r2
 800882e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40010000 	.word	0x40010000
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40014000 	.word	0x40014000

0800886c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008888:	bf00      	nop
 800888a:	370c      	adds	r7, #12
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr

08008894 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008894:	b084      	sub	sp, #16
 8008896:	b580      	push	{r7, lr}
 8008898:	b084      	sub	sp, #16
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
 800889e:	f107 001c 	add.w	r0, r7, #28
 80088a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d122      	bne.n	80088f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68db      	ldr	r3, [r3, #12]
 80088bc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80088c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80088d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d105      	bne.n	80088e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f94a 	bl	8008b80 <USB_CoreReset>
 80088ec:	4603      	mov	r3, r0
 80088ee:	73fb      	strb	r3, [r7, #15]
 80088f0:	e01a      	b.n	8008928 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f93e 	bl	8008b80 <USB_CoreReset>
 8008904:	4603      	mov	r3, r0
 8008906:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800890a:	2b00      	cmp	r3, #0
 800890c:	d106      	bne.n	800891c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008912:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	639a      	str	r2, [r3, #56]	; 0x38
 800891a:	e005      	b.n	8008928 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008920:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	2b01      	cmp	r3, #1
 800892c:	d10b      	bne.n	8008946 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f043 0206 	orr.w	r2, r3, #6
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	f043 0220 	orr.w	r2, r3, #32
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008952:	b004      	add	sp, #16
 8008954:	4770      	bx	lr

08008956 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008956:	b480      	push	{r7}
 8008958:	b083      	sub	sp, #12
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f043 0201 	orr.w	r2, r3, #1
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008978:	b480      	push	{r7}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	f023 0201 	bic.w	r2, r3, #1
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800898c:	2300      	movs	r3, #0
}
 800898e:	4618      	mov	r0, r3
 8008990:	370c      	adds	r7, #12
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr

0800899a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b082      	sub	sp, #8
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d106      	bne.n	80089c6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	60da      	str	r2, [r3, #12]
 80089c4:	e00b      	b.n	80089de <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d106      	bne.n	80089da <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	60da      	str	r2, [r3, #12]
 80089d8:	e001      	b.n	80089de <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e003      	b.n	80089e6 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80089de:	2032      	movs	r0, #50	; 0x32
 80089e0:	f7f9 fe78 	bl	80026d4 <HAL_Delay>

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	019b      	lsls	r3, r3, #6
 8008a02:	f043 0220 	orr.w	r2, r3, #32
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	4a09      	ldr	r2, [pc, #36]	; (8008a38 <USB_FlushTxFifo+0x48>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d901      	bls.n	8008a1c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	e006      	b.n	8008a2a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	f003 0320 	and.w	r3, r3, #32
 8008a24:	2b20      	cmp	r3, #32
 8008a26:	d0f0      	beq.n	8008a0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3714      	adds	r7, #20
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	00030d40 	.word	0x00030d40

08008a3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a44:	2300      	movs	r3, #0
 8008a46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2210      	movs	r2, #16
 8008a4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	4a09      	ldr	r2, [pc, #36]	; (8008a7c <USB_FlushRxFifo+0x40>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d901      	bls.n	8008a60 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	e006      	b.n	8008a6e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	f003 0310 	and.w	r3, r3, #16
 8008a68:	2b10      	cmp	r3, #16
 8008a6a:	d0f0      	beq.n	8008a4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3714      	adds	r7, #20
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	00030d40 	.word	0x00030d40

08008a80 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b089      	sub	sp, #36	; 0x24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4611      	mov	r1, r2
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	460b      	mov	r3, r1
 8008a90:	71fb      	strb	r3, [r7, #7]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008a9e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d11a      	bne.n	8008adc <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008aa6:	88bb      	ldrh	r3, [r7, #4]
 8008aa8:	3303      	adds	r3, #3
 8008aaa:	089b      	lsrs	r3, r3, #2
 8008aac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61bb      	str	r3, [r7, #24]
 8008ab2:	e00f      	b.n	8008ad4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	031a      	lsls	r2, r3, #12
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	3304      	adds	r3, #4
 8008acc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	3301      	adds	r3, #1
 8008ad2:	61bb      	str	r3, [r7, #24]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d3eb      	bcc.n	8008ab4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3724      	adds	r7, #36	; 0x24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b089      	sub	sp, #36	; 0x24
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	4613      	mov	r3, r2
 8008af6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008b00:	88fb      	ldrh	r3, [r7, #6]
 8008b02:	3303      	adds	r3, #3
 8008b04:	089b      	lsrs	r3, r3, #2
 8008b06:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008b08:	2300      	movs	r3, #0
 8008b0a:	61bb      	str	r3, [r7, #24]
 8008b0c:	e00b      	b.n	8008b26 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	601a      	str	r2, [r3, #0]
    pDest++;
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008b20:	69bb      	ldr	r3, [r7, #24]
 8008b22:	3301      	adds	r3, #1
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d3ef      	bcc.n	8008b0e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008b2e:	69fb      	ldr	r3, [r7, #28]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3724      	adds	r7, #36	; 0x24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	695b      	ldr	r3, [r3, #20]
 8008b48:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4013      	ands	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b54:	68fb      	ldr	r3, [r7, #12]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr

08008b62 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b62:	b480      	push	{r7}
 8008b64:	b083      	sub	sp, #12
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr
	...

08008b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <USB_CoreReset+0x64>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d901      	bls.n	8008b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e01b      	b.n	8008bd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	daf2      	bge.n	8008b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f043 0201 	orr.w	r2, r3, #1
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3301      	adds	r3, #1
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	4a09      	ldr	r2, [pc, #36]	; (8008be4 <USB_CoreReset+0x64>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d901      	bls.n	8008bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e006      	b.n	8008bd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	f003 0301 	and.w	r3, r3, #1
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d0f0      	beq.n	8008bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008bd4:	2300      	movs	r3, #0
}
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	00030d40 	.word	0x00030d40

08008be8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008be8:	b084      	sub	sp, #16
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	f107 001c 	add.w	r0, r7, #28
 8008bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c04:	461a      	mov	r2, r3
 8008c06:	2300      	movs	r3, #0
 8008c08:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c26:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d018      	beq.n	8008c6c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d10a      	bne.n	8008c56 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c4e:	f043 0304 	orr.w	r3, r3, #4
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	e014      	b.n	8008c80 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c64:	f023 0304 	bic.w	r3, r3, #4
 8008c68:	6013      	str	r3, [r2, #0]
 8008c6a:	e009      	b.n	8008c80 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008c7a:	f023 0304 	bic.w	r3, r3, #4
 8008c7e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008c80:	2110      	movs	r1, #16
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7ff feb4 	bl	80089f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff fed7 	bl	8008a3c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e015      	b.n	8008cc0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	015a      	lsls	r2, r3, #5
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4413      	add	r3, r2
 8008cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d3e5      	bcc.n	8008c94 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8008cc8:	2101      	movs	r1, #1
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f8ac 	bl	8008e28 <USB_DriveVbus>

  HAL_Delay(200U);
 8008cd0:	20c8      	movs	r0, #200	; 0xc8
 8008cd2:	f7f9 fcff 	bl	80026d4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f04f 32ff 	mov.w	r2, #4294967295
 8008ce2:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cf6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a14      	ldr	r2, [pc, #80]	; (8008d4c <USB_HostInit+0x164>)
 8008cfc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <USB_HostInit+0x168>)
 8008d02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008d06:	e009      	b.n	8008d1c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2280      	movs	r2, #128	; 0x80
 8008d0c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a10      	ldr	r2, [pc, #64]	; (8008d54 <USB_HostInit+0x16c>)
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a10      	ldr	r2, [pc, #64]	; (8008d58 <USB_HostInit+0x170>)
 8008d18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d105      	bne.n	8008d2e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f043 0210 	orr.w	r2, r3, #16
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	699a      	ldr	r2, [r3, #24]
 8008d32:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <USB_HostInit+0x174>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3710      	adds	r7, #16
 8008d40:	46bd      	mov	sp, r7
 8008d42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d46:	b004      	add	sp, #16
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop
 8008d4c:	01000200 	.word	0x01000200
 8008d50:	00e00300 	.word	0x00e00300
 8008d54:	00600080 	.word	0x00600080
 8008d58:	004000e0 	.word	0x004000e0
 8008d5c:	a3200008 	.word	0xa3200008

08008d60 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b085      	sub	sp, #20
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008d7e:	f023 0303 	bic.w	r3, r3, #3
 8008d82:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	f003 0303 	and.w	r3, r3, #3
 8008d92:	68f9      	ldr	r1, [r7, #12]
 8008d94:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d9c:	78fb      	ldrb	r3, [r7, #3]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d107      	bne.n	8008db2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008da8:	461a      	mov	r2, r3
 8008daa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008dae:	6053      	str	r3, [r2, #4]
 8008db0:	e009      	b.n	8008dc6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008db2:	78fb      	ldrb	r3, [r7, #3]
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d106      	bne.n	8008dc6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008dbe:	461a      	mov	r2, r3
 8008dc0:	f241 7370 	movw	r3, #6000	; 0x1770
 8008dc4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008dc6:	2300      	movs	r3, #0
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008df4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e02:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008e04:	2064      	movs	r0, #100	; 0x64
 8008e06:	f7f9 fc65 	bl	80026d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e16:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008e18:	200a      	movs	r0, #10
 8008e1a:	f7f9 fc5b 	bl	80026d4 <HAL_Delay>

  return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008e4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <USB_DriveVbus+0x44>
 8008e58:	78fb      	ldrb	r3, [r7, #3]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d106      	bne.n	8008e6c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008e6a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e76:	d109      	bne.n	8008e8c <USB_DriveVbus+0x64>
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e8a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e8c:	2300      	movs	r3, #0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr

08008e9a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008e9a:	b480      	push	{r7}
 8008e9c:	b085      	sub	sp, #20
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	0c5b      	lsrs	r3, r3, #17
 8008eb8:	f003 0303 	and.w	r3, r3, #3
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3714      	adds	r7, #20
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec6:	4770      	bx	lr

08008ec8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	b085      	sub	sp, #20
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	b29b      	uxth	r3, r3
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3714      	adds	r7, #20
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
	...

08008eec <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	4608      	mov	r0, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	461a      	mov	r2, r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	70fb      	strb	r3, [r7, #3]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70bb      	strb	r3, [r7, #2]
 8008f02:	4613      	mov	r3, r2
 8008f04:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008f06:	2300      	movs	r3, #0
 8008f08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008f0e:	78fb      	ldrb	r3, [r7, #3]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f20:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008f22:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d87e      	bhi.n	8009028 <USB_HC_Init+0x13c>
 8008f2a:	a201      	add	r2, pc, #4	; (adr r2, 8008f30 <USB_HC_Init+0x44>)
 8008f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f30:	08008f41 	.word	0x08008f41
 8008f34:	08008feb 	.word	0x08008feb
 8008f38:	08008f41 	.word	0x08008f41
 8008f3c:	08008fad 	.word	0x08008fad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f40:	78fb      	ldrb	r3, [r7, #3]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	f240 439d 	movw	r3, #1181	; 0x49d
 8008f52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008f54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	da10      	bge.n	8008f7e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f68:	68db      	ldr	r3, [r3, #12]
 8008f6a:	78fa      	ldrb	r2, [r7, #3]
 8008f6c:	0151      	lsls	r1, r2, #5
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	440a      	add	r2, r1
 8008f72:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f7a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008f7c:	e057      	b.n	800902e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d051      	beq.n	800902e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	015a      	lsls	r2, r3, #5
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	4413      	add	r3, r2
 8008f92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	78fa      	ldrb	r2, [r7, #3]
 8008f9a:	0151      	lsls	r1, r2, #5
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	440a      	add	r2, r1
 8008fa0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fa4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008fa8:	60d3      	str	r3, [r2, #12]
      break;
 8008faa:	e040      	b.n	800902e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f240 639d 	movw	r3, #1693	; 0x69d
 8008fbe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	da34      	bge.n	8009032 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	78fa      	ldrb	r2, [r7, #3]
 8008fd8:	0151      	lsls	r1, r2, #5
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	440a      	add	r2, r1
 8008fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fe6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008fe8:	e023      	b.n	8009032 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008fea:	78fb      	ldrb	r3, [r7, #3]
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	f240 2325 	movw	r3, #549	; 0x225
 8008ffc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ffe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009002:	2b00      	cmp	r3, #0
 8009004:	da17      	bge.n	8009036 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	78fa      	ldrb	r2, [r7, #3]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	440a      	add	r2, r1
 800901c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009020:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8009024:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009026:	e006      	b.n	8009036 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	75fb      	strb	r3, [r7, #23]
      break;
 800902c:	e004      	b.n	8009038 <USB_HC_Init+0x14c>
      break;
 800902e:	bf00      	nop
 8009030:	e002      	b.n	8009038 <USB_HC_Init+0x14c>
      break;
 8009032:	bf00      	nop
 8009034:	e000      	b.n	8009038 <USB_HC_Init+0x14c>
      break;
 8009036:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800903e:	699a      	ldr	r2, [r3, #24]
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	f003 030f 	and.w	r3, r3, #15
 8009046:	2101      	movs	r1, #1
 8009048:	fa01 f303 	lsl.w	r3, r1, r3
 800904c:	68b9      	ldr	r1, [r7, #8]
 800904e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009052:	4313      	orrs	r3, r2
 8009054:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	699b      	ldr	r3, [r3, #24]
 800905a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009062:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009066:	2b00      	cmp	r3, #0
 8009068:	da03      	bge.n	8009072 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800906a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800906e:	613b      	str	r3, [r7, #16]
 8009070:	e001      	b.n	8009076 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8009076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d103      	bne.n	8009086 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800907e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009082:	60fb      	str	r3, [r7, #12]
 8009084:	e001      	b.n	800908a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009086:	2300      	movs	r3, #0
 8009088:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800908a:	787b      	ldrb	r3, [r7, #1]
 800908c:	059b      	lsls	r3, r3, #22
 800908e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009092:	78bb      	ldrb	r3, [r7, #2]
 8009094:	02db      	lsls	r3, r3, #11
 8009096:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800909a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800909c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090a0:	049b      	lsls	r3, r3, #18
 80090a2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80090a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80090ae:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090b4:	78fb      	ldrb	r3, [r7, #3]
 80090b6:	0159      	lsls	r1, r3, #5
 80090b8:	68bb      	ldr	r3, [r7, #8]
 80090ba:	440b      	add	r3, r1
 80090bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c0:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090c6:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80090c8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80090cc:	2b03      	cmp	r3, #3
 80090ce:	d10f      	bne.n	80090f0 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80090d0:	78fb      	ldrb	r3, [r7, #3]
 80090d2:	015a      	lsls	r2, r3, #5
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	4413      	add	r3, r2
 80090d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	78fa      	ldrb	r2, [r7, #3]
 80090e0:	0151      	lsls	r1, r2, #5
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	440a      	add	r2, r1
 80090e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ee:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80090f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop

08009100 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b08c      	sub	sp, #48	; 0x30
 8009104:	af02      	add	r7, sp, #8
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	4613      	mov	r3, r2
 800910c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	785b      	ldrb	r3, [r3, #1]
 8009116:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800911c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009126:	2b00      	cmp	r3, #0
 8009128:	d028      	beq.n	800917c <USB_HC_StartXfer+0x7c>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	791b      	ldrb	r3, [r3, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d124      	bne.n	800917c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10b      	bne.n	8009150 <USB_HC_StartXfer+0x50>
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	795b      	ldrb	r3, [r3, #5]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d107      	bne.n	8009150 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	4619      	mov	r1, r3
 8009146:	68f8      	ldr	r0, [r7, #12]
 8009148:	f000 fa2e 	bl	80095a8 <USB_DoPing>
      return HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	e112      	b.n	8009376 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d112      	bne.n	800917c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	015a      	lsls	r2, r3, #5
 800915a:	6a3b      	ldr	r3, [r7, #32]
 800915c:	4413      	add	r3, r2
 800915e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	69fa      	ldr	r2, [r7, #28]
 8009166:	0151      	lsls	r1, r2, #5
 8009168:	6a3a      	ldr	r2, [r7, #32]
 800916a:	440a      	add	r2, r1
 800916c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009170:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8009174:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2200      	movs	r2, #0
 800917a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d018      	beq.n	80091b6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	691b      	ldr	r3, [r3, #16]
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	8912      	ldrh	r2, [r2, #8]
 800918c:	4413      	add	r3, r2
 800918e:	3b01      	subs	r3, #1
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	8912      	ldrh	r2, [r2, #8]
 8009194:	fbb3 f3f2 	udiv	r3, r3, r2
 8009198:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800919a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800919c:	8b7b      	ldrh	r3, [r7, #26]
 800919e:	429a      	cmp	r2, r3
 80091a0:	d90b      	bls.n	80091ba <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 80091a2:	8b7b      	ldrh	r3, [r7, #26]
 80091a4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80091a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	8912      	ldrh	r2, [r2, #8]
 80091ac:	fb02 f203 	mul.w	r2, r2, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	611a      	str	r2, [r3, #16]
 80091b4:	e001      	b.n	80091ba <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80091b6:	2301      	movs	r3, #1
 80091b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	78db      	ldrb	r3, [r3, #3]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d006      	beq.n	80091d0 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80091c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091c4:	68ba      	ldr	r2, [r7, #8]
 80091c6:	8912      	ldrh	r2, [r2, #8]
 80091c8:	fb02 f203 	mul.w	r2, r2, r3
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	691b      	ldr	r3, [r3, #16]
 80091d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80091da:	04d9      	lsls	r1, r3, #19
 80091dc:	4b68      	ldr	r3, [pc, #416]	; (8009380 <USB_HC_StartXfer+0x280>)
 80091de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80091e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	7a9b      	ldrb	r3, [r3, #10]
 80091e6:	075b      	lsls	r3, r3, #29
 80091e8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	0148      	lsls	r0, r1, #5
 80091f0:	6a39      	ldr	r1, [r7, #32]
 80091f2:	4401      	add	r1, r0
 80091f4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80091f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80091fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	68d9      	ldr	r1, [r3, #12]
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	4413      	add	r3, r2
 800920e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009212:	460a      	mov	r2, r1
 8009214:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009216:	6a3b      	ldr	r3, [r7, #32]
 8009218:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	bf0c      	ite	eq
 8009226:	2301      	moveq	r3, #1
 8009228:	2300      	movne	r3, #0
 800922a:	b2db      	uxtb	r3, r3
 800922c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	015a      	lsls	r2, r3, #5
 8009232:	6a3b      	ldr	r3, [r7, #32]
 8009234:	4413      	add	r3, r2
 8009236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	0151      	lsls	r1, r2, #5
 8009240:	6a3a      	ldr	r2, [r7, #32]
 8009242:	440a      	add	r2, r1
 8009244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009248:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800924c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800924e:	69fb      	ldr	r3, [r7, #28]
 8009250:	015a      	lsls	r2, r3, #5
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	4413      	add	r3, r2
 8009256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	7e7b      	ldrb	r3, [r7, #25]
 800925e:	075b      	lsls	r3, r3, #29
 8009260:	69f9      	ldr	r1, [r7, #28]
 8009262:	0148      	lsls	r0, r1, #5
 8009264:	6a39      	ldr	r1, [r7, #32]
 8009266:	4401      	add	r1, r0
 8009268:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800926c:	4313      	orrs	r3, r2
 800926e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	4413      	add	r3, r2
 8009278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a41      	ldr	r2, [pc, #260]	; (8009384 <USB_HC_StartXfer+0x284>)
 8009280:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009282:	4b40      	ldr	r3, [pc, #256]	; (8009384 <USB_HC_StartXfer+0x284>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800928a:	4a3e      	ldr	r2, [pc, #248]	; (8009384 <USB_HC_StartXfer+0x284>)
 800928c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	78db      	ldrb	r3, [r3, #3]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d006      	beq.n	80092a4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8009296:	4b3b      	ldr	r3, [pc, #236]	; (8009384 <USB_HC_StartXfer+0x284>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929e:	4a39      	ldr	r2, [pc, #228]	; (8009384 <USB_HC_StartXfer+0x284>)
 80092a0:	6013      	str	r3, [r2, #0]
 80092a2:	e005      	b.n	80092b0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80092a4:	4b37      	ldr	r3, [pc, #220]	; (8009384 <USB_HC_StartXfer+0x284>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092ac:	4a35      	ldr	r2, [pc, #212]	; (8009384 <USB_HC_StartXfer+0x284>)
 80092ae:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092b0:	4b34      	ldr	r3, [pc, #208]	; (8009384 <USB_HC_StartXfer+0x284>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092b8:	4a32      	ldr	r2, [pc, #200]	; (8009384 <USB_HC_StartXfer+0x284>)
 80092ba:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	015a      	lsls	r2, r3, #5
 80092c0:	6a3b      	ldr	r3, [r7, #32]
 80092c2:	4413      	add	r3, r2
 80092c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c8:	461a      	mov	r2, r3
 80092ca:	4b2e      	ldr	r3, [pc, #184]	; (8009384 <USB_HC_StartXfer+0x284>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d14e      	bne.n	8009374 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	78db      	ldrb	r3, [r3, #3]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d14a      	bne.n	8009374 <USB_HC_StartXfer+0x274>
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d046      	beq.n	8009374 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	79db      	ldrb	r3, [r3, #7]
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	d830      	bhi.n	8009350 <USB_HC_StartXfer+0x250>
 80092ee:	a201      	add	r2, pc, #4	; (adr r2, 80092f4 <USB_HC_StartXfer+0x1f4>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	08009305 	.word	0x08009305
 80092f8:	08009329 	.word	0x08009329
 80092fc:	08009305 	.word	0x08009305
 8009300:	08009329 	.word	0x08009329
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	3303      	adds	r3, #3
 800930a:	089b      	lsrs	r3, r3, #2
 800930c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800930e:	8afa      	ldrh	r2, [r7, #22]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	b29b      	uxth	r3, r3
 8009316:	429a      	cmp	r2, r3
 8009318:	d91c      	bls.n	8009354 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	699b      	ldr	r3, [r3, #24]
 800931e:	f043 0220 	orr.w	r2, r3, #32
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	619a      	str	r2, [r3, #24]
          }
          break;
 8009326:	e015      	b.n	8009354 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	3303      	adds	r3, #3
 800932e:	089b      	lsrs	r3, r3, #2
 8009330:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009332:	8afa      	ldrh	r2, [r7, #22]
 8009334:	6a3b      	ldr	r3, [r7, #32]
 8009336:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	b29b      	uxth	r3, r3
 800933e:	429a      	cmp	r2, r3
 8009340:	d90a      	bls.n	8009358 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	699b      	ldr	r3, [r3, #24]
 8009346:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	619a      	str	r2, [r3, #24]
          }
          break;
 800934e:	e003      	b.n	8009358 <USB_HC_StartXfer+0x258>

        default:
          break;
 8009350:	bf00      	nop
 8009352:	e002      	b.n	800935a <USB_HC_StartXfer+0x25a>
          break;
 8009354:	bf00      	nop
 8009356:	e000      	b.n	800935a <USB_HC_StartXfer+0x25a>
          break;
 8009358:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	68d9      	ldr	r1, [r3, #12]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	785a      	ldrb	r2, [r3, #1]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	b298      	uxth	r0, r3
 8009368:	2300      	movs	r3, #0
 800936a:	9300      	str	r3, [sp, #0]
 800936c:	4603      	mov	r3, r0
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	f7ff fb86 	bl	8008a80 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3728      	adds	r7, #40	; 0x28
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	1ff80000 	.word	0x1ff80000
 8009384:	20001394 	.word	0x20001394

08009388 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800939a:	695b      	ldr	r3, [r3, #20]
 800939c:	b29b      	uxth	r3, r3
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b087      	sub	sp, #28
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
 80093b2:	460b      	mov	r3, r1
 80093b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	0c9b      	lsrs	r3, r3, #18
 80093d2:	f003 0303 	and.w	r3, r3, #3
 80093d6:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <USB_HC_Halt+0x3a>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	d16c      	bne.n	80094be <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	015a      	lsls	r2, r3, #5
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	4413      	add	r3, r2
 80093ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	68fa      	ldr	r2, [r7, #12]
 80093f4:	0151      	lsls	r1, r2, #5
 80093f6:	693a      	ldr	r2, [r7, #16]
 80093f8:	440a      	add	r2, r1
 80093fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009402:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800940c:	2b00      	cmp	r3, #0
 800940e:	d143      	bne.n	8009498 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	4413      	add	r3, r2
 8009418:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	0151      	lsls	r1, r2, #5
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	440a      	add	r2, r1
 8009426:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800942a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800942e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	015a      	lsls	r2, r3, #5
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	4413      	add	r3, r2
 8009438:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	0151      	lsls	r1, r2, #5
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	440a      	add	r2, r1
 8009446:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800944a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800944e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800946e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009470:	697b      	ldr	r3, [r7, #20]
 8009472:	3301      	adds	r3, #1
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800947c:	d81d      	bhi.n	80094ba <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	4413      	add	r3, r2
 8009486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009490:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009494:	d0ec      	beq.n	8009470 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009496:	e080      	b.n	800959a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	015a      	lsls	r2, r3, #5
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	4413      	add	r3, r2
 80094a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	0151      	lsls	r1, r2, #5
 80094aa:	693a      	ldr	r2, [r7, #16]
 80094ac:	440a      	add	r2, r1
 80094ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80094b6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80094b8:	e06f      	b.n	800959a <USB_HC_Halt+0x1f0>
          break;
 80094ba:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80094bc:	e06d      	b.n	800959a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	015a      	lsls	r2, r3, #5
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	4413      	add	r3, r2
 80094c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	0151      	lsls	r1, r2, #5
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	440a      	add	r2, r1
 80094d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80094d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094dc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d143      	bne.n	8009576 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	015a      	lsls	r2, r3, #5
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	4413      	add	r3, r2
 80094f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	0151      	lsls	r1, r2, #5
 8009500:	693a      	ldr	r2, [r7, #16]
 8009502:	440a      	add	r2, r1
 8009504:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009508:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800950c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	015a      	lsls	r2, r3, #5
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	4413      	add	r3, r2
 8009516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	0151      	lsls	r1, r2, #5
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	440a      	add	r2, r1
 8009524:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800952c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	4413      	add	r3, r2
 8009536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	440a      	add	r2, r1
 8009544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009548:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800954c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	3301      	adds	r3, #1
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800955a:	d81d      	bhi.n	8009598 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	4413      	add	r3, r2
 8009564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800956e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009572:	d0ec      	beq.n	800954e <USB_HC_Halt+0x1a4>
 8009574:	e011      	b.n	800959a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	693b      	ldr	r3, [r7, #16]
 800957c:	4413      	add	r3, r2
 800957e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	0151      	lsls	r1, r2, #5
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	440a      	add	r2, r1
 800958c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009590:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009594:	6013      	str	r3, [r2, #0]
 8009596:	e000      	b.n	800959a <USB_HC_Halt+0x1f0>
          break;
 8009598:	bf00      	nop
    }
  }

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	371c      	adds	r7, #28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr

080095a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b087      	sub	sp, #28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80095bc:	2301      	movs	r3, #1
 80095be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	04da      	lsls	r2, r3, #19
 80095c4:	4b15      	ldr	r3, [pc, #84]	; (800961c <USB_DoPing+0x74>)
 80095c6:	4013      	ands	r3, r2
 80095c8:	693a      	ldr	r2, [r7, #16]
 80095ca:	0151      	lsls	r1, r2, #5
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	440a      	add	r2, r1
 80095d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80095d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	4413      	add	r3, r2
 8009602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009606:	461a      	mov	r2, r3
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	371c      	adds	r7, #28
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	1ff80000 	.word	0x1ff80000

08009620 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800962c:	2300      	movs	r3, #0
 800962e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff f9a1 	bl	8008978 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009636:	2110      	movs	r1, #16
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff f9d9 	bl	80089f0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff f9fc 	bl	8008a3c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009644:	2300      	movs	r3, #0
 8009646:	613b      	str	r3, [r7, #16]
 8009648:	e01f      	b.n	800968a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009660:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009668:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009670:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	4413      	add	r3, r2
 800967a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800967e:	461a      	mov	r2, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	3301      	adds	r3, #1
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b0f      	cmp	r3, #15
 800968e:	d9dc      	bls.n	800964a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	e034      	b.n	8009700 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	015a      	lsls	r2, r3, #5
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4413      	add	r3, r2
 800969e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096ac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80096b4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096bc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	015a      	lsls	r2, r3, #5
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	4413      	add	r3, r2
 80096c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	3301      	adds	r3, #1
 80096d4:	617b      	str	r3, [r7, #20]
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096dc:	d80c      	bhi.n	80096f8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	015a      	lsls	r2, r3, #5
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	4413      	add	r3, r2
 80096e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80096f4:	d0ec      	beq.n	80096d0 <USB_StopHost+0xb0>
 80096f6:	e000      	b.n	80096fa <USB_StopHost+0xda>
        break;
 80096f8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	3301      	adds	r3, #1
 80096fe:	613b      	str	r3, [r7, #16]
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b0f      	cmp	r3, #15
 8009704:	d9c7      	bls.n	8009696 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800970c:	461a      	mov	r2, r3
 800970e:	f04f 33ff 	mov.w	r3, #4294967295
 8009712:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f04f 32ff 	mov.w	r2, #4294967295
 800971a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7ff f91a 	bl	8008956 <USB_EnableGlobalInt>

  return HAL_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3718      	adds	r7, #24
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8009730:	4904      	ldr	r1, [pc, #16]	; (8009744 <MX_FATFS_Init+0x18>)
 8009732:	4805      	ldr	r0, [pc, #20]	; (8009748 <MX_FATFS_Init+0x1c>)
 8009734:	f005 fb7a 	bl	800ee2c <FATFS_LinkDriver>
 8009738:	4603      	mov	r3, r0
 800973a:	461a      	mov	r2, r3
 800973c:	4b03      	ldr	r3, [pc, #12]	; (800974c <MX_FATFS_Init+0x20>)
 800973e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20001638 	.word	0x20001638
 8009748:	0800fedc 	.word	0x0800fedc
 800974c:	20001a9c 	.word	0x20001a9c

08009750 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009750:	b480      	push	{r7}
 8009752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009754:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009756:	4618      	mov	r0, r3
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	4603      	mov	r3, r0
 8009768:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	4603      	mov	r3, r0
 8009780:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009786:	79fb      	ldrb	r3, [r7, #7]
 8009788:	4619      	mov	r1, r3
 800978a:	4808      	ldr	r0, [pc, #32]	; (80097ac <USBH_status+0x34>)
 800978c:	f000 fe11 	bl	800a3b2 <USBH_MSC_UnitIsReady>
 8009790:	4603      	mov	r3, r0
 8009792:	2b00      	cmp	r3, #0
 8009794:	d002      	beq.n	800979c <USBH_status+0x24>
  {
    res = RES_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
 800979a:	e001      	b.n	80097a0 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800979c:	2301      	movs	r3, #1
 800979e:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	20001aa0 	.word	0x20001aa0

080097b0 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b094      	sub	sp, #80	; 0x50
 80097b4:	af02      	add	r7, sp, #8
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	607a      	str	r2, [r7, #4]
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80097c6:	7bf9      	ldrb	r1, [r7, #15]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	4812      	ldr	r0, [pc, #72]	; (800981c <USBH_read+0x6c>)
 80097d2:	f000 fe38 	bl	800a446 <USBH_MSC_Read>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d103      	bne.n	80097e4 <USBH_read+0x34>
  {
    res = RES_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80097e2:	e015      	b.n	8009810 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80097e4:	f107 0210 	add.w	r2, r7, #16
 80097e8:	7bfb      	ldrb	r3, [r7, #15]
 80097ea:	4619      	mov	r1, r3
 80097ec:	480b      	ldr	r0, [pc, #44]	; (800981c <USBH_read+0x6c>)
 80097ee:	f000 fe06 	bl	800a3fe <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80097f2:	7f7b      	ldrb	r3, [r7, #29]
 80097f4:	2b28      	cmp	r3, #40	; 0x28
 80097f6:	d003      	beq.n	8009800 <USBH_read+0x50>
 80097f8:	2b3a      	cmp	r3, #58	; 0x3a
 80097fa:	d001      	beq.n	8009800 <USBH_read+0x50>
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d103      	bne.n	8009808 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009800:	2303      	movs	r3, #3
 8009802:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8009806:	e003      	b.n	8009810 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800980e:	bf00      	nop
    }
  }

  return res;
 8009810:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009814:	4618      	mov	r0, r3
 8009816:	3748      	adds	r7, #72	; 0x48
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	20001aa0 	.word	0x20001aa0

08009820 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b094      	sub	sp, #80	; 0x50
 8009824:	af02      	add	r7, sp, #8
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	4603      	mov	r3, r0
 800982e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009836:	7bf9      	ldrb	r1, [r7, #15]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	9300      	str	r3, [sp, #0]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4817      	ldr	r0, [pc, #92]	; (80098a0 <USBH_write+0x80>)
 8009842:	f000 fe69 	bl	800a518 <USBH_MSC_Write>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <USBH_write+0x34>
  {
    res = RES_OK;
 800984c:	2300      	movs	r3, #0
 800984e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009852:	e01f      	b.n	8009894 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009854:	f107 0210 	add.w	r2, r7, #16
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	4619      	mov	r1, r3
 800985c:	4810      	ldr	r0, [pc, #64]	; (80098a0 <USBH_write+0x80>)
 800985e:	f000 fdce 	bl	800a3fe <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8009862:	7f7b      	ldrb	r3, [r7, #29]
 8009864:	2b27      	cmp	r3, #39	; 0x27
 8009866:	d009      	beq.n	800987c <USBH_write+0x5c>
 8009868:	2b27      	cmp	r3, #39	; 0x27
 800986a:	dc02      	bgt.n	8009872 <USBH_write+0x52>
 800986c:	2b04      	cmp	r3, #4
 800986e:	d009      	beq.n	8009884 <USBH_write+0x64>
 8009870:	e00c      	b.n	800988c <USBH_write+0x6c>
 8009872:	2b28      	cmp	r3, #40	; 0x28
 8009874:	d006      	beq.n	8009884 <USBH_write+0x64>
 8009876:	2b3a      	cmp	r3, #58	; 0x3a
 8009878:	d004      	beq.n	8009884 <USBH_write+0x64>
 800987a:	e007      	b.n	800988c <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800987c:	2302      	movs	r3, #2
 800987e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009882:	e007      	b.n	8009894 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009884:	2303      	movs	r3, #3
 8009886:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800988a:	e003      	b.n	8009894 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009892:	bf00      	nop
    }
  }

  return res;
 8009894:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009898:	4618      	mov	r0, r3
 800989a:	3748      	adds	r7, #72	; 0x48
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	20001aa0 	.word	0x20001aa0

080098a4 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b090      	sub	sp, #64	; 0x40
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4603      	mov	r3, r0
 80098ac:	603a      	str	r2, [r7, #0]
 80098ae:	71fb      	strb	r3, [r7, #7]
 80098b0:	460b      	mov	r3, r1
 80098b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 80098ba:	79bb      	ldrb	r3, [r7, #6]
 80098bc:	2b03      	cmp	r3, #3
 80098be:	d852      	bhi.n	8009966 <USBH_ioctl+0xc2>
 80098c0:	a201      	add	r2, pc, #4	; (adr r2, 80098c8 <USBH_ioctl+0x24>)
 80098c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c6:	bf00      	nop
 80098c8:	080098d9 	.word	0x080098d9
 80098cc:	080098e1 	.word	0x080098e1
 80098d0:	0800990b 	.word	0x0800990b
 80098d4:	08009937 	.word	0x08009937
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80098de:	e045      	b.n	800996c <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80098e0:	f107 0208 	add.w	r2, r7, #8
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	4619      	mov	r1, r3
 80098e8:	4823      	ldr	r0, [pc, #140]	; (8009978 <USBH_ioctl+0xd4>)
 80098ea:	f000 fd88 	bl	800a3fe <USBH_MSC_GetLUNInfo>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d106      	bne.n	8009902 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80098f4:	68fa      	ldr	r2, [r7, #12]
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80098fa:	2300      	movs	r3, #0
 80098fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009900:	e034      	b.n	800996c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8009902:	2301      	movs	r3, #1
 8009904:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009908:	e030      	b.n	800996c <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800990a:	f107 0208 	add.w	r2, r7, #8
 800990e:	79fb      	ldrb	r3, [r7, #7]
 8009910:	4619      	mov	r1, r3
 8009912:	4819      	ldr	r0, [pc, #100]	; (8009978 <USBH_ioctl+0xd4>)
 8009914:	f000 fd73 	bl	800a3fe <USBH_MSC_GetLUNInfo>
 8009918:	4603      	mov	r3, r0
 800991a:	2b00      	cmp	r3, #0
 800991c:	d107      	bne.n	800992e <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800991e:	8a3b      	ldrh	r3, [r7, #16]
 8009920:	461a      	mov	r2, r3
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800992c:	e01e      	b.n	800996c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009934:	e01a      	b.n	800996c <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009936:	f107 0208 	add.w	r2, r7, #8
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	4619      	mov	r1, r3
 800993e:	480e      	ldr	r0, [pc, #56]	; (8009978 <USBH_ioctl+0xd4>)
 8009940:	f000 fd5d 	bl	800a3fe <USBH_MSC_GetLUNInfo>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d109      	bne.n	800995e <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800994a:	8a3b      	ldrh	r3, [r7, #16]
 800994c:	0a5b      	lsrs	r3, r3, #9
 800994e:	b29b      	uxth	r3, r3
 8009950:	461a      	mov	r2, r3
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800995c:	e006      	b.n	800996c <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009964:	e002      	b.n	800996c <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009966:	2304      	movs	r3, #4
 8009968:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800996c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8009970:	4618      	mov	r0, r3
 8009972:	3740      	adds	r7, #64	; 0x40
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20001aa0 	.word	0x20001aa0

0800997c <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800997c:	b590      	push	{r4, r7, lr}
 800997e:	b089      	sub	sp, #36	; 0x24
 8009980:	af04      	add	r7, sp, #16
 8009982:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800998a:	7919      	ldrb	r1, [r3, #4]
 800998c:	2350      	movs	r3, #80	; 0x50
 800998e:	2206      	movs	r2, #6
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 fc4f 	bl	800b234 <USBH_FindInterface>
 8009996:	4603      	mov	r3, r0
 8009998:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2bff      	cmp	r3, #255	; 0xff
 800999e:	d002      	beq.n	80099a6 <USBH_MSC_InterfaceInit+0x2a>
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d901      	bls.n	80099aa <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80099a6:	2302      	movs	r3, #2
 80099a8:	e0ef      	b.n	8009b8a <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 80099aa:	7bfb      	ldrb	r3, [r7, #15]
 80099ac:	4619      	mov	r1, r3
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 fc24 	bl	800b1fc <USBH_SelectInterface>
 80099b4:	4603      	mov	r3, r0
 80099b6:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80099b8:	7bbb      	ldrb	r3, [r7, #14]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80099be:	2302      	movs	r3, #2
 80099c0:	e0e3      	b.n	8009b8a <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80099c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80099cc:	f005 fda4 	bl	800f518 <malloc>
 80099d0:	4603      	mov	r3, r0
 80099d2:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099da:	69db      	ldr	r3, [r3, #28]
 80099dc:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80099e4:	2302      	movs	r3, #2
 80099e6:	e0d0      	b.n	8009b8a <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80099e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099ec:	2100      	movs	r1, #0
 80099ee:	68b8      	ldr	r0, [r7, #8]
 80099f0:	f005 fdad 	bl	800f54e <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	211a      	movs	r1, #26
 80099fa:	fb01 f303 	mul.w	r3, r1, r3
 80099fe:	4413      	add	r3, r2
 8009a00:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b25b      	sxtb	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	da16      	bge.n	8009a3a <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	211a      	movs	r1, #26
 8009a12:	fb01 f303 	mul.w	r3, r1, r3
 8009a16:	4413      	add	r3, r2
 8009a18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a1c:	781a      	ldrb	r2, [r3, #0]
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a22:	7bfb      	ldrb	r3, [r7, #15]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	211a      	movs	r1, #26
 8009a28:	fb01 f303 	mul.w	r3, r1, r3
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a32:	881a      	ldrh	r2, [r3, #0]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	815a      	strh	r2, [r3, #10]
 8009a38:	e015      	b.n	8009a66 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	211a      	movs	r1, #26
 8009a40:	fb01 f303 	mul.w	r3, r1, r3
 8009a44:	4413      	add	r3, r2
 8009a46:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009a4a:	781a      	ldrb	r2, [r3, #0]
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a50:	7bfb      	ldrb	r3, [r7, #15]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	211a      	movs	r1, #26
 8009a56:	fb01 f303 	mul.w	r3, r1, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009a60:	881a      	ldrh	r2, [r3, #0]
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	211a      	movs	r1, #26
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da16      	bge.n	8009aac <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	211a      	movs	r1, #26
 8009a84:	fb01 f303 	mul.w	r3, r1, r3
 8009a88:	4413      	add	r3, r2
 8009a8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009a8e:	781a      	ldrb	r2, [r3, #0]
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	687a      	ldr	r2, [r7, #4]
 8009a98:	211a      	movs	r1, #26
 8009a9a:	fb01 f303 	mul.w	r3, r1, r3
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009aa4:	881a      	ldrh	r2, [r3, #0]
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	815a      	strh	r2, [r3, #10]
 8009aaa:	e015      	b.n	8009ad8 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	211a      	movs	r1, #26
 8009ab2:	fb01 f303 	mul.w	r3, r1, r3
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009abc:	781a      	ldrb	r2, [r3, #0]
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	211a      	movs	r1, #26
 8009ac8:	fb01 f303 	mul.w	r3, r1, r3
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009ad2:	881a      	ldrh	r2, [r3, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	2200      	movs	r2, #0
 8009adc:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	799b      	ldrb	r3, [r3, #6]
 8009aee:	4619      	mov	r1, r3
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f002 fdc2 	bl	800c67a <USBH_AllocPipe>
 8009af6:	4603      	mov	r3, r0
 8009af8:	461a      	mov	r2, r3
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	79db      	ldrb	r3, [r3, #7]
 8009b02:	4619      	mov	r1, r3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f002 fdb8 	bl	800c67a <USBH_AllocPipe>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fda4 	bl	800a660 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	7959      	ldrb	r1, [r3, #5]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	7998      	ldrb	r0, [r3, #6]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	8912      	ldrh	r2, [r2, #8]
 8009b30:	9202      	str	r2, [sp, #8]
 8009b32:	2202      	movs	r2, #2
 8009b34:	9201      	str	r2, [sp, #4]
 8009b36:	9300      	str	r3, [sp, #0]
 8009b38:	4623      	mov	r3, r4
 8009b3a:	4602      	mov	r2, r0
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f002 fd6d 	bl	800c61c <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	7919      	ldrb	r1, [r3, #4]
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	79d8      	ldrb	r0, [r3, #7]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	8952      	ldrh	r2, [r2, #10]
 8009b5a:	9202      	str	r2, [sp, #8]
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	9201      	str	r2, [sp, #4]
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	4623      	mov	r3, r4
 8009b64:	4602      	mov	r2, r0
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f002 fd58 	bl	800c61c <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	791b      	ldrb	r3, [r3, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	4619      	mov	r1, r3
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f005 fbeb 	bl	800f350 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	795b      	ldrb	r3, [r3, #5]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	4619      	mov	r1, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f005 fbe4 	bl	800f350 <USBH_LL_SetToggle>

  return USBH_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd90      	pop	{r4, r7, pc}

08009b92 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b084      	sub	sp, #16
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ba0:	69db      	ldr	r3, [r3, #28]
 8009ba2:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	795b      	ldrb	r3, [r3, #5]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d00e      	beq.n	8009bca <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	795b      	ldrb	r3, [r3, #5]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f002 fd51 	bl	800c65a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	795b      	ldrb	r3, [r3, #5]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f002 fd7c 	bl	800c6bc <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	791b      	ldrb	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00e      	beq.n	8009bf0 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	791b      	ldrb	r3, [r3, #4]
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f002 fd3e 	bl	800c65a <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	791b      	ldrb	r3, [r3, #4]
 8009be2:	4619      	mov	r1, r3
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f002 fd69 	bl	800c6bc <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009bf6:	69db      	ldr	r3, [r3, #28]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d00b      	beq.n	8009c14 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c02:	69db      	ldr	r3, [r3, #28]
 8009c04:	4618      	mov	r0, r3
 8009c06:	f005 fc8f 	bl	800f528 <free>
    phost->pActiveClass->pData = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c10:	2200      	movs	r2, #0
 8009c12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b084      	sub	sp, #16
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	7b9b      	ldrb	r3, [r3, #14]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	d004      	beq.n	8009c46 <USBH_MSC_ClassRequest+0x28>
 8009c3c:	2b03      	cmp	r3, #3
 8009c3e:	d03e      	beq.n	8009cbe <USBH_MSC_ClassRequest+0xa0>
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d000      	beq.n	8009c46 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8009c44:	e04a      	b.n	8009cdc <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	4619      	mov	r1, r3
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 fcea 	bl	800a624 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009c50:	4603      	mov	r3, r0
 8009c52:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8009c54:	7bfb      	ldrb	r3, [r7, #15]
 8009c56:	2b03      	cmp	r3, #3
 8009c58:	d104      	bne.n	8009c64 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8009c64:	7bfb      	ldrb	r3, [r7, #15]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d135      	bne.n	8009cd6 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d804      	bhi.n	8009c7c <USBH_MSC_ClassRequest+0x5e>
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	3301      	adds	r3, #1
 8009c78:	b2da      	uxtb	r2, r3
 8009c7a:	e000      	b.n	8009c7e <USBH_MSC_ClassRequest+0x60>
 8009c7c:	2202      	movs	r2, #2
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009c82:	2300      	movs	r3, #0
 8009c84:	73bb      	strb	r3, [r7, #14]
 8009c86:	e014      	b.n	8009cb2 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	2134      	movs	r1, #52	; 0x34
 8009c8e:	fb01 f303 	mul.w	r3, r1, r3
 8009c92:	4413      	add	r3, r2
 8009c94:	3392      	adds	r3, #146	; 0x92
 8009c96:	2202      	movs	r2, #2
 8009c98:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009c9a:	7bbb      	ldrb	r3, [r7, #14]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	2134      	movs	r1, #52	; 0x34
 8009ca0:	fb01 f303 	mul.w	r3, r1, r3
 8009ca4:	4413      	add	r3, r2
 8009ca6:	33c1      	adds	r3, #193	; 0xc1
 8009ca8:	2200      	movs	r2, #0
 8009caa:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	73bb      	strb	r3, [r7, #14]
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	7bba      	ldrb	r2, [r7, #14]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d3e5      	bcc.n	8009c88 <USBH_MSC_ClassRequest+0x6a>
      break;
 8009cbc:	e00b      	b.n	8009cd6 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 f878 	bl	800bdb6 <USBH_ClrFeature>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d106      	bne.n	8009cda <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	7bda      	ldrb	r2, [r3, #15]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	739a      	strb	r2, [r3, #14]
      break;
 8009cd4:	e001      	b.n	8009cda <USBH_MSC_ClassRequest+0xbc>
      break;
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <USBH_MSC_ClassRequest+0xbe>
      break;
 8009cda:	bf00      	nop
  }

  return status;
 8009cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
	...

08009ce8 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cf6:	69db      	ldr	r3, [r3, #28]
 8009cf8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009cfe:	2301      	movs	r3, #1
 8009d00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009d02:	2301      	movs	r3, #1
 8009d04:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	7b1b      	ldrb	r3, [r3, #12]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d003      	beq.n	8009d16 <USBH_MSC_Process+0x2e>
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	f000 8271 	beq.w	800a1f6 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009d14:	e272      	b.n	800a1fc <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	429a      	cmp	r2, r3
 8009d24:	f080 824f 	bcs.w	800a1c6 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d2e:	4619      	mov	r1, r3
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	2334      	movs	r3, #52	; 0x34
 8009d34:	fb03 f301 	mul.w	r3, r3, r1
 8009d38:	4413      	add	r3, r2
 8009d3a:	3391      	adds	r3, #145	; 0x91
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d46:	4619      	mov	r1, r3
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	2334      	movs	r3, #52	; 0x34
 8009d4c:	fb03 f301 	mul.w	r3, r3, r1
 8009d50:	4413      	add	r3, r2
 8009d52:	3390      	adds	r3, #144	; 0x90
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	2b08      	cmp	r3, #8
 8009d58:	f200 8243 	bhi.w	800a1e2 <USBH_MSC_Process+0x4fa>
 8009d5c:	a201      	add	r2, pc, #4	; (adr r2, 8009d64 <USBH_MSC_Process+0x7c>)
 8009d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d62:	bf00      	nop
 8009d64:	08009d89 	.word	0x08009d89
 8009d68:	0800a1e3 	.word	0x0800a1e3
 8009d6c:	08009e51 	.word	0x08009e51
 8009d70:	08009fd5 	.word	0x08009fd5
 8009d74:	08009daf 	.word	0x08009daf
 8009d78:	0800a0a1 	.word	0x0800a0a1
 8009d7c:	0800a1e3 	.word	0x0800a1e3
 8009d80:	0800a1e3 	.word	0x0800a1e3
 8009d84:	0800a1b5 	.word	0x0800a1b5
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d8e:	4619      	mov	r1, r3
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	2334      	movs	r3, #52	; 0x34
 8009d94:	fb03 f301 	mul.w	r3, r3, r1
 8009d98:	4413      	add	r3, r2
 8009d9a:	3390      	adds	r3, #144	; 0x90
 8009d9c:	2204      	movs	r2, #4
 8009d9e:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009dac:	e222      	b.n	800a1f4 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009db4:	b2d9      	uxtb	r1, r3
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2334      	movs	r3, #52	; 0x34
 8009dc0:	fb03 f302 	mul.w	r3, r3, r2
 8009dc4:	3398      	adds	r3, #152	; 0x98
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	4413      	add	r3, r2
 8009dca:	3307      	adds	r3, #7
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 ff68 	bl	800aca4 <USBH_MSC_SCSI_Inquiry>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d10b      	bne.n	8009df6 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009de4:	4619      	mov	r1, r3
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	2334      	movs	r3, #52	; 0x34
 8009dea:	fb03 f301 	mul.w	r3, r3, r1
 8009dee:	4413      	add	r3, r2
 8009df0:	3390      	adds	r3, #144	; 0x90
 8009df2:	2202      	movs	r2, #2
 8009df4:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d10c      	bne.n	8009e16 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e02:	4619      	mov	r1, r3
 8009e04:	693a      	ldr	r2, [r7, #16]
 8009e06:	2334      	movs	r3, #52	; 0x34
 8009e08:	fb03 f301 	mul.w	r3, r3, r1
 8009e0c:	4413      	add	r3, r2
 8009e0e:	3390      	adds	r3, #144	; 0x90
 8009e10:	2205      	movs	r2, #5
 8009e12:	701a      	strb	r2, [r3, #0]
            break;
 8009e14:	e1e7      	b.n	800a1e6 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	f040 81e4 	bne.w	800a1e6 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e24:	4619      	mov	r1, r3
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	2334      	movs	r3, #52	; 0x34
 8009e2a:	fb03 f301 	mul.w	r3, r3, r1
 8009e2e:	4413      	add	r3, r2
 8009e30:	3390      	adds	r3, #144	; 0x90
 8009e32:	2201      	movs	r2, #1
 8009e34:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	2334      	movs	r3, #52	; 0x34
 8009e42:	fb03 f301 	mul.w	r3, r3, r1
 8009e46:	4413      	add	r3, r2
 8009e48:	3391      	adds	r3, #145	; 0x91
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	701a      	strb	r2, [r3, #0]
            break;
 8009e4e:	e1ca      	b.n	800a1e6 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fe64 	bl	800ab28 <USBH_MSC_SCSI_TestUnitReady>
 8009e60:	4603      	mov	r3, r0
 8009e62:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009e64:	7bbb      	ldrb	r3, [r7, #14]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d149      	bne.n	8009efe <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e70:	4619      	mov	r1, r3
 8009e72:	693a      	ldr	r2, [r7, #16]
 8009e74:	2334      	movs	r3, #52	; 0x34
 8009e76:	fb03 f301 	mul.w	r3, r3, r1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	3392      	adds	r3, #146	; 0x92
 8009e7e:	781b      	ldrb	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00c      	beq.n	8009e9e <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	693a      	ldr	r2, [r7, #16]
 8009e8e:	2334      	movs	r3, #52	; 0x34
 8009e90:	fb03 f301 	mul.w	r3, r3, r1
 8009e94:	4413      	add	r3, r2
 8009e96:	33c1      	adds	r3, #193	; 0xc1
 8009e98:	2201      	movs	r2, #1
 8009e9a:	701a      	strb	r2, [r3, #0]
 8009e9c:	e00b      	b.n	8009eb6 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	2334      	movs	r3, #52	; 0x34
 8009eaa:	fb03 f301 	mul.w	r3, r3, r1
 8009eae:	4413      	add	r3, r2
 8009eb0:	33c1      	adds	r3, #193	; 0xc1
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	2334      	movs	r3, #52	; 0x34
 8009ec2:	fb03 f301 	mul.w	r3, r3, r1
 8009ec6:	4413      	add	r3, r2
 8009ec8:	3390      	adds	r3, #144	; 0x90
 8009eca:	2203      	movs	r2, #3
 8009ecc:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009ece:	693b      	ldr	r3, [r7, #16]
 8009ed0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	2334      	movs	r3, #52	; 0x34
 8009eda:	fb03 f301 	mul.w	r3, r3, r1
 8009ede:	4413      	add	r3, r2
 8009ee0:	3391      	adds	r3, #145	; 0x91
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009eec:	4619      	mov	r1, r3
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	2334      	movs	r3, #52	; 0x34
 8009ef2:	fb03 f301 	mul.w	r3, r3, r1
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3392      	adds	r3, #146	; 0x92
 8009efa:	2200      	movs	r2, #0
 8009efc:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
 8009f00:	2b02      	cmp	r3, #2
 8009f02:	d14a      	bne.n	8009f9a <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	2334      	movs	r3, #52	; 0x34
 8009f10:	fb03 f301 	mul.w	r3, r3, r1
 8009f14:	4413      	add	r3, r2
 8009f16:	3392      	adds	r3, #146	; 0x92
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d00c      	beq.n	8009f38 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f24:	4619      	mov	r1, r3
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	2334      	movs	r3, #52	; 0x34
 8009f2a:	fb03 f301 	mul.w	r3, r3, r1
 8009f2e:	4413      	add	r3, r2
 8009f30:	33c1      	adds	r3, #193	; 0xc1
 8009f32:	2201      	movs	r2, #1
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	e00b      	b.n	8009f50 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f3e:	4619      	mov	r1, r3
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	2334      	movs	r3, #52	; 0x34
 8009f44:	fb03 f301 	mul.w	r3, r3, r1
 8009f48:	4413      	add	r3, r2
 8009f4a:	33c1      	adds	r3, #193	; 0xc1
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f56:	4619      	mov	r1, r3
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	2334      	movs	r3, #52	; 0x34
 8009f5c:	fb03 f301 	mul.w	r3, r3, r1
 8009f60:	4413      	add	r3, r2
 8009f62:	3390      	adds	r3, #144	; 0x90
 8009f64:	2205      	movs	r2, #5
 8009f66:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f6e:	4619      	mov	r1, r3
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	2334      	movs	r3, #52	; 0x34
 8009f74:	fb03 f301 	mul.w	r3, r3, r1
 8009f78:	4413      	add	r3, r2
 8009f7a:	3391      	adds	r3, #145	; 0x91
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009f86:	4619      	mov	r1, r3
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	2334      	movs	r3, #52	; 0x34
 8009f8c:	fb03 f301 	mul.w	r3, r3, r1
 8009f90:	4413      	add	r3, r2
 8009f92:	3392      	adds	r3, #146	; 0x92
 8009f94:	2202      	movs	r2, #2
 8009f96:	701a      	strb	r2, [r3, #0]
            break;
 8009f98:	e127      	b.n	800a1ea <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009f9a:	7bbb      	ldrb	r3, [r7, #14]
 8009f9c:	2b04      	cmp	r3, #4
 8009f9e:	f040 8124 	bne.w	800a1ea <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fa8:	4619      	mov	r1, r3
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	2334      	movs	r3, #52	; 0x34
 8009fae:	fb03 f301 	mul.w	r3, r3, r1
 8009fb2:	4413      	add	r3, r2
 8009fb4:	3390      	adds	r3, #144	; 0x90
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	693a      	ldr	r2, [r7, #16]
 8009fc4:	2334      	movs	r3, #52	; 0x34
 8009fc6:	fb03 f301 	mul.w	r3, r3, r1
 8009fca:	4413      	add	r3, r2
 8009fcc:	3391      	adds	r3, #145	; 0x91
 8009fce:	2202      	movs	r2, #2
 8009fd0:	701a      	strb	r2, [r3, #0]
            break;
 8009fd2:	e10a      	b.n	800a1ea <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fda:	b2d9      	uxtb	r1, r3
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	2334      	movs	r3, #52	; 0x34
 8009fe6:	fb03 f302 	mul.w	r3, r3, r2
 8009fea:	3390      	adds	r3, #144	; 0x90
 8009fec:	693a      	ldr	r2, [r7, #16]
 8009fee:	4413      	add	r3, r2
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 fdda 	bl	800abae <USBH_MSC_SCSI_ReadCapacity>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009ffe:	7bfb      	ldrb	r3, [r7, #15]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d120      	bne.n	800a046 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a00a:	4619      	mov	r1, r3
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	2334      	movs	r3, #52	; 0x34
 800a010:	fb03 f301 	mul.w	r3, r3, r1
 800a014:	4413      	add	r3, r2
 800a016:	3390      	adds	r3, #144	; 0x90
 800a018:	2201      	movs	r2, #1
 800a01a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a022:	4619      	mov	r1, r3
 800a024:	693a      	ldr	r2, [r7, #16]
 800a026:	2334      	movs	r3, #52	; 0x34
 800a028:	fb03 f301 	mul.w	r3, r3, r1
 800a02c:	4413      	add	r3, r2
 800a02e:	3391      	adds	r3, #145	; 0x91
 800a030:	2200      	movs	r2, #0
 800a032:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a03a:	3301      	adds	r3, #1
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a044:	e0d3      	b.n	800a1ee <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800a046:	7bfb      	ldrb	r3, [r7, #15]
 800a048:	2b02      	cmp	r3, #2
 800a04a:	d10c      	bne.n	800a066 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a052:	4619      	mov	r1, r3
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	2334      	movs	r3, #52	; 0x34
 800a058:	fb03 f301 	mul.w	r3, r3, r1
 800a05c:	4413      	add	r3, r2
 800a05e:	3390      	adds	r3, #144	; 0x90
 800a060:	2205      	movs	r2, #5
 800a062:	701a      	strb	r2, [r3, #0]
            break;
 800a064:	e0c3      	b.n	800a1ee <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a066:	7bfb      	ldrb	r3, [r7, #15]
 800a068:	2b04      	cmp	r3, #4
 800a06a:	f040 80c0 	bne.w	800a1ee <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a074:	4619      	mov	r1, r3
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	2334      	movs	r3, #52	; 0x34
 800a07a:	fb03 f301 	mul.w	r3, r3, r1
 800a07e:	4413      	add	r3, r2
 800a080:	3390      	adds	r3, #144	; 0x90
 800a082:	2201      	movs	r2, #1
 800a084:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a08c:	4619      	mov	r1, r3
 800a08e:	693a      	ldr	r2, [r7, #16]
 800a090:	2334      	movs	r3, #52	; 0x34
 800a092:	fb03 f301 	mul.w	r3, r3, r1
 800a096:	4413      	add	r3, r2
 800a098:	3391      	adds	r3, #145	; 0x91
 800a09a:	2202      	movs	r2, #2
 800a09c:	701a      	strb	r2, [r3, #0]
            break;
 800a09e:	e0a6      	b.n	800a1ee <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0a6:	b2d9      	uxtb	r1, r3
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0ae:	461a      	mov	r2, r3
 800a0b0:	2334      	movs	r3, #52	; 0x34
 800a0b2:	fb03 f302 	mul.w	r3, r3, r2
 800a0b6:	3398      	adds	r3, #152	; 0x98
 800a0b8:	693a      	ldr	r2, [r7, #16]
 800a0ba:	4413      	add	r3, r2
 800a0bc:	3304      	adds	r3, #4
 800a0be:	461a      	mov	r2, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fe94 	bl	800adee <USBH_MSC_SCSI_RequestSense>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800a0ca:	7bfb      	ldrb	r3, [r7, #15]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d145      	bne.n	800a15c <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	693a      	ldr	r2, [r7, #16]
 800a0da:	2334      	movs	r3, #52	; 0x34
 800a0dc:	fb03 f301 	mul.w	r3, r3, r1
 800a0e0:	4413      	add	r3, r2
 800a0e2:	339c      	adds	r3, #156	; 0x9c
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	2b06      	cmp	r3, #6
 800a0e8:	d00c      	beq.n	800a104 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	693a      	ldr	r2, [r7, #16]
 800a0f4:	2334      	movs	r3, #52	; 0x34
 800a0f6:	fb03 f301 	mul.w	r3, r3, r1
 800a0fa:	4413      	add	r3, r2
 800a0fc:	339c      	adds	r3, #156	; 0x9c
 800a0fe:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800a100:	2b02      	cmp	r3, #2
 800a102:	d117      	bne.n	800a134 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	f242 720f 	movw	r2, #9999	; 0x270f
 800a116:	4293      	cmp	r3, r2
 800a118:	d80c      	bhi.n	800a134 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a120:	4619      	mov	r1, r3
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	2334      	movs	r3, #52	; 0x34
 800a126:	fb03 f301 	mul.w	r3, r3, r1
 800a12a:	4413      	add	r3, r2
 800a12c:	3390      	adds	r3, #144	; 0x90
 800a12e:	2202      	movs	r2, #2
 800a130:	701a      	strb	r2, [r3, #0]
                  break;
 800a132:	e05f      	b.n	800a1f4 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a13a:	4619      	mov	r1, r3
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	2334      	movs	r3, #52	; 0x34
 800a140:	fb03 f301 	mul.w	r3, r3, r1
 800a144:	4413      	add	r3, r2
 800a146:	3390      	adds	r3, #144	; 0x90
 800a148:	2201      	movs	r2, #1
 800a14a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a152:	3301      	adds	r3, #1
 800a154:	b29a      	uxth	r2, r3
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d10c      	bne.n	800a17c <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a168:	4619      	mov	r1, r3
 800a16a:	693a      	ldr	r2, [r7, #16]
 800a16c:	2334      	movs	r3, #52	; 0x34
 800a16e:	fb03 f301 	mul.w	r3, r3, r1
 800a172:	4413      	add	r3, r2
 800a174:	3390      	adds	r3, #144	; 0x90
 800a176:	2208      	movs	r2, #8
 800a178:	701a      	strb	r2, [r3, #0]
            break;
 800a17a:	e03a      	b.n	800a1f2 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
 800a17e:	2b04      	cmp	r3, #4
 800a180:	d137      	bne.n	800a1f2 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a188:	4619      	mov	r1, r3
 800a18a:	693a      	ldr	r2, [r7, #16]
 800a18c:	2334      	movs	r3, #52	; 0x34
 800a18e:	fb03 f301 	mul.w	r3, r3, r1
 800a192:	4413      	add	r3, r2
 800a194:	3390      	adds	r3, #144	; 0x90
 800a196:	2201      	movs	r2, #1
 800a198:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	693a      	ldr	r2, [r7, #16]
 800a1a4:	2334      	movs	r3, #52	; 0x34
 800a1a6:	fb03 f301 	mul.w	r3, r3, r1
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3391      	adds	r3, #145	; 0x91
 800a1ae:	2202      	movs	r2, #2
 800a1b0:	701a      	strb	r2, [r3, #0]
            break;
 800a1b2:	e01e      	b.n	800a1f2 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	b29a      	uxth	r2, r3
 800a1be:	693b      	ldr	r3, [r7, #16]
 800a1c0:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800a1c4:	e016      	b.n	800a1f4 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1da:	2102      	movs	r1, #2
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
      break;
 800a1e0:	e00c      	b.n	800a1fc <USBH_MSC_Process+0x514>
            break;
 800a1e2:	bf00      	nop
 800a1e4:	e00a      	b.n	800a1fc <USBH_MSC_Process+0x514>
            break;
 800a1e6:	bf00      	nop
 800a1e8:	e008      	b.n	800a1fc <USBH_MSC_Process+0x514>
            break;
 800a1ea:	bf00      	nop
 800a1ec:	e006      	b.n	800a1fc <USBH_MSC_Process+0x514>
            break;
 800a1ee:	bf00      	nop
 800a1f0:	e004      	b.n	800a1fc <USBH_MSC_Process+0x514>
            break;
 800a1f2:	bf00      	nop
      break;
 800a1f4:	e002      	b.n	800a1fc <USBH_MSC_Process+0x514>
      error = USBH_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fa:	bf00      	nop
  }
  return error;
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop

0800a208 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a210:	2300      	movs	r3, #0
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr

0800a21e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b088      	sub	sp, #32
 800a222:	af02      	add	r7, sp, #8
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	460b      	mov	r3, r1
 800a228:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a230:	69db      	ldr	r3, [r3, #28]
 800a232:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800a234:	2301      	movs	r3, #1
 800a236:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800a238:	2301      	movs	r3, #1
 800a23a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	693a      	ldr	r2, [r7, #16]
 800a240:	2134      	movs	r1, #52	; 0x34
 800a242:	fb01 f303 	mul.w	r3, r1, r3
 800a246:	4413      	add	r3, r2
 800a248:	3390      	adds	r3, #144	; 0x90
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	2b06      	cmp	r3, #6
 800a24e:	d004      	beq.n	800a25a <USBH_MSC_RdWrProcess+0x3c>
 800a250:	2b07      	cmp	r3, #7
 800a252:	d037      	beq.n	800a2c4 <USBH_MSC_RdWrProcess+0xa6>
 800a254:	2b05      	cmp	r3, #5
 800a256:	d06a      	beq.n	800a32e <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800a258:	e0a6      	b.n	800a3a8 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800a25a:	78f9      	ldrb	r1, [r7, #3]
 800a25c:	2300      	movs	r3, #0
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2300      	movs	r3, #0
 800a262:	2200      	movs	r2, #0
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f000 fea6 	bl	800afb6 <USBH_MSC_SCSI_Read>
 800a26a:	4603      	mov	r3, r0
 800a26c:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d10b      	bne.n	800a28c <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	2134      	movs	r1, #52	; 0x34
 800a27a:	fb01 f303 	mul.w	r3, r1, r3
 800a27e:	4413      	add	r3, r2
 800a280:	3390      	adds	r3, #144	; 0x90
 800a282:	2201      	movs	r2, #1
 800a284:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	75fb      	strb	r3, [r7, #23]
      break;
 800a28a:	e088      	b.n	800a39e <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d109      	bne.n	800a2a6 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a292:	78fb      	ldrb	r3, [r7, #3]
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	2134      	movs	r1, #52	; 0x34
 800a298:	fb01 f303 	mul.w	r3, r1, r3
 800a29c:	4413      	add	r3, r2
 800a29e:	3390      	adds	r3, #144	; 0x90
 800a2a0:	2205      	movs	r2, #5
 800a2a2:	701a      	strb	r2, [r3, #0]
      break;
 800a2a4:	e07b      	b.n	800a39e <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d178      	bne.n	800a39e <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	693a      	ldr	r2, [r7, #16]
 800a2b0:	2134      	movs	r1, #52	; 0x34
 800a2b2:	fb01 f303 	mul.w	r3, r1, r3
 800a2b6:	4413      	add	r3, r2
 800a2b8:	3390      	adds	r3, #144	; 0x90
 800a2ba:	2208      	movs	r2, #8
 800a2bc:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a2be:	2302      	movs	r3, #2
 800a2c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c2:	e06c      	b.n	800a39e <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800a2c4:	78f9      	ldrb	r1, [r7, #3]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9300      	str	r3, [sp, #0]
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fe06 	bl	800aee0 <USBH_MSC_SCSI_Write>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a2d8:	7bfb      	ldrb	r3, [r7, #15]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10b      	bne.n	800a2f6 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a2de:	78fb      	ldrb	r3, [r7, #3]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	2134      	movs	r1, #52	; 0x34
 800a2e4:	fb01 f303 	mul.w	r3, r1, r3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	3390      	adds	r3, #144	; 0x90
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2f4:	e055      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d109      	bne.n	800a310 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800a2fc:	78fb      	ldrb	r3, [r7, #3]
 800a2fe:	693a      	ldr	r2, [r7, #16]
 800a300:	2134      	movs	r1, #52	; 0x34
 800a302:	fb01 f303 	mul.w	r3, r1, r3
 800a306:	4413      	add	r3, r2
 800a308:	3390      	adds	r3, #144	; 0x90
 800a30a:	2205      	movs	r2, #5
 800a30c:	701a      	strb	r2, [r3, #0]
      break;
 800a30e:	e048      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a310:	7bfb      	ldrb	r3, [r7, #15]
 800a312:	2b04      	cmp	r3, #4
 800a314:	d145      	bne.n	800a3a2 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a316:	78fb      	ldrb	r3, [r7, #3]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	2134      	movs	r1, #52	; 0x34
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	4413      	add	r3, r2
 800a322:	3390      	adds	r3, #144	; 0x90
 800a324:	2208      	movs	r2, #8
 800a326:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a328:	2302      	movs	r3, #2
 800a32a:	75fb      	strb	r3, [r7, #23]
      break;
 800a32c:	e039      	b.n	800a3a2 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a32e:	78fb      	ldrb	r3, [r7, #3]
 800a330:	2234      	movs	r2, #52	; 0x34
 800a332:	fb02 f303 	mul.w	r3, r2, r3
 800a336:	3398      	adds	r3, #152	; 0x98
 800a338:	693a      	ldr	r2, [r7, #16]
 800a33a:	4413      	add	r3, r2
 800a33c:	1d1a      	adds	r2, r3, #4
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	4619      	mov	r1, r3
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fd53 	bl	800adee <USBH_MSC_SCSI_RequestSense>
 800a348:	4603      	mov	r3, r0
 800a34a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a34c:	7bfb      	ldrb	r3, [r7, #15]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d113      	bne.n	800a37a <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a352:	78fb      	ldrb	r3, [r7, #3]
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	2134      	movs	r1, #52	; 0x34
 800a358:	fb01 f303 	mul.w	r3, r1, r3
 800a35c:	4413      	add	r3, r2
 800a35e:	3390      	adds	r3, #144	; 0x90
 800a360:	2201      	movs	r2, #1
 800a362:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	2134      	movs	r1, #52	; 0x34
 800a36a:	fb01 f303 	mul.w	r3, r1, r3
 800a36e:	4413      	add	r3, r2
 800a370:	3391      	adds	r3, #145	; 0x91
 800a372:	2202      	movs	r2, #2
 800a374:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800a376:	2302      	movs	r3, #2
 800a378:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d012      	beq.n	800a3a6 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	2b04      	cmp	r3, #4
 800a384:	d10f      	bne.n	800a3a6 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	2134      	movs	r1, #52	; 0x34
 800a38c:	fb01 f303 	mul.w	r3, r1, r3
 800a390:	4413      	add	r3, r2
 800a392:	3390      	adds	r3, #144	; 0x90
 800a394:	2208      	movs	r2, #8
 800a396:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a398:	2302      	movs	r3, #2
 800a39a:	75fb      	strb	r3, [r7, #23]
      break;
 800a39c:	e003      	b.n	800a3a6 <USBH_MSC_RdWrProcess+0x188>
      break;
 800a39e:	bf00      	nop
 800a3a0:	e002      	b.n	800a3a8 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800a3a2:	bf00      	nop
 800a3a4:	e000      	b.n	800a3a8 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800a3a6:	bf00      	nop

  }
  return error;
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3c4:	69db      	ldr	r3, [r3, #28]
 800a3c6:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	b2db      	uxtb	r3, r3
 800a3ce:	2b0b      	cmp	r3, #11
 800a3d0:	d10c      	bne.n	800a3ec <USBH_MSC_UnitIsReady+0x3a>
 800a3d2:	78fb      	ldrb	r3, [r7, #3]
 800a3d4:	68ba      	ldr	r2, [r7, #8]
 800a3d6:	2134      	movs	r1, #52	; 0x34
 800a3d8:	fb01 f303 	mul.w	r3, r1, r3
 800a3dc:	4413      	add	r3, r2
 800a3de:	3391      	adds	r3, #145	; 0x91
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d102      	bne.n	800a3ec <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	73fb      	strb	r3, [r7, #15]
 800a3ea:	e001      	b.n	800a3f0 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af00      	add	r7, sp, #0
 800a404:	60f8      	str	r0, [r7, #12]
 800a406:	460b      	mov	r3, r1
 800a408:	607a      	str	r2, [r7, #4]
 800a40a:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	781b      	ldrb	r3, [r3, #0]
 800a41a:	b2db      	uxtb	r3, r3
 800a41c:	2b0b      	cmp	r3, #11
 800a41e:	d10d      	bne.n	800a43c <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	2234      	movs	r2, #52	; 0x34
 800a424:	fb02 f303 	mul.w	r3, r2, r3
 800a428:	3390      	adds	r3, #144	; 0x90
 800a42a:	697a      	ldr	r2, [r7, #20]
 800a42c:	4413      	add	r3, r2
 800a42e:	2234      	movs	r2, #52	; 0x34
 800a430:	4619      	mov	r1, r3
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f005 f880 	bl	800f538 <memcpy>
    return USBH_OK;
 800a438:	2300      	movs	r3, #0
 800a43a:	e000      	b.n	800a43e <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a43c:	2302      	movs	r3, #2
  }
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3718      	adds	r7, #24
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b088      	sub	sp, #32
 800a44a:	af02      	add	r7, sp, #8
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	607a      	str	r2, [r7, #4]
 800a450:	603b      	str	r3, [r7, #0]
 800a452:	460b      	mov	r3, r1
 800a454:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a45c:	69db      	ldr	r3, [r3, #28]
 800a45e:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a466:	b2db      	uxtb	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00e      	beq.n	800a48a <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a472:	2b0b      	cmp	r3, #11
 800a474:	d109      	bne.n	800a48a <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a476:	7afb      	ldrb	r3, [r7, #11]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	2134      	movs	r1, #52	; 0x34
 800a47c:	fb01 f303 	mul.w	r3, r1, r3
 800a480:	4413      	add	r3, r2
 800a482:	3390      	adds	r3, #144	; 0x90
 800a484:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a486:	2b01      	cmp	r3, #1
 800a488:	d001      	beq.n	800a48e <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a48a:	2302      	movs	r3, #2
 800a48c:	e040      	b.n	800a510 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a48e:	697b      	ldr	r3, [r7, #20]
 800a490:	2206      	movs	r2, #6
 800a492:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a494:	7afb      	ldrb	r3, [r7, #11]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	2134      	movs	r1, #52	; 0x34
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	4413      	add	r3, r2
 800a4a0:	3390      	adds	r3, #144	; 0x90
 800a4a2:	2206      	movs	r2, #6
 800a4a4:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a4a6:	7afb      	ldrb	r3, [r7, #11]
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a4b0:	7af9      	ldrb	r1, [r7, #11]
 800a4b2:	6a3b      	ldr	r3, [r7, #32]
 800a4b4:	9300      	str	r3, [sp, #0]
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f000 fd7b 	bl	800afb6 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a4c6:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4c8:	e016      	b.n	800a4f8 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	1ad2      	subs	r2, r2, r3
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	f242 7110 	movw	r1, #10000	; 0x2710
 800a4da:	fb01 f303 	mul.w	r3, r1, r3
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d805      	bhi.n	800a4ee <USBH_MSC_Read+0xa8>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d104      	bne.n	800a4f8 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	e00b      	b.n	800a510 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a4f8:	7afb      	ldrb	r3, [r7, #11]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	f7ff fe8e 	bl	800a21e <USBH_MSC_RdWrProcess>
 800a502:	4603      	mov	r3, r0
 800a504:	2b01      	cmp	r3, #1
 800a506:	d0e0      	beq.n	800a4ca <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	2201      	movs	r2, #1
 800a50c:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a50e:	2300      	movs	r3, #0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b088      	sub	sp, #32
 800a51c:	af02      	add	r7, sp, #8
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	607a      	str	r2, [r7, #4]
 800a522:	603b      	str	r3, [r7, #0]
 800a524:	460b      	mov	r3, r1
 800a526:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00e      	beq.n	800a55c <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a544:	2b0b      	cmp	r3, #11
 800a546:	d109      	bne.n	800a55c <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a548:	7afb      	ldrb	r3, [r7, #11]
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	2134      	movs	r1, #52	; 0x34
 800a54e:	fb01 f303 	mul.w	r3, r1, r3
 800a552:	4413      	add	r3, r2
 800a554:	3390      	adds	r3, #144	; 0x90
 800a556:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d001      	beq.n	800a560 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a55c:	2302      	movs	r3, #2
 800a55e:	e040      	b.n	800a5e2 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	2207      	movs	r2, #7
 800a564:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a566:	7afb      	ldrb	r3, [r7, #11]
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	2134      	movs	r1, #52	; 0x34
 800a56c:	fb01 f303 	mul.w	r3, r1, r3
 800a570:	4413      	add	r3, r2
 800a572:	3390      	adds	r3, #144	; 0x90
 800a574:	2207      	movs	r2, #7
 800a576:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a578:	7afb      	ldrb	r3, [r7, #11]
 800a57a:	b29a      	uxth	r2, r3
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a582:	7af9      	ldrb	r1, [r7, #11]
 800a584:	6a3b      	ldr	r3, [r7, #32]
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	687a      	ldr	r2, [r7, #4]
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f000 fca7 	bl	800aee0 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a598:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a59a:	e016      	b.n	800a5ca <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	1ad2      	subs	r2, r2, r3
 800a5a6:	6a3b      	ldr	r3, [r7, #32]
 800a5a8:	f242 7110 	movw	r1, #10000	; 0x2710
 800a5ac:	fb01 f303 	mul.w	r3, r1, r3
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d805      	bhi.n	800a5c0 <USBH_MSC_Write+0xa8>
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d104      	bne.n	800a5ca <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a5c6:	2302      	movs	r3, #2
 800a5c8:	e00b      	b.n	800a5e2 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fe25 	bl	800a21e <USBH_MSC_RdWrProcess>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d0e0      	beq.n	800a59c <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	2201      	movs	r2, #1
 800a5de:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b082      	sub	sp, #8
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2221      	movs	r2, #33	; 0x21
 800a5f6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	22ff      	movs	r2, #255	; 0xff
 800a5fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a610:	2200      	movs	r2, #0
 800a612:	2100      	movs	r1, #0
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f001 fdae 	bl	800c176 <USBH_CtlReq>
 800a61a:	4603      	mov	r3, r0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b082      	sub	sp, #8
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	22a1      	movs	r2, #161	; 0xa1
 800a632:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	22fe      	movs	r2, #254	; 0xfe
 800a638:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2200      	movs	r2, #0
 800a644:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a64c:	2201      	movs	r2, #1
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 fd90 	bl	800c176 <USBH_CtlReq>
 800a656:	4603      	mov	r3, r0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a66e:	69db      	ldr	r3, [r3, #28]
 800a670:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	4a09      	ldr	r2, [pc, #36]	; (800a69c <USBH_MSC_BOT_Init+0x3c>)
 800a676:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	4a09      	ldr	r2, [pc, #36]	; (800a6a0 <USBH_MSC_BOT_Init+0x40>)
 800a67c:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a68e:	2300      	movs	r3, #0
}
 800a690:	4618      	mov	r0, r3
 800a692:	3714      	adds	r7, #20
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr
 800a69c:	43425355 	.word	0x43425355
 800a6a0:	20304050 	.word	0x20304050

0800a6a4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b088      	sub	sp, #32
 800a6a8:	af02      	add	r7, sp, #8
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a6c6:	69db      	ldr	r3, [r3, #28]
 800a6c8:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	2b0a      	cmp	r3, #10
 800a6d8:	f200 81a1 	bhi.w	800aa1e <USBH_MSC_BOT_Process+0x37a>
 800a6dc:	a201      	add	r2, pc, #4	; (adr r2, 800a6e4 <USBH_MSC_BOT_Process+0x40>)
 800a6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e2:	bf00      	nop
 800a6e4:	0800a711 	.word	0x0800a711
 800a6e8:	0800a73b 	.word	0x0800a73b
 800a6ec:	0800a7a5 	.word	0x0800a7a5
 800a6f0:	0800a7c3 	.word	0x0800a7c3
 800a6f4:	0800a847 	.word	0x0800a847
 800a6f8:	0800a86b 	.word	0x0800a86b
 800a6fc:	0800a905 	.word	0x0800a905
 800a700:	0800a921 	.word	0x0800a921
 800a704:	0800a973 	.word	0x0800a973
 800a708:	0800a9a3 	.word	0x0800a9a3
 800a70c:	0800aa05 	.word	0x0800aa05
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	2202      	movs	r2, #2
 800a71c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	795a      	ldrb	r2, [r3, #5]
 800a72a:	2301      	movs	r3, #1
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4613      	mov	r3, r2
 800a730:	221f      	movs	r2, #31
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f001 ff2f 	bl	800c596 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a738:	e180      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	795b      	ldrb	r3, [r3, #5]
 800a73e:	4619      	mov	r1, r3
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f004 fddb 	bl	800f2fc <USBH_LL_GetURBState>
 800a746:	4603      	mov	r3, r0
 800a748:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a74a:	7d3b      	ldrb	r3, [r7, #20]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d118      	bne.n	800a782 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00f      	beq.n	800a778 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a75e:	b25b      	sxtb	r3, r3
 800a760:	2b00      	cmp	r3, #0
 800a762:	da04      	bge.n	800a76e <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	2203      	movs	r2, #3
 800a768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a76c:	e159      	b.n	800aa22 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2205      	movs	r2, #5
 800a772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a776:	e154      	b.n	800aa22 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	2207      	movs	r2, #7
 800a77c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a780:	e14f      	b.n	800aa22 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a782:	7d3b      	ldrb	r3, [r7, #20]
 800a784:	2b02      	cmp	r3, #2
 800a786:	d104      	bne.n	800a792 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a790:	e147      	b.n	800aa22 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800a792:	7d3b      	ldrb	r3, [r7, #20]
 800a794:	2b05      	cmp	r3, #5
 800a796:	f040 8144 	bne.w	800aa22 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	220a      	movs	r2, #10
 800a79e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a7a2:	e13e      	b.n	800aa22 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	895a      	ldrh	r2, [r3, #10]
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	791b      	ldrb	r3, [r3, #4]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 ff14 	bl	800c5e0 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	2204      	movs	r2, #4
 800a7bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a7c0:	e13c      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	791b      	ldrb	r3, [r3, #4]
 800a7c6:	4619      	mov	r1, r3
 800a7c8:	6878      	ldr	r0, [r7, #4]
 800a7ca:	f004 fd97 	bl	800f2fc <USBH_LL_GetURBState>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a7d2:	7d3b      	ldrb	r3, [r7, #20]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d12d      	bne.n	800a834 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	8952      	ldrh	r2, [r2, #10]
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d910      	bls.n	800a806 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	8952      	ldrh	r2, [r2, #10]
 800a7ee:	441a      	add	r2, r3
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7fa:	693a      	ldr	r2, [r7, #16]
 800a7fc:	8952      	ldrh	r2, [r2, #10]
 800a7fe:	1a9a      	subs	r2, r3, r2
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	65da      	str	r2, [r3, #92]	; 0x5c
 800a804:	e002      	b.n	800a80c <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	2200      	movs	r2, #0
 800a80a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00a      	beq.n	800a82a <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	895a      	ldrh	r2, [r3, #10]
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	791b      	ldrb	r3, [r3, #4]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f001 fedc 	bl	800c5e0 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a828:	e0fd      	b.n	800aa26 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2207      	movs	r2, #7
 800a82e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a832:	e0f8      	b.n	800aa26 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800a834:	7d3b      	ldrb	r3, [r7, #20]
 800a836:	2b05      	cmp	r3, #5
 800a838:	f040 80f5 	bne.w	800aa26 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	2209      	movs	r2, #9
 800a840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a844:	e0ef      	b.n	800aa26 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	891a      	ldrh	r2, [r3, #8]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	7958      	ldrb	r0, [r3, #5]
 800a854:	2301      	movs	r3, #1
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	4603      	mov	r3, r0
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f001 fe9b 	bl	800c596 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2206      	movs	r2, #6
 800a864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a868:	e0e8      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	795b      	ldrb	r3, [r3, #5]
 800a86e:	4619      	mov	r1, r3
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f004 fd43 	bl	800f2fc <USBH_LL_GetURBState>
 800a876:	4603      	mov	r3, r0
 800a878:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a87a:	7d3b      	ldrb	r3, [r7, #20]
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d130      	bne.n	800a8e2 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a884:	693a      	ldr	r2, [r7, #16]
 800a886:	8912      	ldrh	r2, [r2, #8]
 800a888:	4293      	cmp	r3, r2
 800a88a:	d910      	bls.n	800a8ae <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a892:	693a      	ldr	r2, [r7, #16]
 800a894:	8912      	ldrh	r2, [r2, #8]
 800a896:	441a      	add	r2, r3
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	8912      	ldrh	r2, [r2, #8]
 800a8a6:	1a9a      	subs	r2, r3, r2
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	65da      	str	r2, [r3, #92]	; 0x5c
 800a8ac:	e002      	b.n	800a8b4 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00d      	beq.n	800a8d8 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	891a      	ldrh	r2, [r3, #8]
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	7958      	ldrb	r0, [r3, #5]
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fe60 	bl	800c596 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a8d6:	e0a8      	b.n	800aa2a <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2207      	movs	r2, #7
 800a8dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8e0:	e0a3      	b.n	800aa2a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8e2:	7d3b      	ldrb	r3, [r7, #20]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d104      	bne.n	800a8f2 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	2205      	movs	r2, #5
 800a8ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a8f0:	e09b      	b.n	800aa2a <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800a8f2:	7d3b      	ldrb	r3, [r7, #20]
 800a8f4:	2b05      	cmp	r3, #5
 800a8f6:	f040 8098 	bne.w	800aa2a <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	220a      	movs	r2, #10
 800a8fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a902:	e092      	b.n	800aa2a <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	791b      	ldrb	r3, [r3, #4]
 800a90e:	220d      	movs	r2, #13
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 fe65 	bl	800c5e0 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2208      	movs	r2, #8
 800a91a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a91e:	e08d      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	791b      	ldrb	r3, [r3, #4]
 800a924:	4619      	mov	r1, r3
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f004 fce8 	bl	800f2fc <USBH_LL_GetURBState>
 800a92c:	4603      	mov	r3, r0
 800a92e:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a930:	7d3b      	ldrb	r3, [r7, #20]
 800a932:	2b01      	cmp	r3, #1
 800a934:	d115      	bne.n	800a962 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	2201      	movs	r2, #1
 800a93a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	2201      	movs	r2, #1
 800a942:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 f8aa 	bl	800aaa0 <USBH_MSC_DecodeCSW>
 800a94c:	4603      	mov	r3, r0
 800a94e:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a950:	7d7b      	ldrb	r3, [r7, #21]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a95a:	e068      	b.n	800aa2e <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800a95c:	2302      	movs	r3, #2
 800a95e:	75fb      	strb	r3, [r7, #23]
      break;
 800a960:	e065      	b.n	800aa2e <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800a962:	7d3b      	ldrb	r3, [r7, #20]
 800a964:	2b05      	cmp	r3, #5
 800a966:	d162      	bne.n	800aa2e <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	2209      	movs	r2, #9
 800a96c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a970:	e05d      	b.n	800aa2e <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a972:	78fb      	ldrb	r3, [r7, #3]
 800a974:	2200      	movs	r2, #0
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f865 	bl	800aa48 <USBH_MSC_BOT_Abort>
 800a97e:	4603      	mov	r3, r0
 800a980:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a982:	7dbb      	ldrb	r3, [r7, #22]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	2207      	movs	r2, #7
 800a98c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a990:	e04f      	b.n	800aa32 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a992:	7dbb      	ldrb	r3, [r7, #22]
 800a994:	2b04      	cmp	r3, #4
 800a996:	d14c      	bne.n	800aa32 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	220b      	movs	r2, #11
 800a99c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a9a0:	e047      	b.n	800aa32 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a9a2:	78fb      	ldrb	r3, [r7, #3]
 800a9a4:	2201      	movs	r2, #1
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f84d 	bl	800aa48 <USBH_MSC_BOT_Abort>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a9b2:	7dbb      	ldrb	r3, [r7, #22]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d11d      	bne.n	800a9f4 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	795b      	ldrb	r3, [r3, #5]
 800a9bc:	4619      	mov	r1, r3
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f004 fcf9 	bl	800f3b6 <USBH_LL_GetToggle>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	7959      	ldrb	r1, [r3, #5]
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	f1c3 0301 	rsb	r3, r3, #1
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f004 fcba 	bl	800f350 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	791b      	ldrb	r3, [r3, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f004 fcb3 	bl	800f350 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	2209      	movs	r2, #9
 800a9ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a9f2:	e020      	b.n	800aa36 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800a9f4:	7dbb      	ldrb	r3, [r7, #22]
 800a9f6:	2b04      	cmp	r3, #4
 800a9f8:	d11d      	bne.n	800aa36 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	220b      	movs	r2, #11
 800a9fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800aa02:	e018      	b.n	800aa36 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800aa04:	6878      	ldr	r0, [r7, #4]
 800aa06:	f7ff fdf0 	bl	800a5ea <USBH_MSC_BOT_REQ_Reset>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800aa0e:	7dfb      	ldrb	r3, [r7, #23]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d112      	bne.n	800aa3a <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800aa1c:	e00d      	b.n	800aa3a <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800aa1e:	bf00      	nop
 800aa20:	e00c      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa22:	bf00      	nop
 800aa24:	e00a      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa26:	bf00      	nop
 800aa28:	e008      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa2a:	bf00      	nop
 800aa2c:	e006      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa2e:	bf00      	nop
 800aa30:	e004      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa32:	bf00      	nop
 800aa34:	e002      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa36:	bf00      	nop
 800aa38:	e000      	b.n	800aa3c <USBH_MSC_BOT_Process+0x398>
      break;
 800aa3a:	bf00      	nop
  }
  return status;
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop

0800aa48 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	70fb      	strb	r3, [r7, #3]
 800aa54:	4613      	mov	r3, r2
 800aa56:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800aa58:	2302      	movs	r3, #2
 800aa5a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800aa66:	78bb      	ldrb	r3, [r7, #2]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <USBH_MSC_BOT_Abort+0x2a>
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d009      	beq.n	800aa84 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800aa70:	e011      	b.n	800aa96 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	79db      	ldrb	r3, [r3, #7]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f99c 	bl	800bdb6 <USBH_ClrFeature>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	73fb      	strb	r3, [r7, #15]
      break;
 800aa82:	e008      	b.n	800aa96 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800aa84:	68bb      	ldr	r3, [r7, #8]
 800aa86:	799b      	ldrb	r3, [r3, #6]
 800aa88:	4619      	mov	r1, r3
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 f993 	bl	800bdb6 <USBH_ClrFeature>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
      break;
 800aa94:	bf00      	nop
  }
  return status;
 800aa96:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3710      	adds	r7, #16
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}

0800aaa0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800aab2:	2301      	movs	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	791b      	ldrb	r3, [r3, #4]
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f004 fb8b 	bl	800f1d8 <USBH_LL_GetLastXferSize>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b0d      	cmp	r3, #13
 800aac6:	d002      	beq.n	800aace <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800aac8:	2302      	movs	r3, #2
 800aaca:	73fb      	strb	r3, [r7, #15]
 800aacc:	e024      	b.n	800ab18 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aad2:	4a14      	ldr	r2, [pc, #80]	; (800ab24 <USBH_MSC_DecodeCSW+0x84>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d11d      	bne.n	800ab14 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d119      	bne.n	800ab18 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d102      	bne.n	800aaf4 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	73fb      	strb	r3, [r7, #15]
 800aaf2:	e011      	b.n	800ab18 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d102      	bne.n	800ab04 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800aafe:	2301      	movs	r3, #1
 800ab00:	73fb      	strb	r3, [r7, #15]
 800ab02:	e009      	b.n	800ab18 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab0a:	2b02      	cmp	r3, #2
 800ab0c:	d104      	bne.n	800ab18 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800ab0e:	2302      	movs	r3, #2
 800ab10:	73fb      	strb	r3, [r7, #15]
 800ab12:	e001      	b.n	800ab18 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800ab14:	2302      	movs	r3, #2
 800ab16:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3710      	adds	r7, #16
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	53425355 	.word	0x53425355

0800ab28 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800ab34:	2302      	movs	r3, #2
 800ab36:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d002      	beq.n	800ab52 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d021      	beq.n	800ab94 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800ab50:	e028      	b.n	800aba4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2200      	movs	r2, #0
 800ab56:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	220a      	movs	r2, #10
 800ab64:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	3363      	adds	r3, #99	; 0x63
 800ab6c:	2210      	movs	r2, #16
 800ab6e:	2100      	movs	r1, #0
 800ab70:	4618      	mov	r0, r3
 800ab72:	f004 fcec 	bl	800f54e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	73fb      	strb	r3, [r7, #15]
      break;
 800ab92:	e007      	b.n	800aba4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab94:	78fb      	ldrb	r3, [r7, #3]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f7ff fd83 	bl	800a6a4 <USBH_MSC_BOT_Process>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	73fb      	strb	r3, [r7, #15]
      break;
 800aba2:	bf00      	nop
  }

  return error;
 800aba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800abae:	b580      	push	{r7, lr}
 800abb0:	b086      	sub	sp, #24
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60f8      	str	r0, [r7, #12]
 800abb6:	460b      	mov	r3, r1
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800abbc:	2301      	movs	r3, #1
 800abbe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abc6:	69db      	ldr	r3, [r3, #28]
 800abc8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d002      	beq.n	800abda <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800abd4:	2b02      	cmp	r3, #2
 800abd6:	d027      	beq.n	800ac28 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800abd8:	e05f      	b.n	800ac9a <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	2208      	movs	r2, #8
 800abde:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2280      	movs	r2, #128	; 0x80
 800abe4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	220a      	movs	r2, #10
 800abec:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	3363      	adds	r3, #99	; 0x63
 800abf4:	2210      	movs	r2, #16
 800abf6:	2100      	movs	r1, #0
 800abf8:	4618      	mov	r0, r3
 800abfa:	f004 fca8 	bl	800f54e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	2225      	movs	r2, #37	; 0x25
 800ac02:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	2202      	movs	r2, #2
 800ac12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	f103 0210 	add.w	r2, r3, #16
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac22:	2301      	movs	r3, #1
 800ac24:	75fb      	strb	r3, [r7, #23]
      break;
 800ac26:	e038      	b.n	800ac9a <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac28:	7afb      	ldrb	r3, [r7, #11]
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f7ff fd39 	bl	800a6a4 <USBH_MSC_BOT_Process>
 800ac32:	4603      	mov	r3, r0
 800ac34:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d12d      	bne.n	800ac98 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac42:	3303      	adds	r3, #3
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	461a      	mov	r2, r3
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac4e:	3302      	adds	r3, #2
 800ac50:	781b      	ldrb	r3, [r3, #0]
 800ac52:	021b      	lsls	r3, r3, #8
 800ac54:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac62:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	061b      	lsls	r3, r3, #24
 800ac6e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac7a:	3307      	adds	r3, #7
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ac86:	3306      	adds	r3, #6
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	b29b      	uxth	r3, r3
 800ac8c:	021b      	lsls	r3, r3, #8
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	4313      	orrs	r3, r2
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	809a      	strh	r2, [r3, #4]
      break;
 800ac98:	bf00      	nop
  }

  return error;
 800ac9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3718      	adds	r7, #24
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	460b      	mov	r3, r1
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800acb2:	2302      	movs	r3, #2
 800acb4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acbc:	69db      	ldr	r3, [r3, #28]
 800acbe:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d002      	beq.n	800acd0 <USBH_MSC_SCSI_Inquiry+0x2c>
 800acca:	2b02      	cmp	r3, #2
 800accc:	d03d      	beq.n	800ad4a <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800acce:	e089      	b.n	800ade4 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	2224      	movs	r2, #36	; 0x24
 800acd4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2280      	movs	r2, #128	; 0x80
 800acda:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	220a      	movs	r2, #10
 800ace2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	3363      	adds	r3, #99	; 0x63
 800acea:	220a      	movs	r2, #10
 800acec:	2100      	movs	r1, #0
 800acee:	4618      	mov	r0, r3
 800acf0:	f004 fc2d 	bl	800f54e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	2212      	movs	r2, #18
 800acf8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	015b      	lsls	r3, r3, #5
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	2224      	movs	r2, #36	; 0x24
 800ad1c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	2202      	movs	r2, #2
 800ad34:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	f103 0210 	add.w	r2, r3, #16
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad44:	2301      	movs	r3, #1
 800ad46:	75fb      	strb	r3, [r7, #23]
      break;
 800ad48:	e04c      	b.n	800ade4 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad4a:	7afb      	ldrb	r3, [r7, #11]
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fca8 	bl	800a6a4 <USBH_MSC_BOT_Process>
 800ad54:	4603      	mov	r3, r0
 800ad56:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d141      	bne.n	800ade2 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800ad5e:	2222      	movs	r2, #34	; 0x22
 800ad60:	2100      	movs	r1, #0
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	f004 fbf3 	bl	800f54e <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f003 031f 	and.w	r3, r3, #31
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	095b      	lsrs	r3, r3, #5
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad90:	3301      	adds	r3, #1
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	b25b      	sxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	da03      	bge.n	800ada2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2201      	movs	r2, #1
 800ad9e:	709a      	strb	r2, [r3, #2]
 800ada0:	e002      	b.n	800ada8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2200      	movs	r2, #0
 800ada6:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	1cd8      	adds	r0, r3, #3
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adb2:	3308      	adds	r3, #8
 800adb4:	2208      	movs	r2, #8
 800adb6:	4619      	mov	r1, r3
 800adb8:	f004 fbbe 	bl	800f538 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f103 000c 	add.w	r0, r3, #12
 800adc2:	693b      	ldr	r3, [r7, #16]
 800adc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adc8:	3310      	adds	r3, #16
 800adca:	2210      	movs	r2, #16
 800adcc:	4619      	mov	r1, r3
 800adce:	f004 fbb3 	bl	800f538 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	331d      	adds	r3, #29
 800add6:	693a      	ldr	r2, [r7, #16]
 800add8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800addc:	3220      	adds	r2, #32
 800adde:	6812      	ldr	r2, [r2, #0]
 800ade0:	601a      	str	r2, [r3, #0]
      break;
 800ade2:	bf00      	nop
  }

  return error;
 800ade4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b086      	sub	sp, #24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	460b      	mov	r3, r1
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800adfc:	2302      	movs	r3, #2
 800adfe:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d002      	beq.n	800ae1a <USBH_MSC_SCSI_RequestSense+0x2c>
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d03d      	beq.n	800ae94 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800ae18:	e05d      	b.n	800aed6 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	220e      	movs	r2, #14
 800ae1e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	2280      	movs	r2, #128	; 0x80
 800ae24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	220a      	movs	r2, #10
 800ae2c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	3363      	adds	r3, #99	; 0x63
 800ae34:	2210      	movs	r2, #16
 800ae36:	2100      	movs	r1, #0
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f004 fb88 	bl	800f54e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2203      	movs	r2, #3
 800ae42:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ae46:	7afb      	ldrb	r3, [r7, #11]
 800ae48:	015b      	lsls	r3, r3, #5
 800ae4a:	b2da      	uxtb	r2, r3
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ae52:	693b      	ldr	r3, [r7, #16]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	220e      	movs	r2, #14
 800ae66:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	f103 0210 	add.w	r2, r3, #16
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	75fb      	strb	r3, [r7, #23]
      break;
 800ae92:	e020      	b.n	800aed6 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ae94:	7afb      	ldrb	r3, [r7, #11]
 800ae96:	4619      	mov	r1, r3
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7ff fc03 	bl	800a6a4 <USBH_MSC_BOT_Process>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aea2:	7dfb      	ldrb	r3, [r7, #23]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d115      	bne.n	800aed4 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeae:	3302      	adds	r3, #2
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	f003 030f 	and.w	r3, r3, #15
 800aeb6:	b2da      	uxtb	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800aebc:	693b      	ldr	r3, [r7, #16]
 800aebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec2:	7b1a      	ldrb	r2, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aece:	7b5a      	ldrb	r2, [r3, #13]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	709a      	strb	r2, [r3, #2]
      break;
 800aed4:	bf00      	nop
  }

  return error;
 800aed6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3718      	adds	r7, #24
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	607a      	str	r2, [r7, #4]
 800aeea:	603b      	str	r3, [r7, #0]
 800aeec:	460b      	mov	r3, r1
 800aeee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aef0:	2302      	movs	r3, #2
 800aef2:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aefa:	69db      	ldr	r3, [r3, #28]
 800aefc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800af04:	2b01      	cmp	r3, #1
 800af06:	d002      	beq.n	800af0e <USBH_MSC_SCSI_Write+0x2e>
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d047      	beq.n	800af9c <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800af0c:	e04e      	b.n	800afac <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800af14:	461a      	mov	r2, r3
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	fb03 f202 	mul.w	r2, r3, r2
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	220a      	movs	r2, #10
 800af2c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	3363      	adds	r3, #99	; 0x63
 800af34:	2210      	movs	r2, #16
 800af36:	2100      	movs	r1, #0
 800af38:	4618      	mov	r0, r3
 800af3a:	f004 fb08 	bl	800f54e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	222a      	movs	r2, #42	; 0x2a
 800af42:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800af46:	79fa      	ldrb	r2, [r7, #7]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800af4e:	79ba      	ldrb	r2, [r7, #6]
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800af56:	797a      	ldrb	r2, [r7, #5]
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800af5e:	1d3b      	adds	r3, r7, #4
 800af60:	781a      	ldrb	r2, [r3, #0]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800af68:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800af72:	f107 0320 	add.w	r3, r7, #32
 800af76:	781a      	ldrb	r2, [r3, #0]
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	2202      	movs	r2, #2
 800af8a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800af8e:	693b      	ldr	r3, [r7, #16]
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800af96:	2301      	movs	r3, #1
 800af98:	75fb      	strb	r3, [r7, #23]
      break;
 800af9a:	e007      	b.n	800afac <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800af9c:	7afb      	ldrb	r3, [r7, #11]
 800af9e:	4619      	mov	r1, r3
 800afa0:	68f8      	ldr	r0, [r7, #12]
 800afa2:	f7ff fb7f 	bl	800a6a4 <USBH_MSC_BOT_Process>
 800afa6:	4603      	mov	r3, r0
 800afa8:	75fb      	strb	r3, [r7, #23]
      break;
 800afaa:	bf00      	nop
  }

  return error;
 800afac:	7dfb      	ldrb	r3, [r7, #23]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3718      	adds	r7, #24
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b086      	sub	sp, #24
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	607a      	str	r2, [r7, #4]
 800afc0:	603b      	str	r3, [r7, #0]
 800afc2:	460b      	mov	r3, r1
 800afc4:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800afc6:	2302      	movs	r3, #2
 800afc8:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800afd0:	69db      	ldr	r3, [r3, #28]
 800afd2:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d002      	beq.n	800afe4 <USBH_MSC_SCSI_Read+0x2e>
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d047      	beq.n	800b072 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800afe2:	e04e      	b.n	800b082 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800afea:	461a      	mov	r2, r3
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	fb03 f202 	mul.w	r2, r3, r2
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	2280      	movs	r2, #128	; 0x80
 800affa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	220a      	movs	r2, #10
 800b002:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	3363      	adds	r3, #99	; 0x63
 800b00a:	2210      	movs	r2, #16
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f004 fa9d 	bl	800f54e <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2228      	movs	r2, #40	; 0x28
 800b018:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800b01c:	79fa      	ldrb	r2, [r7, #7]
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800b024:	79ba      	ldrb	r2, [r7, #6]
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800b02c:	797a      	ldrb	r2, [r7, #5]
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800b034:	1d3b      	adds	r3, r7, #4
 800b036:	781a      	ldrb	r2, [r3, #0]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800b03e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800b048:	f107 0320 	add.w	r3, r7, #32
 800b04c:	781a      	ldrb	r2, [r3, #0]
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	2202      	movs	r2, #2
 800b060:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800b06c:	2301      	movs	r3, #1
 800b06e:	75fb      	strb	r3, [r7, #23]
      break;
 800b070:	e007      	b.n	800b082 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800b072:	7afb      	ldrb	r3, [r7, #11]
 800b074:	4619      	mov	r1, r3
 800b076:	68f8      	ldr	r0, [r7, #12]
 800b078:	f7ff fb14 	bl	800a6a4 <USBH_MSC_BOT_Process>
 800b07c:	4603      	mov	r3, r0
 800b07e:	75fb      	strb	r3, [r7, #23]
      break;
 800b080:	bf00      	nop
  }

  return error;
 800b082:	7dfb      	ldrb	r3, [r7, #23]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	4613      	mov	r3, r2
 800b098:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d101      	bne.n	800b0a4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e029      	b.n	800b0f8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	79fa      	ldrb	r2, [r7, #7]
 800b0a8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f000 f81f 	bl	800b100 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d003      	beq.n	800b0f0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f003 ffbf 	bl	800f074 <USBH_LL_Init>

  return USBH_OK;
 800b0f6:	2300      	movs	r3, #0
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
 800b110:	e009      	b.n	800b126 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b112:	687a      	ldr	r2, [r7, #4]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	33e0      	adds	r3, #224	; 0xe0
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	2200      	movs	r2, #0
 800b11e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3301      	adds	r3, #1
 800b124:	60fb      	str	r3, [r7, #12]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2b0e      	cmp	r3, #14
 800b12a:	d9f2      	bls.n	800b112 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b12c:	2300      	movs	r3, #0
 800b12e:	60fb      	str	r3, [r7, #12]
 800b130:	e009      	b.n	800b146 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b132:	687a      	ldr	r2, [r7, #4]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	4413      	add	r3, r2
 800b138:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	3301      	adds	r3, #1
 800b144:	60fb      	str	r3, [r7, #12]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b14c:	d3f1      	bcc.n	800b132 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2200      	movs	r2, #0
 800b152:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	2240      	movs	r2, #64	; 0x40
 800b172:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2200      	movs	r2, #0
 800b178:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2200      	movs	r2, #0
 800b18e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3714      	adds	r7, #20
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d016      	beq.n	800b1ea <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10e      	bne.n	800b1e4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b1cc:	1c59      	adds	r1, r3, #1
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	33de      	adds	r3, #222	; 0xde
 800b1d8:	6839      	ldr	r1, [r7, #0]
 800b1da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	73fb      	strb	r3, [r7, #15]
 800b1e2:	e004      	b.n	800b1ee <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b1e4:	2302      	movs	r3, #2
 800b1e6:	73fb      	strb	r3, [r7, #15]
 800b1e8:	e001      	b.n	800b1ee <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b1ea:	2302      	movs	r3, #2
 800b1ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3714      	adds	r7, #20
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b085      	sub	sp, #20
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	460b      	mov	r3, r1
 800b206:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800b212:	78fa      	ldrb	r2, [r7, #3]
 800b214:	429a      	cmp	r2, r3
 800b216:	d204      	bcs.n	800b222 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800b220:	e001      	b.n	800b226 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b222:	2302      	movs	r3, #2
 800b224:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b226:	7bfb      	ldrb	r3, [r7, #15]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3714      	adds	r7, #20
 800b22c:	46bd      	mov	sp, r7
 800b22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b232:	4770      	bx	lr

0800b234 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	4608      	mov	r0, r1
 800b23e:	4611      	mov	r1, r2
 800b240:	461a      	mov	r2, r3
 800b242:	4603      	mov	r3, r0
 800b244:	70fb      	strb	r3, [r7, #3]
 800b246:	460b      	mov	r3, r1
 800b248:	70bb      	strb	r3, [r7, #2]
 800b24a:	4613      	mov	r3, r2
 800b24c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b252:	2300      	movs	r3, #0
 800b254:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b25c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b25e:	e025      	b.n	800b2ac <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	221a      	movs	r2, #26
 800b264:	fb02 f303 	mul.w	r3, r2, r3
 800b268:	3308      	adds	r3, #8
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	4413      	add	r3, r2
 800b26e:	3302      	adds	r3, #2
 800b270:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	795b      	ldrb	r3, [r3, #5]
 800b276:	78fa      	ldrb	r2, [r7, #3]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d002      	beq.n	800b282 <USBH_FindInterface+0x4e>
 800b27c:	78fb      	ldrb	r3, [r7, #3]
 800b27e:	2bff      	cmp	r3, #255	; 0xff
 800b280:	d111      	bne.n	800b2a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b286:	78ba      	ldrb	r2, [r7, #2]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d002      	beq.n	800b292 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b28c:	78bb      	ldrb	r3, [r7, #2]
 800b28e:	2bff      	cmp	r3, #255	; 0xff
 800b290:	d109      	bne.n	800b2a6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b296:	787a      	ldrb	r2, [r7, #1]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d002      	beq.n	800b2a2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b29c:	787b      	ldrb	r3, [r7, #1]
 800b29e:	2bff      	cmp	r3, #255	; 0xff
 800b2a0:	d101      	bne.n	800b2a6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b2a2:	7dfb      	ldrb	r3, [r7, #23]
 800b2a4:	e006      	b.n	800b2b4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b2a6:	7dfb      	ldrb	r3, [r7, #23]
 800b2a8:	3301      	adds	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b2ac:	7dfb      	ldrb	r3, [r7, #23]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d9d6      	bls.n	800b260 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b2b2:	23ff      	movs	r3, #255	; 0xff
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	371c      	adds	r7, #28
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2be:	4770      	bx	lr

0800b2c0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f003 ff0f 	bl	800f0ec <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f004 f826 	bl	800f322 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b2d6:	2300      	movs	r3, #0
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3708      	adds	r7, #8
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b088      	sub	sp, #32
 800b2e4:	af04      	add	r7, sp, #16
 800b2e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d102      	bne.n	800b302 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2203      	movs	r2, #3
 800b300:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	b2db      	uxtb	r3, r3
 800b308:	2b0b      	cmp	r3, #11
 800b30a:	f200 81b3 	bhi.w	800b674 <USBH_Process+0x394>
 800b30e:	a201      	add	r2, pc, #4	; (adr r2, 800b314 <USBH_Process+0x34>)
 800b310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b314:	0800b345 	.word	0x0800b345
 800b318:	0800b377 	.word	0x0800b377
 800b31c:	0800b3df 	.word	0x0800b3df
 800b320:	0800b60f 	.word	0x0800b60f
 800b324:	0800b675 	.word	0x0800b675
 800b328:	0800b483 	.word	0x0800b483
 800b32c:	0800b5b5 	.word	0x0800b5b5
 800b330:	0800b4b9 	.word	0x0800b4b9
 800b334:	0800b4d9 	.word	0x0800b4d9
 800b338:	0800b4f9 	.word	0x0800b4f9
 800b33c:	0800b527 	.word	0x0800b527
 800b340:	0800b5f7 	.word	0x0800b5f7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 8193 	beq.w	800b678 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2201      	movs	r2, #1
 800b356:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b358:	20c8      	movs	r0, #200	; 0xc8
 800b35a:	f004 f85f 	bl	800f41c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f003 ff1f 	bl	800f1a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b374:	e180      	b.n	800b678 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d107      	bne.n	800b390 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2202      	movs	r2, #2
 800b38c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b38e:	e182      	b.n	800b696 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b39a:	d914      	bls.n	800b3c6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d903      	bls.n	800b3be <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	220d      	movs	r2, #13
 800b3ba:	701a      	strb	r2, [r3, #0]
      break;
 800b3bc:	e16b      	b.n	800b696 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	701a      	strb	r2, [r3, #0]
      break;
 800b3c4:	e167      	b.n	800b696 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b3cc:	f103 020a 	add.w	r2, r3, #10
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b3d6:	200a      	movs	r0, #10
 800b3d8:	f004 f820 	bl	800f41c <USBH_Delay>
      break;
 800b3dc:	e15b      	b.n	800b696 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d005      	beq.n	800b3f4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b3ee:	2104      	movs	r1, #4
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b3f4:	2064      	movs	r0, #100	; 0x64
 800b3f6:	f004 f811 	bl	800f41c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f003 feac 	bl	800f158 <USBH_LL_GetSpeed>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2205      	movs	r2, #5
 800b40e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b410:	2100      	movs	r1, #0
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 f931 	bl	800c67a <USBH_AllocPipe>
 800b418:	4603      	mov	r3, r0
 800b41a:	461a      	mov	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b420:	2180      	movs	r1, #128	; 0x80
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 f929 	bl	800c67a <USBH_AllocPipe>
 800b428:	4603      	mov	r3, r0
 800b42a:	461a      	mov	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	7919      	ldrb	r1, [r3, #4]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b444:	b292      	uxth	r2, r2
 800b446:	9202      	str	r2, [sp, #8]
 800b448:	2200      	movs	r2, #0
 800b44a:	9201      	str	r2, [sp, #4]
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	4603      	mov	r3, r0
 800b450:	2280      	movs	r2, #128	; 0x80
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f001 f8e2 	bl	800c61c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7959      	ldrb	r1, [r3, #5]
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b468:	687a      	ldr	r2, [r7, #4]
 800b46a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b46c:	b292      	uxth	r2, r2
 800b46e:	9202      	str	r2, [sp, #8]
 800b470:	2200      	movs	r2, #0
 800b472:	9201      	str	r2, [sp, #4]
 800b474:	9300      	str	r3, [sp, #0]
 800b476:	4603      	mov	r3, r0
 800b478:	2200      	movs	r2, #0
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f001 f8ce 	bl	800c61c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b480:	e109      	b.n	800b696 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 f90c 	bl	800b6a0 <USBH_HandleEnum>
 800b488:	4603      	mov	r3, r0
 800b48a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b48c:	7bbb      	ldrb	r3, [r7, #14]
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b00      	cmp	r3, #0
 800b492:	f040 80f3 	bne.w	800b67c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d103      	bne.n	800b4b0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2208      	movs	r2, #8
 800b4ac:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b4ae:	e0e5      	b.n	800b67c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2207      	movs	r2, #7
 800b4b4:	701a      	strb	r2, [r3, #0]
      break;
 800b4b6:	e0e1      	b.n	800b67c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	f000 80de 	beq.w	800b680 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2208      	movs	r2, #8
 800b4d4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b4d6:	e0d3      	b.n	800b680 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fc20 	bl	800bd28 <USBH_SetCfg>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f040 80ca 	bne.w	800b684 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2209      	movs	r2, #9
 800b4f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b4f6:	e0c5      	b.n	800b684 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b4fe:	f003 0320 	and.w	r3, r3, #32
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00b      	beq.n	800b51e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b506:	2101      	movs	r1, #1
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fc30 	bl	800bd6e <USBH_SetFeature>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	f040 80b9 	bne.w	800b688 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	220a      	movs	r2, #10
 800b51a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b51c:	e0b4      	b.n	800b688 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	220a      	movs	r2, #10
 800b522:	701a      	strb	r2, [r3, #0]
      break;
 800b524:	e0b0      	b.n	800b688 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	f000 80ad 	beq.w	800b68c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b53a:	2300      	movs	r3, #0
 800b53c:	73fb      	strb	r3, [r7, #15]
 800b53e:	e016      	b.n	800b56e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b540:	7bfa      	ldrb	r2, [r7, #15]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	32de      	adds	r2, #222	; 0xde
 800b546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b54a:	791a      	ldrb	r2, [r3, #4]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b552:	429a      	cmp	r2, r3
 800b554:	d108      	bne.n	800b568 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b556:	7bfa      	ldrb	r2, [r7, #15]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	32de      	adds	r2, #222	; 0xde
 800b55c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b566:	e005      	b.n	800b574 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	3301      	adds	r3, #1
 800b56c:	73fb      	strb	r3, [r7, #15]
 800b56e:	7bfb      	ldrb	r3, [r7, #15]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d0e5      	beq.n	800b540 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d016      	beq.n	800b5ac <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	4798      	blx	r3
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d109      	bne.n	800b5a4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2206      	movs	r2, #6
 800b594:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b59c:	2103      	movs	r1, #3
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5a2:	e073      	b.n	800b68c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	220d      	movs	r2, #13
 800b5a8:	701a      	strb	r2, [r3, #0]
      break;
 800b5aa:	e06f      	b.n	800b68c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	220d      	movs	r2, #13
 800b5b0:	701a      	strb	r2, [r3, #0]
      break;
 800b5b2:	e06b      	b.n	800b68c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d017      	beq.n	800b5ee <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	4798      	blx	r3
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b5ce:	7bbb      	ldrb	r3, [r7, #14]
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d103      	bne.n	800b5de <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	220b      	movs	r2, #11
 800b5da:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b5dc:	e058      	b.n	800b690 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b5de:	7bbb      	ldrb	r3, [r7, #14]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d154      	bne.n	800b690 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	220d      	movs	r2, #13
 800b5ea:	701a      	strb	r2, [r3, #0]
      break;
 800b5ec:	e050      	b.n	800b690 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	220d      	movs	r2, #13
 800b5f2:	701a      	strb	r2, [r3, #0]
      break;
 800b5f4:	e04c      	b.n	800b690 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d049      	beq.n	800b694 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
      }
      break;
 800b60c:	e042      	b.n	800b694 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff fd72 	bl	800b100 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d009      	beq.n	800b63a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b62c:	68db      	ldr	r3, [r3, #12]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d005      	beq.n	800b650 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b64a:	2105      	movs	r1, #5
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d107      	bne.n	800b66c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7ff fe2b 	bl	800b2c0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b66a:	e014      	b.n	800b696 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f003 fd3d 	bl	800f0ec <USBH_LL_Start>
      break;
 800b672:	e010      	b.n	800b696 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b674:	bf00      	nop
 800b676:	e00e      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b678:	bf00      	nop
 800b67a:	e00c      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b67c:	bf00      	nop
 800b67e:	e00a      	b.n	800b696 <USBH_Process+0x3b6>
    break;
 800b680:	bf00      	nop
 800b682:	e008      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b684:	bf00      	nop
 800b686:	e006      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b688:	bf00      	nop
 800b68a:	e004      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b68c:	bf00      	nop
 800b68e:	e002      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b690:	bf00      	nop
 800b692:	e000      	b.n	800b696 <USBH_Process+0x3b6>
      break;
 800b694:	bf00      	nop
  }
  return USBH_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3710      	adds	r7, #16
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}

0800b6a0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b088      	sub	sp, #32
 800b6a4:	af04      	add	r7, sp, #16
 800b6a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	785b      	ldrb	r3, [r3, #1]
 800b6b4:	2b07      	cmp	r3, #7
 800b6b6:	f200 81c1 	bhi.w	800ba3c <USBH_HandleEnum+0x39c>
 800b6ba:	a201      	add	r2, pc, #4	; (adr r2, 800b6c0 <USBH_HandleEnum+0x20>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6e1 	.word	0x0800b6e1
 800b6c4:	0800b79f 	.word	0x0800b79f
 800b6c8:	0800b809 	.word	0x0800b809
 800b6cc:	0800b897 	.word	0x0800b897
 800b6d0:	0800b901 	.word	0x0800b901
 800b6d4:	0800b971 	.word	0x0800b971
 800b6d8:	0800b9b7 	.word	0x0800b9b7
 800b6dc:	0800b9fd 	.word	0x0800b9fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b6e0:	2108      	movs	r1, #8
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f000 fa50 	bl	800bb88 <USBH_Get_DevDesc>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6ec:	7bbb      	ldrb	r3, [r7, #14]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d130      	bne.n	800b754 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	7919      	ldrb	r1, [r3, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b712:	687a      	ldr	r2, [r7, #4]
 800b714:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b716:	b292      	uxth	r2, r2
 800b718:	9202      	str	r2, [sp, #8]
 800b71a:	2200      	movs	r2, #0
 800b71c:	9201      	str	r2, [sp, #4]
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	4603      	mov	r3, r0
 800b722:	2280      	movs	r2, #128	; 0x80
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 ff79 	bl	800c61c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	7959      	ldrb	r1, [r3, #5]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b73e:	b292      	uxth	r2, r2
 800b740:	9202      	str	r2, [sp, #8]
 800b742:	2200      	movs	r2, #0
 800b744:	9201      	str	r2, [sp, #4]
 800b746:	9300      	str	r3, [sp, #0]
 800b748:	4603      	mov	r3, r0
 800b74a:	2200      	movs	r2, #0
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 ff65 	bl	800c61c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b752:	e175      	b.n	800ba40 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b754:	7bbb      	ldrb	r3, [r7, #14]
 800b756:	2b03      	cmp	r3, #3
 800b758:	f040 8172 	bne.w	800ba40 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b762:	3301      	adds	r3, #1
 800b764:	b2da      	uxtb	r2, r3
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b772:	2b03      	cmp	r3, #3
 800b774:	d903      	bls.n	800b77e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	220d      	movs	r2, #13
 800b77a:	701a      	strb	r2, [r3, #0]
      break;
 800b77c:	e160      	b.n	800ba40 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	795b      	ldrb	r3, [r3, #5]
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f000 ff99 	bl	800c6bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	791b      	ldrb	r3, [r3, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 ff93 	bl	800c6bc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2200      	movs	r2, #0
 800b79a:	701a      	strb	r2, [r3, #0]
      break;
 800b79c:	e150      	b.n	800ba40 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b79e:	2112      	movs	r1, #18
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f000 f9f1 	bl	800bb88 <USBH_Get_DevDesc>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7aa:	7bbb      	ldrb	r3, [r7, #14]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d103      	bne.n	800b7b8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2202      	movs	r2, #2
 800b7b4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b7b6:	e145      	b.n	800ba44 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7b8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	f040 8142 	bne.w	800ba44 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	b2da      	uxtb	r2, r3
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b7d6:	2b03      	cmp	r3, #3
 800b7d8:	d903      	bls.n	800b7e2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	220d      	movs	r2, #13
 800b7de:	701a      	strb	r2, [r3, #0]
      break;
 800b7e0:	e130      	b.n	800ba44 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	795b      	ldrb	r3, [r3, #5]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 ff67 	bl	800c6bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	791b      	ldrb	r3, [r3, #4]
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 ff61 	bl	800c6bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	701a      	strb	r2, [r3, #0]
      break;
 800b806:	e11d      	b.n	800ba44 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b808:	2101      	movs	r1, #1
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fa68 	bl	800bce0 <USBH_SetAddress>
 800b810:	4603      	mov	r3, r0
 800b812:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d132      	bne.n	800b880 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b81a:	2002      	movs	r0, #2
 800b81c:	f003 fdfe 	bl	800f41c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2203      	movs	r2, #3
 800b82c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	7919      	ldrb	r1, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b842:	b292      	uxth	r2, r2
 800b844:	9202      	str	r2, [sp, #8]
 800b846:	2200      	movs	r2, #0
 800b848:	9201      	str	r2, [sp, #4]
 800b84a:	9300      	str	r3, [sp, #0]
 800b84c:	4603      	mov	r3, r0
 800b84e:	2280      	movs	r2, #128	; 0x80
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 fee3 	bl	800c61c <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	7959      	ldrb	r1, [r3, #5]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b866:	687a      	ldr	r2, [r7, #4]
 800b868:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b86a:	b292      	uxth	r2, r2
 800b86c:	9202      	str	r2, [sp, #8]
 800b86e:	2200      	movs	r2, #0
 800b870:	9201      	str	r2, [sp, #4]
 800b872:	9300      	str	r3, [sp, #0]
 800b874:	4603      	mov	r3, r0
 800b876:	2200      	movs	r2, #0
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 fecf 	bl	800c61c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b87e:	e0e3      	b.n	800ba48 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b880:	7bbb      	ldrb	r3, [r7, #14]
 800b882:	2b03      	cmp	r3, #3
 800b884:	f040 80e0 	bne.w	800ba48 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	220d      	movs	r2, #13
 800b88c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	705a      	strb	r2, [r3, #1]
      break;
 800b894:	e0d8      	b.n	800ba48 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b896:	2109      	movs	r1, #9
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f99d 	bl	800bbd8 <USBH_Get_CfgDesc>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d103      	bne.n	800b8b0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2204      	movs	r2, #4
 800b8ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b8ae:	e0cd      	b.n	800ba4c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8b0:	7bbb      	ldrb	r3, [r7, #14]
 800b8b2:	2b03      	cmp	r3, #3
 800b8b4:	f040 80ca 	bne.w	800ba4c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8be:	3301      	adds	r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	d903      	bls.n	800b8da <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	220d      	movs	r2, #13
 800b8d6:	701a      	strb	r2, [r3, #0]
      break;
 800b8d8:	e0b8      	b.n	800ba4c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	795b      	ldrb	r3, [r3, #5]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 feeb 	bl	800c6bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	791b      	ldrb	r3, [r3, #4]
 800b8ea:	4619      	mov	r1, r3
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f000 fee5 	bl	800c6bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	701a      	strb	r2, [r3, #0]
      break;
 800b8fe:	e0a5      	b.n	800ba4c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f965 	bl	800bbd8 <USBH_Get_CfgDesc>
 800b90e:	4603      	mov	r3, r0
 800b910:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b912:	7bbb      	ldrb	r3, [r7, #14]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d103      	bne.n	800b920 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2205      	movs	r2, #5
 800b91c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b91e:	e097      	b.n	800ba50 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b920:	7bbb      	ldrb	r3, [r7, #14]
 800b922:	2b03      	cmp	r3, #3
 800b924:	f040 8094 	bne.w	800ba50 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b92e:	3301      	adds	r3, #1
 800b930:	b2da      	uxtb	r2, r3
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b93e:	2b03      	cmp	r3, #3
 800b940:	d903      	bls.n	800b94a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	220d      	movs	r2, #13
 800b946:	701a      	strb	r2, [r3, #0]
      break;
 800b948:	e082      	b.n	800ba50 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	795b      	ldrb	r3, [r3, #5]
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 feb3 	bl	800c6bc <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	791b      	ldrb	r3, [r3, #4]
 800b95a:	4619      	mov	r1, r3
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 fead 	bl	800c6bc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	701a      	strb	r2, [r3, #0]
      break;
 800b96e:	e06f      	b.n	800ba50 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b976:	2b00      	cmp	r3, #0
 800b978:	d019      	beq.n	800b9ae <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b986:	23ff      	movs	r3, #255	; 0xff
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f949 	bl	800bc20 <USBH_Get_StringDesc>
 800b98e:	4603      	mov	r3, r0
 800b990:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d103      	bne.n	800b9a0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2206      	movs	r2, #6
 800b99c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b99e:	e059      	b.n	800ba54 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
 800b9a2:	2b03      	cmp	r3, #3
 800b9a4:	d156      	bne.n	800ba54 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2206      	movs	r2, #6
 800b9aa:	705a      	strb	r2, [r3, #1]
      break;
 800b9ac:	e052      	b.n	800ba54 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2206      	movs	r2, #6
 800b9b2:	705a      	strb	r2, [r3, #1]
      break;
 800b9b4:	e04e      	b.n	800ba54 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d019      	beq.n	800b9f4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b9cc:	23ff      	movs	r3, #255	; 0xff
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f926 	bl	800bc20 <USBH_Get_StringDesc>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d103      	bne.n	800b9e6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2207      	movs	r2, #7
 800b9e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b9e4:	e038      	b.n	800ba58 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9e6:	7bbb      	ldrb	r3, [r7, #14]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d135      	bne.n	800ba58 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2207      	movs	r2, #7
 800b9f0:	705a      	strb	r2, [r3, #1]
      break;
 800b9f2:	e031      	b.n	800ba58 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2207      	movs	r2, #7
 800b9f8:	705a      	strb	r2, [r3, #1]
      break;
 800b9fa:	e02d      	b.n	800ba58 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d017      	beq.n	800ba36 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ba12:	23ff      	movs	r3, #255	; 0xff
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 f903 	bl	800bc20 <USBH_Get_StringDesc>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d102      	bne.n	800ba2a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ba28:	e018      	b.n	800ba5c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ba2a:	7bbb      	ldrb	r3, [r7, #14]
 800ba2c:	2b03      	cmp	r3, #3
 800ba2e:	d115      	bne.n	800ba5c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
      break;
 800ba34:	e012      	b.n	800ba5c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3a:	e00f      	b.n	800ba5c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ba3c:	bf00      	nop
 800ba3e:	e00e      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba40:	bf00      	nop
 800ba42:	e00c      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba44:	bf00      	nop
 800ba46:	e00a      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba48:	bf00      	nop
 800ba4a:	e008      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba4c:	bf00      	nop
 800ba4e:	e006      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba50:	bf00      	nop
 800ba52:	e004      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba54:	bf00      	nop
 800ba56:	e002      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba58:	bf00      	nop
 800ba5a:	e000      	b.n	800ba5e <USBH_HandleEnum+0x3be>
      break;
 800ba5c:	bf00      	nop
  }
  return Status;
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3710      	adds	r7, #16
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b083      	sub	sp, #12
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ba7a:	bf00      	nop
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ba86:	b580      	push	{r7, lr}
 800ba88:	b082      	sub	sp, #8
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ba94:	1c5a      	adds	r2, r3, #1
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f804 	bl	800baaa <USBH_HandleSof>
}
 800baa2:	bf00      	nop
 800baa4:	3708      	adds	r7, #8
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b082      	sub	sp, #8
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	781b      	ldrb	r3, [r3, #0]
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	2b0b      	cmp	r3, #11
 800baba:	d10a      	bne.n	800bad2 <USBH_HandleSof+0x28>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d005      	beq.n	800bad2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
  }
}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800bada:	b480      	push	{r7}
 800badc:	b083      	sub	sp, #12
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2201      	movs	r2, #1
 800bae6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800baea:	bf00      	nop
}
 800baec:	370c      	adds	r7, #12
 800baee:	46bd      	mov	sp, r7
 800baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf4:	4770      	bx	lr

0800baf6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800baf6:	b480      	push	{r7}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800bb06:	bf00      	nop
}
 800bb08:	370c      	adds	r7, #12
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b083      	sub	sp, #12
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f003 fade 	bl	800f122 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	791b      	ldrb	r3, [r3, #4]
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 fda5 	bl	800c6bc <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	795b      	ldrb	r3, [r3, #5]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fd9f 	bl	800c6bc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af02      	add	r7, sp, #8
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	460b      	mov	r3, r1
 800bb92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	9300      	str	r3, [sp, #0]
 800bba0:	4613      	mov	r3, r2
 800bba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bba6:	2100      	movs	r1, #0
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f864 	bl	800bc76 <USBH_GetDescriptor>
 800bbae:	4603      	mov	r3, r0
 800bbb0:	73fb      	strb	r3, [r7, #15]
 800bbb2:	7bfb      	ldrb	r3, [r7, #15]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f203 3026 	addw	r0, r3, #806	; 0x326
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bbc4:	78fa      	ldrb	r2, [r7, #3]
 800bbc6:	b292      	uxth	r2, r2
 800bbc8:	4619      	mov	r1, r3
 800bbca:	f000 f918 	bl	800bdfe <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800bbce:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af02      	add	r7, sp, #8
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	331c      	adds	r3, #28
 800bbe8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbea:	887b      	ldrh	r3, [r7, #2]
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f000 f83d 	bl	800bc76 <USBH_GetDescriptor>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	72fb      	strb	r3, [r7, #11]
 800bc00:	7afb      	ldrb	r3, [r7, #11]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d107      	bne.n	800bc16 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800bc0c:	887a      	ldrh	r2, [r7, #2]
 800bc0e:	68f9      	ldr	r1, [r7, #12]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 f964 	bl	800bede <USBH_ParseCfgDesc>
  }

  return status;
 800bc16:	7afb      	ldrb	r3, [r7, #11]
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	3710      	adds	r7, #16
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b088      	sub	sp, #32
 800bc24:	af02      	add	r7, sp, #8
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	607a      	str	r2, [r7, #4]
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	72fb      	strb	r3, [r7, #11]
 800bc30:	4613      	mov	r3, r2
 800bc32:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800bc34:	7afb      	ldrb	r3, [r7, #11]
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800bc3c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800bc44:	893b      	ldrh	r3, [r7, #8]
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 f812 	bl	800bc76 <USBH_GetDescriptor>
 800bc52:	4603      	mov	r3, r0
 800bc54:	75fb      	strb	r3, [r7, #23]
 800bc56:	7dfb      	ldrb	r3, [r7, #23]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d107      	bne.n	800bc6c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800bc62:	893a      	ldrh	r2, [r7, #8]
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 fa37 	bl	800c0da <USBH_ParseStringDesc>
  }

  return status;
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3718      	adds	r7, #24
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	60f8      	str	r0, [r7, #12]
 800bc7e:	607b      	str	r3, [r7, #4]
 800bc80:	460b      	mov	r3, r1
 800bc82:	72fb      	strb	r3, [r7, #11]
 800bc84:	4613      	mov	r3, r2
 800bc86:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	789b      	ldrb	r3, [r3, #2]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d11c      	bne.n	800bcca <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc90:	7afb      	ldrb	r3, [r7, #11]
 800bc92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bc96:	b2da      	uxtb	r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2206      	movs	r2, #6
 800bca0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	893a      	ldrh	r2, [r7, #8]
 800bca6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bca8:	893b      	ldrh	r3, [r7, #8]
 800bcaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bcae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcb2:	d104      	bne.n	800bcbe <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f240 4209 	movw	r2, #1033	; 0x409
 800bcba:	829a      	strh	r2, [r3, #20]
 800bcbc:	e002      	b.n	800bcc4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	8b3a      	ldrh	r2, [r7, #24]
 800bcc8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bcca:	8b3b      	ldrh	r3, [r7, #24]
 800bccc:	461a      	mov	r2, r3
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	68f8      	ldr	r0, [r7, #12]
 800bcd2:	f000 fa50 	bl	800c176 <USBH_CtlReq>
 800bcd6:	4603      	mov	r3, r0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	789b      	ldrb	r3, [r3, #2]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d10f      	bne.n	800bd14 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2205      	movs	r2, #5
 800bcfe:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bd00:	78fb      	ldrb	r3, [r7, #3]
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd14:	2200      	movs	r2, #0
 800bd16:	2100      	movs	r1, #0
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f000 fa2c 	bl	800c176 <USBH_CtlReq>
 800bd1e:	4603      	mov	r3, r0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3708      	adds	r7, #8
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	789b      	ldrb	r3, [r3, #2]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d10e      	bne.n	800bd5a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2209      	movs	r2, #9
 800bd46:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	887a      	ldrh	r2, [r7, #2]
 800bd4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	2100      	movs	r1, #0
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 fa09 	bl	800c176 <USBH_CtlReq>
 800bd64:	4603      	mov	r3, r0
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3708      	adds	r7, #8
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}

0800bd6e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd6e:	b580      	push	{r7, lr}
 800bd70:	b082      	sub	sp, #8
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	460b      	mov	r3, r1
 800bd78:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	789b      	ldrb	r3, [r3, #2]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d10f      	bne.n	800bda2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd8e:	78fb      	ldrb	r3, [r7, #3]
 800bd90:	b29a      	uxth	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bda2:	2200      	movs	r2, #0
 800bda4:	2100      	movs	r1, #0
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f9e5 	bl	800c176 <USBH_CtlReq>
 800bdac:	4603      	mov	r3, r0
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b082      	sub	sp, #8
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	789b      	ldrb	r3, [r3, #2]
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d10f      	bne.n	800bdea <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	2202      	movs	r2, #2
 800bdce:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bddc:	78fb      	ldrb	r3, [r7, #3]
 800bdde:	b29a      	uxth	r2, r3
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bdea:	2200      	movs	r2, #0
 800bdec:	2100      	movs	r1, #0
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f9c1 	bl	800c176 <USBH_CtlReq>
 800bdf4:	4603      	mov	r3, r0
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3708      	adds	r7, #8
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b085      	sub	sp, #20
 800be02:	af00      	add	r7, sp, #0
 800be04:	60f8      	str	r0, [r7, #12]
 800be06:	60b9      	str	r1, [r7, #8]
 800be08:	4613      	mov	r3, r2
 800be0a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	781a      	ldrb	r2, [r3, #0]
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	785a      	ldrb	r2, [r3, #1]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	3302      	adds	r3, #2
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	b29a      	uxth	r2, r3
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	3303      	adds	r3, #3
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	b29b      	uxth	r3, r3
 800be2c:	021b      	lsls	r3, r3, #8
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4313      	orrs	r3, r2
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	791a      	ldrb	r2, [r3, #4]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	795a      	ldrb	r2, [r3, #5]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	799a      	ldrb	r2, [r3, #6]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	79da      	ldrb	r2, [r3, #7]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800be58:	88fb      	ldrh	r3, [r7, #6]
 800be5a:	2b08      	cmp	r3, #8
 800be5c:	d939      	bls.n	800bed2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	3308      	adds	r3, #8
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	b29a      	uxth	r2, r3
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	3309      	adds	r3, #9
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	021b      	lsls	r3, r3, #8
 800be70:	b29b      	uxth	r3, r3
 800be72:	4313      	orrs	r3, r2
 800be74:	b29a      	uxth	r2, r3
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	330a      	adds	r3, #10
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	b29a      	uxth	r2, r3
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	330b      	adds	r3, #11
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	021b      	lsls	r3, r3, #8
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	4313      	orrs	r3, r2
 800be90:	b29a      	uxth	r2, r3
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	330c      	adds	r3, #12
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	b29a      	uxth	r2, r3
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	330d      	adds	r3, #13
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	021b      	lsls	r3, r3, #8
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	4313      	orrs	r3, r2
 800beac:	b29a      	uxth	r2, r3
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	7b9a      	ldrb	r2, [r3, #14]
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	7bda      	ldrb	r2, [r3, #15]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	7c1a      	ldrb	r2, [r3, #16]
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800beca:	68bb      	ldr	r3, [r7, #8]
 800becc:	7c5a      	ldrb	r2, [r3, #17]
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	745a      	strb	r2, [r3, #17]
  }
}
 800bed2:	bf00      	nop
 800bed4:	3714      	adds	r7, #20
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr

0800bede <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b08a      	sub	sp, #40	; 0x28
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	60b9      	str	r1, [r7, #8]
 800bee8:	4613      	mov	r3, r2
 800beea:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	781a      	ldrb	r2, [r3, #0]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	785a      	ldrb	r2, [r3, #1]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	3302      	adds	r3, #2
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	b29a      	uxth	r2, r3
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	3303      	adds	r3, #3
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	021b      	lsls	r3, r3, #8
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	4313      	orrs	r3, r2
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	791a      	ldrb	r2, [r3, #4]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bf34:	68bb      	ldr	r3, [r7, #8]
 800bf36:	795a      	ldrb	r2, [r3, #5]
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	799a      	ldrb	r2, [r3, #6]
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	79da      	ldrb	r2, [r3, #7]
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	7a1a      	ldrb	r2, [r3, #8]
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bf54:	88fb      	ldrh	r3, [r7, #6]
 800bf56:	2b09      	cmp	r3, #9
 800bf58:	d95f      	bls.n	800c01a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bf5a:	2309      	movs	r3, #9
 800bf5c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bf62:	e051      	b.n	800c008 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bf64:	f107 0316 	add.w	r3, r7, #22
 800bf68:	4619      	mov	r1, r3
 800bf6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf6c:	f000 f8e8 	bl	800c140 <USBH_GetNextDesc>
 800bf70:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bf72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf74:	785b      	ldrb	r3, [r3, #1]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d146      	bne.n	800c008 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bf7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf7e:	221a      	movs	r2, #26
 800bf80:	fb02 f303 	mul.w	r3, r2, r3
 800bf84:	3308      	adds	r3, #8
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	4413      	add	r3, r2
 800bf8a:	3302      	adds	r3, #2
 800bf8c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bf8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bf90:	69f8      	ldr	r0, [r7, #28]
 800bf92:	f000 f846 	bl	800c022 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bf96:	2300      	movs	r3, #0
 800bf98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bfa0:	e022      	b.n	800bfe8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfa2:	f107 0316 	add.w	r3, r7, #22
 800bfa6:	4619      	mov	r1, r3
 800bfa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bfaa:	f000 f8c9 	bl	800c140 <USBH_GetNextDesc>
 800bfae:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	2b05      	cmp	r3, #5
 800bfb6:	d117      	bne.n	800bfe8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bfb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfbc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bfc0:	3201      	adds	r2, #1
 800bfc2:	00d2      	lsls	r2, r2, #3
 800bfc4:	211a      	movs	r1, #26
 800bfc6:	fb01 f303 	mul.w	r3, r1, r3
 800bfca:	4413      	add	r3, r2
 800bfcc:	3308      	adds	r3, #8
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bfd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bfd8:	69b8      	ldr	r0, [r7, #24]
 800bfda:	f000 f851 	bl	800c080 <USBH_ParseEPDesc>
            ep_ix++;
 800bfde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	791b      	ldrb	r3, [r3, #4]
 800bfec:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d204      	bcs.n	800bffe <USBH_ParseCfgDesc+0x120>
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	885a      	ldrh	r2, [r3, #2]
 800bff8:	8afb      	ldrh	r3, [r7, #22]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d8d1      	bhi.n	800bfa2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bffe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c002:	3301      	adds	r3, #1
 800c004:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c008:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d804      	bhi.n	800c01a <USBH_ParseCfgDesc+0x13c>
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	885a      	ldrh	r2, [r3, #2]
 800c014:	8afb      	ldrh	r3, [r7, #22]
 800c016:	429a      	cmp	r2, r3
 800c018:	d8a4      	bhi.n	800bf64 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800c01a:	bf00      	nop
 800c01c:	3728      	adds	r7, #40	; 0x28
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800c022:	b480      	push	{r7}
 800c024:	b083      	sub	sp, #12
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
 800c02a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781a      	ldrb	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	785a      	ldrb	r2, [r3, #1]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	789a      	ldrb	r2, [r3, #2]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	78da      	ldrb	r2, [r3, #3]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	791a      	ldrb	r2, [r3, #4]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	795a      	ldrb	r2, [r3, #5]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	799a      	ldrb	r2, [r3, #6]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	79da      	ldrb	r2, [r3, #7]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	7a1a      	ldrb	r2, [r3, #8]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	721a      	strb	r2, [r3, #8]
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781a      	ldrb	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	785a      	ldrb	r2, [r3, #1]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	789a      	ldrb	r2, [r3, #2]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	78da      	ldrb	r2, [r3, #3]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	3305      	adds	r3, #5
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	021b      	lsls	r3, r3, #8
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	b29a      	uxth	r2, r3
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	799a      	ldrb	r2, [r3, #6]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	719a      	strb	r2, [r3, #6]
}
 800c0ce:	bf00      	nop
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c0da:	b480      	push	{r7}
 800c0dc:	b087      	sub	sp, #28
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	60f8      	str	r0, [r7, #12]
 800c0e2:	60b9      	str	r1, [r7, #8]
 800c0e4:	4613      	mov	r3, r2
 800c0e6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d120      	bne.n	800c134 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	1e9a      	subs	r2, r3, #2
 800c0f8:	88fb      	ldrh	r3, [r7, #6]
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	bf28      	it	cs
 800c0fe:	4613      	movcs	r3, r2
 800c100:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3302      	adds	r3, #2
 800c106:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c108:	2300      	movs	r3, #0
 800c10a:	82fb      	strh	r3, [r7, #22]
 800c10c:	e00b      	b.n	800c126 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c10e:	8afb      	ldrh	r3, [r7, #22]
 800c110:	68fa      	ldr	r2, [r7, #12]
 800c112:	4413      	add	r3, r2
 800c114:	781a      	ldrb	r2, [r3, #0]
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	3301      	adds	r3, #1
 800c11e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c120:	8afb      	ldrh	r3, [r7, #22]
 800c122:	3302      	adds	r3, #2
 800c124:	82fb      	strh	r3, [r7, #22]
 800c126:	8afa      	ldrh	r2, [r7, #22]
 800c128:	8abb      	ldrh	r3, [r7, #20]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d3ef      	bcc.n	800c10e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
  }
}
 800c134:	bf00      	nop
 800c136:	371c      	adds	r7, #28
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800c140:	b480      	push	{r7}
 800c142:	b085      	sub	sp, #20
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	881a      	ldrh	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	b29b      	uxth	r3, r3
 800c154:	4413      	add	r3, r2
 800c156:	b29a      	uxth	r2, r3
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4413      	add	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c168:	68fb      	ldr	r3, [r7, #12]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b086      	sub	sp, #24
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60f8      	str	r0, [r7, #12]
 800c17e:	60b9      	str	r1, [r7, #8]
 800c180:	4613      	mov	r3, r2
 800c182:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c184:	2301      	movs	r3, #1
 800c186:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	789b      	ldrb	r3, [r3, #2]
 800c18c:	2b01      	cmp	r3, #1
 800c18e:	d002      	beq.n	800c196 <USBH_CtlReq+0x20>
 800c190:	2b02      	cmp	r3, #2
 800c192:	d00f      	beq.n	800c1b4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c194:	e027      	b.n	800c1e6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	68ba      	ldr	r2, [r7, #8]
 800c19a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	88fa      	ldrh	r2, [r7, #6]
 800c1a0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2202      	movs	r2, #2
 800c1ac:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c1b2:	e018      	b.n	800c1e6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c1b4:	68f8      	ldr	r0, [r7, #12]
 800c1b6:	f000 f81b 	bl	800c1f0 <USBH_HandleControl>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d002      	beq.n	800c1ca <USBH_CtlReq+0x54>
 800c1c4:	7dfb      	ldrb	r3, [r7, #23]
 800c1c6:	2b03      	cmp	r3, #3
 800c1c8:	d106      	bne.n	800c1d8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	761a      	strb	r2, [r3, #24]
      break;
 800c1d6:	e005      	b.n	800c1e4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d102      	bne.n	800c1e4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	709a      	strb	r2, [r3, #2]
      break;
 800c1e4:	bf00      	nop
  }
  return status;
 800c1e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3718      	adds	r7, #24
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af02      	add	r7, sp, #8
 800c1f6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	7e1b      	ldrb	r3, [r3, #24]
 800c204:	3b01      	subs	r3, #1
 800c206:	2b0a      	cmp	r3, #10
 800c208:	f200 8158 	bhi.w	800c4bc <USBH_HandleControl+0x2cc>
 800c20c:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <USBH_HandleControl+0x24>)
 800c20e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c212:	bf00      	nop
 800c214:	0800c241 	.word	0x0800c241
 800c218:	0800c25b 	.word	0x0800c25b
 800c21c:	0800c2c5 	.word	0x0800c2c5
 800c220:	0800c2eb 	.word	0x0800c2eb
 800c224:	0800c323 	.word	0x0800c323
 800c228:	0800c34f 	.word	0x0800c34f
 800c22c:	0800c3a1 	.word	0x0800c3a1
 800c230:	0800c3c3 	.word	0x0800c3c3
 800c234:	0800c3ff 	.word	0x0800c3ff
 800c238:	0800c427 	.word	0x0800c427
 800c23c:	0800c465 	.word	0x0800c465
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f103 0110 	add.w	r1, r3, #16
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	795b      	ldrb	r3, [r3, #5]
 800c24a:	461a      	mov	r2, r3
 800c24c:	6878      	ldr	r0, [r7, #4]
 800c24e:	f000 f945 	bl	800c4dc <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2202      	movs	r2, #2
 800c256:	761a      	strb	r2, [r3, #24]
      break;
 800c258:	e13b      	b.n	800c4d2 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	795b      	ldrb	r3, [r3, #5]
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f003 f84b 	bl	800f2fc <USBH_LL_GetURBState>
 800c266:	4603      	mov	r3, r0
 800c268:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c26a:	7bbb      	ldrb	r3, [r7, #14]
 800c26c:	2b01      	cmp	r3, #1
 800c26e:	d11e      	bne.n	800c2ae <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7c1b      	ldrb	r3, [r3, #16]
 800c274:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c278:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	8adb      	ldrh	r3, [r3, #22]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c282:	7b7b      	ldrb	r3, [r7, #13]
 800c284:	2b80      	cmp	r3, #128	; 0x80
 800c286:	d103      	bne.n	800c290 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2203      	movs	r2, #3
 800c28c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c28e:	e117      	b.n	800c4c0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2205      	movs	r2, #5
 800c294:	761a      	strb	r2, [r3, #24]
      break;
 800c296:	e113      	b.n	800c4c0 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800c298:	7b7b      	ldrb	r3, [r7, #13]
 800c29a:	2b80      	cmp	r3, #128	; 0x80
 800c29c:	d103      	bne.n	800c2a6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2209      	movs	r2, #9
 800c2a2:	761a      	strb	r2, [r3, #24]
      break;
 800c2a4:	e10c      	b.n	800c4c0 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2207      	movs	r2, #7
 800c2aa:	761a      	strb	r2, [r3, #24]
      break;
 800c2ac:	e108      	b.n	800c4c0 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c2ae:	7bbb      	ldrb	r3, [r7, #14]
 800c2b0:	2b04      	cmp	r3, #4
 800c2b2:	d003      	beq.n	800c2bc <USBH_HandleControl+0xcc>
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	f040 8102 	bne.w	800c4c0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	220b      	movs	r2, #11
 800c2c0:	761a      	strb	r2, [r3, #24]
      break;
 800c2c2:	e0fd      	b.n	800c4c0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c2ca:	b29a      	uxth	r2, r3
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6899      	ldr	r1, [r3, #8]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	899a      	ldrh	r2, [r3, #12]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	791b      	ldrb	r3, [r3, #4]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f000 f93c 	bl	800c55a <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2204      	movs	r2, #4
 800c2e6:	761a      	strb	r2, [r3, #24]
      break;
 800c2e8:	e0f3      	b.n	800c4d2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	791b      	ldrb	r3, [r3, #4]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f003 f803 	bl	800f2fc <USBH_LL_GetURBState>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c2fa:	7bbb      	ldrb	r3, [r7, #14]
 800c2fc:	2b01      	cmp	r3, #1
 800c2fe:	d102      	bne.n	800c306 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2209      	movs	r2, #9
 800c304:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c306:	7bbb      	ldrb	r3, [r7, #14]
 800c308:	2b05      	cmp	r3, #5
 800c30a:	d102      	bne.n	800c312 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c30c:	2303      	movs	r3, #3
 800c30e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c310:	e0d8      	b.n	800c4c4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c312:	7bbb      	ldrb	r3, [r7, #14]
 800c314:	2b04      	cmp	r3, #4
 800c316:	f040 80d5 	bne.w	800c4c4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	220b      	movs	r2, #11
 800c31e:	761a      	strb	r2, [r3, #24]
      break;
 800c320:	e0d0      	b.n	800c4c4 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6899      	ldr	r1, [r3, #8]
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	899a      	ldrh	r2, [r3, #12]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	7958      	ldrb	r0, [r3, #5]
 800c32e:	2301      	movs	r3, #1
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	4603      	mov	r3, r0
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f000 f8eb 	bl	800c510 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c340:	b29a      	uxth	r2, r3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2206      	movs	r2, #6
 800c34a:	761a      	strb	r2, [r3, #24]
      break;
 800c34c:	e0c1      	b.n	800c4d2 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	795b      	ldrb	r3, [r3, #5]
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f002 ffd1 	bl	800f2fc <USBH_LL_GetURBState>
 800c35a:	4603      	mov	r3, r0
 800c35c:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b01      	cmp	r3, #1
 800c362:	d103      	bne.n	800c36c <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2207      	movs	r2, #7
 800c368:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c36a:	e0ad      	b.n	800c4c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	2b05      	cmp	r3, #5
 800c370:	d105      	bne.n	800c37e <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	220c      	movs	r2, #12
 800c376:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c378:	2303      	movs	r3, #3
 800c37a:	73fb      	strb	r3, [r7, #15]
      break;
 800c37c:	e0a4      	b.n	800c4c8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c37e:	7bbb      	ldrb	r3, [r7, #14]
 800c380:	2b02      	cmp	r3, #2
 800c382:	d103      	bne.n	800c38c <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2205      	movs	r2, #5
 800c388:	761a      	strb	r2, [r3, #24]
      break;
 800c38a:	e09d      	b.n	800c4c8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	2b04      	cmp	r3, #4
 800c390:	f040 809a 	bne.w	800c4c8 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	220b      	movs	r2, #11
 800c398:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c39a:	2302      	movs	r3, #2
 800c39c:	73fb      	strb	r3, [r7, #15]
      break;
 800c39e:	e093      	b.n	800c4c8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	791b      	ldrb	r3, [r3, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f000 f8d6 	bl	800c55a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2208      	movs	r2, #8
 800c3be:	761a      	strb	r2, [r3, #24]

      break;
 800c3c0:	e087      	b.n	800c4d2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	791b      	ldrb	r3, [r3, #4]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f002 ff97 	bl	800f2fc <USBH_LL_GetURBState>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c3d2:	7bbb      	ldrb	r3, [r7, #14]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d105      	bne.n	800c3e4 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	220d      	movs	r2, #13
 800c3dc:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c3e2:	e073      	b.n	800c4cc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	2b04      	cmp	r3, #4
 800c3e8:	d103      	bne.n	800c3f2 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	220b      	movs	r2, #11
 800c3ee:	761a      	strb	r2, [r3, #24]
      break;
 800c3f0:	e06c      	b.n	800c4cc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800c3f2:	7bbb      	ldrb	r3, [r7, #14]
 800c3f4:	2b05      	cmp	r3, #5
 800c3f6:	d169      	bne.n	800c4cc <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c3fc:	e066      	b.n	800c4cc <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	795a      	ldrb	r2, [r3, #5]
 800c402:	2301      	movs	r3, #1
 800c404:	9300      	str	r3, [sp, #0]
 800c406:	4613      	mov	r3, r2
 800c408:	2200      	movs	r2, #0
 800c40a:	2100      	movs	r1, #0
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f87f 	bl	800c510 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c418:	b29a      	uxth	r2, r3
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	220a      	movs	r2, #10
 800c422:	761a      	strb	r2, [r3, #24]
      break;
 800c424:	e055      	b.n	800c4d2 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	795b      	ldrb	r3, [r3, #5]
 800c42a:	4619      	mov	r1, r3
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f002 ff65 	bl	800f2fc <USBH_LL_GetURBState>
 800c432:	4603      	mov	r3, r0
 800c434:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c436:	7bbb      	ldrb	r3, [r7, #14]
 800c438:	2b01      	cmp	r3, #1
 800c43a:	d105      	bne.n	800c448 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c43c:	2300      	movs	r3, #0
 800c43e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	220d      	movs	r2, #13
 800c444:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c446:	e043      	b.n	800c4d0 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c448:	7bbb      	ldrb	r3, [r7, #14]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d103      	bne.n	800c456 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2209      	movs	r2, #9
 800c452:	761a      	strb	r2, [r3, #24]
      break;
 800c454:	e03c      	b.n	800c4d0 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	2b04      	cmp	r3, #4
 800c45a:	d139      	bne.n	800c4d0 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	220b      	movs	r2, #11
 800c460:	761a      	strb	r2, [r3, #24]
      break;
 800c462:	e035      	b.n	800c4d0 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	7e5b      	ldrb	r3, [r3, #25]
 800c468:	3301      	adds	r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	765a      	strb	r2, [r3, #25]
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	7e5b      	ldrb	r3, [r3, #25]
 800c474:	2b02      	cmp	r3, #2
 800c476:	d806      	bhi.n	800c486 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2201      	movs	r2, #1
 800c482:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c484:	e025      	b.n	800c4d2 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c48c:	2106      	movs	r1, #6
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	795b      	ldrb	r3, [r3, #5]
 800c49c:	4619      	mov	r1, r3
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f90c 	bl	800c6bc <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	791b      	ldrb	r3, [r3, #4]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f906 	bl	800c6bc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c4b6:	2302      	movs	r3, #2
 800c4b8:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ba:	e00a      	b.n	800c4d2 <USBH_HandleControl+0x2e2>

    default:
      break;
 800c4bc:	bf00      	nop
 800c4be:	e008      	b.n	800c4d2 <USBH_HandleControl+0x2e2>
      break;
 800c4c0:	bf00      	nop
 800c4c2:	e006      	b.n	800c4d2 <USBH_HandleControl+0x2e2>
      break;
 800c4c4:	bf00      	nop
 800c4c6:	e004      	b.n	800c4d2 <USBH_HandleControl+0x2e2>
      break;
 800c4c8:	bf00      	nop
 800c4ca:	e002      	b.n	800c4d2 <USBH_HandleControl+0x2e2>
      break;
 800c4cc:	bf00      	nop
 800c4ce:	e000      	b.n	800c4d2 <USBH_HandleControl+0x2e2>
      break;
 800c4d0:	bf00      	nop
  }

  return status;
 800c4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b088      	sub	sp, #32
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c4ea:	79f9      	ldrb	r1, [r7, #7]
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	9303      	str	r3, [sp, #12]
 800c4f0:	2308      	movs	r3, #8
 800c4f2:	9302      	str	r3, [sp, #8]
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	9301      	str	r3, [sp, #4]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	9300      	str	r3, [sp, #0]
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	2200      	movs	r2, #0
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f002 feca 	bl	800f29a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b088      	sub	sp, #32
 800c514:	af04      	add	r7, sp, #16
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	4611      	mov	r1, r2
 800c51c:	461a      	mov	r2, r3
 800c51e:	460b      	mov	r3, r1
 800c520:	80fb      	strh	r3, [r7, #6]
 800c522:	4613      	mov	r3, r2
 800c524:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c530:	2300      	movs	r3, #0
 800c532:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c534:	7979      	ldrb	r1, [r7, #5]
 800c536:	7e3b      	ldrb	r3, [r7, #24]
 800c538:	9303      	str	r3, [sp, #12]
 800c53a:	88fb      	ldrh	r3, [r7, #6]
 800c53c:	9302      	str	r3, [sp, #8]
 800c53e:	68bb      	ldr	r3, [r7, #8]
 800c540:	9301      	str	r3, [sp, #4]
 800c542:	2301      	movs	r3, #1
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	2300      	movs	r3, #0
 800c548:	2200      	movs	r2, #0
 800c54a:	68f8      	ldr	r0, [r7, #12]
 800c54c:	f002 fea5 	bl	800f29a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c550:	2300      	movs	r3, #0
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}

0800c55a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c55a:	b580      	push	{r7, lr}
 800c55c:	b088      	sub	sp, #32
 800c55e:	af04      	add	r7, sp, #16
 800c560:	60f8      	str	r0, [r7, #12]
 800c562:	60b9      	str	r1, [r7, #8]
 800c564:	4611      	mov	r1, r2
 800c566:	461a      	mov	r2, r3
 800c568:	460b      	mov	r3, r1
 800c56a:	80fb      	strh	r3, [r7, #6]
 800c56c:	4613      	mov	r3, r2
 800c56e:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c570:	7979      	ldrb	r1, [r7, #5]
 800c572:	2300      	movs	r3, #0
 800c574:	9303      	str	r3, [sp, #12]
 800c576:	88fb      	ldrh	r3, [r7, #6]
 800c578:	9302      	str	r3, [sp, #8]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	2301      	movs	r3, #1
 800c580:	9300      	str	r3, [sp, #0]
 800c582:	2300      	movs	r3, #0
 800c584:	2201      	movs	r2, #1
 800c586:	68f8      	ldr	r0, [r7, #12]
 800c588:	f002 fe87 	bl	800f29a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c58c:	2300      	movs	r3, #0

}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}

0800c596 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c596:	b580      	push	{r7, lr}
 800c598:	b088      	sub	sp, #32
 800c59a:	af04      	add	r7, sp, #16
 800c59c:	60f8      	str	r0, [r7, #12]
 800c59e:	60b9      	str	r1, [r7, #8]
 800c5a0:	4611      	mov	r1, r2
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	80fb      	strh	r3, [r7, #6]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c5ba:	7979      	ldrb	r1, [r7, #5]
 800c5bc:	7e3b      	ldrb	r3, [r7, #24]
 800c5be:	9303      	str	r3, [sp, #12]
 800c5c0:	88fb      	ldrh	r3, [r7, #6]
 800c5c2:	9302      	str	r3, [sp, #8]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	9301      	str	r3, [sp, #4]
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	9300      	str	r3, [sp, #0]
 800c5cc:	2302      	movs	r3, #2
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	68f8      	ldr	r0, [r7, #12]
 800c5d2:	f002 fe62 	bl	800f29a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3710      	adds	r7, #16
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}

0800c5e0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af04      	add	r7, sp, #16
 800c5e6:	60f8      	str	r0, [r7, #12]
 800c5e8:	60b9      	str	r1, [r7, #8]
 800c5ea:	4611      	mov	r1, r2
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	80fb      	strh	r3, [r7, #6]
 800c5f2:	4613      	mov	r3, r2
 800c5f4:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c5f6:	7979      	ldrb	r1, [r7, #5]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9303      	str	r3, [sp, #12]
 800c5fc:	88fb      	ldrh	r3, [r7, #6]
 800c5fe:	9302      	str	r3, [sp, #8]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	9301      	str	r3, [sp, #4]
 800c604:	2301      	movs	r3, #1
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	2302      	movs	r3, #2
 800c60a:	2201      	movs	r2, #1
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f002 fe44 	bl	800f29a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af04      	add	r7, sp, #16
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	4608      	mov	r0, r1
 800c626:	4611      	mov	r1, r2
 800c628:	461a      	mov	r2, r3
 800c62a:	4603      	mov	r3, r0
 800c62c:	70fb      	strb	r3, [r7, #3]
 800c62e:	460b      	mov	r3, r1
 800c630:	70bb      	strb	r3, [r7, #2]
 800c632:	4613      	mov	r3, r2
 800c634:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c636:	7878      	ldrb	r0, [r7, #1]
 800c638:	78ba      	ldrb	r2, [r7, #2]
 800c63a:	78f9      	ldrb	r1, [r7, #3]
 800c63c:	8b3b      	ldrh	r3, [r7, #24]
 800c63e:	9302      	str	r3, [sp, #8]
 800c640:	7d3b      	ldrb	r3, [r7, #20]
 800c642:	9301      	str	r3, [sp, #4]
 800c644:	7c3b      	ldrb	r3, [r7, #16]
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	4603      	mov	r3, r0
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f002 fdd7 	bl	800f1fe <USBH_LL_OpenPipe>

  return USBH_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3708      	adds	r7, #8
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b082      	sub	sp, #8
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	460b      	mov	r3, r1
 800c664:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	4619      	mov	r1, r3
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f002 fdf6 	bl	800f25c <USBH_LL_ClosePipe>

  return USBH_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}

0800c67a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c67a:	b580      	push	{r7, lr}
 800c67c:	b084      	sub	sp, #16
 800c67e:	af00      	add	r7, sp, #0
 800c680:	6078      	str	r0, [r7, #4]
 800c682:	460b      	mov	r3, r1
 800c684:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 f836 	bl	800c6f8 <USBH_GetFreePipe>
 800c68c:	4603      	mov	r3, r0
 800c68e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c690:	89fb      	ldrh	r3, [r7, #14]
 800c692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c696:	4293      	cmp	r3, r2
 800c698:	d00a      	beq.n	800c6b0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c69a:	78fa      	ldrb	r2, [r7, #3]
 800c69c:	89fb      	ldrh	r3, [r7, #14]
 800c69e:	f003 030f 	and.w	r3, r3, #15
 800c6a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	33e0      	adds	r3, #224	; 0xe0
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	440b      	add	r3, r1
 800c6ae:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c6b0:	89fb      	ldrh	r3, [r7, #14]
 800c6b2:	b2db      	uxtb	r3, r3
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c6c8:	78fb      	ldrb	r3, [r7, #3]
 800c6ca:	2b0a      	cmp	r3, #10
 800c6cc:	d80d      	bhi.n	800c6ea <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c6ce:	78fb      	ldrb	r3, [r7, #3]
 800c6d0:	687a      	ldr	r2, [r7, #4]
 800c6d2:	33e0      	adds	r3, #224	; 0xe0
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	685a      	ldr	r2, [r3, #4]
 800c6da:	78fb      	ldrb	r3, [r7, #3]
 800c6dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c6e0:	6879      	ldr	r1, [r7, #4]
 800c6e2:	33e0      	adds	r3, #224	; 0xe0
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	440b      	add	r3, r1
 800c6e8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c6ea:	2300      	movs	r3, #0
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	370c      	adds	r7, #12
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f6:	4770      	bx	lr

0800c6f8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c704:	2300      	movs	r3, #0
 800c706:	73fb      	strb	r3, [r7, #15]
 800c708:	e00f      	b.n	800c72a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	33e0      	adds	r3, #224	; 0xe0
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
 800c720:	b29b      	uxth	r3, r3
 800c722:	e007      	b.n	800c734 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c724:	7bfb      	ldrb	r3, [r7, #15]
 800c726:	3301      	adds	r3, #1
 800c728:	73fb      	strb	r3, [r7, #15]
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	2b0a      	cmp	r3, #10
 800c72e:	d9ec      	bls.n	800c70a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c730:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c734:	4618      	mov	r0, r3
 800c736:	3714      	adds	r7, #20
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c74a:	79fb      	ldrb	r3, [r7, #7]
 800c74c:	4a08      	ldr	r2, [pc, #32]	; (800c770 <disk_status+0x30>)
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	685b      	ldr	r3, [r3, #4]
 800c756:	79fa      	ldrb	r2, [r7, #7]
 800c758:	4905      	ldr	r1, [pc, #20]	; (800c770 <disk_status+0x30>)
 800c75a:	440a      	add	r2, r1
 800c75c:	7a12      	ldrb	r2, [r2, #8]
 800c75e:	4610      	mov	r0, r2
 800c760:	4798      	blx	r3
 800c762:	4603      	mov	r3, r0
 800c764:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c766:	7bfb      	ldrb	r3, [r7, #15]
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}
 800c770:	200013c0 	.word	0x200013c0

0800c774 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b084      	sub	sp, #16
 800c778:	af00      	add	r7, sp, #0
 800c77a:	4603      	mov	r3, r0
 800c77c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c77e:	2300      	movs	r3, #0
 800c780:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c782:	79fb      	ldrb	r3, [r7, #7]
 800c784:	4a0d      	ldr	r2, [pc, #52]	; (800c7bc <disk_initialize+0x48>)
 800c786:	5cd3      	ldrb	r3, [r2, r3]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d111      	bne.n	800c7b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c78c:	79fb      	ldrb	r3, [r7, #7]
 800c78e:	4a0b      	ldr	r2, [pc, #44]	; (800c7bc <disk_initialize+0x48>)
 800c790:	2101      	movs	r1, #1
 800c792:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c794:	79fb      	ldrb	r3, [r7, #7]
 800c796:	4a09      	ldr	r2, [pc, #36]	; (800c7bc <disk_initialize+0x48>)
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	79fa      	ldrb	r2, [r7, #7]
 800c7a2:	4906      	ldr	r1, [pc, #24]	; (800c7bc <disk_initialize+0x48>)
 800c7a4:	440a      	add	r2, r1
 800c7a6:	7a12      	ldrb	r2, [r2, #8]
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4798      	blx	r3
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3710      	adds	r7, #16
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	200013c0 	.word	0x200013c0

0800c7c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c7c0:	b590      	push	{r4, r7, lr}
 800c7c2:	b087      	sub	sp, #28
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	60b9      	str	r1, [r7, #8]
 800c7c8:	607a      	str	r2, [r7, #4]
 800c7ca:	603b      	str	r3, [r7, #0]
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c7d0:	7bfb      	ldrb	r3, [r7, #15]
 800c7d2:	4a0a      	ldr	r2, [pc, #40]	; (800c7fc <disk_read+0x3c>)
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	689c      	ldr	r4, [r3, #8]
 800c7dc:	7bfb      	ldrb	r3, [r7, #15]
 800c7de:	4a07      	ldr	r2, [pc, #28]	; (800c7fc <disk_read+0x3c>)
 800c7e0:	4413      	add	r3, r2
 800c7e2:	7a18      	ldrb	r0, [r3, #8]
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	68b9      	ldr	r1, [r7, #8]
 800c7ea:	47a0      	blx	r4
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800c7f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd90      	pop	{r4, r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	200013c0 	.word	0x200013c0

0800c800 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c800:	b590      	push	{r4, r7, lr}
 800c802:	b087      	sub	sp, #28
 800c804:	af00      	add	r7, sp, #0
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
 800c80a:	603b      	str	r3, [r7, #0]
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	4a0a      	ldr	r2, [pc, #40]	; (800c83c <disk_write+0x3c>)
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4413      	add	r3, r2
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	68dc      	ldr	r4, [r3, #12]
 800c81c:	7bfb      	ldrb	r3, [r7, #15]
 800c81e:	4a07      	ldr	r2, [pc, #28]	; (800c83c <disk_write+0x3c>)
 800c820:	4413      	add	r3, r2
 800c822:	7a18      	ldrb	r0, [r3, #8]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	68b9      	ldr	r1, [r7, #8]
 800c82a:	47a0      	blx	r4
 800c82c:	4603      	mov	r3, r0
 800c82e:	75fb      	strb	r3, [r7, #23]
  return res;
 800c830:	7dfb      	ldrb	r3, [r7, #23]
}
 800c832:	4618      	mov	r0, r3
 800c834:	371c      	adds	r7, #28
 800c836:	46bd      	mov	sp, r7
 800c838:	bd90      	pop	{r4, r7, pc}
 800c83a:	bf00      	nop
 800c83c:	200013c0 	.word	0x200013c0

0800c840 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	4603      	mov	r3, r0
 800c848:	603a      	str	r2, [r7, #0]
 800c84a:	71fb      	strb	r3, [r7, #7]
 800c84c:	460b      	mov	r3, r1
 800c84e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c850:	79fb      	ldrb	r3, [r7, #7]
 800c852:	4a09      	ldr	r2, [pc, #36]	; (800c878 <disk_ioctl+0x38>)
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	79fa      	ldrb	r2, [r7, #7]
 800c85e:	4906      	ldr	r1, [pc, #24]	; (800c878 <disk_ioctl+0x38>)
 800c860:	440a      	add	r2, r1
 800c862:	7a10      	ldrb	r0, [r2, #8]
 800c864:	79b9      	ldrb	r1, [r7, #6]
 800c866:	683a      	ldr	r2, [r7, #0]
 800c868:	4798      	blx	r3
 800c86a:	4603      	mov	r3, r0
 800c86c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	200013c0 	.word	0x200013c0

0800c87c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	3301      	adds	r3, #1
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c88c:	89fb      	ldrh	r3, [r7, #14]
 800c88e:	021b      	lsls	r3, r3, #8
 800c890:	b21a      	sxth	r2, r3
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	b21b      	sxth	r3, r3
 800c898:	4313      	orrs	r3, r2
 800c89a:	b21b      	sxth	r3, r3
 800c89c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c89e:	89fb      	ldrh	r3, [r7, #14]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3714      	adds	r7, #20
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	3303      	adds	r3, #3
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	021b      	lsls	r3, r3, #8
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	3202      	adds	r2, #2
 800c8c4:	7812      	ldrb	r2, [r2, #0]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	687a      	ldr	r2, [r7, #4]
 800c8d0:	3201      	adds	r2, #1
 800c8d2:	7812      	ldrb	r2, [r2, #0]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	021b      	lsls	r3, r3, #8
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	7812      	ldrb	r2, [r2, #0]
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c8f2:	b480      	push	{r7}
 800c8f4:	b083      	sub	sp, #12
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	1c5a      	adds	r2, r3, #1
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	887a      	ldrh	r2, [r7, #2]
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]
 800c90a:	887b      	ldrh	r3, [r7, #2]
 800c90c:	0a1b      	lsrs	r3, r3, #8
 800c90e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	607a      	str	r2, [r7, #4]
 800c916:	887a      	ldrh	r2, [r7, #2]
 800c918:	b2d2      	uxtb	r2, r2
 800c91a:	701a      	strb	r2, [r3, #0]
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	1c5a      	adds	r2, r3, #1
 800c936:	607a      	str	r2, [r7, #4]
 800c938:	683a      	ldr	r2, [r7, #0]
 800c93a:	b2d2      	uxtb	r2, r2
 800c93c:	701a      	strb	r2, [r3, #0]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	0a1b      	lsrs	r3, r3, #8
 800c942:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	1c5a      	adds	r2, r3, #1
 800c948:	607a      	str	r2, [r7, #4]
 800c94a:	683a      	ldr	r2, [r7, #0]
 800c94c:	b2d2      	uxtb	r2, r2
 800c94e:	701a      	strb	r2, [r3, #0]
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	0a1b      	lsrs	r3, r3, #8
 800c954:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	683a      	ldr	r2, [r7, #0]
 800c95e:	b2d2      	uxtb	r2, r2
 800c960:	701a      	strb	r2, [r3, #0]
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	0a1b      	lsrs	r3, r3, #8
 800c966:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	607a      	str	r2, [r7, #4]
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	b2d2      	uxtb	r2, r2
 800c972:	701a      	strb	r2, [r3, #0]
}
 800c974:	bf00      	nop
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c980:	b480      	push	{r7}
 800c982:	b087      	sub	sp, #28
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c990:	68bb      	ldr	r3, [r7, #8]
 800c992:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d00d      	beq.n	800c9b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	1c53      	adds	r3, r2, #1
 800c99e:	613b      	str	r3, [r7, #16]
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	6179      	str	r1, [r7, #20]
 800c9a6:	7812      	ldrb	r2, [r2, #0]
 800c9a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	607b      	str	r3, [r7, #4]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1f1      	bne.n	800c99a <mem_cpy+0x1a>
	}
}
 800c9b6:	bf00      	nop
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c9c2:	b480      	push	{r7}
 800c9c4:	b087      	sub	sp, #28
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	1c5a      	adds	r2, r3, #1
 800c9d6:	617a      	str	r2, [r7, #20]
 800c9d8:	68ba      	ldr	r2, [r7, #8]
 800c9da:	b2d2      	uxtb	r2, r2
 800c9dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	3b01      	subs	r3, #1
 800c9e2:	607b      	str	r3, [r7, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1f3      	bne.n	800c9d2 <mem_set+0x10>
}
 800c9ea:	bf00      	nop
 800c9ec:	371c      	adds	r7, #28
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c9f6:	b480      	push	{r7}
 800c9f8:	b089      	sub	sp, #36	; 0x24
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	60f8      	str	r0, [r7, #12]
 800c9fe:	60b9      	str	r1, [r7, #8]
 800ca00:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	61fb      	str	r3, [r7, #28]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ca0e:	69fb      	ldr	r3, [r7, #28]
 800ca10:	1c5a      	adds	r2, r3, #1
 800ca12:	61fa      	str	r2, [r7, #28]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	4619      	mov	r1, r3
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	1c5a      	adds	r2, r3, #1
 800ca1c:	61ba      	str	r2, [r7, #24]
 800ca1e:	781b      	ldrb	r3, [r3, #0]
 800ca20:	1acb      	subs	r3, r1, r3
 800ca22:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	607b      	str	r3, [r7, #4]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <mem_cmp+0x40>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d0eb      	beq.n	800ca0e <mem_cmp+0x18>

	return r;
 800ca36:	697b      	ldr	r3, [r7, #20]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3724      	adds	r7, #36	; 0x24
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ca4e:	e002      	b.n	800ca56 <chk_chr+0x12>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	3301      	adds	r3, #1
 800ca54:	607b      	str	r3, [r7, #4]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d005      	beq.n	800ca6a <chk_chr+0x26>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	781b      	ldrb	r3, [r3, #0]
 800ca62:	461a      	mov	r2, r3
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d1f2      	bne.n	800ca50 <chk_chr+0xc>
	return *str;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	781b      	ldrb	r3, [r3, #0]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr
	...

0800ca7c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b085      	sub	sp, #20
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ca86:	2300      	movs	r3, #0
 800ca88:	60bb      	str	r3, [r7, #8]
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e029      	b.n	800cae4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ca90:	4a27      	ldr	r2, [pc, #156]	; (800cb30 <chk_lock+0xb4>)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	011b      	lsls	r3, r3, #4
 800ca96:	4413      	add	r3, r2
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d01d      	beq.n	800cada <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ca9e:	4a24      	ldr	r2, [pc, #144]	; (800cb30 <chk_lock+0xb4>)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	011b      	lsls	r3, r3, #4
 800caa4:	4413      	add	r3, r2
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	429a      	cmp	r2, r3
 800caae:	d116      	bne.n	800cade <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cab0:	4a1f      	ldr	r2, [pc, #124]	; (800cb30 <chk_lock+0xb4>)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	011b      	lsls	r3, r3, #4
 800cab6:	4413      	add	r3, r2
 800cab8:	3304      	adds	r3, #4
 800caba:	681a      	ldr	r2, [r3, #0]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d10c      	bne.n	800cade <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cac4:	4a1a      	ldr	r2, [pc, #104]	; (800cb30 <chk_lock+0xb4>)
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	011b      	lsls	r3, r3, #4
 800caca:	4413      	add	r3, r2
 800cacc:	3308      	adds	r3, #8
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d102      	bne.n	800cade <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cad8:	e007      	b.n	800caea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cada:	2301      	movs	r3, #1
 800cadc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3301      	adds	r3, #1
 800cae2:	60fb      	str	r3, [r7, #12]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	2b01      	cmp	r3, #1
 800cae8:	d9d2      	bls.n	800ca90 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d109      	bne.n	800cb04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d102      	bne.n	800cafc <chk_lock+0x80>
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	d101      	bne.n	800cb00 <chk_lock+0x84>
 800cafc:	2300      	movs	r3, #0
 800cafe:	e010      	b.n	800cb22 <chk_lock+0xa6>
 800cb00:	2312      	movs	r3, #18
 800cb02:	e00e      	b.n	800cb22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d108      	bne.n	800cb1c <chk_lock+0xa0>
 800cb0a:	4a09      	ldr	r2, [pc, #36]	; (800cb30 <chk_lock+0xb4>)
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	011b      	lsls	r3, r3, #4
 800cb10:	4413      	add	r3, r2
 800cb12:	330c      	adds	r3, #12
 800cb14:	881b      	ldrh	r3, [r3, #0]
 800cb16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb1a:	d101      	bne.n	800cb20 <chk_lock+0xa4>
 800cb1c:	2310      	movs	r3, #16
 800cb1e:	e000      	b.n	800cb22 <chk_lock+0xa6>
 800cb20:	2300      	movs	r3, #0
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	3714      	adds	r7, #20
 800cb26:	46bd      	mov	sp, r7
 800cb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2c:	4770      	bx	lr
 800cb2e:	bf00      	nop
 800cb30:	200013a0 	.word	0x200013a0

0800cb34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	e002      	b.n	800cb46 <enq_lock+0x12>
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	3301      	adds	r3, #1
 800cb44:	607b      	str	r3, [r7, #4]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b01      	cmp	r3, #1
 800cb4a:	d806      	bhi.n	800cb5a <enq_lock+0x26>
 800cb4c:	4a09      	ldr	r2, [pc, #36]	; (800cb74 <enq_lock+0x40>)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	011b      	lsls	r3, r3, #4
 800cb52:	4413      	add	r3, r2
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1f2      	bne.n	800cb40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b02      	cmp	r3, #2
 800cb5e:	bf14      	ite	ne
 800cb60:	2301      	movne	r3, #1
 800cb62:	2300      	moveq	r3, #0
 800cb64:	b2db      	uxtb	r3, r3
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	370c      	adds	r7, #12
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	200013a0 	.word	0x200013a0

0800cb78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cb82:	2300      	movs	r3, #0
 800cb84:	60fb      	str	r3, [r7, #12]
 800cb86:	e01f      	b.n	800cbc8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800cb88:	4a41      	ldr	r2, [pc, #260]	; (800cc90 <inc_lock+0x118>)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	011b      	lsls	r3, r3, #4
 800cb8e:	4413      	add	r3, r2
 800cb90:	681a      	ldr	r2, [r3, #0]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d113      	bne.n	800cbc2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800cb9a:	4a3d      	ldr	r2, [pc, #244]	; (800cc90 <inc_lock+0x118>)
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	4413      	add	r3, r2
 800cba2:	3304      	adds	r3, #4
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d109      	bne.n	800cbc2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800cbae:	4a38      	ldr	r2, [pc, #224]	; (800cc90 <inc_lock+0x118>)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	011b      	lsls	r3, r3, #4
 800cbb4:	4413      	add	r3, r2
 800cbb6:	3308      	adds	r3, #8
 800cbb8:	681a      	ldr	r2, [r3, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d006      	beq.n	800cbd0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d9dc      	bls.n	800cb88 <inc_lock+0x10>
 800cbce:	e000      	b.n	800cbd2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800cbd0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	d132      	bne.n	800cc3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60fb      	str	r3, [r7, #12]
 800cbdc:	e002      	b.n	800cbe4 <inc_lock+0x6c>
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	3301      	adds	r3, #1
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d806      	bhi.n	800cbf8 <inc_lock+0x80>
 800cbea:	4a29      	ldr	r2, [pc, #164]	; (800cc90 <inc_lock+0x118>)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	4413      	add	r3, r2
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d1f2      	bne.n	800cbde <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2b02      	cmp	r3, #2
 800cbfc:	d101      	bne.n	800cc02 <inc_lock+0x8a>
 800cbfe:	2300      	movs	r3, #0
 800cc00:	e040      	b.n	800cc84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681a      	ldr	r2, [r3, #0]
 800cc06:	4922      	ldr	r1, [pc, #136]	; (800cc90 <inc_lock+0x118>)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	011b      	lsls	r3, r3, #4
 800cc0c:	440b      	add	r3, r1
 800cc0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	689a      	ldr	r2, [r3, #8]
 800cc14:	491e      	ldr	r1, [pc, #120]	; (800cc90 <inc_lock+0x118>)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	011b      	lsls	r3, r3, #4
 800cc1a:	440b      	add	r3, r1
 800cc1c:	3304      	adds	r3, #4
 800cc1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	695a      	ldr	r2, [r3, #20]
 800cc24:	491a      	ldr	r1, [pc, #104]	; (800cc90 <inc_lock+0x118>)
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	011b      	lsls	r3, r3, #4
 800cc2a:	440b      	add	r3, r1
 800cc2c:	3308      	adds	r3, #8
 800cc2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cc30:	4a17      	ldr	r2, [pc, #92]	; (800cc90 <inc_lock+0x118>)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	011b      	lsls	r3, r3, #4
 800cc36:	4413      	add	r3, r2
 800cc38:	330c      	adds	r3, #12
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d009      	beq.n	800cc58 <inc_lock+0xe0>
 800cc44:	4a12      	ldr	r2, [pc, #72]	; (800cc90 <inc_lock+0x118>)
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	011b      	lsls	r3, r3, #4
 800cc4a:	4413      	add	r3, r2
 800cc4c:	330c      	adds	r3, #12
 800cc4e:	881b      	ldrh	r3, [r3, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d001      	beq.n	800cc58 <inc_lock+0xe0>
 800cc54:	2300      	movs	r3, #0
 800cc56:	e015      	b.n	800cc84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d108      	bne.n	800cc70 <inc_lock+0xf8>
 800cc5e:	4a0c      	ldr	r2, [pc, #48]	; (800cc90 <inc_lock+0x118>)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	011b      	lsls	r3, r3, #4
 800cc64:	4413      	add	r3, r2
 800cc66:	330c      	adds	r3, #12
 800cc68:	881b      	ldrh	r3, [r3, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	e001      	b.n	800cc74 <inc_lock+0xfc>
 800cc70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc74:	4906      	ldr	r1, [pc, #24]	; (800cc90 <inc_lock+0x118>)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	011b      	lsls	r3, r3, #4
 800cc7a:	440b      	add	r3, r1
 800cc7c:	330c      	adds	r3, #12
 800cc7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	3301      	adds	r3, #1
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3714      	adds	r7, #20
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8e:	4770      	bx	lr
 800cc90:	200013a0 	.word	0x200013a0

0800cc94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	3b01      	subs	r3, #1
 800cca0:	607b      	str	r3, [r7, #4]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d825      	bhi.n	800ccf4 <dec_lock+0x60>
		n = Files[i].ctr;
 800cca8:	4a17      	ldr	r2, [pc, #92]	; (800cd08 <dec_lock+0x74>)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	011b      	lsls	r3, r3, #4
 800ccae:	4413      	add	r3, r2
 800ccb0:	330c      	adds	r3, #12
 800ccb2:	881b      	ldrh	r3, [r3, #0]
 800ccb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ccb6:	89fb      	ldrh	r3, [r7, #14]
 800ccb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccbc:	d101      	bne.n	800ccc2 <dec_lock+0x2e>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ccc2:	89fb      	ldrh	r3, [r7, #14]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <dec_lock+0x3a>
 800ccc8:	89fb      	ldrh	r3, [r7, #14]
 800ccca:	3b01      	subs	r3, #1
 800cccc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ccce:	4a0e      	ldr	r2, [pc, #56]	; (800cd08 <dec_lock+0x74>)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	011b      	lsls	r3, r3, #4
 800ccd4:	4413      	add	r3, r2
 800ccd6:	330c      	adds	r3, #12
 800ccd8:	89fa      	ldrh	r2, [r7, #14]
 800ccda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ccdc:	89fb      	ldrh	r3, [r7, #14]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d105      	bne.n	800ccee <dec_lock+0x5a>
 800cce2:	4a09      	ldr	r2, [pc, #36]	; (800cd08 <dec_lock+0x74>)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	011b      	lsls	r3, r3, #4
 800cce8:	4413      	add	r3, r2
 800ccea:	2200      	movs	r2, #0
 800ccec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	737b      	strb	r3, [r7, #13]
 800ccf2:	e001      	b.n	800ccf8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ccf8:	7b7b      	ldrb	r3, [r7, #13]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	200013a0 	.word	0x200013a0

0800cd0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b085      	sub	sp, #20
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cd14:	2300      	movs	r3, #0
 800cd16:	60fb      	str	r3, [r7, #12]
 800cd18:	e010      	b.n	800cd3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cd1a:	4a0d      	ldr	r2, [pc, #52]	; (800cd50 <clear_lock+0x44>)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	011b      	lsls	r3, r3, #4
 800cd20:	4413      	add	r3, r2
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d105      	bne.n	800cd36 <clear_lock+0x2a>
 800cd2a:	4a09      	ldr	r2, [pc, #36]	; (800cd50 <clear_lock+0x44>)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	011b      	lsls	r3, r3, #4
 800cd30:	4413      	add	r3, r2
 800cd32:	2200      	movs	r2, #0
 800cd34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	60fb      	str	r3, [r7, #12]
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2b01      	cmp	r3, #1
 800cd40:	d9eb      	bls.n	800cd1a <clear_lock+0xe>
	}
}
 800cd42:	bf00      	nop
 800cd44:	3714      	adds	r7, #20
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	200013a0 	.word	0x200013a0

0800cd54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	78db      	ldrb	r3, [r3, #3]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d034      	beq.n	800cdd2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	7858      	ldrb	r0, [r3, #1]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cd78:	2301      	movs	r3, #1
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	f7ff fd40 	bl	800c800 <disk_write>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d002      	beq.n	800cd8c <sync_window+0x38>
			res = FR_DISK_ERR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	73fb      	strb	r3, [r7, #15]
 800cd8a:	e022      	b.n	800cdd2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6a1b      	ldr	r3, [r3, #32]
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	1ad2      	subs	r2, r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	699b      	ldr	r3, [r3, #24]
 800cd9e:	429a      	cmp	r2, r3
 800cda0:	d217      	bcs.n	800cdd2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	789b      	ldrb	r3, [r3, #2]
 800cda6:	613b      	str	r3, [r7, #16]
 800cda8:	e010      	b.n	800cdcc <sync_window+0x78>
					wsect += fs->fsize;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	699b      	ldr	r3, [r3, #24]
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7858      	ldrb	r0, [r3, #1]
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	697a      	ldr	r2, [r7, #20]
 800cdc2:	f7ff fd1d 	bl	800c800 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	613b      	str	r3, [r7, #16]
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d8eb      	bhi.n	800cdaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cdd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3718      	adds	r7, #24
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bd80      	pop	{r7, pc}

0800cddc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cde6:	2300      	movs	r3, #0
 800cde8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d01b      	beq.n	800ce2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f7ff ffad 	bl	800cd54 <sync_window>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d113      	bne.n	800ce2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	7858      	ldrb	r0, [r3, #1]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce0e:	2301      	movs	r3, #1
 800ce10:	683a      	ldr	r2, [r7, #0]
 800ce12:	f7ff fcd5 	bl	800c7c0 <disk_read>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d004      	beq.n	800ce26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ce1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ce20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ce22:	2301      	movs	r3, #1
 800ce24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	683a      	ldr	r2, [r7, #0]
 800ce2a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800ce2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3710      	adds	r7, #16
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}
	...

0800ce38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b084      	sub	sp, #16
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff ff87 	bl	800cd54 <sync_window>
 800ce46:	4603      	mov	r3, r0
 800ce48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d158      	bne.n	800cf02 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	781b      	ldrb	r3, [r3, #0]
 800ce54:	2b03      	cmp	r3, #3
 800ce56:	d148      	bne.n	800ceea <sync_fs+0xb2>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	791b      	ldrb	r3, [r3, #4]
 800ce5c:	2b01      	cmp	r3, #1
 800ce5e:	d144      	bne.n	800ceea <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	3330      	adds	r3, #48	; 0x30
 800ce64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ce68:	2100      	movs	r1, #0
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7ff fda9 	bl	800c9c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3330      	adds	r3, #48	; 0x30
 800ce74:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce78:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7ff fd38 	bl	800c8f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	3330      	adds	r3, #48	; 0x30
 800ce86:	4921      	ldr	r1, [pc, #132]	; (800cf0c <sync_fs+0xd4>)
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fd4d 	bl	800c928 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	3330      	adds	r3, #48	; 0x30
 800ce92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce96:	491e      	ldr	r1, [pc, #120]	; (800cf10 <sync_fs+0xd8>)
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fd45 	bl	800c928 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	3330      	adds	r3, #48	; 0x30
 800cea2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7ff fd3b 	bl	800c928 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	3330      	adds	r3, #48	; 0x30
 800ceb6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	4619      	mov	r1, r3
 800cec0:	4610      	mov	r0, r2
 800cec2:	f7ff fd31 	bl	800c928 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	1c5a      	adds	r2, r3, #1
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	7858      	ldrb	r0, [r3, #1]
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cede:	2301      	movs	r3, #1
 800cee0:	f7ff fc8e 	bl	800c800 <disk_write>
			fs->fsi_flag = 0;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	785b      	ldrb	r3, [r3, #1]
 800ceee:	2200      	movs	r2, #0
 800cef0:	2100      	movs	r1, #0
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7ff fca4 	bl	800c840 <disk_ioctl>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d001      	beq.n	800cf02 <sync_fs+0xca>
 800cefe:	2301      	movs	r3, #1
 800cf00:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	41615252 	.word	0x41615252
 800cf10:	61417272 	.word	0x61417272

0800cf14 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b083      	sub	sp, #12
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	3b02      	subs	r3, #2
 800cf22:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	695b      	ldr	r3, [r3, #20]
 800cf28:	3b02      	subs	r3, #2
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d301      	bcc.n	800cf34 <clust2sect+0x20>
 800cf30:	2300      	movs	r3, #0
 800cf32:	e008      	b.n	800cf46 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	895b      	ldrh	r3, [r3, #10]
 800cf38:	461a      	mov	r2, r3
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	fb03 f202 	mul.w	r2, r3, r2
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf44:	4413      	add	r3, r2
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b086      	sub	sp, #24
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d904      	bls.n	800cf72 <get_fat+0x20>
 800cf68:	693b      	ldr	r3, [r7, #16]
 800cf6a:	695b      	ldr	r3, [r3, #20]
 800cf6c:	683a      	ldr	r2, [r7, #0]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d302      	bcc.n	800cf78 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cf72:	2301      	movs	r3, #1
 800cf74:	617b      	str	r3, [r7, #20]
 800cf76:	e08c      	b.n	800d092 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cf78:	f04f 33ff 	mov.w	r3, #4294967295
 800cf7c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d045      	beq.n	800d012 <get_fat+0xc0>
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d05d      	beq.n	800d046 <get_fat+0xf4>
 800cf8a:	2b01      	cmp	r3, #1
 800cf8c:	d177      	bne.n	800d07e <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	085b      	lsrs	r3, r3, #1
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4413      	add	r3, r2
 800cf9a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	6a1a      	ldr	r2, [r3, #32]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	0a5b      	lsrs	r3, r3, #9
 800cfa4:	4413      	add	r3, r2
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	6938      	ldr	r0, [r7, #16]
 800cfaa:	f7ff ff17 	bl	800cddc <move_window>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d167      	bne.n	800d084 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	1c5a      	adds	r2, r3, #1
 800cfb8:	60fa      	str	r2, [r7, #12]
 800cfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfbe:	693a      	ldr	r2, [r7, #16]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfc6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	6a1a      	ldr	r2, [r3, #32]
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	0a5b      	lsrs	r3, r3, #9
 800cfd0:	4413      	add	r3, r2
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6938      	ldr	r0, [r7, #16]
 800cfd6:	f7ff ff01 	bl	800cddc <move_window>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d153      	bne.n	800d088 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe6:	693a      	ldr	r2, [r7, #16]
 800cfe8:	4413      	add	r3, r2
 800cfea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cfee:	021b      	lsls	r3, r3, #8
 800cff0:	461a      	mov	r2, r3
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	4313      	orrs	r3, r2
 800cff6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f003 0301 	and.w	r3, r3, #1
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <get_fat+0xb6>
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	091b      	lsrs	r3, r3, #4
 800d006:	e002      	b.n	800d00e <get_fat+0xbc>
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d00e:	617b      	str	r3, [r7, #20]
			break;
 800d010:	e03f      	b.n	800d092 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	6a1a      	ldr	r2, [r3, #32]
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	0a1b      	lsrs	r3, r3, #8
 800d01a:	4413      	add	r3, r2
 800d01c:	4619      	mov	r1, r3
 800d01e:	6938      	ldr	r0, [r7, #16]
 800d020:	f7ff fedc 	bl	800cddc <move_window>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d130      	bne.n	800d08c <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	005b      	lsls	r3, r3, #1
 800d034:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d038:	4413      	add	r3, r2
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff fc1e 	bl	800c87c <ld_word>
 800d040:	4603      	mov	r3, r0
 800d042:	617b      	str	r3, [r7, #20]
			break;
 800d044:	e025      	b.n	800d092 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	6a1a      	ldr	r2, [r3, #32]
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	09db      	lsrs	r3, r3, #7
 800d04e:	4413      	add	r3, r2
 800d050:	4619      	mov	r1, r3
 800d052:	6938      	ldr	r0, [r7, #16]
 800d054:	f7ff fec2 	bl	800cddc <move_window>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d118      	bne.n	800d090 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d05e:	693b      	ldr	r3, [r7, #16]
 800d060:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d06c:	4413      	add	r3, r2
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff fc1c 	bl	800c8ac <ld_dword>
 800d074:	4603      	mov	r3, r0
 800d076:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d07a:	617b      	str	r3, [r7, #20]
			break;
 800d07c:	e009      	b.n	800d092 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d07e:	2301      	movs	r3, #1
 800d080:	617b      	str	r3, [r7, #20]
 800d082:	e006      	b.n	800d092 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d084:	bf00      	nop
 800d086:	e004      	b.n	800d092 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d088:	bf00      	nop
 800d08a:	e002      	b.n	800d092 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d08c:	bf00      	nop
 800d08e:	e000      	b.n	800d092 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d090:	bf00      	nop
		}
	}

	return val;
 800d092:	697b      	ldr	r3, [r7, #20]
}
 800d094:	4618      	mov	r0, r3
 800d096:	3718      	adds	r7, #24
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d09c:	b590      	push	{r4, r7, lr}
 800d09e:	b089      	sub	sp, #36	; 0x24
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d0a8:	2302      	movs	r3, #2
 800d0aa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	2b01      	cmp	r3, #1
 800d0b0:	f240 80d6 	bls.w	800d260 <put_fat+0x1c4>
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	695b      	ldr	r3, [r3, #20]
 800d0b8:	68ba      	ldr	r2, [r7, #8]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	f080 80d0 	bcs.w	800d260 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d073      	beq.n	800d1b0 <put_fat+0x114>
 800d0c8:	2b03      	cmp	r3, #3
 800d0ca:	f000 8091 	beq.w	800d1f0 <put_fat+0x154>
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	f040 80c6 	bne.w	800d260 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	61bb      	str	r3, [r7, #24]
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	085b      	lsrs	r3, r3, #1
 800d0dc:	69ba      	ldr	r2, [r7, #24]
 800d0de:	4413      	add	r3, r2
 800d0e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	6a1a      	ldr	r2, [r3, #32]
 800d0e6:	69bb      	ldr	r3, [r7, #24]
 800d0e8:	0a5b      	lsrs	r3, r3, #9
 800d0ea:	4413      	add	r3, r2
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7ff fe74 	bl	800cddc <move_window>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0f8:	7ffb      	ldrb	r3, [r7, #31]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f040 80a9 	bne.w	800d252 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	1c59      	adds	r1, r3, #1
 800d10a:	61b9      	str	r1, [r7, #24]
 800d10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d110:	4413      	add	r3, r2
 800d112:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d00d      	beq.n	800d13a <put_fat+0x9e>
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	b25b      	sxtb	r3, r3
 800d124:	f003 030f 	and.w	r3, r3, #15
 800d128:	b25a      	sxtb	r2, r3
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	b2db      	uxtb	r3, r3
 800d12e:	011b      	lsls	r3, r3, #4
 800d130:	b25b      	sxtb	r3, r3
 800d132:	4313      	orrs	r3, r2
 800d134:	b25b      	sxtb	r3, r3
 800d136:	b2db      	uxtb	r3, r3
 800d138:	e001      	b.n	800d13e <put_fat+0xa2>
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	b2db      	uxtb	r3, r3
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2201      	movs	r2, #1
 800d146:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	6a1a      	ldr	r2, [r3, #32]
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	0a5b      	lsrs	r3, r3, #9
 800d150:	4413      	add	r3, r2
 800d152:	4619      	mov	r1, r3
 800d154:	68f8      	ldr	r0, [r7, #12]
 800d156:	f7ff fe41 	bl	800cddc <move_window>
 800d15a:	4603      	mov	r3, r0
 800d15c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d15e:	7ffb      	ldrb	r3, [r7, #31]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d178      	bne.n	800d256 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d170:	4413      	add	r3, r2
 800d172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	f003 0301 	and.w	r3, r3, #1
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d003      	beq.n	800d186 <put_fat+0xea>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	091b      	lsrs	r3, r3, #4
 800d182:	b2db      	uxtb	r3, r3
 800d184:	e00e      	b.n	800d1a4 <put_fat+0x108>
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	781b      	ldrb	r3, [r3, #0]
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	f023 030f 	bic.w	r3, r3, #15
 800d190:	b25a      	sxtb	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	0a1b      	lsrs	r3, r3, #8
 800d196:	b25b      	sxtb	r3, r3
 800d198:	f003 030f 	and.w	r3, r3, #15
 800d19c:	b25b      	sxtb	r3, r3
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	b25b      	sxtb	r3, r3
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	697a      	ldr	r2, [r7, #20]
 800d1a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	70da      	strb	r2, [r3, #3]
			break;
 800d1ae:	e057      	b.n	800d260 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6a1a      	ldr	r2, [r3, #32]
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	0a1b      	lsrs	r3, r3, #8
 800d1b8:	4413      	add	r3, r2
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	68f8      	ldr	r0, [r7, #12]
 800d1be:	f7ff fe0d 	bl	800cddc <move_window>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d1c6:	7ffb      	ldrb	r3, [r7, #31]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d146      	bne.n	800d25a <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	005b      	lsls	r3, r3, #1
 800d1d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d1da:	4413      	add	r3, r2
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	b292      	uxth	r2, r2
 800d1e0:	4611      	mov	r1, r2
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7ff fb85 	bl	800c8f2 <st_word>
			fs->wflag = 1;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	70da      	strb	r2, [r3, #3]
			break;
 800d1ee:	e037      	b.n	800d260 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	6a1a      	ldr	r2, [r3, #32]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	09db      	lsrs	r3, r3, #7
 800d1f8:	4413      	add	r3, r2
 800d1fa:	4619      	mov	r1, r3
 800d1fc:	68f8      	ldr	r0, [r7, #12]
 800d1fe:	f7ff fded 	bl	800cddc <move_window>
 800d202:	4603      	mov	r3, r0
 800d204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d206:	7ffb      	ldrb	r3, [r7, #31]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d128      	bne.n	800d25e <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d220:	4413      	add	r3, r2
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff fb42 	bl	800c8ac <ld_dword>
 800d228:	4603      	mov	r3, r0
 800d22a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d22e:	4323      	orrs	r3, r4
 800d230:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800d240:	4413      	add	r3, r2
 800d242:	6879      	ldr	r1, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f7ff fb6f 	bl	800c928 <st_dword>
			fs->wflag = 1;
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	2201      	movs	r2, #1
 800d24e:	70da      	strb	r2, [r3, #3]
			break;
 800d250:	e006      	b.n	800d260 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d252:	bf00      	nop
 800d254:	e004      	b.n	800d260 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d256:	bf00      	nop
 800d258:	e002      	b.n	800d260 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d25a:	bf00      	nop
 800d25c:	e000      	b.n	800d260 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800d25e:	bf00      	nop
		}
	}
	return res;
 800d260:	7ffb      	ldrb	r3, [r7, #31]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3724      	adds	r7, #36	; 0x24
 800d266:	46bd      	mov	sp, r7
 800d268:	bd90      	pop	{r4, r7, pc}

0800d26a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b088      	sub	sp, #32
 800d26e:	af00      	add	r7, sp, #0
 800d270:	60f8      	str	r0, [r7, #12]
 800d272:	60b9      	str	r1, [r7, #8]
 800d274:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	2b01      	cmp	r3, #1
 800d284:	d904      	bls.n	800d290 <remove_chain+0x26>
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	695b      	ldr	r3, [r3, #20]
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	429a      	cmp	r2, r3
 800d28e:	d301      	bcc.n	800d294 <remove_chain+0x2a>
 800d290:	2302      	movs	r3, #2
 800d292:	e04b      	b.n	800d32c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00c      	beq.n	800d2b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d29a:	f04f 32ff 	mov.w	r2, #4294967295
 800d29e:	6879      	ldr	r1, [r7, #4]
 800d2a0:	69b8      	ldr	r0, [r7, #24]
 800d2a2:	f7ff fefb 	bl	800d09c <put_fat>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d2aa:	7ffb      	ldrb	r3, [r7, #31]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d001      	beq.n	800d2b4 <remove_chain+0x4a>
 800d2b0:	7ffb      	ldrb	r3, [r7, #31]
 800d2b2:	e03b      	b.n	800d32c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d2b4:	68b9      	ldr	r1, [r7, #8]
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7ff fe4b 	bl	800cf52 <get_fat>
 800d2bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d031      	beq.n	800d328 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d101      	bne.n	800d2ce <remove_chain+0x64>
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	e02e      	b.n	800d32c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2d4:	d101      	bne.n	800d2da <remove_chain+0x70>
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e028      	b.n	800d32c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d2da:	2200      	movs	r2, #0
 800d2dc:	68b9      	ldr	r1, [r7, #8]
 800d2de:	69b8      	ldr	r0, [r7, #24]
 800d2e0:	f7ff fedc 	bl	800d09c <put_fat>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d2e8:	7ffb      	ldrb	r3, [r7, #31]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d001      	beq.n	800d2f2 <remove_chain+0x88>
 800d2ee:	7ffb      	ldrb	r3, [r7, #31]
 800d2f0:	e01c      	b.n	800d32c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d2f2:	69bb      	ldr	r3, [r7, #24]
 800d2f4:	691a      	ldr	r2, [r3, #16]
 800d2f6:	69bb      	ldr	r3, [r7, #24]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	3b02      	subs	r3, #2
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d20b      	bcs.n	800d318 <remove_chain+0xae>
			fs->free_clst++;
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	691b      	ldr	r3, [r3, #16]
 800d304:	1c5a      	adds	r2, r3, #1
 800d306:	69bb      	ldr	r3, [r7, #24]
 800d308:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	791b      	ldrb	r3, [r3, #4]
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	b2da      	uxtb	r2, r3
 800d314:	69bb      	ldr	r3, [r7, #24]
 800d316:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d31c:	69bb      	ldr	r3, [r7, #24]
 800d31e:	695b      	ldr	r3, [r3, #20]
 800d320:	68ba      	ldr	r2, [r7, #8]
 800d322:	429a      	cmp	r2, r3
 800d324:	d3c6      	bcc.n	800d2b4 <remove_chain+0x4a>
 800d326:	e000      	b.n	800d32a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d328:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d32a:	2300      	movs	r3, #0
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3720      	adds	r7, #32
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b088      	sub	sp, #32
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d10d      	bne.n	800d366 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	68db      	ldr	r3, [r3, #12]
 800d34e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d004      	beq.n	800d360 <create_chain+0x2c>
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	695b      	ldr	r3, [r3, #20]
 800d35a:	69ba      	ldr	r2, [r7, #24]
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d31b      	bcc.n	800d398 <create_chain+0x64>
 800d360:	2301      	movs	r3, #1
 800d362:	61bb      	str	r3, [r7, #24]
 800d364:	e018      	b.n	800d398 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d366:	6839      	ldr	r1, [r7, #0]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7ff fdf2 	bl	800cf52 <get_fat>
 800d36e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2b01      	cmp	r3, #1
 800d374:	d801      	bhi.n	800d37a <create_chain+0x46>
 800d376:	2301      	movs	r3, #1
 800d378:	e070      	b.n	800d45c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d380:	d101      	bne.n	800d386 <create_chain+0x52>
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	e06a      	b.n	800d45c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	695b      	ldr	r3, [r3, #20]
 800d38a:	68fa      	ldr	r2, [r7, #12]
 800d38c:	429a      	cmp	r2, r3
 800d38e:	d201      	bcs.n	800d394 <create_chain+0x60>
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	e063      	b.n	800d45c <create_chain+0x128>
		scl = clst;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d39c:	69fb      	ldr	r3, [r7, #28]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	695b      	ldr	r3, [r3, #20]
 800d3a6:	69fa      	ldr	r2, [r7, #28]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d307      	bcc.n	800d3bc <create_chain+0x88>
				ncl = 2;
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d3b0:	69fa      	ldr	r2, [r7, #28]
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d901      	bls.n	800d3bc <create_chain+0x88>
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	e04f      	b.n	800d45c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d3bc:	69f9      	ldr	r1, [r7, #28]
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f7ff fdc7 	bl	800cf52 <get_fat>
 800d3c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d00e      	beq.n	800d3ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d003      	beq.n	800d3da <create_chain+0xa6>
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d8:	d101      	bne.n	800d3de <create_chain+0xaa>
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	e03e      	b.n	800d45c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d3de:	69fa      	ldr	r2, [r7, #28]
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d1da      	bne.n	800d39c <create_chain+0x68>
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	e038      	b.n	800d45c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d3ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d3ec:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f0:	69f9      	ldr	r1, [r7, #28]
 800d3f2:	6938      	ldr	r0, [r7, #16]
 800d3f4:	f7ff fe52 	bl	800d09c <put_fat>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d3fc:	7dfb      	ldrb	r3, [r7, #23]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <create_chain+0xe2>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d006      	beq.n	800d416 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d408:	69fa      	ldr	r2, [r7, #28]
 800d40a:	6839      	ldr	r1, [r7, #0]
 800d40c:	6938      	ldr	r0, [r7, #16]
 800d40e:	f7ff fe45 	bl	800d09c <put_fat>
 800d412:	4603      	mov	r3, r0
 800d414:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d116      	bne.n	800d44a <create_chain+0x116>
		fs->last_clst = ncl;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	69fa      	ldr	r2, [r7, #28]
 800d420:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	691a      	ldr	r2, [r3, #16]
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	3b02      	subs	r3, #2
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d804      	bhi.n	800d43a <create_chain+0x106>
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	1e5a      	subs	r2, r3, #1
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	791b      	ldrb	r3, [r3, #4]
 800d43e:	f043 0301 	orr.w	r3, r3, #1
 800d442:	b2da      	uxtb	r2, r3
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	711a      	strb	r2, [r3, #4]
 800d448:	e007      	b.n	800d45a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d44a:	7dfb      	ldrb	r3, [r7, #23]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d102      	bne.n	800d456 <create_chain+0x122>
 800d450:	f04f 33ff 	mov.w	r3, #4294967295
 800d454:	e000      	b.n	800d458 <create_chain+0x124>
 800d456:	2301      	movs	r3, #1
 800d458:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d45a:	69fb      	ldr	r3, [r7, #28]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3720      	adds	r7, #32
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d464:	b480      	push	{r7}
 800d466:	b087      	sub	sp, #28
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
 800d46c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d478:	3304      	adds	r3, #4
 800d47a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	0a5b      	lsrs	r3, r3, #9
 800d480:	68fa      	ldr	r2, [r7, #12]
 800d482:	8952      	ldrh	r2, [r2, #10]
 800d484:	fbb3 f3f2 	udiv	r3, r3, r2
 800d488:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	1d1a      	adds	r2, r3, #4
 800d48e:	613a      	str	r2, [r7, #16]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d101      	bne.n	800d49e <clmt_clust+0x3a>
 800d49a:	2300      	movs	r3, #0
 800d49c:	e010      	b.n	800d4c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d307      	bcc.n	800d4b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	3304      	adds	r3, #4
 800d4b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d4b4:	e7e9      	b.n	800d48a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d4b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	371c      	adds	r7, #28
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b086      	sub	sp, #24
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d4e2:	d204      	bcs.n	800d4ee <dir_sdi+0x22>
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	f003 031f 	and.w	r3, r3, #31
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d001      	beq.n	800d4f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e063      	b.n	800d5ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	683a      	ldr	r2, [r7, #0]
 800d4f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d106      	bne.n	800d512 <dir_sdi+0x46>
 800d504:	693b      	ldr	r3, [r7, #16]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d902      	bls.n	800d512 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d510:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d10c      	bne.n	800d532 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	095b      	lsrs	r3, r3, #5
 800d51c:	693a      	ldr	r2, [r7, #16]
 800d51e:	8912      	ldrh	r2, [r2, #8]
 800d520:	4293      	cmp	r3, r2
 800d522:	d301      	bcc.n	800d528 <dir_sdi+0x5c>
 800d524:	2302      	movs	r3, #2
 800d526:	e048      	b.n	800d5ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	61da      	str	r2, [r3, #28]
 800d530:	e029      	b.n	800d586 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	895b      	ldrh	r3, [r3, #10]
 800d536:	025b      	lsls	r3, r3, #9
 800d538:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d53a:	e019      	b.n	800d570 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6979      	ldr	r1, [r7, #20]
 800d540:	4618      	mov	r0, r3
 800d542:	f7ff fd06 	bl	800cf52 <get_fat>
 800d546:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d54e:	d101      	bne.n	800d554 <dir_sdi+0x88>
 800d550:	2301      	movs	r3, #1
 800d552:	e032      	b.n	800d5ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	2b01      	cmp	r3, #1
 800d558:	d904      	bls.n	800d564 <dir_sdi+0x98>
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	697a      	ldr	r2, [r7, #20]
 800d560:	429a      	cmp	r2, r3
 800d562:	d301      	bcc.n	800d568 <dir_sdi+0x9c>
 800d564:	2302      	movs	r3, #2
 800d566:	e028      	b.n	800d5ba <dir_sdi+0xee>
			ofs -= csz;
 800d568:	683a      	ldr	r2, [r7, #0]
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d570:	683a      	ldr	r2, [r7, #0]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	429a      	cmp	r2, r3
 800d576:	d2e1      	bcs.n	800d53c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d578:	6979      	ldr	r1, [r7, #20]
 800d57a:	6938      	ldr	r0, [r7, #16]
 800d57c:	f7ff fcca 	bl	800cf14 <clust2sect>
 800d580:	4602      	mov	r2, r0
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	697a      	ldr	r2, [r7, #20]
 800d58a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	69db      	ldr	r3, [r3, #28]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d101      	bne.n	800d598 <dir_sdi+0xcc>
 800d594:	2302      	movs	r3, #2
 800d596:	e010      	b.n	800d5ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	69da      	ldr	r2, [r3, #28]
 800d59c:	683b      	ldr	r3, [r7, #0]
 800d59e:	0a5b      	lsrs	r3, r3, #9
 800d5a0:	441a      	add	r2, r3
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5b2:	441a      	add	r2, r3
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d5b8:	2300      	movs	r3, #0
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3718      	adds	r7, #24
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d5c2:	b580      	push	{r7, lr}
 800d5c4:	b086      	sub	sp, #24
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
 800d5ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	695b      	ldr	r3, [r3, #20]
 800d5d6:	3320      	adds	r3, #32
 800d5d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	69db      	ldr	r3, [r3, #28]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <dir_next+0x28>
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d5e8:	d301      	bcc.n	800d5ee <dir_next+0x2c>
 800d5ea:	2304      	movs	r3, #4
 800d5ec:	e0aa      	b.n	800d744 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	f040 8098 	bne.w	800d72a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	69db      	ldr	r3, [r3, #28]
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	699b      	ldr	r3, [r3, #24]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d10b      	bne.n	800d624 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	095b      	lsrs	r3, r3, #5
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	8912      	ldrh	r2, [r2, #8]
 800d614:	4293      	cmp	r3, r2
 800d616:	f0c0 8088 	bcc.w	800d72a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	61da      	str	r2, [r3, #28]
 800d620:	2304      	movs	r3, #4
 800d622:	e08f      	b.n	800d744 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	0a5b      	lsrs	r3, r3, #9
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	8952      	ldrh	r2, [r2, #10]
 800d62c:	3a01      	subs	r2, #1
 800d62e:	4013      	ands	r3, r2
 800d630:	2b00      	cmp	r3, #0
 800d632:	d17a      	bne.n	800d72a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	699b      	ldr	r3, [r3, #24]
 800d63a:	4619      	mov	r1, r3
 800d63c:	4610      	mov	r0, r2
 800d63e:	f7ff fc88 	bl	800cf52 <get_fat>
 800d642:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	2b01      	cmp	r3, #1
 800d648:	d801      	bhi.n	800d64e <dir_next+0x8c>
 800d64a:	2302      	movs	r3, #2
 800d64c:	e07a      	b.n	800d744 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d654:	d101      	bne.n	800d65a <dir_next+0x98>
 800d656:	2301      	movs	r3, #1
 800d658:	e074      	b.n	800d744 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	695b      	ldr	r3, [r3, #20]
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	429a      	cmp	r2, r3
 800d662:	d358      	bcc.n	800d716 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d104      	bne.n	800d674 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	61da      	str	r2, [r3, #28]
 800d670:	2304      	movs	r3, #4
 800d672:	e067      	b.n	800d744 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	699b      	ldr	r3, [r3, #24]
 800d67a:	4619      	mov	r1, r3
 800d67c:	4610      	mov	r0, r2
 800d67e:	f7ff fe59 	bl	800d334 <create_chain>
 800d682:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <dir_next+0xcc>
 800d68a:	2307      	movs	r3, #7
 800d68c:	e05a      	b.n	800d744 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2b01      	cmp	r3, #1
 800d692:	d101      	bne.n	800d698 <dir_next+0xd6>
 800d694:	2302      	movs	r3, #2
 800d696:	e055      	b.n	800d744 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d69e:	d101      	bne.n	800d6a4 <dir_next+0xe2>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e04f      	b.n	800d744 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d6a4:	68f8      	ldr	r0, [r7, #12]
 800d6a6:	f7ff fb55 	bl	800cd54 <sync_window>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <dir_next+0xf2>
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e047      	b.n	800d744 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	3330      	adds	r3, #48	; 0x30
 800d6b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d6bc:	2100      	movs	r1, #0
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff f97f 	bl	800c9c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	613b      	str	r3, [r7, #16]
 800d6c8:	6979      	ldr	r1, [r7, #20]
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7ff fc22 	bl	800cf14 <clust2sect>
 800d6d0:	4602      	mov	r2, r0
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	62da      	str	r2, [r3, #44]	; 0x2c
 800d6d6:	e012      	b.n	800d6fe <dir_next+0x13c>
						fs->wflag = 1;
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d6de:	68f8      	ldr	r0, [r7, #12]
 800d6e0:	f7ff fb38 	bl	800cd54 <sync_window>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d001      	beq.n	800d6ee <dir_next+0x12c>
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e02a      	b.n	800d744 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	3301      	adds	r3, #1
 800d6f2:	613b      	str	r3, [r7, #16]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f8:	1c5a      	adds	r2, r3, #1
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	62da      	str	r2, [r3, #44]	; 0x2c
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	895b      	ldrh	r3, [r3, #10]
 800d702:	461a      	mov	r2, r3
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	4293      	cmp	r3, r2
 800d708:	d3e6      	bcc.n	800d6d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	1ad2      	subs	r2, r2, r3
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d71c:	6979      	ldr	r1, [r7, #20]
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	f7ff fbf8 	bl	800cf14 <clust2sect>
 800d724:	4602      	mov	r2, r0
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d73c:	441a      	add	r2, r3
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b086      	sub	sp, #24
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d75c:	2100      	movs	r1, #0
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f7ff feb4 	bl	800d4cc <dir_sdi>
 800d764:	4603      	mov	r3, r0
 800d766:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d768:	7dfb      	ldrb	r3, [r7, #23]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d12b      	bne.n	800d7c6 <dir_alloc+0x7a>
		n = 0;
 800d76e:	2300      	movs	r3, #0
 800d770:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	69db      	ldr	r3, [r3, #28]
 800d776:	4619      	mov	r1, r3
 800d778:	68f8      	ldr	r0, [r7, #12]
 800d77a:	f7ff fb2f 	bl	800cddc <move_window>
 800d77e:	4603      	mov	r3, r0
 800d780:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d11d      	bne.n	800d7c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a1b      	ldr	r3, [r3, #32]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2be5      	cmp	r3, #229	; 0xe5
 800d790:	d004      	beq.n	800d79c <dir_alloc+0x50>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d107      	bne.n	800d7ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d79c:	693b      	ldr	r3, [r7, #16]
 800d79e:	3301      	adds	r3, #1
 800d7a0:	613b      	str	r3, [r7, #16]
 800d7a2:	693a      	ldr	r2, [r7, #16]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	429a      	cmp	r2, r3
 800d7a8:	d102      	bne.n	800d7b0 <dir_alloc+0x64>
 800d7aa:	e00c      	b.n	800d7c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d7b0:	2101      	movs	r1, #1
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f7ff ff05 	bl	800d5c2 <dir_next>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d7bc:	7dfb      	ldrb	r3, [r7, #23]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d0d7      	beq.n	800d772 <dir_alloc+0x26>
 800d7c2:	e000      	b.n	800d7c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d7c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
 800d7c8:	2b04      	cmp	r3, #4
 800d7ca:	d101      	bne.n	800d7d0 <dir_alloc+0x84>
 800d7cc:	2307      	movs	r3, #7
 800d7ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800d7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3718      	adds	r7, #24
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}

0800d7da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d7da:	b580      	push	{r7, lr}
 800d7dc:	b084      	sub	sp, #16
 800d7de:	af00      	add	r7, sp, #0
 800d7e0:	6078      	str	r0, [r7, #4]
 800d7e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	331a      	adds	r3, #26
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff f847 	bl	800c87c <ld_word>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	2b03      	cmp	r3, #3
 800d7f8:	d109      	bne.n	800d80e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	3314      	adds	r3, #20
 800d7fe:	4618      	mov	r0, r3
 800d800:	f7ff f83c 	bl	800c87c <ld_word>
 800d804:	4603      	mov	r3, r0
 800d806:	041b      	lsls	r3, r3, #16
 800d808:	68fa      	ldr	r2, [r7, #12]
 800d80a:	4313      	orrs	r3, r2
 800d80c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d80e:	68fb      	ldr	r3, [r7, #12]
}
 800d810:	4618      	mov	r0, r3
 800d812:	3710      	adds	r7, #16
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	331a      	adds	r3, #26
 800d828:	687a      	ldr	r2, [r7, #4]
 800d82a:	b292      	uxth	r2, r2
 800d82c:	4611      	mov	r1, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7ff f85f 	bl	800c8f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2b03      	cmp	r3, #3
 800d83a:	d109      	bne.n	800d850 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d83c:	68bb      	ldr	r3, [r7, #8]
 800d83e:	f103 0214 	add.w	r2, r3, #20
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	0c1b      	lsrs	r3, r3, #16
 800d846:	b29b      	uxth	r3, r3
 800d848:	4619      	mov	r1, r3
 800d84a:	4610      	mov	r0, r2
 800d84c:	f7ff f851 	bl	800c8f2 <st_word>
	}
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d866:	2100      	movs	r1, #0
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7ff fe2f 	bl	800d4cc <dir_sdi>
 800d86e:	4603      	mov	r3, r0
 800d870:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d872:	7dfb      	ldrb	r3, [r7, #23]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <dir_find+0x24>
 800d878:	7dfb      	ldrb	r3, [r7, #23]
 800d87a:	e03e      	b.n	800d8fa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	69db      	ldr	r3, [r3, #28]
 800d880:	4619      	mov	r1, r3
 800d882:	6938      	ldr	r0, [r7, #16]
 800d884:	f7ff faaa 	bl	800cddc <move_window>
 800d888:	4603      	mov	r3, r0
 800d88a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d88c:	7dfb      	ldrb	r3, [r7, #23]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d12f      	bne.n	800d8f2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6a1b      	ldr	r3, [r3, #32]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d89a:	7bfb      	ldrb	r3, [r7, #15]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d102      	bne.n	800d8a6 <dir_find+0x4e>
 800d8a0:	2304      	movs	r3, #4
 800d8a2:	75fb      	strb	r3, [r7, #23]
 800d8a4:	e028      	b.n	800d8f8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6a1b      	ldr	r3, [r3, #32]
 800d8aa:	330b      	adds	r3, #11
 800d8ac:	781b      	ldrb	r3, [r3, #0]
 800d8ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6a1b      	ldr	r3, [r3, #32]
 800d8bc:	330b      	adds	r3, #11
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	f003 0308 	and.w	r3, r3, #8
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d10a      	bne.n	800d8de <dir_find+0x86>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	6a18      	ldr	r0, [r3, #32]
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3324      	adds	r3, #36	; 0x24
 800d8d0:	220b      	movs	r2, #11
 800d8d2:	4619      	mov	r1, r3
 800d8d4:	f7ff f88f 	bl	800c9f6 <mem_cmp>
 800d8d8:	4603      	mov	r3, r0
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d00b      	beq.n	800d8f6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d8de:	2100      	movs	r1, #0
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff fe6e 	bl	800d5c2 <dir_next>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d8ea:	7dfb      	ldrb	r3, [r7, #23]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d0c5      	beq.n	800d87c <dir_find+0x24>
 800d8f0:	e002      	b.n	800d8f8 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d8f2:	bf00      	nop
 800d8f4:	e000      	b.n	800d8f8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d8f6:	bf00      	nop

	return res;
 800d8f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3718      	adds	r7, #24
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d902:	b580      	push	{r7, lr}
 800d904:	b084      	sub	sp, #16
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d910:	2101      	movs	r1, #1
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f7ff ff1a 	bl	800d74c <dir_alloc>
 800d918:	4603      	mov	r3, r0
 800d91a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d11c      	bne.n	800d95c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	69db      	ldr	r3, [r3, #28]
 800d926:	4619      	mov	r1, r3
 800d928:	68b8      	ldr	r0, [r7, #8]
 800d92a:	f7ff fa57 	bl	800cddc <move_window>
 800d92e:	4603      	mov	r3, r0
 800d930:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d932:	7bfb      	ldrb	r3, [r7, #15]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d111      	bne.n	800d95c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6a1b      	ldr	r3, [r3, #32]
 800d93c:	2220      	movs	r2, #32
 800d93e:	2100      	movs	r1, #0
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff f83e 	bl	800c9c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a18      	ldr	r0, [r3, #32]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	3324      	adds	r3, #36	; 0x24
 800d94e:	220b      	movs	r2, #11
 800d950:	4619      	mov	r1, r3
 800d952:	f7ff f815 	bl	800c980 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	2201      	movs	r2, #1
 800d95a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d95c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3710      	adds	r7, #16
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
	...

0800d968 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b088      	sub	sp, #32
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	3324      	adds	r3, #36	; 0x24
 800d97c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d97e:	220b      	movs	r2, #11
 800d980:	2120      	movs	r1, #32
 800d982:	68b8      	ldr	r0, [r7, #8]
 800d984:	f7ff f81d 	bl	800c9c2 <mem_set>
	si = i = 0; ni = 8;
 800d988:	2300      	movs	r3, #0
 800d98a:	613b      	str	r3, [r7, #16]
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	617b      	str	r3, [r7, #20]
 800d990:	2308      	movs	r3, #8
 800d992:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	617a      	str	r2, [r7, #20]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	4413      	add	r3, r2
 800d99e:	781b      	ldrb	r3, [r3, #0]
 800d9a0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d9a2:	7ffb      	ldrb	r3, [r7, #31]
 800d9a4:	2b20      	cmp	r3, #32
 800d9a6:	d94e      	bls.n	800da46 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d9a8:	7ffb      	ldrb	r3, [r7, #31]
 800d9aa:	2b2f      	cmp	r3, #47	; 0x2f
 800d9ac:	d006      	beq.n	800d9bc <create_name+0x54>
 800d9ae:	7ffb      	ldrb	r3, [r7, #31]
 800d9b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d9b2:	d110      	bne.n	800d9d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d9b4:	e002      	b.n	800d9bc <create_name+0x54>
 800d9b6:	697b      	ldr	r3, [r7, #20]
 800d9b8:	3301      	adds	r3, #1
 800d9ba:	617b      	str	r3, [r7, #20]
 800d9bc:	68fa      	ldr	r2, [r7, #12]
 800d9be:	697b      	ldr	r3, [r7, #20]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d9c6:	d0f6      	beq.n	800d9b6 <create_name+0x4e>
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	697b      	ldr	r3, [r7, #20]
 800d9cc:	4413      	add	r3, r2
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b5c      	cmp	r3, #92	; 0x5c
 800d9d2:	d0f0      	beq.n	800d9b6 <create_name+0x4e>
			break;
 800d9d4:	e038      	b.n	800da48 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d9d6:	7ffb      	ldrb	r3, [r7, #31]
 800d9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d9da:	d003      	beq.n	800d9e4 <create_name+0x7c>
 800d9dc:	693a      	ldr	r2, [r7, #16]
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d30c      	bcc.n	800d9fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	2b0b      	cmp	r3, #11
 800d9e8:	d002      	beq.n	800d9f0 <create_name+0x88>
 800d9ea:	7ffb      	ldrb	r3, [r7, #31]
 800d9ec:	2b2e      	cmp	r3, #46	; 0x2e
 800d9ee:	d001      	beq.n	800d9f4 <create_name+0x8c>
 800d9f0:	2306      	movs	r3, #6
 800d9f2:	e044      	b.n	800da7e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d9f4:	2308      	movs	r3, #8
 800d9f6:	613b      	str	r3, [r7, #16]
 800d9f8:	230b      	movs	r3, #11
 800d9fa:	61bb      	str	r3, [r7, #24]
			continue;
 800d9fc:	e022      	b.n	800da44 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d9fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800da02:	2b00      	cmp	r3, #0
 800da04:	da04      	bge.n	800da10 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800da06:	7ffb      	ldrb	r3, [r7, #31]
 800da08:	3b80      	subs	r3, #128	; 0x80
 800da0a:	4a1f      	ldr	r2, [pc, #124]	; (800da88 <create_name+0x120>)
 800da0c:	5cd3      	ldrb	r3, [r2, r3]
 800da0e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800da10:	7ffb      	ldrb	r3, [r7, #31]
 800da12:	4619      	mov	r1, r3
 800da14:	481d      	ldr	r0, [pc, #116]	; (800da8c <create_name+0x124>)
 800da16:	f7ff f815 	bl	800ca44 <chk_chr>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d001      	beq.n	800da24 <create_name+0xbc>
 800da20:	2306      	movs	r3, #6
 800da22:	e02c      	b.n	800da7e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800da24:	7ffb      	ldrb	r3, [r7, #31]
 800da26:	2b60      	cmp	r3, #96	; 0x60
 800da28:	d905      	bls.n	800da36 <create_name+0xce>
 800da2a:	7ffb      	ldrb	r3, [r7, #31]
 800da2c:	2b7a      	cmp	r3, #122	; 0x7a
 800da2e:	d802      	bhi.n	800da36 <create_name+0xce>
 800da30:	7ffb      	ldrb	r3, [r7, #31]
 800da32:	3b20      	subs	r3, #32
 800da34:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	1c5a      	adds	r2, r3, #1
 800da3a:	613a      	str	r2, [r7, #16]
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	4413      	add	r3, r2
 800da40:	7ffa      	ldrb	r2, [r7, #31]
 800da42:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800da44:	e7a6      	b.n	800d994 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800da46:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800da48:	68fa      	ldr	r2, [r7, #12]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	441a      	add	r2, r3
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d101      	bne.n	800da5c <create_name+0xf4>
 800da58:	2306      	movs	r3, #6
 800da5a:	e010      	b.n	800da7e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2be5      	cmp	r3, #229	; 0xe5
 800da62:	d102      	bne.n	800da6a <create_name+0x102>
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	2205      	movs	r2, #5
 800da68:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800da6a:	7ffb      	ldrb	r3, [r7, #31]
 800da6c:	2b20      	cmp	r3, #32
 800da6e:	d801      	bhi.n	800da74 <create_name+0x10c>
 800da70:	2204      	movs	r2, #4
 800da72:	e000      	b.n	800da76 <create_name+0x10e>
 800da74:	2200      	movs	r2, #0
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	330b      	adds	r3, #11
 800da7a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800da7c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3720      	adds	r7, #32
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	0800fef0 	.word	0x0800fef0
 800da8c:	0800fe18 	.word	0x0800fe18

0800da90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b086      	sub	sp, #24
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
 800da98:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800daa4:	e002      	b.n	800daac <follow_path+0x1c>
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	3301      	adds	r3, #1
 800daaa:	603b      	str	r3, [r7, #0]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	2b2f      	cmp	r3, #47	; 0x2f
 800dab2:	d0f8      	beq.n	800daa6 <follow_path+0x16>
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b5c      	cmp	r3, #92	; 0x5c
 800daba:	d0f4      	beq.n	800daa6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	2200      	movs	r2, #0
 800dac0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	2b1f      	cmp	r3, #31
 800dac8:	d80a      	bhi.n	800dae0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2280      	movs	r2, #128	; 0x80
 800dace:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800dad2:	2100      	movs	r1, #0
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f7ff fcf9 	bl	800d4cc <dir_sdi>
 800dada:	4603      	mov	r3, r0
 800dadc:	75fb      	strb	r3, [r7, #23]
 800dade:	e043      	b.n	800db68 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dae0:	463b      	mov	r3, r7
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7ff ff3f 	bl	800d968 <create_name>
 800daea:	4603      	mov	r3, r0
 800daec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800daee:	7dfb      	ldrb	r3, [r7, #23]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d134      	bne.n	800db5e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff feaf 	bl	800d858 <dir_find>
 800dafa:	4603      	mov	r3, r0
 800dafc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800db04:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800db06:	7dfb      	ldrb	r3, [r7, #23]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d00a      	beq.n	800db22 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
 800db0e:	2b04      	cmp	r3, #4
 800db10:	d127      	bne.n	800db62 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800db12:	7afb      	ldrb	r3, [r7, #11]
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d122      	bne.n	800db62 <follow_path+0xd2>
 800db1c:	2305      	movs	r3, #5
 800db1e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800db20:	e01f      	b.n	800db62 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db22:	7afb      	ldrb	r3, [r7, #11]
 800db24:	f003 0304 	and.w	r3, r3, #4
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d11c      	bne.n	800db66 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	799b      	ldrb	r3, [r3, #6]
 800db30:	f003 0310 	and.w	r3, r3, #16
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800db38:	2305      	movs	r3, #5
 800db3a:	75fb      	strb	r3, [r7, #23]
 800db3c:	e014      	b.n	800db68 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	695b      	ldr	r3, [r3, #20]
 800db48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db4c:	4413      	add	r3, r2
 800db4e:	4619      	mov	r1, r3
 800db50:	68f8      	ldr	r0, [r7, #12]
 800db52:	f7ff fe42 	bl	800d7da <ld_clust>
 800db56:	4602      	mov	r2, r0
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800db5c:	e7c0      	b.n	800dae0 <follow_path+0x50>
			if (res != FR_OK) break;
 800db5e:	bf00      	nop
 800db60:	e002      	b.n	800db68 <follow_path+0xd8>
				break;
 800db62:	bf00      	nop
 800db64:	e000      	b.n	800db68 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800db66:	bf00      	nop
			}
		}
	}

	return res;
 800db68:	7dfb      	ldrb	r3, [r7, #23]
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3718      	adds	r7, #24
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800db72:	b480      	push	{r7}
 800db74:	b087      	sub	sp, #28
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800db7a:	f04f 33ff 	mov.w	r3, #4294967295
 800db7e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d031      	beq.n	800dbec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	617b      	str	r3, [r7, #20]
 800db8e:	e002      	b.n	800db96 <get_ldnumber+0x24>
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	3301      	adds	r3, #1
 800db94:	617b      	str	r3, [r7, #20]
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	781b      	ldrb	r3, [r3, #0]
 800db9a:	2b20      	cmp	r3, #32
 800db9c:	d903      	bls.n	800dba6 <get_ldnumber+0x34>
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	2b3a      	cmp	r3, #58	; 0x3a
 800dba4:	d1f4      	bne.n	800db90 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	2b3a      	cmp	r3, #58	; 0x3a
 800dbac:	d11c      	bne.n	800dbe8 <get_ldnumber+0x76>
			tp = *path;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	1c5a      	adds	r2, r3, #1
 800dbb8:	60fa      	str	r2, [r7, #12]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	3b30      	subs	r3, #48	; 0x30
 800dbbe:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800dbc0:	68bb      	ldr	r3, [r7, #8]
 800dbc2:	2b09      	cmp	r3, #9
 800dbc4:	d80e      	bhi.n	800dbe4 <get_ldnumber+0x72>
 800dbc6:	68fa      	ldr	r2, [r7, #12]
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	429a      	cmp	r2, r3
 800dbcc:	d10a      	bne.n	800dbe4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d107      	bne.n	800dbe4 <get_ldnumber+0x72>
					vol = (int)i;
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	617b      	str	r3, [r7, #20]
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	697a      	ldr	r2, [r7, #20]
 800dbe2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	e002      	b.n	800dbee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800dbe8:	2300      	movs	r3, #0
 800dbea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800dbec:	693b      	ldr	r3, [r7, #16]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	371c      	adds	r7, #28
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
	...

0800dbfc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	70da      	strb	r2, [r3, #3]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc12:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f7ff f8e0 	bl	800cddc <move_window>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d001      	beq.n	800dc26 <check_fs+0x2a>
 800dc22:	2304      	movs	r3, #4
 800dc24:	e038      	b.n	800dc98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	3330      	adds	r3, #48	; 0x30
 800dc2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f7fe fe24 	bl	800c87c <ld_word>
 800dc34:	4603      	mov	r3, r0
 800dc36:	461a      	mov	r2, r3
 800dc38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d001      	beq.n	800dc44 <check_fs+0x48>
 800dc40:	2303      	movs	r3, #3
 800dc42:	e029      	b.n	800dc98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc4a:	2be9      	cmp	r3, #233	; 0xe9
 800dc4c:	d009      	beq.n	800dc62 <check_fs+0x66>
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dc54:	2beb      	cmp	r3, #235	; 0xeb
 800dc56:	d11e      	bne.n	800dc96 <check_fs+0x9a>
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800dc5e:	2b90      	cmp	r3, #144	; 0x90
 800dc60:	d119      	bne.n	800dc96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	3330      	adds	r3, #48	; 0x30
 800dc66:	3336      	adds	r3, #54	; 0x36
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f7fe fe1f 	bl	800c8ac <ld_dword>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800dc74:	4a0a      	ldr	r2, [pc, #40]	; (800dca0 <check_fs+0xa4>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d101      	bne.n	800dc7e <check_fs+0x82>
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e00c      	b.n	800dc98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	3330      	adds	r3, #48	; 0x30
 800dc82:	3352      	adds	r3, #82	; 0x52
 800dc84:	4618      	mov	r0, r3
 800dc86:	f7fe fe11 	bl	800c8ac <ld_dword>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4b05      	ldr	r3, [pc, #20]	; (800dca4 <check_fs+0xa8>)
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d101      	bne.n	800dc96 <check_fs+0x9a>
 800dc92:	2300      	movs	r3, #0
 800dc94:	e000      	b.n	800dc98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800dc96:	2302      	movs	r3, #2
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	00544146 	.word	0x00544146
 800dca4:	33544146 	.word	0x33544146

0800dca8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b096      	sub	sp, #88	; 0x58
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	4613      	mov	r3, r2
 800dcb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800dcbc:	68f8      	ldr	r0, [r7, #12]
 800dcbe:	f7ff ff58 	bl	800db72 <get_ldnumber>
 800dcc2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800dcc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	da01      	bge.n	800dcce <find_volume+0x26>
 800dcca:	230b      	movs	r3, #11
 800dccc:	e22e      	b.n	800e12c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800dcce:	4aa8      	ldr	r2, [pc, #672]	; (800df70 <find_volume+0x2c8>)
 800dcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <find_volume+0x3a>
 800dcde:	230c      	movs	r3, #12
 800dce0:	e224      	b.n	800e12c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dce6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dce8:	79fb      	ldrb	r3, [r7, #7]
 800dcea:	f023 0301 	bic.w	r3, r3, #1
 800dcee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dcf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d01a      	beq.n	800dd2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfa:	785b      	ldrb	r3, [r3, #1]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f7fe fd1f 	bl	800c740 <disk_status>
 800dd02:	4603      	mov	r3, r0
 800dd04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dd08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd0c:	f003 0301 	and.w	r3, r3, #1
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10c      	bne.n	800dd2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d007      	beq.n	800dd2a <find_volume+0x82>
 800dd1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd1e:	f003 0304 	and.w	r3, r3, #4
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dd26:	230a      	movs	r3, #10
 800dd28:	e200      	b.n	800e12c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	e1fe      	b.n	800e12c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dd2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd30:	2200      	movs	r2, #0
 800dd32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd36:	b2da      	uxtb	r2, r3
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3e:	785b      	ldrb	r3, [r3, #1]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f7fe fd17 	bl	800c774 <disk_initialize>
 800dd46:	4603      	mov	r3, r0
 800dd48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dd4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd50:	f003 0301 	and.w	r3, r3, #1
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d001      	beq.n	800dd5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dd58:	2303      	movs	r3, #3
 800dd5a:	e1e7      	b.n	800e12c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dd5c:	79fb      	ldrb	r3, [r7, #7]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <find_volume+0xca>
 800dd62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dd66:	f003 0304 	and.w	r3, r3, #4
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dd6e:	230a      	movs	r3, #10
 800dd70:	e1dc      	b.n	800e12c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dd72:	2300      	movs	r3, #0
 800dd74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dd76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dd78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd7a:	f7ff ff3f 	bl	800dbfc <check_fs>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dd84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd88:	2b02      	cmp	r3, #2
 800dd8a:	d14b      	bne.n	800de24 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	643b      	str	r3, [r7, #64]	; 0x40
 800dd90:	e01f      	b.n	800ddd2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dd98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd9a:	011b      	lsls	r3, r3, #4
 800dd9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800dda0:	4413      	add	r3, r2
 800dda2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda6:	3304      	adds	r3, #4
 800dda8:	781b      	ldrb	r3, [r3, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d006      	beq.n	800ddbc <find_volume+0x114>
 800ddae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb0:	3308      	adds	r3, #8
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7fe fd7a 	bl	800c8ac <ld_dword>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	e000      	b.n	800ddbe <find_volume+0x116>
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddc0:	009b      	lsls	r3, r3, #2
 800ddc2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ddc6:	440b      	add	r3, r1
 800ddc8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ddcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddce:	3301      	adds	r3, #1
 800ddd0:	643b      	str	r3, [r7, #64]	; 0x40
 800ddd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddd4:	2b03      	cmp	r3, #3
 800ddd6:	d9dc      	bls.n	800dd92 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ddd8:	2300      	movs	r3, #0
 800ddda:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d002      	beq.n	800dde8 <find_volume+0x140>
 800dde2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dde4:	3b01      	subs	r3, #1
 800dde6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dde8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ddf6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ddf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d005      	beq.n	800de0a <find_volume+0x162>
 800ddfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800de00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de02:	f7ff fefb 	bl	800dbfc <check_fs>
 800de06:	4603      	mov	r3, r0
 800de08:	e000      	b.n	800de0c <find_volume+0x164>
 800de0a:	2303      	movs	r3, #3
 800de0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800de10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de14:	2b01      	cmp	r3, #1
 800de16:	d905      	bls.n	800de24 <find_volume+0x17c>
 800de18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de1a:	3301      	adds	r3, #1
 800de1c:	643b      	str	r3, [r7, #64]	; 0x40
 800de1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de20:	2b03      	cmp	r3, #3
 800de22:	d9e1      	bls.n	800dde8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800de24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de28:	2b04      	cmp	r3, #4
 800de2a:	d101      	bne.n	800de30 <find_volume+0x188>
 800de2c:	2301      	movs	r3, #1
 800de2e:	e17d      	b.n	800e12c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800de30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800de34:	2b01      	cmp	r3, #1
 800de36:	d901      	bls.n	800de3c <find_volume+0x194>
 800de38:	230d      	movs	r3, #13
 800de3a:	e177      	b.n	800e12c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800de3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de3e:	3330      	adds	r3, #48	; 0x30
 800de40:	330b      	adds	r3, #11
 800de42:	4618      	mov	r0, r3
 800de44:	f7fe fd1a 	bl	800c87c <ld_word>
 800de48:	4603      	mov	r3, r0
 800de4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de4e:	d001      	beq.n	800de54 <find_volume+0x1ac>
 800de50:	230d      	movs	r3, #13
 800de52:	e16b      	b.n	800e12c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800de54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de56:	3330      	adds	r3, #48	; 0x30
 800de58:	3316      	adds	r3, #22
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fe fd0e 	bl	800c87c <ld_word>
 800de60:	4603      	mov	r3, r0
 800de62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800de64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <find_volume+0x1d0>
 800de6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6c:	3330      	adds	r3, #48	; 0x30
 800de6e:	3324      	adds	r3, #36	; 0x24
 800de70:	4618      	mov	r0, r3
 800de72:	f7fe fd1b 	bl	800c8ac <ld_dword>
 800de76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800de78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de7c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800de7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800de88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8a:	789b      	ldrb	r3, [r3, #2]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d005      	beq.n	800de9c <find_volume+0x1f4>
 800de90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de92:	789b      	ldrb	r3, [r3, #2]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d001      	beq.n	800de9c <find_volume+0x1f4>
 800de98:	230d      	movs	r3, #13
 800de9a:	e147      	b.n	800e12c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800de9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9e:	789b      	ldrb	r3, [r3, #2]
 800dea0:	461a      	mov	r2, r3
 800dea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dea4:	fb02 f303 	mul.w	r3, r2, r3
 800dea8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800deaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800deb0:	b29a      	uxth	r2, r3
 800deb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800deb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb8:	895b      	ldrh	r3, [r3, #10]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d008      	beq.n	800ded0 <find_volume+0x228>
 800debe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec0:	895b      	ldrh	r3, [r3, #10]
 800dec2:	461a      	mov	r2, r3
 800dec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec6:	895b      	ldrh	r3, [r3, #10]
 800dec8:	3b01      	subs	r3, #1
 800deca:	4013      	ands	r3, r2
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <find_volume+0x22c>
 800ded0:	230d      	movs	r3, #13
 800ded2:	e12b      	b.n	800e12c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ded4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded6:	3330      	adds	r3, #48	; 0x30
 800ded8:	3311      	adds	r3, #17
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fe fcce 	bl	800c87c <ld_word>
 800dee0:	4603      	mov	r3, r0
 800dee2:	461a      	mov	r2, r3
 800dee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dee6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deea:	891b      	ldrh	r3, [r3, #8]
 800deec:	f003 030f 	and.w	r3, r3, #15
 800def0:	b29b      	uxth	r3, r3
 800def2:	2b00      	cmp	r3, #0
 800def4:	d001      	beq.n	800defa <find_volume+0x252>
 800def6:	230d      	movs	r3, #13
 800def8:	e118      	b.n	800e12c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800defa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defc:	3330      	adds	r3, #48	; 0x30
 800defe:	3313      	adds	r3, #19
 800df00:	4618      	mov	r0, r3
 800df02:	f7fe fcbb 	bl	800c87c <ld_word>
 800df06:	4603      	mov	r3, r0
 800df08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800df0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d106      	bne.n	800df1e <find_volume+0x276>
 800df10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df12:	3330      	adds	r3, #48	; 0x30
 800df14:	3320      	adds	r3, #32
 800df16:	4618      	mov	r0, r3
 800df18:	f7fe fcc8 	bl	800c8ac <ld_dword>
 800df1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800df1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df20:	3330      	adds	r3, #48	; 0x30
 800df22:	330e      	adds	r3, #14
 800df24:	4618      	mov	r0, r3
 800df26:	f7fe fca9 	bl	800c87c <ld_word>
 800df2a:	4603      	mov	r3, r0
 800df2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800df2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800df30:	2b00      	cmp	r3, #0
 800df32:	d101      	bne.n	800df38 <find_volume+0x290>
 800df34:	230d      	movs	r3, #13
 800df36:	e0f9      	b.n	800e12c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800df38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800df3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3c:	4413      	add	r3, r2
 800df3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df40:	8912      	ldrh	r2, [r2, #8]
 800df42:	0912      	lsrs	r2, r2, #4
 800df44:	b292      	uxth	r2, r2
 800df46:	4413      	add	r3, r2
 800df48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800df4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	429a      	cmp	r2, r3
 800df50:	d201      	bcs.n	800df56 <find_volume+0x2ae>
 800df52:	230d      	movs	r3, #13
 800df54:	e0ea      	b.n	800e12c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800df56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	1ad3      	subs	r3, r2, r3
 800df5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df5e:	8952      	ldrh	r2, [r2, #10]
 800df60:	fbb3 f3f2 	udiv	r3, r3, r2
 800df64:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800df66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d103      	bne.n	800df74 <find_volume+0x2cc>
 800df6c:	230d      	movs	r3, #13
 800df6e:	e0dd      	b.n	800e12c <find_volume+0x484>
 800df70:	20001398 	.word	0x20001398
		fmt = FS_FAT32;
 800df74:	2303      	movs	r3, #3
 800df76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800df7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800df80:	4293      	cmp	r3, r2
 800df82:	d802      	bhi.n	800df8a <find_volume+0x2e2>
 800df84:	2302      	movs	r3, #2
 800df86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800df90:	4293      	cmp	r3, r2
 800df92:	d802      	bhi.n	800df9a <find_volume+0x2f2>
 800df94:	2301      	movs	r3, #1
 800df96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800df9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9c:	1c9a      	adds	r2, r3, #2
 800df9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfa6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dfa8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dfaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfac:	441a      	add	r2, r3
 800dfae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dfb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb6:	441a      	add	r2, r3
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dfbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dfc0:	2b03      	cmp	r3, #3
 800dfc2:	d11e      	bne.n	800e002 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	3330      	adds	r3, #48	; 0x30
 800dfc8:	332a      	adds	r3, #42	; 0x2a
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f7fe fc56 	bl	800c87c <ld_word>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <find_volume+0x332>
 800dfd6:	230d      	movs	r3, #13
 800dfd8:	e0a8      	b.n	800e12c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dfda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfdc:	891b      	ldrh	r3, [r3, #8]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d001      	beq.n	800dfe6 <find_volume+0x33e>
 800dfe2:	230d      	movs	r3, #13
 800dfe4:	e0a2      	b.n	800e12c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dfe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe8:	3330      	adds	r3, #48	; 0x30
 800dfea:	332c      	adds	r3, #44	; 0x2c
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fc5d 	bl	800c8ac <ld_dword>
 800dff2:	4602      	mov	r2, r0
 800dff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dffa:	695b      	ldr	r3, [r3, #20]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	647b      	str	r3, [r7, #68]	; 0x44
 800e000:	e01f      	b.n	800e042 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e004:	891b      	ldrh	r3, [r3, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d101      	bne.n	800e00e <find_volume+0x366>
 800e00a:	230d      	movs	r3, #13
 800e00c:	e08e      	b.n	800e12c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e010:	6a1a      	ldr	r2, [r3, #32]
 800e012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e014:	441a      	add	r2, r3
 800e016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e018:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e01a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e01e:	2b02      	cmp	r3, #2
 800e020:	d103      	bne.n	800e02a <find_volume+0x382>
 800e022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	005b      	lsls	r3, r3, #1
 800e028:	e00a      	b.n	800e040 <find_volume+0x398>
 800e02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e02c:	695a      	ldr	r2, [r3, #20]
 800e02e:	4613      	mov	r3, r2
 800e030:	005b      	lsls	r3, r3, #1
 800e032:	4413      	add	r3, r2
 800e034:	085a      	lsrs	r2, r3, #1
 800e036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e040:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e048:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800e04c:	0a5b      	lsrs	r3, r3, #9
 800e04e:	429a      	cmp	r2, r3
 800e050:	d201      	bcs.n	800e056 <find_volume+0x3ae>
 800e052:	230d      	movs	r3, #13
 800e054:	e06a      	b.n	800e12c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e058:	f04f 32ff 	mov.w	r2, #4294967295
 800e05c:	611a      	str	r2, [r3, #16]
 800e05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e060:	691a      	ldr	r2, [r3, #16]
 800e062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e064:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e068:	2280      	movs	r2, #128	; 0x80
 800e06a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e06c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800e070:	2b03      	cmp	r3, #3
 800e072:	d149      	bne.n	800e108 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e076:	3330      	adds	r3, #48	; 0x30
 800e078:	3330      	adds	r3, #48	; 0x30
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fbfe 	bl	800c87c <ld_word>
 800e080:	4603      	mov	r3, r0
 800e082:	2b01      	cmp	r3, #1
 800e084:	d140      	bne.n	800e108 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e088:	3301      	adds	r3, #1
 800e08a:	4619      	mov	r1, r3
 800e08c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e08e:	f7fe fea5 	bl	800cddc <move_window>
 800e092:	4603      	mov	r3, r0
 800e094:	2b00      	cmp	r3, #0
 800e096:	d137      	bne.n	800e108 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800e098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09a:	2200      	movs	r2, #0
 800e09c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a0:	3330      	adds	r3, #48	; 0x30
 800e0a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7fe fbe8 	bl	800c87c <ld_word>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d127      	bne.n	800e108 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e0b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ba:	3330      	adds	r3, #48	; 0x30
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fe fbf5 	bl	800c8ac <ld_dword>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	4b1b      	ldr	r3, [pc, #108]	; (800e134 <find_volume+0x48c>)
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d11e      	bne.n	800e108 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0cc:	3330      	adds	r3, #48	; 0x30
 800e0ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fe fbea 	bl	800c8ac <ld_dword>
 800e0d8:	4602      	mov	r2, r0
 800e0da:	4b17      	ldr	r3, [pc, #92]	; (800e138 <find_volume+0x490>)
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d113      	bne.n	800e108 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e2:	3330      	adds	r3, #48	; 0x30
 800e0e4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7fe fbdf 	bl	800c8ac <ld_dword>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	3330      	adds	r3, #48	; 0x30
 800e0f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fe fbd5 	bl	800c8ac <ld_dword>
 800e102:	4602      	mov	r2, r0
 800e104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e106:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800e10e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <find_volume+0x494>)
 800e112:	881b      	ldrh	r3, [r3, #0]
 800e114:	3301      	adds	r3, #1
 800e116:	b29a      	uxth	r2, r3
 800e118:	4b08      	ldr	r3, [pc, #32]	; (800e13c <find_volume+0x494>)
 800e11a:	801a      	strh	r2, [r3, #0]
 800e11c:	4b07      	ldr	r3, [pc, #28]	; (800e13c <find_volume+0x494>)
 800e11e:	881a      	ldrh	r2, [r3, #0]
 800e120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e122:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e124:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e126:	f7fe fdf1 	bl	800cd0c <clear_lock>
#endif
	return FR_OK;
 800e12a:	2300      	movs	r3, #0
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3758      	adds	r7, #88	; 0x58
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}
 800e134:	41615252 	.word	0x41615252
 800e138:	61417272 	.word	0x61417272
 800e13c:	2000139c 	.word	0x2000139c

0800e140 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
 800e148:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e14a:	2309      	movs	r3, #9
 800e14c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d01c      	beq.n	800e18e <validate+0x4e>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d018      	beq.n	800e18e <validate+0x4e>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	781b      	ldrb	r3, [r3, #0]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d013      	beq.n	800e18e <validate+0x4e>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	889a      	ldrh	r2, [r3, #4]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	88db      	ldrh	r3, [r3, #6]
 800e170:	429a      	cmp	r2, r3
 800e172:	d10c      	bne.n	800e18e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	785b      	ldrb	r3, [r3, #1]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe fae0 	bl	800c740 <disk_status>
 800e180:	4603      	mov	r3, r0
 800e182:	f003 0301 	and.w	r3, r3, #1
 800e186:	2b00      	cmp	r3, #0
 800e188:	d101      	bne.n	800e18e <validate+0x4e>
			res = FR_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e18e:	7bfb      	ldrb	r3, [r7, #15]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d102      	bne.n	800e19a <validate+0x5a>
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	e000      	b.n	800e19c <validate+0x5c>
 800e19a:	2300      	movs	r3, #0
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	6013      	str	r3, [r2, #0]
	return res;
 800e1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}
	...

0800e1ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b088      	sub	sp, #32
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	60f8      	str	r0, [r7, #12]
 800e1b4:	60b9      	str	r1, [r7, #8]
 800e1b6:	4613      	mov	r3, r2
 800e1b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e1be:	f107 0310 	add.w	r3, r7, #16
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff fcd5 	bl	800db72 <get_ldnumber>
 800e1c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	da01      	bge.n	800e1d4 <f_mount+0x28>
 800e1d0:	230b      	movs	r3, #11
 800e1d2:	e02b      	b.n	800e22c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e1d4:	4a17      	ldr	r2, [pc, #92]	; (800e234 <f_mount+0x88>)
 800e1d6:	69fb      	ldr	r3, [r7, #28]
 800e1d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d005      	beq.n	800e1f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e1e4:	69b8      	ldr	r0, [r7, #24]
 800e1e6:	f7fe fd91 	bl	800cd0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d002      	beq.n	800e1fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	490d      	ldr	r1, [pc, #52]	; (800e234 <f_mount+0x88>)
 800e200:	69fb      	ldr	r3, [r7, #28]
 800e202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <f_mount+0x66>
 800e20c:	79fb      	ldrb	r3, [r7, #7]
 800e20e:	2b01      	cmp	r3, #1
 800e210:	d001      	beq.n	800e216 <f_mount+0x6a>
 800e212:	2300      	movs	r3, #0
 800e214:	e00a      	b.n	800e22c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e216:	f107 010c 	add.w	r1, r7, #12
 800e21a:	f107 0308 	add.w	r3, r7, #8
 800e21e:	2200      	movs	r2, #0
 800e220:	4618      	mov	r0, r3
 800e222:	f7ff fd41 	bl	800dca8 <find_volume>
 800e226:	4603      	mov	r3, r0
 800e228:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3720      	adds	r7, #32
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	20001398 	.word	0x20001398

0800e238 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b098      	sub	sp, #96	; 0x60
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	4613      	mov	r3, r2
 800e244:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d101      	bne.n	800e250 <f_open+0x18>
 800e24c:	2309      	movs	r3, #9
 800e24e:	e1ad      	b.n	800e5ac <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e250:	79fb      	ldrb	r3, [r7, #7]
 800e252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e256:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e258:	79fa      	ldrb	r2, [r7, #7]
 800e25a:	f107 0110 	add.w	r1, r7, #16
 800e25e:	f107 0308 	add.w	r3, r7, #8
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff fd20 	bl	800dca8 <find_volume>
 800e268:	4603      	mov	r3, r0
 800e26a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800e26e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e272:	2b00      	cmp	r3, #0
 800e274:	f040 8191 	bne.w	800e59a <f_open+0x362>
		dj.obj.fs = fs;
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e27c:	68ba      	ldr	r2, [r7, #8]
 800e27e:	f107 0314 	add.w	r3, r7, #20
 800e282:	4611      	mov	r1, r2
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff fc03 	bl	800da90 <follow_path>
 800e28a:	4603      	mov	r3, r0
 800e28c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e294:	2b00      	cmp	r3, #0
 800e296:	d11a      	bne.n	800e2ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e298:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e29c:	b25b      	sxtb	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	da03      	bge.n	800e2aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800e2a2:	2306      	movs	r3, #6
 800e2a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e2a8:	e011      	b.n	800e2ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2aa:	79fb      	ldrb	r3, [r7, #7]
 800e2ac:	f023 0301 	bic.w	r3, r3, #1
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	bf14      	ite	ne
 800e2b4:	2301      	movne	r3, #1
 800e2b6:	2300      	moveq	r3, #0
 800e2b8:	b2db      	uxtb	r3, r3
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	f107 0314 	add.w	r3, r7, #20
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	f7fe fbda 	bl	800ca7c <chk_lock>
 800e2c8:	4603      	mov	r3, r0
 800e2ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	f003 031c 	and.w	r3, r3, #28
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d07f      	beq.n	800e3d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800e2d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d017      	beq.n	800e310 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e2e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2e4:	2b04      	cmp	r3, #4
 800e2e6:	d10e      	bne.n	800e306 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e2e8:	f7fe fc24 	bl	800cb34 <enq_lock>
 800e2ec:	4603      	mov	r3, r0
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d006      	beq.n	800e300 <f_open+0xc8>
 800e2f2:	f107 0314 	add.w	r3, r7, #20
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff fb03 	bl	800d902 <dir_register>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	e000      	b.n	800e302 <f_open+0xca>
 800e300:	2312      	movs	r3, #18
 800e302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e306:	79fb      	ldrb	r3, [r7, #7]
 800e308:	f043 0308 	orr.w	r3, r3, #8
 800e30c:	71fb      	strb	r3, [r7, #7]
 800e30e:	e010      	b.n	800e332 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e310:	7ebb      	ldrb	r3, [r7, #26]
 800e312:	f003 0311 	and.w	r3, r3, #17
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <f_open+0xea>
					res = FR_DENIED;
 800e31a:	2307      	movs	r3, #7
 800e31c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e320:	e007      	b.n	800e332 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e322:	79fb      	ldrb	r3, [r7, #7]
 800e324:	f003 0304 	and.w	r3, r3, #4
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <f_open+0xfa>
 800e32c:	2308      	movs	r3, #8
 800e32e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e332:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e336:	2b00      	cmp	r3, #0
 800e338:	d168      	bne.n	800e40c <f_open+0x1d4>
 800e33a:	79fb      	ldrb	r3, [r7, #7]
 800e33c:	f003 0308 	and.w	r3, r3, #8
 800e340:	2b00      	cmp	r3, #0
 800e342:	d063      	beq.n	800e40c <f_open+0x1d4>
				dw = GET_FATTIME();
 800e344:	f7fb fa04 	bl	8009750 <get_fattime>
 800e348:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e34c:	330e      	adds	r3, #14
 800e34e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e350:	4618      	mov	r0, r3
 800e352:	f7fe fae9 	bl	800c928 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e358:	3316      	adds	r3, #22
 800e35a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fe fae3 	bl	800c928 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e364:	330b      	adds	r3, #11
 800e366:	2220      	movs	r2, #32
 800e368:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e36e:	4611      	mov	r1, r2
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff fa32 	bl	800d7da <ld_clust>
 800e376:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e37c:	2200      	movs	r2, #0
 800e37e:	4618      	mov	r0, r3
 800e380:	f7ff fa4a 	bl	800d818 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e386:	331c      	adds	r3, #28
 800e388:	2100      	movs	r1, #0
 800e38a:	4618      	mov	r0, r3
 800e38c:	f7fe facc 	bl	800c928 <st_dword>
					fs->wflag = 1;
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	2201      	movs	r2, #1
 800e394:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d037      	beq.n	800e40c <f_open+0x1d4>
						dw = fs->winsect;
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3a0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e3a2:	f107 0314 	add.w	r3, r7, #20
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe ff5d 	bl	800d26a <remove_chain>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e3b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d126      	bne.n	800e40c <f_open+0x1d4>
							res = move_window(fs, dw);
 800e3be:	693b      	ldr	r3, [r7, #16]
 800e3c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f7fe fd0a 	bl	800cddc <move_window>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e3ce:	693b      	ldr	r3, [r7, #16]
 800e3d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3d2:	3a01      	subs	r2, #1
 800e3d4:	60da      	str	r2, [r3, #12]
 800e3d6:	e019      	b.n	800e40c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e3d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d115      	bne.n	800e40c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e3e0:	7ebb      	ldrb	r3, [r7, #26]
 800e3e2:	f003 0310 	and.w	r3, r3, #16
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d003      	beq.n	800e3f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e3ea:	2304      	movs	r3, #4
 800e3ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e3f0:	e00c      	b.n	800e40c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	f003 0302 	and.w	r3, r3, #2
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d007      	beq.n	800e40c <f_open+0x1d4>
 800e3fc:	7ebb      	ldrb	r3, [r7, #26]
 800e3fe:	f003 0301 	and.w	r3, r3, #1
 800e402:	2b00      	cmp	r3, #0
 800e404:	d002      	beq.n	800e40c <f_open+0x1d4>
						res = FR_DENIED;
 800e406:	2307      	movs	r3, #7
 800e408:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e40c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e410:	2b00      	cmp	r3, #0
 800e412:	d128      	bne.n	800e466 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e414:	79fb      	ldrb	r3, [r7, #7]
 800e416:	f003 0308 	and.w	r3, r3, #8
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d003      	beq.n	800e426 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e41e:	79fb      	ldrb	r3, [r7, #7]
 800e420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e424:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e42e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e434:	79fb      	ldrb	r3, [r7, #7]
 800e436:	f023 0301 	bic.w	r3, r3, #1
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	bf14      	ite	ne
 800e43e:	2301      	movne	r3, #1
 800e440:	2300      	moveq	r3, #0
 800e442:	b2db      	uxtb	r3, r3
 800e444:	461a      	mov	r2, r3
 800e446:	f107 0314 	add.w	r3, r7, #20
 800e44a:	4611      	mov	r1, r2
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7fe fb93 	bl	800cb78 <inc_lock>
 800e452:	4602      	mov	r2, r0
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d102      	bne.n	800e466 <f_open+0x22e>
 800e460:	2302      	movs	r3, #2
 800e462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e466:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	f040 8095 	bne.w	800e59a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e474:	4611      	mov	r1, r2
 800e476:	4618      	mov	r0, r3
 800e478:	f7ff f9af 	bl	800d7da <ld_clust>
 800e47c:	4602      	mov	r2, r0
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e484:	331c      	adds	r3, #28
 800e486:	4618      	mov	r0, r3
 800e488:	f7fe fa10 	bl	800c8ac <ld_dword>
 800e48c:	4602      	mov	r2, r0
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e498:	693a      	ldr	r2, [r7, #16]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	88da      	ldrh	r2, [r3, #6]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	79fa      	ldrb	r2, [r7, #7]
 800e4aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	3330      	adds	r3, #48	; 0x30
 800e4c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fe fa7a 	bl	800c9c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e4ce:	79fb      	ldrb	r3, [r7, #7]
 800e4d0:	f003 0320 	and.w	r3, r3, #32
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d060      	beq.n	800e59a <f_open+0x362>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d05c      	beq.n	800e59a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68da      	ldr	r2, [r3, #12]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	895b      	ldrh	r3, [r3, #10]
 800e4ec:	025b      	lsls	r3, r3, #9
 800e4ee:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	689b      	ldr	r3, [r3, #8]
 800e4f4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	68db      	ldr	r3, [r3, #12]
 800e4fa:	657b      	str	r3, [r7, #84]	; 0x54
 800e4fc:	e016      	b.n	800e52c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e502:	4618      	mov	r0, r3
 800e504:	f7fe fd25 	bl	800cf52 <get_fat>
 800e508:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e50a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e50c:	2b01      	cmp	r3, #1
 800e50e:	d802      	bhi.n	800e516 <f_open+0x2de>
 800e510:	2302      	movs	r3, #2
 800e512:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e516:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51c:	d102      	bne.n	800e524 <f_open+0x2ec>
 800e51e:	2301      	movs	r3, #1
 800e520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	657b      	str	r3, [r7, #84]	; 0x54
 800e52c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e530:	2b00      	cmp	r3, #0
 800e532:	d103      	bne.n	800e53c <f_open+0x304>
 800e534:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e536:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e538:	429a      	cmp	r2, r3
 800e53a:	d8e0      	bhi.n	800e4fe <f_open+0x2c6>
				}
				fp->clust = clst;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e540:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e546:	2b00      	cmp	r3, #0
 800e548:	d127      	bne.n	800e59a <f_open+0x362>
 800e54a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e54c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e550:	2b00      	cmp	r3, #0
 800e552:	d022      	beq.n	800e59a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fe fcdb 	bl	800cf14 <clust2sect>
 800e55e:	6478      	str	r0, [r7, #68]	; 0x44
 800e560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e562:	2b00      	cmp	r3, #0
 800e564:	d103      	bne.n	800e56e <f_open+0x336>
						res = FR_INT_ERR;
 800e566:	2302      	movs	r3, #2
 800e568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e56c:	e015      	b.n	800e59a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e570:	0a5a      	lsrs	r2, r3, #9
 800e572:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e574:	441a      	add	r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	7858      	ldrb	r0, [r3, #1]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	6a1a      	ldr	r2, [r3, #32]
 800e588:	2301      	movs	r3, #1
 800e58a:	f7fe f919 	bl	800c7c0 <disk_read>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <f_open+0x362>
 800e594:	2301      	movs	r3, #1
 800e596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d002      	beq.n	800e5a8 <f_open+0x370>
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e5a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3760      	adds	r7, #96	; 0x60
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08e      	sub	sp, #56	; 0x38
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
 800e5c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	f107 0214 	add.w	r2, r7, #20
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff fdb3 	bl	800e140 <validate>
 800e5da:	4603      	mov	r3, r0
 800e5dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e5e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d107      	bne.n	800e5f8 <f_read+0x44>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	7d5b      	ldrb	r3, [r3, #21]
 800e5ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e5f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d002      	beq.n	800e5fe <f_read+0x4a>
 800e5f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e5fc:	e115      	b.n	800e82a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	7d1b      	ldrb	r3, [r3, #20]
 800e602:	f003 0301 	and.w	r3, r3, #1
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <f_read+0x5a>
 800e60a:	2307      	movs	r3, #7
 800e60c:	e10d      	b.n	800e82a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	68da      	ldr	r2, [r3, #12]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	699b      	ldr	r3, [r3, #24]
 800e616:	1ad3      	subs	r3, r2, r3
 800e618:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	429a      	cmp	r2, r3
 800e620:	f240 80fe 	bls.w	800e820 <f_read+0x26c>
 800e624:	6a3b      	ldr	r3, [r7, #32]
 800e626:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e628:	e0fa      	b.n	800e820 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	699b      	ldr	r3, [r3, #24]
 800e62e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e632:	2b00      	cmp	r3, #0
 800e634:	f040 80c6 	bne.w	800e7c4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	0a5b      	lsrs	r3, r3, #9
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	8952      	ldrh	r2, [r2, #10]
 800e642:	3a01      	subs	r2, #1
 800e644:	4013      	ands	r3, r2
 800e646:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e648:	69fb      	ldr	r3, [r7, #28]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d12f      	bne.n	800e6ae <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	2b00      	cmp	r3, #0
 800e654:	d103      	bne.n	800e65e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	689b      	ldr	r3, [r3, #8]
 800e65a:	633b      	str	r3, [r7, #48]	; 0x30
 800e65c:	e013      	b.n	800e686 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e662:	2b00      	cmp	r3, #0
 800e664:	d007      	beq.n	800e676 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	699b      	ldr	r3, [r3, #24]
 800e66a:	4619      	mov	r1, r3
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f7fe fef9 	bl	800d464 <clmt_clust>
 800e672:	6338      	str	r0, [r7, #48]	; 0x30
 800e674:	e007      	b.n	800e686 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e676:	68fa      	ldr	r2, [r7, #12]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	69db      	ldr	r3, [r3, #28]
 800e67c:	4619      	mov	r1, r3
 800e67e:	4610      	mov	r0, r2
 800e680:	f7fe fc67 	bl	800cf52 <get_fat>
 800e684:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e688:	2b01      	cmp	r3, #1
 800e68a:	d804      	bhi.n	800e696 <f_read+0xe2>
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2202      	movs	r2, #2
 800e690:	755a      	strb	r2, [r3, #21]
 800e692:	2302      	movs	r3, #2
 800e694:	e0c9      	b.n	800e82a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e69c:	d104      	bne.n	800e6a8 <f_read+0xf4>
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	755a      	strb	r2, [r3, #21]
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	e0c0      	b.n	800e82a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ac:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e6ae:	697a      	ldr	r2, [r7, #20]
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	69db      	ldr	r3, [r3, #28]
 800e6b4:	4619      	mov	r1, r3
 800e6b6:	4610      	mov	r0, r2
 800e6b8:	f7fe fc2c 	bl	800cf14 <clust2sect>
 800e6bc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d104      	bne.n	800e6ce <f_read+0x11a>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	2202      	movs	r2, #2
 800e6c8:	755a      	strb	r2, [r3, #21]
 800e6ca:	2302      	movs	r3, #2
 800e6cc:	e0ad      	b.n	800e82a <f_read+0x276>
			sect += csect;
 800e6ce:	69ba      	ldr	r2, [r7, #24]
 800e6d0:	69fb      	ldr	r3, [r7, #28]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	0a5b      	lsrs	r3, r3, #9
 800e6da:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d039      	beq.n	800e756 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e6e2:	69fa      	ldr	r2, [r7, #28]
 800e6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e6:	4413      	add	r3, r2
 800e6e8:	697a      	ldr	r2, [r7, #20]
 800e6ea:	8952      	ldrh	r2, [r2, #10]
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d905      	bls.n	800e6fc <f_read+0x148>
					cc = fs->csize - csect;
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	895b      	ldrh	r3, [r3, #10]
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	69fb      	ldr	r3, [r7, #28]
 800e6f8:	1ad3      	subs	r3, r2, r3
 800e6fa:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	7858      	ldrb	r0, [r3, #1]
 800e700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e706:	f7fe f85b 	bl	800c7c0 <disk_read>
 800e70a:	4603      	mov	r3, r0
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d004      	beq.n	800e71a <f_read+0x166>
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	2201      	movs	r2, #1
 800e714:	755a      	strb	r2, [r3, #21]
 800e716:	2301      	movs	r3, #1
 800e718:	e087      	b.n	800e82a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	7d1b      	ldrb	r3, [r3, #20]
 800e71e:	b25b      	sxtb	r3, r3
 800e720:	2b00      	cmp	r3, #0
 800e722:	da14      	bge.n	800e74e <f_read+0x19a>
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	6a1a      	ldr	r2, [r3, #32]
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e72e:	429a      	cmp	r2, r3
 800e730:	d90d      	bls.n	800e74e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	6a1a      	ldr	r2, [r3, #32]
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	1ad3      	subs	r3, r2, r3
 800e73a:	025b      	lsls	r3, r3, #9
 800e73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e73e:	18d0      	adds	r0, r2, r3
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	3330      	adds	r3, #48	; 0x30
 800e744:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e748:	4619      	mov	r1, r3
 800e74a:	f7fe f919 	bl	800c980 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	025b      	lsls	r3, r3, #9
 800e752:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e754:	e050      	b.n	800e7f8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	6a1b      	ldr	r3, [r3, #32]
 800e75a:	69ba      	ldr	r2, [r7, #24]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d02e      	beq.n	800e7be <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	7d1b      	ldrb	r3, [r3, #20]
 800e764:	b25b      	sxtb	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	da18      	bge.n	800e79c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	7858      	ldrb	r0, [r3, #1]
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6a1a      	ldr	r2, [r3, #32]
 800e778:	2301      	movs	r3, #1
 800e77a:	f7fe f841 	bl	800c800 <disk_write>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d004      	beq.n	800e78e <f_read+0x1da>
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2201      	movs	r2, #1
 800e788:	755a      	strb	r2, [r3, #21]
 800e78a:	2301      	movs	r3, #1
 800e78c:	e04d      	b.n	800e82a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	7d1b      	ldrb	r3, [r3, #20]
 800e792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e796:	b2da      	uxtb	r2, r3
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	7858      	ldrb	r0, [r3, #1]
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	69ba      	ldr	r2, [r7, #24]
 800e7aa:	f7fe f809 	bl	800c7c0 <disk_read>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d004      	beq.n	800e7be <f_read+0x20a>
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	755a      	strb	r2, [r3, #21]
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e035      	b.n	800e82a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	69ba      	ldr	r2, [r7, #24]
 800e7c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7cc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d901      	bls.n	800e7de <f_read+0x22a>
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	699b      	ldr	r3, [r3, #24]
 800e7e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ec:	4413      	add	r3, r2
 800e7ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7f4:	f7fe f8c4 	bl	800c980 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e7f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fc:	4413      	add	r3, r2
 800e7fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	699a      	ldr	r2, [r3, #24]
 800e804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e806:	441a      	add	r2, r3
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	619a      	str	r2, [r3, #24]
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	681a      	ldr	r2, [r3, #0]
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	441a      	add	r2, r3
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	601a      	str	r2, [r3, #0]
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	f47f af01 	bne.w	800e62a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e828:	2300      	movs	r3, #0
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3738      	adds	r7, #56	; 0x38
 800e82e:	46bd      	mov	sp, r7
 800e830:	bd80      	pop	{r7, pc}

0800e832 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e832:	b580      	push	{r7, lr}
 800e834:	b086      	sub	sp, #24
 800e836:	af00      	add	r7, sp, #0
 800e838:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	f107 0208 	add.w	r2, r7, #8
 800e840:	4611      	mov	r1, r2
 800e842:	4618      	mov	r0, r3
 800e844:	f7ff fc7c 	bl	800e140 <validate>
 800e848:	4603      	mov	r3, r0
 800e84a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d168      	bne.n	800e924 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	7d1b      	ldrb	r3, [r3, #20]
 800e856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d062      	beq.n	800e924 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	7d1b      	ldrb	r3, [r3, #20]
 800e862:	b25b      	sxtb	r3, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	da15      	bge.n	800e894 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	7858      	ldrb	r0, [r3, #1]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6a1a      	ldr	r2, [r3, #32]
 800e876:	2301      	movs	r3, #1
 800e878:	f7fd ffc2 	bl	800c800 <disk_write>
 800e87c:	4603      	mov	r3, r0
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d001      	beq.n	800e886 <f_sync+0x54>
 800e882:	2301      	movs	r3, #1
 800e884:	e04f      	b.n	800e926 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	7d1b      	ldrb	r3, [r3, #20]
 800e88a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e894:	f7fa ff5c 	bl	8009750 <get_fattime>
 800e898:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8a0:	4619      	mov	r1, r3
 800e8a2:	4610      	mov	r0, r2
 800e8a4:	f7fe fa9a 	bl	800cddc <move_window>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e8ac:	7dfb      	ldrb	r3, [r7, #23]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d138      	bne.n	800e924 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8b6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	330b      	adds	r3, #11
 800e8bc:	781a      	ldrb	r2, [r3, #0]
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	330b      	adds	r3, #11
 800e8c2:	f042 0220 	orr.w	r2, r2, #32
 800e8c6:	b2d2      	uxtb	r2, r2
 800e8c8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6818      	ldr	r0, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	689b      	ldr	r3, [r3, #8]
 800e8d2:	461a      	mov	r2, r3
 800e8d4:	68f9      	ldr	r1, [r7, #12]
 800e8d6:	f7fe ff9f 	bl	800d818 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f103 021c 	add.w	r2, r3, #28
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4610      	mov	r0, r2
 800e8e8:	f7fe f81e 	bl	800c928 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	3316      	adds	r3, #22
 800e8f0:	6939      	ldr	r1, [r7, #16]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f7fe f818 	bl	800c928 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	3312      	adds	r3, #18
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fd fff7 	bl	800c8f2 <st_word>
					fs->wflag = 1;
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2201      	movs	r2, #1
 800e908:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e90a:	68bb      	ldr	r3, [r7, #8]
 800e90c:	4618      	mov	r0, r3
 800e90e:	f7fe fa93 	bl	800ce38 <sync_fs>
 800e912:	4603      	mov	r3, r0
 800e914:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	7d1b      	ldrb	r3, [r3, #20]
 800e91a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e924:	7dfb      	ldrb	r3, [r7, #23]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3718      	adds	r7, #24
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b084      	sub	sp, #16
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff ff7b 	bl	800e832 <f_sync>
 800e93c:	4603      	mov	r3, r0
 800e93e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d118      	bne.n	800e978 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f107 0208 	add.w	r2, r7, #8
 800e94c:	4611      	mov	r1, r2
 800e94e:	4618      	mov	r0, r3
 800e950:	f7ff fbf6 	bl	800e140 <validate>
 800e954:	4603      	mov	r3, r0
 800e956:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10c      	bne.n	800e978 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	691b      	ldr	r3, [r3, #16]
 800e962:	4618      	mov	r0, r3
 800e964:	f7fe f996 	bl	800cc94 <dec_lock>
 800e968:	4603      	mov	r3, r0
 800e96a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d102      	bne.n	800e978 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2200      	movs	r2, #0
 800e976:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e978:	7bfb      	ldrb	r3, [r7, #15]
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3710      	adds	r7, #16
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e982:	b580      	push	{r7, lr}
 800e984:	b090      	sub	sp, #64	; 0x40
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
 800e98a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f107 0208 	add.w	r2, r7, #8
 800e992:	4611      	mov	r1, r2
 800e994:	4618      	mov	r0, r3
 800e996:	f7ff fbd3 	bl	800e140 <validate>
 800e99a:	4603      	mov	r3, r0
 800e99c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e9a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d103      	bne.n	800e9b0 <f_lseek+0x2e>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	7d5b      	ldrb	r3, [r3, #21]
 800e9ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e9b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d002      	beq.n	800e9be <f_lseek+0x3c>
 800e9b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e9bc:	e1e6      	b.n	800ed8c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f000 80d1 	beq.w	800eb6a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9ce:	d15a      	bne.n	800ea86 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d8:	1d1a      	adds	r2, r3, #4
 800e9da:	627a      	str	r2, [r7, #36]	; 0x24
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	617b      	str	r3, [r7, #20]
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	689b      	ldr	r3, [r3, #8]
 800e9e8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d03a      	beq.n	800ea66 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	613b      	str	r3, [r7, #16]
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9fa:	3302      	adds	r3, #2
 800e9fc:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea00:	60fb      	str	r3, [r7, #12]
 800ea02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea04:	3301      	adds	r3, #1
 800ea06:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	f7fe faa0 	bl	800cf52 <get_fat>
 800ea12:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800ea14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d804      	bhi.n	800ea24 <f_lseek+0xa2>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2202      	movs	r2, #2
 800ea1e:	755a      	strb	r2, [r3, #21]
 800ea20:	2302      	movs	r3, #2
 800ea22:	e1b3      	b.n	800ed8c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ea24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea2a:	d104      	bne.n	800ea36 <f_lseek+0xb4>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	755a      	strb	r2, [r3, #21]
 800ea32:	2301      	movs	r3, #1
 800ea34:	e1aa      	b.n	800ed8c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d0de      	beq.n	800e9fe <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800ea40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d809      	bhi.n	800ea5c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800ea48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4a:	1d1a      	adds	r2, r3, #4
 800ea4c:	627a      	str	r2, [r7, #36]	; 0x24
 800ea4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	1d1a      	adds	r2, r3, #4
 800ea56:	627a      	str	r2, [r7, #36]	; 0x24
 800ea58:	693a      	ldr	r2, [r7, #16]
 800ea5a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	695b      	ldr	r3, [r3, #20]
 800ea60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d3c4      	bcc.n	800e9f0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea6c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800ea6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d803      	bhi.n	800ea7e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	2200      	movs	r2, #0
 800ea7a:	601a      	str	r2, [r3, #0]
 800ea7c:	e184      	b.n	800ed88 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800ea7e:	2311      	movs	r3, #17
 800ea80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ea84:	e180      	b.n	800ed88 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	68db      	ldr	r3, [r3, #12]
 800ea8a:	683a      	ldr	r2, [r7, #0]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d902      	bls.n	800ea96 <f_lseek+0x114>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	683a      	ldr	r2, [r7, #0]
 800ea9a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	f000 8172 	beq.w	800ed88 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	3b01      	subs	r3, #1
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7fe fcda 	bl	800d464 <clmt_clust>
 800eab0:	4602      	mov	r2, r0
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	69db      	ldr	r3, [r3, #28]
 800eabc:	4619      	mov	r1, r3
 800eabe:	4610      	mov	r0, r2
 800eac0:	f7fe fa28 	bl	800cf14 <clust2sect>
 800eac4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800eac6:	69bb      	ldr	r3, [r7, #24]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d104      	bne.n	800ead6 <f_lseek+0x154>
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2202      	movs	r2, #2
 800ead0:	755a      	strb	r2, [r3, #21]
 800ead2:	2302      	movs	r3, #2
 800ead4:	e15a      	b.n	800ed8c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	3b01      	subs	r3, #1
 800eada:	0a5b      	lsrs	r3, r3, #9
 800eadc:	68ba      	ldr	r2, [r7, #8]
 800eade:	8952      	ldrh	r2, [r2, #10]
 800eae0:	3a01      	subs	r2, #1
 800eae2:	4013      	ands	r3, r2
 800eae4:	69ba      	ldr	r2, [r7, #24]
 800eae6:	4413      	add	r3, r2
 800eae8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	699b      	ldr	r3, [r3, #24]
 800eaee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 8148 	beq.w	800ed88 <f_lseek+0x406>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a1b      	ldr	r3, [r3, #32]
 800eafc:	69ba      	ldr	r2, [r7, #24]
 800eafe:	429a      	cmp	r2, r3
 800eb00:	f000 8142 	beq.w	800ed88 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	7d1b      	ldrb	r3, [r3, #20]
 800eb08:	b25b      	sxtb	r3, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	da18      	bge.n	800eb40 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	7858      	ldrb	r0, [r3, #1]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a1a      	ldr	r2, [r3, #32]
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	f7fd fe6f 	bl	800c800 <disk_write>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d004      	beq.n	800eb32 <f_lseek+0x1b0>
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2201      	movs	r2, #1
 800eb2c:	755a      	strb	r2, [r3, #21]
 800eb2e:	2301      	movs	r3, #1
 800eb30:	e12c      	b.n	800ed8c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	7d1b      	ldrb	r3, [r3, #20]
 800eb36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb3a:	b2da      	uxtb	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	7858      	ldrb	r0, [r3, #1]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	f7fd fe37 	bl	800c7c0 <disk_read>
 800eb52:	4603      	mov	r3, r0
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <f_lseek+0x1e0>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	755a      	strb	r2, [r3, #21]
 800eb5e:	2301      	movs	r3, #1
 800eb60:	e114      	b.n	800ed8c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	69ba      	ldr	r2, [r7, #24]
 800eb66:	621a      	str	r2, [r3, #32]
 800eb68:	e10e      	b.n	800ed88 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	68db      	ldr	r3, [r3, #12]
 800eb6e:	683a      	ldr	r2, [r7, #0]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d908      	bls.n	800eb86 <f_lseek+0x204>
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	7d1b      	ldrb	r3, [r3, #20]
 800eb78:	f003 0302 	and.w	r3, r3, #2
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d102      	bne.n	800eb86 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	699b      	ldr	r3, [r3, #24]
 800eb8a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	637b      	str	r3, [r7, #52]	; 0x34
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb94:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	f000 80a7 	beq.w	800ecec <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	895b      	ldrh	r3, [r3, #10]
 800eba2:	025b      	lsls	r3, r3, #9
 800eba4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d01b      	beq.n	800ebe4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	1e5a      	subs	r2, r3, #1
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800ebb6:	6a3b      	ldr	r3, [r7, #32]
 800ebb8:	1e59      	subs	r1, r3, #1
 800ebba:	69fb      	ldr	r3, [r7, #28]
 800ebbc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d30f      	bcc.n	800ebe4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800ebc4:	6a3b      	ldr	r3, [r7, #32]
 800ebc6:	1e5a      	subs	r2, r3, #1
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	425b      	negs	r3, r3
 800ebcc:	401a      	ands	r2, r3
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	699b      	ldr	r3, [r3, #24]
 800ebd6:	683a      	ldr	r2, [r7, #0]
 800ebd8:	1ad3      	subs	r3, r2, r3
 800ebda:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	69db      	ldr	r3, [r3, #28]
 800ebe0:	63bb      	str	r3, [r7, #56]	; 0x38
 800ebe2:	e022      	b.n	800ec2a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	689b      	ldr	r3, [r3, #8]
 800ebe8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800ebea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d119      	bne.n	800ec24 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7fe fb9d 	bl	800d334 <create_chain>
 800ebfa:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800ebfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d104      	bne.n	800ec0c <f_lseek+0x28a>
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2202      	movs	r2, #2
 800ec06:	755a      	strb	r2, [r3, #21]
 800ec08:	2302      	movs	r3, #2
 800ec0a:	e0bf      	b.n	800ed8c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d104      	bne.n	800ec1e <f_lseek+0x29c>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2201      	movs	r2, #1
 800ec18:	755a      	strb	r2, [r3, #21]
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e0b6      	b.n	800ed8c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec22:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec28:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ec2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d05d      	beq.n	800ecec <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800ec30:	e03a      	b.n	800eca8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	69fb      	ldr	r3, [r7, #28]
 800ec36:	1ad3      	subs	r3, r2, r3
 800ec38:	603b      	str	r3, [r7, #0]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	699a      	ldr	r2, [r3, #24]
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	441a      	add	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	7d1b      	ldrb	r3, [r3, #20]
 800ec4a:	f003 0302 	and.w	r3, r3, #2
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d00b      	beq.n	800ec6a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fe fb6c 	bl	800d334 <create_chain>
 800ec5c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ec5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d108      	bne.n	800ec76 <f_lseek+0x2f4>
							ofs = 0; break;
 800ec64:	2300      	movs	r3, #0
 800ec66:	603b      	str	r3, [r7, #0]
 800ec68:	e022      	b.n	800ecb0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f7fe f96f 	bl	800cf52 <get_fat>
 800ec74:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ec76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec7c:	d104      	bne.n	800ec88 <f_lseek+0x306>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	755a      	strb	r2, [r3, #21]
 800ec84:	2301      	movs	r3, #1
 800ec86:	e081      	b.n	800ed8c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ec88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8a:	2b01      	cmp	r3, #1
 800ec8c:	d904      	bls.n	800ec98 <f_lseek+0x316>
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	695b      	ldr	r3, [r3, #20]
 800ec92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec94:	429a      	cmp	r2, r3
 800ec96:	d304      	bcc.n	800eca2 <f_lseek+0x320>
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2202      	movs	r2, #2
 800ec9c:	755a      	strb	r2, [r3, #21]
 800ec9e:	2302      	movs	r3, #2
 800eca0:	e074      	b.n	800ed8c <f_lseek+0x40a>
					fp->clust = clst;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eca6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800eca8:	683a      	ldr	r2, [r7, #0]
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d8c0      	bhi.n	800ec32 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	699a      	ldr	r2, [r3, #24]
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	441a      	add	r2, r3
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d012      	beq.n	800ecec <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ecc6:	68bb      	ldr	r3, [r7, #8]
 800ecc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7fe f922 	bl	800cf14 <clust2sect>
 800ecd0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ecd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d104      	bne.n	800ece2 <f_lseek+0x360>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2202      	movs	r2, #2
 800ecdc:	755a      	strb	r2, [r3, #21]
 800ecde:	2302      	movs	r3, #2
 800ece0:	e054      	b.n	800ed8c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	0a5b      	lsrs	r3, r3, #9
 800ece6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ece8:	4413      	add	r3, r2
 800ecea:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	699a      	ldr	r2, [r3, #24]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	68db      	ldr	r3, [r3, #12]
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d90a      	bls.n	800ed0e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	699a      	ldr	r2, [r3, #24]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	7d1b      	ldrb	r3, [r3, #20]
 800ed04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed08:	b2da      	uxtb	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	699b      	ldr	r3, [r3, #24]
 800ed12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d036      	beq.n	800ed88 <f_lseek+0x406>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d031      	beq.n	800ed88 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	7d1b      	ldrb	r3, [r3, #20]
 800ed28:	b25b      	sxtb	r3, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da18      	bge.n	800ed60 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ed2e:	68bb      	ldr	r3, [r7, #8]
 800ed30:	7858      	ldrb	r0, [r3, #1]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6a1a      	ldr	r2, [r3, #32]
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	f7fd fd5f 	bl	800c800 <disk_write>
 800ed42:	4603      	mov	r3, r0
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d004      	beq.n	800ed52 <f_lseek+0x3d0>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	755a      	strb	r2, [r3, #21]
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e01c      	b.n	800ed8c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	7d1b      	ldrb	r3, [r3, #20]
 800ed56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ed5a:	b2da      	uxtb	r2, r3
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	7858      	ldrb	r0, [r3, #1]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed6e:	f7fd fd27 	bl	800c7c0 <disk_read>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d004      	beq.n	800ed82 <f_lseek+0x400>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	755a      	strb	r2, [r3, #21]
 800ed7e:	2301      	movs	r3, #1
 800ed80:	e004      	b.n	800ed8c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ed86:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ed88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3740      	adds	r7, #64	; 0x40
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	60f8      	str	r0, [r7, #12]
 800ed9c:	60b9      	str	r1, [r7, #8]
 800ed9e:	4613      	mov	r3, r2
 800eda0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800eda2:	2301      	movs	r3, #1
 800eda4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800edaa:	4b1f      	ldr	r3, [pc, #124]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edac:	7a5b      	ldrb	r3, [r3, #9]
 800edae:	b2db      	uxtb	r3, r3
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d131      	bne.n	800ee18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800edb4:	4b1c      	ldr	r3, [pc, #112]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edb6:	7a5b      	ldrb	r3, [r3, #9]
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	461a      	mov	r2, r3
 800edbc:	4b1a      	ldr	r3, [pc, #104]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edbe:	2100      	movs	r1, #0
 800edc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800edc2:	4b19      	ldr	r3, [pc, #100]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edc4:	7a5b      	ldrb	r3, [r3, #9]
 800edc6:	b2db      	uxtb	r3, r3
 800edc8:	4a17      	ldr	r2, [pc, #92]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edca:	009b      	lsls	r3, r3, #2
 800edcc:	4413      	add	r3, r2
 800edce:	68fa      	ldr	r2, [r7, #12]
 800edd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800edd2:	4b15      	ldr	r3, [pc, #84]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edd4:	7a5b      	ldrb	r3, [r3, #9]
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	461a      	mov	r2, r3
 800edda:	4b13      	ldr	r3, [pc, #76]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800eddc:	4413      	add	r3, r2
 800edde:	79fa      	ldrb	r2, [r7, #7]
 800ede0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ede2:	4b11      	ldr	r3, [pc, #68]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800ede4:	7a5b      	ldrb	r3, [r3, #9]
 800ede6:	b2db      	uxtb	r3, r3
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	b2d1      	uxtb	r1, r2
 800edec:	4a0e      	ldr	r2, [pc, #56]	; (800ee28 <FATFS_LinkDriverEx+0x94>)
 800edee:	7251      	strb	r1, [r2, #9]
 800edf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800edf2:	7dbb      	ldrb	r3, [r7, #22]
 800edf4:	3330      	adds	r3, #48	; 0x30
 800edf6:	b2da      	uxtb	r2, r3
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	3301      	adds	r3, #1
 800ee00:	223a      	movs	r2, #58	; 0x3a
 800ee02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ee04:	68bb      	ldr	r3, [r7, #8]
 800ee06:	3302      	adds	r3, #2
 800ee08:	222f      	movs	r2, #47	; 0x2f
 800ee0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	3303      	adds	r3, #3
 800ee10:	2200      	movs	r2, #0
 800ee12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ee14:	2300      	movs	r3, #0
 800ee16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ee18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	371c      	adds	r7, #28
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee24:	4770      	bx	lr
 800ee26:	bf00      	nop
 800ee28:	200013c0 	.word	0x200013c0

0800ee2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b082      	sub	sp, #8
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
 800ee34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ee36:	2200      	movs	r2, #0
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f7ff ffaa 	bl	800ed94 <FATFS_LinkDriverEx>
 800ee40:	4603      	mov	r3, r0
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3708      	adds	r7, #8
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
	...

0800ee4c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ee50:	2201      	movs	r2, #1
 800ee52:	490e      	ldr	r1, [pc, #56]	; (800ee8c <MX_USB_HOST_Init+0x40>)
 800ee54:	480e      	ldr	r0, [pc, #56]	; (800ee90 <MX_USB_HOST_Init+0x44>)
 800ee56:	f7fc f919 	bl	800b08c <USBH_Init>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ee60:	f7f2 ffa8 	bl	8001db4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800ee64:	490b      	ldr	r1, [pc, #44]	; (800ee94 <MX_USB_HOST_Init+0x48>)
 800ee66:	480a      	ldr	r0, [pc, #40]	; (800ee90 <MX_USB_HOST_Init+0x44>)
 800ee68:	f7fc f99e 	bl	800b1a8 <USBH_RegisterClass>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ee72:	f7f2 ff9f 	bl	8001db4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ee76:	4806      	ldr	r0, [pc, #24]	; (800ee90 <MX_USB_HOST_Init+0x44>)
 800ee78:	f7fc fa22 	bl	800b2c0 <USBH_Start>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d001      	beq.n	800ee86 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ee82:	f7f2 ff97 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ee86:	bf00      	nop
 800ee88:	bd80      	pop	{r7, pc}
 800ee8a:	bf00      	nop
 800ee8c:	0800eead 	.word	0x0800eead
 800ee90:	20001aa0 	.word	0x20001aa0
 800ee94:	20000020 	.word	0x20000020

0800ee98 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ee9c:	4802      	ldr	r0, [pc, #8]	; (800eea8 <MX_USB_HOST_Process+0x10>)
 800ee9e:	f7fc fa1f 	bl	800b2e0 <USBH_Process>
}
 800eea2:	bf00      	nop
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20001aa0 	.word	0x20001aa0

0800eeac <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eeb8:	78fb      	ldrb	r3, [r7, #3]
 800eeba:	3b01      	subs	r3, #1
 800eebc:	2b04      	cmp	r3, #4
 800eebe:	d819      	bhi.n	800eef4 <USBH_UserProcess+0x48>
 800eec0:	a201      	add	r2, pc, #4	; (adr r2, 800eec8 <USBH_UserProcess+0x1c>)
 800eec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec6:	bf00      	nop
 800eec8:	0800eef5 	.word	0x0800eef5
 800eecc:	0800eee5 	.word	0x0800eee5
 800eed0:	0800eef5 	.word	0x0800eef5
 800eed4:	0800eeed 	.word	0x0800eeed
 800eed8:	0800eedd 	.word	0x0800eedd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800eedc:	4b09      	ldr	r3, [pc, #36]	; (800ef04 <USBH_UserProcess+0x58>)
 800eede:	2203      	movs	r2, #3
 800eee0:	701a      	strb	r2, [r3, #0]
  break;
 800eee2:	e008      	b.n	800eef6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800eee4:	4b07      	ldr	r3, [pc, #28]	; (800ef04 <USBH_UserProcess+0x58>)
 800eee6:	2202      	movs	r2, #2
 800eee8:	701a      	strb	r2, [r3, #0]
  break;
 800eeea:	e004      	b.n	800eef6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800eeec:	4b05      	ldr	r3, [pc, #20]	; (800ef04 <USBH_UserProcess+0x58>)
 800eeee:	2201      	movs	r2, #1
 800eef0:	701a      	strb	r2, [r3, #0]
  break;
 800eef2:	e000      	b.n	800eef6 <USBH_UserProcess+0x4a>

  default:
  break;
 800eef4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800eef6:	bf00      	nop
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	200013cc 	.word	0x200013cc

0800ef08 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08a      	sub	sp, #40	; 0x28
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef10:	f107 0314 	add.w	r3, r7, #20
 800ef14:	2200      	movs	r2, #0
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	605a      	str	r2, [r3, #4]
 800ef1a:	609a      	str	r2, [r3, #8]
 800ef1c:	60da      	str	r2, [r3, #12]
 800ef1e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ef28:	d147      	bne.n	800efba <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	613b      	str	r3, [r7, #16]
 800ef2e:	4b25      	ldr	r3, [pc, #148]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef32:	4a24      	ldr	r2, [pc, #144]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef34:	f043 0301 	orr.w	r3, r3, #1
 800ef38:	6313      	str	r3, [r2, #48]	; 0x30
 800ef3a:	4b22      	ldr	r3, [pc, #136]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef3e:	f003 0301 	and.w	r3, r3, #1
 800ef42:	613b      	str	r3, [r7, #16]
 800ef44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ef46:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ef4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef54:	f107 0314 	add.w	r3, r7, #20
 800ef58:	4619      	mov	r1, r3
 800ef5a:	481b      	ldr	r0, [pc, #108]	; (800efc8 <HAL_HCD_MspInit+0xc0>)
 800ef5c:	f7f4 f8cc 	bl	80030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ef60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ef64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef66:	2302      	movs	r3, #2
 800ef68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef6e:	2303      	movs	r3, #3
 800ef70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ef72:	230a      	movs	r3, #10
 800ef74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef76:	f107 0314 	add.w	r3, r7, #20
 800ef7a:	4619      	mov	r1, r3
 800ef7c:	4812      	ldr	r0, [pc, #72]	; (800efc8 <HAL_HCD_MspInit+0xc0>)
 800ef7e:	f7f4 f8bb 	bl	80030f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ef82:	4b10      	ldr	r3, [pc, #64]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef86:	4a0f      	ldr	r2, [pc, #60]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef8c:	6353      	str	r3, [r2, #52]	; 0x34
 800ef8e:	2300      	movs	r3, #0
 800ef90:	60fb      	str	r3, [r7, #12]
 800ef92:	4b0c      	ldr	r3, [pc, #48]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef96:	4a0b      	ldr	r2, [pc, #44]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800ef98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef9c:	6453      	str	r3, [r2, #68]	; 0x44
 800ef9e:	4b09      	ldr	r3, [pc, #36]	; (800efc4 <HAL_HCD_MspInit+0xbc>)
 800efa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800efaa:	2200      	movs	r2, #0
 800efac:	2100      	movs	r1, #0
 800efae:	2043      	movs	r0, #67	; 0x43
 800efb0:	f7f3 fc8d 	bl	80028ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800efb4:	2043      	movs	r0, #67	; 0x43
 800efb6:	f7f3 fca6 	bl	8002906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800efba:	bf00      	nop
 800efbc:	3728      	adds	r7, #40	; 0x28
 800efbe:	46bd      	mov	sp, r7
 800efc0:	bd80      	pop	{r7, pc}
 800efc2:	bf00      	nop
 800efc4:	40023800 	.word	0x40023800
 800efc8:	40020000 	.word	0x40020000

0800efcc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fc fd53 	bl	800ba86 <USBH_LL_IncTimer>
}
 800efe0:	bf00      	nop
 800efe2:	3708      	adds	r7, #8
 800efe4:	46bd      	mov	sp, r7
 800efe6:	bd80      	pop	{r7, pc}

0800efe8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800efe8:	b580      	push	{r7, lr}
 800efea:	b082      	sub	sp, #8
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7fc fd8b 	bl	800bb12 <USBH_LL_Connect>
}
 800effc:	bf00      	nop
 800effe:	3708      	adds	r7, #8
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f012:	4618      	mov	r0, r3
 800f014:	f7fc fd94 	bl	800bb40 <USBH_LL_Disconnect>
}
 800f018:	bf00      	nop
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	460b      	mov	r3, r1
 800f02a:	70fb      	strb	r3, [r7, #3]
 800f02c:	4613      	mov	r3, r2
 800f02e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f030:	bf00      	nop
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f04a:	4618      	mov	r0, r3
 800f04c:	f7fc fd45 	bl	800bada <USBH_LL_PortEnabled>
} 
 800f050:	bf00      	nop
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f066:	4618      	mov	r0, r3
 800f068:	f7fc fd45 	bl	800baf6 <USBH_LL_PortDisabled>
} 
 800f06c:	bf00      	nop
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f082:	2b01      	cmp	r3, #1
 800f084:	d12a      	bne.n	800f0dc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f086:	4a18      	ldr	r2, [pc, #96]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	4a15      	ldr	r2, [pc, #84]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f092:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f096:	4b14      	ldr	r3, [pc, #80]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f098:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f09c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f09e:	4b12      	ldr	r3, [pc, #72]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0a0:	2208      	movs	r2, #8
 800f0a2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f0a4:	4b10      	ldr	r3, [pc, #64]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0a6:	2201      	movs	r2, #1
 800f0a8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0aa:	4b0f      	ldr	r3, [pc, #60]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f0b0:	4b0d      	ldr	r3, [pc, #52]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0b2:	2202      	movs	r2, #2
 800f0b4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f0b6:	4b0c      	ldr	r3, [pc, #48]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f0bc:	480a      	ldr	r0, [pc, #40]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0be:	f7f4 f9e9 	bl	8003494 <HAL_HCD_Init>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f0c8:	f7f2 fe74 	bl	8001db4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f0cc:	4806      	ldr	r0, [pc, #24]	; (800f0e8 <USBH_LL_Init+0x74>)
 800f0ce:	f7f4 fded 	bl	8003cac <HAL_HCD_GetCurrentFrame>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	4619      	mov	r1, r3
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f7fc fcc6 	bl	800ba68 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}
 800f0e6:	bf00      	nop
 800f0e8:	20001e78 	.word	0x20001e78

0800f0ec <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b084      	sub	sp, #16
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f102:	4618      	mov	r0, r3
 800f104:	f7f4 fd5a 	bl	8003bbc <HAL_HCD_Start>
 800f108:	4603      	mov	r3, r0
 800f10a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f10c:	7bfb      	ldrb	r3, [r7, #15]
 800f10e:	4618      	mov	r0, r3
 800f110:	f000 f990 	bl	800f434 <USBH_Get_USB_Status>
 800f114:	4603      	mov	r3, r0
 800f116:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f118:	7bbb      	ldrb	r3, [r7, #14]
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3710      	adds	r7, #16
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b084      	sub	sp, #16
 800f126:	af00      	add	r7, sp, #0
 800f128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f12a:	2300      	movs	r3, #0
 800f12c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f12e:	2300      	movs	r3, #0
 800f130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f138:	4618      	mov	r0, r3
 800f13a:	f7f4 fd62 	bl	8003c02 <HAL_HCD_Stop>
 800f13e:	4603      	mov	r3, r0
 800f140:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f142:	7bfb      	ldrb	r3, [r7, #15]
 800f144:	4618      	mov	r0, r3
 800f146:	f000 f975 	bl	800f434 <USBH_Get_USB_Status>
 800f14a:	4603      	mov	r3, r0
 800f14c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800f14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f150:	4618      	mov	r0, r3
 800f152:	3710      	adds	r7, #16
 800f154:	46bd      	mov	sp, r7
 800f156:	bd80      	pop	{r7, pc}

0800f158 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f160:	2301      	movs	r3, #1
 800f162:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7f4 fdac 	bl	8003cc8 <HAL_HCD_GetCurrentSpeed>
 800f170:	4603      	mov	r3, r0
 800f172:	2b01      	cmp	r3, #1
 800f174:	d007      	beq.n	800f186 <USBH_LL_GetSpeed+0x2e>
 800f176:	2b01      	cmp	r3, #1
 800f178:	d302      	bcc.n	800f180 <USBH_LL_GetSpeed+0x28>
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d006      	beq.n	800f18c <USBH_LL_GetSpeed+0x34>
 800f17e:	e008      	b.n	800f192 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f180:	2300      	movs	r3, #0
 800f182:	73fb      	strb	r3, [r7, #15]
    break;
 800f184:	e008      	b.n	800f198 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f186:	2301      	movs	r3, #1
 800f188:	73fb      	strb	r3, [r7, #15]
    break;
 800f18a:	e005      	b.n	800f198 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f18c:	2302      	movs	r3, #2
 800f18e:	73fb      	strb	r3, [r7, #15]
    break;
 800f190:	e002      	b.n	800f198 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800f192:	2301      	movs	r3, #1
 800f194:	73fb      	strb	r3, [r7, #15]
    break;
 800f196:	bf00      	nop
  }
  return  speed;
 800f198:	7bfb      	ldrb	r3, [r7, #15]
}
 800f19a:	4618      	mov	r0, r3
 800f19c:	3710      	adds	r7, #16
 800f19e:	46bd      	mov	sp, r7
 800f1a0:	bd80      	pop	{r7, pc}

0800f1a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f1a2:	b580      	push	{r7, lr}
 800f1a4:	b084      	sub	sp, #16
 800f1a6:	af00      	add	r7, sp, #0
 800f1a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7f4 fd3f 	bl	8003c3c <HAL_HCD_ResetPort>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800f1c2:	7bfb      	ldrb	r3, [r7, #15]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	f000 f935 	bl	800f434 <USBH_Get_USB_Status>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3710      	adds	r7, #16
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f1ea:	78fa      	ldrb	r2, [r7, #3]
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f4 fd47 	bl	8003c82 <HAL_HCD_HC_GetXferCount>
 800f1f4:	4603      	mov	r3, r0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3708      	adds	r7, #8
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f1fe:	b590      	push	{r4, r7, lr}
 800f200:	b089      	sub	sp, #36	; 0x24
 800f202:	af04      	add	r7, sp, #16
 800f204:	6078      	str	r0, [r7, #4]
 800f206:	4608      	mov	r0, r1
 800f208:	4611      	mov	r1, r2
 800f20a:	461a      	mov	r2, r3
 800f20c:	4603      	mov	r3, r0
 800f20e:	70fb      	strb	r3, [r7, #3]
 800f210:	460b      	mov	r3, r1
 800f212:	70bb      	strb	r3, [r7, #2]
 800f214:	4613      	mov	r3, r2
 800f216:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f226:	787c      	ldrb	r4, [r7, #1]
 800f228:	78ba      	ldrb	r2, [r7, #2]
 800f22a:	78f9      	ldrb	r1, [r7, #3]
 800f22c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f22e:	9302      	str	r3, [sp, #8]
 800f230:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f234:	9301      	str	r3, [sp, #4]
 800f236:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	4623      	mov	r3, r4
 800f23e:	f7f4 f98b 	bl	8003558 <HAL_HCD_HC_Init>
 800f242:	4603      	mov	r3, r0
 800f244:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f246:	7bfb      	ldrb	r3, [r7, #15]
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f8f3 	bl	800f434 <USBH_Get_USB_Status>
 800f24e:	4603      	mov	r3, r0
 800f250:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f252:	7bbb      	ldrb	r3, [r7, #14]
}
 800f254:	4618      	mov	r0, r3
 800f256:	3714      	adds	r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd90      	pop	{r4, r7, pc}

0800f25c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b084      	sub	sp, #16
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
 800f264:	460b      	mov	r3, r1
 800f266:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f268:	2300      	movs	r3, #0
 800f26a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f26c:	2300      	movs	r3, #0
 800f26e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f276:	78fa      	ldrb	r2, [r7, #3]
 800f278:	4611      	mov	r1, r2
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7f4 fa04 	bl	8003688 <HAL_HCD_HC_Halt>
 800f280:	4603      	mov	r3, r0
 800f282:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f284:	7bfb      	ldrb	r3, [r7, #15]
 800f286:	4618      	mov	r0, r3
 800f288:	f000 f8d4 	bl	800f434 <USBH_Get_USB_Status>
 800f28c:	4603      	mov	r3, r0
 800f28e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f290:	7bbb      	ldrb	r3, [r7, #14]
}
 800f292:	4618      	mov	r0, r3
 800f294:	3710      	adds	r7, #16
 800f296:	46bd      	mov	sp, r7
 800f298:	bd80      	pop	{r7, pc}

0800f29a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f29a:	b590      	push	{r4, r7, lr}
 800f29c:	b089      	sub	sp, #36	; 0x24
 800f29e:	af04      	add	r7, sp, #16
 800f2a0:	6078      	str	r0, [r7, #4]
 800f2a2:	4608      	mov	r0, r1
 800f2a4:	4611      	mov	r1, r2
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	70fb      	strb	r3, [r7, #3]
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	70bb      	strb	r3, [r7, #2]
 800f2b0:	4613      	mov	r3, r2
 800f2b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800f2c2:	787c      	ldrb	r4, [r7, #1]
 800f2c4:	78ba      	ldrb	r2, [r7, #2]
 800f2c6:	78f9      	ldrb	r1, [r7, #3]
 800f2c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800f2cc:	9303      	str	r3, [sp, #12]
 800f2ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f2d0:	9302      	str	r3, [sp, #8]
 800f2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d4:	9301      	str	r3, [sp, #4]
 800f2d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f2da:	9300      	str	r3, [sp, #0]
 800f2dc:	4623      	mov	r3, r4
 800f2de:	f7f4 f9f7 	bl	80036d0 <HAL_HCD_HC_SubmitRequest>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f2e6:	7bfb      	ldrb	r3, [r7, #15]
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f000 f8a3 	bl	800f434 <USBH_Get_USB_Status>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800f2f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3714      	adds	r7, #20
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd90      	pop	{r4, r7, pc}

0800f2fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b082      	sub	sp, #8
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	460b      	mov	r3, r1
 800f306:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f30e:	78fa      	ldrb	r2, [r7, #3]
 800f310:	4611      	mov	r1, r2
 800f312:	4618      	mov	r0, r3
 800f314:	f7f4 fca0 	bl	8003c58 <HAL_HCD_HC_GetURBState>
 800f318:	4603      	mov	r3, r0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3708      	adds	r7, #8
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}

0800f322 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b082      	sub	sp, #8
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
 800f32a:	460b      	mov	r3, r1
 800f32c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f334:	2b01      	cmp	r3, #1
 800f336:	d103      	bne.n	800f340 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f338:	78fb      	ldrb	r3, [r7, #3]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f000 f8a6 	bl	800f48c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f340:	20c8      	movs	r0, #200	; 0xc8
 800f342:	f7f3 f9c7 	bl	80026d4 <HAL_Delay>
  return USBH_OK;
 800f346:	2300      	movs	r3, #0
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3708      	adds	r7, #8
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	460b      	mov	r3, r1
 800f35a:	70fb      	strb	r3, [r7, #3]
 800f35c:	4613      	mov	r3, r2
 800f35e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f366:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f368:	78fa      	ldrb	r2, [r7, #3]
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	4613      	mov	r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	4413      	add	r3, r2
 800f372:	00db      	lsls	r3, r3, #3
 800f374:	440b      	add	r3, r1
 800f376:	333b      	adds	r3, #59	; 0x3b
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00a      	beq.n	800f394 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f37e:	78fa      	ldrb	r2, [r7, #3]
 800f380:	68f9      	ldr	r1, [r7, #12]
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	00db      	lsls	r3, r3, #3
 800f38a:	440b      	add	r3, r1
 800f38c:	3350      	adds	r3, #80	; 0x50
 800f38e:	78ba      	ldrb	r2, [r7, #2]
 800f390:	701a      	strb	r2, [r3, #0]
 800f392:	e009      	b.n	800f3a8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f394:	78fa      	ldrb	r2, [r7, #3]
 800f396:	68f9      	ldr	r1, [r7, #12]
 800f398:	4613      	mov	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4413      	add	r3, r2
 800f39e:	00db      	lsls	r3, r3, #3
 800f3a0:	440b      	add	r3, r1
 800f3a2:	3351      	adds	r3, #81	; 0x51
 800f3a4:	78ba      	ldrb	r2, [r7, #2]
 800f3a6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f3a8:	2300      	movs	r3, #0
}
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	3714      	adds	r7, #20
 800f3ae:	46bd      	mov	sp, r7
 800f3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b4:	4770      	bx	lr

0800f3b6 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f3b6:	b480      	push	{r7}
 800f3b8:	b085      	sub	sp, #20
 800f3ba:	af00      	add	r7, sp, #0
 800f3bc:	6078      	str	r0, [r7, #4]
 800f3be:	460b      	mov	r3, r1
 800f3c0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f3cc:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f3ce:	78fa      	ldrb	r2, [r7, #3]
 800f3d0:	68b9      	ldr	r1, [r7, #8]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	009b      	lsls	r3, r3, #2
 800f3d6:	4413      	add	r3, r2
 800f3d8:	00db      	lsls	r3, r3, #3
 800f3da:	440b      	add	r3, r1
 800f3dc:	333b      	adds	r3, #59	; 0x3b
 800f3de:	781b      	ldrb	r3, [r3, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00a      	beq.n	800f3fa <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f3e4:	78fa      	ldrb	r2, [r7, #3]
 800f3e6:	68b9      	ldr	r1, [r7, #8]
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4413      	add	r3, r2
 800f3ee:	00db      	lsls	r3, r3, #3
 800f3f0:	440b      	add	r3, r1
 800f3f2:	3350      	adds	r3, #80	; 0x50
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	73fb      	strb	r3, [r7, #15]
 800f3f8:	e009      	b.n	800f40e <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f3fa:	78fa      	ldrb	r2, [r7, #3]
 800f3fc:	68b9      	ldr	r1, [r7, #8]
 800f3fe:	4613      	mov	r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	4413      	add	r3, r2
 800f404:	00db      	lsls	r3, r3, #3
 800f406:	440b      	add	r3, r1
 800f408:	3351      	adds	r3, #81	; 0x51
 800f40a:	781b      	ldrb	r3, [r3, #0]
 800f40c:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f40e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f410:	4618      	mov	r0, r3
 800f412:	3714      	adds	r7, #20
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr

0800f41c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7f3 f955 	bl	80026d4 <HAL_Delay>
}
 800f42a:	bf00      	nop
 800f42c:	3708      	adds	r7, #8
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
	...

0800f434 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f434:	b480      	push	{r7}
 800f436:	b085      	sub	sp, #20
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4603      	mov	r3, r0
 800f43c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f43e:	2300      	movs	r3, #0
 800f440:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	2b03      	cmp	r3, #3
 800f446:	d817      	bhi.n	800f478 <USBH_Get_USB_Status+0x44>
 800f448:	a201      	add	r2, pc, #4	; (adr r2, 800f450 <USBH_Get_USB_Status+0x1c>)
 800f44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f44e:	bf00      	nop
 800f450:	0800f461 	.word	0x0800f461
 800f454:	0800f467 	.word	0x0800f467
 800f458:	0800f46d 	.word	0x0800f46d
 800f45c:	0800f473 	.word	0x0800f473
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f460:	2300      	movs	r3, #0
 800f462:	73fb      	strb	r3, [r7, #15]
    break;
 800f464:	e00b      	b.n	800f47e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f466:	2302      	movs	r3, #2
 800f468:	73fb      	strb	r3, [r7, #15]
    break;
 800f46a:	e008      	b.n	800f47e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f46c:	2301      	movs	r3, #1
 800f46e:	73fb      	strb	r3, [r7, #15]
    break;
 800f470:	e005      	b.n	800f47e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f472:	2302      	movs	r3, #2
 800f474:	73fb      	strb	r3, [r7, #15]
    break;
 800f476:	e002      	b.n	800f47e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f478:	2302      	movs	r3, #2
 800f47a:	73fb      	strb	r3, [r7, #15]
    break;
 800f47c:	bf00      	nop
  }
  return usb_status;
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f480:	4618      	mov	r0, r3
 800f482:	3714      	adds	r7, #20
 800f484:	46bd      	mov	sp, r7
 800f486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48a:	4770      	bx	lr

0800f48c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	4603      	mov	r3, r0
 800f494:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800f496:	79fb      	ldrb	r3, [r7, #7]
 800f498:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d102      	bne.n	800f4a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	73fb      	strb	r3, [r7, #15]
 800f4a4:	e001      	b.n	800f4aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f4aa:	7bfb      	ldrb	r3, [r7, #15]
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	4803      	ldr	r0, [pc, #12]	; (800f4c0 <MX_DriverVbusFS+0x34>)
 800f4b2:	f7f3 ffa3 	bl	80033fc <HAL_GPIO_WritePin>
}
 800f4b6:	bf00      	nop
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	40020800 	.word	0x40020800

0800f4c4 <__errno>:
 800f4c4:	4b01      	ldr	r3, [pc, #4]	; (800f4cc <__errno+0x8>)
 800f4c6:	6818      	ldr	r0, [r3, #0]
 800f4c8:	4770      	bx	lr
 800f4ca:	bf00      	nop
 800f4cc:	20000040 	.word	0x20000040

0800f4d0 <__libc_init_array>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	4e0d      	ldr	r6, [pc, #52]	; (800f508 <__libc_init_array+0x38>)
 800f4d4:	4c0d      	ldr	r4, [pc, #52]	; (800f50c <__libc_init_array+0x3c>)
 800f4d6:	1ba4      	subs	r4, r4, r6
 800f4d8:	10a4      	asrs	r4, r4, #2
 800f4da:	2500      	movs	r5, #0
 800f4dc:	42a5      	cmp	r5, r4
 800f4de:	d109      	bne.n	800f4f4 <__libc_init_array+0x24>
 800f4e0:	4e0b      	ldr	r6, [pc, #44]	; (800f510 <__libc_init_array+0x40>)
 800f4e2:	4c0c      	ldr	r4, [pc, #48]	; (800f514 <__libc_init_array+0x44>)
 800f4e4:	f000 fc38 	bl	800fd58 <_init>
 800f4e8:	1ba4      	subs	r4, r4, r6
 800f4ea:	10a4      	asrs	r4, r4, #2
 800f4ec:	2500      	movs	r5, #0
 800f4ee:	42a5      	cmp	r5, r4
 800f4f0:	d105      	bne.n	800f4fe <__libc_init_array+0x2e>
 800f4f2:	bd70      	pop	{r4, r5, r6, pc}
 800f4f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f4f8:	4798      	blx	r3
 800f4fa:	3501      	adds	r5, #1
 800f4fc:	e7ee      	b.n	800f4dc <__libc_init_array+0xc>
 800f4fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f502:	4798      	blx	r3
 800f504:	3501      	adds	r5, #1
 800f506:	e7f2      	b.n	800f4ee <__libc_init_array+0x1e>
 800f508:	0800ffac 	.word	0x0800ffac
 800f50c:	0800ffac 	.word	0x0800ffac
 800f510:	0800ffac 	.word	0x0800ffac
 800f514:	0800ffb0 	.word	0x0800ffb0

0800f518 <malloc>:
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <malloc+0xc>)
 800f51a:	4601      	mov	r1, r0
 800f51c:	6818      	ldr	r0, [r3, #0]
 800f51e:	f000 b86d 	b.w	800f5fc <_malloc_r>
 800f522:	bf00      	nop
 800f524:	20000040 	.word	0x20000040

0800f528 <free>:
 800f528:	4b02      	ldr	r3, [pc, #8]	; (800f534 <free+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f000 b817 	b.w	800f560 <_free_r>
 800f532:	bf00      	nop
 800f534:	20000040 	.word	0x20000040

0800f538 <memcpy>:
 800f538:	b510      	push	{r4, lr}
 800f53a:	1e43      	subs	r3, r0, #1
 800f53c:	440a      	add	r2, r1
 800f53e:	4291      	cmp	r1, r2
 800f540:	d100      	bne.n	800f544 <memcpy+0xc>
 800f542:	bd10      	pop	{r4, pc}
 800f544:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f548:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f54c:	e7f7      	b.n	800f53e <memcpy+0x6>

0800f54e <memset>:
 800f54e:	4402      	add	r2, r0
 800f550:	4603      	mov	r3, r0
 800f552:	4293      	cmp	r3, r2
 800f554:	d100      	bne.n	800f558 <memset+0xa>
 800f556:	4770      	bx	lr
 800f558:	f803 1b01 	strb.w	r1, [r3], #1
 800f55c:	e7f9      	b.n	800f552 <memset+0x4>
	...

0800f560 <_free_r>:
 800f560:	b538      	push	{r3, r4, r5, lr}
 800f562:	4605      	mov	r5, r0
 800f564:	2900      	cmp	r1, #0
 800f566:	d045      	beq.n	800f5f4 <_free_r+0x94>
 800f568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f56c:	1f0c      	subs	r4, r1, #4
 800f56e:	2b00      	cmp	r3, #0
 800f570:	bfb8      	it	lt
 800f572:	18e4      	addlt	r4, r4, r3
 800f574:	f000 f8cc 	bl	800f710 <__malloc_lock>
 800f578:	4a1f      	ldr	r2, [pc, #124]	; (800f5f8 <_free_r+0x98>)
 800f57a:	6813      	ldr	r3, [r2, #0]
 800f57c:	4610      	mov	r0, r2
 800f57e:	b933      	cbnz	r3, 800f58e <_free_r+0x2e>
 800f580:	6063      	str	r3, [r4, #4]
 800f582:	6014      	str	r4, [r2, #0]
 800f584:	4628      	mov	r0, r5
 800f586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f58a:	f000 b8c2 	b.w	800f712 <__malloc_unlock>
 800f58e:	42a3      	cmp	r3, r4
 800f590:	d90c      	bls.n	800f5ac <_free_r+0x4c>
 800f592:	6821      	ldr	r1, [r4, #0]
 800f594:	1862      	adds	r2, r4, r1
 800f596:	4293      	cmp	r3, r2
 800f598:	bf04      	itt	eq
 800f59a:	681a      	ldreq	r2, [r3, #0]
 800f59c:	685b      	ldreq	r3, [r3, #4]
 800f59e:	6063      	str	r3, [r4, #4]
 800f5a0:	bf04      	itt	eq
 800f5a2:	1852      	addeq	r2, r2, r1
 800f5a4:	6022      	streq	r2, [r4, #0]
 800f5a6:	6004      	str	r4, [r0, #0]
 800f5a8:	e7ec      	b.n	800f584 <_free_r+0x24>
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	685a      	ldr	r2, [r3, #4]
 800f5ae:	b10a      	cbz	r2, 800f5b4 <_free_r+0x54>
 800f5b0:	42a2      	cmp	r2, r4
 800f5b2:	d9fa      	bls.n	800f5aa <_free_r+0x4a>
 800f5b4:	6819      	ldr	r1, [r3, #0]
 800f5b6:	1858      	adds	r0, r3, r1
 800f5b8:	42a0      	cmp	r0, r4
 800f5ba:	d10b      	bne.n	800f5d4 <_free_r+0x74>
 800f5bc:	6820      	ldr	r0, [r4, #0]
 800f5be:	4401      	add	r1, r0
 800f5c0:	1858      	adds	r0, r3, r1
 800f5c2:	4282      	cmp	r2, r0
 800f5c4:	6019      	str	r1, [r3, #0]
 800f5c6:	d1dd      	bne.n	800f584 <_free_r+0x24>
 800f5c8:	6810      	ldr	r0, [r2, #0]
 800f5ca:	6852      	ldr	r2, [r2, #4]
 800f5cc:	605a      	str	r2, [r3, #4]
 800f5ce:	4401      	add	r1, r0
 800f5d0:	6019      	str	r1, [r3, #0]
 800f5d2:	e7d7      	b.n	800f584 <_free_r+0x24>
 800f5d4:	d902      	bls.n	800f5dc <_free_r+0x7c>
 800f5d6:	230c      	movs	r3, #12
 800f5d8:	602b      	str	r3, [r5, #0]
 800f5da:	e7d3      	b.n	800f584 <_free_r+0x24>
 800f5dc:	6820      	ldr	r0, [r4, #0]
 800f5de:	1821      	adds	r1, r4, r0
 800f5e0:	428a      	cmp	r2, r1
 800f5e2:	bf04      	itt	eq
 800f5e4:	6811      	ldreq	r1, [r2, #0]
 800f5e6:	6852      	ldreq	r2, [r2, #4]
 800f5e8:	6062      	str	r2, [r4, #4]
 800f5ea:	bf04      	itt	eq
 800f5ec:	1809      	addeq	r1, r1, r0
 800f5ee:	6021      	streq	r1, [r4, #0]
 800f5f0:	605c      	str	r4, [r3, #4]
 800f5f2:	e7c7      	b.n	800f584 <_free_r+0x24>
 800f5f4:	bd38      	pop	{r3, r4, r5, pc}
 800f5f6:	bf00      	nop
 800f5f8:	200013d0 	.word	0x200013d0

0800f5fc <_malloc_r>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	1ccd      	adds	r5, r1, #3
 800f600:	f025 0503 	bic.w	r5, r5, #3
 800f604:	3508      	adds	r5, #8
 800f606:	2d0c      	cmp	r5, #12
 800f608:	bf38      	it	cc
 800f60a:	250c      	movcc	r5, #12
 800f60c:	2d00      	cmp	r5, #0
 800f60e:	4606      	mov	r6, r0
 800f610:	db01      	blt.n	800f616 <_malloc_r+0x1a>
 800f612:	42a9      	cmp	r1, r5
 800f614:	d903      	bls.n	800f61e <_malloc_r+0x22>
 800f616:	230c      	movs	r3, #12
 800f618:	6033      	str	r3, [r6, #0]
 800f61a:	2000      	movs	r0, #0
 800f61c:	bd70      	pop	{r4, r5, r6, pc}
 800f61e:	f000 f877 	bl	800f710 <__malloc_lock>
 800f622:	4a21      	ldr	r2, [pc, #132]	; (800f6a8 <_malloc_r+0xac>)
 800f624:	6814      	ldr	r4, [r2, #0]
 800f626:	4621      	mov	r1, r4
 800f628:	b991      	cbnz	r1, 800f650 <_malloc_r+0x54>
 800f62a:	4c20      	ldr	r4, [pc, #128]	; (800f6ac <_malloc_r+0xb0>)
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	b91b      	cbnz	r3, 800f638 <_malloc_r+0x3c>
 800f630:	4630      	mov	r0, r6
 800f632:	f000 f83d 	bl	800f6b0 <_sbrk_r>
 800f636:	6020      	str	r0, [r4, #0]
 800f638:	4629      	mov	r1, r5
 800f63a:	4630      	mov	r0, r6
 800f63c:	f000 f838 	bl	800f6b0 <_sbrk_r>
 800f640:	1c43      	adds	r3, r0, #1
 800f642:	d124      	bne.n	800f68e <_malloc_r+0x92>
 800f644:	230c      	movs	r3, #12
 800f646:	6033      	str	r3, [r6, #0]
 800f648:	4630      	mov	r0, r6
 800f64a:	f000 f862 	bl	800f712 <__malloc_unlock>
 800f64e:	e7e4      	b.n	800f61a <_malloc_r+0x1e>
 800f650:	680b      	ldr	r3, [r1, #0]
 800f652:	1b5b      	subs	r3, r3, r5
 800f654:	d418      	bmi.n	800f688 <_malloc_r+0x8c>
 800f656:	2b0b      	cmp	r3, #11
 800f658:	d90f      	bls.n	800f67a <_malloc_r+0x7e>
 800f65a:	600b      	str	r3, [r1, #0]
 800f65c:	50cd      	str	r5, [r1, r3]
 800f65e:	18cc      	adds	r4, r1, r3
 800f660:	4630      	mov	r0, r6
 800f662:	f000 f856 	bl	800f712 <__malloc_unlock>
 800f666:	f104 000b 	add.w	r0, r4, #11
 800f66a:	1d23      	adds	r3, r4, #4
 800f66c:	f020 0007 	bic.w	r0, r0, #7
 800f670:	1ac3      	subs	r3, r0, r3
 800f672:	d0d3      	beq.n	800f61c <_malloc_r+0x20>
 800f674:	425a      	negs	r2, r3
 800f676:	50e2      	str	r2, [r4, r3]
 800f678:	e7d0      	b.n	800f61c <_malloc_r+0x20>
 800f67a:	428c      	cmp	r4, r1
 800f67c:	684b      	ldr	r3, [r1, #4]
 800f67e:	bf16      	itet	ne
 800f680:	6063      	strne	r3, [r4, #4]
 800f682:	6013      	streq	r3, [r2, #0]
 800f684:	460c      	movne	r4, r1
 800f686:	e7eb      	b.n	800f660 <_malloc_r+0x64>
 800f688:	460c      	mov	r4, r1
 800f68a:	6849      	ldr	r1, [r1, #4]
 800f68c:	e7cc      	b.n	800f628 <_malloc_r+0x2c>
 800f68e:	1cc4      	adds	r4, r0, #3
 800f690:	f024 0403 	bic.w	r4, r4, #3
 800f694:	42a0      	cmp	r0, r4
 800f696:	d005      	beq.n	800f6a4 <_malloc_r+0xa8>
 800f698:	1a21      	subs	r1, r4, r0
 800f69a:	4630      	mov	r0, r6
 800f69c:	f000 f808 	bl	800f6b0 <_sbrk_r>
 800f6a0:	3001      	adds	r0, #1
 800f6a2:	d0cf      	beq.n	800f644 <_malloc_r+0x48>
 800f6a4:	6025      	str	r5, [r4, #0]
 800f6a6:	e7db      	b.n	800f660 <_malloc_r+0x64>
 800f6a8:	200013d0 	.word	0x200013d0
 800f6ac:	200013d4 	.word	0x200013d4

0800f6b0 <_sbrk_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4c06      	ldr	r4, [pc, #24]	; (800f6cc <_sbrk_r+0x1c>)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	4608      	mov	r0, r1
 800f6ba:	6023      	str	r3, [r4, #0]
 800f6bc:	f7f2 fe1c 	bl	80022f8 <_sbrk>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_sbrk_r+0x1a>
 800f6c4:	6823      	ldr	r3, [r4, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_sbrk_r+0x1a>
 800f6c8:	602b      	str	r3, [r5, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	2000213c 	.word	0x2000213c

0800f6d0 <_vsiprintf_r>:
 800f6d0:	b500      	push	{lr}
 800f6d2:	b09b      	sub	sp, #108	; 0x6c
 800f6d4:	9100      	str	r1, [sp, #0]
 800f6d6:	9104      	str	r1, [sp, #16]
 800f6d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6dc:	9105      	str	r1, [sp, #20]
 800f6de:	9102      	str	r1, [sp, #8]
 800f6e0:	4905      	ldr	r1, [pc, #20]	; (800f6f8 <_vsiprintf_r+0x28>)
 800f6e2:	9103      	str	r1, [sp, #12]
 800f6e4:	4669      	mov	r1, sp
 800f6e6:	f000 f86f 	bl	800f7c8 <_svfiprintf_r>
 800f6ea:	9b00      	ldr	r3, [sp, #0]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	701a      	strb	r2, [r3, #0]
 800f6f0:	b01b      	add	sp, #108	; 0x6c
 800f6f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800f6f6:	bf00      	nop
 800f6f8:	ffff0208 	.word	0xffff0208

0800f6fc <vsiprintf>:
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	460a      	mov	r2, r1
 800f700:	4601      	mov	r1, r0
 800f702:	4802      	ldr	r0, [pc, #8]	; (800f70c <vsiprintf+0x10>)
 800f704:	6800      	ldr	r0, [r0, #0]
 800f706:	f7ff bfe3 	b.w	800f6d0 <_vsiprintf_r>
 800f70a:	bf00      	nop
 800f70c:	20000040 	.word	0x20000040

0800f710 <__malloc_lock>:
 800f710:	4770      	bx	lr

0800f712 <__malloc_unlock>:
 800f712:	4770      	bx	lr

0800f714 <__ssputs_r>:
 800f714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f718:	688e      	ldr	r6, [r1, #8]
 800f71a:	429e      	cmp	r6, r3
 800f71c:	4682      	mov	sl, r0
 800f71e:	460c      	mov	r4, r1
 800f720:	4690      	mov	r8, r2
 800f722:	4699      	mov	r9, r3
 800f724:	d837      	bhi.n	800f796 <__ssputs_r+0x82>
 800f726:	898a      	ldrh	r2, [r1, #12]
 800f728:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f72c:	d031      	beq.n	800f792 <__ssputs_r+0x7e>
 800f72e:	6825      	ldr	r5, [r4, #0]
 800f730:	6909      	ldr	r1, [r1, #16]
 800f732:	1a6f      	subs	r7, r5, r1
 800f734:	6965      	ldr	r5, [r4, #20]
 800f736:	2302      	movs	r3, #2
 800f738:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f73c:	fb95 f5f3 	sdiv	r5, r5, r3
 800f740:	f109 0301 	add.w	r3, r9, #1
 800f744:	443b      	add	r3, r7
 800f746:	429d      	cmp	r5, r3
 800f748:	bf38      	it	cc
 800f74a:	461d      	movcc	r5, r3
 800f74c:	0553      	lsls	r3, r2, #21
 800f74e:	d530      	bpl.n	800f7b2 <__ssputs_r+0x9e>
 800f750:	4629      	mov	r1, r5
 800f752:	f7ff ff53 	bl	800f5fc <_malloc_r>
 800f756:	4606      	mov	r6, r0
 800f758:	b950      	cbnz	r0, 800f770 <__ssputs_r+0x5c>
 800f75a:	230c      	movs	r3, #12
 800f75c:	f8ca 3000 	str.w	r3, [sl]
 800f760:	89a3      	ldrh	r3, [r4, #12]
 800f762:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f766:	81a3      	strh	r3, [r4, #12]
 800f768:	f04f 30ff 	mov.w	r0, #4294967295
 800f76c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f770:	463a      	mov	r2, r7
 800f772:	6921      	ldr	r1, [r4, #16]
 800f774:	f7ff fee0 	bl	800f538 <memcpy>
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f77e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f782:	81a3      	strh	r3, [r4, #12]
 800f784:	6126      	str	r6, [r4, #16]
 800f786:	6165      	str	r5, [r4, #20]
 800f788:	443e      	add	r6, r7
 800f78a:	1bed      	subs	r5, r5, r7
 800f78c:	6026      	str	r6, [r4, #0]
 800f78e:	60a5      	str	r5, [r4, #8]
 800f790:	464e      	mov	r6, r9
 800f792:	454e      	cmp	r6, r9
 800f794:	d900      	bls.n	800f798 <__ssputs_r+0x84>
 800f796:	464e      	mov	r6, r9
 800f798:	4632      	mov	r2, r6
 800f79a:	4641      	mov	r1, r8
 800f79c:	6820      	ldr	r0, [r4, #0]
 800f79e:	f000 fa93 	bl	800fcc8 <memmove>
 800f7a2:	68a3      	ldr	r3, [r4, #8]
 800f7a4:	1b9b      	subs	r3, r3, r6
 800f7a6:	60a3      	str	r3, [r4, #8]
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	441e      	add	r6, r3
 800f7ac:	6026      	str	r6, [r4, #0]
 800f7ae:	2000      	movs	r0, #0
 800f7b0:	e7dc      	b.n	800f76c <__ssputs_r+0x58>
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	f000 faa1 	bl	800fcfa <_realloc_r>
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d1e2      	bne.n	800f784 <__ssputs_r+0x70>
 800f7be:	6921      	ldr	r1, [r4, #16]
 800f7c0:	4650      	mov	r0, sl
 800f7c2:	f7ff fecd 	bl	800f560 <_free_r>
 800f7c6:	e7c8      	b.n	800f75a <__ssputs_r+0x46>

0800f7c8 <_svfiprintf_r>:
 800f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7cc:	461d      	mov	r5, r3
 800f7ce:	898b      	ldrh	r3, [r1, #12]
 800f7d0:	061f      	lsls	r7, r3, #24
 800f7d2:	b09d      	sub	sp, #116	; 0x74
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	4616      	mov	r6, r2
 800f7da:	d50f      	bpl.n	800f7fc <_svfiprintf_r+0x34>
 800f7dc:	690b      	ldr	r3, [r1, #16]
 800f7de:	b96b      	cbnz	r3, 800f7fc <_svfiprintf_r+0x34>
 800f7e0:	2140      	movs	r1, #64	; 0x40
 800f7e2:	f7ff ff0b 	bl	800f5fc <_malloc_r>
 800f7e6:	6020      	str	r0, [r4, #0]
 800f7e8:	6120      	str	r0, [r4, #16]
 800f7ea:	b928      	cbnz	r0, 800f7f8 <_svfiprintf_r+0x30>
 800f7ec:	230c      	movs	r3, #12
 800f7ee:	f8c8 3000 	str.w	r3, [r8]
 800f7f2:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f6:	e0c8      	b.n	800f98a <_svfiprintf_r+0x1c2>
 800f7f8:	2340      	movs	r3, #64	; 0x40
 800f7fa:	6163      	str	r3, [r4, #20]
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f800:	2320      	movs	r3, #32
 800f802:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f806:	2330      	movs	r3, #48	; 0x30
 800f808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f80c:	9503      	str	r5, [sp, #12]
 800f80e:	f04f 0b01 	mov.w	fp, #1
 800f812:	4637      	mov	r7, r6
 800f814:	463d      	mov	r5, r7
 800f816:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f81a:	b10b      	cbz	r3, 800f820 <_svfiprintf_r+0x58>
 800f81c:	2b25      	cmp	r3, #37	; 0x25
 800f81e:	d13e      	bne.n	800f89e <_svfiprintf_r+0xd6>
 800f820:	ebb7 0a06 	subs.w	sl, r7, r6
 800f824:	d00b      	beq.n	800f83e <_svfiprintf_r+0x76>
 800f826:	4653      	mov	r3, sl
 800f828:	4632      	mov	r2, r6
 800f82a:	4621      	mov	r1, r4
 800f82c:	4640      	mov	r0, r8
 800f82e:	f7ff ff71 	bl	800f714 <__ssputs_r>
 800f832:	3001      	adds	r0, #1
 800f834:	f000 80a4 	beq.w	800f980 <_svfiprintf_r+0x1b8>
 800f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f83a:	4453      	add	r3, sl
 800f83c:	9309      	str	r3, [sp, #36]	; 0x24
 800f83e:	783b      	ldrb	r3, [r7, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 809d 	beq.w	800f980 <_svfiprintf_r+0x1b8>
 800f846:	2300      	movs	r3, #0
 800f848:	f04f 32ff 	mov.w	r2, #4294967295
 800f84c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f850:	9304      	str	r3, [sp, #16]
 800f852:	9307      	str	r3, [sp, #28]
 800f854:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f858:	931a      	str	r3, [sp, #104]	; 0x68
 800f85a:	462f      	mov	r7, r5
 800f85c:	2205      	movs	r2, #5
 800f85e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f862:	4850      	ldr	r0, [pc, #320]	; (800f9a4 <_svfiprintf_r+0x1dc>)
 800f864:	f7f0 fcc4 	bl	80001f0 <memchr>
 800f868:	9b04      	ldr	r3, [sp, #16]
 800f86a:	b9d0      	cbnz	r0, 800f8a2 <_svfiprintf_r+0xda>
 800f86c:	06d9      	lsls	r1, r3, #27
 800f86e:	bf44      	itt	mi
 800f870:	2220      	movmi	r2, #32
 800f872:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f876:	071a      	lsls	r2, r3, #28
 800f878:	bf44      	itt	mi
 800f87a:	222b      	movmi	r2, #43	; 0x2b
 800f87c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f880:	782a      	ldrb	r2, [r5, #0]
 800f882:	2a2a      	cmp	r2, #42	; 0x2a
 800f884:	d015      	beq.n	800f8b2 <_svfiprintf_r+0xea>
 800f886:	9a07      	ldr	r2, [sp, #28]
 800f888:	462f      	mov	r7, r5
 800f88a:	2000      	movs	r0, #0
 800f88c:	250a      	movs	r5, #10
 800f88e:	4639      	mov	r1, r7
 800f890:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f894:	3b30      	subs	r3, #48	; 0x30
 800f896:	2b09      	cmp	r3, #9
 800f898:	d94d      	bls.n	800f936 <_svfiprintf_r+0x16e>
 800f89a:	b1b8      	cbz	r0, 800f8cc <_svfiprintf_r+0x104>
 800f89c:	e00f      	b.n	800f8be <_svfiprintf_r+0xf6>
 800f89e:	462f      	mov	r7, r5
 800f8a0:	e7b8      	b.n	800f814 <_svfiprintf_r+0x4c>
 800f8a2:	4a40      	ldr	r2, [pc, #256]	; (800f9a4 <_svfiprintf_r+0x1dc>)
 800f8a4:	1a80      	subs	r0, r0, r2
 800f8a6:	fa0b f000 	lsl.w	r0, fp, r0
 800f8aa:	4318      	orrs	r0, r3
 800f8ac:	9004      	str	r0, [sp, #16]
 800f8ae:	463d      	mov	r5, r7
 800f8b0:	e7d3      	b.n	800f85a <_svfiprintf_r+0x92>
 800f8b2:	9a03      	ldr	r2, [sp, #12]
 800f8b4:	1d11      	adds	r1, r2, #4
 800f8b6:	6812      	ldr	r2, [r2, #0]
 800f8b8:	9103      	str	r1, [sp, #12]
 800f8ba:	2a00      	cmp	r2, #0
 800f8bc:	db01      	blt.n	800f8c2 <_svfiprintf_r+0xfa>
 800f8be:	9207      	str	r2, [sp, #28]
 800f8c0:	e004      	b.n	800f8cc <_svfiprintf_r+0x104>
 800f8c2:	4252      	negs	r2, r2
 800f8c4:	f043 0302 	orr.w	r3, r3, #2
 800f8c8:	9207      	str	r2, [sp, #28]
 800f8ca:	9304      	str	r3, [sp, #16]
 800f8cc:	783b      	ldrb	r3, [r7, #0]
 800f8ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f8d0:	d10c      	bne.n	800f8ec <_svfiprintf_r+0x124>
 800f8d2:	787b      	ldrb	r3, [r7, #1]
 800f8d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f8d6:	d133      	bne.n	800f940 <_svfiprintf_r+0x178>
 800f8d8:	9b03      	ldr	r3, [sp, #12]
 800f8da:	1d1a      	adds	r2, r3, #4
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	9203      	str	r2, [sp, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bfb8      	it	lt
 800f8e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f8e8:	3702      	adds	r7, #2
 800f8ea:	9305      	str	r3, [sp, #20]
 800f8ec:	4d2e      	ldr	r5, [pc, #184]	; (800f9a8 <_svfiprintf_r+0x1e0>)
 800f8ee:	7839      	ldrb	r1, [r7, #0]
 800f8f0:	2203      	movs	r2, #3
 800f8f2:	4628      	mov	r0, r5
 800f8f4:	f7f0 fc7c 	bl	80001f0 <memchr>
 800f8f8:	b138      	cbz	r0, 800f90a <_svfiprintf_r+0x142>
 800f8fa:	2340      	movs	r3, #64	; 0x40
 800f8fc:	1b40      	subs	r0, r0, r5
 800f8fe:	fa03 f000 	lsl.w	r0, r3, r0
 800f902:	9b04      	ldr	r3, [sp, #16]
 800f904:	4303      	orrs	r3, r0
 800f906:	3701      	adds	r7, #1
 800f908:	9304      	str	r3, [sp, #16]
 800f90a:	7839      	ldrb	r1, [r7, #0]
 800f90c:	4827      	ldr	r0, [pc, #156]	; (800f9ac <_svfiprintf_r+0x1e4>)
 800f90e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f912:	2206      	movs	r2, #6
 800f914:	1c7e      	adds	r6, r7, #1
 800f916:	f7f0 fc6b 	bl	80001f0 <memchr>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d038      	beq.n	800f990 <_svfiprintf_r+0x1c8>
 800f91e:	4b24      	ldr	r3, [pc, #144]	; (800f9b0 <_svfiprintf_r+0x1e8>)
 800f920:	bb13      	cbnz	r3, 800f968 <_svfiprintf_r+0x1a0>
 800f922:	9b03      	ldr	r3, [sp, #12]
 800f924:	3307      	adds	r3, #7
 800f926:	f023 0307 	bic.w	r3, r3, #7
 800f92a:	3308      	adds	r3, #8
 800f92c:	9303      	str	r3, [sp, #12]
 800f92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f930:	444b      	add	r3, r9
 800f932:	9309      	str	r3, [sp, #36]	; 0x24
 800f934:	e76d      	b.n	800f812 <_svfiprintf_r+0x4a>
 800f936:	fb05 3202 	mla	r2, r5, r2, r3
 800f93a:	2001      	movs	r0, #1
 800f93c:	460f      	mov	r7, r1
 800f93e:	e7a6      	b.n	800f88e <_svfiprintf_r+0xc6>
 800f940:	2300      	movs	r3, #0
 800f942:	3701      	adds	r7, #1
 800f944:	9305      	str	r3, [sp, #20]
 800f946:	4619      	mov	r1, r3
 800f948:	250a      	movs	r5, #10
 800f94a:	4638      	mov	r0, r7
 800f94c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f950:	3a30      	subs	r2, #48	; 0x30
 800f952:	2a09      	cmp	r2, #9
 800f954:	d903      	bls.n	800f95e <_svfiprintf_r+0x196>
 800f956:	2b00      	cmp	r3, #0
 800f958:	d0c8      	beq.n	800f8ec <_svfiprintf_r+0x124>
 800f95a:	9105      	str	r1, [sp, #20]
 800f95c:	e7c6      	b.n	800f8ec <_svfiprintf_r+0x124>
 800f95e:	fb05 2101 	mla	r1, r5, r1, r2
 800f962:	2301      	movs	r3, #1
 800f964:	4607      	mov	r7, r0
 800f966:	e7f0      	b.n	800f94a <_svfiprintf_r+0x182>
 800f968:	ab03      	add	r3, sp, #12
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	4622      	mov	r2, r4
 800f96e:	4b11      	ldr	r3, [pc, #68]	; (800f9b4 <_svfiprintf_r+0x1ec>)
 800f970:	a904      	add	r1, sp, #16
 800f972:	4640      	mov	r0, r8
 800f974:	f3af 8000 	nop.w
 800f978:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f97c:	4681      	mov	r9, r0
 800f97e:	d1d6      	bne.n	800f92e <_svfiprintf_r+0x166>
 800f980:	89a3      	ldrh	r3, [r4, #12]
 800f982:	065b      	lsls	r3, r3, #25
 800f984:	f53f af35 	bmi.w	800f7f2 <_svfiprintf_r+0x2a>
 800f988:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f98a:	b01d      	add	sp, #116	; 0x74
 800f98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f990:	ab03      	add	r3, sp, #12
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	4622      	mov	r2, r4
 800f996:	4b07      	ldr	r3, [pc, #28]	; (800f9b4 <_svfiprintf_r+0x1ec>)
 800f998:	a904      	add	r1, sp, #16
 800f99a:	4640      	mov	r0, r8
 800f99c:	f000 f882 	bl	800faa4 <_printf_i>
 800f9a0:	e7ea      	b.n	800f978 <_svfiprintf_r+0x1b0>
 800f9a2:	bf00      	nop
 800f9a4:	0800ff70 	.word	0x0800ff70
 800f9a8:	0800ff76 	.word	0x0800ff76
 800f9ac:	0800ff7a 	.word	0x0800ff7a
 800f9b0:	00000000 	.word	0x00000000
 800f9b4:	0800f715 	.word	0x0800f715

0800f9b8 <_printf_common>:
 800f9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9bc:	4691      	mov	r9, r2
 800f9be:	461f      	mov	r7, r3
 800f9c0:	688a      	ldr	r2, [r1, #8]
 800f9c2:	690b      	ldr	r3, [r1, #16]
 800f9c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	bfb8      	it	lt
 800f9cc:	4613      	movlt	r3, r2
 800f9ce:	f8c9 3000 	str.w	r3, [r9]
 800f9d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	460c      	mov	r4, r1
 800f9da:	b112      	cbz	r2, 800f9e2 <_printf_common+0x2a>
 800f9dc:	3301      	adds	r3, #1
 800f9de:	f8c9 3000 	str.w	r3, [r9]
 800f9e2:	6823      	ldr	r3, [r4, #0]
 800f9e4:	0699      	lsls	r1, r3, #26
 800f9e6:	bf42      	ittt	mi
 800f9e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f9ec:	3302      	addmi	r3, #2
 800f9ee:	f8c9 3000 	strmi.w	r3, [r9]
 800f9f2:	6825      	ldr	r5, [r4, #0]
 800f9f4:	f015 0506 	ands.w	r5, r5, #6
 800f9f8:	d107      	bne.n	800fa0a <_printf_common+0x52>
 800f9fa:	f104 0a19 	add.w	sl, r4, #25
 800f9fe:	68e3      	ldr	r3, [r4, #12]
 800fa00:	f8d9 2000 	ldr.w	r2, [r9]
 800fa04:	1a9b      	subs	r3, r3, r2
 800fa06:	42ab      	cmp	r3, r5
 800fa08:	dc28      	bgt.n	800fa5c <_printf_common+0xa4>
 800fa0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800fa0e:	6822      	ldr	r2, [r4, #0]
 800fa10:	3300      	adds	r3, #0
 800fa12:	bf18      	it	ne
 800fa14:	2301      	movne	r3, #1
 800fa16:	0692      	lsls	r2, r2, #26
 800fa18:	d42d      	bmi.n	800fa76 <_printf_common+0xbe>
 800fa1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa1e:	4639      	mov	r1, r7
 800fa20:	4630      	mov	r0, r6
 800fa22:	47c0      	blx	r8
 800fa24:	3001      	adds	r0, #1
 800fa26:	d020      	beq.n	800fa6a <_printf_common+0xb2>
 800fa28:	6823      	ldr	r3, [r4, #0]
 800fa2a:	68e5      	ldr	r5, [r4, #12]
 800fa2c:	f8d9 2000 	ldr.w	r2, [r9]
 800fa30:	f003 0306 	and.w	r3, r3, #6
 800fa34:	2b04      	cmp	r3, #4
 800fa36:	bf08      	it	eq
 800fa38:	1aad      	subeq	r5, r5, r2
 800fa3a:	68a3      	ldr	r3, [r4, #8]
 800fa3c:	6922      	ldr	r2, [r4, #16]
 800fa3e:	bf0c      	ite	eq
 800fa40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa44:	2500      	movne	r5, #0
 800fa46:	4293      	cmp	r3, r2
 800fa48:	bfc4      	itt	gt
 800fa4a:	1a9b      	subgt	r3, r3, r2
 800fa4c:	18ed      	addgt	r5, r5, r3
 800fa4e:	f04f 0900 	mov.w	r9, #0
 800fa52:	341a      	adds	r4, #26
 800fa54:	454d      	cmp	r5, r9
 800fa56:	d11a      	bne.n	800fa8e <_printf_common+0xd6>
 800fa58:	2000      	movs	r0, #0
 800fa5a:	e008      	b.n	800fa6e <_printf_common+0xb6>
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	4652      	mov	r2, sl
 800fa60:	4639      	mov	r1, r7
 800fa62:	4630      	mov	r0, r6
 800fa64:	47c0      	blx	r8
 800fa66:	3001      	adds	r0, #1
 800fa68:	d103      	bne.n	800fa72 <_printf_common+0xba>
 800fa6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa72:	3501      	adds	r5, #1
 800fa74:	e7c3      	b.n	800f9fe <_printf_common+0x46>
 800fa76:	18e1      	adds	r1, r4, r3
 800fa78:	1c5a      	adds	r2, r3, #1
 800fa7a:	2030      	movs	r0, #48	; 0x30
 800fa7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa80:	4422      	add	r2, r4
 800fa82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa8a:	3302      	adds	r3, #2
 800fa8c:	e7c5      	b.n	800fa1a <_printf_common+0x62>
 800fa8e:	2301      	movs	r3, #1
 800fa90:	4622      	mov	r2, r4
 800fa92:	4639      	mov	r1, r7
 800fa94:	4630      	mov	r0, r6
 800fa96:	47c0      	blx	r8
 800fa98:	3001      	adds	r0, #1
 800fa9a:	d0e6      	beq.n	800fa6a <_printf_common+0xb2>
 800fa9c:	f109 0901 	add.w	r9, r9, #1
 800faa0:	e7d8      	b.n	800fa54 <_printf_common+0x9c>
	...

0800faa4 <_printf_i>:
 800faa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800faa8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800faac:	460c      	mov	r4, r1
 800faae:	7e09      	ldrb	r1, [r1, #24]
 800fab0:	b085      	sub	sp, #20
 800fab2:	296e      	cmp	r1, #110	; 0x6e
 800fab4:	4617      	mov	r7, r2
 800fab6:	4606      	mov	r6, r0
 800fab8:	4698      	mov	r8, r3
 800faba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fabc:	f000 80b3 	beq.w	800fc26 <_printf_i+0x182>
 800fac0:	d822      	bhi.n	800fb08 <_printf_i+0x64>
 800fac2:	2963      	cmp	r1, #99	; 0x63
 800fac4:	d036      	beq.n	800fb34 <_printf_i+0x90>
 800fac6:	d80a      	bhi.n	800fade <_printf_i+0x3a>
 800fac8:	2900      	cmp	r1, #0
 800faca:	f000 80b9 	beq.w	800fc40 <_printf_i+0x19c>
 800face:	2958      	cmp	r1, #88	; 0x58
 800fad0:	f000 8083 	beq.w	800fbda <_printf_i+0x136>
 800fad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fad8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800fadc:	e032      	b.n	800fb44 <_printf_i+0xa0>
 800fade:	2964      	cmp	r1, #100	; 0x64
 800fae0:	d001      	beq.n	800fae6 <_printf_i+0x42>
 800fae2:	2969      	cmp	r1, #105	; 0x69
 800fae4:	d1f6      	bne.n	800fad4 <_printf_i+0x30>
 800fae6:	6820      	ldr	r0, [r4, #0]
 800fae8:	6813      	ldr	r3, [r2, #0]
 800faea:	0605      	lsls	r5, r0, #24
 800faec:	f103 0104 	add.w	r1, r3, #4
 800faf0:	d52a      	bpl.n	800fb48 <_printf_i+0xa4>
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	6011      	str	r1, [r2, #0]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	da03      	bge.n	800fb02 <_printf_i+0x5e>
 800fafa:	222d      	movs	r2, #45	; 0x2d
 800fafc:	425b      	negs	r3, r3
 800fafe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800fb02:	486f      	ldr	r0, [pc, #444]	; (800fcc0 <_printf_i+0x21c>)
 800fb04:	220a      	movs	r2, #10
 800fb06:	e039      	b.n	800fb7c <_printf_i+0xd8>
 800fb08:	2973      	cmp	r1, #115	; 0x73
 800fb0a:	f000 809d 	beq.w	800fc48 <_printf_i+0x1a4>
 800fb0e:	d808      	bhi.n	800fb22 <_printf_i+0x7e>
 800fb10:	296f      	cmp	r1, #111	; 0x6f
 800fb12:	d020      	beq.n	800fb56 <_printf_i+0xb2>
 800fb14:	2970      	cmp	r1, #112	; 0x70
 800fb16:	d1dd      	bne.n	800fad4 <_printf_i+0x30>
 800fb18:	6823      	ldr	r3, [r4, #0]
 800fb1a:	f043 0320 	orr.w	r3, r3, #32
 800fb1e:	6023      	str	r3, [r4, #0]
 800fb20:	e003      	b.n	800fb2a <_printf_i+0x86>
 800fb22:	2975      	cmp	r1, #117	; 0x75
 800fb24:	d017      	beq.n	800fb56 <_printf_i+0xb2>
 800fb26:	2978      	cmp	r1, #120	; 0x78
 800fb28:	d1d4      	bne.n	800fad4 <_printf_i+0x30>
 800fb2a:	2378      	movs	r3, #120	; 0x78
 800fb2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fb30:	4864      	ldr	r0, [pc, #400]	; (800fcc4 <_printf_i+0x220>)
 800fb32:	e055      	b.n	800fbe0 <_printf_i+0x13c>
 800fb34:	6813      	ldr	r3, [r2, #0]
 800fb36:	1d19      	adds	r1, r3, #4
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	6011      	str	r1, [r2, #0]
 800fb3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb44:	2301      	movs	r3, #1
 800fb46:	e08c      	b.n	800fc62 <_printf_i+0x1be>
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	6011      	str	r1, [r2, #0]
 800fb4c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb50:	bf18      	it	ne
 800fb52:	b21b      	sxthne	r3, r3
 800fb54:	e7cf      	b.n	800faf6 <_printf_i+0x52>
 800fb56:	6813      	ldr	r3, [r2, #0]
 800fb58:	6825      	ldr	r5, [r4, #0]
 800fb5a:	1d18      	adds	r0, r3, #4
 800fb5c:	6010      	str	r0, [r2, #0]
 800fb5e:	0628      	lsls	r0, r5, #24
 800fb60:	d501      	bpl.n	800fb66 <_printf_i+0xc2>
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	e002      	b.n	800fb6c <_printf_i+0xc8>
 800fb66:	0668      	lsls	r0, r5, #25
 800fb68:	d5fb      	bpl.n	800fb62 <_printf_i+0xbe>
 800fb6a:	881b      	ldrh	r3, [r3, #0]
 800fb6c:	4854      	ldr	r0, [pc, #336]	; (800fcc0 <_printf_i+0x21c>)
 800fb6e:	296f      	cmp	r1, #111	; 0x6f
 800fb70:	bf14      	ite	ne
 800fb72:	220a      	movne	r2, #10
 800fb74:	2208      	moveq	r2, #8
 800fb76:	2100      	movs	r1, #0
 800fb78:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb7c:	6865      	ldr	r5, [r4, #4]
 800fb7e:	60a5      	str	r5, [r4, #8]
 800fb80:	2d00      	cmp	r5, #0
 800fb82:	f2c0 8095 	blt.w	800fcb0 <_printf_i+0x20c>
 800fb86:	6821      	ldr	r1, [r4, #0]
 800fb88:	f021 0104 	bic.w	r1, r1, #4
 800fb8c:	6021      	str	r1, [r4, #0]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d13d      	bne.n	800fc0e <_printf_i+0x16a>
 800fb92:	2d00      	cmp	r5, #0
 800fb94:	f040 808e 	bne.w	800fcb4 <_printf_i+0x210>
 800fb98:	4665      	mov	r5, ip
 800fb9a:	2a08      	cmp	r2, #8
 800fb9c:	d10b      	bne.n	800fbb6 <_printf_i+0x112>
 800fb9e:	6823      	ldr	r3, [r4, #0]
 800fba0:	07db      	lsls	r3, r3, #31
 800fba2:	d508      	bpl.n	800fbb6 <_printf_i+0x112>
 800fba4:	6923      	ldr	r3, [r4, #16]
 800fba6:	6862      	ldr	r2, [r4, #4]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	bfde      	ittt	le
 800fbac:	2330      	movle	r3, #48	; 0x30
 800fbae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fbb2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fbb6:	ebac 0305 	sub.w	r3, ip, r5
 800fbba:	6123      	str	r3, [r4, #16]
 800fbbc:	f8cd 8000 	str.w	r8, [sp]
 800fbc0:	463b      	mov	r3, r7
 800fbc2:	aa03      	add	r2, sp, #12
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f7ff fef6 	bl	800f9b8 <_printf_common>
 800fbcc:	3001      	adds	r0, #1
 800fbce:	d14d      	bne.n	800fc6c <_printf_i+0x1c8>
 800fbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd4:	b005      	add	sp, #20
 800fbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fbda:	4839      	ldr	r0, [pc, #228]	; (800fcc0 <_printf_i+0x21c>)
 800fbdc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800fbe0:	6813      	ldr	r3, [r2, #0]
 800fbe2:	6821      	ldr	r1, [r4, #0]
 800fbe4:	1d1d      	adds	r5, r3, #4
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	6015      	str	r5, [r2, #0]
 800fbea:	060a      	lsls	r2, r1, #24
 800fbec:	d50b      	bpl.n	800fc06 <_printf_i+0x162>
 800fbee:	07ca      	lsls	r2, r1, #31
 800fbf0:	bf44      	itt	mi
 800fbf2:	f041 0120 	orrmi.w	r1, r1, #32
 800fbf6:	6021      	strmi	r1, [r4, #0]
 800fbf8:	b91b      	cbnz	r3, 800fc02 <_printf_i+0x15e>
 800fbfa:	6822      	ldr	r2, [r4, #0]
 800fbfc:	f022 0220 	bic.w	r2, r2, #32
 800fc00:	6022      	str	r2, [r4, #0]
 800fc02:	2210      	movs	r2, #16
 800fc04:	e7b7      	b.n	800fb76 <_printf_i+0xd2>
 800fc06:	064d      	lsls	r5, r1, #25
 800fc08:	bf48      	it	mi
 800fc0a:	b29b      	uxthmi	r3, r3
 800fc0c:	e7ef      	b.n	800fbee <_printf_i+0x14a>
 800fc0e:	4665      	mov	r5, ip
 800fc10:	fbb3 f1f2 	udiv	r1, r3, r2
 800fc14:	fb02 3311 	mls	r3, r2, r1, r3
 800fc18:	5cc3      	ldrb	r3, [r0, r3]
 800fc1a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800fc1e:	460b      	mov	r3, r1
 800fc20:	2900      	cmp	r1, #0
 800fc22:	d1f5      	bne.n	800fc10 <_printf_i+0x16c>
 800fc24:	e7b9      	b.n	800fb9a <_printf_i+0xf6>
 800fc26:	6813      	ldr	r3, [r2, #0]
 800fc28:	6825      	ldr	r5, [r4, #0]
 800fc2a:	6961      	ldr	r1, [r4, #20]
 800fc2c:	1d18      	adds	r0, r3, #4
 800fc2e:	6010      	str	r0, [r2, #0]
 800fc30:	0628      	lsls	r0, r5, #24
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	d501      	bpl.n	800fc3a <_printf_i+0x196>
 800fc36:	6019      	str	r1, [r3, #0]
 800fc38:	e002      	b.n	800fc40 <_printf_i+0x19c>
 800fc3a:	066a      	lsls	r2, r5, #25
 800fc3c:	d5fb      	bpl.n	800fc36 <_printf_i+0x192>
 800fc3e:	8019      	strh	r1, [r3, #0]
 800fc40:	2300      	movs	r3, #0
 800fc42:	6123      	str	r3, [r4, #16]
 800fc44:	4665      	mov	r5, ip
 800fc46:	e7b9      	b.n	800fbbc <_printf_i+0x118>
 800fc48:	6813      	ldr	r3, [r2, #0]
 800fc4a:	1d19      	adds	r1, r3, #4
 800fc4c:	6011      	str	r1, [r2, #0]
 800fc4e:	681d      	ldr	r5, [r3, #0]
 800fc50:	6862      	ldr	r2, [r4, #4]
 800fc52:	2100      	movs	r1, #0
 800fc54:	4628      	mov	r0, r5
 800fc56:	f7f0 facb 	bl	80001f0 <memchr>
 800fc5a:	b108      	cbz	r0, 800fc60 <_printf_i+0x1bc>
 800fc5c:	1b40      	subs	r0, r0, r5
 800fc5e:	6060      	str	r0, [r4, #4]
 800fc60:	6863      	ldr	r3, [r4, #4]
 800fc62:	6123      	str	r3, [r4, #16]
 800fc64:	2300      	movs	r3, #0
 800fc66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc6a:	e7a7      	b.n	800fbbc <_printf_i+0x118>
 800fc6c:	6923      	ldr	r3, [r4, #16]
 800fc6e:	462a      	mov	r2, r5
 800fc70:	4639      	mov	r1, r7
 800fc72:	4630      	mov	r0, r6
 800fc74:	47c0      	blx	r8
 800fc76:	3001      	adds	r0, #1
 800fc78:	d0aa      	beq.n	800fbd0 <_printf_i+0x12c>
 800fc7a:	6823      	ldr	r3, [r4, #0]
 800fc7c:	079b      	lsls	r3, r3, #30
 800fc7e:	d413      	bmi.n	800fca8 <_printf_i+0x204>
 800fc80:	68e0      	ldr	r0, [r4, #12]
 800fc82:	9b03      	ldr	r3, [sp, #12]
 800fc84:	4298      	cmp	r0, r3
 800fc86:	bfb8      	it	lt
 800fc88:	4618      	movlt	r0, r3
 800fc8a:	e7a3      	b.n	800fbd4 <_printf_i+0x130>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	464a      	mov	r2, r9
 800fc90:	4639      	mov	r1, r7
 800fc92:	4630      	mov	r0, r6
 800fc94:	47c0      	blx	r8
 800fc96:	3001      	adds	r0, #1
 800fc98:	d09a      	beq.n	800fbd0 <_printf_i+0x12c>
 800fc9a:	3501      	adds	r5, #1
 800fc9c:	68e3      	ldr	r3, [r4, #12]
 800fc9e:	9a03      	ldr	r2, [sp, #12]
 800fca0:	1a9b      	subs	r3, r3, r2
 800fca2:	42ab      	cmp	r3, r5
 800fca4:	dcf2      	bgt.n	800fc8c <_printf_i+0x1e8>
 800fca6:	e7eb      	b.n	800fc80 <_printf_i+0x1dc>
 800fca8:	2500      	movs	r5, #0
 800fcaa:	f104 0919 	add.w	r9, r4, #25
 800fcae:	e7f5      	b.n	800fc9c <_printf_i+0x1f8>
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d1ac      	bne.n	800fc0e <_printf_i+0x16a>
 800fcb4:	7803      	ldrb	r3, [r0, #0]
 800fcb6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fcba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fcbe:	e76c      	b.n	800fb9a <_printf_i+0xf6>
 800fcc0:	0800ff81 	.word	0x0800ff81
 800fcc4:	0800ff92 	.word	0x0800ff92

0800fcc8 <memmove>:
 800fcc8:	4288      	cmp	r0, r1
 800fcca:	b510      	push	{r4, lr}
 800fccc:	eb01 0302 	add.w	r3, r1, r2
 800fcd0:	d807      	bhi.n	800fce2 <memmove+0x1a>
 800fcd2:	1e42      	subs	r2, r0, #1
 800fcd4:	4299      	cmp	r1, r3
 800fcd6:	d00a      	beq.n	800fcee <memmove+0x26>
 800fcd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcdc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fce0:	e7f8      	b.n	800fcd4 <memmove+0xc>
 800fce2:	4283      	cmp	r3, r0
 800fce4:	d9f5      	bls.n	800fcd2 <memmove+0xa>
 800fce6:	1881      	adds	r1, r0, r2
 800fce8:	1ad2      	subs	r2, r2, r3
 800fcea:	42d3      	cmn	r3, r2
 800fcec:	d100      	bne.n	800fcf0 <memmove+0x28>
 800fcee:	bd10      	pop	{r4, pc}
 800fcf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fcf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fcf8:	e7f7      	b.n	800fcea <memmove+0x22>

0800fcfa <_realloc_r>:
 800fcfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcfc:	4607      	mov	r7, r0
 800fcfe:	4614      	mov	r4, r2
 800fd00:	460e      	mov	r6, r1
 800fd02:	b921      	cbnz	r1, 800fd0e <_realloc_r+0x14>
 800fd04:	4611      	mov	r1, r2
 800fd06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd0a:	f7ff bc77 	b.w	800f5fc <_malloc_r>
 800fd0e:	b922      	cbnz	r2, 800fd1a <_realloc_r+0x20>
 800fd10:	f7ff fc26 	bl	800f560 <_free_r>
 800fd14:	4625      	mov	r5, r4
 800fd16:	4628      	mov	r0, r5
 800fd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd1a:	f000 f814 	bl	800fd46 <_malloc_usable_size_r>
 800fd1e:	42a0      	cmp	r0, r4
 800fd20:	d20f      	bcs.n	800fd42 <_realloc_r+0x48>
 800fd22:	4621      	mov	r1, r4
 800fd24:	4638      	mov	r0, r7
 800fd26:	f7ff fc69 	bl	800f5fc <_malloc_r>
 800fd2a:	4605      	mov	r5, r0
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d0f2      	beq.n	800fd16 <_realloc_r+0x1c>
 800fd30:	4631      	mov	r1, r6
 800fd32:	4622      	mov	r2, r4
 800fd34:	f7ff fc00 	bl	800f538 <memcpy>
 800fd38:	4631      	mov	r1, r6
 800fd3a:	4638      	mov	r0, r7
 800fd3c:	f7ff fc10 	bl	800f560 <_free_r>
 800fd40:	e7e9      	b.n	800fd16 <_realloc_r+0x1c>
 800fd42:	4635      	mov	r5, r6
 800fd44:	e7e7      	b.n	800fd16 <_realloc_r+0x1c>

0800fd46 <_malloc_usable_size_r>:
 800fd46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd4a:	1f18      	subs	r0, r3, #4
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	bfbc      	itt	lt
 800fd50:	580b      	ldrlt	r3, [r1, r0]
 800fd52:	18c0      	addlt	r0, r0, r3
 800fd54:	4770      	bx	lr
	...

0800fd58 <_init>:
 800fd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd5a:	bf00      	nop
 800fd5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd5e:	bc08      	pop	{r3}
 800fd60:	469e      	mov	lr, r3
 800fd62:	4770      	bx	lr

0800fd64 <_fini>:
 800fd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd66:	bf00      	nop
 800fd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd6a:	bc08      	pop	{r3}
 800fd6c:	469e      	mov	lr, r3
 800fd6e:	4770      	bx	lr
