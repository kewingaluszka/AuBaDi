
AuBaDi_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f8ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800fa4c  0800fa4c  0001fa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc84  0800fc84  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc84  0800fc84  0001fc84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc8c  0800fc8c  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc8c  0800fc8c  0001fc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc90  0800fc90  0001fc90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800fc94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002048  200000a4  0800fd38  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  200020ec  0800fd38  000220ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cb1f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005788  00000000  00000000  0004cbf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a80  00000000  00000000  00052380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001848  00000000  00000000  00053e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d74c  00000000  00000000  00055648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c12a  00000000  00000000  00072d94  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096307  00000000  00000000  0008eebe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001251c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000705c  00000000  00000000  00125240  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fa34 	.word	0x0800fa34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	0800fa34 	.word	0x0800fa34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <write_register+0x30>)
 80005b4:	f004 fc06 	bl	8004dc4 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000c0 	.word	0x200000c0

080005c4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	2194      	movs	r1, #148	; 0x94
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <read_register+0x3c>)
 80005e2:	f004 fbef 	bl	8004dc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	2194      	movs	r1, #148	; 0x94
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <read_register+0x3c>)
 80005f2:	f004 fce5 	bl	8004fc0 <HAL_I2C_Master_Receive>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000c0 	.word	0x200000c0

08000604 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	f107 0c10 	add.w	ip, r7, #16
 8000610:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000614:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <CS43_Init+0x200>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800061c:	4b79      	ldr	r3, [pc, #484]	; (8000804 <CS43_Init+0x200>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	4b78      	ldr	r3, [pc, #480]	; (8000804 <CS43_Init+0x200>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800062a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4875      	ldr	r0, [pc, #468]	; (8000808 <CS43_Init+0x204>)
 8000632:	f002 fd51 	bl	80030d8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000636:	4b75      	ldr	r3, [pc, #468]	; (800080c <CS43_Init+0x208>)
 8000638:	4618      	mov	r0, r3
 800063a:	f107 0110 	add.w	r1, r7, #16
 800063e:	2354      	movs	r3, #84	; 0x54
 8000640:	461a      	mov	r2, r3
 8000642:	f00e fde7 	bl	800f214 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000646:	2301      	movs	r3, #1
 8000648:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff9e 	bl	8000590 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	b2db      	uxtb	r3, r3
 8000660:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	f043 030c 	orr.w	r3, r3, #12
 8000668:	b2db      	uxtb	r3, r3
 800066a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800066c:	797b      	ldrb	r3, [r7, #5]
 800066e:	f043 0303 	orr.w	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff87 	bl	8000590 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	3301      	adds	r3, #1
 800068a:	4619      	mov	r1, r3
 800068c:	2005      	movs	r0, #5
 800068e:	f7ff ff7f 	bl	8000590 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	2006      	movs	r0, #6
 8000698:	f7ff ff94 	bl	80005c4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0310 	bic.w	r3, r3, #16
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	f023 0304 	bic.w	r3, r3, #4
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	f043 0303 	orr.w	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	2006      	movs	r0, #6
 80006ea:	f7ff ff51 	bl	8000590 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff65 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	b2db      	uxtb	r3, r3
 8000702:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2008      	movs	r0, #8
 8000716:	f7ff ff3b 	bl	8000590 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	2009      	movs	r0, #9
 8000722:	f7ff ff4f 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	b2db      	uxtb	r3, r3
 800072e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	3301      	adds	r3, #1
 800073e:	4619      	mov	r1, r3
 8000740:	2009      	movs	r0, #9
 8000742:	f7ff ff25 	bl	8000590 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	3301      	adds	r3, #1
 800074a:	4619      	mov	r1, r3
 800074c:	200e      	movs	r0, #14
 800074e:	f7ff ff39 	bl	80005c4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000752:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000756:	2b01      	cmp	r3, #1
 8000758:	d119      	bne.n	800078e <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	b2db      	uxtb	r3, r3
 800076c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	f023 0320 	bic.w	r3, r3, #32
 8000774:	b2db      	uxtb	r3, r3
 8000776:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	f023 0310 	bic.w	r3, r3, #16
 800077e:	b2db      	uxtb	r3, r3
 8000780:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000782:	797b      	ldrb	r3, [r7, #5]
 8000784:	f023 0308 	bic.w	r3, r3, #8
 8000788:	b2db      	uxtb	r3, r3
 800078a:	717b      	strb	r3, [r7, #5]
 800078c:	e005      	b.n	800079a <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 800078e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000796:	2302      	movs	r3, #2
 8000798:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	3301      	adds	r3, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	200e      	movs	r0, #14
 80007a2:	f7ff fef5 	bl	8000590 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	3301      	adds	r3, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff ff09 	bl	80005c4 <read_register>
	iData[1] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	200f      	movs	r0, #15
 80007be:	f7ff fee7 	bl	8000590 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	3301      	adds	r3, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	2014      	movs	r0, #20
 80007ce:	f7ff fedf 	bl	8000590 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	3301      	adds	r3, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	2015      	movs	r0, #21
 80007da:	f7ff fed9 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	3301      	adds	r3, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	201a      	movs	r0, #26
 80007e6:	f7ff fed3 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	3301      	adds	r3, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	201b      	movs	r0, #27
 80007f2:	f7ff fecd 	bl	8000590 <write_register>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	20001598 	.word	0x20001598
 8000808:	40020c00 	.word	0x40020c00
 800080c:	200000c0 	.word	0x200000c0

08000810 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d82b      	bhi.n	8000878 <CS43_Enable_RightLeft+0x68>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <CS43_Enable_RightLeft+0x18>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000839 	.word	0x08000839
 800082c:	08000849 	.word	0x08000849
 8000830:	08000859 	.word	0x08000859
 8000834:	08000869 	.word	0x08000869
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000838:	23c0      	movs	r3, #192	; 0xc0
 800083a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000842:	b2db      	uxtb	r3, r3
 8000844:	737b      	strb	r3, [r7, #13]
			break;
 8000846:	e018      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000852:	b2db      	uxtb	r3, r3
 8000854:	737b      	strb	r3, [r7, #13]
			break;
 8000856:	e010      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	737b      	strb	r3, [r7, #13]
			break;
 8000866:	e008      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	b2db      	uxtb	r3, r3
 8000874:	737b      	strb	r3, [r7, #13]
			break;
 8000876:	e000      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000878:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800087a:	7b7b      	ldrb	r3, [r7, #13]
 800087c:	f043 030c 	orr.w	r3, r3, #12
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2004      	movs	r0, #4
 8000898:	f7ff fe7a 	bl	8000590 <write_register>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3319      	adds	r3, #25
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	3301      	adds	r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	2020      	movs	r0, #32
 80008c0:	f7ff fe66 	bl	8000590 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	3301      	adds	r3, #1
 80008ca:	4619      	mov	r1, r3
 80008cc:	2021      	movs	r0, #33	; 0x21
 80008ce:	f7ff fe5f 	bl	8000590 <write_register>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d019      	beq.n	800091e <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2004      	movs	r0, #4
 80008f8:	f7ff fe4a 	bl	8000590 <write_register>
    iData[1] = 0x01;
 80008fc:	2301      	movs	r3, #1
 80008fe:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	3301      	adds	r3, #1
 8000906:	4619      	mov	r1, r3
 8000908:	2022      	movs	r0, #34	; 0x22
 800090a:	f7ff fe41 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	3301      	adds	r3, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2023      	movs	r0, #35	; 0x23
 8000918:	f7ff fe3a 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 800091c:	e018      	b.n	8000950 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	3301      	adds	r3, #1
 8000928:	4619      	mov	r1, r3
 800092a:	2022      	movs	r0, #34	; 0x22
 800092c:	f7ff fe30 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	3301      	adds	r3, #1
 8000936:	4619      	mov	r1, r3
 8000938:	2023      	movs	r0, #35	; 0x23
 800093a:	f7ff fe29 	bl	8000590 <write_register>
    iData[1] = 0xAF;
 800093e:	23af      	movs	r3, #175	; 0xaf
 8000940:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	3301      	adds	r3, #1
 8000948:	4619      	mov	r1, r3
 800094a:	2004      	movs	r0, #4
 800094c:	f7ff fe20 	bl	8000590 <write_register>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffbb 	bl	80008da <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000964:	2399      	movs	r3, #153	; 0x99
 8000966:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	3301      	adds	r3, #1
 800096c:	4619      	mov	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fe0e 	bl	8000590 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	3301      	adds	r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	2047      	movs	r0, #71	; 0x47
 8000980:	f7ff fe06 	bl	8000590 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	3301      	adds	r3, #1
 8000988:	4619      	mov	r1, r3
 800098a:	2032      	movs	r0, #50	; 0x32
 800098c:	f7ff fe1a 	bl	80005c4 <read_register>
	iData[1] |= 0x80;
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000996:	b2db      	uxtb	r3, r3
 8000998:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	3301      	adds	r3, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	2032      	movs	r0, #50	; 0x32
 80009a2:	f7ff fdf5 	bl	8000590 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	2032      	movs	r0, #50	; 0x32
 80009ae:	f7ff fe09 	bl	80005c4 <read_register>
	iData[1] &= ~(0x80);
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	3301      	adds	r3, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f7ff fde4 	bl	8000590 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	3301      	adds	r3, #1
 80009d0:	4619      	mov	r1, r3
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fddc 	bl	8000590 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009d8:	239e      	movs	r3, #158	; 0x9e
 80009da:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	3301      	adds	r3, #1
 80009e0:	4619      	mov	r1, r3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fdd4 	bl	8000590 <write_register>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <CS43_Stop>:

void CS43_Stop(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff ff6f 	bl	80008da <CS43_SetMute>
  iData[1] = 0x04;
 80009fc:	2304      	movs	r3, #4
 80009fe:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	3301      	adds	r3, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	200e      	movs	r0, #14
 8000a08:	f7ff fdc2 	bl	8000590 <write_register>
	iData[1] = 0x9F;
 8000a0c:	239f      	movs	r3, #159	; 0x9f
 8000a0e:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	3301      	adds	r3, #1
 8000a14:	4619      	mov	r1, r3
 8000a16:	2002      	movs	r0, #2
 8000a18:	f7ff fdba 	bl	8000590 <write_register>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08a      	sub	sp, #40	; 0x28
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a32:	23ff      	movs	r3, #255	; 0xff
 8000a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8000a38:	2300      	movs	r3, #0
 8000a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a3e:	e010      	b.n	8000a62 <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a44:	4a20      	ldr	r2, [pc, #128]	; (8000ac8 <audioI2S_pllClockConfig+0xa4>)
 8000a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d103      	bne.n	8000a58 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8000a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a66:	2b07      	cmp	r3, #7
 8000a68:	d9ea      	bls.n	8000a40 <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 fe0a 	bl	8007688 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d113      	bne.n	8000aa8 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a80:	2301      	movs	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <audioI2S_pllClockConfig+0xa8>)
 8000a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8e:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a94:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <audioI2S_pllClockConfig+0xac>)
 8000a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a9a:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f006 fd01 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000aa6:	e00b      	b.n	8000ac0 <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000aac:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000ab0:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	4618      	mov	r0, r3
 8000abc:	f006 fcf4 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	0800fb3c 	.word	0x0800fb3c
 8000acc:	0800fb5c 	.word	0x0800fb5c
 8000ad0:	0800fb7c 	.word	0x0800fb7c

08000ad4 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1d      	ldr	r2, [pc, #116]	; (8000b58 <I2S3_freqUpdate+0x84>)
 8000ae2:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	69da      	ldr	r2, [r3, #28]
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000af6:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	687a      	ldr	r2, [r7, #4]
 8000afe:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000b10:	4b10      	ldr	r3, [pc, #64]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000b18:	4b0e      	ldr	r3, [pc, #56]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b20:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2a:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000b2c:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <I2S3_freqUpdate+0x80>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 f8c1 	bl	8005cc0 <HAL_I2S_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b44:	2300      	movs	r3, #0
 8000b46:	e000      	b.n	8000b4a <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b48:	2301      	movs	r3, #1
  }
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000114 	.word	0x20000114
 8000b58:	40003c00 	.word	0x40003c00

08000b5c <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <audioI2S_setHandle+0x1c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000114 	.word	0x20000114

08000b7c <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff4d 	bl	8000a24 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa2 	bl	8000ad4 <I2S3_freqUpdate>
  return true;
 8000b90:	2301      	movs	r3, #1
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ba6:	f7ff fed7 	bl	8000958 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000baa:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <audioI2S_play+0x38>)
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000bb4:	d203      	bcs.n	8000bbe <audioI2S_play+0x22>
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	085b      	lsrs	r3, r3, #1
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	e001      	b.n	8000bc2 <audioI2S_play+0x26>
 8000bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	f005 f9bb 	bl	8005f40 <HAL_I2S_Transmit_DMA>
  return true;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000114 	.word	0x20000114

08000bd8 <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000bdc:	f7ff ff08 	bl	80009f0 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000be0:	4b03      	ldr	r3, [pc, #12]	; (8000bf0 <audioI2S_stop+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f005 fa53 	bl	8006090 <HAL_I2S_DMAStop>
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000114 	.word	0x20000114

08000bf4 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_I2S_TxCpltCallback+0x20>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000c06:	f001 fb2b 	bl	8002260 <audioI2S_fullTransfer_Callback>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40003c00 	.word	0x40003c00

08000c18 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000c2a:	f001 fb0d 	bl	8002248 <audioI2S_halfTransfer_Callback>
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40003c00 	.word	0x40003c00

08000c3c <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	011b      	lsls	r3, r3, #4
 8000c4a:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f023 030f 	bic.w	r3, r3, #15
 8000c52:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000c54:	7bbb      	ldrb	r3, [r7, #14]
 8000c56:	f043 030c 	orr.w	r3, r3, #12
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	723b      	strb	r3, [r7, #8]
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	727b      	strb	r3, [r7, #9]
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
 8000c6a:	f043 030c 	orr.w	r3, r3, #12
 8000c6e:	b2db      	uxtb	r3, r3
 8000c70:	72bb      	strb	r3, [r7, #10]
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	f043 0308 	orr.w	r3, r3, #8
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <lcd16x2_i2c_sendCommand+0x60>)
 8000c7e:	6818      	ldr	r0, [r3, #0]
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <lcd16x2_i2c_sendCommand+0x64>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	b299      	uxth	r1, r3
 8000c86:	f107 0208 	add.w	r2, r7, #8
 8000c8a:	23c8      	movs	r3, #200	; 0xc8
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2304      	movs	r3, #4
 8000c90:	f004 f898 	bl	8004dc4 <HAL_I2C_Master_Transmit>
}
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000118 	.word	0x20000118
 8000ca0:	2000011c 	.word	0x2000011c

08000ca4 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af02      	add	r7, sp, #8
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	011b      	lsls	r3, r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f023 030f 	bic.w	r3, r3, #15
 8000cba:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	f043 030d 	orr.w	r3, r3, #13
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	723b      	strb	r3, [r7, #8]
 8000cc6:	7bbb      	ldrb	r3, [r7, #14]
 8000cc8:	f043 0309 	orr.w	r3, r3, #9
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	727b      	strb	r3, [r7, #9]
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	f043 030d 	orr.w	r3, r3, #13
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	72bb      	strb	r3, [r7, #10]
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	f043 0309 	orr.w	r3, r3, #9
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000ce4:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <lcd16x2_i2c_sendData+0x60>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <lcd16x2_i2c_sendData+0x64>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b299      	uxth	r1, r3
 8000cee:	f107 0208 	add.w	r2, r7, #8
 8000cf2:	23c8      	movs	r3, #200	; 0xc8
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2304      	movs	r3, #4
 8000cf8:	f004 f864 	bl	8004dc4 <HAL_I2C_Master_Transmit>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000118 	.word	0x20000118
 8000d08:	2000011c 	.word	0x2000011c

08000d0c <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f001 fb4b 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000d1a:	4a30      	ldr	r2, [pc, #192]	; (8000ddc <lcd16x2_i2c_init+0xd0>)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <lcd16x2_i2c_init+0xd0>)
 8000d22:	6818      	ldr	r0, [r3, #0]
 8000d24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d28:	2205      	movs	r2, #5
 8000d2a:	214e      	movs	r1, #78	; 0x4e
 8000d2c:	f004 fb6e 	bl	800540c <HAL_I2C_IsDeviceReady>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d010      	beq.n	8000d58 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <lcd16x2_i2c_init+0xd0>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d3e:	2205      	movs	r2, #5
 8000d40:	217e      	movs	r1, #126	; 0x7e
 8000d42:	f004 fb63 	bl	800540c <HAL_I2C_IsDeviceReady>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e040      	b.n	8000dd2 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <lcd16x2_i2c_init+0xd4>)
 8000d52:	227e      	movs	r2, #126	; 0x7e
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	e002      	b.n	8000d5e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000d58:	4b21      	ldr	r3, [pc, #132]	; (8000de0 <lcd16x2_i2c_init+0xd4>)
 8000d5a:	224e      	movs	r2, #78	; 0x4e
 8000d5c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000d5e:	202d      	movs	r0, #45	; 0x2d
 8000d60:	f001 fb26 	bl	80023b0 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000d64:	2030      	movs	r0, #48	; 0x30
 8000d66:	f7ff ff69 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f001 fb20 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d70:	2030      	movs	r0, #48	; 0x30
 8000d72:	f7ff ff63 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d76:	2001      	movs	r0, #1
 8000d78:	f001 fb1a 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d7c:	2030      	movs	r0, #48	; 0x30
 8000d7e:	f7ff ff5d 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d82:	2008      	movs	r0, #8
 8000d84:	f001 fb14 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000d88:	2020      	movs	r0, #32
 8000d8a:	f7ff ff57 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d8e:	2008      	movs	r0, #8
 8000d90:	f001 fb0e 	bl	80023b0 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000d94:	2028      	movs	r0, #40	; 0x28
 8000d96:	f7ff ff51 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f001 fb08 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000da0:	2008      	movs	r0, #8
 8000da2:	f7ff ff4b 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000da6:	2001      	movs	r0, #1
 8000da8:	f001 fb02 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff45 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000db2:	2003      	movs	r0, #3
 8000db4:	f001 fafc 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000db8:	2006      	movs	r0, #6
 8000dba:	f7ff ff3f 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	f001 faf6 	bl	80023b0 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000dc4:	200c      	movs	r0, #12
 8000dc6:	f7ff ff39 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000dca:	2003      	movs	r0, #3
 8000dcc:	f001 faf0 	bl	80023b0 <HAL_Delay>

  return true;
 8000dd0:	2301      	movs	r3, #1
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000118 	.word	0x20000118
 8000de0:	2000011c 	.word	0x2000011c

08000de4 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d108      	bne.n	8000e14 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e08:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff ff15 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000e12:	e007      	b.n	8000e24 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000e1a:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ff0c 	bl	8000c3c <lcd16x2_i2c_sendCommand>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8000e30:	2100      	movs	r1, #0
 8000e32:	2000      	movs	r0, #0
 8000e34:	f7ff ffd6 	bl	8000de4 <lcd16x2_i2c_setCursor>
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8000e40:	2100      	movs	r1, #0
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff ffce 	bl	8000de4 <lcd16x2_i2c_setCursor>
}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f7ff fef3 	bl	8000c3c <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000e56:	2003      	movs	r0, #3
 8000e58:	f001 faaa 	bl	80023b0 <HAL_Delay>
}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000e60:	b40f      	push	{r0, r1, r2, r3}
 8000e62:	b590      	push	{r4, r7, lr}
 8000e64:	b089      	sub	sp, #36	; 0x24
 8000e66:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e6c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e76:	4618      	mov	r0, r3
 8000e78:	f00e faae 	bl	800f3d8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	77fb      	strb	r3, [r7, #31]
 8000e80:	e00b      	b.n	8000e9a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000e82:	7ffb      	ldrb	r3, [r7, #31]
 8000e84:	f107 0220 	add.w	r2, r7, #32
 8000e88:	4413      	add	r3, r2
 8000e8a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff08 	bl	8000ca4 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e94:	7ffb      	ldrb	r3, [r7, #31]
 8000e96:	3301      	adds	r3, #1
 8000e98:	77fb      	strb	r3, [r7, #31]
 8000e9a:	7ffc      	ldrb	r4, [r7, #31]
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff f99d 	bl	80001e0 <strlen>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	d202      	bcs.n	8000eb2 <lcd16x2_i2c_printf+0x52>
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	2b0f      	cmp	r3, #15
 8000eb0:	d9e7      	bls.n	8000e82 <lcd16x2_i2c_printf+0x22>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ebc:	b004      	add	sp, #16
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM5_Init(void);
static void MX_TIM10_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	if (htim == &htim10) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d10d      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x2c>
		if (duty < 1000) {
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed8:	da05      	bge.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x26>
			duty++;
 8000eda:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a1a      	ldr	r2, [pc, #104]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ee2:	6013      	str	r3, [r2, #0]
 8000ee4:	e002      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x2c>
		} else
			duty = 0;
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	}
	if (htim == &htim4) {
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d124      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x7e>
		HAL_GPIO_TogglePin(step_GPIO_Port, step_Pin);
 8000ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef8:	4816      	ldr	r0, [pc, #88]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000efa:	f002 f906 	bl	800310a <HAL_GPIO_TogglePin>
		//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
		step--;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	4a14      	ldr	r2, [pc, #80]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f06:	6013      	str	r3, [r2, #0]
		gowno--;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	4a13      	ldr	r2, [pc, #76]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f10:	6013      	str	r3, [r2, #0]

		if (step == 0) {
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <HAL_TIM_PeriodElapsedCallback+0x60>
			HAL_TIM_Base_Stop_IT(&htim4);
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f1c:	f006 fca3 	bl	8007866 <HAL_TIM_Base_Stop_IT>
			//          flag_busy = 0;
			//numer --;
		}
		if (gowno == 0) {
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d10a      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x7e>
			HAL_TIM_Base_Stop_IT(&htim4);
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f2a:	f006 fc9c 	bl	8007866 <HAL_TIM_Base_Stop_IT>
			flag_busy = 0;
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
			numer--;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f3c:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20001460 	.word	0x20001460
 8000f4c:	20000120 	.word	0x20000120
 8000f50:	200013cc 	.word	0x200013cc
 8000f54:	40020800 	.word	0x40020800
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	200013c8 	.word	0x200013c8
 8000f60:	20000134 	.word	0x20000134
 8000f64:	20000008 	.word	0x20000008

08000f68 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
//	left button
	if (GPIO_Pin == button_left_Pin) {
 8000f72:	88fb      	ldrh	r3, [r7, #6]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d107      	bne.n	8000f88 <HAL_GPIO_EXTI_Callback+0x20>
		confirm = 0;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
		selection--;
 8000f7e:	4b14      	ldr	r3, [pc, #80]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	4a12      	ldr	r2, [pc, #72]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f86:	6013      	str	r3, [r2, #0]
	}

	//	right button
	if (GPIO_Pin == button_right_Pin) {
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d107      	bne.n	8000f9e <HAL_GPIO_EXTI_Callback+0x36>
		confirm = 0;
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
		selection++;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000f9c:	6013      	str	r3, [r2, #0]
	}

	//	menu button
	if (GPIO_Pin == button_select_Pin) {
 8000f9e:	88fb      	ldrh	r3, [r7, #6]
 8000fa0:	2b20      	cmp	r3, #32
 8000fa2:	d102      	bne.n	8000faa <HAL_GPIO_EXTI_Callback+0x42>
		confirm = 1;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <HAL_GPIO_EXTI_Callback+0x64>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	601a      	str	r2, [r3, #0]
	}

	// endstop
	if (GPIO_Pin == endstop_Pin)
 8000faa:	88fb      	ldrh	r3, [r7, #6]
 8000fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000fb0:	d103      	bne.n	8000fba <HAL_GPIO_EXTI_Callback+0x52>
		flag_endofroad = 1;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]
	else
		flag_endofroad = 0;
}
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x58>
		flag_endofroad = 0;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	20000124 	.word	0x20000124
 8000fd0:	20000128 	.word	0x20000128
 8000fd4:	20000130 	.word	0x20000130

08000fd8 <wake>:

void wake(int flag) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	if (flag == 1) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d106      	bne.n	8000ff4 <wake+0x1c>
		HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, 1);
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <wake+0x30>)
 8000fee:	f002 f873 	bl	80030d8 <HAL_GPIO_WritePin>
		//	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 1);
	} else {
		HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, 0);
		//HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, 0);
	}
}
 8000ff2:	e005      	b.n	8001000 <wake+0x28>
		HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <wake+0x30>)
 8000ffc:	f002 f86c 	bl	80030d8 <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020000 	.word	0x40020000

0800100c <move>:

void move(int direction, int steps) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
	step = steps;
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <move+0x48>)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	6013      	str	r3, [r2, #0]
	switch (direction) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <move+0x1c>
 8001022:	2b01      	cmp	r3, #1
 8001024:	d009      	beq.n	800103a <move+0x2e>
		HAL_TIM_Base_Start_IT(&htim4);

		break;
	}

}
 8001026:	e011      	b.n	800104c <move+0x40>
		HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2140      	movs	r1, #64	; 0x40
 800102c:	480a      	ldr	r0, [pc, #40]	; (8001058 <move+0x4c>)
 800102e:	f002 f853 	bl	80030d8 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim4);
 8001032:	480a      	ldr	r0, [pc, #40]	; (800105c <move+0x50>)
 8001034:	f006 fbf3 	bl	800781e <HAL_TIM_Base_Start_IT>
		break;
 8001038:	e008      	b.n	800104c <move+0x40>
		HAL_GPIO_WritePin(dir_GPIO_Port, dir_Pin, 1);
 800103a:	2201      	movs	r2, #1
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <move+0x4c>)
 8001040:	f002 f84a 	bl	80030d8 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim4);
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <move+0x50>)
 8001046:	f006 fbea 	bl	800781e <HAL_TIM_Base_Start_IT>
		break;
 800104a:	bf00      	nop
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000004 	.word	0x20000004
 8001058:	40020800 	.word	0x40020800
 800105c:	200013cc 	.word	0x200013cc

08001060 <move_begin>:

void move_begin() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	wake(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f7ff ffb7 	bl	8000fd8 <wake>
	while (flag_endofroad == 0) {
 800106a:	e003      	b.n	8001074 <move_begin+0x14>
		move(0, 1);
 800106c:	2101      	movs	r1, #1
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ffcc 	bl	800100c <move>
	while (flag_endofroad == 0) {
 8001074:	4b05      	ldr	r3, [pc, #20]	; (800108c <move_begin+0x2c>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f7      	beq.n	800106c <move_begin+0xc>
	}
	flag_endofroad = 0;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <move_begin+0x2c>)
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
	wake(0);
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff ffa8 	bl	8000fd8 <wake>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000130 	.word	0x20000130

08001090 <setPosition>:

void setPosition(int position) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	flag_busy = 1;
 8001098:	4b1c      	ldr	r3, [pc, #112]	; (800110c <setPosition+0x7c>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
	int target;
	flag_endofroad = 0;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <setPosition+0x80>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]

	if (position >= 0) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	db28      	blt.n	80010fc <setPosition+0x6c>
//				move_begin();
//			}
//		}
//		else{

		if (last_position > position) {
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <setPosition+0x84>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	da10      	bge.n	80010d6 <setPosition+0x46>
			target = STEPS / 2 * abs((position - last_position));
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <setPosition+0x84>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b00      	cmp	r3, #0
 80010be:	bfb8      	it	lt
 80010c0:	425b      	neglt	r3, r3
 80010c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80010c6:	fb02 f303 	mul.w	r3, r2, r3
 80010ca:	60fb      	str	r3, [r7, #12]
			move(0, target);
 80010cc:	68f9      	ldr	r1, [r7, #12]
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff9c 	bl	800100c <move>
 80010d4:	e00f      	b.n	80010f6 <setPosition+0x66>
		} else {
			target = STEPS / 2 * abs((last_position - position));
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <setPosition+0x84>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bfb8      	it	lt
 80010e2:	425b      	neglt	r3, r3
 80010e4:	f240 32d9 	movw	r2, #985	; 0x3d9
 80010e8:	fb02 f303 	mul.w	r3, r2, r3
 80010ec:	60fb      	str	r3, [r7, #12]
			move(1, target);
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff ff8b 	bl	800100c <move>
		}
		gowno = target;
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <setPosition+0x88>)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	6013      	str	r3, [r2, #0]
	}
	last_position = position;
 80010fc:	4a05      	ldr	r2, [pc, #20]	; (8001114 <setPosition+0x84>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]

}
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000134 	.word	0x20000134
 8001110:	20000130 	.word	0x20000130
 8001114:	20000138 	.word	0x20000138
 8001118:	200013c8 	.word	0x200013c8

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b095      	sub	sp, #84	; 0x54
 8001120:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f001 f8d3 	bl	80022cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f9d7 	bl	80014d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 fbe5 	bl	80018f8 <MX_GPIO_Init>
  MX_DMA_Init();
 800112e:	f000 fbc3 	bl	80018b8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001132:	f000 fa55 	bl	80015e0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001136:	f000 faaf 	bl	8001698 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 800113a:	f00d fcf5 	bl	800eb28 <MX_USB_HOST_Init>
  MX_FATFS_Init();
 800113e:	f008 f963 	bl	8009408 <MX_FATFS_Init>
  MX_I2C2_Init();
 8001142:	f000 fa7b 	bl	800163c <MX_I2C2_Init>
  MX_TIM4_Init();
 8001146:	f000 fad5 	bl	80016f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 800114a:	f000 fb21 	bl	8001790 <MX_TIM5_Init>
  MX_TIM10_Init();
 800114e:	f000 fb8f 	bl	8001870 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

	/****************************** DAC AUDIO INIT ******************************/
	CS43_Init(hi2c1, MODE_I2S);
 8001152:	4cab      	ldr	r4, [pc, #684]	; (8001400 <main+0x2e4>)
 8001154:	2300      	movs	r3, #0
 8001156:	9311      	str	r3, [sp, #68]	; 0x44
 8001158:	4668      	mov	r0, sp
 800115a:	f104 0310 	add.w	r3, r4, #16
 800115e:	2244      	movs	r2, #68	; 0x44
 8001160:	4619      	mov	r1, r3
 8001162:	f00e f857 	bl	800f214 <memcpy>
 8001166:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800116a:	f7ff fa4b 	bl	8000604 <CS43_Init>
	CS43_SetVolume(255); //0-255
 800116e:	20ff      	movs	r0, #255	; 0xff
 8001170:	f7ff fb98 	bl	80008a4 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8001174:	2003      	movs	r0, #3
 8001176:	f7ff fb4b 	bl	8000810 <CS43_Enable_RightLeft>
	audioI2S_setHandle(&hi2s3);
 800117a:	48a2      	ldr	r0, [pc, #648]	; (8001404 <main+0x2e8>)
 800117c:	f7ff fcee 	bl	8000b5c <audioI2S_setHandle>
	bool isSdCardMounted = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	71fb      	strb	r3, [r7, #7]
	bool pauseResumeToggle = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	71bb      	strb	r3, [r7, #6]

	/****************************** LCD INIT ************************************/
	lcd16x2_i2c_init(&hi2c2);
 8001188:	489f      	ldr	r0, [pc, #636]	; (8001408 <main+0x2ec>)
 800118a:	f7ff fdbf 	bl	8000d0c <lcd16x2_i2c_init>
	lcd16x2_i2c_1stLine();
 800118e:	f7ff fe4d 	bl	8000e2c <lcd16x2_i2c_1stLine>
	lcd16x2_i2c_printf("Barman AuBaDi ");
 8001192:	489e      	ldr	r0, [pc, #632]	; (800140c <main+0x2f0>)
 8001194:	f7ff fe64 	bl	8000e60 <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 8001198:	f7ff fe50 	bl	8000e3c <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("< WYBIERZ NAPOJ >");
 800119c:	489c      	ldr	r0, [pc, #624]	; (8001410 <main+0x2f4>)
 800119e:	f7ff fe5f 	bl	8000e60 <lcd16x2_i2c_printf>

	/****************************** PWM LIGHTNING INIT **************************/
	HAL_TIM_Base_Start_IT(&htim10);
 80011a2:	489c      	ldr	r0, [pc, #624]	; (8001414 <main+0x2f8>)
 80011a4:	f006 fb3b 	bl	800781e <HAL_TIM_Base_Start_IT>
	//blue LED
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 80011a8:	4b9b      	ldr	r3, [pc, #620]	; (8001418 <main+0x2fc>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80011b0:	2104      	movs	r1, #4
 80011b2:	4899      	ldr	r0, [pc, #612]	; (8001418 <main+0x2fc>)
 80011b4:	f006 fbae 	bl	8007914 <HAL_TIM_PWM_Start>
	//green LED
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 80011b8:	4b97      	ldr	r3, [pc, #604]	; (8001418 <main+0x2fc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2200      	movs	r2, #0
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 80011c0:	2108      	movs	r1, #8
 80011c2:	4895      	ldr	r0, [pc, #596]	; (8001418 <main+0x2fc>)
 80011c4:	f006 fba6 	bl	8007914 <HAL_TIM_PWM_Start>
	//red LED
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 80011c8:	4b93      	ldr	r3, [pc, #588]	; (8001418 <main+0x2fc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80011d0:	210c      	movs	r1, #12
 80011d2:	4891      	ldr	r0, [pc, #580]	; (8001418 <main+0x2fc>)
 80011d4:	f006 fb9e 	bl	8007914 <HAL_TIM_PWM_Start>

	/****************************** MOTOR INIT ***********************************/
	move_begin();
 80011d8:	f7ff ff42 	bl	8001060 <move_begin>
	wake(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff fefb 	bl	8000fd8 <wake>
  /* USER CODE BEGIN WHILE */
	while (1) {

		/*********************************** MENU ************************************/

		if (selection != old_selection) {
 80011e2:	4b8e      	ldr	r3, [pc, #568]	; (800141c <main+0x300>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b8e      	ldr	r3, [pc, #568]	; (8001420 <main+0x304>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d05e      	beq.n	80012ac <main+0x190>
			if (selection <= 3 && selection >= 0) {
 80011ee:	4b8b      	ldr	r3, [pc, #556]	; (800141c <main+0x300>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	dc57      	bgt.n	80012a6 <main+0x18a>
 80011f6:	4b89      	ldr	r3, [pc, #548]	; (800141c <main+0x300>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db53      	blt.n	80012a6 <main+0x18a>
				switch (selection) {
 80011fe:	4b87      	ldr	r3, [pc, #540]	; (800141c <main+0x300>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b03      	cmp	r3, #3
 8001204:	d84a      	bhi.n	800129c <main+0x180>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <main+0xf0>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	0800121d 	.word	0x0800121d
 8001210:	0800123d 	.word	0x0800123d
 8001214:	0800125d 	.word	0x0800125d
 8001218:	0800127d 	.word	0x0800127d

				case 0:
					lcd16x2_i2c_clear();
 800121c:	f7ff fe16 	bl	8000e4c <lcd16x2_i2c_clear>
					lcd16x2_i2c_1stLine();
 8001220:	f7ff fe04 	bl	8000e2c <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf(" Barman AuBaDi ");
 8001224:	487f      	ldr	r0, [pc, #508]	; (8001424 <main+0x308>)
 8001226:	f7ff fe1b 	bl	8000e60 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800122a:	f7ff fe07 	bl	8000e3c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("<-WYBOR NAPOJU->");
 800122e:	487e      	ldr	r0, [pc, #504]	; (8001428 <main+0x30c>)
 8001230:	f7ff fe16 	bl	8000e60 <lcd16x2_i2c_printf>
					audio_flag = 4;
 8001234:	4b7d      	ldr	r3, [pc, #500]	; (800142c <main+0x310>)
 8001236:	2204      	movs	r2, #4
 8001238:	601a      	str	r2, [r3, #0]
					break;
 800123a:	e02f      	b.n	800129c <main+0x180>

				case 1:
					lcd16x2_i2c_clear();
 800123c:	f7ff fe06 	bl	8000e4c <lcd16x2_i2c_clear>
					lcd16x2_i2c_1stLine();
 8001240:	f7ff fdf4 	bl	8000e2c <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Barman AuBaDi ");
 8001244:	4871      	ldr	r0, [pc, #452]	; (800140c <main+0x2f0>)
 8001246:	f7ff fe0b 	bl	8000e60 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800124a:	f7ff fdf7 	bl	8000e3c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("<-   NAPOJ 1  ->");
 800124e:	4878      	ldr	r0, [pc, #480]	; (8001430 <main+0x314>)
 8001250:	f7ff fe06 	bl	8000e60 <lcd16x2_i2c_printf>
					audio_flag = 1;
 8001254:	4b75      	ldr	r3, [pc, #468]	; (800142c <main+0x310>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
					break;
 800125a:	e01f      	b.n	800129c <main+0x180>

				case 2:
					lcd16x2_i2c_clear();
 800125c:	f7ff fdf6 	bl	8000e4c <lcd16x2_i2c_clear>
					lcd16x2_i2c_1stLine();
 8001260:	f7ff fde4 	bl	8000e2c <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Barman AuBaDi ");
 8001264:	4869      	ldr	r0, [pc, #420]	; (800140c <main+0x2f0>)
 8001266:	f7ff fdfb 	bl	8000e60 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800126a:	f7ff fde7 	bl	8000e3c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("<-   NAPOJ 2  ->");
 800126e:	4871      	ldr	r0, [pc, #452]	; (8001434 <main+0x318>)
 8001270:	f7ff fdf6 	bl	8000e60 <lcd16x2_i2c_printf>
					audio_flag = 2;
 8001274:	4b6d      	ldr	r3, [pc, #436]	; (800142c <main+0x310>)
 8001276:	2202      	movs	r2, #2
 8001278:	601a      	str	r2, [r3, #0]
					break;
 800127a:	e00f      	b.n	800129c <main+0x180>

				case 3:
					lcd16x2_i2c_clear();
 800127c:	f7ff fde6 	bl	8000e4c <lcd16x2_i2c_clear>
					lcd16x2_i2c_1stLine();
 8001280:	f7ff fdd4 	bl	8000e2c <lcd16x2_i2c_1stLine>
					lcd16x2_i2c_printf("Barman AuBaDi ");
 8001284:	4861      	ldr	r0, [pc, #388]	; (800140c <main+0x2f0>)
 8001286:	f7ff fdeb 	bl	8000e60 <lcd16x2_i2c_printf>
					lcd16x2_i2c_2ndLine();
 800128a:	f7ff fdd7 	bl	8000e3c <lcd16x2_i2c_2ndLine>
					lcd16x2_i2c_printf("<-   NAPOJ 3  ->");
 800128e:	486a      	ldr	r0, [pc, #424]	; (8001438 <main+0x31c>)
 8001290:	f7ff fde6 	bl	8000e60 <lcd16x2_i2c_printf>
					audio_flag = 3;
 8001294:	4b65      	ldr	r3, [pc, #404]	; (800142c <main+0x310>)
 8001296:	2203      	movs	r2, #3
 8001298:	601a      	str	r2, [r3, #0]
					break;
 800129a:	bf00      	nop
				}
				old_selection = selection;
 800129c:	4b5f      	ldr	r3, [pc, #380]	; (800141c <main+0x300>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a5f      	ldr	r2, [pc, #380]	; (8001420 <main+0x304>)
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e002      	b.n	80012ac <main+0x190>
			}

			else {
				selection = 0;
 80012a6:	4b5d      	ldr	r3, [pc, #372]	; (800141c <main+0x300>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
			}

		}

		/*********************************** LED PWM  ************************************/
		TIM5->CCR2 = duty;
 80012ac:	4b63      	ldr	r3, [pc, #396]	; (800143c <main+0x320>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b63      	ldr	r3, [pc, #396]	; (8001440 <main+0x324>)
 80012b2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR3 = 1000;
 80012b4:	4b62      	ldr	r3, [pc, #392]	; (8001440 <main+0x324>)
 80012b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM5->CCR4 = (1000 - duty);
 80012bc:	4b5f      	ldr	r3, [pc, #380]	; (800143c <main+0x320>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f5c3 727a 	rsb	r2, r3, #1000	; 0x3e8
 80012c4:	4b5e      	ldr	r3, [pc, #376]	; (8001440 <main+0x324>)
 80012c6:	641a      	str	r2, [r3, #64]	; 0x40

		/*********************************** AUDIO ****************************************/

		if (Appli_state == APPLICATION_START) {
 80012c8:	4b5e      	ldr	r3, [pc, #376]	; (8001444 <main+0x328>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d106      	bne.n	80012de <main+0x1c2>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012d6:	485c      	ldr	r0, [pc, #368]	; (8001448 <main+0x32c>)
 80012d8:	f001 fefe 	bl	80030d8 <HAL_GPIO_WritePin>
 80012dc:	e009      	b.n	80012f2 <main+0x1d6>
		}

		else if (Appli_state == APPLICATION_DISCONNECT) {
 80012de:	4b59      	ldr	r3, [pc, #356]	; (8001444 <main+0x328>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d105      	bne.n	80012f2 <main+0x1d6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80012e6:	2200      	movs	r2, #0
 80012e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ec:	4856      	ldr	r0, [pc, #344]	; (8001448 <main+0x32c>)
 80012ee:	f001 fef3 	bl	80030d8 <HAL_GPIO_WritePin>

		}

		if (Appli_state == APPLICATION_READY) {
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <main+0x328>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	f040 80c2 	bne.w	8001480 <main+0x364>
			if (!isSdCardMounted) {
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f083 0301 	eor.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <main+0x1fa>
				f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 8001308:	2200      	movs	r2, #0
 800130a:	4950      	ldr	r1, [pc, #320]	; (800144c <main+0x330>)
 800130c:	4850      	ldr	r0, [pc, #320]	; (8001450 <main+0x334>)
 800130e:	f00c fdbb 	bl	800de88 <f_mount>
				isSdCardMounted = 1;
 8001312:	2301      	movs	r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]
			}

			if (audio_flag == 1) {
 8001316:	4b45      	ldr	r3, [pc, #276]	; (800142c <main+0x310>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d11d      	bne.n	800135a <main+0x23e>
				if (!wavPlayer_isFinished()) {
 800131e:	f000 ff87 	bl	8002230 <wavPlayer_isFinished>
 8001322:	4603      	mov	r3, r0
 8001324:	f083 0301 	eor.w	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <main+0x218>
					wavPlayer_stop();
 800132e:	f000 ff73 	bl	8002218 <wavPlayer_stop>
 8001332:	e0a5      	b.n	8001480 <main+0x364>
				} else {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001334:	2201      	movs	r2, #1
 8001336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133a:	4843      	ldr	r0, [pc, #268]	; (8001448 <main+0x32c>)
 800133c:	f001 fecc 	bl	80030d8 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8001340:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001344:	f001 f834 	bl	80023b0 <HAL_Delay>
					wavPlayer_fileSelect(WAV_FILE_1);
 8001348:	4842      	ldr	r0, [pc, #264]	; (8001454 <main+0x338>)
 800134a:	f000 fe97 	bl	800207c <wavPlayer_fileSelect>
					wavPlayer_play();
 800134e:	f000 febf 	bl	80020d0 <wavPlayer_play>
					audio_flag = 0;
 8001352:	4b36      	ldr	r3, [pc, #216]	; (800142c <main+0x310>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e092      	b.n	8001480 <main+0x364>
				}
			}

			else if (audio_flag == 2) {
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <main+0x310>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d11d      	bne.n	800139e <main+0x282>
				if (!wavPlayer_isFinished()) {
 8001362:	f000 ff65 	bl	8002230 <wavPlayer_isFinished>
 8001366:	4603      	mov	r3, r0
 8001368:	f083 0301 	eor.w	r3, r3, #1
 800136c:	b2db      	uxtb	r3, r3
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <main+0x25c>
					wavPlayer_stop();
 8001372:	f000 ff51 	bl	8002218 <wavPlayer_stop>
 8001376:	e083      	b.n	8001480 <main+0x364>
				} else {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137e:	4832      	ldr	r0, [pc, #200]	; (8001448 <main+0x32c>)
 8001380:	f001 feaa 	bl	80030d8 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8001384:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001388:	f001 f812 	bl	80023b0 <HAL_Delay>
					wavPlayer_fileSelect(WAV_FILE_2);
 800138c:	4832      	ldr	r0, [pc, #200]	; (8001458 <main+0x33c>)
 800138e:	f000 fe75 	bl	800207c <wavPlayer_fileSelect>
					wavPlayer_play();
 8001392:	f000 fe9d 	bl	80020d0 <wavPlayer_play>
					audio_flag = 0;
 8001396:	4b25      	ldr	r3, [pc, #148]	; (800142c <main+0x310>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	e070      	b.n	8001480 <main+0x364>
				}
			}

			else if (audio_flag == 3) {
 800139e:	4b23      	ldr	r3, [pc, #140]	; (800142c <main+0x310>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d11d      	bne.n	80013e2 <main+0x2c6>
				if (!wavPlayer_isFinished()) {
 80013a6:	f000 ff43 	bl	8002230 <wavPlayer_isFinished>
 80013aa:	4603      	mov	r3, r0
 80013ac:	f083 0301 	eor.w	r3, r3, #1
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <main+0x2a0>
					wavPlayer_stop();
 80013b6:	f000 ff2f 	bl	8002218 <wavPlayer_stop>
 80013ba:	e061      	b.n	8001480 <main+0x364>
				} else {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <main+0x32c>)
 80013c4:	f001 fe88 	bl	80030d8 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 80013c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013cc:	f000 fff0 	bl	80023b0 <HAL_Delay>
					wavPlayer_fileSelect(WAV_FILE_3);
 80013d0:	4820      	ldr	r0, [pc, #128]	; (8001454 <main+0x338>)
 80013d2:	f000 fe53 	bl	800207c <wavPlayer_fileSelect>
					wavPlayer_play();
 80013d6:	f000 fe7b 	bl	80020d0 <wavPlayer_play>
					audio_flag = 0;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <main+0x310>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e04e      	b.n	8001480 <main+0x364>
				}
			}

			else if (audio_flag == 4) {
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <main+0x310>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d14a      	bne.n	8001480 <main+0x364>
				if (!wavPlayer_isFinished()) {
 80013ea:	f000 ff21 	bl	8002230 <wavPlayer_isFinished>
 80013ee:	4603      	mov	r3, r0
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d030      	beq.n	800145c <main+0x340>
					wavPlayer_stop();
 80013fa:	f000 ff0d 	bl	8002218 <wavPlayer_stop>
 80013fe:	e03f      	b.n	8001480 <main+0x364>
 8001400:	2000140c 	.word	0x2000140c
 8001404:	20001598 	.word	0x20001598
 8001408:	200014a0 	.word	0x200014a0
 800140c:	0800fa4c 	.word	0x0800fa4c
 8001410:	0800fa5c 	.word	0x0800fa5c
 8001414:	20001460 	.word	0x20001460
 8001418:	200014f4 	.word	0x200014f4
 800141c:	20000128 	.word	0x20000128
 8001420:	20000000 	.word	0x20000000
 8001424:	0800fa70 	.word	0x0800fa70
 8001428:	0800fa80 	.word	0x0800fa80
 800142c:	2000012c 	.word	0x2000012c
 8001430:	0800fa94 	.word	0x0800fa94
 8001434:	0800faa8 	.word	0x0800faa8
 8001438:	0800fabc 	.word	0x0800fabc
 800143c:	20000120 	.word	0x20000120
 8001440:	40000c00 	.word	0x40000c00
 8001444:	200013bc 	.word	0x200013bc
 8001448:	40020c00 	.word	0x40020c00
 800144c:	200015e4 	.word	0x200015e4
 8001450:	20001818 	.word	0x20001818
 8001454:	0800fad0 	.word	0x0800fad0
 8001458:	0800fae0 	.word	0x0800fae0
				} else {
					HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4816      	ldr	r0, [pc, #88]	; (80014bc <main+0x3a0>)
 8001464:	f001 fe38 	bl	80030d8 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8001468:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800146c:	f000 ffa0 	bl	80023b0 <HAL_Delay>
					wavPlayer_fileSelect(WAV_FILE_menu);
 8001470:	4813      	ldr	r0, [pc, #76]	; (80014c0 <main+0x3a4>)
 8001472:	f000 fe03 	bl	800207c <wavPlayer_fileSelect>
					wavPlayer_play();
 8001476:	f000 fe2b 	bl	80020d0 <wavPlayer_play>
					audio_flag = 0;
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <main+0x3a8>)
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
				}
			}

		}

		wavPlayer_process();
 8001480:	f000 fe58 	bl	8002134 <wavPlayer_process>

		/*********************************** MOTOR  ************************************/
		if (flag_busy == 0) {
 8001484:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <main+0x3ac>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d113      	bne.n	80014b4 <main+0x398>
			if (numer >= 0) {
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <main+0x3b0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db07      	blt.n	80014a4 <main+0x388>
				jechanka = kolejka[numer];
 8001494:	4b0d      	ldr	r3, [pc, #52]	; (80014cc <main+0x3b0>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <main+0x3b4>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	461a      	mov	r2, r3
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <main+0x3b8>)
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	e002      	b.n	80014aa <main+0x38e>
			} else {
				jechanka = 0;
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <main+0x3b8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
			}
			setPosition(jechanka);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <main+0x3b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fdee 	bl	8001090 <setPosition>

		}

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80014b4:	f00d fb5e 	bl	800eb74 <MX_USB_HOST_Process>
		if (selection != old_selection) {
 80014b8:	e693      	b.n	80011e2 <main+0xc6>
 80014ba:	bf00      	nop
 80014bc:	40020c00 	.word	0x40020c00
 80014c0:	0800fae0 	.word	0x0800fae0
 80014c4:	2000012c 	.word	0x2000012c
 80014c8:	20000134 	.word	0x20000134
 80014cc:	20000008 	.word	0x20000008
 80014d0:	2000000c 	.word	0x2000000c
 80014d4:	20001594 	.word	0x20001594

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b09a      	sub	sp, #104	; 0x68
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e2:	2230      	movs	r2, #48	; 0x30
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00d fe9f 	bl	800f22a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <SystemClock_Config+0x100>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a30      	ldr	r2, [pc, #192]	; (80015d8 <SystemClock_Config+0x100>)
 8001518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <SystemClock_Config+0x100>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	4b2b      	ldr	r3, [pc, #172]	; (80015dc <SystemClock_Config+0x104>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a2a      	ldr	r2, [pc, #168]	; (80015dc <SystemClock_Config+0x104>)
 8001534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b28      	ldr	r3, [pc, #160]	; (80015dc <SystemClock_Config+0x104>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001546:	2301      	movs	r3, #1
 8001548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001550:	2302      	movs	r3, #2
 8001552:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001558:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800155a:	2304      	movs	r3, #4
 800155c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 72;
 800155e:	2348      	movs	r3, #72	; 0x48
 8001560:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001562:	2302      	movs	r3, #2
 8001564:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001566:	2303      	movs	r3, #3
 8001568:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800156e:	4618      	mov	r0, r3
 8001570:	f005 fb4c 	bl	8006c0c <HAL_RCC_OscConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800157a:	f000 fab1 	bl	8001ae0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800157e:	230f      	movs	r3, #15
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001582:	2302      	movs	r3, #2
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800158a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	2102      	movs	r1, #2
 800159a:	4618      	mov	r0, r3
 800159c:	f005 fda6 	bl	80070ec <HAL_RCC_ClockConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80015a6:	f000 fa9b 	bl	8001ae0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015aa:	2301      	movs	r3, #1
 80015ac:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 288;
 80015ae:	f44f 7390 	mov.w	r3, #288	; 0x120
 80015b2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 80015b4:	2308      	movs	r3, #8
 80015b6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80015b8:	2306      	movs	r3, #6
 80015ba:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	4618      	mov	r0, r3
 80015c2:	f005 ff71 	bl	80074a8 <HAL_RCCEx_PeriphCLKConfig>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 80015cc:	f000 fa88 	bl	8001ae0 <Error_Handler>
  }
}
 80015d0:	bf00      	nop
 80015d2:	3768      	adds	r7, #104	; 0x68
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b12      	ldr	r3, [pc, #72]	; (8001630 <MX_I2C1_Init+0x50>)
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <MX_I2C1_Init+0x54>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ea:	4b11      	ldr	r3, [pc, #68]	; (8001630 <MX_I2C1_Init+0x50>)
 80015ec:	4a12      	ldr	r2, [pc, #72]	; (8001638 <MX_I2C1_Init+0x58>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <MX_I2C1_Init+0x50>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <MX_I2C1_Init+0x50>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <MX_I2C1_Init+0x50>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_I2C1_Init+0x50>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <MX_I2C1_Init+0x50>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <MX_I2C1_Init+0x50>)
 800161e:	f003 fa99 	bl	8004b54 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 fa5a 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162c:	bf00      	nop
 800162e:	bd80      	pop	{r7, pc}
 8001630:	2000140c 	.word	0x2000140c
 8001634:	40005400 	.word	0x40005400
 8001638:	000186a0 	.word	0x000186a0

0800163c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001640:	4b12      	ldr	r3, [pc, #72]	; (800168c <MX_I2C2_Init+0x50>)
 8001642:	4a13      	ldr	r2, [pc, #76]	; (8001690 <MX_I2C2_Init+0x54>)
 8001644:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001646:	4b11      	ldr	r3, [pc, #68]	; (800168c <MX_I2C2_Init+0x50>)
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <MX_I2C2_Init+0x58>)
 800164a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800164c:	4b0f      	ldr	r3, [pc, #60]	; (800168c <MX_I2C2_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001652:	4b0e      	ldr	r3, [pc, #56]	; (800168c <MX_I2C2_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001658:	4b0c      	ldr	r3, [pc, #48]	; (800168c <MX_I2C2_Init+0x50>)
 800165a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800165e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b0a      	ldr	r3, [pc, #40]	; (800168c <MX_I2C2_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <MX_I2C2_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	; (800168c <MX_I2C2_Init+0x50>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001672:	4b06      	ldr	r3, [pc, #24]	; (800168c <MX_I2C2_Init+0x50>)
 8001674:	2200      	movs	r2, #0
 8001676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	; (800168c <MX_I2C2_Init+0x50>)
 800167a:	f003 fa6b 	bl	8004b54 <HAL_I2C_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001684:	f000 fa2c 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200014a0 	.word	0x200014a0
 8001690:	40005800 	.word	0x40005800
 8001694:	000186a0 	.word	0x000186a0

08001698 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_I2S3_Init+0x54>)
 800169e:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <MX_I2S3_Init+0x58>)
 80016a0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <MX_I2S3_Init+0x54>)
 80016a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016a8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_I2S3_Init+0x54>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_I2S3_Init+0x54>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <MX_I2S3_Init+0x54>)
 80016b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016bc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_I2S3_Init+0x54>)
 80016c0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80016c4:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_I2S3_Init+0x54>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80016cc:	4b07      	ldr	r3, [pc, #28]	; (80016ec <MX_I2S3_Init+0x54>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80016d2:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_I2S3_Init+0x54>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	; (80016ec <MX_I2S3_Init+0x54>)
 80016da:	f004 faf1 	bl	8005cc0 <HAL_I2S_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80016e4:	f000 f9fc 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20001598 	.word	0x20001598
 80016f0:	40003c00 	.word	0x40003c00

080016f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM4_Init+0x94>)
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <MX_TIM4_Init+0x98>)
 8001714:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = TIM4_PRESCALER;
 8001716:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <MX_TIM4_Init+0x94>)
 8001718:	22c8      	movs	r2, #200	; 0xc8
 800171a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_TIM4_Init+0x94>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIM4_PERIOD;
 8001722:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM4_Init+0x94>)
 8001724:	f240 3252 	movw	r2, #850	; 0x352
 8001728:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_TIM4_Init+0x94>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_TIM4_Init+0x94>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001736:	4814      	ldr	r0, [pc, #80]	; (8001788 <MX_TIM4_Init+0x94>)
 8001738:	f006 f846 	bl	80077c8 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001742:	f000 f9cd 	bl	8001ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001746:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800174c:	f107 0308 	add.w	r3, r7, #8
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_TIM4_Init+0x94>)
 8001754:	f006 fade 	bl	8007d14 <HAL_TIM_ConfigClockSource>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 f9bf 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800176a:	463b      	mov	r3, r7
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <MX_TIM4_Init+0x94>)
 8001770:	f006 fe7c 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800177a:	f000 f9b1 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200013cc 	.word	0x200013cc
 800178c:	40000800 	.word	0x40000800

08001790 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017b2:	4b2d      	ldr	r3, [pc, #180]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017b4:	4a2d      	ldr	r2, [pc, #180]	; (800186c <MX_TIM5_Init+0xdc>)
 80017b6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = TIM5_PRESCALER;
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017ba:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80017be:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = TIM5_PERIOD;
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017c8:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80017cc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017da:	4823      	ldr	r0, [pc, #140]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017dc:	f006 f86e 	bl	80078bc <HAL_TIM_PWM_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80017e6:	f000 f97b 	bl	8001ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017f2:	f107 0320 	add.w	r3, r7, #32
 80017f6:	4619      	mov	r1, r3
 80017f8:	481b      	ldr	r0, [pc, #108]	; (8001868 <MX_TIM5_Init+0xd8>)
 80017fa:	f006 fe37 	bl	800846c <HAL_TIMEx_MasterConfigSynchronization>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001804:	f000 f96c 	bl	8001ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001808:	2360      	movs	r3, #96	; 0x60
 800180a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2204      	movs	r2, #4
 800181c:	4619      	mov	r1, r3
 800181e:	4812      	ldr	r0, [pc, #72]	; (8001868 <MX_TIM5_Init+0xd8>)
 8001820:	f006 f9b2 	bl	8007b88 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800182a:	f000 f959 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2208      	movs	r2, #8
 8001832:	4619      	mov	r1, r3
 8001834:	480c      	ldr	r0, [pc, #48]	; (8001868 <MX_TIM5_Init+0xd8>)
 8001836:	f006 f9a7 	bl	8007b88 <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001840:	f000 f94e 	bl	8001ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	220c      	movs	r2, #12
 8001848:	4619      	mov	r1, r3
 800184a:	4807      	ldr	r0, [pc, #28]	; (8001868 <MX_TIM5_Init+0xd8>)
 800184c:	f006 f99c 	bl	8007b88 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <MX_TIM5_Init+0xca>
  {
    Error_Handler();
 8001856:	f000 f943 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <MX_TIM5_Init+0xd8>)
 800185c:	f000 fb0c 	bl	8001e78 <HAL_TIM_MspPostInit>

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200014f4 	.word	0x200014f4
 800186c:	40000c00 	.word	0x40000c00

08001870 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001874:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_TIM10_Init+0x40>)
 8001876:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <MX_TIM10_Init+0x44>)
 8001878:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = TIM10_PRESCALER;
 800187a:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <MX_TIM10_Init+0x40>)
 800187c:	f240 3252 	movw	r2, #850	; 0x352
 8001880:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_TIM10_Init+0x40>)
 8001884:	2200      	movs	r2, #0
 8001886:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = TIM10_PERIOD;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_TIM10_Init+0x40>)
 800188a:	f240 3252 	movw	r2, #850	; 0x352
 800188e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001890:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <MX_TIM10_Init+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001896:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_TIM10_Init+0x40>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800189c:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_TIM10_Init+0x40>)
 800189e:	f005 ff93 	bl	80077c8 <HAL_TIM_Base_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80018a8:	f000 f91a 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20001460 	.word	0x20001460
 80018b4:	40014400 	.word	0x40014400

080018b8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <MX_DMA_Init+0x3c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a0b      	ldr	r2, [pc, #44]	; (80018f4 <MX_DMA_Init+0x3c>)
 80018c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <MX_DMA_Init+0x3c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2100      	movs	r1, #0
 80018de:	2010      	movs	r0, #16
 80018e0:	f000 fe63 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018e4:	2010      	movs	r0, #16
 80018e6:	f000 fe7c 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	60da      	str	r2, [r3, #12]
 800190c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a6c      	ldr	r2, [pc, #432]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b6a      	ldr	r3, [pc, #424]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b63      	ldr	r3, [pc, #396]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
 800194a:	4b5f      	ldr	r3, [pc, #380]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a5e      	ldr	r2, [pc, #376]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001950:	f043 0304 	orr.w	r3, r3, #4
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b5c      	ldr	r3, [pc, #368]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a57      	ldr	r2, [pc, #348]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 800196c:	f043 0301 	orr.w	r3, r3, #1
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a50      	ldr	r2, [pc, #320]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b4e      	ldr	r3, [pc, #312]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <MX_GPIO_Init+0x1d0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_power_Pin|dir_Pin|step_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	f240 1141 	movw	r1, #321	; 0x141
 80019bc:	4843      	ldr	r0, [pc, #268]	; (8001acc <MX_GPIO_Init+0x1d4>)
 80019be:	f001 fb8b 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80019c2:	2200      	movs	r2, #0
 80019c4:	f24f 0110 	movw	r1, #61456	; 0xf010
 80019c8:	4841      	ldr	r0, [pc, #260]	; (8001ad0 <MX_GPIO_Init+0x1d8>)
 80019ca:	f001 fb85 	bl	80030d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, GPIO_PIN_RESET);
 80019ce:	2200      	movs	r2, #0
 80019d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019d4:	483f      	ldr	r0, [pc, #252]	; (8001ad4 <MX_GPIO_Init+0x1dc>)
 80019d6:	f001 fb7f 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : button_left_Pin button_select_Pin button_right_Pin */
  GPIO_InitStruct.Pin = button_left_Pin|button_select_Pin|button_right_Pin;
 80019da:	232a      	movs	r3, #42	; 0x2a
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019de:	4b3e      	ldr	r3, [pc, #248]	; (8001ad8 <MX_GPIO_Init+0x1e0>)
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019e2:	2302      	movs	r3, #2
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	483b      	ldr	r0, [pc, #236]	; (8001adc <MX_GPIO_Init+0x1e4>)
 80019ee:	f001 f9f1 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_power_Pin dir_Pin step_Pin */
  GPIO_InitStruct.Pin = USB_power_Pin|dir_Pin|step_Pin;
 80019f2:	f240 1341 	movw	r3, #321	; 0x141
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4830      	ldr	r0, [pc, #192]	; (8001acc <MX_GPIO_Init+0x1d4>)
 8001a0c:	f001 f9e2 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a10:	2301      	movs	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	482c      	ldr	r0, [pc, #176]	; (8001ad4 <MX_GPIO_Init+0x1dc>)
 8001a24:	f001 f9d6 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : endstop_Pin */
  GPIO_InitStruct.Pin = endstop_Pin;
 8001a28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a2e:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <MX_GPIO_Init+0x1e0>)
 8001a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a32:	2302      	movs	r3, #2
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(endstop_GPIO_Port, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4824      	ldr	r0, [pc, #144]	; (8001ad0 <MX_GPIO_Init+0x1d8>)
 8001a3e:	f001 f9c9 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 8001a42:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a46:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a54:	f107 031c 	add.w	r3, r7, #28
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481d      	ldr	r0, [pc, #116]	; (8001ad0 <MX_GPIO_Init+0x1d8>)
 8001a5c:	f001 f9ba 	bl	8002dd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : slp_rst_Pin */
  GPIO_InitStruct.Pin = slp_rst_Pin;
 8001a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a66:	2301      	movs	r3, #1
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(slp_rst_GPIO_Port, &GPIO_InitStruct);
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	4619      	mov	r1, r3
 8001a78:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <MX_GPIO_Init+0x1dc>)
 8001a7a:	f001 f9ab 	bl	8002dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	2007      	movs	r0, #7
 8001a84:	f000 fd91 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001a88:	2007      	movs	r0, #7
 8001a8a:	f000 fdaa 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2009      	movs	r0, #9
 8001a94:	f000 fd89 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a98:	2009      	movs	r0, #9
 8001a9a:	f000 fda2 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2017      	movs	r0, #23
 8001aa4:	f000 fd81 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aa8:	2017      	movs	r0, #23
 8001aaa:	f000 fd9a 	bl	80025e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2028      	movs	r0, #40	; 0x28
 8001ab4:	f000 fd79 	bl	80025aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001ab8:	2028      	movs	r0, #40	; 0x28
 8001aba:	f000 fd92 	bl	80025e2 <HAL_NVIC_EnableIRQ>

}
 8001abe:	bf00      	nop
 8001ac0:	3730      	adds	r7, #48	; 0x30
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	10110000 	.word	0x10110000
 8001adc:	40021000 	.word	0x40021000

08001ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	607b      	str	r3, [r7, #4]
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	603b      	str	r3, [r7, #0]
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a08      	ldr	r2, [pc, #32]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <HAL_MspInit+0x4c>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b2e:	2007      	movs	r0, #7
 8001b30:	f000 fd30 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800

08001b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b08c      	sub	sp, #48	; 0x30
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b48:	f107 031c 	add.w	r3, r7, #28
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_I2C_MspInit+0x10c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12d      	bne.n	8001bbe <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	61bb      	str	r3, [r7, #24]
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001b6c:	f043 0302 	orr.w	r3, r3, #2
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2X1_SCL_Pin|I2C1_SDA_Pin;
 8001b7e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b84:	2312      	movs	r3, #18
 8001b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b90:	2304      	movs	r3, #4
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b94:	f107 031c 	add.w	r3, r7, #28
 8001b98:	4619      	mov	r1, r3
 8001b9a:	482e      	ldr	r0, [pc, #184]	; (8001c54 <HAL_I2C_MspInit+0x114>)
 8001b9c:	f001 f91a 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a29      	ldr	r2, [pc, #164]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001baa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001bbc:	e041      	b.n	8001c42 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_I2C_MspInit+0x118>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d13c      	bne.n	8001c42 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	2300      	movs	r3, #0
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bea:	2312      	movs	r3, #18
 8001bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4814      	ldr	r0, [pc, #80]	; (8001c54 <HAL_I2C_MspInit+0x114>)
 8001c02:	f001 f8e7 	bl	8002dd4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001c06:	2308      	movs	r3, #8
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c0a:	2312      	movs	r3, #18
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001c16:	2309      	movs	r3, #9
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	480c      	ldr	r0, [pc, #48]	; (8001c54 <HAL_I2C_MspInit+0x114>)
 8001c22:	f001 f8d7 	bl	8002dd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	4a08      	ldr	r2, [pc, #32]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001c30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c34:	6413      	str	r3, [r2, #64]	; 0x40
 8001c36:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_I2C_MspInit+0x110>)
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	68fb      	ldr	r3, [r7, #12]
}
 8001c42:	bf00      	nop
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40005400 	.word	0x40005400
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40005800 	.word	0x40005800

08001c5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	; 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a45      	ldr	r2, [pc, #276]	; (8001d90 <HAL_I2S_MspInit+0x134>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	f040 8084 	bne.w	8001d88 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001c80:	2300      	movs	r3, #0
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	4b43      	ldr	r3, [pc, #268]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a42      	ldr	r2, [pc, #264]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c90:	4b40      	ldr	r3, [pc, #256]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	4b3c      	ldr	r3, [pc, #240]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a3b      	ldr	r2, [pc, #236]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001ca6:	f043 0301 	orr.w	r3, r3, #1
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b39      	ldr	r3, [pc, #228]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc8:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <HAL_I2S_MspInit+0x138>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ce4:	2306      	movs	r3, #6
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	482a      	ldr	r0, [pc, #168]	; (8001d98 <HAL_I2S_MspInit+0x13c>)
 8001cf0:	f001 f870 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_CK_Pin|I2S3_SD_Pin;
 8001cf4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d06:	2306      	movs	r3, #6
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d0a:	f107 0314 	add.w	r3, r7, #20
 8001d0e:	4619      	mov	r1, r3
 8001d10:	4822      	ldr	r0, [pc, #136]	; (8001d9c <HAL_I2S_MspInit+0x140>)
 8001d12:	f001 f85f 	bl	8002dd4 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d18:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <HAL_I2S_MspInit+0x148>)
 8001d1a:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001d1c:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d22:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d24:	2240      	movs	r2, #64	; 0x40
 8001d26:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d28:	4b1d      	ldr	r3, [pc, #116]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d34:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d44:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8001d46:	4b16      	ldr	r3, [pc, #88]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d4c:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d54:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d56:	2204      	movs	r2, #4
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001d66:	4b0e      	ldr	r3, [pc, #56]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d6e:	f000 fc53 	bl	8002618 <HAL_DMA_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 8001d78:	f7ff feb2 	bl	8001ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a08      	ldr	r2, [pc, #32]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d80:	639a      	str	r2, [r3, #56]	; 0x38
 8001d82:	4a07      	ldr	r2, [pc, #28]	; (8001da0 <HAL_I2S_MspInit+0x144>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d88:	bf00      	nop
 8001d8a:	3728      	adds	r7, #40	; 0x28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40003c00 	.word	0x40003c00
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000
 8001d9c:	40020800 	.word	0x40020800
 8001da0:	20001534 	.word	0x20001534
 8001da4:	40026088 	.word	0x40026088

08001da8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_TIM_Base_MspInit+0x80>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d116      	bne.n	8001de8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60fb      	str	r3, [r7, #12]
 8001dbe:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	4a1a      	ldr	r2, [pc, #104]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dc4:	f043 0304 	orr.w	r3, r3, #4
 8001dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dca:	4b18      	ldr	r3, [pc, #96]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2100      	movs	r1, #0
 8001dda:	201e      	movs	r0, #30
 8001ddc:	f000 fbe5 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001de0:	201e      	movs	r0, #30
 8001de2:	f000 fbfe 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001de6:	e01a      	b.n	8001e1e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a10      	ldr	r2, [pc, #64]	; (8001e30 <HAL_TIM_Base_MspInit+0x88>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d115      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <HAL_TIM_Base_MspInit+0x84>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2019      	movs	r0, #25
 8001e14:	f000 fbc9 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e18:	2019      	movs	r0, #25
 8001e1a:	f000 fbe2 	bl	80025e2 <HAL_NVIC_EnableIRQ>
}
 8001e1e:	bf00      	nop
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40000800 	.word	0x40000800
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40014400 	.word	0x40014400

08001e34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0b      	ldr	r2, [pc, #44]	; (8001e70 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10d      	bne.n	8001e62 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <HAL_TIM_PWM_MspInit+0x40>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <HAL_TIM_PWM_MspInit+0x40>)
 8001e50:	f043 0308 	orr.w	r3, r3, #8
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <HAL_TIM_PWM_MspInit+0x40>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 0308 	and.w	r3, r3, #8
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a12      	ldr	r2, [pc, #72]	; (8001ee0 <HAL_TIM_MspPostInit+0x68>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d11d      	bne.n	8001ed6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_TIM_MspPostInit+0x6c>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001eb6:	230e      	movs	r3, #14
 8001eb8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_TIM_MspPostInit+0x70>)
 8001ed2:	f000 ff7f 	bl	8002dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001ed6:	bf00      	nop
 8001ed8:	3720      	adds	r7, #32
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40000c00 	.word	0x40000c00
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020000 	.word	0x40020000

08001eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001efa:	b480      	push	{r7}
 8001efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efe:	e7fe      	b.n	8001efe <HardFault_Handler+0x4>

08001f00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <MemManage_Handler+0x4>

08001f06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <BusFault_Handler+0x4>

08001f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <UsageFault_Handler+0x4>

08001f12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr

08001f2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f40:	f000 fa16 	bl	8002370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f001 f8f7 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001f5a:	2008      	movs	r0, #8
 8001f5c:	f001 f8f0 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <DMA1_Stream5_IRQHandler+0x10>)
 8001f6a:	f000 fccb 	bl	8002904 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20001534 	.word	0x20001534

08001f78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f7c:	2020      	movs	r0, #32
 8001f7e:	f001 f8df 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f8e:	f005 fcf3 	bl	8007978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20001460 	.word	0x20001460

08001f9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM4_IRQHandler+0x10>)
 8001fa2:	f005 fce9 	bl	8007978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200013cc 	.word	0x200013cc

08001fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001fb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001fb8:	f001 f8c2 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <OTG_FS_IRQHandler+0x10>)
 8001fc6:	f001 fb63 	bl	8003690 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20001e24 	.word	0x20001e24

08001fd4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <_sbrk+0x50>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <_sbrk+0x16>
		heap_end = &end;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <_sbrk+0x50>)
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <_sbrk+0x54>)
 8001fe8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <_sbrk+0x50>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <_sbrk+0x50>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	466a      	mov	r2, sp
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d907      	bls.n	800200e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ffe:	f00d f8cf 	bl	800f1a0 <__errno>
 8002002:	4602      	mov	r2, r0
 8002004:	230c      	movs	r3, #12
 8002006:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002008:	f04f 33ff 	mov.w	r3, #4294967295
 800200c:	e006      	b.n	800201c <_sbrk+0x48>
	}

	heap_end += incr;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <_sbrk+0x50>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	4a03      	ldr	r2, [pc, #12]	; (8002024 <_sbrk+0x50>)
 8002018:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000013c 	.word	0x2000013c
 8002028:	200020f0 	.word	0x200020f0

0800202c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <SystemInit+0x28>)
 8002032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002036:	4a07      	ldr	r2, [pc, #28]	; (8002054 <SystemInit+0x28>)
 8002038:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800203c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <SystemInit+0x28>)
 8002042:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002046:	609a      	str	r2, [r3, #8]
#endif
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <wavPlayer_reset+0x1c>)
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <wavPlayer_reset+0x20>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20001374 	.word	0x20001374
 8002078:	2000137c 	.word	0x2000137c

0800207c <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8002088:	2201      	movs	r2, #1
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	480d      	ldr	r0, [pc, #52]	; (80020c4 <wavPlayer_fileSelect+0x48>)
 800208e:	f00b ff41 	bl	800df14 <f_open>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <wavPlayer_fileSelect+0x20>
  {
    return false;
 8002098:	2300      	movs	r3, #0
 800209a:	e00e      	b.n	80020ba <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 800209c:	f107 0308 	add.w	r3, r7, #8
 80020a0:	f107 010c 	add.w	r1, r7, #12
 80020a4:	222c      	movs	r2, #44	; 0x2c
 80020a6:	4807      	ldr	r0, [pc, #28]	; (80020c4 <wavPlayer_fileSelect+0x48>)
 80020a8:	f00c f8f2 	bl	800e290 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <wavPlayer_fileSelect+0x4c>)
 80020b0:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <wavPlayer_fileSelect+0x50>)
 80020b6:	6013      	str	r3, [r2, #0]
  return true;
 80020b8:	2301      	movs	r3, #1
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3738      	adds	r7, #56	; 0x38
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000140 	.word	0x20000140
 80020c8:	20000370 	.word	0x20000370
 80020cc:	20001378 	.word	0x20001378

080020d0 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  isFinished = false;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <wavPlayer_play+0x48>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <wavPlayer_play+0x4c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fd4c 	bl	8000b7c <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 80020e4:	2100      	movs	r1, #0
 80020e6:	480e      	ldr	r0, [pc, #56]	; (8002120 <wavPlayer_play+0x50>)
 80020e8:	f00c fab9 	bl	800e65e <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <wavPlayer_play+0x54>)
 80020ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f2:	490d      	ldr	r1, [pc, #52]	; (8002128 <wavPlayer_play+0x58>)
 80020f4:	480a      	ldr	r0, [pc, #40]	; (8002120 <wavPlayer_play+0x50>)
 80020f6:	f00c f8cb 	bl	800e290 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <wavPlayer_play+0x5c>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <wavPlayer_play+0x54>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <wavPlayer_play+0x60>)
 8002106:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8002108:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800210c:	4806      	ldr	r0, [pc, #24]	; (8002128 <wavPlayer_play+0x58>)
 800210e:	f7fe fd45 	bl	8000b9c <audioI2S_play>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20001380 	.word	0x20001380
 800211c:	20001378 	.word	0x20001378
 8002120:	20000140 	.word	0x20000140
 8002124:	2000137c 	.word	0x2000137c
 8002128:	20000374 	.word	0x20000374
 800212c:	20000370 	.word	0x20000370
 8002130:	20001374 	.word	0x20001374

08002134 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <wavPlayer_process+0xc8>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b03      	cmp	r3, #3
 8002140:	d859      	bhi.n	80021f6 <wavPlayer_process+0xc2>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <wavPlayer_process+0x14>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	080021f5 	.word	0x080021f5
 800214c:	08002159 	.word	0x08002159
 8002150:	0800219b 	.word	0x0800219b
 8002154:	080021dd 	.word	0x080021dd
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8002158:	4b29      	ldr	r3, [pc, #164]	; (8002200 <wavPlayer_process+0xcc>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 800215e:	4b27      	ldr	r3, [pc, #156]	; (80021fc <wavPlayer_process+0xc8>)
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8002164:	4b26      	ldr	r3, [pc, #152]	; (8002200 <wavPlayer_process+0xcc>)
 8002166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800216a:	4926      	ldr	r1, [pc, #152]	; (8002204 <wavPlayer_process+0xd0>)
 800216c:	4826      	ldr	r0, [pc, #152]	; (8002208 <wavPlayer_process+0xd4>)
 800216e:	f00c f88f 	bl	800e290 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <wavPlayer_process+0xd8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800217a:	d907      	bls.n	800218c <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <wavPlayer_process+0xd8>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b1f      	ldr	r3, [pc, #124]	; (8002200 <wavPlayer_process+0xcc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <wavPlayer_process+0xd8>)
 8002188:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 800218a:	e034      	b.n	80021f6 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 800218c:	4b1f      	ldr	r3, [pc, #124]	; (800220c <wavPlayer_process+0xd8>)
 800218e:	2200      	movs	r2, #0
 8002190:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8002192:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <wavPlayer_process+0xc8>)
 8002194:	2203      	movs	r2, #3
 8002196:	701a      	strb	r2, [r3, #0]
    break;
 8002198:	e02d      	b.n	80021f6 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <wavPlayer_process+0xcc>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <wavPlayer_process+0xc8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <wavPlayer_process+0xcc>)
 80021a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ac:	4918      	ldr	r1, [pc, #96]	; (8002210 <wavPlayer_process+0xdc>)
 80021ae:	4816      	ldr	r0, [pc, #88]	; (8002208 <wavPlayer_process+0xd4>)
 80021b0:	f00c f86e 	bl	800e290 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80021b4:	4b15      	ldr	r3, [pc, #84]	; (800220c <wavPlayer_process+0xd8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021bc:	d907      	bls.n	80021ce <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <wavPlayer_process+0xd8>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <wavPlayer_process+0xcc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a10      	ldr	r2, [pc, #64]	; (800220c <wavPlayer_process+0xd8>)
 80021ca:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80021cc:	e013      	b.n	80021f6 <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80021ce:	4b0f      	ldr	r3, [pc, #60]	; (800220c <wavPlayer_process+0xd8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <wavPlayer_process+0xc8>)
 80021d6:	2203      	movs	r2, #3
 80021d8:	701a      	strb	r2, [r3, #0]
    break;
 80021da:	e00c      	b.n	80021f6 <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 80021dc:	480a      	ldr	r0, [pc, #40]	; (8002208 <wavPlayer_process+0xd4>)
 80021de:	f00c fa14 	bl	800e60a <f_close>
    wavPlayer_reset();
 80021e2:	f7ff ff39 	bl	8002058 <wavPlayer_reset>
    isFinished = true;
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <wavPlayer_process+0xe0>)
 80021e8:	2201      	movs	r2, #1
 80021ea:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <wavPlayer_process+0xc8>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]
    break;
 80021f2:	e000      	b.n	80021f6 <wavPlayer_process+0xc2>
    break;
 80021f4:	bf00      	nop
  }
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20001381 	.word	0x20001381
 8002200:	2000137c 	.word	0x2000137c
 8002204:	20000374 	.word	0x20000374
 8002208:	20000140 	.word	0x20000140
 800220c:	20001374 	.word	0x20001374
 8002210:	20000b74 	.word	0x20000b74
 8002214:	20001380 	.word	0x20001380

08002218 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  audioI2S_stop();
 800221c:	f7fe fcdc 	bl	8000bd8 <audioI2S_stop>
  isFinished = true;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <wavPlayer_stop+0x14>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20001380 	.word	0x20001380

08002230 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return isFinished;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <wavPlayer_isFinished+0x14>)
 8002236:	781b      	ldrb	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20001380 	.word	0x20001380

08002248 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <audioI2S_halfTransfer_Callback+0x14>)
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
}
 8002252:	bf00      	nop
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	20001381 	.word	0x20001381

08002260 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <audioI2S_fullTransfer_Callback+0x14>)
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	20001381 	.word	0x20001381

08002278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002278:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800227c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800227e:	e003      	b.n	8002288 <LoopCopyDataInit>

08002280 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002280:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002282:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002284:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002286:	3104      	adds	r1, #4

08002288 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800228c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800228e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002290:	d3f6      	bcc.n	8002280 <CopyDataInit>
  ldr  r2, =_sbss
 8002292:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002294:	e002      	b.n	800229c <LoopFillZerobss>

08002296 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002296:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002298:	f842 3b04 	str.w	r3, [r2], #4

0800229c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800229c:	4b09      	ldr	r3, [pc, #36]	; (80022c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800229e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022a0:	d3f9      	bcc.n	8002296 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022a2:	f7ff fec3 	bl	800202c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022a6:	f00c ff81 	bl	800f1ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022aa:	f7fe ff37 	bl	800111c <main>
  bx  lr    
 80022ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022b4:	0800fc94 	.word	0x0800fc94
  ldr  r0, =_sdata
 80022b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022bc:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 80022c0:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 80022c4:	200020ec 	.word	0x200020ec

080022c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022d0:	4b0e      	ldr	r3, [pc, #56]	; (800230c <HAL_Init+0x40>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0d      	ldr	r2, [pc, #52]	; (800230c <HAL_Init+0x40>)
 80022d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <HAL_Init+0x40>)
 80022e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022e8:	4b08      	ldr	r3, [pc, #32]	; (800230c <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a07      	ldr	r2, [pc, #28]	; (800230c <HAL_Init+0x40>)
 80022ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f4:	2003      	movs	r0, #3
 80022f6:	f000 f94d 	bl	8002594 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f000 f808 	bl	8002310 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002300:	f7ff fbf6 	bl	8001af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00

08002310 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_InitTick+0x54>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	4b12      	ldr	r3, [pc, #72]	; (8002368 <HAL_InitTick+0x58>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4619      	mov	r1, r3
 8002322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002326:	fbb3 f3f1 	udiv	r3, r3, r1
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f000 f965 	bl	80025fe <HAL_SYSTICK_Config>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e00e      	b.n	800235c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b0f      	cmp	r3, #15
 8002342:	d80a      	bhi.n	800235a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002344:	2200      	movs	r2, #0
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f000 f92d 	bl	80025aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002350:	4a06      	ldr	r2, [pc, #24]	; (800236c <HAL_InitTick+0x5c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e000      	b.n	800235c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000014 	.word	0x20000014
 8002368:	2000001c 	.word	0x2000001c
 800236c:	20000018 	.word	0x20000018

08002370 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_IncTick+0x20>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b06      	ldr	r3, [pc, #24]	; (8002394 <HAL_IncTick+0x24>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4413      	add	r3, r2
 8002380:	4a04      	ldr	r2, [pc, #16]	; (8002394 <HAL_IncTick+0x24>)
 8002382:	6013      	str	r3, [r2, #0]
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	2000001c 	.word	0x2000001c
 8002394:	200015e0 	.word	0x200015e0

08002398 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return uwTick;
 800239c:	4b03      	ldr	r3, [pc, #12]	; (80023ac <HAL_GetTick+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	200015e0 	.word	0x200015e0

080023b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023b8:	f7ff ffee 	bl	8002398 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d005      	beq.n	80023d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_Delay+0x40>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023d6:	bf00      	nop
 80023d8:	f7ff ffde 	bl	8002398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d8f7      	bhi.n	80023d8 <HAL_Delay+0x28>
  {
  }
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000001c 	.word	0x2000001c

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002560:	d301      	bcc.n	8002566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002562:	2301      	movs	r3, #1
 8002564:	e00f      	b.n	8002586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <SysTick_Config+0x40>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256e:	210f      	movs	r1, #15
 8002570:	f04f 30ff 	mov.w	r0, #4294967295
 8002574:	f7ff ff8e 	bl	8002494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <SysTick_Config+0x40>)
 800257a:	2200      	movs	r2, #0
 800257c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <SysTick_Config+0x40>)
 8002580:	2207      	movs	r2, #7
 8002582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	e000e010 	.word	0xe000e010

08002594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ff29 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b086      	sub	sp, #24
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	4603      	mov	r3, r0
 80025b2:	60b9      	str	r1, [r7, #8]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025bc:	f7ff ff3e 	bl	800243c <__NVIC_GetPriorityGrouping>
 80025c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	6978      	ldr	r0, [r7, #20]
 80025c8:	f7ff ff8e 	bl	80024e8 <NVIC_EncodePriority>
 80025cc:	4602      	mov	r2, r0
 80025ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025d2:	4611      	mov	r1, r2
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff ff5d 	bl	8002494 <__NVIC_SetPriority>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ff31 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025f6:	bf00      	nop
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b082      	sub	sp, #8
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ffa2 	bl	8002550 <SysTick_Config>
 800260c:	4603      	mov	r3, r0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002624:	f7ff feb8 	bl	8002398 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d101      	bne.n	8002634 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e099      	b.n	8002768 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0201 	bic.w	r2, r2, #1
 8002652:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002654:	e00f      	b.n	8002676 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002656:	f7ff fe9f 	bl	8002398 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b05      	cmp	r3, #5
 8002662:	d908      	bls.n	8002676 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2220      	movs	r2, #32
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2203      	movs	r2, #3
 800266e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e078      	b.n	8002768 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d1e8      	bne.n	8002656 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	4b38      	ldr	r3, [pc, #224]	; (8002770 <HAL_DMA_Init+0x158>)
 8002690:	4013      	ands	r3, r2
 8002692:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	4313      	orrs	r3, r2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0307 	bic.w	r3, r3, #7
 80026f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	2b04      	cmp	r3, #4
 8002708:	d117      	bne.n	800273a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00e      	beq.n	800273a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fadf 	bl	8002ce0 <DMA_CheckFifoParam>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2240      	movs	r2, #64	; 0x40
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002736:	2301      	movs	r3, #1
 8002738:	e016      	b.n	8002768 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	697a      	ldr	r2, [r7, #20]
 8002740:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 fa96 	bl	8002c74 <DMA_CalcBaseAndBitshift>
 8002748:	4603      	mov	r3, r0
 800274a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	223f      	movs	r2, #63	; 0x3f
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	f010803f 	.word	0xf010803f

08002774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
 8002780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_DMA_Start_IT+0x26>
 8002796:	2302      	movs	r3, #2
 8002798:	e040      	b.n	800281c <HAL_DMA_Start_IT+0xa8>
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d12f      	bne.n	800280e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2202      	movs	r2, #2
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	68b9      	ldr	r1, [r7, #8]
 80027c2:	68f8      	ldr	r0, [r7, #12]
 80027c4:	f000 fa28 	bl	8002c18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027cc:	223f      	movs	r2, #63	; 0x3f
 80027ce:	409a      	lsls	r2, r3
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0216 	orr.w	r2, r2, #22
 80027e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0208 	orr.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e005      	b.n	800281a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002832:	f7ff fdb1 	bl	8002398 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e052      	b.n	80028fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_Abort+0x62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a6:	e013      	b.n	80028d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a8:	f7ff fd76 	bl	8002398 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d90c      	bls.n	80028d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2203      	movs	r2, #3
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e015      	b.n	80028fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e4      	bne.n	80028a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	223f      	movs	r2, #63	; 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2201      	movs	r2, #1
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002910:	4b92      	ldr	r3, [pc, #584]	; (8002b5c <HAL_DMA_IRQHandler+0x258>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a92      	ldr	r2, [pc, #584]	; (8002b60 <HAL_DMA_IRQHandler+0x25c>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	0a9b      	lsrs	r3, r3, #10
 800291c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002922:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292e:	2208      	movs	r2, #8
 8002930:	409a      	lsls	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4013      	ands	r3, r2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01a      	beq.n	8002970 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d013      	beq.n	8002970 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0204 	bic.w	r2, r2, #4
 8002956:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2208      	movs	r2, #8
 800295e:	409a      	lsls	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	f043 0201 	orr.w	r2, r3, #1
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	2201      	movs	r2, #1
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d012      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00b      	beq.n	80029a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2201      	movs	r2, #1
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	f043 0202 	orr.w	r2, r3, #2
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029aa:	2204      	movs	r2, #4
 80029ac:	409a      	lsls	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00b      	beq.n	80029dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2204      	movs	r2, #4
 80029ca:	409a      	lsls	r2, r3
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d4:	f043 0204 	orr.w	r2, r3, #4
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e0:	2210      	movs	r2, #16
 80029e2:	409a      	lsls	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d043      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d03c      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2210      	movs	r2, #16
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d018      	beq.n	8002a46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d024      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
 8002a32:	e01f      	b.n	8002a74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d01b      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	4798      	blx	r3
 8002a44:	e016      	b.n	8002a74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d107      	bne.n	8002a64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0208 	bic.w	r2, r2, #8
 8002a62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a78:	2220      	movs	r2, #32
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 808e 	beq.w	8002ba2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8086 	beq.w	8002ba2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b05      	cmp	r3, #5
 8002aac:	d136      	bne.n	8002b1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f022 0216 	bic.w	r2, r2, #22
 8002abc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002acc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d103      	bne.n	8002ade <HAL_DMA_IRQHandler+0x1da>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d007      	beq.n	8002aee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0208 	bic.w	r2, r2, #8
 8002aec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	223f      	movs	r2, #63	; 0x3f
 8002af4:	409a      	lsls	r2, r3
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d07d      	beq.n	8002c0e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	4798      	blx	r3
        }
        return;
 8002b1a:	e078      	b.n	8002c0e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d01c      	beq.n	8002b64 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d030      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4798      	blx	r3
 8002b48:	e02b      	b.n	8002ba2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d027      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
 8002b5a:	e022      	b.n	8002ba2 <HAL_DMA_IRQHandler+0x29e>
 8002b5c:	20000014 	.word	0x20000014
 8002b60:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10f      	bne.n	8002b92 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d032      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2205      	movs	r2, #5
 8002bba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d307      	bcc.n	8002bea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f2      	bne.n	8002bce <HAL_DMA_IRQHandler+0x2ca>
 8002be8:	e000      	b.n	8002bec <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bea:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
 8002c0c:	e000      	b.n	8002c10 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c0e:	bf00      	nop
    }
  }
}
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop

08002c18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d108      	bne.n	8002c58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c56:	e007      	b.n	8002c68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	3b10      	subs	r3, #16
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	091b      	lsrs	r3, r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <DMA_CalcBaseAndBitshift+0x68>)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b03      	cmp	r3, #3
 8002ca0:	d909      	bls.n	8002cb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002caa:	f023 0303 	bic.w	r3, r3, #3
 8002cae:	1d1a      	adds	r2, r3, #4
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	659a      	str	r2, [r3, #88]	; 0x58
 8002cb4:	e007      	b.n	8002cc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002cbe:	f023 0303 	bic.w	r3, r3, #3
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	aaaaaaab 	.word	0xaaaaaaab
 8002cdc:	0800fbb4 	.word	0x0800fbb4

08002ce0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d11f      	bne.n	8002d3a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d855      	bhi.n	8002dac <DMA_CheckFifoParam+0xcc>
 8002d00:	a201      	add	r2, pc, #4	; (adr r2, 8002d08 <DMA_CheckFifoParam+0x28>)
 8002d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d06:	bf00      	nop
 8002d08:	08002d19 	.word	0x08002d19
 8002d0c:	08002d2b 	.word	0x08002d2b
 8002d10:	08002d19 	.word	0x08002d19
 8002d14:	08002dad 	.word	0x08002dad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d045      	beq.n	8002db0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d28:	e042      	b.n	8002db0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d32:	d13f      	bne.n	8002db4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d38:	e03c      	b.n	8002db4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d42:	d121      	bne.n	8002d88 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d836      	bhi.n	8002db8 <DMA_CheckFifoParam+0xd8>
 8002d4a:	a201      	add	r2, pc, #4	; (adr r2, 8002d50 <DMA_CheckFifoParam+0x70>)
 8002d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d50:	08002d61 	.word	0x08002d61
 8002d54:	08002d67 	.word	0x08002d67
 8002d58:	08002d61 	.word	0x08002d61
 8002d5c:	08002d79 	.word	0x08002d79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e02f      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d024      	beq.n	8002dbc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d76:	e021      	b.n	8002dbc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d80:	d11e      	bne.n	8002dc0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d86:	e01b      	b.n	8002dc0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d902      	bls.n	8002d94 <DMA_CheckFifoParam+0xb4>
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d003      	beq.n	8002d9a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d92:	e018      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
      break;
 8002d98:	e015      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00e      	beq.n	8002dc4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
      break;
 8002daa:	e00b      	b.n	8002dc4 <DMA_CheckFifoParam+0xe4>
      break;
 8002dac:	bf00      	nop
 8002dae:	e00a      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002db0:	bf00      	nop
 8002db2:	e008      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002db4:	bf00      	nop
 8002db6:	e006      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002db8:	bf00      	nop
 8002dba:	e004      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dbc:	bf00      	nop
 8002dbe:	e002      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <DMA_CheckFifoParam+0xe6>
      break;
 8002dc4:	bf00      	nop
    }
  } 
  
  return status; 
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	e159      	b.n	80030a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	f040 8148 	bne.w	800309e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d00b      	beq.n	8002e2e <HAL_GPIO_Init+0x5a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d007      	beq.n	8002e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e22:	2b11      	cmp	r3, #17
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b12      	cmp	r3, #18
 8002e2c:	d130      	bne.n	8002e90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	2203      	movs	r2, #3
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4013      	ands	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	43db      	mvns	r3, r3
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4013      	ands	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f003 0201 	and.w	r2, r3, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0xfc>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b12      	cmp	r3, #18
 8002ece:	d123      	bne.n	8002f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	08da      	lsrs	r2, r3, #3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3208      	adds	r2, #8
 8002ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	220f      	movs	r2, #15
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	08da      	lsrs	r2, r3, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3208      	adds	r2, #8
 8002f12:	69b9      	ldr	r1, [r7, #24]
 8002f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	2203      	movs	r2, #3
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0203 	and.w	r2, r3, #3
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 80a2 	beq.w	800309e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_GPIO_Init+0x2e4>)
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	4a55      	ldr	r2, [pc, #340]	; (80030b8 <HAL_GPIO_Init+0x2e4>)
 8002f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f68:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6a:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <HAL_GPIO_Init+0x2e4>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f76:	4a51      	ldr	r2, [pc, #324]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002f78:	69fb      	ldr	r3, [r7, #28]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3302      	adds	r3, #2
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a48      	ldr	r2, [pc, #288]	; (80030c0 <HAL_GPIO_Init+0x2ec>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d019      	beq.n	8002fd6 <HAL_GPIO_Init+0x202>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a47      	ldr	r2, [pc, #284]	; (80030c4 <HAL_GPIO_Init+0x2f0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d013      	beq.n	8002fd2 <HAL_GPIO_Init+0x1fe>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a46      	ldr	r2, [pc, #280]	; (80030c8 <HAL_GPIO_Init+0x2f4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00d      	beq.n	8002fce <HAL_GPIO_Init+0x1fa>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a45      	ldr	r2, [pc, #276]	; (80030cc <HAL_GPIO_Init+0x2f8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d007      	beq.n	8002fca <HAL_GPIO_Init+0x1f6>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a44      	ldr	r2, [pc, #272]	; (80030d0 <HAL_GPIO_Init+0x2fc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_GPIO_Init+0x1f2>
 8002fc2:	2304      	movs	r3, #4
 8002fc4:	e008      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fc6:	2307      	movs	r3, #7
 8002fc8:	e006      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e004      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e002      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e000      	b.n	8002fd8 <HAL_GPIO_Init+0x204>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	f002 0203 	and.w	r2, r2, #3
 8002fde:	0092      	lsls	r2, r2, #2
 8002fe0:	4093      	lsls	r3, r2
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fe8:	4934      	ldr	r1, [pc, #208]	; (80030bc <HAL_GPIO_Init+0x2e8>)
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ff6:	4b37      	ldr	r3, [pc, #220]	; (80030d4 <HAL_GPIO_Init+0x300>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	43db      	mvns	r3, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4013      	ands	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800301a:	4a2e      	ldr	r2, [pc, #184]	; (80030d4 <HAL_GPIO_Init+0x300>)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_GPIO_Init+0x300>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003044:	4a23      	ldr	r2, [pc, #140]	; (80030d4 <HAL_GPIO_Init+0x300>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <HAL_GPIO_Init+0x300>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	43db      	mvns	r3, r3
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	4013      	ands	r3, r2
 8003058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800306e:	4a19      	ldr	r2, [pc, #100]	; (80030d4 <HAL_GPIO_Init+0x300>)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_GPIO_Init+0x300>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	43db      	mvns	r3, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4013      	ands	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <HAL_GPIO_Init+0x300>)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	f67f aea2 	bls.w	8002df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030ac:	bf00      	nop
 80030ae:	3724      	adds	r7, #36	; 0x24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40013800 	.word	0x40013800
 80030c0:	40020000 	.word	0x40020000
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40020800 	.word	0x40020800
 80030cc:	40020c00 	.word	0x40020c00
 80030d0:	40021000 	.word	0x40021000
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
 8003112:	460b      	mov	r3, r1
 8003114:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695a      	ldr	r2, [r3, #20]
 800311a:	887b      	ldrh	r3, [r7, #2]
 800311c:	401a      	ands	r2, r3
 800311e:	887b      	ldrh	r3, [r7, #2]
 8003120:	429a      	cmp	r2, r3
 8003122:	d104      	bne.n	800312e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	041a      	lsls	r2, r3, #16
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800312c:	e002      	b.n	8003134 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	619a      	str	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	4618      	mov	r0, r3
 8003160:	f7fd ff02 	bl	8000f68 <HAL_GPIO_EXTI_Callback>
  }
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40013c00 	.word	0x40013c00

08003170 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003172:	b08f      	sub	sp, #60	; 0x3c
 8003174:	af0a      	add	r7, sp, #40	; 0x28
 8003176:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e054      	b.n	800322c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d106      	bne.n	80031a2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f00b fd21 	bl	800ebe4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2203      	movs	r2, #3
 80031a6:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f005 fa47 	bl	8008654 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	687e      	ldr	r6, [r7, #4]
 80031ce:	466d      	mov	r5, sp
 80031d0:	f106 0410 	add.w	r4, r6, #16
 80031d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80031e4:	1d33      	adds	r3, r6, #4
 80031e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e8:	6838      	ldr	r0, [r7, #0]
 80031ea:	f005 f9c1 	bl	8008570 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2101      	movs	r1, #1
 80031f4:	4618      	mov	r0, r3
 80031f6:	f005 fa3e 	bl	8008676 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	687e      	ldr	r6, [r7, #4]
 8003202:	466d      	mov	r5, sp
 8003204:	f106 0410 	add.w	r4, r6, #16
 8003208:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800320c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800320e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003210:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003214:	e885 0003 	stmia.w	r5, {r0, r1}
 8003218:	1d33      	adds	r3, r6, #4
 800321a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321c:	6838      	ldr	r0, [r7, #0]
 800321e:	f005 fb51 	bl	80088c4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003234 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b089      	sub	sp, #36	; 0x24
 8003238:	af04      	add	r7, sp, #16
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	4608      	mov	r0, r1
 800323e:	4611      	mov	r1, r2
 8003240:	461a      	mov	r2, r3
 8003242:	4603      	mov	r3, r0
 8003244:	70fb      	strb	r3, [r7, #3]
 8003246:	460b      	mov	r3, r1
 8003248:	70bb      	strb	r3, [r7, #2]
 800324a:	4613      	mov	r3, r2
 800324c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_HCD_HC_Init+0x28>
 8003258:	2302      	movs	r3, #2
 800325a:	e07f      	b.n	800335c <HAL_HCD_HC_Init+0x128>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	333d      	adds	r3, #61	; 0x3d
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4413      	add	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	440b      	add	r3, r1
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	787a      	ldrb	r2, [r7, #1]
 800328a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	3340      	adds	r3, #64	; 0x40
 800329c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800329e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	440b      	add	r3, r1
 80032ae:	3339      	adds	r3, #57	; 0x39
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80032b4:	78fa      	ldrb	r2, [r7, #3]
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	333f      	adds	r3, #63	; 0x3f
 80032c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80032c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	78bb      	ldrb	r3, [r7, #2]
 80032ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032d2:	b2d8      	uxtb	r0, r3
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	333a      	adds	r3, #58	; 0x3a
 80032e2:	4602      	mov	r2, r0
 80032e4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80032e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	da0a      	bge.n	8003304 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	00db      	lsls	r3, r3, #3
 80032fa:	440b      	add	r3, r1
 80032fc:	333b      	adds	r3, #59	; 0x3b
 80032fe:	2201      	movs	r2, #1
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e009      	b.n	8003318 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	440b      	add	r3, r1
 8003312:	333b      	adds	r3, #59	; 0x3b
 8003314:	2200      	movs	r2, #0
 8003316:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	440b      	add	r3, r1
 8003326:	333c      	adds	r3, #60	; 0x3c
 8003328:	f897 2020 	ldrb.w	r2, [r7, #32]
 800332c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	787c      	ldrb	r4, [r7, #1]
 8003334:	78ba      	ldrb	r2, [r7, #2]
 8003336:	78f9      	ldrb	r1, [r7, #3]
 8003338:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800333a:	9302      	str	r3, [sp, #8]
 800333c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	4623      	mov	r3, r4
 800334a:	f005 fc3d 	bl	8008bc8 <USB_HC_Init>
 800334e:	4603      	mov	r3, r0
 8003350:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	bd90      	pop	{r4, r7, pc}

08003364 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b084      	sub	sp, #16
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	460b      	mov	r3, r1
 800336e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_HCD_HC_Halt+0x1e>
 800337e:	2302      	movs	r3, #2
 8003380:	e00f      	b.n	80033a2 <HAL_HCD_HC_Halt+0x3e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	78fa      	ldrb	r2, [r7, #3]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f005 fe77 	bl	8009086 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80033a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3710      	adds	r7, #16
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	70fb      	strb	r3, [r7, #3]
 80033be:	460b      	mov	r3, r1
 80033c0:	70bb      	strb	r3, [r7, #2]
 80033c2:	4613      	mov	r3, r2
 80033c4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	333b      	adds	r3, #59	; 0x3b
 80033d6:	78ba      	ldrb	r2, [r7, #2]
 80033d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	440b      	add	r3, r1
 80033e8:	333f      	adds	r3, #63	; 0x3f
 80033ea:	787a      	ldrb	r2, [r7, #1]
 80033ec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80033ee:	7c3b      	ldrb	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d114      	bne.n	800341e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	440b      	add	r3, r1
 8003402:	3342      	adds	r3, #66	; 0x42
 8003404:	2203      	movs	r2, #3
 8003406:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003408:	78fa      	ldrb	r2, [r7, #3]
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	440b      	add	r3, r1
 8003416:	333d      	adds	r3, #61	; 0x3d
 8003418:	7f3a      	ldrb	r2, [r7, #28]
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e009      	b.n	8003432 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	4613      	mov	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	440b      	add	r3, r1
 800342c:	3342      	adds	r3, #66	; 0x42
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003432:	787b      	ldrb	r3, [r7, #1]
 8003434:	2b03      	cmp	r3, #3
 8003436:	f200 80d6 	bhi.w	80035e6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800343a:	a201      	add	r2, pc, #4	; (adr r2, 8003440 <HAL_HCD_HC_SubmitRequest+0x94>)
 800343c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003440:	08003451 	.word	0x08003451
 8003444:	080035d1 	.word	0x080035d1
 8003448:	080034bd 	.word	0x080034bd
 800344c:	08003547 	.word	0x08003547
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003450:	7c3b      	ldrb	r3, [r7, #16]
 8003452:	2b01      	cmp	r3, #1
 8003454:	f040 80c9 	bne.w	80035ea <HAL_HCD_HC_SubmitRequest+0x23e>
 8003458:	78bb      	ldrb	r3, [r7, #2]
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 80c5 	bne.w	80035ea <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8003460:	8b3b      	ldrh	r3, [r7, #24]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d109      	bne.n	800347a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	440b      	add	r3, r1
 8003474:	3351      	adds	r3, #81	; 0x51
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	440b      	add	r3, r1
 8003488:	3351      	adds	r3, #81	; 0x51
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	3342      	adds	r3, #66	; 0x42
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034a4:	e0a1      	b.n	80035ea <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	6879      	ldr	r1, [r7, #4]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	440b      	add	r3, r1
 80034b4:	3342      	adds	r3, #66	; 0x42
 80034b6:	2202      	movs	r2, #2
 80034b8:	701a      	strb	r2, [r3, #0]
      break;
 80034ba:	e096      	b.n	80035ea <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80034bc:	78bb      	ldrb	r3, [r7, #2]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d120      	bne.n	8003504 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3351      	adds	r3, #81	; 0x51
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d10a      	bne.n	80034ee <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	3342      	adds	r3, #66	; 0x42
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80034ec:	e07e      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	3342      	adds	r3, #66	; 0x42
 80034fe:	2202      	movs	r2, #2
 8003500:	701a      	strb	r2, [r3, #0]
      break;
 8003502:	e073      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	440b      	add	r3, r1
 8003512:	3350      	adds	r3, #80	; 0x50
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800351a:	78fa      	ldrb	r2, [r7, #3]
 800351c:	6879      	ldr	r1, [r7, #4]
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	440b      	add	r3, r1
 8003528:	3342      	adds	r3, #66	; 0x42
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e05d      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	440b      	add	r3, r1
 800353e:	3342      	adds	r3, #66	; 0x42
 8003540:	2202      	movs	r2, #2
 8003542:	701a      	strb	r2, [r3, #0]
      break;
 8003544:	e052      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d120      	bne.n	800358e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	440b      	add	r3, r1
 800355a:	3351      	adds	r3, #81	; 0x51
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10a      	bne.n	8003578 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	440b      	add	r3, r1
 8003570:	3342      	adds	r3, #66	; 0x42
 8003572:	2200      	movs	r2, #0
 8003574:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003576:	e039      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	3342      	adds	r3, #66	; 0x42
 8003588:	2202      	movs	r2, #2
 800358a:	701a      	strb	r2, [r3, #0]
      break;
 800358c:	e02e      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	440b      	add	r3, r1
 800359c:	3350      	adds	r3, #80	; 0x50
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	440b      	add	r3, r1
 80035b2:	3342      	adds	r3, #66	; 0x42
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
      break;
 80035b8:	e018      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	440b      	add	r3, r1
 80035c8:	3342      	adds	r3, #66	; 0x42
 80035ca:	2202      	movs	r2, #2
 80035cc:	701a      	strb	r2, [r3, #0]
      break;
 80035ce:	e00d      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	440b      	add	r3, r1
 80035de:	3342      	adds	r3, #66	; 0x42
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
      break;
 80035e4:	e002      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80035ea:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	440b      	add	r3, r1
 80035fa:	3344      	adds	r3, #68	; 0x44
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	8b39      	ldrh	r1, [r7, #24]
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	4403      	add	r3, r0
 8003610:	3348      	adds	r3, #72	; 0x48
 8003612:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003614:	78fa      	ldrb	r2, [r7, #3]
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	440b      	add	r3, r1
 8003622:	335c      	adds	r3, #92	; 0x5c
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003628:	78fa      	ldrb	r2, [r7, #3]
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	440b      	add	r3, r1
 8003636:	334c      	adds	r3, #76	; 0x4c
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	6879      	ldr	r1, [r7, #4]
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	440b      	add	r3, r1
 800364a:	3339      	adds	r3, #57	; 0x39
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	6879      	ldr	r1, [r7, #4]
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	440b      	add	r3, r1
 800365e:	335d      	adds	r3, #93	; 0x5d
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6818      	ldr	r0, [r3, #0]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	3338      	adds	r3, #56	; 0x38
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	18d1      	adds	r1, r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	b2db      	uxtb	r3, r3
 800367e:	461a      	mov	r2, r3
 8003680:	f005 fbac 	bl	8008ddc <USB_HC_StartXfer>
 8003684:	4603      	mov	r3, r0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop

08003690 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f005 f8c9 	bl	800883e <USB_GetMode>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	f040 80ef 	bne.w	8003892 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f005 f8ad 	bl	8008818 <USB_ReadInterrupts>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	f000 80e5 	beq.w	8003890 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 f8a4 	bl	8008818 <USB_ReadInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036da:	d104      	bne.n	80036e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80036e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f005 f894 	bl	8008818 <USB_ReadInterrupts>
 80036f0:	4603      	mov	r3, r0
 80036f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036fa:	d104      	bne.n	8003706 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003704:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f005 f884 	bl	8008818 <USB_ReadInterrupts>
 8003710:	4603      	mov	r3, r0
 8003712:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800371a:	d104      	bne.n	8003726 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003724:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f005 f874 	bl	8008818 <USB_ReadInterrupts>
 8003730:	4603      	mov	r3, r0
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b02      	cmp	r3, #2
 8003738:	d103      	bne.n	8003742 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2202      	movs	r2, #2
 8003740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f005 f866 	bl	8008818 <USB_ReadInterrupts>
 800374c:	4603      	mov	r3, r0
 800374e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003756:	d115      	bne.n	8003784 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003760:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	d108      	bne.n	8003784 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f00b fab4 	bl	800ece0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2101      	movs	r1, #1
 800377e:	4618      	mov	r0, r3
 8003780:	f005 f95c 	bl	8008a3c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f005 f845 	bl	8008818 <USB_ReadInterrupts>
 800378e:	4603      	mov	r3, r0
 8003790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003798:	d102      	bne.n	80037a0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f001 f966 	bl	8004a6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f005 f837 	bl	8008818 <USB_ReadInterrupts>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d106      	bne.n	80037c2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f00b fa77 	bl	800eca8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2208      	movs	r2, #8
 80037c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f005 f826 	bl	8008818 <USB_ReadInterrupts>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037d6:	d138      	bne.n	800384a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f005 fc41 	bl	8009064 <USB_HC_ReadInterrupt>
 80037e2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e025      	b.n	8003836 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f003 030f 	and.w	r3, r3, #15
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003814:	d106      	bne.n	8003824 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f8cf 	bl	80039c0 <HCD_HC_IN_IRQHandler>
 8003822:	e005      	b.n	8003830 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	4619      	mov	r1, r3
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fcfd 	bl	800422a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	3301      	adds	r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	429a      	cmp	r2, r3
 800383e:	d3d4      	bcc.n	80037ea <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f004 ffe2 	bl	8008818 <USB_ReadInterrupts>
 8003854:	4603      	mov	r3, r0
 8003856:	f003 0310 	and.w	r3, r3, #16
 800385a:	2b10      	cmp	r3, #16
 800385c:	d101      	bne.n	8003862 <HAL_HCD_IRQHandler+0x1d2>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_HCD_IRQHandler+0x1d4>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d014      	beq.n	8003892 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0210 	bic.w	r2, r2, #16
 8003876:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f001 f84b 	bl	8004914 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0210 	orr.w	r2, r2, #16
 800388c:	619a      	str	r2, [r3, #24]
 800388e:	e000      	b.n	8003892 <HAL_HCD_IRQHandler+0x202>
      return;
 8003890:	bf00      	nop
    }
  }
}
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_HCD_Start+0x16>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e013      	b.n	80038d6 <HAL_HCD_Start+0x3e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 feb9 	bl	8008632 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2101      	movs	r1, #1
 80038c6:	4618      	mov	r0, r3
 80038c8:	f005 f91c 	bl	8008b04 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_HCD_Stop+0x16>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e00d      	b.n	8003910 <HAL_HCD_Stop+0x32>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f005 fcfb 	bl	80092fc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	f005 f8c3 	bl	8008ab0 <USB_ResetPort>
 800392a:	4603      	mov	r3, r0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003940:	78fa      	ldrb	r2, [r7, #3]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	335c      	adds	r3, #92	; 0x5c
 8003950:	781b      	ldrb	r3, [r3, #0]
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	440b      	add	r3, r1
 8003978:	334c      	adds	r3, #76	; 0x4c
 800397a:	681b      	ldr	r3, [r3, #0]
}
 800397c:	4618      	mov	r0, r3
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4618      	mov	r0, r3
 8003996:	f005 f905 	bl	8008ba4 <USB_GetCurrentFrame>
 800399a:	4603      	mov	r3, r0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f005 f8e0 	bl	8008b76 <USB_GetHostSpeed>
 80039b6:	4603      	mov	r3, r0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	d119      	bne.n	8003a24 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	2304      	movs	r3, #4
 8003a00:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	0151      	lsls	r1, r2, #5
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	440a      	add	r2, r1
 8003a18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	60d3      	str	r3, [r2, #12]
 8003a22:	e0ce      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a3a:	d12c      	bne.n	8003a96 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003a50:	6879      	ldr	r1, [r7, #4]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	440b      	add	r3, r1
 8003a5e:	335d      	adds	r3, #93	; 0x5d
 8003a60:	2207      	movs	r2, #7
 8003a62:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	015a      	lsls	r2, r3, #5
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	0151      	lsls	r1, r2, #5
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	440a      	add	r2, r1
 8003a7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f005 faf9 	bl	8009086 <USB_HC_Halt>
 8003a94:	e095      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b20      	cmp	r3, #32
 8003aaa:	d109      	bne.n	8003ac0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab8:	461a      	mov	r2, r3
 8003aba:	2320      	movs	r3, #32
 8003abc:	6093      	str	r3, [r2, #8]
 8003abe:	e080      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d134      	bne.n	8003b40 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	015a      	lsls	r2, r3, #5
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	4413      	add	r3, r2
 8003ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	0151      	lsls	r1, r2, #5
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	440a      	add	r2, r1
 8003aec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	440b      	add	r3, r1
 8003b04:	335d      	adds	r3, #93	; 0x5d
 8003b06:	2205      	movs	r2, #5
 8003b08:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b16:	461a      	mov	r2, r3
 8003b18:	2310      	movs	r3, #16
 8003b1a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f005 faa4 	bl	8009086 <USB_HC_Halt>
 8003b3e:	e040      	b.n	8003bc2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b56:	d134      	bne.n	8003bc2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b72:	f043 0302 	orr.w	r3, r3, #2
 8003b76:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	4611      	mov	r1, r2
 8003b82:	4618      	mov	r0, r3
 8003b84:	f005 fa7f 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	015a      	lsls	r2, r3, #5
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4413      	add	r3, r2
 8003b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b94:	461a      	mov	r2, r3
 8003b96:	2310      	movs	r3, #16
 8003b98:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	440b      	add	r3, r1
 8003ba8:	335d      	adds	r3, #93	; 0x5d
 8003baa:	2208      	movs	r2, #8
 8003bac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bd8:	d122      	bne.n	8003c20 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	0151      	lsls	r1, r2, #5
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	440a      	add	r2, r1
 8003bf0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf4:	f043 0302 	orr.w	r3, r3, #2
 8003bf8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f005 fa3e 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c1c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003c1e:	e300      	b.n	8004222 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	f040 80fd 	bne.w	8003e32 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01b      	beq.n	8003c78 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	440b      	add	r3, r1
 8003c4e:	3348      	adds	r3, #72	; 0x48
 8003c50:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	0159      	lsls	r1, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	440b      	add	r3, r1
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003c64:	1ad1      	subs	r1, r2, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	00db      	lsls	r3, r3, #3
 8003c72:	4403      	add	r3, r0
 8003c74:	334c      	adds	r3, #76	; 0x4c
 8003c76:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	440b      	add	r3, r1
 8003c86:	335d      	adds	r3, #93	; 0x5d
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	440b      	add	r3, r1
 8003c9a:	3358      	adds	r3, #88	; 0x58
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	015a      	lsls	r2, r3, #5
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cac:	461a      	mov	r2, r3
 8003cae:	2301      	movs	r3, #1
 8003cb0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cb2:	6879      	ldr	r1, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	00db      	lsls	r3, r3, #3
 8003cbe:	440b      	add	r3, r1
 8003cc0:	333f      	adds	r3, #63	; 0x3f
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4413      	add	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	333f      	adds	r3, #63	; 0x3f
 8003cd8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d121      	bne.n	8003d22 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	015a      	lsls	r2, r3, #5
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	0151      	lsls	r1, r2, #5
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	440a      	add	r2, r1
 8003cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f005 f9bc 	bl	8009086 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	6093      	str	r3, [r2, #8]
 8003d20:	e070      	b.n	8003e04 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4613      	mov	r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	00db      	lsls	r3, r3, #3
 8003d2e:	440b      	add	r3, r1
 8003d30:	333f      	adds	r3, #63	; 0x3f
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d12a      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d56:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4413      	add	r3, r2
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	440b      	add	r3, r1
 8003d66:	335c      	adds	r3, #92	; 0x5c
 8003d68:	2201      	movs	r2, #1
 8003d6a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	b2d8      	uxtb	r0, r3
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	00db      	lsls	r3, r3, #3
 8003d7c:	440b      	add	r3, r1
 8003d7e:	335c      	adds	r3, #92	; 0x5c
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	4601      	mov	r1, r0
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f00a ffb8 	bl	800ecfc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d8c:	e03a      	b.n	8003e04 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4613      	mov	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4413      	add	r3, r2
 8003d98:	00db      	lsls	r3, r3, #3
 8003d9a:	440b      	add	r3, r1
 8003d9c:	333f      	adds	r3, #63	; 0x3f
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d12f      	bne.n	8003e04 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	335c      	adds	r3, #92	; 0x5c
 8003db4:	2201      	movs	r2, #1
 8003db6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4413      	add	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	440b      	add	r3, r1
 8003dc6:	3350      	adds	r3, #80	; 0x50
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f083 0301 	eor.w	r3, r3, #1
 8003dce:	b2d8      	uxtb	r0, r3
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	440b      	add	r3, r1
 8003dde:	3350      	adds	r3, #80	; 0x50
 8003de0:	4602      	mov	r2, r0
 8003de2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	b2d8      	uxtb	r0, r3
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	440b      	add	r3, r1
 8003df6:	335c      	adds	r3, #92	; 0x5c
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4601      	mov	r1, r0
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f00a ff7c 	bl	800ecfc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	440b      	add	r3, r1
 8003e12:	3350      	adds	r3, #80	; 0x50
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	f083 0301 	eor.w	r3, r3, #1
 8003e1a:	b2d8      	uxtb	r0, r3
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	4613      	mov	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	440b      	add	r3, r1
 8003e2a:	3350      	adds	r3, #80	; 0x50
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	701a      	strb	r2, [r3, #0]
}
 8003e30:	e1f7      	b.n	8004222 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	f040 811a 	bne.w	800407e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	0151      	lsls	r1, r2, #5
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	440a      	add	r2, r1
 8003e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	440b      	add	r3, r1
 8003e78:	335d      	adds	r3, #93	; 0x5d
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10a      	bne.n	8003e96 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	440b      	add	r3, r1
 8003e8e:	335c      	adds	r3, #92	; 0x5c
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e0d9      	b.n	800404a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	335d      	adds	r3, #93	; 0x5d
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d10a      	bne.n	8003ec2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	440b      	add	r3, r1
 8003eba:	335c      	adds	r3, #92	; 0x5c
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	701a      	strb	r2, [r3, #0]
 8003ec0:	e0c3      	b.n	800404a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4413      	add	r3, r2
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	440b      	add	r3, r1
 8003ed0:	335d      	adds	r3, #93	; 0x5d
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	2b06      	cmp	r3, #6
 8003ed6:	d00a      	beq.n	8003eee <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00db      	lsls	r3, r3, #3
 8003ee4:	440b      	add	r3, r1
 8003ee6:	335d      	adds	r3, #93	; 0x5d
 8003ee8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d156      	bne.n	8003f9c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	440b      	add	r3, r1
 8003efc:	3358      	adds	r3, #88	; 0x58
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	1c59      	adds	r1, r3, #1
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	00db      	lsls	r3, r3, #3
 8003f0e:	4403      	add	r3, r0
 8003f10:	3358      	adds	r3, #88	; 0x58
 8003f12:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	4413      	add	r3, r2
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	440b      	add	r3, r1
 8003f22:	3358      	adds	r3, #88	; 0x58
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d914      	bls.n	8003f54 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	00db      	lsls	r3, r3, #3
 8003f36:	440b      	add	r3, r1
 8003f38:	3358      	adds	r3, #88	; 0x58
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	335c      	adds	r3, #92	; 0x5c
 8003f4e:	2204      	movs	r2, #4
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e009      	b.n	8003f68 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f54:	6879      	ldr	r1, [r7, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	440b      	add	r3, r1
 8003f62:	335c      	adds	r3, #92	; 0x5c
 8003f64:	2202      	movs	r2, #2
 8003f66:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f7e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f86:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f94:	461a      	mov	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6013      	str	r3, [r2, #0]
 8003f9a:	e056      	b.n	800404a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	440b      	add	r3, r1
 8003faa:	335d      	adds	r3, #93	; 0x5d
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b03      	cmp	r3, #3
 8003fb0:	d123      	bne.n	8003ffa <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	335c      	adds	r3, #92	; 0x5c
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	015a      	lsls	r2, r3, #5
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4413      	add	r3, r2
 8003fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fdc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fe4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	e027      	b.n	800404a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	440b      	add	r3, r1
 8004008:	335d      	adds	r3, #93	; 0x5d
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b07      	cmp	r3, #7
 800400e:	d11c      	bne.n	800404a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	3358      	adds	r3, #88	; 0x58
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	1c59      	adds	r1, r3, #1
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4403      	add	r3, r0
 8004032:	3358      	adds	r3, #88	; 0x58
 8004034:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	440b      	add	r3, r1
 8004044:	335c      	adds	r3, #92	; 0x5c
 8004046:	2204      	movs	r2, #4
 8004048:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4413      	add	r3, r2
 8004052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004056:	461a      	mov	r2, r3
 8004058:	2302      	movs	r3, #2
 800405a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	b2d8      	uxtb	r0, r3
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	440b      	add	r3, r1
 800406e:	335c      	adds	r3, #92	; 0x5c
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4601      	mov	r1, r0
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f00a fe40 	bl	800ecfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800407c:	e0d1      	b.n	8004222 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d13e      	bne.n	8004112 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	0151      	lsls	r1, r2, #5
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	440a      	add	r2, r1
 80040aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040ae:	f043 0302 	orr.w	r3, r3, #2
 80040b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	440b      	add	r3, r1
 80040c2:	3358      	adds	r3, #88	; 0x58
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	1c59      	adds	r1, r3, #1
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4613      	mov	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	4413      	add	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4403      	add	r3, r0
 80040d6:	3358      	adds	r3, #88	; 0x58
 80040d8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4613      	mov	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	335d      	adds	r3, #93	; 0x5d
 80040ea:	2206      	movs	r2, #6
 80040ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f004 ffc4 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	461a      	mov	r2, r3
 800410c:	2380      	movs	r3, #128	; 0x80
 800410e:	6093      	str	r3, [r2, #8]
}
 8004110:	e087      	b.n	8004222 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b10      	cmp	r3, #16
 8004126:	d17c      	bne.n	8004222 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	440b      	add	r3, r1
 8004136:	333f      	adds	r3, #63	; 0x3f
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b03      	cmp	r3, #3
 800413c:	d122      	bne.n	8004184 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	440b      	add	r3, r1
 800414c:	3358      	adds	r3, #88	; 0x58
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	0151      	lsls	r1, r2, #5
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	440a      	add	r2, r1
 8004168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	4611      	mov	r1, r2
 800417c:	4618      	mov	r0, r3
 800417e:	f004 ff82 	bl	8009086 <USB_HC_Halt>
 8004182:	e045      	b.n	8004210 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	440b      	add	r3, r1
 8004192:	333f      	adds	r3, #63	; 0x3f
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	4613      	mov	r3, r2
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	440b      	add	r3, r1
 80041a8:	333f      	adds	r3, #63	; 0x3f
 80041aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d12f      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	3358      	adds	r3, #88	; 0x58
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d121      	bne.n	8004210 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	440b      	add	r3, r1
 80041da:	335d      	adds	r3, #93	; 0x5d
 80041dc:	2203      	movs	r2, #3
 80041de:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041fa:	f043 0302 	orr.w	r3, r3, #2
 80041fe:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	4611      	mov	r1, r2
 800420a:	4618      	mov	r0, r3
 800420c:	f004 ff3b 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	2310      	movs	r3, #16
 8004220:	6093      	str	r3, [r2, #8]
}
 8004222:	bf00      	nop
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 0304 	and.w	r3, r3, #4
 8004256:	2b04      	cmp	r3, #4
 8004258:	d119      	bne.n	800428e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	4413      	add	r3, r2
 8004262:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004266:	461a      	mov	r2, r3
 8004268:	2304      	movs	r3, #4
 800426a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	015a      	lsls	r2, r3, #5
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	4413      	add	r3, r2
 8004274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	0151      	lsls	r1, r2, #5
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	440a      	add	r2, r1
 8004282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004286:	f043 0302 	orr.w	r3, r3, #2
 800428a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800428c:	e33e      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4413      	add	r3, r2
 8004296:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d141      	bne.n	8004328 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	015a      	lsls	r2, r3, #5
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4413      	add	r3, r2
 80042ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b0:	461a      	mov	r2, r3
 80042b2:	2320      	movs	r3, #32
 80042b4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	333d      	adds	r3, #61	; 0x3d
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 831f 	bne.w	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80042ce:	6879      	ldr	r1, [r7, #4]
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	4613      	mov	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4413      	add	r3, r2
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	440b      	add	r3, r1
 80042dc:	333d      	adds	r3, #61	; 0x3d
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	4613      	mov	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4413      	add	r3, r2
 80042ec:	00db      	lsls	r3, r3, #3
 80042ee:	440b      	add	r3, r1
 80042f0:	335c      	adds	r3, #92	; 0x5c
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	015a      	lsls	r2, r3, #5
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	4413      	add	r3, r2
 80042fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	0151      	lsls	r1, r2, #5
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	440a      	add	r2, r1
 800430c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004310:	f043 0302 	orr.w	r3, r3, #2
 8004314:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f004 feb0 	bl	8009086 <USB_HC_Halt>
}
 8004326:	e2f1      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b40      	cmp	r3, #64	; 0x40
 800433c:	d13f      	bne.n	80043be <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4613      	mov	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	335d      	adds	r3, #93	; 0x5d
 800434e:	2204      	movs	r2, #4
 8004350:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004352:	6879      	ldr	r1, [r7, #4]
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	4613      	mov	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	333d      	adds	r3, #61	; 0x3d
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	3358      	adds	r3, #88	; 0x58
 8004376:	2200      	movs	r2, #0
 8004378:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4413      	add	r3, r2
 8004382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	440a      	add	r2, r1
 8004390:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004394:	f043 0302 	orr.w	r3, r3, #2
 8004398:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 fe6e 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	461a      	mov	r2, r3
 80043b8:	2340      	movs	r3, #64	; 0x40
 80043ba:	6093      	str	r3, [r2, #8]
}
 80043bc:	e2a6      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043d4:	d122      	bne.n	800441c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	015a      	lsls	r2, r3, #5
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	4413      	add	r3, r2
 80043de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	0151      	lsls	r1, r2, #5
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	440a      	add	r2, r1
 80043ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043f0:	f043 0302 	orr.w	r3, r3, #2
 80043f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fe40 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004418:	6093      	str	r3, [r2, #8]
}
 800441a:	e277      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	4413      	add	r3, r2
 8004424:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b01      	cmp	r3, #1
 8004430:	d135      	bne.n	800449e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4613      	mov	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4413      	add	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	440b      	add	r3, r1
 8004440:	3358      	adds	r3, #88	; 0x58
 8004442:	2200      	movs	r2, #0
 8004444:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4413      	add	r3, r2
 800444e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	0151      	lsls	r1, r2, #5
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	440a      	add	r2, r1
 800445c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f004 fe08 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004482:	461a      	mov	r2, r3
 8004484:	2301      	movs	r3, #1
 8004486:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	335d      	adds	r3, #93	; 0x5d
 8004498:	2201      	movs	r2, #1
 800449a:	701a      	strb	r2, [r3, #0]
}
 800449c:	e236      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d12b      	bne.n	800450c <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	2308      	movs	r3, #8
 80044c4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	0151      	lsls	r1, r2, #5
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	440a      	add	r2, r1
 80044dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	4611      	mov	r1, r2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 fdc8 	bl	8009086 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	440b      	add	r3, r1
 8004504:	335d      	adds	r3, #93	; 0x5d
 8004506:	2205      	movs	r2, #5
 8004508:	701a      	strb	r2, [r3, #0]
}
 800450a:	e1ff      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4413      	add	r3, r2
 8004514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b10      	cmp	r3, #16
 8004520:	d155      	bne.n	80045ce <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4613      	mov	r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	4413      	add	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	440b      	add	r3, r1
 8004530:	3358      	adds	r3, #88	; 0x58
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	4613      	mov	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	4413      	add	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	440b      	add	r3, r1
 8004544:	335d      	adds	r3, #93	; 0x5d
 8004546:	2203      	movs	r2, #3
 8004548:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	440b      	add	r3, r1
 8004558:	333d      	adds	r3, #61	; 0x3d
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d114      	bne.n	800458a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8004560:	6879      	ldr	r1, [r7, #4]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4613      	mov	r3, r2
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	4413      	add	r3, r2
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	440b      	add	r3, r1
 800456e:	333c      	adds	r3, #60	; 0x3c
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4613      	mov	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4413      	add	r3, r2
 8004580:	00db      	lsls	r3, r3, #3
 8004582:	440b      	add	r3, r1
 8004584:	333d      	adds	r3, #61	; 0x3d
 8004586:	2201      	movs	r2, #1
 8004588:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4413      	add	r3, r2
 8004592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	0151      	lsls	r1, r2, #5
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	440a      	add	r2, r1
 80045a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045a4:	f043 0302 	orr.w	r3, r3, #2
 80045a8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	4611      	mov	r1, r2
 80045b4:	4618      	mov	r0, r3
 80045b6:	f004 fd66 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c6:	461a      	mov	r2, r3
 80045c8:	2310      	movs	r3, #16
 80045ca:	6093      	str	r3, [r2, #8]
}
 80045cc:	e19e      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	015a      	lsls	r2, r3, #5
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4413      	add	r3, r2
 80045d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e0:	2b80      	cmp	r3, #128	; 0x80
 80045e2:	d12b      	bne.n	800463c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f004 fd39 	bl	8009086 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	440b      	add	r3, r1
 8004622:	335d      	adds	r3, #93	; 0x5d
 8004624:	2206      	movs	r2, #6
 8004626:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	6093      	str	r3, [r2, #8]
}
 800463a:	e167      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004652:	d135      	bne.n	80046c0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4413      	add	r3, r2
 800465c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	440a      	add	r2, r1
 800466a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	4611      	mov	r1, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f004 fd01 	bl	8009086 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	461a      	mov	r2, r3
 8004692:	2310      	movs	r3, #16
 8004694:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a2:	461a      	mov	r2, r3
 80046a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	440b      	add	r3, r1
 80046b8:	335d      	adds	r3, #93	; 0x5d
 80046ba:	2208      	movs	r2, #8
 80046bc:	701a      	strb	r2, [r3, #0]
}
 80046be:	e125      	b.n	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	f040 811a 	bne.w	800490c <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	693a      	ldr	r2, [r7, #16]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80046f2:	f023 0302 	bic.w	r3, r3, #2
 80046f6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	4613      	mov	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	4413      	add	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	440b      	add	r3, r1
 8004706:	335d      	adds	r3, #93	; 0x5d
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d137      	bne.n	800477e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	440b      	add	r3, r1
 800471c:	335c      	adds	r3, #92	; 0x5c
 800471e:	2201      	movs	r2, #1
 8004720:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	440b      	add	r3, r1
 8004730:	333f      	adds	r3, #63	; 0x3f
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d00b      	beq.n	8004750 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	440b      	add	r3, r1
 8004746:	333f      	adds	r3, #63	; 0x3f
 8004748:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800474a:	2b03      	cmp	r3, #3
 800474c:	f040 80c5 	bne.w	80048da <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	440b      	add	r3, r1
 800475e:	3351      	adds	r3, #81	; 0x51
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2d8      	uxtb	r0, r3
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4613      	mov	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	440b      	add	r3, r1
 8004776:	3351      	adds	r3, #81	; 0x51
 8004778:	4602      	mov	r2, r0
 800477a:	701a      	strb	r2, [r3, #0]
 800477c:	e0ad      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4613      	mov	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	440b      	add	r3, r1
 800478c:	335d      	adds	r3, #93	; 0x5d
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d10a      	bne.n	80047aa <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	440b      	add	r3, r1
 80047a2:	335c      	adds	r3, #92	; 0x5c
 80047a4:	2202      	movs	r2, #2
 80047a6:	701a      	strb	r2, [r3, #0]
 80047a8:	e097      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80047aa:	6879      	ldr	r1, [r7, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	440b      	add	r3, r1
 80047b8:	335d      	adds	r3, #93	; 0x5d
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d10a      	bne.n	80047d6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	440b      	add	r3, r1
 80047ce:	335c      	adds	r3, #92	; 0x5c
 80047d0:	2202      	movs	r2, #2
 80047d2:	701a      	strb	r2, [r3, #0]
 80047d4:	e081      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	440b      	add	r3, r1
 80047e4:	335d      	adds	r3, #93	; 0x5d
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d10a      	bne.n	8004802 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	4613      	mov	r3, r2
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	440b      	add	r3, r1
 80047fa:	335c      	adds	r3, #92	; 0x5c
 80047fc:	2205      	movs	r2, #5
 80047fe:	701a      	strb	r2, [r3, #0]
 8004800:	e06b      	b.n	80048da <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	440b      	add	r3, r1
 8004810:	335d      	adds	r3, #93	; 0x5d
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b06      	cmp	r3, #6
 8004816:	d00a      	beq.n	800482e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	440b      	add	r3, r1
 8004826:	335d      	adds	r3, #93	; 0x5d
 8004828:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800482a:	2b08      	cmp	r3, #8
 800482c:	d155      	bne.n	80048da <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	440b      	add	r3, r1
 800483c:	3358      	adds	r3, #88	; 0x58
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	1c59      	adds	r1, r3, #1
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	4613      	mov	r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4403      	add	r3, r0
 8004850:	3358      	adds	r3, #88	; 0x58
 8004852:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	440b      	add	r3, r1
 8004862:	3358      	adds	r3, #88	; 0x58
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b03      	cmp	r3, #3
 8004868:	d914      	bls.n	8004894 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800486a:	6879      	ldr	r1, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4613      	mov	r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	4413      	add	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	440b      	add	r3, r1
 8004878:	3358      	adds	r3, #88	; 0x58
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	440b      	add	r3, r1
 800488c:	335c      	adds	r3, #92	; 0x5c
 800488e:	2204      	movs	r2, #4
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e009      	b.n	80048a8 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004894:	6879      	ldr	r1, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	4613      	mov	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	440b      	add	r3, r1
 80048a2:	335c      	adds	r3, #92	; 0x5c
 80048a4:	2202      	movs	r2, #2
 80048a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d4:	461a      	mov	r2, r3
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	015a      	lsls	r2, r3, #5
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	4413      	add	r3, r2
 80048e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e6:	461a      	mov	r2, r3
 80048e8:	2302      	movs	r3, #2
 80048ea:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	b2d8      	uxtb	r0, r3
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	440b      	add	r3, r1
 80048fe:	335c      	adds	r3, #92	; 0x5c
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	4601      	mov	r1, r0
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f00a f9f8 	bl	800ecfc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	0c5b      	lsrs	r3, r3, #17
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004948:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d003      	beq.n	8004958 <HCD_RXQLVL_IRQHandler+0x44>
 8004950:	2b05      	cmp	r3, #5
 8004952:	f000 8082 	beq.w	8004a5a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004956:	e083      	b.n	8004a60 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d07f      	beq.n	8004a5e <HCD_RXQLVL_IRQHandler+0x14a>
 800495e:	6879      	ldr	r1, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	00db      	lsls	r3, r3, #3
 800496a:	440b      	add	r3, r1
 800496c:	3344      	adds	r3, #68	; 0x44
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d074      	beq.n	8004a5e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6818      	ldr	r0, [r3, #0]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	440b      	add	r3, r1
 8004986:	3344      	adds	r3, #68	; 0x44
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	b292      	uxth	r2, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f003 ff19 	bl	80087c6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	3344      	adds	r3, #68	; 0x44
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	18d1      	adds	r1, r2, r3
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4403      	add	r3, r0
 80049b8:	3344      	adds	r3, #68	; 0x44
 80049ba:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	440b      	add	r3, r1
 80049ca:	334c      	adds	r3, #76	; 0x4c
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	18d1      	adds	r1, r2, r3
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4403      	add	r3, r0
 80049e0:	334c      	adds	r3, #76	; 0x4c
 80049e2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f0:	691a      	ldr	r2, [r3, #16]
 80049f2:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HCD_RXQLVL_IRQHandler+0x154>)
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d031      	beq.n	8004a5e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a10:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a18:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	015a      	lsls	r2, r3, #5
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	4413      	add	r3, r2
 8004a22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a26:	461a      	mov	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	69ba      	ldr	r2, [r7, #24]
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	00db      	lsls	r3, r3, #3
 8004a38:	440b      	add	r3, r1
 8004a3a:	3350      	adds	r3, #80	; 0x50
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	f083 0301 	eor.w	r3, r3, #1
 8004a42:	b2d8      	uxtb	r0, r3
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	440b      	add	r3, r1
 8004a52:	3350      	adds	r3, #80	; 0x50
 8004a54:	4602      	mov	r2, r0
 8004a56:	701a      	strb	r2, [r3, #0]
      break;
 8004a58:	e001      	b.n	8004a5e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e000      	b.n	8004a60 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8004a5e:	bf00      	nop
  }
}
 8004a60:	bf00      	nop
 8004a62:	3728      	adds	r7, #40	; 0x28
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	1ff80000 	.word	0x1ff80000

08004a6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004a98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d10b      	bne.n	8004abc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d102      	bne.n	8004ab4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f00a f908 	bl	800ecc4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f043 0302 	orr.w	r3, r3, #2
 8004aba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0308 	and.w	r3, r3, #8
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d132      	bne.n	8004b2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f043 0308 	orr.w	r3, r3, #8
 8004acc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d126      	bne.n	8004b26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d113      	bne.n	8004b08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004aea:	d106      	bne.n	8004afa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2102      	movs	r1, #2
 8004af2:	4618      	mov	r0, r3
 8004af4:	f003 ffa2 	bl	8008a3c <USB_InitFSLSPClkSel>
 8004af8:	e011      	b.n	8004b1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2101      	movs	r1, #1
 8004b00:	4618      	mov	r0, r3
 8004b02:	f003 ff9b 	bl	8008a3c <USB_InitFSLSPClkSel>
 8004b06:	e00a      	b.n	8004b1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d106      	bne.n	8004b1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b16:	461a      	mov	r2, r3
 8004b18:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f00a f8fa 	bl	800ed18 <HAL_HCD_PortEnabled_Callback>
 8004b24:	e002      	b.n	8004b2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f00a f904 	bl	800ed34 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b20      	cmp	r3, #32
 8004b34:	d103      	bne.n	8004b3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f043 0320 	orr.w	r3, r3, #32
 8004b3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6013      	str	r3, [r2, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	3718      	adds	r7, #24
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
	...

08004b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e11f      	b.n	8004da6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc ffe0 	bl	8001b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2224      	movs	r2, #36	; 0x24
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bb8:	f002 fc62 	bl	8007480 <HAL_RCC_GetPCLK1Freq>
 8004bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	4a7b      	ldr	r2, [pc, #492]	; (8004db0 <HAL_I2C_Init+0x25c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d807      	bhi.n	8004bd8 <HAL_I2C_Init+0x84>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <HAL_I2C_Init+0x260>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	bf94      	ite	ls
 8004bd0:	2301      	movls	r3, #1
 8004bd2:	2300      	movhi	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	e006      	b.n	8004be6 <HAL_I2C_Init+0x92>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a77      	ldr	r2, [pc, #476]	; (8004db8 <HAL_I2C_Init+0x264>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	bf94      	ite	ls
 8004be0:	2301      	movls	r3, #1
 8004be2:	2300      	movhi	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e0db      	b.n	8004da6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	4a72      	ldr	r2, [pc, #456]	; (8004dbc <HAL_I2C_Init+0x268>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	0c9b      	lsrs	r3, r3, #18
 8004bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	4a64      	ldr	r2, [pc, #400]	; (8004db0 <HAL_I2C_Init+0x25c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d802      	bhi.n	8004c28 <HAL_I2C_Init+0xd4>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	3301      	adds	r3, #1
 8004c26:	e009      	b.n	8004c3c <HAL_I2C_Init+0xe8>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	4a63      	ldr	r2, [pc, #396]	; (8004dc0 <HAL_I2C_Init+0x26c>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	099b      	lsrs	r3, r3, #6
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6812      	ldr	r2, [r2, #0]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4956      	ldr	r1, [pc, #344]	; (8004db0 <HAL_I2C_Init+0x25c>)
 8004c58:	428b      	cmp	r3, r1
 8004c5a:	d80d      	bhi.n	8004c78 <HAL_I2C_Init+0x124>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e59      	subs	r1, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c70:	2b04      	cmp	r3, #4
 8004c72:	bf38      	it	cc
 8004c74:	2304      	movcc	r3, #4
 8004c76:	e04f      	b.n	8004d18 <HAL_I2C_Init+0x1c4>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d111      	bne.n	8004ca4 <HAL_I2C_Init+0x150>
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	1e58      	subs	r0, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6859      	ldr	r1, [r3, #4]
 8004c88:	460b      	mov	r3, r1
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	440b      	add	r3, r1
 8004c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c92:	3301      	adds	r3, #1
 8004c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bf0c      	ite	eq
 8004c9c:	2301      	moveq	r3, #1
 8004c9e:	2300      	movne	r3, #0
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	e012      	b.n	8004cca <HAL_I2C_Init+0x176>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1e58      	subs	r0, r3, #1
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6859      	ldr	r1, [r3, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	440b      	add	r3, r1
 8004cb2:	0099      	lsls	r1, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	bf0c      	ite	eq
 8004cc4:	2301      	moveq	r3, #1
 8004cc6:	2300      	movne	r3, #0
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d001      	beq.n	8004cd2 <HAL_I2C_Init+0x17e>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e022      	b.n	8004d18 <HAL_I2C_Init+0x1c4>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10e      	bne.n	8004cf8 <HAL_I2C_Init+0x1a4>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	1e58      	subs	r0, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6859      	ldr	r1, [r3, #4]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	440b      	add	r3, r1
 8004ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cec:	3301      	adds	r3, #1
 8004cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cf6:	e00f      	b.n	8004d18 <HAL_I2C_Init+0x1c4>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	1e58      	subs	r0, r3, #1
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6859      	ldr	r1, [r3, #4]
 8004d00:	460b      	mov	r3, r1
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	0099      	lsls	r1, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d0e:	3301      	adds	r3, #1
 8004d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d18:	6879      	ldr	r1, [r7, #4]
 8004d1a:	6809      	ldr	r1, [r1, #0]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69da      	ldr	r2, [r3, #28]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a1b      	ldr	r3, [r3, #32]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	6911      	ldr	r1, [r2, #16]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	68d2      	ldr	r2, [r2, #12]
 8004d52:	4311      	orrs	r1, r2
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695a      	ldr	r2, [r3, #20]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0201 	orr.w	r2, r2, #1
 8004d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2220      	movs	r2, #32
 8004d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	000186a0 	.word	0x000186a0
 8004db4:	001e847f 	.word	0x001e847f
 8004db8:	003d08ff 	.word	0x003d08ff
 8004dbc:	431bde83 	.word	0x431bde83
 8004dc0:	10624dd3 	.word	0x10624dd3

08004dc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af02      	add	r7, sp, #8
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	461a      	mov	r2, r3
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	817b      	strh	r3, [r7, #10]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004dd8:	f7fd fade 	bl	8002398 <HAL_GetTick>
 8004ddc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b20      	cmp	r3, #32
 8004de8:	f040 80e0 	bne.w	8004fac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2319      	movs	r3, #25
 8004df2:	2201      	movs	r2, #1
 8004df4:	4970      	ldr	r1, [pc, #448]	; (8004fb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f000 fd84 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
 8004e04:	e0d3      	b.n	8004fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2C_Master_Transmit+0x50>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0cc      	b.n	8004fae <HAL_I2C_Master_Transmit+0x1ea>
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d007      	beq.n	8004e3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f042 0201 	orr.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2221      	movs	r2, #33	; 0x21
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2210      	movs	r2, #16
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	893a      	ldrh	r2, [r7, #8]
 8004e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a50      	ldr	r2, [pc, #320]	; (8004fbc <HAL_I2C_Master_Transmit+0x1f8>)
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e7c:	8979      	ldrh	r1, [r7, #10]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f000 fbf0 	bl	8005668 <I2C_MasterRequestWrite>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e08d      	b.n	8004fae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e92:	2300      	movs	r3, #0
 8004e94:	613b      	str	r3, [r7, #16]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	613b      	str	r3, [r7, #16]
 8004ea6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ea8:	e066      	b.n	8004f78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	6a39      	ldr	r1, [r7, #32]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fdfe 	bl	8005ab0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d107      	bne.n	8004ed2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06b      	b.n	8004fae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	781a      	ldrb	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29a      	uxth	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	f003 0304 	and.w	r3, r3, #4
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d11b      	bne.n	8004f4c <HAL_I2C_Master_Transmit+0x188>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	1c5a      	adds	r2, r3, #1
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	6a39      	ldr	r1, [r7, #32]
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fdee 	bl	8005b32 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d107      	bne.n	8004f74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e01a      	b.n	8004fae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d194      	bne.n	8004eaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	00100002 	.word	0x00100002
 8004fbc:	ffff0000 	.word	0xffff0000

08004fc0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08c      	sub	sp, #48	; 0x30
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	607a      	str	r2, [r7, #4]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	460b      	mov	r3, r1
 8004fce:	817b      	strh	r3, [r7, #10]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004fd4:	f7fd f9e0 	bl	8002398 <HAL_GetTick>
 8004fd8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	f040 820b 	bne.w	80053fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fea:	9300      	str	r3, [sp, #0]
 8004fec:	2319      	movs	r3, #25
 8004fee:	2201      	movs	r2, #1
 8004ff0:	497c      	ldr	r1, [pc, #496]	; (80051e4 <HAL_I2C_Master_Receive+0x224>)
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fc86 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004ffe:	2302      	movs	r3, #2
 8005000:	e1fe      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005008:	2b01      	cmp	r3, #1
 800500a:	d101      	bne.n	8005010 <HAL_I2C_Master_Receive+0x50>
 800500c:	2302      	movs	r3, #2
 800500e:	e1f7      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0301 	and.w	r3, r3, #1
 8005022:	2b01      	cmp	r3, #1
 8005024:	d007      	beq.n	8005036 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2222      	movs	r2, #34	; 0x22
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2210      	movs	r2, #16
 8005052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	893a      	ldrh	r2, [r7, #8]
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506c:	b29a      	uxth	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	4a5c      	ldr	r2, [pc, #368]	; (80051e8 <HAL_I2C_Master_Receive+0x228>)
 8005076:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005078:	8979      	ldrh	r1, [r7, #10]
 800507a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 fb74 	bl	800576c <I2C_MasterRequestRead>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e1b8      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005092:	2b00      	cmp	r3, #0
 8005094:	d113      	bne.n	80050be <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005096:	2300      	movs	r3, #0
 8005098:	623b      	str	r3, [r7, #32]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	623b      	str	r3, [r7, #32]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	623b      	str	r3, [r7, #32]
 80050aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	e18c      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d11b      	bne.n	80050fe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	e16c      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005102:	2b02      	cmp	r3, #2
 8005104:	d11b      	bne.n	800513e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005114:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005124:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005126:	2300      	movs	r3, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695b      	ldr	r3, [r3, #20]
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	699b      	ldr	r3, [r3, #24]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	e14c      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800514c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005164:	e138      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800516a:	2b03      	cmp	r3, #3
 800516c:	f200 80f1 	bhi.w	8005352 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005174:	2b01      	cmp	r3, #1
 8005176:	d123      	bne.n	80051c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fd19 	bl	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e139      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051be:	e10b      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d14e      	bne.n	8005266 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ce:	2200      	movs	r2, #0
 80051d0:	4906      	ldr	r1, [pc, #24]	; (80051ec <HAL_I2C_Master_Receive+0x22c>)
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fb96 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e10e      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
 80051e2:	bf00      	nop
 80051e4:	00100002 	.word	0x00100002
 80051e8:	ffff0000 	.word	0xffff0000
 80051ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691a      	ldr	r2, [r3, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691a      	ldr	r2, [r3, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524e:	3b01      	subs	r3, #1
 8005250:	b29a      	uxth	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005264:	e0b8      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526c:	2200      	movs	r2, #0
 800526e:	4966      	ldr	r1, [pc, #408]	; (8005408 <HAL_I2C_Master_Receive+0x448>)
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fb47 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d001      	beq.n	8005280 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0bf      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691a      	ldr	r2, [r3, #16]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	9300      	str	r3, [sp, #0]
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	2200      	movs	r2, #0
 80052ca:	494f      	ldr	r1, [pc, #316]	; (8005408 <HAL_I2C_Master_Receive+0x448>)
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 fb19 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e091      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005308:	3b01      	subs	r3, #1
 800530a:	b29a      	uxth	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005314:	b29b      	uxth	r3, r3
 8005316:	3b01      	subs	r3, #1
 8005318:	b29a      	uxth	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005350:	e042      	b.n	80053d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 fc2c 	bl	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e04c      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691a      	ldr	r2, [r3, #16]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	1c5a      	adds	r2, r3, #1
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005382:	3b01      	subs	r3, #1
 8005384:	b29a      	uxth	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800538e:	b29b      	uxth	r3, r3
 8005390:	3b01      	subs	r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d118      	bne.n	80053d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	b2d2      	uxtb	r2, r2
 80053b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	3b01      	subs	r3, #1
 80053d2:	b29a      	uxth	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f47f aec2 	bne.w	8005166 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e000      	b.n	8005400 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80053fe:	2302      	movs	r3, #2
  }
}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	00010004 	.word	0x00010004

0800540c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08a      	sub	sp, #40	; 0x28
 8005410:	af02      	add	r7, sp, #8
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	607a      	str	r2, [r7, #4]
 8005416:	603b      	str	r3, [r7, #0]
 8005418:	460b      	mov	r3, r1
 800541a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800541c:	f7fc ffbc 	bl	8002398 <HAL_GetTick>
 8005420:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005422:	2301      	movs	r3, #1
 8005424:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b20      	cmp	r3, #32
 8005430:	f040 8110 	bne.w	8005654 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	9300      	str	r3, [sp, #0]
 8005438:	2319      	movs	r3, #25
 800543a:	2201      	movs	r2, #1
 800543c:	4988      	ldr	r1, [pc, #544]	; (8005660 <HAL_I2C_IsDeviceReady+0x254>)
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 fa60 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
 800544c:	e103      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_I2C_IsDeviceReady+0x50>
 8005458:	2302      	movs	r3, #2
 800545a:	e0fc      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d007      	beq.n	8005482 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f042 0201 	orr.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005490:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2224      	movs	r2, #36	; 0x24
 8005496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4a70      	ldr	r2, [pc, #448]	; (8005664 <HAL_I2C_IsDeviceReady+0x258>)
 80054a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2200      	movs	r2, #0
 80054be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fa1e 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00c      	beq.n	80054e8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e0b6      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054e8:	897b      	ldrh	r3, [r7, #10]
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054f6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80054f8:	f7fc ff4e 	bl	8002398 <HAL_GetTick>
 80054fc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	695b      	ldr	r3, [r3, #20]
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b02      	cmp	r3, #2
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800551e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005522:	bf0c      	ite	eq
 8005524:	2301      	moveq	r3, #1
 8005526:	2300      	movne	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800552c:	e025      	b.n	800557a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800552e:	f7fc ff33 	bl	8002398 <HAL_GetTick>
 8005532:	4602      	mov	r2, r0
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	1ad3      	subs	r3, r2, r3
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d302      	bcc.n	8005544 <HAL_I2C_IsDeviceReady+0x138>
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	22a0      	movs	r2, #160	; 0xa0
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b02      	cmp	r3, #2
 8005558:	bf0c      	ite	eq
 800555a:	2301      	moveq	r3, #1
 800555c:	2300      	movne	r3, #0
 800555e:	b2db      	uxtb	r3, r3
 8005560:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005570:	bf0c      	ite	eq
 8005572:	2301      	moveq	r3, #1
 8005574:	2300      	movne	r3, #0
 8005576:	b2db      	uxtb	r3, r3
 8005578:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2ba0      	cmp	r3, #160	; 0xa0
 8005584:	d005      	beq.n	8005592 <HAL_I2C_IsDeviceReady+0x186>
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d102      	bne.n	8005592 <HAL_I2C_IsDeviceReady+0x186>
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0cd      	beq.n	800552e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f003 0302 	and.w	r3, r3, #2
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d129      	bne.n	80055fc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055b6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b8:	2300      	movs	r3, #0
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	2319      	movs	r3, #25
 80055d4:	2201      	movs	r2, #1
 80055d6:	4922      	ldr	r1, [pc, #136]	; (8005660 <HAL_I2C_IsDeviceReady+0x254>)
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 f993 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e036      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	e02c      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800560a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005614:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2319      	movs	r3, #25
 800561c:	2201      	movs	r2, #1
 800561e:	4910      	ldr	r1, [pc, #64]	; (8005660 <HAL_I2C_IsDeviceReady+0x254>)
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f96f 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800562c:	2301      	movs	r3, #1
 800562e:	e012      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	3301      	adds	r3, #1
 8005634:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	f4ff af33 	bcc.w	80054a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e000      	b.n	8005656 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8005654:	2302      	movs	r3, #2
  }
}
 8005656:	4618      	mov	r0, r3
 8005658:	3720      	adds	r7, #32
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	00100002 	.word	0x00100002
 8005664:	ffff0000 	.word	0xffff0000

08005668 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b088      	sub	sp, #32
 800566c:	af02      	add	r7, sp, #8
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	607a      	str	r2, [r7, #4]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	460b      	mov	r3, r1
 8005676:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800567c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	2b08      	cmp	r3, #8
 8005682:	d006      	beq.n	8005692 <I2C_MasterRequestWrite+0x2a>
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d003      	beq.n	8005692 <I2C_MasterRequestWrite+0x2a>
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005690:	d108      	bne.n	80056a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	e00b      	b.n	80056bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	2b12      	cmp	r3, #18
 80056aa:	d107      	bne.n	80056bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056c8:	68f8      	ldr	r0, [r7, #12]
 80056ca:	f000 f91b 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00c      	beq.n	80056ee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e035      	b.n	800575a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056f6:	d108      	bne.n	800570a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056f8:	897b      	ldrh	r3, [r7, #10]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	461a      	mov	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005706:	611a      	str	r2, [r3, #16]
 8005708:	e01b      	b.n	8005742 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800570a:	897b      	ldrh	r3, [r7, #10]
 800570c:	11db      	asrs	r3, r3, #7
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f003 0306 	and.w	r3, r3, #6
 8005714:	b2db      	uxtb	r3, r3
 8005716:	f063 030f 	orn	r3, r3, #15
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	490f      	ldr	r1, [pc, #60]	; (8005764 <I2C_MasterRequestWrite+0xfc>)
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f942 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	e010      	b.n	800575a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005738:	897b      	ldrh	r3, [r7, #10]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	4908      	ldr	r1, [pc, #32]	; (8005768 <I2C_MasterRequestWrite+0x100>)
 8005748:	68f8      	ldr	r0, [r7, #12]
 800574a:	f000 f932 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	00010008 	.word	0x00010008
 8005768:	00010002 	.word	0x00010002

0800576c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	460b      	mov	r3, r1
 800577a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005790:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b08      	cmp	r3, #8
 8005796:	d006      	beq.n	80057a6 <I2C_MasterRequestRead+0x3a>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d003      	beq.n	80057a6 <I2C_MasterRequestRead+0x3a>
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057a4:	d108      	bne.n	80057b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	e00b      	b.n	80057d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057bc:	2b11      	cmp	r3, #17
 80057be:	d107      	bne.n	80057d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f891 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00c      	beq.n	8005802 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e078      	b.n	80058f4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800580a:	d108      	bne.n	800581e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800580c:	897b      	ldrh	r3, [r7, #10]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	f043 0301 	orr.w	r3, r3, #1
 8005814:	b2da      	uxtb	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]
 800581c:	e05e      	b.n	80058dc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800581e:	897b      	ldrh	r3, [r7, #10]
 8005820:	11db      	asrs	r3, r3, #7
 8005822:	b2db      	uxtb	r3, r3
 8005824:	f003 0306 	and.w	r3, r3, #6
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f063 030f 	orn	r3, r3, #15
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4930      	ldr	r1, [pc, #192]	; (80058fc <I2C_MasterRequestRead+0x190>)
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f8b8 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e053      	b.n	80058f4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800584c:	897b      	ldrh	r3, [r7, #10]
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	4929      	ldr	r1, [pc, #164]	; (8005900 <I2C_MasterRequestRead+0x194>)
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f8a8 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e043      	b.n	80058f4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800586c:	2300      	movs	r3, #0
 800586e:	613b      	str	r3, [r7, #16]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	613b      	str	r3, [r7, #16]
 8005880:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005890:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f830 	bl	8005904 <I2C_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00c      	beq.n	80058c4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d003      	beq.n	80058c0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e017      	b.n	80058f4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80058c4:	897b      	ldrh	r3, [r7, #10]
 80058c6:	11db      	asrs	r3, r3, #7
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	f003 0306 	and.w	r3, r3, #6
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	f063 030e 	orn	r3, r3, #14
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4907      	ldr	r1, [pc, #28]	; (8005900 <I2C_MasterRequestRead+0x194>)
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f865 	bl	80059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e000      	b.n	80058f4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	00010008 	.word	0x00010008
 8005900:	00010002 	.word	0x00010002

08005904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	603b      	str	r3, [r7, #0]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005914:	e025      	b.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d021      	beq.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800591e:	f7fc fd3b 	bl	8002398 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	429a      	cmp	r2, r3
 800592c:	d302      	bcc.n	8005934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d116      	bne.n	8005962 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2220      	movs	r2, #32
 800593e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594e:	f043 0220 	orr.w	r2, r3, #32
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e023      	b.n	80059aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	0c1b      	lsrs	r3, r3, #16
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10d      	bne.n	8005988 <I2C_WaitOnFlagUntilTimeout+0x84>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	43da      	mvns	r2, r3
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	b29b      	uxth	r3, r3
 800597a:	2b00      	cmp	r3, #0
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	e00c      	b.n	80059a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	43da      	mvns	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4013      	ands	r3, r2
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	bf0c      	ite	eq
 800599a:	2301      	moveq	r3, #1
 800599c:	2300      	movne	r3, #0
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	461a      	mov	r2, r3
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d0b6      	beq.n	8005916 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
 80059be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c0:	e051      	b.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d0:	d123      	bne.n	8005a1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e046      	b.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a20:	d021      	beq.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a22:	f7fc fcb9 	bl	8002398 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d302      	bcc.n	8005a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d116      	bne.n	8005a66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e020      	b.n	8005aa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	0c1b      	lsrs	r3, r3, #16
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d10c      	bne.n	8005a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	43da      	mvns	r2, r3
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bf14      	ite	ne
 8005a82:	2301      	movne	r3, #1
 8005a84:	2300      	moveq	r3, #0
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	e00b      	b.n	8005aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	43da      	mvns	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	4013      	ands	r3, r2
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d18d      	bne.n	80059c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005abc:	e02d      	b.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f8ce 	bl	8005c60 <I2C_IsAcknowledgeFailed>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e02d      	b.n	8005b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d021      	beq.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ad6:	f7fc fc5f 	bl	8002398 <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d302      	bcc.n	8005aec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d116      	bne.n	8005b1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b06:	f043 0220 	orr.w	r2, r3, #32
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e007      	b.n	8005b2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b24:	2b80      	cmp	r3, #128	; 0x80
 8005b26:	d1ca      	bne.n	8005abe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b084      	sub	sp, #16
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b3e:	e02d      	b.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f88d 	bl	8005c60 <I2C_IsAcknowledgeFailed>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e02d      	b.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b56:	d021      	beq.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b58:	f7fc fc1e 	bl	8002398 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d302      	bcc.n	8005b6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d116      	bne.n	8005b9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e007      	b.n	8005bac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d1ca      	bne.n	8005b40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005baa:	2300      	movs	r3, #0
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005bc0:	e042      	b.n	8005c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f003 0310 	and.w	r3, r3, #16
 8005bcc:	2b10      	cmp	r3, #16
 8005bce:	d119      	bne.n	8005c04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f06f 0210 	mvn.w	r2, #16
 8005bd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e029      	b.n	8005c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c04:	f7fc fbc8 	bl	8002398 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d302      	bcc.n	8005c1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d116      	bne.n	8005c48 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c34:	f043 0220 	orr.w	r2, r3, #32
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e007      	b.n	8005c58 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c52:	2b40      	cmp	r3, #64	; 0x40
 8005c54:	d1b5      	bne.n	8005bc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c76:	d11b      	bne.n	8005cb0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c80:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9c:	f043 0204 	orr.w	r2, r3, #4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b088      	sub	sp, #32
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e128      	b.n	8005f24 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a90      	ldr	r2, [pc, #576]	; (8005f2c <HAL_I2S_Init+0x26c>)
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7fb ffb5 	bl	8001c5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2202      	movs	r2, #2
 8005cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6812      	ldr	r2, [r2, #0]
 8005d04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d08:	f023 030f 	bic.w	r3, r3, #15
 8005d0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2202      	movs	r2, #2
 8005d14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d060      	beq.n	8005de0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d26:	2310      	movs	r3, #16
 8005d28:	617b      	str	r3, [r7, #20]
 8005d2a:	e001      	b.n	8005d30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	d802      	bhi.n	8005d3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005d3e:	2001      	movs	r0, #1
 8005d40:	f001 fce4 	bl	800770c <HAL_RCCEx_GetPeriphCLKFreq>
 8005d44:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d125      	bne.n	8005d9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d010      	beq.n	8005d7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d74:	3305      	adds	r3, #5
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	e01f      	b.n	8005dba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d84:	4613      	mov	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d96:	3305      	adds	r3, #5
 8005d98:	613b      	str	r3, [r7, #16]
 8005d9a:	e00e      	b.n	8005dba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	005b      	lsls	r3, r3, #1
 8005dac:	461a      	mov	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db6:	3305      	adds	r3, #5
 8005db8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	4a5c      	ldr	r2, [pc, #368]	; (8005f30 <HAL_I2S_Init+0x270>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	08db      	lsrs	r3, r3, #3
 8005dc4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005dd8:	69bb      	ldr	r3, [r7, #24]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	e003      	b.n	8005de8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005de0:	2302      	movs	r3, #2
 8005de2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d902      	bls.n	8005df4 <HAL_I2S_Init+0x134>
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	2bff      	cmp	r3, #255	; 0xff
 8005df2:	d907      	bls.n	8005e04 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	f043 0210 	orr.w	r2, r3, #16
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e08f      	b.n	8005f24 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	ea42 0103 	orr.w	r1, r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69fa      	ldr	r2, [r7, #28]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e22:	f023 030f 	bic.w	r3, r3, #15
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6851      	ldr	r1, [r2, #4]
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6892      	ldr	r2, [r2, #8]
 8005e2e:	4311      	orrs	r1, r2
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	68d2      	ldr	r2, [r2, #12]
 8005e34:	4311      	orrs	r1, r2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6992      	ldr	r2, [r2, #24]
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e46:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d161      	bne.n	8005f14 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a38      	ldr	r2, [pc, #224]	; (8005f34 <HAL_I2S_Init+0x274>)
 8005e54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a37      	ldr	r2, [pc, #220]	; (8005f38 <HAL_I2S_Init+0x278>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d101      	bne.n	8005e64 <HAL_I2S_Init+0x1a4>
 8005e60:	4b36      	ldr	r3, [pc, #216]	; (8005f3c <HAL_I2S_Init+0x27c>)
 8005e62:	e001      	b.n	8005e68 <HAL_I2S_Init+0x1a8>
 8005e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e68:	69db      	ldr	r3, [r3, #28]
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	6812      	ldr	r2, [r2, #0]
 8005e6e:	4932      	ldr	r1, [pc, #200]	; (8005f38 <HAL_I2S_Init+0x278>)
 8005e70:	428a      	cmp	r2, r1
 8005e72:	d101      	bne.n	8005e78 <HAL_I2S_Init+0x1b8>
 8005e74:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <HAL_I2S_Init+0x27c>)
 8005e76:	e001      	b.n	8005e7c <HAL_I2S_Init+0x1bc>
 8005e78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005e7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e80:	f023 030f 	bic.w	r3, r3, #15
 8005e84:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2b      	ldr	r2, [pc, #172]	; (8005f38 <HAL_I2S_Init+0x278>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d101      	bne.n	8005e94 <HAL_I2S_Init+0x1d4>
 8005e90:	4b2a      	ldr	r3, [pc, #168]	; (8005f3c <HAL_I2S_Init+0x27c>)
 8005e92:	e001      	b.n	8005e98 <HAL_I2S_Init+0x1d8>
 8005e94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e98:	2202      	movs	r2, #2
 8005e9a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <HAL_I2S_Init+0x278>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_I2S_Init+0x1ea>
 8005ea6:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_I2S_Init+0x27c>)
 8005ea8:	e001      	b.n	8005eae <HAL_I2S_Init+0x1ee>
 8005eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005eae:	69db      	ldr	r3, [r3, #28]
 8005eb0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eba:	d003      	beq.n	8005ec4 <HAL_I2S_Init+0x204>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	e001      	b.n	8005ed0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	b299      	uxth	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005ee6:	4303      	orrs	r3, r0
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	430b      	orrs	r3, r1
 8005eec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	897b      	ldrh	r3, [r7, #10]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005efc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a0d      	ldr	r2, [pc, #52]	; (8005f38 <HAL_I2S_Init+0x278>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_I2S_Init+0x24c>
 8005f08:	4b0c      	ldr	r3, [pc, #48]	; (8005f3c <HAL_I2S_Init+0x27c>)
 8005f0a:	e001      	b.n	8005f10 <HAL_I2S_Init+0x250>
 8005f0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f10:	897a      	ldrh	r2, [r7, #10]
 8005f12:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3720      	adds	r7, #32
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	080065d1 	.word	0x080065d1
 8005f30:	cccccccd 	.word	0xcccccccd
 8005f34:	08006759 	.word	0x08006759
 8005f38:	40003800 	.word	0x40003800
 8005f3c:	40003400 	.word	0x40003400

08005f40 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d002      	beq.n	8005f5a <HAL_I2S_Transmit_DMA+0x1a>
 8005f54:	88fb      	ldrh	r3, [r7, #6]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e08e      	b.n	800607c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_I2S_Transmit_DMA+0x2e>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e086      	b.n	800607c <HAL_I2S_Transmit_DMA+0x13c>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d005      	beq.n	8005f8e <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
 8005f8c:	e076      	b.n	800607c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2203      	movs	r2, #3
 8005f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69db      	ldr	r3, [r3, #28]
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	2b03      	cmp	r3, #3
 8005fb2:	d002      	beq.n	8005fba <HAL_I2S_Transmit_DMA+0x7a>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	d10a      	bne.n	8005fd0 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005fba:	88fb      	ldrh	r3, [r7, #6]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	005b      	lsls	r3, r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fce:	e005      	b.n	8005fdc <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe0:	4a28      	ldr	r2, [pc, #160]	; (8006084 <HAL_I2S_Transmit_DMA+0x144>)
 8005fe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe8:	4a27      	ldr	r2, [pc, #156]	; (8006088 <HAL_I2S_Transmit_DMA+0x148>)
 8005fea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	4a26      	ldr	r2, [pc, #152]	; (800608c <HAL_I2S_Transmit_DMA+0x14c>)
 8005ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005ffc:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8006004:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800600a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800600c:	f7fc fbb2 	bl	8002774 <HAL_DMA_Start_IT>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00f      	beq.n	8006036 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601a:	f043 0208 	orr.w	r2, r3, #8
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e022      	b.n	800607c <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006040:	2b00      	cmp	r3, #0
 8006042:	d107      	bne.n	8006054 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69da      	ldr	r2, [r3, #28]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006052:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d107      	bne.n	8006072 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0202 	orr.w	r2, r2, #2
 8006070:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	080064af 	.word	0x080064af
 8006088:	0800646d 	.word	0x0800646d
 800608c:	080064cb 	.word	0x080064cb

08006090 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b088      	sub	sp, #32
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a4:	d004      	beq.n	80060b0 <HAL_I2S_DMAStop+0x20>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 80d1 	bne.w	8006252 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00f      	beq.n	80060d8 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fc fbb1 	bl	8002824 <HAL_DMA_Abort>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060cc:	f043 0208 	orr.w	r2, r3, #8
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 80060d8:	2364      	movs	r3, #100	; 0x64
 80060da:	2201      	movs	r2, #1
 80060dc:	2102      	movs	r1, #2
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fb00 	bl	80066e4 <I2S_WaitFlagStateUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00b      	beq.n	8006102 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f043 0201 	orr.w	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8006102:	2364      	movs	r3, #100	; 0x64
 8006104:	2200      	movs	r2, #0
 8006106:	2180      	movs	r1, #128	; 0x80
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 faeb 	bl	80066e4 <I2S_WaitFlagStateUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006118:	f043 0201 	orr.w	r2, r3, #1
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800613a:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0202 	bic.w	r2, r2, #2
 8006158:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b05      	cmp	r3, #5
 8006164:	f040 8165 	bne.w	8006432 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00f      	beq.n	8006190 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	4618      	mov	r0, r3
 8006176:	f7fc fb55 	bl	8002824 <HAL_DMA_Abort>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d007      	beq.n	8006190 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006184:	f043 0208 	orr.w	r2, r3, #8
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a8a      	ldr	r2, [pc, #552]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d101      	bne.n	800619e <HAL_I2S_DMAStop+0x10e>
 800619a:	4b8a      	ldr	r3, [pc, #552]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 800619c:	e001      	b.n	80061a2 <HAL_I2S_DMAStop+0x112>
 800619e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061a2:	69da      	ldr	r2, [r3, #28]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4985      	ldr	r1, [pc, #532]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80061aa:	428b      	cmp	r3, r1
 80061ac:	d101      	bne.n	80061b2 <HAL_I2S_DMAStop+0x122>
 80061ae:	4b85      	ldr	r3, [pc, #532]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 80061b0:	e001      	b.n	80061b6 <HAL_I2S_DMAStop+0x126>
 80061b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ba:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a7e      	ldr	r2, [pc, #504]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d101      	bne.n	80061ce <HAL_I2S_DMAStop+0x13e>
 80061ca:	4b7e      	ldr	r3, [pc, #504]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 80061cc:	e001      	b.n	80061d2 <HAL_I2S_DMAStop+0x142>
 80061ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	613b      	str	r3, [r7, #16]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a79      	ldr	r2, [pc, #484]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d101      	bne.n	80061e4 <HAL_I2S_DMAStop+0x154>
 80061e0:	4b78      	ldr	r3, [pc, #480]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 80061e2:	e001      	b.n	80061e8 <HAL_I2S_DMAStop+0x158>
 80061e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	613b      	str	r3, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a73      	ldr	r2, [pc, #460]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d101      	bne.n	80061fc <HAL_I2S_DMAStop+0x16c>
 80061f8:	4b72      	ldr	r3, [pc, #456]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 80061fa:	e001      	b.n	8006200 <HAL_I2S_DMAStop+0x170>
 80061fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	496e      	ldr	r1, [pc, #440]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 8006208:	428b      	cmp	r3, r1
 800620a:	d101      	bne.n	8006210 <HAL_I2S_DMAStop+0x180>
 800620c:	4b6d      	ldr	r3, [pc, #436]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 800620e:	e001      	b.n	8006214 <HAL_I2S_DMAStop+0x184>
 8006210:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10c      	bne.n	800623c <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800623a:	e0fa      	b.n	8006432 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4a5f      	ldr	r2, [pc, #380]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d101      	bne.n	800624a <HAL_I2S_DMAStop+0x1ba>
 8006246:	4b5f      	ldr	r3, [pc, #380]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 8006248:	e001      	b.n	800624e <HAL_I2S_DMAStop+0x1be>
 800624a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800624e:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006250:	e0ef      	b.n	8006432 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800625a:	d005      	beq.n	8006268 <HAL_I2S_DMAStop+0x1d8>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006264:	f040 80e5 	bne.w	8006432 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00f      	beq.n	8006290 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006274:	4618      	mov	r0, r3
 8006276:	f7fc fad5 	bl	8002824 <HAL_DMA_Abort>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006284:	f043 0208 	orr.w	r2, r3, #8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b05      	cmp	r3, #5
 800629a:	f040 809a 	bne.w	80063d2 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00f      	beq.n	80062c6 <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fc faba 	bl	8002824 <HAL_DMA_Abort>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d007      	beq.n	80062c6 <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	f043 0208 	orr.w	r2, r3, #8
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 80062c6:	f7fc f867 	bl	8002398 <HAL_GetTick>
 80062ca:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80062cc:	e012      	b.n	80062f4 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 80062ce:	f7fc f863 	bl	8002398 <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b64      	cmp	r3, #100	; 0x64
 80062da:	d90b      	bls.n	80062f4 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	f043 0201 	orr.w	r2, r3, #1
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a31      	ldr	r2, [pc, #196]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d101      	bne.n	8006302 <HAL_I2S_DMAStop+0x272>
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 8006300:	e001      	b.n	8006306 <HAL_I2S_DMAStop+0x276>
 8006302:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0302 	and.w	r3, r3, #2
 800630c:	2b02      	cmp	r3, #2
 800630e:	d1de      	bne.n	80062ce <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006310:	e012      	b.n	8006338 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8006312:	f7fc f841 	bl	8002398 <HAL_GetTick>
 8006316:	4602      	mov	r2, r0
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	1ad3      	subs	r3, r2, r3
 800631c:	2b64      	cmp	r3, #100	; 0x64
 800631e:	d90b      	bls.n	8006338 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006324:	f043 0201 	orr.w	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a20      	ldr	r2, [pc, #128]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <HAL_I2S_DMAStop+0x2b6>
 8006342:	4b20      	ldr	r3, [pc, #128]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 8006344:	e001      	b.n	800634a <HAL_I2S_DMAStop+0x2ba>
 8006346:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006350:	2b80      	cmp	r3, #128	; 0x80
 8006352:	d0de      	beq.n	8006312 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a19      	ldr	r2, [pc, #100]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d101      	bne.n	8006362 <HAL_I2S_DMAStop+0x2d2>
 800635e:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 8006360:	e001      	b.n	8006366 <HAL_I2S_DMAStop+0x2d6>
 8006362:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4914      	ldr	r1, [pc, #80]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 800636e:	428b      	cmp	r3, r1
 8006370:	d101      	bne.n	8006376 <HAL_I2S_DMAStop+0x2e6>
 8006372:	4b14      	ldr	r3, [pc, #80]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 8006374:	e001      	b.n	800637a <HAL_I2S_DMAStop+0x2ea>
 8006376:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800637a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800637e:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a0d      	ldr	r2, [pc, #52]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d101      	bne.n	8006392 <HAL_I2S_DMAStop+0x302>
 800638e:	4b0d      	ldr	r3, [pc, #52]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 8006390:	e001      	b.n	8006396 <HAL_I2S_DMAStop+0x306>
 8006392:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a07      	ldr	r2, [pc, #28]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d101      	bne.n	80063aa <HAL_I2S_DMAStop+0x31a>
 80063a6:	4b07      	ldr	r3, [pc, #28]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 80063a8:	e001      	b.n	80063ae <HAL_I2S_DMAStop+0x31e>
 80063aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4902      	ldr	r1, [pc, #8]	; (80063c0 <HAL_I2S_DMAStop+0x330>)
 80063b6:	428b      	cmp	r3, r1
 80063b8:	d106      	bne.n	80063c8 <HAL_I2S_DMAStop+0x338>
 80063ba:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <HAL_I2S_DMAStop+0x334>)
 80063bc:	e006      	b.n	80063cc <HAL_I2S_DMAStop+0x33c>
 80063be:	bf00      	nop
 80063c0:	40003800 	.word	0x40003800
 80063c4:	40003400 	.word	0x40003400
 80063c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063cc:	f022 0202 	bic.w	r2, r2, #2
 80063d0:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e0:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80063e2:	2300      	movs	r3, #0
 80063e4:	60bb      	str	r3, [r7, #8]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68db      	ldr	r3, [r3, #12]
 80063ec:	60bb      	str	r3, [r7, #8]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60bb      	str	r3, [r7, #8]
 80063f6:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f022 0201 	bic.w	r2, r2, #1
 8006406:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	d10c      	bne.n	800642c <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006416:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e002      	b.n	8006432 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 800643a:	7ffb      	ldrb	r3, [r7, #31]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}

08006444 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006478:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10e      	bne.n	80064a0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685a      	ldr	r2, [r3, #4]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f022 0202 	bic.w	r2, r2, #2
 8006490:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7fa fba7 	bl	8000bf4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80064a6:	bf00      	nop
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b084      	sub	sp, #16
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80064bc:	68f8      	ldr	r0, [r7, #12]
 80064be:	f7fa fbab 	bl	8000c18 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	685a      	ldr	r2, [r3, #4]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0203 	bic.w	r2, r2, #3
 80064e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006500:	f043 0208 	orr.w	r2, r3, #8
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f7ff ffa5 	bl	8006458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800650e:	bf00      	nop
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}

08006516 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006516:	b580      	push	{r7, lr}
 8006518:	b082      	sub	sp, #8
 800651a:	af00      	add	r7, sp, #0
 800651c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006522:	881a      	ldrh	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652e:	1c9a      	adds	r2, r3, #2
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	3b01      	subs	r3, #1
 800653c:	b29a      	uxth	r2, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10e      	bne.n	800656a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	685a      	ldr	r2, [r3, #4]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800655a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f7fa fb45 	bl	8000bf4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800656a:	bf00      	nop
 800656c:	3708      	adds	r7, #8
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b082      	sub	sp, #8
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	b292      	uxth	r2, r2
 8006586:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	1c9a      	adds	r2, r3, #2
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006596:	b29b      	uxth	r3, r3
 8006598:	3b01      	subs	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10e      	bne.n	80065c8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065b8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f7ff ff3e 	bl	8006444 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80065c8:	bf00      	nop
 80065ca:	3708      	adds	r7, #8
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d13a      	bne.n	8006662 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d109      	bne.n	800660a <I2S_IRQHandler+0x3a>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d102      	bne.n	800660a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff ffb4 	bl	8006572 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d126      	bne.n	8006662 <I2S_IRQHandler+0x92>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f003 0320 	and.w	r3, r3, #32
 800661e:	2b20      	cmp	r3, #32
 8006620:	d11f      	bne.n	8006662 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006630:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006632:	2300      	movs	r3, #0
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006654:	f043 0202 	orr.w	r2, r3, #2
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff fefb 	bl	8006458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b03      	cmp	r3, #3
 800666c:	d136      	bne.n	80066dc <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b02      	cmp	r3, #2
 8006676:	d109      	bne.n	800668c <I2S_IRQHandler+0xbc>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006682:	2b80      	cmp	r3, #128	; 0x80
 8006684:	d102      	bne.n	800668c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7ff ff45 	bl	8006516 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f003 0308 	and.w	r3, r3, #8
 8006692:	2b08      	cmp	r3, #8
 8006694:	d122      	bne.n	80066dc <I2S_IRQHandler+0x10c>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b20      	cmp	r3, #32
 80066a2:	d11b      	bne.n	80066dc <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066b2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80066b4:	2300      	movs	r3, #0
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60fb      	str	r3, [r7, #12]
 80066c0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2201      	movs	r2, #1
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066ce:	f043 0204 	orr.w	r2, r3, #4
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f7ff febe 	bl	8006458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80066dc:	bf00      	nop
 80066de:	3718      	adds	r7, #24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	4613      	mov	r3, r2
 80066f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 80066f4:	f7fb fe50 	bl	8002398 <HAL_GetTick>
 80066f8:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80066fa:	e018      	b.n	800672e <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006702:	d014      	beq.n	800672e <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8006704:	f7fb fe48 	bl	8002398 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d902      	bls.n	800671a <I2S_WaitFlagStateUntilTimeout+0x36>
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e00f      	b.n	800674e <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4013      	ands	r3, r2
 8006738:	68ba      	ldr	r2, [r7, #8]
 800673a:	429a      	cmp	r2, r3
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	429a      	cmp	r2, r3
 800674a:	d1d7      	bne.n	80066fc <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4aa2      	ldr	r2, [pc, #648]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d101      	bne.n	8006776 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006772:	4ba2      	ldr	r3, [pc, #648]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006774:	e001      	b.n	800677a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006776:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a9b      	ldr	r2, [pc, #620]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d101      	bne.n	8006794 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006790:	4b9a      	ldr	r3, [pc, #616]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006792:	e001      	b.n	8006798 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006798:	685b      	ldr	r3, [r3, #4]
 800679a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a4:	d004      	beq.n	80067b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f040 8099 	bne.w	80068e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d107      	bne.n	80067ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d002      	beq.n	80067ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f925 	bl	8006a14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d107      	bne.n	80067e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 f9c8 	bl	8006b74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d13a      	bne.n	8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f003 0320 	and.w	r3, r3, #32
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d035      	beq.n	8006864 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a7e      	ldr	r2, [pc, #504]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d101      	bne.n	8006806 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006802:	4b7e      	ldr	r3, [pc, #504]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006804:	e001      	b.n	800680a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4979      	ldr	r1, [pc, #484]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006812:	428b      	cmp	r3, r1
 8006814:	d101      	bne.n	800681a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006816:	4b79      	ldr	r3, [pc, #484]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006818:	e001      	b.n	800681e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800681a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800681e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006822:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006832:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006834:	2300      	movs	r3, #0
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	f043 0202 	orr.w	r2, r3, #2
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fdfa 	bl	8006458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	f003 0308 	and.w	r3, r3, #8
 800686a:	2b08      	cmp	r3, #8
 800686c:	f040 80be 	bne.w	80069ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 80b8 	beq.w	80069ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800688a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a59      	ldr	r2, [pc, #356]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d101      	bne.n	800689a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006896:	4b59      	ldr	r3, [pc, #356]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006898:	e001      	b.n	800689e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800689a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4954      	ldr	r1, [pc, #336]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80068a6:	428b      	cmp	r3, r1
 80068a8:	d101      	bne.n	80068ae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80068aa:	4b54      	ldr	r3, [pc, #336]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80068ac:	e001      	b.n	80068b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80068ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80068b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80068b6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80068b8:	2300      	movs	r3, #0
 80068ba:	60bb      	str	r3, [r7, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	60bb      	str	r3, [r7, #8]
 80068c4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d2:	f043 0204 	orr.w	r2, r3, #4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7ff fdbc 	bl	8006458 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80068e0:	e084      	b.n	80069ec <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d107      	bne.n	80068fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d002      	beq.n	80068fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f8be 	bl	8006a78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	2b01      	cmp	r3, #1
 8006904:	d107      	bne.n	8006916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f8fd 	bl	8006b10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800691c:	2b40      	cmp	r3, #64	; 0x40
 800691e:	d12f      	bne.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d02a      	beq.n	8006980 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006938:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a2e      	ldr	r2, [pc, #184]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d101      	bne.n	8006948 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006944:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006946:	e001      	b.n	800694c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800694c:	685a      	ldr	r2, [r3, #4]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4929      	ldr	r1, [pc, #164]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006954:	428b      	cmp	r3, r1
 8006956:	d101      	bne.n	800695c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006958:	4b28      	ldr	r3, [pc, #160]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800695a:	e001      	b.n	8006960 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800695c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006960:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006964:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	f043 0202 	orr.w	r2, r3, #2
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fd6c 	bl	8006458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	f003 0308 	and.w	r3, r3, #8
 8006986:	2b08      	cmp	r3, #8
 8006988:	d131      	bne.n	80069ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f003 0320 	and.w	r3, r3, #32
 8006990:	2b00      	cmp	r3, #0
 8006992:	d02c      	beq.n	80069ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a17      	ldr	r2, [pc, #92]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d101      	bne.n	80069a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800699e:	4b17      	ldr	r3, [pc, #92]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069a0:	e001      	b.n	80069a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80069a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4912      	ldr	r1, [pc, #72]	; (80069f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80069ae:	428b      	cmp	r3, r1
 80069b0:	d101      	bne.n	80069b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80069b2:	4b12      	ldr	r3, [pc, #72]	; (80069fc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80069b4:	e001      	b.n	80069ba <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80069b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80069ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069be:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685a      	ldr	r2, [r3, #4]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80069ce:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069dc:	f043 0204 	orr.w	r2, r3, #4
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff fd37 	bl	8006458 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80069ea:	e000      	b.n	80069ee <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80069ec:	bf00      	nop
}
 80069ee:	bf00      	nop
 80069f0:	3720      	adds	r7, #32
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	40003800 	.word	0x40003800
 80069fc:	40003400 	.word	0x40003400

08006a00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006a08:	bf00      	nop
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr

08006a14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a20:	1c99      	adds	r1, r3, #2
 8006a22:	687a      	ldr	r2, [r7, #4]
 8006a24:	6251      	str	r1, [r2, #36]	; 0x24
 8006a26:	881a      	ldrh	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d113      	bne.n	8006a6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d106      	bne.n	8006a6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ffc9 	bl	8006a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	1c99      	adds	r1, r3, #2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6251      	str	r1, [r2, #36]	; 0x24
 8006a8a:	8819      	ldrh	r1, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1d      	ldr	r2, [pc, #116]	; (8006b08 <I2SEx_TxISR_I2SExt+0x90>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <I2SEx_TxISR_I2SExt+0x22>
 8006a96:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <I2SEx_TxISR_I2SExt+0x94>)
 8006a98:	e001      	b.n	8006a9e <I2SEx_TxISR_I2SExt+0x26>
 8006a9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d121      	bne.n	8006afe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <I2SEx_TxISR_I2SExt+0x90>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d101      	bne.n	8006ac8 <I2SEx_TxISR_I2SExt+0x50>
 8006ac4:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <I2SEx_TxISR_I2SExt+0x94>)
 8006ac6:	e001      	b.n	8006acc <I2SEx_TxISR_I2SExt+0x54>
 8006ac8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	490d      	ldr	r1, [pc, #52]	; (8006b08 <I2SEx_TxISR_I2SExt+0x90>)
 8006ad4:	428b      	cmp	r3, r1
 8006ad6:	d101      	bne.n	8006adc <I2SEx_TxISR_I2SExt+0x64>
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <I2SEx_TxISR_I2SExt+0x94>)
 8006ada:	e001      	b.n	8006ae0 <I2SEx_TxISR_I2SExt+0x68>
 8006adc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d106      	bne.n	8006afe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f7ff ff81 	bl	8006a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	40003800 	.word	0x40003800
 8006b0c:	40003400 	.word	0x40003400

08006b10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68d8      	ldr	r0, [r3, #12]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	1c99      	adds	r1, r3, #2
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b28:	b282      	uxth	r2, r0
 8006b2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d113      	bne.n	8006b6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2201      	movs	r2, #1
 8006b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff ff4a 	bl	8006a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a20      	ldr	r2, [pc, #128]	; (8006c04 <I2SEx_RxISR_I2SExt+0x90>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d101      	bne.n	8006b8a <I2SEx_RxISR_I2SExt+0x16>
 8006b86:	4b20      	ldr	r3, [pc, #128]	; (8006c08 <I2SEx_RxISR_I2SExt+0x94>)
 8006b88:	e001      	b.n	8006b8e <I2SEx_RxISR_I2SExt+0x1a>
 8006b8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b8e:	68d8      	ldr	r0, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	1c99      	adds	r1, r3, #2
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006b9a:	b282      	uxth	r2, r0
 8006b9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d121      	bne.n	8006bfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a12      	ldr	r2, [pc, #72]	; (8006c04 <I2SEx_RxISR_I2SExt+0x90>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d101      	bne.n	8006bc4 <I2SEx_RxISR_I2SExt+0x50>
 8006bc0:	4b11      	ldr	r3, [pc, #68]	; (8006c08 <I2SEx_RxISR_I2SExt+0x94>)
 8006bc2:	e001      	b.n	8006bc8 <I2SEx_RxISR_I2SExt+0x54>
 8006bc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	490d      	ldr	r1, [pc, #52]	; (8006c04 <I2SEx_RxISR_I2SExt+0x90>)
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	d101      	bne.n	8006bd8 <I2SEx_RxISR_I2SExt+0x64>
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <I2SEx_RxISR_I2SExt+0x94>)
 8006bd6:	e001      	b.n	8006bdc <I2SEx_RxISR_I2SExt+0x68>
 8006bd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006bdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006be0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be6:	b29b      	uxth	r3, r3
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff ff03 	bl	8006a00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40003800 	.word	0x40003800
 8006c08:	40003400 	.word	0x40003400

08006c0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b086      	sub	sp, #24
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e25b      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d075      	beq.n	8006d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c2a:	4ba3      	ldr	r3, [pc, #652]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f003 030c 	and.w	r3, r3, #12
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d00c      	beq.n	8006c50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c36:	4ba0      	ldr	r3, [pc, #640]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006c3e:	2b08      	cmp	r3, #8
 8006c40:	d112      	bne.n	8006c68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006c42:	4b9d      	ldr	r3, [pc, #628]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c4e:	d10b      	bne.n	8006c68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c50:	4b99      	ldr	r3, [pc, #612]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05b      	beq.n	8006d14 <HAL_RCC_OscConfig+0x108>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d157      	bne.n	8006d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e236      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c70:	d106      	bne.n	8006c80 <HAL_RCC_OscConfig+0x74>
 8006c72:	4b91      	ldr	r3, [pc, #580]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a90      	ldr	r2, [pc, #576]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7c:	6013      	str	r3, [r2, #0]
 8006c7e:	e01d      	b.n	8006cbc <HAL_RCC_OscConfig+0xb0>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x98>
 8006c8a:	4b8b      	ldr	r3, [pc, #556]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a8a      	ldr	r2, [pc, #552]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c94:	6013      	str	r3, [r2, #0]
 8006c96:	4b88      	ldr	r3, [pc, #544]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a87      	ldr	r2, [pc, #540]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e00b      	b.n	8006cbc <HAL_RCC_OscConfig+0xb0>
 8006ca4:	4b84      	ldr	r3, [pc, #528]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a83      	ldr	r2, [pc, #524]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	4b81      	ldr	r3, [pc, #516]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a80      	ldr	r2, [pc, #512]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d013      	beq.n	8006cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc4:	f7fb fb68 	bl	8002398 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ccc:	f7fb fb64 	bl	8002398 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b64      	cmp	r3, #100	; 0x64
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e1fb      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cde:	4b76      	ldr	r3, [pc, #472]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0xc0>
 8006cea:	e014      	b.n	8006d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cec:	f7fb fb54 	bl	8002398 <HAL_GetTick>
 8006cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006cf2:	e008      	b.n	8006d06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006cf4:	f7fb fb50 	bl	8002398 <HAL_GetTick>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	2b64      	cmp	r3, #100	; 0x64
 8006d00:	d901      	bls.n	8006d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e1e7      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d06:	4b6c      	ldr	r3, [pc, #432]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d1f0      	bne.n	8006cf4 <HAL_RCC_OscConfig+0xe8>
 8006d12:	e000      	b.n	8006d16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d063      	beq.n	8006dea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d22:	4b65      	ldr	r3, [pc, #404]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 030c 	and.w	r3, r3, #12
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d2e:	4b62      	ldr	r3, [pc, #392]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d11c      	bne.n	8006d74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006d3a:	4b5f      	ldr	r3, [pc, #380]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d116      	bne.n	8006d74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d46:	4b5c      	ldr	r3, [pc, #368]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <HAL_RCC_OscConfig+0x152>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d001      	beq.n	8006d5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e1bb      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d5e:	4b56      	ldr	r3, [pc, #344]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	4952      	ldr	r1, [pc, #328]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d72:	e03a      	b.n	8006dea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d020      	beq.n	8006dbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d7c:	4b4f      	ldr	r3, [pc, #316]	; (8006ebc <HAL_RCC_OscConfig+0x2b0>)
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d82:	f7fb fb09 	bl	8002398 <HAL_GetTick>
 8006d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d88:	e008      	b.n	8006d9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006d8a:	f7fb fb05 	bl	8002398 <HAL_GetTick>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e19c      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d9c:	4b46      	ldr	r3, [pc, #280]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d0f0      	beq.n	8006d8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006da8:	4b43      	ldr	r3, [pc, #268]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	4940      	ldr	r1, [pc, #256]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	600b      	str	r3, [r1, #0]
 8006dbc:	e015      	b.n	8006dea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	; (8006ebc <HAL_RCC_OscConfig+0x2b0>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fb fae8 	bl	8002398 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006dcc:	f7fb fae4 	bl	8002398 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e17b      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006dde:	4b36      	ldr	r3, [pc, #216]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f0      	bne.n	8006dcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0308 	and.w	r3, r3, #8
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d030      	beq.n	8006e58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d016      	beq.n	8006e2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006dfe:	4b30      	ldr	r3, [pc, #192]	; (8006ec0 <HAL_RCC_OscConfig+0x2b4>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e04:	f7fb fac8 	bl	8002398 <HAL_GetTick>
 8006e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e0a:	e008      	b.n	8006e1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e0c:	f7fb fac4 	bl	8002398 <HAL_GetTick>
 8006e10:	4602      	mov	r2, r0
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1ad3      	subs	r3, r2, r3
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e15b      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006e1e:	4b26      	ldr	r3, [pc, #152]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006e20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f0      	beq.n	8006e0c <HAL_RCC_OscConfig+0x200>
 8006e2a:	e015      	b.n	8006e58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e2c:	4b24      	ldr	r3, [pc, #144]	; (8006ec0 <HAL_RCC_OscConfig+0x2b4>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e32:	f7fb fab1 	bl	8002398 <HAL_GetTick>
 8006e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e38:	e008      	b.n	8006e4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006e3a:	f7fb faad 	bl	8002398 <HAL_GetTick>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e144      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1f0      	bne.n	8006e3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80a0 	beq.w	8006fa6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e66:	2300      	movs	r3, #0
 8006e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e6a:	4b13      	ldr	r3, [pc, #76]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10f      	bne.n	8006e96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e76:	2300      	movs	r3, #0
 8006e78:	60bb      	str	r3, [r7, #8]
 8006e7a:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	4a0e      	ldr	r2, [pc, #56]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e84:	6413      	str	r3, [r2, #64]	; 0x40
 8006e86:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <HAL_RCC_OscConfig+0x2ac>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	60bb      	str	r3, [r7, #8]
 8006e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e96:	4b0b      	ldr	r3, [pc, #44]	; (8006ec4 <HAL_RCC_OscConfig+0x2b8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d121      	bne.n	8006ee6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ea2:	4b08      	ldr	r3, [pc, #32]	; (8006ec4 <HAL_RCC_OscConfig+0x2b8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a07      	ldr	r2, [pc, #28]	; (8006ec4 <HAL_RCC_OscConfig+0x2b8>)
 8006ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006eae:	f7fb fa73 	bl	8002398 <HAL_GetTick>
 8006eb2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eb4:	e011      	b.n	8006eda <HAL_RCC_OscConfig+0x2ce>
 8006eb6:	bf00      	nop
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	42470000 	.word	0x42470000
 8006ec0:	42470e80 	.word	0x42470e80
 8006ec4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ec8:	f7fb fa66 	bl	8002398 <HAL_GetTick>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	1ad3      	subs	r3, r2, r3
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e0fd      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006eda:	4b81      	ldr	r3, [pc, #516]	; (80070e0 <HAL_RCC_OscConfig+0x4d4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d0f0      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d106      	bne.n	8006efc <HAL_RCC_OscConfig+0x2f0>
 8006eee:	4b7d      	ldr	r3, [pc, #500]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	4a7c      	ldr	r2, [pc, #496]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006ef4:	f043 0301 	orr.w	r3, r3, #1
 8006ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8006efa:	e01c      	b.n	8006f36 <HAL_RCC_OscConfig+0x32a>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	2b05      	cmp	r3, #5
 8006f02:	d10c      	bne.n	8006f1e <HAL_RCC_OscConfig+0x312>
 8006f04:	4b77      	ldr	r3, [pc, #476]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4a76      	ldr	r2, [pc, #472]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f0a:	f043 0304 	orr.w	r3, r3, #4
 8006f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006f10:	4b74      	ldr	r3, [pc, #464]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f14:	4a73      	ldr	r2, [pc, #460]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8006f1c:	e00b      	b.n	8006f36 <HAL_RCC_OscConfig+0x32a>
 8006f1e:	4b71      	ldr	r3, [pc, #452]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f22:	4a70      	ldr	r2, [pc, #448]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f24:	f023 0301 	bic.w	r3, r3, #1
 8006f28:	6713      	str	r3, [r2, #112]	; 0x70
 8006f2a:	4b6e      	ldr	r3, [pc, #440]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f2e:	4a6d      	ldr	r2, [pc, #436]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f30:	f023 0304 	bic.w	r3, r3, #4
 8006f34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d015      	beq.n	8006f6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f3e:	f7fb fa2b 	bl	8002398 <HAL_GetTick>
 8006f42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f44:	e00a      	b.n	8006f5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f46:	f7fb fa27 	bl	8002398 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d901      	bls.n	8006f5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e0bc      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f5c:	4b61      	ldr	r3, [pc, #388]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d0ee      	beq.n	8006f46 <HAL_RCC_OscConfig+0x33a>
 8006f68:	e014      	b.n	8006f94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f6a:	f7fb fa15 	bl	8002398 <HAL_GetTick>
 8006f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f70:	e00a      	b.n	8006f88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f72:	f7fb fa11 	bl	8002398 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d901      	bls.n	8006f88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006f84:	2303      	movs	r3, #3
 8006f86:	e0a6      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f88:	4b56      	ldr	r3, [pc, #344]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f8c:	f003 0302 	and.w	r3, r3, #2
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1ee      	bne.n	8006f72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d105      	bne.n	8006fa6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f9a:	4b52      	ldr	r3, [pc, #328]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	4a51      	ldr	r2, [pc, #324]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fa4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 8092 	beq.w	80070d4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006fb0:	4b4c      	ldr	r3, [pc, #304]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f003 030c 	and.w	r3, r3, #12
 8006fb8:	2b08      	cmp	r3, #8
 8006fba:	d05c      	beq.n	8007076 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	699b      	ldr	r3, [r3, #24]
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d141      	bne.n	8007048 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fc4:	4b48      	ldr	r3, [pc, #288]	; (80070e8 <HAL_RCC_OscConfig+0x4dc>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fca:	f7fb f9e5 	bl	8002398 <HAL_GetTick>
 8006fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fd0:	e008      	b.n	8006fe4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006fd2:	f7fb f9e1 	bl	8002398 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d901      	bls.n	8006fe4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e078      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe4:	4b3f      	ldr	r3, [pc, #252]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1f0      	bne.n	8006fd2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	69da      	ldr	r2, [r3, #28]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	019b      	lsls	r3, r3, #6
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	085b      	lsrs	r3, r3, #1
 8007008:	3b01      	subs	r3, #1
 800700a:	041b      	lsls	r3, r3, #16
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	061b      	lsls	r3, r3, #24
 8007014:	4933      	ldr	r1, [pc, #204]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8007016:	4313      	orrs	r3, r2
 8007018:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800701a:	4b33      	ldr	r3, [pc, #204]	; (80070e8 <HAL_RCC_OscConfig+0x4dc>)
 800701c:	2201      	movs	r2, #1
 800701e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007020:	f7fb f9ba 	bl	8002398 <HAL_GetTick>
 8007024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007026:	e008      	b.n	800703a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007028:	f7fb f9b6 	bl	8002398 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	2b02      	cmp	r3, #2
 8007034:	d901      	bls.n	800703a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007036:	2303      	movs	r3, #3
 8007038:	e04d      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800703a:	4b2a      	ldr	r3, [pc, #168]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d0f0      	beq.n	8007028 <HAL_RCC_OscConfig+0x41c>
 8007046:	e045      	b.n	80070d4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007048:	4b27      	ldr	r3, [pc, #156]	; (80070e8 <HAL_RCC_OscConfig+0x4dc>)
 800704a:	2200      	movs	r2, #0
 800704c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800704e:	f7fb f9a3 	bl	8002398 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007054:	e008      	b.n	8007068 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007056:	f7fb f99f 	bl	8002398 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	2b02      	cmp	r3, #2
 8007062:	d901      	bls.n	8007068 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e036      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007068:	4b1e      	ldr	r3, [pc, #120]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1f0      	bne.n	8007056 <HAL_RCC_OscConfig+0x44a>
 8007074:	e02e      	b.n	80070d4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d101      	bne.n	8007082 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e029      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007082:	4b18      	ldr	r3, [pc, #96]	; (80070e4 <HAL_RCC_OscConfig+0x4d8>)
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	429a      	cmp	r2, r3
 8007094:	d11c      	bne.n	80070d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d115      	bne.n	80070d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80070aa:	4013      	ands	r3, r2
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d10d      	bne.n	80070d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80070be:	429a      	cmp	r2, r3
 80070c0:	d106      	bne.n	80070d0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d001      	beq.n	80070d4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	40007000 	.word	0x40007000
 80070e4:	40023800 	.word	0x40023800
 80070e8:	42470060 	.word	0x42470060

080070ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d101      	bne.n	8007100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e0cc      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007100:	4b68      	ldr	r3, [pc, #416]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	429a      	cmp	r2, r3
 800710c:	d90c      	bls.n	8007128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710e:	4b65      	ldr	r3, [pc, #404]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007116:	4b63      	ldr	r3, [pc, #396]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 030f 	and.w	r3, r3, #15
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d001      	beq.n	8007128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0b8      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0302 	and.w	r3, r3, #2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d020      	beq.n	8007176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007140:	4b59      	ldr	r3, [pc, #356]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	4a58      	ldr	r2, [pc, #352]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800714a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0308 	and.w	r3, r3, #8
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007158:	4b53      	ldr	r3, [pc, #332]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	4a52      	ldr	r2, [pc, #328]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800715e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007164:	4b50      	ldr	r3, [pc, #320]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	494d      	ldr	r1, [pc, #308]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007172:	4313      	orrs	r3, r2
 8007174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d044      	beq.n	800720c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	2b01      	cmp	r3, #1
 8007188:	d107      	bne.n	800719a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800718a:	4b47      	ldr	r3, [pc, #284]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d119      	bne.n	80071ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e07f      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d003      	beq.n	80071aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d107      	bne.n	80071ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80071aa:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e06f      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ba:	4b3b      	ldr	r3, [pc, #236]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d101      	bne.n	80071ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e067      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80071ca:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f023 0203 	bic.w	r2, r3, #3
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	4934      	ldr	r1, [pc, #208]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80071dc:	f7fb f8dc 	bl	8002398 <HAL_GetTick>
 80071e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e2:	e00a      	b.n	80071fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071e4:	f7fb f8d8 	bl	8002398 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e04f      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071fa:	4b2b      	ldr	r3, [pc, #172]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	f003 020c 	and.w	r2, r3, #12
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	429a      	cmp	r2, r3
 800720a:	d1eb      	bne.n	80071e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800720c:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 030f 	and.w	r3, r3, #15
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	429a      	cmp	r2, r3
 8007218:	d20c      	bcs.n	8007234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800721a:	4b22      	ldr	r3, [pc, #136]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	b2d2      	uxtb	r2, r2
 8007220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007222:	4b20      	ldr	r3, [pc, #128]	; (80072a4 <HAL_RCC_ClockConfig+0x1b8>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	429a      	cmp	r2, r3
 800722e:	d001      	beq.n	8007234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	e032      	b.n	800729a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d008      	beq.n	8007252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007240:	4b19      	ldr	r3, [pc, #100]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4916      	ldr	r1, [pc, #88]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800724e:	4313      	orrs	r3, r2
 8007250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800725e:	4b12      	ldr	r3, [pc, #72]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	691b      	ldr	r3, [r3, #16]
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	490e      	ldr	r1, [pc, #56]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	4313      	orrs	r3, r2
 8007270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007272:	f000 f821 	bl	80072b8 <HAL_RCC_GetSysClockFreq>
 8007276:	4601      	mov	r1, r0
 8007278:	4b0b      	ldr	r3, [pc, #44]	; (80072a8 <HAL_RCC_ClockConfig+0x1bc>)
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	091b      	lsrs	r3, r3, #4
 800727e:	f003 030f 	and.w	r3, r3, #15
 8007282:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <HAL_RCC_ClockConfig+0x1c0>)
 8007284:	5cd3      	ldrb	r3, [r2, r3]
 8007286:	fa21 f303 	lsr.w	r3, r1, r3
 800728a:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <HAL_RCC_ClockConfig+0x1c4>)
 800728c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800728e:	4b09      	ldr	r3, [pc, #36]	; (80072b4 <HAL_RCC_ClockConfig+0x1c8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4618      	mov	r0, r3
 8007294:	f7fb f83c 	bl	8002310 <HAL_InitTick>

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3710      	adds	r7, #16
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	40023c00 	.word	0x40023c00
 80072a8:	40023800 	.word	0x40023800
 80072ac:	0800fb9c 	.word	0x0800fb9c
 80072b0:	20000014 	.word	0x20000014
 80072b4:	20000018 	.word	0x20000018

080072b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	2300      	movs	r3, #0
 80072c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072ce:	4b63      	ldr	r3, [pc, #396]	; (800745c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f003 030c 	and.w	r3, r3, #12
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d007      	beq.n	80072ea <HAL_RCC_GetSysClockFreq+0x32>
 80072da:	2b08      	cmp	r3, #8
 80072dc:	d008      	beq.n	80072f0 <HAL_RCC_GetSysClockFreq+0x38>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f040 80b4 	bne.w	800744c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80072e4:	4b5e      	ldr	r3, [pc, #376]	; (8007460 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80072e6:	60bb      	str	r3, [r7, #8]
       break;
 80072e8:	e0b3      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80072ea:	4b5e      	ldr	r3, [pc, #376]	; (8007464 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80072ec:	60bb      	str	r3, [r7, #8]
      break;
 80072ee:	e0b0      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80072f0:	4b5a      	ldr	r3, [pc, #360]	; (800745c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072fa:	4b58      	ldr	r3, [pc, #352]	; (800745c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007302:	2b00      	cmp	r3, #0
 8007304:	d04a      	beq.n	800739c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007306:	4b55      	ldr	r3, [pc, #340]	; (800745c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	099b      	lsrs	r3, r3, #6
 800730c:	f04f 0400 	mov.w	r4, #0
 8007310:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	ea03 0501 	and.w	r5, r3, r1
 800731c:	ea04 0602 	and.w	r6, r4, r2
 8007320:	4629      	mov	r1, r5
 8007322:	4632      	mov	r2, r6
 8007324:	f04f 0300 	mov.w	r3, #0
 8007328:	f04f 0400 	mov.w	r4, #0
 800732c:	0154      	lsls	r4, r2, #5
 800732e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007332:	014b      	lsls	r3, r1, #5
 8007334:	4619      	mov	r1, r3
 8007336:	4622      	mov	r2, r4
 8007338:	1b49      	subs	r1, r1, r5
 800733a:	eb62 0206 	sbc.w	r2, r2, r6
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	f04f 0400 	mov.w	r4, #0
 8007346:	0194      	lsls	r4, r2, #6
 8007348:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800734c:	018b      	lsls	r3, r1, #6
 800734e:	1a5b      	subs	r3, r3, r1
 8007350:	eb64 0402 	sbc.w	r4, r4, r2
 8007354:	f04f 0100 	mov.w	r1, #0
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	00e2      	lsls	r2, r4, #3
 800735e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007362:	00d9      	lsls	r1, r3, #3
 8007364:	460b      	mov	r3, r1
 8007366:	4614      	mov	r4, r2
 8007368:	195b      	adds	r3, r3, r5
 800736a:	eb44 0406 	adc.w	r4, r4, r6
 800736e:	f04f 0100 	mov.w	r1, #0
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	0262      	lsls	r2, r4, #9
 8007378:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800737c:	0259      	lsls	r1, r3, #9
 800737e:	460b      	mov	r3, r1
 8007380:	4614      	mov	r4, r2
 8007382:	4618      	mov	r0, r3
 8007384:	4621      	mov	r1, r4
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f04f 0400 	mov.w	r4, #0
 800738c:	461a      	mov	r2, r3
 800738e:	4623      	mov	r3, r4
 8007390:	f7f8 ff7e 	bl	8000290 <__aeabi_uldivmod>
 8007394:	4603      	mov	r3, r0
 8007396:	460c      	mov	r4, r1
 8007398:	60fb      	str	r3, [r7, #12]
 800739a:	e049      	b.n	8007430 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800739c:	4b2f      	ldr	r3, [pc, #188]	; (800745c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	099b      	lsrs	r3, r3, #6
 80073a2:	f04f 0400 	mov.w	r4, #0
 80073a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	ea03 0501 	and.w	r5, r3, r1
 80073b2:	ea04 0602 	and.w	r6, r4, r2
 80073b6:	4629      	mov	r1, r5
 80073b8:	4632      	mov	r2, r6
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	f04f 0400 	mov.w	r4, #0
 80073c2:	0154      	lsls	r4, r2, #5
 80073c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80073c8:	014b      	lsls	r3, r1, #5
 80073ca:	4619      	mov	r1, r3
 80073cc:	4622      	mov	r2, r4
 80073ce:	1b49      	subs	r1, r1, r5
 80073d0:	eb62 0206 	sbc.w	r2, r2, r6
 80073d4:	f04f 0300 	mov.w	r3, #0
 80073d8:	f04f 0400 	mov.w	r4, #0
 80073dc:	0194      	lsls	r4, r2, #6
 80073de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80073e2:	018b      	lsls	r3, r1, #6
 80073e4:	1a5b      	subs	r3, r3, r1
 80073e6:	eb64 0402 	sbc.w	r4, r4, r2
 80073ea:	f04f 0100 	mov.w	r1, #0
 80073ee:	f04f 0200 	mov.w	r2, #0
 80073f2:	00e2      	lsls	r2, r4, #3
 80073f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80073f8:	00d9      	lsls	r1, r3, #3
 80073fa:	460b      	mov	r3, r1
 80073fc:	4614      	mov	r4, r2
 80073fe:	195b      	adds	r3, r3, r5
 8007400:	eb44 0406 	adc.w	r4, r4, r6
 8007404:	f04f 0100 	mov.w	r1, #0
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	02a2      	lsls	r2, r4, #10
 800740e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007412:	0299      	lsls	r1, r3, #10
 8007414:	460b      	mov	r3, r1
 8007416:	4614      	mov	r4, r2
 8007418:	4618      	mov	r0, r3
 800741a:	4621      	mov	r1, r4
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f04f 0400 	mov.w	r4, #0
 8007422:	461a      	mov	r2, r3
 8007424:	4623      	mov	r3, r4
 8007426:	f7f8 ff33 	bl	8000290 <__aeabi_uldivmod>
 800742a:	4603      	mov	r3, r0
 800742c:	460c      	mov	r4, r1
 800742e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007430:	4b0a      	ldr	r3, [pc, #40]	; (800745c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	0c1b      	lsrs	r3, r3, #16
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	3301      	adds	r3, #1
 800743c:	005b      	lsls	r3, r3, #1
 800743e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	fbb2 f3f3 	udiv	r3, r2, r3
 8007448:	60bb      	str	r3, [r7, #8]
      break;
 800744a:	e002      	b.n	8007452 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800744c:	4b04      	ldr	r3, [pc, #16]	; (8007460 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800744e:	60bb      	str	r3, [r7, #8]
      break;
 8007450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007452:	68bb      	ldr	r3, [r7, #8]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800745c:	40023800 	.word	0x40023800
 8007460:	00f42400 	.word	0x00f42400
 8007464:	007a1200 	.word	0x007a1200

08007468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800746c:	4b03      	ldr	r3, [pc, #12]	; (800747c <HAL_RCC_GetHCLKFreq+0x14>)
 800746e:	681b      	ldr	r3, [r3, #0]
}
 8007470:	4618      	mov	r0, r3
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	20000014 	.word	0x20000014

08007480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007484:	f7ff fff0 	bl	8007468 <HAL_RCC_GetHCLKFreq>
 8007488:	4601      	mov	r1, r0
 800748a:	4b05      	ldr	r3, [pc, #20]	; (80074a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	0a9b      	lsrs	r3, r3, #10
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	4a03      	ldr	r2, [pc, #12]	; (80074a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007496:	5cd3      	ldrb	r3, [r2, r3]
 8007498:	fa21 f303 	lsr.w	r3, r1, r3
}
 800749c:	4618      	mov	r0, r3
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	0800fbac 	.word	0x0800fbac

080074a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b086      	sub	sp, #24
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d105      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d038      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80074d0:	4b68      	ldr	r3, [pc, #416]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074d6:	f7fa ff5f 	bl	8002398 <HAL_GetTick>
 80074da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074dc:	e008      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074de:	f7fa ff5b 	bl	8002398 <HAL_GetTick>
 80074e2:	4602      	mov	r2, r0
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	1ad3      	subs	r3, r2, r3
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d901      	bls.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e0bd      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80074f0:	4b61      	ldr	r3, [pc, #388]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1f0      	bne.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	019b      	lsls	r3, r3, #6
 8007506:	431a      	orrs	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	071b      	lsls	r3, r3, #28
 800750e:	495a      	ldr	r1, [pc, #360]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007516:	4b57      	ldr	r3, [pc, #348]	; (8007674 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007518:	2201      	movs	r2, #1
 800751a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800751c:	f7fa ff3c 	bl	8002398 <HAL_GetTick>
 8007520:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007522:	e008      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007524:	f7fa ff38 	bl	8002398 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d901      	bls.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e09a      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007536:	4b50      	ldr	r3, [pc, #320]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800753e:	2b00      	cmp	r3, #0
 8007540:	d0f0      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8083 	beq.w	8007656 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	4b48      	ldr	r3, [pc, #288]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	4a47      	ldr	r2, [pc, #284]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800755a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800755e:	6413      	str	r3, [r2, #64]	; 0x40
 8007560:	4b45      	ldr	r3, [pc, #276]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800756c:	4b43      	ldr	r3, [pc, #268]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a42      	ldr	r2, [pc, #264]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007576:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007578:	f7fa ff0e 	bl	8002398 <HAL_GetTick>
 800757c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800757e:	e008      	b.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007580:	f7fa ff0a 	bl	8002398 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	2b02      	cmp	r3, #2
 800758c:	d901      	bls.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800758e:	2303      	movs	r3, #3
 8007590:	e06c      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007592:	4b3a      	ldr	r3, [pc, #232]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0f0      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800759e:	4b36      	ldr	r3, [pc, #216]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075a6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d02f      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d028      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80075bc:	4b2e      	ldr	r3, [pc, #184]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075c4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075c6:	4b2e      	ldr	r3, [pc, #184]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075cc:	4b2c      	ldr	r3, [pc, #176]	; (8007680 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80075d2:	4a29      	ldr	r2, [pc, #164]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80075d8:	4b27      	ldr	r3, [pc, #156]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b01      	cmp	r3, #1
 80075e2:	d114      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80075e4:	f7fa fed8 	bl	8002398 <HAL_GetTick>
 80075e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075ea:	e00a      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ec:	f7fa fed4 	bl	8002398 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d901      	bls.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80075fe:	2303      	movs	r3, #3
 8007600:	e034      	b.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007602:	4b1d      	ldr	r3, [pc, #116]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b00      	cmp	r3, #0
 800760c:	d0ee      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800761a:	d10d      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800761c:	4b16      	ldr	r3, [pc, #88]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800762c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007630:	4911      	ldr	r1, [pc, #68]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007632:	4313      	orrs	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
 8007636:	e005      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007638:	4b0f      	ldr	r3, [pc, #60]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	4a0e      	ldr	r2, [pc, #56]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800763e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007642:	6093      	str	r3, [r2, #8]
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007646:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007650:	4909      	ldr	r1, [pc, #36]	; (8007678 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007652:	4313      	orrs	r3, r2
 8007654:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	7d1a      	ldrb	r2, [r3, #20]
 8007666:	4b07      	ldr	r3, [pc, #28]	; (8007684 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007668:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	42470068 	.word	0x42470068
 8007678:	40023800 	.word	0x40023800
 800767c:	40007000 	.word	0x40007000
 8007680:	42470e40 	.word	0x42470e40
 8007684:	424711e0 	.word	0x424711e0

08007688 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2203      	movs	r2, #3
 8007694:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8007696:	4b1c      	ldr	r3, [pc, #112]	; (8007708 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8007698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800769c:	099b      	lsrs	r3, r3, #6
 800769e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80076a6:	4b18      	ldr	r3, [pc, #96]	; (8007708 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076ac:	0f1b      	lsrs	r3, r3, #28
 80076ae:	f003 0207 	and.w	r2, r3, #7
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80076c4:	4b10      	ldr	r3, [pc, #64]	; (8007708 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80076cc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 80076ce:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076d2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80076de:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80076e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d103      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80076f2:	e002      	b.n	80076fa <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	751a      	strb	r2, [r3, #20]
}
 80076fa:	bf00      	nop
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	40023800 	.word	0x40023800

0800770c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d13f      	bne.n	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800772a:	4b23      	ldr	r3, [pc, #140]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007732:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d004      	beq.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800773a:	2b01      	cmp	r3, #1
 800773c:	d131      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800773e:	4b1f      	ldr	r3, [pc, #124]	; (80077bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007740:	617b      	str	r3, [r7, #20]
          break;
 8007742:	e031      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007744:	4b1c      	ldr	r3, [pc, #112]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800774c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007750:	d109      	bne.n	8007766 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007752:	4b19      	ldr	r3, [pc, #100]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007758:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800775c:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	613b      	str	r3, [r7, #16]
 8007764:	e008      	b.n	8007778 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8007768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800776c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007772:	fbb2 f3f3 	udiv	r3, r2, r3
 8007776:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007778:	4b0f      	ldr	r3, [pc, #60]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800777a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800778e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007792:	0f1b      	lsrs	r3, r3, #28
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	617b      	str	r3, [r7, #20]
          break;
 80077a0:	e002      	b.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]
          break;
 80077a6:	bf00      	nop
        }
      }
      break;
 80077a8:	bf00      	nop
    }
  }
  return frequency;
 80077aa:	697b      	ldr	r3, [r7, #20]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	371c      	adds	r7, #28
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40023800 	.word	0x40023800
 80077bc:	00bb8000 	.word	0x00bb8000
 80077c0:	007a1200 	.word	0x007a1200
 80077c4:	00f42400 	.word	0x00f42400

080077c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d101      	bne.n	80077da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	e01d      	b.n	8007816 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d106      	bne.n	80077f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fa fada 	bl	8001da8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f000 fb64 	bl	8007ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68da      	ldr	r2, [r3, #12]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0307 	and.w	r3, r3, #7
 8007840:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2b06      	cmp	r3, #6
 8007846:	d007      	beq.n	8007858 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0201 	orr.w	r2, r2, #1
 8007856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68da      	ldr	r2, [r3, #12]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f022 0201 	bic.w	r2, r2, #1
 800787c:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a1a      	ldr	r2, [r3, #32]
 8007884:	f241 1311 	movw	r3, #4369	; 0x1111
 8007888:	4013      	ands	r3, r2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10f      	bne.n	80078ae <HAL_TIM_Base_Stop_IT+0x48>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	6a1a      	ldr	r2, [r3, #32]
 8007894:	f240 4344 	movw	r3, #1092	; 0x444
 8007898:	4013      	ands	r3, r2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <HAL_TIM_Base_Stop_IT+0x48>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0201 	bic.w	r2, r2, #1
 80078ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e01d      	b.n	800790a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d106      	bne.n	80078e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fa faa6 	bl	8001e34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	3304      	adds	r3, #4
 80078f8:	4619      	mov	r1, r3
 80078fa:	4610      	mov	r0, r2
 80078fc:	f000 faea 	bl	8007ed4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
	...

08007914 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2201      	movs	r2, #1
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fd7a 	bl	8008420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a10      	ldr	r2, [pc, #64]	; (8007974 <HAL_TIM_PWM_Start+0x60>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d107      	bne.n	8007946 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007944:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b06      	cmp	r3, #6
 8007956:	d007      	beq.n	8007968 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40010000 	.word	0x40010000

08007978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	691b      	ldr	r3, [r3, #16]
 8007986:	f003 0302 	and.w	r3, r3, #2
 800798a:	2b02      	cmp	r3, #2
 800798c:	d122      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0302 	and.w	r3, r3, #2
 8007998:	2b02      	cmp	r3, #2
 800799a:	d11b      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f06f 0202 	mvn.w	r2, #2
 80079a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fa6b 	bl	8007e96 <HAL_TIM_IC_CaptureCallback>
 80079c0:	e005      	b.n	80079ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa5d 	bl	8007e82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fa6e 	bl	8007eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0304 	and.w	r3, r3, #4
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d122      	bne.n	8007a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b04      	cmp	r3, #4
 80079ee:	d11b      	bne.n	8007a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0204 	mvn.w	r2, #4
 80079f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2202      	movs	r2, #2
 80079fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699b      	ldr	r3, [r3, #24]
 8007a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fa41 	bl	8007e96 <HAL_TIM_IC_CaptureCallback>
 8007a14:	e005      	b.n	8007a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 fa33 	bl	8007e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fa44 	bl	8007eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b08      	cmp	r3, #8
 8007a34:	d122      	bne.n	8007a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f003 0308 	and.w	r3, r3, #8
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d11b      	bne.n	8007a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0208 	mvn.w	r2, #8
 8007a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2204      	movs	r2, #4
 8007a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa17 	bl	8007e96 <HAL_TIM_IC_CaptureCallback>
 8007a68:	e005      	b.n	8007a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa09 	bl	8007e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fa1a 	bl	8007eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d122      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d11b      	bne.n	8007ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f06f 0210 	mvn.w	r2, #16
 8007aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f9ed 	bl	8007e96 <HAL_TIM_IC_CaptureCallback>
 8007abc:	e005      	b.n	8007aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f9df 	bl	8007e82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f000 f9f0 	bl	8007eaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2200      	movs	r2, #0
 8007ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d10e      	bne.n	8007afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	f003 0301 	and.w	r3, r3, #1
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d107      	bne.n	8007afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f06f 0201 	mvn.w	r2, #1
 8007af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7f9 f9e2 	bl	8000ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b06:	2b80      	cmp	r3, #128	; 0x80
 8007b08:	d10e      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b14:	2b80      	cmp	r3, #128	; 0x80
 8007b16:	d107      	bne.n	8007b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f000 fd1a 	bl	800855c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d10e      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	68db      	ldr	r3, [r3, #12]
 8007b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b40:	2b40      	cmp	r3, #64	; 0x40
 8007b42:	d107      	bne.n	8007b54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f9b5 	bl	8007ebe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0320 	and.w	r3, r3, #32
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	d10e      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0320 	and.w	r3, r3, #32
 8007b6c:	2b20      	cmp	r3, #32
 8007b6e:	d107      	bne.n	8007b80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f06f 0220 	mvn.w	r2, #32
 8007b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 fce4 	bl	8008548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b80:	bf00      	nop
 8007b82:	3708      	adds	r7, #8
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d101      	bne.n	8007ba2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	e0b4      	b.n	8007d0c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2202      	movs	r2, #2
 8007bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b0c      	cmp	r3, #12
 8007bb6:	f200 809f 	bhi.w	8007cf8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007bba:	a201      	add	r2, pc, #4	; (adr r2, 8007bc0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc0:	08007bf5 	.word	0x08007bf5
 8007bc4:	08007cf9 	.word	0x08007cf9
 8007bc8:	08007cf9 	.word	0x08007cf9
 8007bcc:	08007cf9 	.word	0x08007cf9
 8007bd0:	08007c35 	.word	0x08007c35
 8007bd4:	08007cf9 	.word	0x08007cf9
 8007bd8:	08007cf9 	.word	0x08007cf9
 8007bdc:	08007cf9 	.word	0x08007cf9
 8007be0:	08007c77 	.word	0x08007c77
 8007be4:	08007cf9 	.word	0x08007cf9
 8007be8:	08007cf9 	.word	0x08007cf9
 8007bec:	08007cf9 	.word	0x08007cf9
 8007bf0:	08007cb7 	.word	0x08007cb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 f9ea 	bl	8007fd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	699a      	ldr	r2, [r3, #24]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0208 	orr.w	r2, r2, #8
 8007c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	699a      	ldr	r2, [r3, #24]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f022 0204 	bic.w	r2, r2, #4
 8007c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	6999      	ldr	r1, [r3, #24]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	619a      	str	r2, [r3, #24]
      break;
 8007c32:	e062      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68b9      	ldr	r1, [r7, #8]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fa30 	bl	80080a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	699a      	ldr	r2, [r3, #24]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	699a      	ldr	r2, [r3, #24]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	6999      	ldr	r1, [r3, #24]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	691b      	ldr	r3, [r3, #16]
 8007c6a:	021a      	lsls	r2, r3, #8
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	619a      	str	r2, [r3, #24]
      break;
 8007c74:	e041      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 fa7b 	bl	8008178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69da      	ldr	r2, [r3, #28]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f042 0208 	orr.w	r2, r2, #8
 8007c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69da      	ldr	r2, [r3, #28]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 0204 	bic.w	r2, r2, #4
 8007ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69d9      	ldr	r1, [r3, #28]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	691a      	ldr	r2, [r3, #16]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	61da      	str	r2, [r3, #28]
      break;
 8007cb4:	e021      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f000 fac5 	bl	800824c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69da      	ldr	r2, [r3, #28]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	69da      	ldr	r2, [r3, #28]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	69d9      	ldr	r1, [r3, #28]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	021a      	lsls	r2, r3, #8
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	61da      	str	r2, [r3, #28]
      break;
 8007cf6:	e000      	b.n	8007cfa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007cf8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}

08007d14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIM_ConfigClockSource+0x18>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e0a6      	b.n	8007e7a <HAL_TIM_ConfigClockSource+0x166>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b40      	cmp	r3, #64	; 0x40
 8007d62:	d067      	beq.n	8007e34 <HAL_TIM_ConfigClockSource+0x120>
 8007d64:	2b40      	cmp	r3, #64	; 0x40
 8007d66:	d80b      	bhi.n	8007d80 <HAL_TIM_ConfigClockSource+0x6c>
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	d073      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0x140>
 8007d6c:	2b10      	cmp	r3, #16
 8007d6e:	d802      	bhi.n	8007d76 <HAL_TIM_ConfigClockSource+0x62>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d06f      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007d74:	e078      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d76:	2b20      	cmp	r3, #32
 8007d78:	d06c      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0x140>
 8007d7a:	2b30      	cmp	r3, #48	; 0x30
 8007d7c:	d06a      	beq.n	8007e54 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007d7e:	e073      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d80:	2b70      	cmp	r3, #112	; 0x70
 8007d82:	d00d      	beq.n	8007da0 <HAL_TIM_ConfigClockSource+0x8c>
 8007d84:	2b70      	cmp	r3, #112	; 0x70
 8007d86:	d804      	bhi.n	8007d92 <HAL_TIM_ConfigClockSource+0x7e>
 8007d88:	2b50      	cmp	r3, #80	; 0x50
 8007d8a:	d033      	beq.n	8007df4 <HAL_TIM_ConfigClockSource+0xe0>
 8007d8c:	2b60      	cmp	r3, #96	; 0x60
 8007d8e:	d041      	beq.n	8007e14 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007d90:	e06a      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d96:	d066      	beq.n	8007e66 <HAL_TIM_ConfigClockSource+0x152>
 8007d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d9c:	d017      	beq.n	8007dce <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007d9e:	e063      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6818      	ldr	r0, [r3, #0]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	6899      	ldr	r1, [r3, #8]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	685a      	ldr	r2, [r3, #4]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	f000 fb16 	bl	80083e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007dc2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	609a      	str	r2, [r3, #8]
      break;
 8007dcc:	e04c      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	6899      	ldr	r1, [r3, #8]
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	685a      	ldr	r2, [r3, #4]
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f000 faff 	bl	80083e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007df0:	609a      	str	r2, [r3, #8]
      break;
 8007df2:	e039      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6859      	ldr	r1, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f000 fa73 	bl	80082ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2150      	movs	r1, #80	; 0x50
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f000 facc 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007e12:	e029      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	6859      	ldr	r1, [r3, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	461a      	mov	r2, r3
 8007e22:	f000 fa92 	bl	800834a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2160      	movs	r1, #96	; 0x60
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fabc 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007e32:	e019      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6818      	ldr	r0, [r3, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	6859      	ldr	r1, [r3, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	461a      	mov	r2, r3
 8007e42:	f000 fa53 	bl	80082ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2140      	movs	r1, #64	; 0x40
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f000 faac 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007e52:	e009      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4619      	mov	r1, r3
 8007e5e:	4610      	mov	r0, r2
 8007e60:	f000 faa3 	bl	80083aa <TIM_ITRx_SetConfig>
      break;
 8007e64:	e000      	b.n	8007e68 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007e66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b083      	sub	sp, #12
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e9e:	bf00      	nop
 8007ea0:	370c      	adds	r7, #12
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr
	...

08007ed4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a34      	ldr	r2, [pc, #208]	; (8007fb8 <TIM_Base_SetConfig+0xe4>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00f      	beq.n	8007f0c <TIM_Base_SetConfig+0x38>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ef2:	d00b      	beq.n	8007f0c <TIM_Base_SetConfig+0x38>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a31      	ldr	r2, [pc, #196]	; (8007fbc <TIM_Base_SetConfig+0xe8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d007      	beq.n	8007f0c <TIM_Base_SetConfig+0x38>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a30      	ldr	r2, [pc, #192]	; (8007fc0 <TIM_Base_SetConfig+0xec>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d003      	beq.n	8007f0c <TIM_Base_SetConfig+0x38>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a2f      	ldr	r2, [pc, #188]	; (8007fc4 <TIM_Base_SetConfig+0xf0>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d108      	bne.n	8007f1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a25      	ldr	r2, [pc, #148]	; (8007fb8 <TIM_Base_SetConfig+0xe4>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d01b      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f2c:	d017      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a22      	ldr	r2, [pc, #136]	; (8007fbc <TIM_Base_SetConfig+0xe8>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d013      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a21      	ldr	r2, [pc, #132]	; (8007fc0 <TIM_Base_SetConfig+0xec>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00f      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <TIM_Base_SetConfig+0xf0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00b      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1f      	ldr	r2, [pc, #124]	; (8007fc8 <TIM_Base_SetConfig+0xf4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d007      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1e      	ldr	r2, [pc, #120]	; (8007fcc <TIM_Base_SetConfig+0xf8>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d003      	beq.n	8007f5e <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1d      	ldr	r2, [pc, #116]	; (8007fd0 <TIM_Base_SetConfig+0xfc>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d108      	bne.n	8007f70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <TIM_Base_SetConfig+0xe4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d103      	bne.n	8007fa4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	691a      	ldr	r2, [r3, #16]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	615a      	str	r2, [r3, #20]
}
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	40010000 	.word	0x40010000
 8007fbc:	40000400 	.word	0x40000400
 8007fc0:	40000800 	.word	0x40000800
 8007fc4:	40000c00 	.word	0x40000c00
 8007fc8:	40014000 	.word	0x40014000
 8007fcc:	40014400 	.word	0x40014400
 8007fd0:	40014800 	.word	0x40014800

08007fd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f023 0201 	bic.w	r2, r3, #1
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4313      	orrs	r3, r2
 8008014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	f023 0302 	bic.w	r3, r3, #2
 800801c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	4313      	orrs	r3, r2
 8008026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a1c      	ldr	r2, [pc, #112]	; (800809c <TIM_OC1_SetConfig+0xc8>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10c      	bne.n	800804a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0308 	bic.w	r3, r3, #8
 8008036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	4313      	orrs	r3, r2
 8008040:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 0304 	bic.w	r3, r3, #4
 8008048:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	4a13      	ldr	r2, [pc, #76]	; (800809c <TIM_OC1_SetConfig+0xc8>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d111      	bne.n	8008076 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008058:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008060:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	4313      	orrs	r3, r2
 8008074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685a      	ldr	r2, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	621a      	str	r2, [r3, #32]
}
 8008090:	bf00      	nop
 8008092:	371c      	adds	r7, #28
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	40010000 	.word	0x40010000

080080a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b087      	sub	sp, #28
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a1b      	ldr	r3, [r3, #32]
 80080ae:	f023 0210 	bic.w	r2, r3, #16
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a1b      	ldr	r3, [r3, #32]
 80080ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	f023 0320 	bic.w	r3, r3, #32
 80080ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1e      	ldr	r2, [pc, #120]	; (8008174 <TIM_OC2_SetConfig+0xd4>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d10d      	bne.n	800811c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008106:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800811a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a15      	ldr	r2, [pc, #84]	; (8008174 <TIM_OC2_SetConfig+0xd4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d113      	bne.n	800814c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800812a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008132:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	695b      	ldr	r3, [r3, #20]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	009b      	lsls	r3, r3, #2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	4313      	orrs	r3, r2
 800814a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	621a      	str	r2, [r3, #32]
}
 8008166:	bf00      	nop
 8008168:	371c      	adds	r7, #28
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr
 8008172:	bf00      	nop
 8008174:	40010000 	.word	0x40010000

08008178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f023 0303 	bic.w	r3, r3, #3
 80081ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	021b      	lsls	r3, r3, #8
 80081c8:	697a      	ldr	r2, [r7, #20]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a1d      	ldr	r2, [pc, #116]	; (8008248 <TIM_OC3_SetConfig+0xd0>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d10d      	bne.n	80081f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	021b      	lsls	r3, r3, #8
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a14      	ldr	r2, [pc, #80]	; (8008248 <TIM_OC3_SetConfig+0xd0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d113      	bne.n	8008222 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	695b      	ldr	r3, [r3, #20]
 800820e:	011b      	lsls	r3, r3, #4
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	011b      	lsls	r3, r3, #4
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	4313      	orrs	r3, r2
 8008220:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	693a      	ldr	r2, [r7, #16]
 8008226:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	621a      	str	r2, [r3, #32]
}
 800823c:	bf00      	nop
 800823e:	371c      	adds	r7, #28
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr
 8008248:	40010000 	.word	0x40010000

0800824c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800824c:	b480      	push	{r7}
 800824e:	b087      	sub	sp, #28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69db      	ldr	r3, [r3, #28]
 8008272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800827a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	021b      	lsls	r3, r3, #8
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	4313      	orrs	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	031b      	lsls	r3, r3, #12
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a10      	ldr	r2, [pc, #64]	; (80082e8 <TIM_OC4_SetConfig+0x9c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d109      	bne.n	80082c0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	019b      	lsls	r3, r3, #6
 80082ba:	697a      	ldr	r2, [r7, #20]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685a      	ldr	r2, [r3, #4]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	621a      	str	r2, [r3, #32]
}
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr
 80082e6:	bf00      	nop
 80082e8:	40010000 	.word	0x40010000

080082ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6a1b      	ldr	r3, [r3, #32]
 80082fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6a1b      	ldr	r3, [r3, #32]
 8008302:	f023 0201 	bic.w	r2, r3, #1
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	011b      	lsls	r3, r3, #4
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	4313      	orrs	r3, r2
 8008320:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 030a 	bic.w	r3, r3, #10
 8008328:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800832a:	697a      	ldr	r2, [r7, #20]
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	4313      	orrs	r3, r2
 8008330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	621a      	str	r2, [r3, #32]
}
 800833e:	bf00      	nop
 8008340:	371c      	adds	r7, #28
 8008342:	46bd      	mov	sp, r7
 8008344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008348:	4770      	bx	lr

0800834a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800834a:	b480      	push	{r7}
 800834c:	b087      	sub	sp, #28
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	60b9      	str	r1, [r7, #8]
 8008354:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f023 0210 	bic.w	r2, r3, #16
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6a1b      	ldr	r3, [r3, #32]
 800836c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	031b      	lsls	r3, r3, #12
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	4313      	orrs	r3, r2
 800837e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	697a      	ldr	r2, [r7, #20]
 8008396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr

080083aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b085      	sub	sp, #20
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
 80083b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	f043 0307 	orr.w	r3, r3, #7
 80083cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
}
 80083d4:	bf00      	nop
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b087      	sub	sp, #28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	021a      	lsls	r2, r3, #8
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	431a      	orrs	r2, r3
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4313      	orrs	r3, r2
 8008408:	697a      	ldr	r2, [r7, #20]
 800840a:	4313      	orrs	r3, r2
 800840c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	609a      	str	r2, [r3, #8]
}
 8008414:	bf00      	nop
 8008416:	371c      	adds	r7, #28
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 031f 	and.w	r3, r3, #31
 8008432:	2201      	movs	r2, #1
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a1a      	ldr	r2, [r3, #32]
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	43db      	mvns	r3, r3
 8008442:	401a      	ands	r2, r3
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1a      	ldr	r2, [r3, #32]
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	f003 031f 	and.w	r3, r3, #31
 8008452:	6879      	ldr	r1, [r7, #4]
 8008454:	fa01 f303 	lsl.w	r3, r1, r3
 8008458:	431a      	orrs	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
}
 800845e:	bf00      	nop
 8008460:	371c      	adds	r7, #28
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
	...

0800846c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800847c:	2b01      	cmp	r3, #1
 800847e:	d101      	bne.n	8008484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008480:	2302      	movs	r3, #2
 8008482:	e050      	b.n	8008526 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	689b      	ldr	r3, [r3, #8]
 80084a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68fa      	ldr	r2, [r7, #12]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a1c      	ldr	r2, [pc, #112]	; (8008534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d018      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084d0:	d013      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a18      	ldr	r2, [pc, #96]	; (8008538 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d00e      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a16      	ldr	r2, [pc, #88]	; (800853c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d009      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a15      	ldr	r2, [pc, #84]	; (8008540 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d004      	beq.n	80084fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a13      	ldr	r2, [pc, #76]	; (8008544 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d10c      	bne.n	8008514 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008500:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68ba      	ldr	r2, [r7, #8]
 8008508:	4313      	orrs	r3, r2
 800850a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2200      	movs	r2, #0
 8008520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	40010000 	.word	0x40010000
 8008538:	40000400 	.word	0x40000400
 800853c:	40000800 	.word	0x40000800
 8008540:	40000c00 	.word	0x40000c00
 8008544:	40014000 	.word	0x40014000

08008548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008570:	b084      	sub	sp, #16
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	f107 001c 	add.w	r0, r7, #28
 800857e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	2b01      	cmp	r3, #1
 8008586:	d122      	bne.n	80085ce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800859c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80085b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d105      	bne.n	80085c2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f94a 	bl	800885c <USB_CoreReset>
 80085c8:	4603      	mov	r3, r0
 80085ca:	73fb      	strb	r3, [r7, #15]
 80085cc:	e01a      	b.n	8008604 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68db      	ldr	r3, [r3, #12]
 80085d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f93e 	bl	800885c <USB_CoreReset>
 80085e0:	4603      	mov	r3, r0
 80085e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80085e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d106      	bne.n	80085f8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
 80085f6:	e005      	b.n	8008604 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	2b01      	cmp	r3, #1
 8008608:	d10b      	bne.n	8008622 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f043 0206 	orr.w	r2, r3, #6
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f043 0220 	orr.w	r2, r3, #32
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008622:	7bfb      	ldrb	r3, [r7, #15]
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800862e:	b004      	add	sp, #16
 8008630:	4770      	bx	lr

08008632 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f043 0201 	orr.w	r2, r3, #1
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f023 0201 	bic.w	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b082      	sub	sp, #8
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	460b      	mov	r3, r1
 8008680:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d106      	bne.n	80086a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	60da      	str	r2, [r3, #12]
 80086a0:	e00b      	b.n	80086ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80086a2:	78fb      	ldrb	r3, [r7, #3]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d106      	bne.n	80086b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	60da      	str	r2, [r3, #12]
 80086b4:	e001      	b.n	80086ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	e003      	b.n	80086c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80086ba:	2032      	movs	r0, #50	; 0x32
 80086bc:	f7f9 fe78 	bl	80023b0 <HAL_Delay>

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80086d6:	2300      	movs	r3, #0
 80086d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	019b      	lsls	r3, r3, #6
 80086de:	f043 0220 	orr.w	r2, r3, #32
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	3301      	adds	r3, #1
 80086ea:	60fb      	str	r3, [r7, #12]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <USB_FlushTxFifo+0x48>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d901      	bls.n	80086f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	e006      	b.n	8008706 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	691b      	ldr	r3, [r3, #16]
 80086fc:	f003 0320 	and.w	r3, r3, #32
 8008700:	2b20      	cmp	r3, #32
 8008702:	d0f0      	beq.n	80086e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3714      	adds	r7, #20
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	00030d40 	.word	0x00030d40

08008718 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2210      	movs	r2, #16
 8008728:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	4a09      	ldr	r2, [pc, #36]	; (8008758 <USB_FlushRxFifo+0x40>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d901      	bls.n	800873c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e006      	b.n	800874a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	691b      	ldr	r3, [r3, #16]
 8008740:	f003 0310 	and.w	r3, r3, #16
 8008744:	2b10      	cmp	r3, #16
 8008746:	d0f0      	beq.n	800872a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop
 8008758:	00030d40 	.word	0x00030d40

0800875c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800875c:	b480      	push	{r7}
 800875e:	b089      	sub	sp, #36	; 0x24
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	4611      	mov	r1, r2
 8008768:	461a      	mov	r2, r3
 800876a:	460b      	mov	r3, r1
 800876c:	71fb      	strb	r3, [r7, #7]
 800876e:	4613      	mov	r3, r2
 8008770:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800877a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800877e:	2b00      	cmp	r3, #0
 8008780:	d11a      	bne.n	80087b8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008782:	88bb      	ldrh	r3, [r7, #4]
 8008784:	3303      	adds	r3, #3
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800878a:	2300      	movs	r3, #0
 800878c:	61bb      	str	r3, [r7, #24]
 800878e:	e00f      	b.n	80087b0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008790:	79fb      	ldrb	r3, [r7, #7]
 8008792:	031a      	lsls	r2, r3, #12
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	4413      	add	r3, r2
 8008798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800879c:	461a      	mov	r2, r3
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3304      	adds	r3, #4
 80087a8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087aa:	69bb      	ldr	r3, [r7, #24]
 80087ac:	3301      	adds	r3, #1
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	429a      	cmp	r2, r3
 80087b6:	d3eb      	bcc.n	8008790 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3724      	adds	r7, #36	; 0x24
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b089      	sub	sp, #36	; 0x24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	60b9      	str	r1, [r7, #8]
 80087d0:	4613      	mov	r3, r2
 80087d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80087dc:	88fb      	ldrh	r3, [r7, #6]
 80087de:	3303      	adds	r3, #3
 80087e0:	089b      	lsrs	r3, r3, #2
 80087e2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
 80087e8:	e00b      	b.n	8008802 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	3304      	adds	r3, #4
 80087fa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	3301      	adds	r3, #1
 8008800:	61bb      	str	r3, [r7, #24]
 8008802:	69ba      	ldr	r2, [r7, #24]
 8008804:	693b      	ldr	r3, [r7, #16]
 8008806:	429a      	cmp	r2, r3
 8008808:	d3ef      	bcc.n	80087ea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800880a:	69fb      	ldr	r3, [r7, #28]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3724      	adds	r7, #36	; 0x24
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	695b      	ldr	r3, [r3, #20]
 8008824:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	699b      	ldr	r3, [r3, #24]
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4013      	ands	r3, r2
 800882e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008830:	68fb      	ldr	r3, [r7, #12]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3714      	adds	r7, #20
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr

0800883e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800883e:	b480      	push	{r7}
 8008840:	b083      	sub	sp, #12
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	f003 0301 	and.w	r3, r3, #1
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
	...

0800885c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800885c:	b480      	push	{r7}
 800885e:	b085      	sub	sp, #20
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	3301      	adds	r3, #1
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	4a13      	ldr	r2, [pc, #76]	; (80088c0 <USB_CoreReset+0x64>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d901      	bls.n	800887a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e01b      	b.n	80088b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	daf2      	bge.n	8008868 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008882:	2300      	movs	r3, #0
 8008884:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	f043 0201 	orr.w	r2, r3, #1
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3301      	adds	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4a09      	ldr	r2, [pc, #36]	; (80088c0 <USB_CoreReset+0x64>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d901      	bls.n	80088a4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e006      	b.n	80088b2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	f003 0301 	and.w	r3, r3, #1
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d0f0      	beq.n	8008892 <USB_CoreReset+0x36>

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr
 80088be:	bf00      	nop
 80088c0:	00030d40 	.word	0x00030d40

080088c4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088c4:	b084      	sub	sp, #16
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	f107 001c 	add.w	r0, r7, #28
 80088d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088e0:	461a      	mov	r2, r3
 80088e2:	2300      	movs	r3, #0
 80088e4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f6:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008902:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d018      	beq.n	8008948 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2b01      	cmp	r3, #1
 800891a:	d10a      	bne.n	8008932 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800892a:	f043 0304 	orr.w	r3, r3, #4
 800892e:	6013      	str	r3, [r2, #0]
 8008930:	e014      	b.n	800895c <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	e009      	b.n	800895c <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008956:	f023 0304 	bic.w	r3, r3, #4
 800895a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800895c:	2110      	movs	r1, #16
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7ff feb4 	bl	80086cc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f7ff fed7 	bl	8008718 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800896a:	2300      	movs	r3, #0
 800896c:	60fb      	str	r3, [r7, #12]
 800896e:	e015      	b.n	800899c <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897c:	461a      	mov	r2, r3
 800897e:	f04f 33ff 	mov.w	r3, #4294967295
 8008982:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	4413      	add	r3, r2
 800898c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008990:	461a      	mov	r2, r3
 8008992:	2300      	movs	r3, #0
 8008994:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3301      	adds	r3, #1
 800899a:	60fb      	str	r3, [r7, #12]
 800899c:	6a3b      	ldr	r3, [r7, #32]
 800899e:	68fa      	ldr	r2, [r7, #12]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d3e5      	bcc.n	8008970 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80089a4:	2101      	movs	r1, #1
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f8ac 	bl	8008b04 <USB_DriveVbus>

  HAL_Delay(200U);
 80089ac:	20c8      	movs	r0, #200	; 0xc8
 80089ae:	f7f9 fcff 	bl	80023b0 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295
 80089be:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80089d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <USB_HostInit+0x164>)
 80089d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a13      	ldr	r2, [pc, #76]	; (8008a2c <USB_HostInit+0x168>)
 80089de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80089e2:	e009      	b.n	80089f8 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2280      	movs	r2, #128	; 0x80
 80089e8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a10      	ldr	r2, [pc, #64]	; (8008a30 <USB_HostInit+0x16c>)
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	4a10      	ldr	r2, [pc, #64]	; (8008a34 <USB_HostInit+0x170>)
 80089f4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d105      	bne.n	8008a0a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f043 0210 	orr.w	r2, r3, #16
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	699a      	ldr	r2, [r3, #24]
 8008a0e:	4b0a      	ldr	r3, [pc, #40]	; (8008a38 <USB_HostInit+0x174>)
 8008a10:	4313      	orrs	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8008a16:	2300      	movs	r3, #0
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a22:	b004      	add	sp, #16
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	01000200 	.word	0x01000200
 8008a2c:	00e00300 	.word	0x00e00300
 8008a30:	00600080 	.word	0x00600080
 8008a34:	004000e0 	.word	0x004000e0
 8008a38:	a3200008 	.word	0xa3200008

08008a3c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a5a:	f023 0303 	bic.w	r3, r3, #3
 8008a5e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	f003 0303 	and.w	r3, r3, #3
 8008a6e:	68f9      	ldr	r1, [r7, #12]
 8008a70:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008a74:	4313      	orrs	r3, r2
 8008a76:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d107      	bne.n	8008a8e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a84:	461a      	mov	r2, r3
 8008a86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008a8a:	6053      	str	r3, [r2, #4]
 8008a8c:	e009      	b.n	8008aa2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008a8e:	78fb      	ldrb	r3, [r7, #3]
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d106      	bne.n	8008aa2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f241 7370 	movw	r3, #6000	; 0x1770
 8008aa0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3714      	adds	r7, #20
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008ad0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	68fa      	ldr	r2, [r7, #12]
 8008ad6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ade:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008ae0:	2064      	movs	r0, #100	; 0x64
 8008ae2:	f7f9 fc65 	bl	80023b0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008aee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008af2:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008af4:	200a      	movs	r0, #10
 8008af6:	f7f9 fc5b 	bl	80023b0 <HAL_Delay>

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b14:	2300      	movs	r3, #0
 8008b16:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008b28:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d109      	bne.n	8008b48 <USB_DriveVbus+0x44>
 8008b34:	78fb      	ldrb	r3, [r7, #3]
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d106      	bne.n	8008b48 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b46:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b52:	d109      	bne.n	8008b68 <USB_DriveVbus+0x64>
 8008b54:	78fb      	ldrb	r3, [r7, #3]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d106      	bne.n	8008b68 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b66:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008b68:	2300      	movs	r3, #0
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3714      	adds	r7, #20
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b74:	4770      	bx	lr

08008b76 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b76:	b480      	push	{r7}
 8008b78:	b085      	sub	sp, #20
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b82:	2300      	movs	r3, #0
 8008b84:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	0c5b      	lsrs	r3, r3, #17
 8008b94:	f003 0303 	and.w	r3, r3, #3
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b085      	sub	sp, #20
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	b29b      	uxth	r3, r3
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
	...

08008bc8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	4611      	mov	r1, r2
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	70fb      	strb	r3, [r7, #3]
 8008bda:	460b      	mov	r3, r1
 8008bdc:	70bb      	strb	r3, [r7, #2]
 8008bde:	4613      	mov	r3, r2
 8008be0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008bea:	78fb      	ldrb	r3, [r7, #3]
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bfc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008bfe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c02:	2b03      	cmp	r3, #3
 8008c04:	d87e      	bhi.n	8008d04 <USB_HC_Init+0x13c>
 8008c06:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <USB_HC_Init+0x44>)
 8008c08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0c:	08008c1d 	.word	0x08008c1d
 8008c10:	08008cc7 	.word	0x08008cc7
 8008c14:	08008c1d 	.word	0x08008c1d
 8008c18:	08008c89 	.word	0x08008c89
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f240 439d 	movw	r3, #1181	; 0x49d
 8008c2e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008c30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	da10      	bge.n	8008c5a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c38:	78fb      	ldrb	r3, [r7, #3]
 8008c3a:	015a      	lsls	r2, r3, #5
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4413      	add	r3, r2
 8008c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	0151      	lsls	r1, r2, #5
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	440a      	add	r2, r1
 8008c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c56:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008c58:	e057      	b.n	8008d0a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d051      	beq.n	8008d0a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	015a      	lsls	r2, r3, #5
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	4413      	add	r3, r2
 8008c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	78fa      	ldrb	r2, [r7, #3]
 8008c76:	0151      	lsls	r1, r2, #5
 8008c78:	68ba      	ldr	r2, [r7, #8]
 8008c7a:	440a      	add	r2, r1
 8008c7c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c84:	60d3      	str	r3, [r2, #12]
      break;
 8008c86:	e040      	b.n	8008d0a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	015a      	lsls	r2, r3, #5
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	4413      	add	r3, r2
 8008c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c94:	461a      	mov	r2, r3
 8008c96:	f240 639d 	movw	r3, #1693	; 0x69d
 8008c9a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008c9c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	da34      	bge.n	8008d0e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	015a      	lsls	r2, r3, #5
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	4413      	add	r3, r2
 8008cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	78fa      	ldrb	r2, [r7, #3]
 8008cb4:	0151      	lsls	r1, r2, #5
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	440a      	add	r2, r1
 8008cba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cc2:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008cc4:	e023      	b.n	8008d0e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008cc6:	78fb      	ldrb	r3, [r7, #3]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	f240 2325 	movw	r3, #549	; 0x225
 8008cd8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008cda:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	da17      	bge.n	8008d12 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	78fa      	ldrb	r2, [r7, #3]
 8008cf2:	0151      	lsls	r1, r2, #5
 8008cf4:	68ba      	ldr	r2, [r7, #8]
 8008cf6:	440a      	add	r2, r1
 8008cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cfc:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008d00:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008d02:	e006      	b.n	8008d12 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	75fb      	strb	r3, [r7, #23]
      break;
 8008d08:	e004      	b.n	8008d14 <USB_HC_Init+0x14c>
      break;
 8008d0a:	bf00      	nop
 8008d0c:	e002      	b.n	8008d14 <USB_HC_Init+0x14c>
      break;
 8008d0e:	bf00      	nop
 8008d10:	e000      	b.n	8008d14 <USB_HC_Init+0x14c>
      break;
 8008d12:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d1a:	699a      	ldr	r2, [r3, #24]
 8008d1c:	78fb      	ldrb	r3, [r7, #3]
 8008d1e:	f003 030f 	and.w	r3, r3, #15
 8008d22:	2101      	movs	r1, #1
 8008d24:	fa01 f303 	lsl.w	r3, r1, r3
 8008d28:	68b9      	ldr	r1, [r7, #8]
 8008d2a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008d3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	da03      	bge.n	8008d4e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d4a:	613b      	str	r3, [r7, #16]
 8008d4c:	e001      	b.n	8008d52 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8008d52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d103      	bne.n	8008d62 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008d5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d5e:	60fb      	str	r3, [r7, #12]
 8008d60:	e001      	b.n	8008d66 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d66:	787b      	ldrb	r3, [r7, #1]
 8008d68:	059b      	lsls	r3, r3, #22
 8008d6a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d6e:	78bb      	ldrb	r3, [r7, #2]
 8008d70:	02db      	lsls	r3, r3, #11
 8008d72:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d76:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d7c:	049b      	lsls	r3, r3, #18
 8008d7e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d82:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d8a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	0159      	lsls	r1, r3, #5
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	440b      	add	r3, r1
 8008d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d9c:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008da2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008da4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d10f      	bne.n	8008dcc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	015a      	lsls	r2, r3, #5
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	78fa      	ldrb	r2, [r7, #3]
 8008dbc:	0151      	lsls	r1, r2, #5
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dca:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop

08008ddc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b08c      	sub	sp, #48	; 0x30
 8008de0:	af02      	add	r7, sp, #8
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	4613      	mov	r3, r2
 8008de8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d028      	beq.n	8008e58 <USB_HC_StartXfer+0x7c>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	791b      	ldrb	r3, [r3, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d124      	bne.n	8008e58 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8008e0e:	79fb      	ldrb	r3, [r7, #7]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d10b      	bne.n	8008e2c <USB_HC_StartXfer+0x50>
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	795b      	ldrb	r3, [r3, #5]
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d107      	bne.n	8008e2c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	4619      	mov	r1, r3
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f000 fa2e 	bl	8009284 <USB_DoPing>
      return HAL_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	e112      	b.n	8009052 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8008e2c:	79fb      	ldrb	r3, [r7, #7]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d112      	bne.n	8008e58 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e3e:	68db      	ldr	r3, [r3, #12]
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	0151      	lsls	r1, r2, #5
 8008e44:	6a3a      	ldr	r2, [r7, #32]
 8008e46:	440a      	add	r2, r1
 8008e48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e4c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008e50:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	691b      	ldr	r3, [r3, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d018      	beq.n	8008e92 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	68ba      	ldr	r2, [r7, #8]
 8008e66:	8912      	ldrh	r2, [r2, #8]
 8008e68:	4413      	add	r3, r2
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	8912      	ldrh	r2, [r2, #8]
 8008e70:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e74:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008e76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008e78:	8b7b      	ldrh	r3, [r7, #26]
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d90b      	bls.n	8008e96 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008e7e:	8b7b      	ldrh	r3, [r7, #26]
 8008e80:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008e82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e84:	68ba      	ldr	r2, [r7, #8]
 8008e86:	8912      	ldrh	r2, [r2, #8]
 8008e88:	fb02 f203 	mul.w	r2, r2, r3
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	611a      	str	r2, [r3, #16]
 8008e90:	e001      	b.n	8008e96 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8008e92:	2301      	movs	r3, #1
 8008e94:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	78db      	ldrb	r3, [r3, #3]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d006      	beq.n	8008eac <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008e9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	8912      	ldrh	r2, [r2, #8]
 8008ea4:	fb02 f203 	mul.w	r2, r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008eb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008eb6:	04d9      	lsls	r1, r3, #19
 8008eb8:	4b68      	ldr	r3, [pc, #416]	; (800905c <USB_HC_StartXfer+0x280>)
 8008eba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ebc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	7a9b      	ldrb	r3, [r3, #10]
 8008ec2:	075b      	lsls	r3, r3, #29
 8008ec4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ec8:	69f9      	ldr	r1, [r7, #28]
 8008eca:	0148      	lsls	r0, r1, #5
 8008ecc:	6a39      	ldr	r1, [r7, #32]
 8008ece:	4401      	add	r1, r0
 8008ed0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008ed4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ed6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008ed8:	79fb      	ldrb	r3, [r7, #7]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	68d9      	ldr	r1, [r3, #12]
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008eee:	460a      	mov	r2, r1
 8008ef0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	f003 0301 	and.w	r3, r3, #1
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	bf0c      	ite	eq
 8008f02:	2301      	moveq	r3, #1
 8008f04:	2300      	movne	r3, #0
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	015a      	lsls	r2, r3, #5
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	4413      	add	r3, r2
 8008f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	0151      	lsls	r1, r2, #5
 8008f1c:	6a3a      	ldr	r2, [r7, #32]
 8008f1e:	440a      	add	r2, r1
 8008f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	6a3b      	ldr	r3, [r7, #32]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	7e7b      	ldrb	r3, [r7, #25]
 8008f3a:	075b      	lsls	r3, r3, #29
 8008f3c:	69f9      	ldr	r1, [r7, #28]
 8008f3e:	0148      	lsls	r0, r1, #5
 8008f40:	6a39      	ldr	r1, [r7, #32]
 8008f42:	4401      	add	r1, r0
 8008f44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a41      	ldr	r2, [pc, #260]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f5c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f5e:	4b40      	ldr	r3, [pc, #256]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f66:	4a3e      	ldr	r2, [pc, #248]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f68:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	78db      	ldrb	r3, [r3, #3]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d006      	beq.n	8008f80 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008f72:	4b3b      	ldr	r3, [pc, #236]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f7a:	4a39      	ldr	r2, [pc, #228]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f7c:	6013      	str	r3, [r2, #0]
 8008f7e:	e005      	b.n	8008f8c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008f80:	4b37      	ldr	r3, [pc, #220]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f88:	4a35      	ldr	r2, [pc, #212]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f8a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f8c:	4b34      	ldr	r3, [pc, #208]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f94:	4a32      	ldr	r2, [pc, #200]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008f96:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	015a      	lsls	r2, r3, #5
 8008f9c:	6a3b      	ldr	r3, [r7, #32]
 8008f9e:	4413      	add	r3, r2
 8008fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008fa4:	461a      	mov	r2, r3
 8008fa6:	4b2e      	ldr	r3, [pc, #184]	; (8009060 <USB_HC_StartXfer+0x284>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d14e      	bne.n	8009050 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	78db      	ldrb	r3, [r3, #3]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d14a      	bne.n	8009050 <USB_HC_StartXfer+0x274>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d046      	beq.n	8009050 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	79db      	ldrb	r3, [r3, #7]
 8008fc6:	2b03      	cmp	r3, #3
 8008fc8:	d830      	bhi.n	800902c <USB_HC_StartXfer+0x250>
 8008fca:	a201      	add	r2, pc, #4	; (adr r2, 8008fd0 <USB_HC_StartXfer+0x1f4>)
 8008fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd0:	08008fe1 	.word	0x08008fe1
 8008fd4:	08009005 	.word	0x08009005
 8008fd8:	08008fe1 	.word	0x08008fe1
 8008fdc:	08009005 	.word	0x08009005
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	3303      	adds	r3, #3
 8008fe6:	089b      	lsrs	r3, r3, #2
 8008fe8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008fea:	8afa      	ldrh	r2, [r7, #22]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff0:	b29b      	uxth	r3, r3
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d91c      	bls.n	8009030 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	699b      	ldr	r3, [r3, #24]
 8008ffa:	f043 0220 	orr.w	r2, r3, #32
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	619a      	str	r2, [r3, #24]
          }
          break;
 8009002:	e015      	b.n	8009030 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	3303      	adds	r3, #3
 800900a:	089b      	lsrs	r3, r3, #2
 800900c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800900e:	8afa      	ldrh	r2, [r7, #22]
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	b29b      	uxth	r3, r3
 800901a:	429a      	cmp	r2, r3
 800901c:	d90a      	bls.n	8009034 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	699b      	ldr	r3, [r3, #24]
 8009022:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	619a      	str	r2, [r3, #24]
          }
          break;
 800902a:	e003      	b.n	8009034 <USB_HC_StartXfer+0x258>

        default:
          break;
 800902c:	bf00      	nop
 800902e:	e002      	b.n	8009036 <USB_HC_StartXfer+0x25a>
          break;
 8009030:	bf00      	nop
 8009032:	e000      	b.n	8009036 <USB_HC_StartXfer+0x25a>
          break;
 8009034:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	68d9      	ldr	r1, [r3, #12]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	785a      	ldrb	r2, [r3, #1]
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	b298      	uxth	r0, r3
 8009044:	2300      	movs	r3, #0
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	4603      	mov	r3, r0
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	f7ff fb86 	bl	800875c <USB_WritePacket>
    }
  }

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3728      	adds	r7, #40	; 0x28
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	1ff80000 	.word	0x1ff80000
 8009060:	20001384 	.word	0x20001384

08009064 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009076:	695b      	ldr	r3, [r3, #20]
 8009078:	b29b      	uxth	r3, r3
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009086:	b480      	push	{r7}
 8009088:	b087      	sub	sp, #28
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	460b      	mov	r3, r1
 8009090:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8009096:	78fb      	ldrb	r3, [r7, #3]
 8009098:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	015a      	lsls	r2, r3, #5
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	4413      	add	r3, r2
 80090a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	0c9b      	lsrs	r3, r3, #18
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d002      	beq.n	80090c0 <USB_HC_Halt+0x3a>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d16c      	bne.n	800919a <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	0151      	lsls	r1, r2, #5
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	440a      	add	r2, r1
 80090d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090de:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d143      	bne.n	8009174 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	015a      	lsls	r2, r3, #5
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	4413      	add	r3, r2
 80090f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	0151      	lsls	r1, r2, #5
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	440a      	add	r2, r1
 8009102:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009106:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800910a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	015a      	lsls	r2, r3, #5
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	4413      	add	r3, r2
 8009114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	0151      	lsls	r1, r2, #5
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	440a      	add	r2, r1
 8009122:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009126:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800912a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	4413      	add	r3, r2
 8009134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	68fa      	ldr	r2, [r7, #12]
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	693a      	ldr	r2, [r7, #16]
 8009140:	440a      	add	r2, r1
 8009142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009146:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800914a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	3301      	adds	r3, #1
 8009150:	617b      	str	r3, [r7, #20]
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009158:	d81d      	bhi.n	8009196 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	015a      	lsls	r2, r3, #5
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	4413      	add	r3, r2
 8009162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800916c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009170:	d0ec      	beq.n	800914c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009172:	e080      	b.n	8009276 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	4413      	add	r3, r2
 800917c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	0151      	lsls	r1, r2, #5
 8009186:	693a      	ldr	r2, [r7, #16]
 8009188:	440a      	add	r2, r1
 800918a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800918e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009192:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009194:	e06f      	b.n	8009276 <USB_HC_Halt+0x1f0>
          break;
 8009196:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009198:	e06d      	b.n	8009276 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68fa      	ldr	r2, [r7, #12]
 80091aa:	0151      	lsls	r1, r2, #5
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	440a      	add	r2, r1
 80091b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091b8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d143      	bne.n	8009252 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091e8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009204:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009208:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	4413      	add	r3, r2
 8009212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	0151      	lsls	r1, r2, #5
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	440a      	add	r2, r1
 8009220:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009228:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	3301      	adds	r3, #1
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009236:	d81d      	bhi.n	8009274 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800924a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800924e:	d0ec      	beq.n	800922a <USB_HC_Halt+0x1a4>
 8009250:	e011      	b.n	8009276 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	015a      	lsls	r2, r3, #5
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	4413      	add	r3, r2
 800925a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	0151      	lsls	r1, r2, #5
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	440a      	add	r2, r1
 8009268:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800926c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009270:	6013      	str	r3, [r2, #0]
 8009272:	e000      	b.n	8009276 <USB_HC_Halt+0x1f0>
          break;
 8009274:	bf00      	nop
    }
  }

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	371c      	adds	r7, #28
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009284:	b480      	push	{r7}
 8009286:	b087      	sub	sp, #28
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009294:	78fb      	ldrb	r3, [r7, #3]
 8009296:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009298:	2301      	movs	r3, #1
 800929a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	04da      	lsls	r2, r3, #19
 80092a0:	4b15      	ldr	r3, [pc, #84]	; (80092f8 <USB_DoPing+0x74>)
 80092a2:	4013      	ands	r3, r2
 80092a4:	693a      	ldr	r2, [r7, #16]
 80092a6:	0151      	lsls	r1, r2, #5
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	440a      	add	r2, r1
 80092ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092b4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092cc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092d4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	015a      	lsls	r2, r3, #5
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	4413      	add	r3, r2
 80092de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092e2:	461a      	mov	r2, r3
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	371c      	adds	r7, #28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	1ff80000 	.word	0x1ff80000

080092fc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f7ff f9a1 	bl	8008654 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8009312:	2110      	movs	r1, #16
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff f9d9 	bl	80086cc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff f9fc 	bl	8008718 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009320:	2300      	movs	r3, #0
 8009322:	613b      	str	r3, [r7, #16]
 8009324:	e01f      	b.n	8009366 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4413      	add	r3, r2
 800932e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800933c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009344:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800934c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	4413      	add	r3, r2
 8009356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800935a:	461a      	mov	r2, r3
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	3301      	adds	r3, #1
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b0f      	cmp	r3, #15
 800936a:	d9dc      	bls.n	8009326 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800936c:	2300      	movs	r3, #0
 800936e:	613b      	str	r3, [r7, #16]
 8009370:	e034      	b.n	80093dc <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009388:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009390:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009398:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093a6:	461a      	mov	r2, r3
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80093ac:	697b      	ldr	r3, [r7, #20]
 80093ae:	3301      	adds	r3, #1
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093b8:	d80c      	bhi.n	80093d4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093d0:	d0ec      	beq.n	80093ac <USB_StopHost+0xb0>
 80093d2:	e000      	b.n	80093d6 <USB_StopHost+0xda>
        break;
 80093d4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3301      	adds	r3, #1
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	2b0f      	cmp	r3, #15
 80093e0:	d9c7      	bls.n	8009372 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093e8:	461a      	mov	r2, r3
 80093ea:	f04f 33ff 	mov.w	r3, #4294967295
 80093ee:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f04f 32ff 	mov.w	r2, #4294967295
 80093f6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f7ff f91a 	bl	8008632 <USB_EnableGlobalInt>

  return HAL_OK;
 80093fe:	2300      	movs	r3, #0
}
 8009400:	4618      	mov	r0, r3
 8009402:	3718      	adds	r7, #24
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009408:	b580      	push	{r7, lr}
 800940a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800940c:	4904      	ldr	r1, [pc, #16]	; (8009420 <MX_FATFS_Init+0x18>)
 800940e:	4805      	ldr	r0, [pc, #20]	; (8009424 <MX_FATFS_Init+0x1c>)
 8009410:	f005 fb7a 	bl	800eb08 <FATFS_LinkDriver>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	4b03      	ldr	r3, [pc, #12]	; (8009428 <MX_FATFS_Init+0x20>)
 800941a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800941c:	bf00      	nop
 800941e:	bd80      	pop	{r7, pc}
 8009420:	200015e4 	.word	0x200015e4
 8009424:	0800fbbc 	.word	0x0800fbbc
 8009428:	20001a48 	.word	0x20001a48

0800942c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800942c:	b480      	push	{r7}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009430:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8009432:	4618      	mov	r0, r3
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	4603      	mov	r3, r0
 8009444:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	4603      	mov	r3, r0
 800945c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	4619      	mov	r1, r3
 8009466:	4808      	ldr	r0, [pc, #32]	; (8009488 <USBH_status+0x34>)
 8009468:	f000 fe11 	bl	800a08e <USBH_MSC_UnitIsReady>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d002      	beq.n	8009478 <USBH_status+0x24>
  {
    res = RES_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	73fb      	strb	r3, [r7, #15]
 8009476:	e001      	b.n	800947c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20001a4c 	.word	0x20001a4c

0800948c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b094      	sub	sp, #80	; 0x50
 8009490:	af02      	add	r7, sp, #8
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	4603      	mov	r3, r0
 800949a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 80094a2:	7bf9      	ldrb	r1, [r7, #15]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	4812      	ldr	r0, [pc, #72]	; (80094f8 <USBH_read+0x6c>)
 80094ae:	f000 fe38 	bl	800a122 <USBH_MSC_Read>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d103      	bne.n	80094c0 <USBH_read+0x34>
  {
    res = RES_OK;
 80094b8:	2300      	movs	r3, #0
 80094ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80094be:	e015      	b.n	80094ec <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80094c0:	f107 0210 	add.w	r2, r7, #16
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
 80094c6:	4619      	mov	r1, r3
 80094c8:	480b      	ldr	r0, [pc, #44]	; (80094f8 <USBH_read+0x6c>)
 80094ca:	f000 fe06 	bl	800a0da <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80094ce:	7f7b      	ldrb	r3, [r7, #29]
 80094d0:	2b28      	cmp	r3, #40	; 0x28
 80094d2:	d003      	beq.n	80094dc <USBH_read+0x50>
 80094d4:	2b3a      	cmp	r3, #58	; 0x3a
 80094d6:	d001      	beq.n	80094dc <USBH_read+0x50>
 80094d8:	2b04      	cmp	r3, #4
 80094da:	d103      	bne.n	80094e4 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80094dc:	2303      	movs	r3, #3
 80094de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80094e2:	e003      	b.n	80094ec <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80094ea:	bf00      	nop
    }
  }

  return res;
 80094ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3748      	adds	r7, #72	; 0x48
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20001a4c 	.word	0x20001a4c

080094fc <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b094      	sub	sp, #80	; 0x50
 8009500:	af02      	add	r7, sp, #8
 8009502:	60b9      	str	r1, [r7, #8]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8009512:	7bf9      	ldrb	r1, [r7, #15]
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	4817      	ldr	r0, [pc, #92]	; (800957c <USBH_write+0x80>)
 800951e:	f000 fe69 	bl	800a1f4 <USBH_MSC_Write>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	d103      	bne.n	8009530 <USBH_write+0x34>
  {
    res = RES_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800952e:	e01f      	b.n	8009570 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8009530:	f107 0210 	add.w	r2, r7, #16
 8009534:	7bfb      	ldrb	r3, [r7, #15]
 8009536:	4619      	mov	r1, r3
 8009538:	4810      	ldr	r0, [pc, #64]	; (800957c <USBH_write+0x80>)
 800953a:	f000 fdce 	bl	800a0da <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800953e:	7f7b      	ldrb	r3, [r7, #29]
 8009540:	2b27      	cmp	r3, #39	; 0x27
 8009542:	d009      	beq.n	8009558 <USBH_write+0x5c>
 8009544:	2b27      	cmp	r3, #39	; 0x27
 8009546:	dc02      	bgt.n	800954e <USBH_write+0x52>
 8009548:	2b04      	cmp	r3, #4
 800954a:	d009      	beq.n	8009560 <USBH_write+0x64>
 800954c:	e00c      	b.n	8009568 <USBH_write+0x6c>
 800954e:	2b28      	cmp	r3, #40	; 0x28
 8009550:	d006      	beq.n	8009560 <USBH_write+0x64>
 8009552:	2b3a      	cmp	r3, #58	; 0x3a
 8009554:	d004      	beq.n	8009560 <USBH_write+0x64>
 8009556:	e007      	b.n	8009568 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8009558:	2302      	movs	r3, #2
 800955a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800955e:	e007      	b.n	8009570 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8009560:	2303      	movs	r3, #3
 8009562:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8009566:	e003      	b.n	8009570 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800956e:	bf00      	nop
    }
  }

  return res;
 8009570:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009574:	4618      	mov	r0, r3
 8009576:	3748      	adds	r7, #72	; 0x48
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20001a4c 	.word	0x20001a4c

08009580 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b090      	sub	sp, #64	; 0x40
 8009584:	af00      	add	r7, sp, #0
 8009586:	4603      	mov	r3, r0
 8009588:	603a      	str	r2, [r7, #0]
 800958a:	71fb      	strb	r3, [r7, #7]
 800958c:	460b      	mov	r3, r1
 800958e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8009596:	79bb      	ldrb	r3, [r7, #6]
 8009598:	2b03      	cmp	r3, #3
 800959a:	d852      	bhi.n	8009642 <USBH_ioctl+0xc2>
 800959c:	a201      	add	r2, pc, #4	; (adr r2, 80095a4 <USBH_ioctl+0x24>)
 800959e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a2:	bf00      	nop
 80095a4:	080095b5 	.word	0x080095b5
 80095a8:	080095bd 	.word	0x080095bd
 80095ac:	080095e7 	.word	0x080095e7
 80095b0:	08009613 	.word	0x08009613
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80095ba:	e045      	b.n	8009648 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80095bc:	f107 0208 	add.w	r2, r7, #8
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	4619      	mov	r1, r3
 80095c4:	4823      	ldr	r0, [pc, #140]	; (8009654 <USBH_ioctl+0xd4>)
 80095c6:	f000 fd88 	bl	800a0da <USBH_MSC_GetLUNInfo>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d106      	bne.n	80095de <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80095d6:	2300      	movs	r3, #0
 80095d8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80095dc:	e034      	b.n	8009648 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80095de:	2301      	movs	r3, #1
 80095e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80095e4:	e030      	b.n	8009648 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80095e6:	f107 0208 	add.w	r2, r7, #8
 80095ea:	79fb      	ldrb	r3, [r7, #7]
 80095ec:	4619      	mov	r1, r3
 80095ee:	4819      	ldr	r0, [pc, #100]	; (8009654 <USBH_ioctl+0xd4>)
 80095f0:	f000 fd73 	bl	800a0da <USBH_MSC_GetLUNInfo>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d107      	bne.n	800960a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80095fa:	8a3b      	ldrh	r3, [r7, #16]
 80095fc:	461a      	mov	r2, r3
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009608:	e01e      	b.n	8009648 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009610:	e01a      	b.n	8009648 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8009612:	f107 0208 	add.w	r2, r7, #8
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	4619      	mov	r1, r3
 800961a:	480e      	ldr	r0, [pc, #56]	; (8009654 <USBH_ioctl+0xd4>)
 800961c:	f000 fd5d 	bl	800a0da <USBH_MSC_GetLUNInfo>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d109      	bne.n	800963a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8009626:	8a3b      	ldrh	r3, [r7, #16]
 8009628:	0a5b      	lsrs	r3, r3, #9
 800962a:	b29b      	uxth	r3, r3
 800962c:	461a      	mov	r2, r3
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8009638:	e006      	b.n	8009648 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800963a:	2301      	movs	r3, #1
 800963c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8009640:	e002      	b.n	8009648 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8009642:	2304      	movs	r3, #4
 8009644:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8009648:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800964c:	4618      	mov	r0, r3
 800964e:	3740      	adds	r7, #64	; 0x40
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20001a4c 	.word	0x20001a4c

08009658 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009658:	b590      	push	{r4, r7, lr}
 800965a:	b089      	sub	sp, #36	; 0x24
 800965c:	af04      	add	r7, sp, #16
 800965e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009666:	7919      	ldrb	r1, [r3, #4]
 8009668:	2350      	movs	r3, #80	; 0x50
 800966a:	2206      	movs	r2, #6
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 fc4f 	bl	800af10 <USBH_FindInterface>
 8009672:	4603      	mov	r3, r0
 8009674:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8009676:	7bfb      	ldrb	r3, [r7, #15]
 8009678:	2bff      	cmp	r3, #255	; 0xff
 800967a:	d002      	beq.n	8009682 <USBH_MSC_InterfaceInit+0x2a>
 800967c:	7bfb      	ldrb	r3, [r7, #15]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d901      	bls.n	8009686 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	e0ef      	b.n	8009866 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8009686:	7bfb      	ldrb	r3, [r7, #15]
 8009688:	4619      	mov	r1, r3
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fc24 	bl	800aed8 <USBH_SelectInterface>
 8009690:	4603      	mov	r3, r0
 8009692:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009694:	7bbb      	ldrb	r3, [r7, #14]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d001      	beq.n	800969e <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800969a:	2302      	movs	r3, #2
 800969c:	e0e3      	b.n	8009866 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80096a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80096a8:	f005 fda4 	bl	800f1f4 <malloc>
 80096ac:	4603      	mov	r3, r0
 80096ae:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096b6:	69db      	ldr	r3, [r3, #28]
 80096b8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d101      	bne.n	80096c4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80096c0:	2302      	movs	r3, #2
 80096c2:	e0d0      	b.n	8009866 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80096c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096c8:	2100      	movs	r1, #0
 80096ca:	68b8      	ldr	r0, [r7, #8]
 80096cc:	f005 fdad 	bl	800f22a <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	211a      	movs	r1, #26
 80096d6:	fb01 f303 	mul.w	r3, r1, r3
 80096da:	4413      	add	r3, r2
 80096dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	b25b      	sxtb	r3, r3
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	da16      	bge.n	8009716 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80096e8:	7bfb      	ldrb	r3, [r7, #15]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	211a      	movs	r1, #26
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	4413      	add	r3, r2
 80096f4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80096f8:	781a      	ldrb	r2, [r3, #0]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	687a      	ldr	r2, [r7, #4]
 8009702:	211a      	movs	r1, #26
 8009704:	fb01 f303 	mul.w	r3, r1, r3
 8009708:	4413      	add	r3, r2
 800970a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800970e:	881a      	ldrh	r2, [r3, #0]
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	815a      	strh	r2, [r3, #10]
 8009714:	e015      	b.n	8009742 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8009716:	7bfb      	ldrb	r3, [r7, #15]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	211a      	movs	r1, #26
 800971c:	fb01 f303 	mul.w	r3, r1, r3
 8009720:	4413      	add	r3, r2
 8009722:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800972c:	7bfb      	ldrb	r3, [r7, #15]
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	211a      	movs	r1, #26
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	4413      	add	r3, r2
 8009738:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800973c:	881a      	ldrh	r2, [r3, #0]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8009742:	7bfb      	ldrb	r3, [r7, #15]
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	211a      	movs	r1, #26
 8009748:	fb01 f303 	mul.w	r3, r1, r3
 800974c:	4413      	add	r3, r2
 800974e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b25b      	sxtb	r3, r3
 8009756:	2b00      	cmp	r3, #0
 8009758:	da16      	bge.n	8009788 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800975a:	7bfb      	ldrb	r3, [r7, #15]
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	211a      	movs	r1, #26
 8009760:	fb01 f303 	mul.w	r3, r1, r3
 8009764:	4413      	add	r3, r2
 8009766:	f203 3356 	addw	r3, r3, #854	; 0x356
 800976a:	781a      	ldrb	r2, [r3, #0]
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	211a      	movs	r1, #26
 8009776:	fb01 f303 	mul.w	r3, r1, r3
 800977a:	4413      	add	r3, r2
 800977c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009780:	881a      	ldrh	r2, [r3, #0]
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	815a      	strh	r2, [r3, #10]
 8009786:	e015      	b.n	80097b4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009788:	7bfb      	ldrb	r3, [r7, #15]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	211a      	movs	r1, #26
 800978e:	fb01 f303 	mul.w	r3, r1, r3
 8009792:	4413      	add	r3, r2
 8009794:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800979e:	7bfb      	ldrb	r3, [r7, #15]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	211a      	movs	r1, #26
 80097a4:	fb01 f303 	mul.w	r3, r1, r3
 80097a8:	4413      	add	r3, r2
 80097aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80097ae:	881a      	ldrh	r2, [r3, #0]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2200      	movs	r2, #0
 80097b8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2200      	movs	r2, #0
 80097be:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	799b      	ldrb	r3, [r3, #6]
 80097ca:	4619      	mov	r1, r3
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f002 fdc2 	bl	800c356 <USBH_AllocPipe>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	79db      	ldrb	r3, [r3, #7]
 80097de:	4619      	mov	r1, r3
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f002 fdb8 	bl	800c356 <USBH_AllocPipe>
 80097e6:	4603      	mov	r3, r0
 80097e8:	461a      	mov	r2, r3
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fda4 	bl	800a33c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	7959      	ldrb	r1, [r3, #5]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	7998      	ldrb	r0, [r3, #6]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	8912      	ldrh	r2, [r2, #8]
 800980c:	9202      	str	r2, [sp, #8]
 800980e:	2202      	movs	r2, #2
 8009810:	9201      	str	r2, [sp, #4]
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	4623      	mov	r3, r4
 8009816:	4602      	mov	r2, r0
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f002 fd6d 	bl	800c2f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	7919      	ldrb	r1, [r3, #4]
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	79d8      	ldrb	r0, [r3, #7]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	8952      	ldrh	r2, [r2, #10]
 8009836:	9202      	str	r2, [sp, #8]
 8009838:	2202      	movs	r2, #2
 800983a:	9201      	str	r2, [sp, #4]
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	4623      	mov	r3, r4
 8009840:	4602      	mov	r2, r0
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f002 fd58 	bl	800c2f8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	791b      	ldrb	r3, [r3, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	4619      	mov	r1, r3
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f005 fbeb 	bl	800f02c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	795b      	ldrb	r3, [r3, #5]
 800985a:	2200      	movs	r2, #0
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f005 fbe4 	bl	800f02c <USBH_LL_SetToggle>

  return USBH_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3714      	adds	r7, #20
 800986a:	46bd      	mov	sp, r7
 800986c:	bd90      	pop	{r4, r7, pc}

0800986e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	795b      	ldrb	r3, [r3, #5]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	795b      	ldrb	r3, [r3, #5]
 800988c:	4619      	mov	r1, r3
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f002 fd51 	bl	800c336 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	795b      	ldrb	r3, [r3, #5]
 8009898:	4619      	mov	r1, r3
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f002 fd7c 	bl	800c398 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2200      	movs	r2, #0
 80098a4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	791b      	ldrb	r3, [r3, #4]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	791b      	ldrb	r3, [r3, #4]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f002 fd3e 	bl	800c336 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	791b      	ldrb	r3, [r3, #4]
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f002 fd69 	bl	800c398 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	2200      	movs	r2, #0
 80098ca:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00b      	beq.n	80098f0 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098de:	69db      	ldr	r3, [r3, #28]
 80098e0:	4618      	mov	r0, r3
 80098e2:	f005 fc8f 	bl	800f204 <free>
    phost->pActiveClass->pData = 0U;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ec:	2200      	movs	r2, #0
 80098ee:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800990c:	2301      	movs	r3, #1
 800990e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	7b9b      	ldrb	r3, [r3, #14]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d004      	beq.n	8009922 <USBH_MSC_ClassRequest+0x28>
 8009918:	2b03      	cmp	r3, #3
 800991a:	d03e      	beq.n	800999a <USBH_MSC_ClassRequest+0xa0>
 800991c:	2b00      	cmp	r3, #0
 800991e:	d000      	beq.n	8009922 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8009920:	e04a      	b.n	80099b8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8009922:	68bb      	ldr	r3, [r7, #8]
 8009924:	4619      	mov	r1, r3
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f000 fcea 	bl	800a300 <USBH_MSC_BOT_REQ_GetMaxLUN>
 800992c:	4603      	mov	r3, r0
 800992e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8009930:	7bfb      	ldrb	r3, [r7, #15]
 8009932:	2b03      	cmp	r3, #3
 8009934:	d104      	bne.n	8009940 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	2200      	movs	r2, #0
 800993a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d135      	bne.n	80099b2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	781b      	ldrb	r3, [r3, #0]
 800994a:	2b02      	cmp	r3, #2
 800994c:	d804      	bhi.n	8009958 <USBH_MSC_ClassRequest+0x5e>
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	b2da      	uxtb	r2, r3
 8009956:	e000      	b.n	800995a <USBH_MSC_ClassRequest+0x60>
 8009958:	2202      	movs	r2, #2
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800995e:	2300      	movs	r3, #0
 8009960:	73bb      	strb	r3, [r7, #14]
 8009962:	e014      	b.n	800998e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8009964:	7bbb      	ldrb	r3, [r7, #14]
 8009966:	68ba      	ldr	r2, [r7, #8]
 8009968:	2134      	movs	r1, #52	; 0x34
 800996a:	fb01 f303 	mul.w	r3, r1, r3
 800996e:	4413      	add	r3, r2
 8009970:	3392      	adds	r3, #146	; 0x92
 8009972:	2202      	movs	r2, #2
 8009974:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	68ba      	ldr	r2, [r7, #8]
 800997a:	2134      	movs	r1, #52	; 0x34
 800997c:	fb01 f303 	mul.w	r3, r1, r3
 8009980:	4413      	add	r3, r2
 8009982:	33c1      	adds	r3, #193	; 0xc1
 8009984:	2200      	movs	r2, #0
 8009986:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8009988:	7bbb      	ldrb	r3, [r7, #14]
 800998a:	3301      	adds	r3, #1
 800998c:	73bb      	strb	r3, [r7, #14]
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	7bba      	ldrb	r2, [r7, #14]
 8009994:	429a      	cmp	r2, r3
 8009996:	d3e5      	bcc.n	8009964 <USBH_MSC_ClassRequest+0x6a>
      break;
 8009998:	e00b      	b.n	80099b2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f002 f878 	bl	800ba92 <USBH_ClrFeature>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d106      	bne.n	80099b6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	7bda      	ldrb	r2, [r3, #15]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	739a      	strb	r2, [r3, #14]
      break;
 80099b0:	e001      	b.n	80099b6 <USBH_MSC_ClassRequest+0xbc>
      break;
 80099b2:	bf00      	nop
 80099b4:	e000      	b.n	80099b8 <USBH_MSC_ClassRequest+0xbe>
      break;
 80099b6:	bf00      	nop
  }

  return status;
 80099b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b086      	sub	sp, #24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80099d6:	2301      	movs	r3, #1
 80099d8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80099da:	2301      	movs	r3, #1
 80099dc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80099de:	2301      	movs	r3, #1
 80099e0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	7b1b      	ldrb	r3, [r3, #12]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <USBH_MSC_Process+0x2e>
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	f000 8271 	beq.w	8009ed2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80099f0:	e272      	b.n	8009ed8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	b29b      	uxth	r3, r3
 80099fe:	429a      	cmp	r2, r3
 8009a00:	f080 824f 	bcs.w	8009ea2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	2334      	movs	r3, #52	; 0x34
 8009a10:	fb03 f301 	mul.w	r3, r3, r1
 8009a14:	4413      	add	r3, r2
 8009a16:	3391      	adds	r3, #145	; 0x91
 8009a18:	2201      	movs	r2, #1
 8009a1a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a22:	4619      	mov	r1, r3
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	2334      	movs	r3, #52	; 0x34
 8009a28:	fb03 f301 	mul.w	r3, r3, r1
 8009a2c:	4413      	add	r3, r2
 8009a2e:	3390      	adds	r3, #144	; 0x90
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	2b08      	cmp	r3, #8
 8009a34:	f200 8243 	bhi.w	8009ebe <USBH_MSC_Process+0x4fa>
 8009a38:	a201      	add	r2, pc, #4	; (adr r2, 8009a40 <USBH_MSC_Process+0x7c>)
 8009a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a3e:	bf00      	nop
 8009a40:	08009a65 	.word	0x08009a65
 8009a44:	08009ebf 	.word	0x08009ebf
 8009a48:	08009b2d 	.word	0x08009b2d
 8009a4c:	08009cb1 	.word	0x08009cb1
 8009a50:	08009a8b 	.word	0x08009a8b
 8009a54:	08009d7d 	.word	0x08009d7d
 8009a58:	08009ebf 	.word	0x08009ebf
 8009a5c:	08009ebf 	.word	0x08009ebf
 8009a60:	08009e91 	.word	0x08009e91
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009a64:	693b      	ldr	r3, [r7, #16]
 8009a66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	2334      	movs	r3, #52	; 0x34
 8009a70:	fb03 f301 	mul.w	r3, r3, r1
 8009a74:	4413      	add	r3, r2
 8009a76:	3390      	adds	r3, #144	; 0x90
 8009a78:	2204      	movs	r2, #4
 8009a7a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009a88:	e222      	b.n	8009ed0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a90:	b2d9      	uxtb	r1, r3
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009a98:	461a      	mov	r2, r3
 8009a9a:	2334      	movs	r3, #52	; 0x34
 8009a9c:	fb03 f302 	mul.w	r3, r3, r2
 8009aa0:	3398      	adds	r3, #152	; 0x98
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	3307      	adds	r3, #7
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 ff68 	bl	800a980 <USBH_MSC_SCSI_Inquiry>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d10b      	bne.n	8009ad2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	693a      	ldr	r2, [r7, #16]
 8009ac4:	2334      	movs	r3, #52	; 0x34
 8009ac6:	fb03 f301 	mul.w	r3, r3, r1
 8009aca:	4413      	add	r3, r2
 8009acc:	3390      	adds	r3, #144	; 0x90
 8009ace:	2202      	movs	r2, #2
 8009ad0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d10c      	bne.n	8009af2 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ade:	4619      	mov	r1, r3
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	2334      	movs	r3, #52	; 0x34
 8009ae4:	fb03 f301 	mul.w	r3, r3, r1
 8009ae8:	4413      	add	r3, r2
 8009aea:	3390      	adds	r3, #144	; 0x90
 8009aec:	2205      	movs	r2, #5
 8009aee:	701a      	strb	r2, [r3, #0]
            break;
 8009af0:	e1e7      	b.n	8009ec2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	f040 81e4 	bne.w	8009ec2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b00:	4619      	mov	r1, r3
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	2334      	movs	r3, #52	; 0x34
 8009b06:	fb03 f301 	mul.w	r3, r3, r1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	3390      	adds	r3, #144	; 0x90
 8009b0e:	2201      	movs	r2, #1
 8009b10:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b18:	4619      	mov	r1, r3
 8009b1a:	693a      	ldr	r2, [r7, #16]
 8009b1c:	2334      	movs	r3, #52	; 0x34
 8009b1e:	fb03 f301 	mul.w	r3, r3, r1
 8009b22:	4413      	add	r3, r2
 8009b24:	3391      	adds	r3, #145	; 0x91
 8009b26:	2202      	movs	r2, #2
 8009b28:	701a      	strb	r2, [r3, #0]
            break;
 8009b2a:	e1ca      	b.n	8009ec2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b32:	b2db      	uxtb	r3, r3
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fe64 	bl	800a804 <USBH_MSC_SCSI_TestUnitReady>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d149      	bne.n	8009bda <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b4c:	4619      	mov	r1, r3
 8009b4e:	693a      	ldr	r2, [r7, #16]
 8009b50:	2334      	movs	r3, #52	; 0x34
 8009b52:	fb03 f301 	mul.w	r3, r3, r1
 8009b56:	4413      	add	r3, r2
 8009b58:	3392      	adds	r3, #146	; 0x92
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d00c      	beq.n	8009b7a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b66:	4619      	mov	r1, r3
 8009b68:	693a      	ldr	r2, [r7, #16]
 8009b6a:	2334      	movs	r3, #52	; 0x34
 8009b6c:	fb03 f301 	mul.w	r3, r3, r1
 8009b70:	4413      	add	r3, r2
 8009b72:	33c1      	adds	r3, #193	; 0xc1
 8009b74:	2201      	movs	r2, #1
 8009b76:	701a      	strb	r2, [r3, #0]
 8009b78:	e00b      	b.n	8009b92 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009b7a:	693b      	ldr	r3, [r7, #16]
 8009b7c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b80:	4619      	mov	r1, r3
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	2334      	movs	r3, #52	; 0x34
 8009b86:	fb03 f301 	mul.w	r3, r3, r1
 8009b8a:	4413      	add	r3, r2
 8009b8c:	33c1      	adds	r3, #193	; 0xc1
 8009b8e:	2200      	movs	r2, #0
 8009b90:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009b98:	4619      	mov	r1, r3
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	2334      	movs	r3, #52	; 0x34
 8009b9e:	fb03 f301 	mul.w	r3, r3, r1
 8009ba2:	4413      	add	r3, r2
 8009ba4:	3390      	adds	r3, #144	; 0x90
 8009ba6:	2203      	movs	r2, #3
 8009ba8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	693a      	ldr	r2, [r7, #16]
 8009bb4:	2334      	movs	r3, #52	; 0x34
 8009bb6:	fb03 f301 	mul.w	r3, r3, r1
 8009bba:	4413      	add	r3, r2
 8009bbc:	3391      	adds	r3, #145	; 0x91
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009bc8:	4619      	mov	r1, r3
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	2334      	movs	r3, #52	; 0x34
 8009bce:	fb03 f301 	mul.w	r3, r3, r1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	3392      	adds	r3, #146	; 0x92
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	2b02      	cmp	r3, #2
 8009bde:	d14a      	bne.n	8009c76 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009be6:	4619      	mov	r1, r3
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	2334      	movs	r3, #52	; 0x34
 8009bec:	fb03 f301 	mul.w	r3, r3, r1
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3392      	adds	r3, #146	; 0x92
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d00c      	beq.n	8009c14 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c00:	4619      	mov	r1, r3
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	2334      	movs	r3, #52	; 0x34
 8009c06:	fb03 f301 	mul.w	r3, r3, r1
 8009c0a:	4413      	add	r3, r2
 8009c0c:	33c1      	adds	r3, #193	; 0xc1
 8009c0e:	2201      	movs	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	e00b      	b.n	8009c2c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	2334      	movs	r3, #52	; 0x34
 8009c20:	fb03 f301 	mul.w	r3, r3, r1
 8009c24:	4413      	add	r3, r2
 8009c26:	33c1      	adds	r3, #193	; 0xc1
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c32:	4619      	mov	r1, r3
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	2334      	movs	r3, #52	; 0x34
 8009c38:	fb03 f301 	mul.w	r3, r3, r1
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3390      	adds	r3, #144	; 0x90
 8009c40:	2205      	movs	r2, #5
 8009c42:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	693a      	ldr	r2, [r7, #16]
 8009c4e:	2334      	movs	r3, #52	; 0x34
 8009c50:	fb03 f301 	mul.w	r3, r3, r1
 8009c54:	4413      	add	r3, r2
 8009c56:	3391      	adds	r3, #145	; 0x91
 8009c58:	2201      	movs	r2, #1
 8009c5a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c62:	4619      	mov	r1, r3
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	2334      	movs	r3, #52	; 0x34
 8009c68:	fb03 f301 	mul.w	r3, r3, r1
 8009c6c:	4413      	add	r3, r2
 8009c6e:	3392      	adds	r3, #146	; 0x92
 8009c70:	2202      	movs	r2, #2
 8009c72:	701a      	strb	r2, [r3, #0]
            break;
 8009c74:	e127      	b.n	8009ec6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
 8009c78:	2b04      	cmp	r3, #4
 8009c7a:	f040 8124 	bne.w	8009ec6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c84:	4619      	mov	r1, r3
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	2334      	movs	r3, #52	; 0x34
 8009c8a:	fb03 f301 	mul.w	r3, r3, r1
 8009c8e:	4413      	add	r3, r2
 8009c90:	3390      	adds	r3, #144	; 0x90
 8009c92:	2201      	movs	r2, #1
 8009c94:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	693a      	ldr	r2, [r7, #16]
 8009ca0:	2334      	movs	r3, #52	; 0x34
 8009ca2:	fb03 f301 	mul.w	r3, r3, r1
 8009ca6:	4413      	add	r3, r2
 8009ca8:	3391      	adds	r3, #145	; 0x91
 8009caa:	2202      	movs	r2, #2
 8009cac:	701a      	strb	r2, [r3, #0]
            break;
 8009cae:	e10a      	b.n	8009ec6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cb6:	b2d9      	uxtb	r1, r3
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	2334      	movs	r3, #52	; 0x34
 8009cc2:	fb03 f302 	mul.w	r3, r3, r2
 8009cc6:	3390      	adds	r3, #144	; 0x90
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4413      	add	r3, r2
 8009ccc:	3304      	adds	r3, #4
 8009cce:	461a      	mov	r2, r3
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 fdda 	bl	800a88a <USBH_MSC_SCSI_ReadCapacity>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d120      	bne.n	8009d22 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009ce0:	693b      	ldr	r3, [r7, #16]
 8009ce2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009ce6:	4619      	mov	r1, r3
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	2334      	movs	r3, #52	; 0x34
 8009cec:	fb03 f301 	mul.w	r3, r3, r1
 8009cf0:	4413      	add	r3, r2
 8009cf2:	3390      	adds	r3, #144	; 0x90
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009cfe:	4619      	mov	r1, r3
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	2334      	movs	r3, #52	; 0x34
 8009d04:	fb03 f301 	mul.w	r3, r3, r1
 8009d08:	4413      	add	r3, r2
 8009d0a:	3391      	adds	r3, #145	; 0x91
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d16:	3301      	adds	r3, #1
 8009d18:	b29a      	uxth	r2, r3
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009d20:	e0d3      	b.n	8009eca <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	d10c      	bne.n	8009d42 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d2e:	4619      	mov	r1, r3
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	2334      	movs	r3, #52	; 0x34
 8009d34:	fb03 f301 	mul.w	r3, r3, r1
 8009d38:	4413      	add	r3, r2
 8009d3a:	3390      	adds	r3, #144	; 0x90
 8009d3c:	2205      	movs	r2, #5
 8009d3e:	701a      	strb	r2, [r3, #0]
            break;
 8009d40:	e0c3      	b.n	8009eca <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d42:	7bfb      	ldrb	r3, [r7, #15]
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	f040 80c0 	bne.w	8009eca <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d50:	4619      	mov	r1, r3
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	2334      	movs	r3, #52	; 0x34
 8009d56:	fb03 f301 	mul.w	r3, r3, r1
 8009d5a:	4413      	add	r3, r2
 8009d5c:	3390      	adds	r3, #144	; 0x90
 8009d5e:	2201      	movs	r2, #1
 8009d60:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d68:	4619      	mov	r1, r3
 8009d6a:	693a      	ldr	r2, [r7, #16]
 8009d6c:	2334      	movs	r3, #52	; 0x34
 8009d6e:	fb03 f301 	mul.w	r3, r3, r1
 8009d72:	4413      	add	r3, r2
 8009d74:	3391      	adds	r3, #145	; 0x91
 8009d76:	2202      	movs	r2, #2
 8009d78:	701a      	strb	r2, [r3, #0]
            break;
 8009d7a:	e0a6      	b.n	8009eca <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d82:	b2d9      	uxtb	r1, r3
 8009d84:	693b      	ldr	r3, [r7, #16]
 8009d86:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	2334      	movs	r3, #52	; 0x34
 8009d8e:	fb03 f302 	mul.w	r3, r3, r2
 8009d92:	3398      	adds	r3, #152	; 0x98
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	4413      	add	r3, r2
 8009d98:	3304      	adds	r3, #4
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fe94 	bl	800aaca <USBH_MSC_SCSI_RequestSense>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d145      	bne.n	8009e38 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009db2:	4619      	mov	r1, r3
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	2334      	movs	r3, #52	; 0x34
 8009db8:	fb03 f301 	mul.w	r3, r3, r1
 8009dbc:	4413      	add	r3, r2
 8009dbe:	339c      	adds	r3, #156	; 0x9c
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b06      	cmp	r3, #6
 8009dc4:	d00c      	beq.n	8009de0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dcc:	4619      	mov	r1, r3
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	2334      	movs	r3, #52	; 0x34
 8009dd2:	fb03 f301 	mul.w	r3, r3, r1
 8009dd6:	4413      	add	r3, r2
 8009dd8:	339c      	adds	r3, #156	; 0x9c
 8009dda:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d117      	bne.n	8009e10 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	f242 720f 	movw	r2, #9999	; 0x270f
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d80c      	bhi.n	8009e10 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	693a      	ldr	r2, [r7, #16]
 8009e00:	2334      	movs	r3, #52	; 0x34
 8009e02:	fb03 f301 	mul.w	r3, r3, r1
 8009e06:	4413      	add	r3, r2
 8009e08:	3390      	adds	r3, #144	; 0x90
 8009e0a:	2202      	movs	r2, #2
 8009e0c:	701a      	strb	r2, [r3, #0]
                  break;
 8009e0e:	e05f      	b.n	8009ed0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e16:	4619      	mov	r1, r3
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	2334      	movs	r3, #52	; 0x34
 8009e1c:	fb03 f301 	mul.w	r3, r3, r1
 8009e20:	4413      	add	r3, r2
 8009e22:	3390      	adds	r3, #144	; 0x90
 8009e24:	2201      	movs	r2, #1
 8009e26:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e2e:	3301      	adds	r3, #1
 8009e30:	b29a      	uxth	r2, r3
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d10c      	bne.n	8009e58 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e44:	4619      	mov	r1, r3
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	2334      	movs	r3, #52	; 0x34
 8009e4a:	fb03 f301 	mul.w	r3, r3, r1
 8009e4e:	4413      	add	r3, r2
 8009e50:	3390      	adds	r3, #144	; 0x90
 8009e52:	2208      	movs	r2, #8
 8009e54:	701a      	strb	r2, [r3, #0]
            break;
 8009e56:	e03a      	b.n	8009ece <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d137      	bne.n	8009ece <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e64:	4619      	mov	r1, r3
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	2334      	movs	r3, #52	; 0x34
 8009e6a:	fb03 f301 	mul.w	r3, r3, r1
 8009e6e:	4413      	add	r3, r2
 8009e70:	3390      	adds	r3, #144	; 0x90
 8009e72:	2201      	movs	r2, #1
 8009e74:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	2334      	movs	r3, #52	; 0x34
 8009e82:	fb03 f301 	mul.w	r3, r3, r1
 8009e86:	4413      	add	r3, r2
 8009e88:	3391      	adds	r3, #145	; 0x91
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	701a      	strb	r2, [r3, #0]
            break;
 8009e8e:	e01e      	b.n	8009ece <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009e96:	3301      	adds	r3, #1
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009ea0:	e016      	b.n	8009ed0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	2201      	movs	r2, #1
 8009eae:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009eb6:	2102      	movs	r1, #2
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	4798      	blx	r3
      break;
 8009ebc:	e00c      	b.n	8009ed8 <USBH_MSC_Process+0x514>
            break;
 8009ebe:	bf00      	nop
 8009ec0:	e00a      	b.n	8009ed8 <USBH_MSC_Process+0x514>
            break;
 8009ec2:	bf00      	nop
 8009ec4:	e008      	b.n	8009ed8 <USBH_MSC_Process+0x514>
            break;
 8009ec6:	bf00      	nop
 8009ec8:	e006      	b.n	8009ed8 <USBH_MSC_Process+0x514>
            break;
 8009eca:	bf00      	nop
 8009ecc:	e004      	b.n	8009ed8 <USBH_MSC_Process+0x514>
            break;
 8009ece:	bf00      	nop
      break;
 8009ed0:	e002      	b.n	8009ed8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ed6:	bf00      	nop
  }
  return error;
 8009ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop

08009ee4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	370c      	adds	r7, #12
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr

08009efa <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b088      	sub	sp, #32
 8009efe:	af02      	add	r7, sp, #8
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	460b      	mov	r3, r1
 8009f04:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f0c:	69db      	ldr	r3, [r3, #28]
 8009f0e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8009f10:	2301      	movs	r3, #1
 8009f12:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8009f14:	2301      	movs	r3, #1
 8009f16:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	2134      	movs	r1, #52	; 0x34
 8009f1e:	fb01 f303 	mul.w	r3, r1, r3
 8009f22:	4413      	add	r3, r2
 8009f24:	3390      	adds	r3, #144	; 0x90
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	2b06      	cmp	r3, #6
 8009f2a:	d004      	beq.n	8009f36 <USBH_MSC_RdWrProcess+0x3c>
 8009f2c:	2b07      	cmp	r3, #7
 8009f2e:	d037      	beq.n	8009fa0 <USBH_MSC_RdWrProcess+0xa6>
 8009f30:	2b05      	cmp	r3, #5
 8009f32:	d06a      	beq.n	800a00a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8009f34:	e0a6      	b.n	800a084 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8009f36:	78f9      	ldrb	r1, [r7, #3]
 8009f38:	2300      	movs	r3, #0
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fea6 	bl	800ac92 <USBH_MSC_SCSI_Read>
 8009f46:	4603      	mov	r3, r0
 8009f48:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009f4a:	7bfb      	ldrb	r3, [r7, #15]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10b      	bne.n	8009f68 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	693a      	ldr	r2, [r7, #16]
 8009f54:	2134      	movs	r1, #52	; 0x34
 8009f56:	fb01 f303 	mul.w	r3, r1, r3
 8009f5a:	4413      	add	r3, r2
 8009f5c:	3390      	adds	r3, #144	; 0x90
 8009f5e:	2201      	movs	r2, #1
 8009f60:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009f62:	2300      	movs	r3, #0
 8009f64:	75fb      	strb	r3, [r7, #23]
      break;
 8009f66:	e088      	b.n	800a07a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d109      	bne.n	8009f82 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009f6e:	78fb      	ldrb	r3, [r7, #3]
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	2134      	movs	r1, #52	; 0x34
 8009f74:	fb01 f303 	mul.w	r3, r1, r3
 8009f78:	4413      	add	r3, r2
 8009f7a:	3390      	adds	r3, #144	; 0x90
 8009f7c:	2205      	movs	r2, #5
 8009f7e:	701a      	strb	r2, [r3, #0]
      break;
 8009f80:	e07b      	b.n	800a07a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009f82:	7bfb      	ldrb	r3, [r7, #15]
 8009f84:	2b04      	cmp	r3, #4
 8009f86:	d178      	bne.n	800a07a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009f88:	78fb      	ldrb	r3, [r7, #3]
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	2134      	movs	r1, #52	; 0x34
 8009f8e:	fb01 f303 	mul.w	r3, r1, r3
 8009f92:	4413      	add	r3, r2
 8009f94:	3390      	adds	r3, #144	; 0x90
 8009f96:	2208      	movs	r2, #8
 8009f98:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f9e:	e06c      	b.n	800a07a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009fa0:	78f9      	ldrb	r1, [r7, #3]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	2200      	movs	r2, #0
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fe06 	bl	800abbc <USBH_MSC_SCSI_Write>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009fb4:	7bfb      	ldrb	r3, [r7, #15]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d10b      	bne.n	8009fd2 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	2134      	movs	r1, #52	; 0x34
 8009fc0:	fb01 f303 	mul.w	r3, r1, r3
 8009fc4:	4413      	add	r3, r2
 8009fc6:	3390      	adds	r3, #144	; 0x90
 8009fc8:	2201      	movs	r2, #1
 8009fca:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd0:	e055      	b.n	800a07e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8009fd2:	7bfb      	ldrb	r3, [r7, #15]
 8009fd4:	2b02      	cmp	r3, #2
 8009fd6:	d109      	bne.n	8009fec <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009fd8:	78fb      	ldrb	r3, [r7, #3]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	2134      	movs	r1, #52	; 0x34
 8009fde:	fb01 f303 	mul.w	r3, r1, r3
 8009fe2:	4413      	add	r3, r2
 8009fe4:	3390      	adds	r3, #144	; 0x90
 8009fe6:	2205      	movs	r2, #5
 8009fe8:	701a      	strb	r2, [r3, #0]
      break;
 8009fea:	e048      	b.n	800a07e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	d145      	bne.n	800a07e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009ff2:	78fb      	ldrb	r3, [r7, #3]
 8009ff4:	693a      	ldr	r2, [r7, #16]
 8009ff6:	2134      	movs	r1, #52	; 0x34
 8009ff8:	fb01 f303 	mul.w	r3, r1, r3
 8009ffc:	4413      	add	r3, r2
 8009ffe:	3390      	adds	r3, #144	; 0x90
 800a000:	2208      	movs	r2, #8
 800a002:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a004:	2302      	movs	r3, #2
 800a006:	75fb      	strb	r3, [r7, #23]
      break;
 800a008:	e039      	b.n	800a07e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800a00a:	78fb      	ldrb	r3, [r7, #3]
 800a00c:	2234      	movs	r2, #52	; 0x34
 800a00e:	fb02 f303 	mul.w	r3, r2, r3
 800a012:	3398      	adds	r3, #152	; 0x98
 800a014:	693a      	ldr	r2, [r7, #16]
 800a016:	4413      	add	r3, r2
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	78fb      	ldrb	r3, [r7, #3]
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f000 fd53 	bl	800aaca <USBH_MSC_SCSI_RequestSense>
 800a024:	4603      	mov	r3, r0
 800a026:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800a028:	7bfb      	ldrb	r3, [r7, #15]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d113      	bne.n	800a056 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800a02e:	78fb      	ldrb	r3, [r7, #3]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	2134      	movs	r1, #52	; 0x34
 800a034:	fb01 f303 	mul.w	r3, r1, r3
 800a038:	4413      	add	r3, r2
 800a03a:	3390      	adds	r3, #144	; 0x90
 800a03c:	2201      	movs	r2, #1
 800a03e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800a040:	78fb      	ldrb	r3, [r7, #3]
 800a042:	693a      	ldr	r2, [r7, #16]
 800a044:	2134      	movs	r1, #52	; 0x34
 800a046:	fb01 f303 	mul.w	r3, r1, r3
 800a04a:	4413      	add	r3, r2
 800a04c:	3391      	adds	r3, #145	; 0x91
 800a04e:	2202      	movs	r2, #2
 800a050:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800a052:	2302      	movs	r3, #2
 800a054:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800a056:	7bfb      	ldrb	r3, [r7, #15]
 800a058:	2b02      	cmp	r3, #2
 800a05a:	d012      	beq.n	800a082 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	2b04      	cmp	r3, #4
 800a060:	d10f      	bne.n	800a082 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800a062:	78fb      	ldrb	r3, [r7, #3]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	2134      	movs	r1, #52	; 0x34
 800a068:	fb01 f303 	mul.w	r3, r1, r3
 800a06c:	4413      	add	r3, r2
 800a06e:	3390      	adds	r3, #144	; 0x90
 800a070:	2208      	movs	r2, #8
 800a072:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800a074:	2302      	movs	r3, #2
 800a076:	75fb      	strb	r3, [r7, #23]
      break;
 800a078:	e003      	b.n	800a082 <USBH_MSC_RdWrProcess+0x188>
      break;
 800a07a:	bf00      	nop
 800a07c:	e002      	b.n	800a084 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800a07e:	bf00      	nop
 800a080:	e000      	b.n	800a084 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800a082:	bf00      	nop

  }
  return error;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
}
 800a086:	4618      	mov	r0, r3
 800a088:	3718      	adds	r7, #24
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a08e:	b480      	push	{r7}
 800a090:	b085      	sub	sp, #20
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	2b0b      	cmp	r3, #11
 800a0ac:	d10c      	bne.n	800a0c8 <USBH_MSC_UnitIsReady+0x3a>
 800a0ae:	78fb      	ldrb	r3, [r7, #3]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	2134      	movs	r1, #52	; 0x34
 800a0b4:	fb01 f303 	mul.w	r3, r1, r3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	3391      	adds	r3, #145	; 0x91
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d102      	bne.n	800a0c8 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	e001      	b.n	800a0cc <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3714      	adds	r7, #20
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b086      	sub	sp, #24
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	60f8      	str	r0, [r7, #12]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	607a      	str	r2, [r7, #4]
 800a0e6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	b2db      	uxtb	r3, r3
 800a0f8:	2b0b      	cmp	r3, #11
 800a0fa:	d10d      	bne.n	800a118 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800a0fc:	7afb      	ldrb	r3, [r7, #11]
 800a0fe:	2234      	movs	r2, #52	; 0x34
 800a100:	fb02 f303 	mul.w	r3, r2, r3
 800a104:	3390      	adds	r3, #144	; 0x90
 800a106:	697a      	ldr	r2, [r7, #20]
 800a108:	4413      	add	r3, r2
 800a10a:	2234      	movs	r2, #52	; 0x34
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f005 f880 	bl	800f214 <memcpy>
    return USBH_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	e000      	b.n	800a11a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800a118:	2302      	movs	r3, #2
  }
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b088      	sub	sp, #32
 800a126:	af02      	add	r7, sp, #8
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	460b      	mov	r3, r1
 800a130:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a142:	b2db      	uxtb	r3, r3
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00e      	beq.n	800a166 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a14e:	2b0b      	cmp	r3, #11
 800a150:	d109      	bne.n	800a166 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	697a      	ldr	r2, [r7, #20]
 800a156:	2134      	movs	r1, #52	; 0x34
 800a158:	fb01 f303 	mul.w	r3, r1, r3
 800a15c:	4413      	add	r3, r2
 800a15e:	3390      	adds	r3, #144	; 0x90
 800a160:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a162:	2b01      	cmp	r3, #1
 800a164:	d001      	beq.n	800a16a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800a166:	2302      	movs	r3, #2
 800a168:	e040      	b.n	800a1ec <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2206      	movs	r2, #6
 800a16e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800a170:	7afb      	ldrb	r3, [r7, #11]
 800a172:	697a      	ldr	r2, [r7, #20]
 800a174:	2134      	movs	r1, #52	; 0x34
 800a176:	fb01 f303 	mul.w	r3, r1, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	3390      	adds	r3, #144	; 0x90
 800a17e:	2206      	movs	r2, #6
 800a180:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a182:	7afb      	ldrb	r3, [r7, #11]
 800a184:	b29a      	uxth	r2, r3
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800a18c:	7af9      	ldrb	r1, [r7, #11]
 800a18e:	6a3b      	ldr	r3, [r7, #32]
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fd7b 	bl	800ac92 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a1a2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a1a4:	e016      	b.n	800a1d4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	6a3b      	ldr	r3, [r7, #32]
 800a1b2:	f242 7110 	movw	r1, #10000	; 0x2710
 800a1b6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d805      	bhi.n	800a1ca <USBH_MSC_Read+0xa8>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d104      	bne.n	800a1d4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e00b      	b.n	800a1ec <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a1d4:	7afb      	ldrb	r3, [r7, #11]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fe8e 	bl	8009efa <USBH_MSC_RdWrProcess>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d0e0      	beq.n	800a1a6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3718      	adds	r7, #24
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}

0800a1f4 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b088      	sub	sp, #32
 800a1f8:	af02      	add	r7, sp, #8
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	607a      	str	r2, [r7, #4]
 800a1fe:	603b      	str	r3, [r7, #0]
 800a200:	460b      	mov	r3, r1
 800a202:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a20a:	69db      	ldr	r3, [r3, #28]
 800a20c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00e      	beq.n	800a238 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800a220:	2b0b      	cmp	r3, #11
 800a222:	d109      	bne.n	800a238 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800a224:	7afb      	ldrb	r3, [r7, #11]
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	2134      	movs	r1, #52	; 0x34
 800a22a:	fb01 f303 	mul.w	r3, r1, r3
 800a22e:	4413      	add	r3, r2
 800a230:	3390      	adds	r3, #144	; 0x90
 800a232:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800a234:	2b01      	cmp	r3, #1
 800a236:	d001      	beq.n	800a23c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800a238:	2302      	movs	r3, #2
 800a23a:	e040      	b.n	800a2be <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	2207      	movs	r2, #7
 800a240:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800a242:	7afb      	ldrb	r3, [r7, #11]
 800a244:	697a      	ldr	r2, [r7, #20]
 800a246:	2134      	movs	r1, #52	; 0x34
 800a248:	fb01 f303 	mul.w	r3, r1, r3
 800a24c:	4413      	add	r3, r2
 800a24e:	3390      	adds	r3, #144	; 0x90
 800a250:	2207      	movs	r2, #7
 800a252:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800a254:	7afb      	ldrb	r3, [r7, #11]
 800a256:	b29a      	uxth	r2, r3
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800a25e:	7af9      	ldrb	r1, [r7, #11]
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	687a      	ldr	r2, [r7, #4]
 800a268:	68f8      	ldr	r0, [r7, #12]
 800a26a:	f000 fca7 	bl	800abbc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a274:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a276:	e016      	b.n	800a2a6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad2      	subs	r2, r2, r3
 800a282:	6a3b      	ldr	r3, [r7, #32]
 800a284:	f242 7110 	movw	r1, #10000	; 0x2710
 800a288:	fb01 f303 	mul.w	r3, r1, r3
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d805      	bhi.n	800a29c <USBH_MSC_Write+0xa8>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a296:	b2db      	uxtb	r3, r3
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d104      	bne.n	800a2a6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800a29c:	697b      	ldr	r3, [r7, #20]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e00b      	b.n	800a2be <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800a2a6:	7afb      	ldrb	r3, [r7, #11]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f7ff fe25 	bl	8009efa <USBH_MSC_RdWrProcess>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d0e0      	beq.n	800a278 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3718      	adds	r7, #24
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}

0800a2c6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b082      	sub	sp, #8
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2221      	movs	r2, #33	; 0x21
 800a2d2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	22ff      	movs	r2, #255	; 0xff
 800a2d8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2100      	movs	r1, #0
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fdae 	bl	800be52 <USBH_CtlReq>
 800a2f6:	4603      	mov	r3, r0
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3708      	adds	r7, #8
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}

0800a300 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
 800a308:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	22a1      	movs	r2, #161	; 0xa1
 800a30e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	22fe      	movs	r2, #254	; 0xfe
 800a314:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2200      	movs	r2, #0
 800a320:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2201      	movs	r2, #1
 800a326:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a328:	2201      	movs	r2, #1
 800a32a:	6839      	ldr	r1, [r7, #0]
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f001 fd90 	bl	800be52 <USBH_CtlReq>
 800a332:	4603      	mov	r3, r0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3708      	adds	r7, #8
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a34a:	69db      	ldr	r3, [r3, #28]
 800a34c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	4a09      	ldr	r2, [pc, #36]	; (800a378 <USBH_MSC_BOT_Init+0x3c>)
 800a352:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a09      	ldr	r2, [pc, #36]	; (800a37c <USBH_MSC_BOT_Init+0x40>)
 800a358:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr
 800a378:	43425355 	.word	0x43425355
 800a37c:	20304050 	.word	0x20304050

0800a380 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b088      	sub	sp, #32
 800a384:	af02      	add	r7, sp, #8
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a38c:	2301      	movs	r3, #1
 800a38e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a390:	2301      	movs	r3, #1
 800a392:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a394:	2301      	movs	r3, #1
 800a396:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a398:	2300      	movs	r3, #0
 800a39a:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a3a2:	69db      	ldr	r3, [r3, #28]
 800a3a4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3b0:	3b01      	subs	r3, #1
 800a3b2:	2b0a      	cmp	r3, #10
 800a3b4:	f200 81a1 	bhi.w	800a6fa <USBH_MSC_BOT_Process+0x37a>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <USBH_MSC_BOT_Process+0x40>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3ed 	.word	0x0800a3ed
 800a3c4:	0800a417 	.word	0x0800a417
 800a3c8:	0800a481 	.word	0x0800a481
 800a3cc:	0800a49f 	.word	0x0800a49f
 800a3d0:	0800a523 	.word	0x0800a523
 800a3d4:	0800a547 	.word	0x0800a547
 800a3d8:	0800a5e1 	.word	0x0800a5e1
 800a3dc:	0800a5fd 	.word	0x0800a5fd
 800a3e0:	0800a64f 	.word	0x0800a64f
 800a3e4:	0800a67f 	.word	0x0800a67f
 800a3e8:	0800a6e1 	.word	0x0800a6e1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	78fa      	ldrb	r2, [r7, #3]
 800a3f0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2202      	movs	r2, #2
 800a3f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	795a      	ldrb	r2, [r3, #5]
 800a406:	2301      	movs	r3, #1
 800a408:	9300      	str	r3, [sp, #0]
 800a40a:	4613      	mov	r3, r2
 800a40c:	221f      	movs	r2, #31
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 ff2f 	bl	800c272 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a414:	e180      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	795b      	ldrb	r3, [r3, #5]
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f004 fddb 	bl	800efd8 <USBH_LL_GetURBState>
 800a422:	4603      	mov	r3, r0
 800a424:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a426:	7d3b      	ldrb	r3, [r7, #20]
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d118      	bne.n	800a45e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a430:	2b00      	cmp	r3, #0
 800a432:	d00f      	beq.n	800a454 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800a43a:	b25b      	sxtb	r3, r3
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	da04      	bge.n	800a44a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	2203      	movs	r2, #3
 800a444:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a448:	e159      	b.n	800a6fe <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	2205      	movs	r2, #5
 800a44e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a452:	e154      	b.n	800a6fe <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	2207      	movs	r2, #7
 800a458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a45c:	e14f      	b.n	800a6fe <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a45e:	7d3b      	ldrb	r3, [r7, #20]
 800a460:	2b02      	cmp	r3, #2
 800a462:	d104      	bne.n	800a46e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a46c:	e147      	b.n	800a6fe <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800a46e:	7d3b      	ldrb	r3, [r7, #20]
 800a470:	2b05      	cmp	r3, #5
 800a472:	f040 8144 	bne.w	800a6fe <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a476:	693b      	ldr	r3, [r7, #16]
 800a478:	220a      	movs	r2, #10
 800a47a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a47e:	e13e      	b.n	800a6fe <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	895a      	ldrh	r2, [r3, #10]
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	791b      	ldrb	r3, [r3, #4]
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f001 ff14 	bl	800c2bc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	2204      	movs	r2, #4
 800a498:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800a49c:	e13c      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f004 fd97 	bl	800efd8 <USBH_LL_GetURBState>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a4ae:	7d3b      	ldrb	r3, [r7, #20]
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d12d      	bne.n	800a510 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	8952      	ldrh	r2, [r2, #10]
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d910      	bls.n	800a4e2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	8952      	ldrh	r2, [r2, #10]
 800a4ca:	441a      	add	r2, r3
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d6:	693a      	ldr	r2, [r7, #16]
 800a4d8:	8952      	ldrh	r2, [r2, #10]
 800a4da:	1a9a      	subs	r2, r3, r2
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	65da      	str	r2, [r3, #92]	; 0x5c
 800a4e0:	e002      	b.n	800a4e8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	895a      	ldrh	r2, [r3, #10]
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	791b      	ldrb	r3, [r3, #4]
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 fedc 	bl	800c2bc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a504:	e0fd      	b.n	800a702 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	2207      	movs	r2, #7
 800a50a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a50e:	e0f8      	b.n	800a702 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 800a510:	7d3b      	ldrb	r3, [r7, #20]
 800a512:	2b05      	cmp	r3, #5
 800a514:	f040 80f5 	bne.w	800a702 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	2209      	movs	r2, #9
 800a51c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a520:	e0ef      	b.n	800a702 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	891a      	ldrh	r2, [r3, #8]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	7958      	ldrb	r0, [r3, #5]
 800a530:	2301      	movs	r3, #1
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	4603      	mov	r3, r0
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f001 fe9b 	bl	800c272 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	2206      	movs	r2, #6
 800a540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a544:	e0e8      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	795b      	ldrb	r3, [r3, #5]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f004 fd43 	bl	800efd8 <USBH_LL_GetURBState>
 800a552:	4603      	mov	r3, r0
 800a554:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a556:	7d3b      	ldrb	r3, [r7, #20]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d130      	bne.n	800a5be <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a560:	693a      	ldr	r2, [r7, #16]
 800a562:	8912      	ldrh	r2, [r2, #8]
 800a564:	4293      	cmp	r3, r2
 800a566:	d910      	bls.n	800a58a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	8912      	ldrh	r2, [r2, #8]
 800a572:	441a      	add	r2, r3
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a57e:	693a      	ldr	r2, [r7, #16]
 800a580:	8912      	ldrh	r2, [r2, #8]
 800a582:	1a9a      	subs	r2, r3, r2
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	65da      	str	r2, [r3, #92]	; 0x5c
 800a588:	e002      	b.n	800a590 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2200      	movs	r2, #0
 800a58e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a594:	2b00      	cmp	r3, #0
 800a596:	d00d      	beq.n	800a5b4 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	891a      	ldrh	r2, [r3, #8]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	7958      	ldrb	r0, [r3, #5]
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f001 fe60 	bl	800c272 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a5b2:	e0a8      	b.n	800a706 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2207      	movs	r2, #7
 800a5b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a5bc:	e0a3      	b.n	800a706 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5be:	7d3b      	ldrb	r3, [r7, #20]
 800a5c0:	2b02      	cmp	r3, #2
 800a5c2:	d104      	bne.n	800a5ce <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	2205      	movs	r2, #5
 800a5c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a5cc:	e09b      	b.n	800a706 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 800a5ce:	7d3b      	ldrb	r3, [r7, #20]
 800a5d0:	2b05      	cmp	r3, #5
 800a5d2:	f040 8098 	bne.w	800a706 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	220a      	movs	r2, #10
 800a5da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a5de:	e092      	b.n	800a706 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	791b      	ldrb	r3, [r3, #4]
 800a5ea:	220d      	movs	r2, #13
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 fe65 	bl	800c2bc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	2208      	movs	r2, #8
 800a5f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a5fa:	e08d      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f004 fce8 	bl	800efd8 <USBH_LL_GetURBState>
 800a608:	4603      	mov	r3, r0
 800a60a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a60c:	7d3b      	ldrb	r3, [r7, #20]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d115      	bne.n	800a63e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f8aa 	bl	800a77c <USBH_MSC_DecodeCSW>
 800a628:	4603      	mov	r3, r0
 800a62a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a62c:	7d7b      	ldrb	r3, [r7, #21]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d102      	bne.n	800a638 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800a632:	2300      	movs	r3, #0
 800a634:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a636:	e068      	b.n	800a70a <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 800a638:	2302      	movs	r3, #2
 800a63a:	75fb      	strb	r3, [r7, #23]
      break;
 800a63c:	e065      	b.n	800a70a <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800a63e:	7d3b      	ldrb	r3, [r7, #20]
 800a640:	2b05      	cmp	r3, #5
 800a642:	d162      	bne.n	800a70a <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	2209      	movs	r2, #9
 800a648:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a64c:	e05d      	b.n	800a70a <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a64e:	78fb      	ldrb	r3, [r7, #3]
 800a650:	2200      	movs	r2, #0
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f865 	bl	800a724 <USBH_MSC_BOT_Abort>
 800a65a:	4603      	mov	r3, r0
 800a65c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a65e:	7dbb      	ldrb	r3, [r7, #22]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d104      	bne.n	800a66e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	2207      	movs	r2, #7
 800a668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a66c:	e04f      	b.n	800a70e <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a66e:	7dbb      	ldrb	r3, [r7, #22]
 800a670:	2b04      	cmp	r3, #4
 800a672:	d14c      	bne.n	800a70e <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	220b      	movs	r2, #11
 800a678:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a67c:	e047      	b.n	800a70e <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a67e:	78fb      	ldrb	r3, [r7, #3]
 800a680:	2201      	movs	r2, #1
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 f84d 	bl	800a724 <USBH_MSC_BOT_Abort>
 800a68a:	4603      	mov	r3, r0
 800a68c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a68e:	7dbb      	ldrb	r3, [r7, #22]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d11d      	bne.n	800a6d0 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	795b      	ldrb	r3, [r3, #5]
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f004 fcf9 	bl	800f092 <USBH_LL_GetToggle>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	7959      	ldrb	r1, [r3, #5]
 800a6a8:	7bfb      	ldrb	r3, [r7, #15]
 800a6aa:	f1c3 0301 	rsb	r3, r3, #1
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f004 fcba 	bl	800f02c <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	791b      	ldrb	r3, [r3, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f004 fcb3 	bl	800f02c <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	2209      	movs	r2, #9
 800a6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a6ce:	e020      	b.n	800a712 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 800a6d0:	7dbb      	ldrb	r3, [r7, #22]
 800a6d2:	2b04      	cmp	r3, #4
 800a6d4:	d11d      	bne.n	800a712 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	220b      	movs	r2, #11
 800a6da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800a6de:	e018      	b.n	800a712 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f7ff fdf0 	bl	800a2c6 <USBH_MSC_BOT_REQ_Reset>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a6ea:	7dfb      	ldrb	r3, [r7, #23]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d112      	bne.n	800a716 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800a6f8:	e00d      	b.n	800a716 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 800a6fa:	bf00      	nop
 800a6fc:	e00c      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a6fe:	bf00      	nop
 800a700:	e00a      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a702:	bf00      	nop
 800a704:	e008      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a706:	bf00      	nop
 800a708:	e006      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a70a:	bf00      	nop
 800a70c:	e004      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a70e:	bf00      	nop
 800a710:	e002      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a712:	bf00      	nop
 800a714:	e000      	b.n	800a718 <USBH_MSC_BOT_Process+0x398>
      break;
 800a716:	bf00      	nop
  }
  return status;
 800a718:	7dfb      	ldrb	r3, [r7, #23]
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop

0800a724 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	460b      	mov	r3, r1
 800a72e:	70fb      	strb	r3, [r7, #3]
 800a730:	4613      	mov	r3, r2
 800a732:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a734:	2302      	movs	r3, #2
 800a736:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a73e:	69db      	ldr	r3, [r3, #28]
 800a740:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a742:	78bb      	ldrb	r3, [r7, #2]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <USBH_MSC_BOT_Abort+0x2a>
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d009      	beq.n	800a760 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a74c:	e011      	b.n	800a772 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	79db      	ldrb	r3, [r3, #7]
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f001 f99c 	bl	800ba92 <USBH_ClrFeature>
 800a75a:	4603      	mov	r3, r0
 800a75c:	73fb      	strb	r3, [r7, #15]
      break;
 800a75e:	e008      	b.n	800a772 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	799b      	ldrb	r3, [r3, #6]
 800a764:	4619      	mov	r1, r3
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 f993 	bl	800ba92 <USBH_ClrFeature>
 800a76c:	4603      	mov	r3, r0
 800a76e:	73fb      	strb	r3, [r7, #15]
      break;
 800a770:	bf00      	nop
  }
  return status;
 800a772:	7bfb      	ldrb	r3, [r7, #15]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a78a:	69db      	ldr	r3, [r3, #28]
 800a78c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a78e:	2301      	movs	r3, #1
 800a790:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	791b      	ldrb	r3, [r3, #4]
 800a796:	4619      	mov	r1, r3
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f004 fb8b 	bl	800eeb4 <USBH_LL_GetLastXferSize>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b0d      	cmp	r3, #13
 800a7a2:	d002      	beq.n	800a7aa <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	73fb      	strb	r3, [r7, #15]
 800a7a8:	e024      	b.n	800a7f4 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ae:	4a14      	ldr	r2, [pc, #80]	; (800a800 <USBH_MSC_DecodeCSW+0x84>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d11d      	bne.n	800a7f0 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d119      	bne.n	800a7f4 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d102      	bne.n	800a7d0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	73fb      	strb	r3, [r7, #15]
 800a7ce:	e011      	b.n	800a7f4 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a7d0:	68bb      	ldr	r3, [r7, #8]
 800a7d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d102      	bne.n	800a7e0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	73fb      	strb	r3, [r7, #15]
 800a7de:	e009      	b.n	800a7f4 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d104      	bne.n	800a7f4 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a7ea:	2302      	movs	r3, #2
 800a7ec:	73fb      	strb	r3, [r7, #15]
 800a7ee:	e001      	b.n	800a7f4 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	53425355 	.word	0x53425355

0800a804 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a810:	2302      	movs	r3, #2
 800a812:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a81a:	69db      	ldr	r3, [r3, #28]
 800a81c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a824:	2b01      	cmp	r3, #1
 800a826:	d002      	beq.n	800a82e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d021      	beq.n	800a870 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a82c:	e028      	b.n	800a880 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	220a      	movs	r2, #10
 800a840:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	3363      	adds	r3, #99	; 0x63
 800a848:	2210      	movs	r2, #16
 800a84a:	2100      	movs	r1, #0
 800a84c:	4618      	mov	r0, r3
 800a84e:	f004 fcec 	bl	800f22a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2201      	movs	r2, #1
 800a85e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	2202      	movs	r2, #2
 800a866:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800a86a:	2301      	movs	r3, #1
 800a86c:	73fb      	strb	r3, [r7, #15]
      break;
 800a86e:	e007      	b.n	800a880 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a870:	78fb      	ldrb	r3, [r7, #3]
 800a872:	4619      	mov	r1, r3
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f7ff fd83 	bl	800a380 <USBH_MSC_BOT_Process>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73fb      	strb	r3, [r7, #15]
      break;
 800a87e:	bf00      	nop
  }

  return error;
 800a880:	7bfb      	ldrb	r3, [r7, #15]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b086      	sub	sp, #24
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	460b      	mov	r3, r1
 800a894:	607a      	str	r2, [r7, #4]
 800a896:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800a898:	2301      	movs	r3, #1
 800a89a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8a2:	69db      	ldr	r3, [r3, #28]
 800a8a4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d002      	beq.n	800a8b6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d027      	beq.n	800a904 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a8b4:	e05f      	b.n	800a976 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	2208      	movs	r2, #8
 800a8ba:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2280      	movs	r2, #128	; 0x80
 800a8c0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	220a      	movs	r2, #10
 800a8c8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a8cc:	693b      	ldr	r3, [r7, #16]
 800a8ce:	3363      	adds	r3, #99	; 0x63
 800a8d0:	2210      	movs	r2, #16
 800a8d2:	2100      	movs	r1, #0
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f004 fca8 	bl	800f22a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	2225      	movs	r2, #37	; 0x25
 800a8de:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	2202      	movs	r2, #2
 800a8ee:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a8f2:	693b      	ldr	r3, [r7, #16]
 800a8f4:	f103 0210 	add.w	r2, r3, #16
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a8fe:	2301      	movs	r3, #1
 800a900:	75fb      	strb	r3, [r7, #23]
      break;
 800a902:	e038      	b.n	800a976 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a904:	7afb      	ldrb	r3, [r7, #11]
 800a906:	4619      	mov	r1, r3
 800a908:	68f8      	ldr	r0, [r7, #12]
 800a90a:	f7ff fd39 	bl	800a380 <USBH_MSC_BOT_Process>
 800a90e:	4603      	mov	r3, r0
 800a910:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a912:	7dfb      	ldrb	r3, [r7, #23]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d12d      	bne.n	800a974 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a91e:	3303      	adds	r3, #3
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	461a      	mov	r2, r3
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a92a:	3302      	adds	r3, #2
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a938:	3301      	adds	r3, #1
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a93e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	061b      	lsls	r3, r3, #24
 800a94a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a956:	3307      	adds	r3, #7
 800a958:	781b      	ldrb	r3, [r3, #0]
 800a95a:	b29a      	uxth	r2, r3
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a962:	3306      	adds	r3, #6
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	b29b      	uxth	r3, r3
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	4313      	orrs	r3, r2
 800a96e:	b29a      	uxth	r2, r3
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	809a      	strh	r2, [r3, #4]
      break;
 800a974:	bf00      	nop
  }

  return error;
 800a976:	7dfb      	ldrb	r3, [r7, #23]
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3718      	adds	r7, #24
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bd80      	pop	{r7, pc}

0800a980 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	460b      	mov	r3, r1
 800a98a:	607a      	str	r2, [r7, #4]
 800a98c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a98e:	2302      	movs	r3, #2
 800a990:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d002      	beq.n	800a9ac <USBH_MSC_SCSI_Inquiry+0x2c>
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d03d      	beq.n	800aa26 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a9aa:	e089      	b.n	800aac0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	2224      	movs	r2, #36	; 0x24
 800a9b0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	2280      	movs	r2, #128	; 0x80
 800a9b6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	220a      	movs	r2, #10
 800a9be:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	3363      	adds	r3, #99	; 0x63
 800a9c6:	220a      	movs	r2, #10
 800a9c8:	2100      	movs	r1, #0
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f004 fc2d 	bl	800f22a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	2212      	movs	r2, #18
 800a9d4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a9d8:	7afb      	ldrb	r3, [r7, #11]
 800a9da:	015b      	lsls	r3, r3, #5
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800a9f4:	693b      	ldr	r3, [r7, #16]
 800a9f6:	2224      	movs	r2, #36	; 0x24
 800a9f8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	2201      	movs	r2, #1
 800aa08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	2202      	movs	r2, #2
 800aa10:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f103 0210 	add.w	r2, r3, #16
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800aa20:	2301      	movs	r3, #1
 800aa22:	75fb      	strb	r3, [r7, #23]
      break;
 800aa24:	e04c      	b.n	800aac0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800aa26:	7afb      	ldrb	r3, [r7, #11]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f7ff fca8 	bl	800a380 <USBH_MSC_BOT_Process>
 800aa30:	4603      	mov	r3, r0
 800aa32:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d141      	bne.n	800aabe <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800aa3a:	2222      	movs	r2, #34	; 0x22
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f004 fbf3 	bl	800f22a <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	f003 031f 	and.w	r3, r3, #31
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	095b      	lsrs	r3, r3, #5
 800aa60:	b2da      	uxtb	r2, r3
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	b25b      	sxtb	r3, r3
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	da03      	bge.n	800aa7e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	709a      	strb	r2, [r3, #2]
 800aa7c:	e002      	b.n	800aa84 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	1cd8      	adds	r0, r3, #3
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa8e:	3308      	adds	r3, #8
 800aa90:	2208      	movs	r2, #8
 800aa92:	4619      	mov	r1, r3
 800aa94:	f004 fbbe 	bl	800f214 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	f103 000c 	add.w	r0, r3, #12
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa4:	3310      	adds	r3, #16
 800aaa6:	2210      	movs	r2, #16
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	f004 fbb3 	bl	800f214 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	331d      	adds	r3, #29
 800aab2:	693a      	ldr	r2, [r7, #16]
 800aab4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800aab8:	3220      	adds	r2, #32
 800aaba:	6812      	ldr	r2, [r2, #0]
 800aabc:	601a      	str	r2, [r3, #0]
      break;
 800aabe:	bf00      	nop
  }

  return error;
 800aac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800aac2:	4618      	mov	r0, r3
 800aac4:	3718      	adds	r7, #24
 800aac6:	46bd      	mov	sp, r7
 800aac8:	bd80      	pop	{r7, pc}

0800aaca <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	60f8      	str	r0, [r7, #12]
 800aad2:	460b      	mov	r3, r1
 800aad4:	607a      	str	r2, [r7, #4]
 800aad6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aad8:	2302      	movs	r3, #2
 800aada:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aae2:	69db      	ldr	r3, [r3, #28]
 800aae4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800aae6:	693b      	ldr	r3, [r7, #16]
 800aae8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d002      	beq.n	800aaf6 <USBH_MSC_SCSI_RequestSense+0x2c>
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d03d      	beq.n	800ab70 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800aaf4:	e05d      	b.n	800abb2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	220e      	movs	r2, #14
 800aafa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800aafc:	693b      	ldr	r3, [r7, #16]
 800aafe:	2280      	movs	r2, #128	; 0x80
 800ab00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	220a      	movs	r2, #10
 800ab08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	3363      	adds	r3, #99	; 0x63
 800ab10:	2210      	movs	r2, #16
 800ab12:	2100      	movs	r1, #0
 800ab14:	4618      	mov	r0, r3
 800ab16:	f004 fb88 	bl	800f22a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2203      	movs	r2, #3
 800ab1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800ab22:	7afb      	ldrb	r3, [r7, #11]
 800ab24:	015b      	lsls	r3, r3, #5
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	220e      	movs	r2, #14
 800ab42:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	2201      	movs	r2, #1
 800ab52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	2202      	movs	r2, #2
 800ab5a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	f103 0210 	add.w	r2, r3, #16
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ab6e:	e020      	b.n	800abb2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ab70:	7afb      	ldrb	r3, [r7, #11]
 800ab72:	4619      	mov	r1, r3
 800ab74:	68f8      	ldr	r0, [r7, #12]
 800ab76:	f7ff fc03 	bl	800a380 <USBH_MSC_BOT_Process>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d115      	bne.n	800abb0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab8a:	3302      	adds	r3, #2
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	f003 030f 	and.w	r3, r3, #15
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab9e:	7b1a      	ldrb	r2, [r3, #12]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800abaa:	7b5a      	ldrb	r2, [r3, #13]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	709a      	strb	r2, [r3, #2]
      break;
 800abb0:	bf00      	nop
  }

  return error;
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb4:	4618      	mov	r0, r3
 800abb6:	3718      	adds	r7, #24
 800abb8:	46bd      	mov	sp, r7
 800abba:	bd80      	pop	{r7, pc}

0800abbc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	607a      	str	r2, [r7, #4]
 800abc6:	603b      	str	r3, [r7, #0]
 800abc8:	460b      	mov	r3, r1
 800abca:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800abcc:	2302      	movs	r3, #2
 800abce:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800abd6:	69db      	ldr	r3, [r3, #28]
 800abd8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d002      	beq.n	800abea <USBH_MSC_SCSI_Write+0x2e>
 800abe4:	2b02      	cmp	r3, #2
 800abe6:	d047      	beq.n	800ac78 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800abe8:	e04e      	b.n	800ac88 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800abf0:	461a      	mov	r2, r3
 800abf2:	6a3b      	ldr	r3, [r7, #32]
 800abf4:	fb03 f202 	mul.w	r2, r3, r2
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	220a      	movs	r2, #10
 800ac08:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	3363      	adds	r3, #99	; 0x63
 800ac10:	2210      	movs	r2, #16
 800ac12:	2100      	movs	r1, #0
 800ac14:	4618      	mov	r0, r3
 800ac16:	f004 fb08 	bl	800f22a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	222a      	movs	r2, #42	; 0x2a
 800ac1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ac22:	79fa      	ldrb	r2, [r7, #7]
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ac2a:	79ba      	ldrb	r2, [r7, #6]
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ac32:	797a      	ldrb	r2, [r7, #5]
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ac3a:	1d3b      	adds	r3, r7, #4
 800ac3c:	781a      	ldrb	r2, [r3, #0]
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ac44:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ac4e:	f107 0320 	add.w	r3, r7, #32
 800ac52:	781a      	ldrb	r2, [r3, #0]
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	2202      	movs	r2, #2
 800ac66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ac72:	2301      	movs	r3, #1
 800ac74:	75fb      	strb	r3, [r7, #23]
      break;
 800ac76:	e007      	b.n	800ac88 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ac78:	7afb      	ldrb	r3, [r7, #11]
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	68f8      	ldr	r0, [r7, #12]
 800ac7e:	f7ff fb7f 	bl	800a380 <USBH_MSC_BOT_Process>
 800ac82:	4603      	mov	r3, r0
 800ac84:	75fb      	strb	r3, [r7, #23]
      break;
 800ac86:	bf00      	nop
  }

  return error;
 800ac88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b086      	sub	sp, #24
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	607a      	str	r2, [r7, #4]
 800ac9c:	603b      	str	r3, [r7, #0]
 800ac9e:	460b      	mov	r3, r1
 800aca0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800aca2:	2302      	movs	r3, #2
 800aca4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800acac:	69db      	ldr	r3, [r3, #28]
 800acae:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d002      	beq.n	800acc0 <USBH_MSC_SCSI_Read+0x2e>
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d047      	beq.n	800ad4e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800acbe:	e04e      	b.n	800ad5e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800acc6:	461a      	mov	r2, r3
 800acc8:	6a3b      	ldr	r3, [r7, #32]
 800acca:	fb03 f202 	mul.w	r2, r3, r2
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	2280      	movs	r2, #128	; 0x80
 800acd6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	220a      	movs	r2, #10
 800acde:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	3363      	adds	r3, #99	; 0x63
 800ace6:	2210      	movs	r2, #16
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f004 fa9d 	bl	800f22a <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2228      	movs	r2, #40	; 0x28
 800acf4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800acf8:	79fa      	ldrb	r2, [r7, #7]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ad00:	79ba      	ldrb	r2, [r7, #6]
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ad08:	797a      	ldrb	r2, [r7, #5]
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ad10:	1d3b      	adds	r3, r7, #4
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ad1a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ad24:	f107 0320 	add.w	r3, r7, #32
 800ad28:	781a      	ldrb	r2, [r3, #0]
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	2201      	movs	r2, #1
 800ad34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	2202      	movs	r2, #2
 800ad3c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad4c:	e007      	b.n	800ad5e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ad4e:	7afb      	ldrb	r3, [r7, #11]
 800ad50:	4619      	mov	r1, r3
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f7ff fb14 	bl	800a380 <USBH_MSC_BOT_Process>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ad5c:	bf00      	nop
  }

  return error;
 800ad5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3718      	adds	r7, #24
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b084      	sub	sp, #16
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4613      	mov	r3, r2
 800ad74:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	e029      	b.n	800add4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	79fa      	ldrb	r2, [r7, #7]
 800ad84:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	2200      	movs	r2, #0
 800ad94:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 f81f 	bl	800addc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2200      	movs	r2, #0
 800ada2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2200      	movs	r2, #0
 800adaa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d003      	beq.n	800adcc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f003 ffbf 	bl	800ed50 <USBH_LL_Init>

  return USBH_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ade4:	2300      	movs	r3, #0
 800ade6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	e009      	b.n	800ae02 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	33e0      	adds	r3, #224	; 0xe0
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	4413      	add	r3, r2
 800adf8:	2200      	movs	r2, #0
 800adfa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	3301      	adds	r3, #1
 800ae00:	60fb      	str	r3, [r7, #12]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b0e      	cmp	r3, #14
 800ae06:	d9f2      	bls.n	800adee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ae08:	2300      	movs	r3, #0
 800ae0a:	60fb      	str	r3, [r7, #12]
 800ae0c:	e009      	b.n	800ae22 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae18:	2200      	movs	r2, #0
 800ae1a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	60fb      	str	r3, [r7, #12]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae28:	d3f1      	bcc.n	800ae0e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2240      	movs	r2, #64	; 0x40
 800ae4e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2201      	movs	r2, #1
 800ae62:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2200      	movs	r2, #0
 800ae72:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b085      	sub	sp, #20
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d016      	beq.n	800aec6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d10e      	bne.n	800aec0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800aea8:	1c59      	adds	r1, r3, #1
 800aeaa:	687a      	ldr	r2, [r7, #4]
 800aeac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	33de      	adds	r3, #222	; 0xde
 800aeb4:	6839      	ldr	r1, [r7, #0]
 800aeb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
 800aebe:	e004      	b.n	800aeca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800aec0:	2302      	movs	r3, #2
 800aec2:	73fb      	strb	r3, [r7, #15]
 800aec4:	e001      	b.n	800aeca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800aec6:	2302      	movs	r3, #2
 800aec8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3714      	adds	r7, #20
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
 800aee0:	460b      	mov	r3, r1
 800aee2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800aee4:	2300      	movs	r3, #0
 800aee6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d204      	bcs.n	800aefe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	78fa      	ldrb	r2, [r7, #3]
 800aef8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aefc:	e001      	b.n	800af02 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aefe:	2302      	movs	r3, #2
 800af00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3714      	adds	r7, #20
 800af08:	46bd      	mov	sp, r7
 800af0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0e:	4770      	bx	lr

0800af10 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800af10:	b480      	push	{r7}
 800af12:	b087      	sub	sp, #28
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	4608      	mov	r0, r1
 800af1a:	4611      	mov	r1, r2
 800af1c:	461a      	mov	r2, r3
 800af1e:	4603      	mov	r3, r0
 800af20:	70fb      	strb	r3, [r7, #3]
 800af22:	460b      	mov	r3, r1
 800af24:	70bb      	strb	r3, [r7, #2]
 800af26:	4613      	mov	r3, r2
 800af28:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800af2a:	2300      	movs	r3, #0
 800af2c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800af2e:	2300      	movs	r3, #0
 800af30:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800af38:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800af3a:	e025      	b.n	800af88 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
 800af3e:	221a      	movs	r2, #26
 800af40:	fb02 f303 	mul.w	r3, r2, r3
 800af44:	3308      	adds	r3, #8
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	4413      	add	r3, r2
 800af4a:	3302      	adds	r3, #2
 800af4c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	795b      	ldrb	r3, [r3, #5]
 800af52:	78fa      	ldrb	r2, [r7, #3]
 800af54:	429a      	cmp	r2, r3
 800af56:	d002      	beq.n	800af5e <USBH_FindInterface+0x4e>
 800af58:	78fb      	ldrb	r3, [r7, #3]
 800af5a:	2bff      	cmp	r3, #255	; 0xff
 800af5c:	d111      	bne.n	800af82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800af62:	78ba      	ldrb	r2, [r7, #2]
 800af64:	429a      	cmp	r2, r3
 800af66:	d002      	beq.n	800af6e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af68:	78bb      	ldrb	r3, [r7, #2]
 800af6a:	2bff      	cmp	r3, #255	; 0xff
 800af6c:	d109      	bne.n	800af82 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800af72:	787a      	ldrb	r2, [r7, #1]
 800af74:	429a      	cmp	r2, r3
 800af76:	d002      	beq.n	800af7e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800af78:	787b      	ldrb	r3, [r7, #1]
 800af7a:	2bff      	cmp	r3, #255	; 0xff
 800af7c:	d101      	bne.n	800af82 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
 800af80:	e006      	b.n	800af90 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	3301      	adds	r3, #1
 800af86:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b01      	cmp	r3, #1
 800af8c:	d9d6      	bls.n	800af3c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800af8e:	23ff      	movs	r3, #255	; 0xff
}
 800af90:	4618      	mov	r0, r3
 800af92:	371c      	adds	r7, #28
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f003 ff0f 	bl	800edc8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800afaa:	2101      	movs	r1, #1
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f004 f826 	bl	800effe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3708      	adds	r7, #8
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b088      	sub	sp, #32
 800afc0:	af04      	add	r7, sp, #16
 800afc2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800afc4:	2302      	movs	r3, #2
 800afc6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800afd2:	b2db      	uxtb	r3, r3
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d102      	bne.n	800afde <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2203      	movs	r2, #3
 800afdc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	b2db      	uxtb	r3, r3
 800afe4:	2b0b      	cmp	r3, #11
 800afe6:	f200 81b3 	bhi.w	800b350 <USBH_Process+0x394>
 800afea:	a201      	add	r2, pc, #4	; (adr r2, 800aff0 <USBH_Process+0x34>)
 800afec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aff0:	0800b021 	.word	0x0800b021
 800aff4:	0800b053 	.word	0x0800b053
 800aff8:	0800b0bb 	.word	0x0800b0bb
 800affc:	0800b2eb 	.word	0x0800b2eb
 800b000:	0800b351 	.word	0x0800b351
 800b004:	0800b15f 	.word	0x0800b15f
 800b008:	0800b291 	.word	0x0800b291
 800b00c:	0800b195 	.word	0x0800b195
 800b010:	0800b1b5 	.word	0x0800b1b5
 800b014:	0800b1d5 	.word	0x0800b1d5
 800b018:	0800b203 	.word	0x0800b203
 800b01c:	0800b2d3 	.word	0x0800b2d3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b026:	b2db      	uxtb	r3, r3
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 8193 	beq.w	800b354 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2201      	movs	r2, #1
 800b032:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b034:	20c8      	movs	r0, #200	; 0xc8
 800b036:	f004 f85f 	bl	800f0f8 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f003 ff1f 	bl	800ee7e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2200      	movs	r2, #0
 800b04c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b050:	e180      	b.n	800b354 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d107      	bne.n	800b06c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2202      	movs	r2, #2
 800b068:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b06a:	e182      	b.n	800b372 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b076:	d914      	bls.n	800b0a2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b07e:	3301      	adds	r3, #1
 800b080:	b2da      	uxtb	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d903      	bls.n	800b09a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	220d      	movs	r2, #13
 800b096:	701a      	strb	r2, [r3, #0]
      break;
 800b098:	e16b      	b.n	800b372 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
      break;
 800b0a0:	e167      	b.n	800b372 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b0a8:	f103 020a 	add.w	r2, r3, #10
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b0b2:	200a      	movs	r0, #10
 800b0b4:	f004 f820 	bl	800f0f8 <USBH_Delay>
      break;
 800b0b8:	e15b      	b.n	800b372 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d005      	beq.n	800b0d0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b0ca:	2104      	movs	r1, #4
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b0d0:	2064      	movs	r0, #100	; 0x64
 800b0d2:	f004 f811 	bl	800f0f8 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f003 feac 	bl	800ee34 <USBH_LL_GetSpeed>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	461a      	mov	r2, r3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2205      	movs	r2, #5
 800b0ea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b0ec:	2100      	movs	r1, #0
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f001 f931 	bl	800c356 <USBH_AllocPipe>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b0fc:	2180      	movs	r1, #128	; 0x80
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f001 f929 	bl	800c356 <USBH_AllocPipe>
 800b104:	4603      	mov	r3, r0
 800b106:	461a      	mov	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	7919      	ldrb	r1, [r3, #4]
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b120:	b292      	uxth	r2, r2
 800b122:	9202      	str	r2, [sp, #8]
 800b124:	2200      	movs	r2, #0
 800b126:	9201      	str	r2, [sp, #4]
 800b128:	9300      	str	r3, [sp, #0]
 800b12a:	4603      	mov	r3, r0
 800b12c:	2280      	movs	r2, #128	; 0x80
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 f8e2 	bl	800c2f8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	7959      	ldrb	r1, [r3, #5]
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b144:	687a      	ldr	r2, [r7, #4]
 800b146:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b148:	b292      	uxth	r2, r2
 800b14a:	9202      	str	r2, [sp, #8]
 800b14c:	2200      	movs	r2, #0
 800b14e:	9201      	str	r2, [sp, #4]
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	4603      	mov	r3, r0
 800b154:	2200      	movs	r2, #0
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f001 f8ce 	bl	800c2f8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b15c:	e109      	b.n	800b372 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f90c 	bl	800b37c <USBH_HandleEnum>
 800b164:	4603      	mov	r3, r0
 800b166:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b168:	7bbb      	ldrb	r3, [r7, #14]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	f040 80f3 	bne.w	800b358 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b180:	2b01      	cmp	r3, #1
 800b182:	d103      	bne.n	800b18c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2208      	movs	r2, #8
 800b188:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b18a:	e0e5      	b.n	800b358 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2207      	movs	r2, #7
 800b190:	701a      	strb	r2, [r3, #0]
      break;
 800b192:	e0e1      	b.n	800b358 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f000 80de 	beq.w	800b35c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2208      	movs	r2, #8
 800b1b0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b1b2:	e0d3      	b.n	800b35c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	4619      	mov	r1, r3
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 fc20 	bl	800ba04 <USBH_SetCfg>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 80ca 	bne.w	800b360 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2209      	movs	r2, #9
 800b1d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b1d2:	e0c5      	b.n	800b360 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b1da:	f003 0320 	and.w	r3, r3, #32
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00b      	beq.n	800b1fa <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b1e2:	2101      	movs	r1, #1
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fc30 	bl	800ba4a <USBH_SetFeature>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f040 80b9 	bne.w	800b364 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	220a      	movs	r2, #10
 800b1f6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b1f8:	e0b4      	b.n	800b364 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	220a      	movs	r2, #10
 800b1fe:	701a      	strb	r2, [r3, #0]
      break;
 800b200:	e0b0      	b.n	800b364 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b208:	2b00      	cmp	r3, #0
 800b20a:	f000 80ad 	beq.w	800b368 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b216:	2300      	movs	r3, #0
 800b218:	73fb      	strb	r3, [r7, #15]
 800b21a:	e016      	b.n	800b24a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b21c:	7bfa      	ldrb	r2, [r7, #15]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	32de      	adds	r2, #222	; 0xde
 800b222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b226:	791a      	ldrb	r2, [r3, #4]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b22e:	429a      	cmp	r2, r3
 800b230:	d108      	bne.n	800b244 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b232:	7bfa      	ldrb	r2, [r7, #15]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	32de      	adds	r2, #222	; 0xde
 800b238:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b242:	e005      	b.n	800b250 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b244:	7bfb      	ldrb	r3, [r7, #15]
 800b246:	3301      	adds	r3, #1
 800b248:	73fb      	strb	r3, [r7, #15]
 800b24a:	7bfb      	ldrb	r3, [r7, #15]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d0e5      	beq.n	800b21c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b256:	2b00      	cmp	r3, #0
 800b258:	d016      	beq.n	800b288 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b260:	689b      	ldr	r3, [r3, #8]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	4798      	blx	r3
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d109      	bne.n	800b280 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2206      	movs	r2, #6
 800b270:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b278:	2103      	movs	r1, #3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b27e:	e073      	b.n	800b368 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	220d      	movs	r2, #13
 800b284:	701a      	strb	r2, [r3, #0]
      break;
 800b286:	e06f      	b.n	800b368 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	220d      	movs	r2, #13
 800b28c:	701a      	strb	r2, [r3, #0]
      break;
 800b28e:	e06b      	b.n	800b368 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b296:	2b00      	cmp	r3, #0
 800b298:	d017      	beq.n	800b2ca <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2a0:	691b      	ldr	r3, [r3, #16]
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	4798      	blx	r3
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b2aa:	7bbb      	ldrb	r3, [r7, #14]
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d103      	bne.n	800b2ba <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	220b      	movs	r2, #11
 800b2b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2b8:	e058      	b.n	800b36c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b2ba:	7bbb      	ldrb	r3, [r7, #14]
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d154      	bne.n	800b36c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	220d      	movs	r2, #13
 800b2c6:	701a      	strb	r2, [r3, #0]
      break;
 800b2c8:	e050      	b.n	800b36c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	220d      	movs	r2, #13
 800b2ce:	701a      	strb	r2, [r3, #0]
      break;
 800b2d0:	e04c      	b.n	800b36c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d049      	beq.n	800b370 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	4798      	blx	r3
      }
      break;
 800b2e8:	e042      	b.n	800b370 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f7ff fd72 	bl	800addc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d009      	beq.n	800b316 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d005      	beq.n	800b32c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b326:	2105      	movs	r1, #5
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b332:	b2db      	uxtb	r3, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d107      	bne.n	800b348 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f7ff fe2b 	bl	800af9c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b346:	e014      	b.n	800b372 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f003 fd3d 	bl	800edc8 <USBH_LL_Start>
      break;
 800b34e:	e010      	b.n	800b372 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b350:	bf00      	nop
 800b352:	e00e      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b354:	bf00      	nop
 800b356:	e00c      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b358:	bf00      	nop
 800b35a:	e00a      	b.n	800b372 <USBH_Process+0x3b6>
    break;
 800b35c:	bf00      	nop
 800b35e:	e008      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b360:	bf00      	nop
 800b362:	e006      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b364:	bf00      	nop
 800b366:	e004      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b368:	bf00      	nop
 800b36a:	e002      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b36c:	bf00      	nop
 800b36e:	e000      	b.n	800b372 <USBH_Process+0x3b6>
      break;
 800b370:	bf00      	nop
  }
  return USBH_OK;
 800b372:	2300      	movs	r3, #0
}
 800b374:	4618      	mov	r0, r3
 800b376:	3710      	adds	r7, #16
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}

0800b37c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b088      	sub	sp, #32
 800b380:	af04      	add	r7, sp, #16
 800b382:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b384:	2301      	movs	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b388:	2301      	movs	r3, #1
 800b38a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	785b      	ldrb	r3, [r3, #1]
 800b390:	2b07      	cmp	r3, #7
 800b392:	f200 81c1 	bhi.w	800b718 <USBH_HandleEnum+0x39c>
 800b396:	a201      	add	r2, pc, #4	; (adr r2, 800b39c <USBH_HandleEnum+0x20>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3bd 	.word	0x0800b3bd
 800b3a0:	0800b47b 	.word	0x0800b47b
 800b3a4:	0800b4e5 	.word	0x0800b4e5
 800b3a8:	0800b573 	.word	0x0800b573
 800b3ac:	0800b5dd 	.word	0x0800b5dd
 800b3b0:	0800b64d 	.word	0x0800b64d
 800b3b4:	0800b693 	.word	0x0800b693
 800b3b8:	0800b6d9 	.word	0x0800b6d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b3bc:	2108      	movs	r1, #8
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 fa50 	bl	800b864 <USBH_Get_DevDesc>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b3c8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d130      	bne.n	800b430 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2201      	movs	r2, #1
 800b3dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	7919      	ldrb	r1, [r3, #4]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b3f2:	b292      	uxth	r2, r2
 800b3f4:	9202      	str	r2, [sp, #8]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	9201      	str	r2, [sp, #4]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2280      	movs	r2, #128	; 0x80
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 ff79 	bl	800c2f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7959      	ldrb	r1, [r3, #5]
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b41a:	b292      	uxth	r2, r2
 800b41c:	9202      	str	r2, [sp, #8]
 800b41e:	2200      	movs	r2, #0
 800b420:	9201      	str	r2, [sp, #4]
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	4603      	mov	r3, r0
 800b426:	2200      	movs	r2, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 ff65 	bl	800c2f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b42e:	e175      	b.n	800b71c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b430:	7bbb      	ldrb	r3, [r7, #14]
 800b432:	2b03      	cmp	r3, #3
 800b434:	f040 8172 	bne.w	800b71c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b43e:	3301      	adds	r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b44e:	2b03      	cmp	r3, #3
 800b450:	d903      	bls.n	800b45a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	220d      	movs	r2, #13
 800b456:	701a      	strb	r2, [r3, #0]
      break;
 800b458:	e160      	b.n	800b71c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	795b      	ldrb	r3, [r3, #5]
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f000 ff99 	bl	800c398 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	791b      	ldrb	r3, [r3, #4]
 800b46a:	4619      	mov	r1, r3
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 ff93 	bl	800c398 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	701a      	strb	r2, [r3, #0]
      break;
 800b478:	e150      	b.n	800b71c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b47a:	2112      	movs	r1, #18
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f000 f9f1 	bl	800b864 <USBH_Get_DevDesc>
 800b482:	4603      	mov	r3, r0
 800b484:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b486:	7bbb      	ldrb	r3, [r7, #14]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d103      	bne.n	800b494 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2202      	movs	r2, #2
 800b490:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b492:	e145      	b.n	800b720 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	2b03      	cmp	r3, #3
 800b498:	f040 8142 	bne.w	800b720 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	b2da      	uxtb	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b4b2:	2b03      	cmp	r3, #3
 800b4b4:	d903      	bls.n	800b4be <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	220d      	movs	r2, #13
 800b4ba:	701a      	strb	r2, [r3, #0]
      break;
 800b4bc:	e130      	b.n	800b720 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	795b      	ldrb	r3, [r3, #5]
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 ff67 	bl	800c398 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	791b      	ldrb	r3, [r3, #4]
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	6878      	ldr	r0, [r7, #4]
 800b4d2:	f000 ff61 	bl	800c398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	701a      	strb	r2, [r3, #0]
      break;
 800b4e2:	e11d      	b.n	800b720 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 fa68 	bl	800b9bc <USBH_SetAddress>
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4f0:	7bbb      	ldrb	r3, [r7, #14]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d132      	bne.n	800b55c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b4f6:	2002      	movs	r0, #2
 800b4f8:	f003 fdfe 	bl	800f0f8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2203      	movs	r2, #3
 800b508:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7919      	ldrb	r1, [r3, #4]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b51e:	b292      	uxth	r2, r2
 800b520:	9202      	str	r2, [sp, #8]
 800b522:	2200      	movs	r2, #0
 800b524:	9201      	str	r2, [sp, #4]
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	4603      	mov	r3, r0
 800b52a:	2280      	movs	r2, #128	; 0x80
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fee3 	bl	800c2f8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7959      	ldrb	r1, [r3, #5]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b546:	b292      	uxth	r2, r2
 800b548:	9202      	str	r2, [sp, #8]
 800b54a:	2200      	movs	r2, #0
 800b54c:	9201      	str	r2, [sp, #4]
 800b54e:	9300      	str	r3, [sp, #0]
 800b550:	4603      	mov	r3, r0
 800b552:	2200      	movs	r2, #0
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fecf 	bl	800c2f8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b55a:	e0e3      	b.n	800b724 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b55c:	7bbb      	ldrb	r3, [r7, #14]
 800b55e:	2b03      	cmp	r3, #3
 800b560:	f040 80e0 	bne.w	800b724 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	220d      	movs	r2, #13
 800b568:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	705a      	strb	r2, [r3, #1]
      break;
 800b570:	e0d8      	b.n	800b724 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b572:	2109      	movs	r1, #9
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f99d 	bl	800b8b4 <USBH_Get_CfgDesc>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d103      	bne.n	800b58c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2204      	movs	r2, #4
 800b588:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b58a:	e0cd      	b.n	800b728 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b58c:	7bbb      	ldrb	r3, [r7, #14]
 800b58e:	2b03      	cmp	r3, #3
 800b590:	f040 80ca 	bne.w	800b728 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b59a:	3301      	adds	r3, #1
 800b59c:	b2da      	uxtb	r2, r3
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5aa:	2b03      	cmp	r3, #3
 800b5ac:	d903      	bls.n	800b5b6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	220d      	movs	r2, #13
 800b5b2:	701a      	strb	r2, [r3, #0]
      break;
 800b5b4:	e0b8      	b.n	800b728 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	795b      	ldrb	r3, [r3, #5]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 feeb 	bl	800c398 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	791b      	ldrb	r3, [r3, #4]
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f000 fee5 	bl	800c398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	701a      	strb	r2, [r3, #0]
      break;
 800b5da:	e0a5      	b.n	800b728 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f000 f965 	bl	800b8b4 <USBH_Get_CfgDesc>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5ee:	7bbb      	ldrb	r3, [r7, #14]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d103      	bne.n	800b5fc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2205      	movs	r2, #5
 800b5f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b5fa:	e097      	b.n	800b72c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b5fc:	7bbb      	ldrb	r3, [r7, #14]
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	f040 8094 	bne.w	800b72c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b60a:	3301      	adds	r3, #1
 800b60c:	b2da      	uxtb	r2, r3
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b61a:	2b03      	cmp	r3, #3
 800b61c:	d903      	bls.n	800b626 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	220d      	movs	r2, #13
 800b622:	701a      	strb	r2, [r3, #0]
      break;
 800b624:	e082      	b.n	800b72c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	795b      	ldrb	r3, [r3, #5]
 800b62a:	4619      	mov	r1, r3
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 feb3 	bl	800c398 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	791b      	ldrb	r3, [r3, #4]
 800b636:	4619      	mov	r1, r3
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fead 	bl	800c398 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	701a      	strb	r2, [r3, #0]
      break;
 800b64a:	e06f      	b.n	800b72c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b652:	2b00      	cmp	r3, #0
 800b654:	d019      	beq.n	800b68a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b662:	23ff      	movs	r3, #255	; 0xff
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f949 	bl	800b8fc <USBH_Get_StringDesc>
 800b66a:	4603      	mov	r3, r0
 800b66c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b66e:	7bbb      	ldrb	r3, [r7, #14]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d103      	bne.n	800b67c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2206      	movs	r2, #6
 800b678:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b67a:	e059      	b.n	800b730 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	2b03      	cmp	r3, #3
 800b680:	d156      	bne.n	800b730 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2206      	movs	r2, #6
 800b686:	705a      	strb	r2, [r3, #1]
      break;
 800b688:	e052      	b.n	800b730 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2206      	movs	r2, #6
 800b68e:	705a      	strb	r2, [r3, #1]
      break;
 800b690:	e04e      	b.n	800b730 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d019      	beq.n	800b6d0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b6a8:	23ff      	movs	r3, #255	; 0xff
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f926 	bl	800b8fc <USBH_Get_StringDesc>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b6b4:	7bbb      	ldrb	r3, [r7, #14]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d103      	bne.n	800b6c2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2207      	movs	r2, #7
 800b6be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b6c0:	e038      	b.n	800b734 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6c2:	7bbb      	ldrb	r3, [r7, #14]
 800b6c4:	2b03      	cmp	r3, #3
 800b6c6:	d135      	bne.n	800b734 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2207      	movs	r2, #7
 800b6cc:	705a      	strb	r2, [r3, #1]
      break;
 800b6ce:	e031      	b.n	800b734 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2207      	movs	r2, #7
 800b6d4:	705a      	strb	r2, [r3, #1]
      break;
 800b6d6:	e02d      	b.n	800b734 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d017      	beq.n	800b712 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b6ee:	23ff      	movs	r3, #255	; 0xff
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f903 	bl	800b8fc <USBH_Get_StringDesc>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d102      	bne.n	800b706 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b704:	e018      	b.n	800b738 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b706:	7bbb      	ldrb	r3, [r7, #14]
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d115      	bne.n	800b738 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b70c:	2300      	movs	r3, #0
 800b70e:	73fb      	strb	r3, [r7, #15]
      break;
 800b710:	e012      	b.n	800b738 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b712:	2300      	movs	r3, #0
 800b714:	73fb      	strb	r3, [r7, #15]
      break;
 800b716:	e00f      	b.n	800b738 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b718:	bf00      	nop
 800b71a:	e00e      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b71c:	bf00      	nop
 800b71e:	e00c      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b720:	bf00      	nop
 800b722:	e00a      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b724:	bf00      	nop
 800b726:	e008      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b728:	bf00      	nop
 800b72a:	e006      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b72c:	bf00      	nop
 800b72e:	e004      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b730:	bf00      	nop
 800b732:	e002      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b734:	bf00      	nop
 800b736:	e000      	b.n	800b73a <USBH_HandleEnum+0x3be>
      break;
 800b738:	bf00      	nop
  }
  return Status;
 800b73a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b756:	bf00      	nop
 800b758:	370c      	adds	r7, #12
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 f804 	bl	800b786 <USBH_HandleSof>
}
 800b77e:	bf00      	nop
 800b780:	3708      	adds	r7, #8
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b082      	sub	sp, #8
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	781b      	ldrb	r3, [r3, #0]
 800b792:	b2db      	uxtb	r3, r3
 800b794:	2b0b      	cmp	r3, #11
 800b796:	d10a      	bne.n	800b7ae <USBH_HandleSof+0x28>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d005      	beq.n	800b7ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b7a8:	699b      	ldr	r3, [r3, #24]
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	4798      	blx	r3
  }
}
 800b7ae:	bf00      	nop
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b083      	sub	sp, #12
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b7c6:	bf00      	nop
}
 800b7c8:	370c      	adds	r7, #12
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	b083      	sub	sp, #12
 800b7d6:	af00      	add	r7, sp, #0
 800b7d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b7e2:	bf00      	nop
}
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b7ee:	b480      	push	{r7}
 800b7f0:	b083      	sub	sp, #12
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2200      	movs	r2, #0
 800b802:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2200      	movs	r2, #0
 800b830:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f003 fade 	bl	800edfe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	791b      	ldrb	r3, [r3, #4]
 800b846:	4619      	mov	r1, r3
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f000 fda5 	bl	800c398 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	795b      	ldrb	r3, [r3, #5]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fd9f 	bl	800c398 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3708      	adds	r7, #8
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af02      	add	r7, sp, #8
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b876:	78fb      	ldrb	r3, [r7, #3]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	4613      	mov	r3, r2
 800b87e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b882:	2100      	movs	r1, #0
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f864 	bl	800b952 <USBH_GetDescriptor>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73fb      	strb	r3, [r7, #15]
 800b88e:	7bfb      	ldrb	r3, [r7, #15]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10a      	bne.n	800b8aa <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b8a0:	78fa      	ldrb	r2, [r7, #3]
 800b8a2:	b292      	uxth	r2, r2
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f000 f918 	bl	800bada <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3710      	adds	r7, #16
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af02      	add	r7, sp, #8
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	331c      	adds	r3, #28
 800b8c4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b8c6:	887b      	ldrh	r3, [r7, #2]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8d0:	2100      	movs	r1, #0
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f83d 	bl	800b952 <USBH_GetDescriptor>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	72fb      	strb	r3, [r7, #11]
 800b8dc:	7afb      	ldrb	r3, [r7, #11]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d107      	bne.n	800b8f2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b8e8:	887a      	ldrh	r2, [r7, #2]
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f964 	bl	800bbba <USBH_ParseCfgDesc>
  }

  return status;
 800b8f2:	7afb      	ldrb	r3, [r7, #11]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	607a      	str	r2, [r7, #4]
 800b906:	461a      	mov	r2, r3
 800b908:	460b      	mov	r3, r1
 800b90a:	72fb      	strb	r3, [r7, #11]
 800b90c:	4613      	mov	r3, r2
 800b90e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800b910:	7afb      	ldrb	r3, [r7, #11]
 800b912:	b29b      	uxth	r3, r3
 800b914:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b918:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b920:	893b      	ldrh	r3, [r7, #8]
 800b922:	9300      	str	r3, [sp, #0]
 800b924:	460b      	mov	r3, r1
 800b926:	2100      	movs	r1, #0
 800b928:	68f8      	ldr	r0, [r7, #12]
 800b92a:	f000 f812 	bl	800b952 <USBH_GetDescriptor>
 800b92e:	4603      	mov	r3, r0
 800b930:	75fb      	strb	r3, [r7, #23]
 800b932:	7dfb      	ldrb	r3, [r7, #23]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d107      	bne.n	800b948 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b93e:	893a      	ldrh	r2, [r7, #8]
 800b940:	6879      	ldr	r1, [r7, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	f000 fa37 	bl	800bdb6 <USBH_ParseStringDesc>
  }

  return status;
 800b948:	7dfb      	ldrb	r3, [r7, #23]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	460b      	mov	r3, r1
 800b95e:	72fb      	strb	r3, [r7, #11]
 800b960:	4613      	mov	r3, r2
 800b962:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	789b      	ldrb	r3, [r3, #2]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d11c      	bne.n	800b9a6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b96c:	7afb      	ldrb	r3, [r7, #11]
 800b96e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b972:	b2da      	uxtb	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2206      	movs	r2, #6
 800b97c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	893a      	ldrh	r2, [r7, #8]
 800b982:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b984:	893b      	ldrh	r3, [r7, #8]
 800b986:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b98a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b98e:	d104      	bne.n	800b99a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f240 4209 	movw	r2, #1033	; 0x409
 800b996:	829a      	strh	r2, [r3, #20]
 800b998:	e002      	b.n	800b9a0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	8b3a      	ldrh	r2, [r7, #24]
 800b9a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b9a6:	8b3b      	ldrh	r3, [r7, #24]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6879      	ldr	r1, [r7, #4]
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fa50 	bl	800be52 <USBH_CtlReq>
 800b9b2:	4603      	mov	r3, r0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	789b      	ldrb	r3, [r3, #2]
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d10f      	bne.n	800b9f0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2205      	movs	r2, #5
 800b9da:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b9dc:	78fb      	ldrb	r3, [r7, #3]
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fa2c 	bl	800be52 <USBH_CtlReq>
 800b9fa:	4603      	mov	r3, r0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3708      	adds	r7, #8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b082      	sub	sp, #8
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	789b      	ldrb	r3, [r3, #2]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d10e      	bne.n	800ba36 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2209      	movs	r2, #9
 800ba22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	887a      	ldrh	r2, [r7, #2]
 800ba28:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2200      	movs	r2, #0
 800ba34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ba36:	2200      	movs	r2, #0
 800ba38:	2100      	movs	r1, #0
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 fa09 	bl	800be52 <USBH_CtlReq>
 800ba40:	4603      	mov	r3, r0
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b082      	sub	sp, #8
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	789b      	ldrb	r3, [r3, #2]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d10f      	bne.n	800ba7e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2203      	movs	r2, #3
 800ba68:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800ba7e:	2200      	movs	r2, #0
 800ba80:	2100      	movs	r1, #0
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f000 f9e5 	bl	800be52 <USBH_CtlReq>
 800ba88:	4603      	mov	r3, r0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b082      	sub	sp, #8
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	789b      	ldrb	r3, [r3, #2]
 800baa2:	2b01      	cmp	r3, #1
 800baa4:	d10f      	bne.n	800bac6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2202      	movs	r2, #2
 800baaa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	2201      	movs	r2, #1
 800bab0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bab8:	78fb      	ldrb	r3, [r7, #3]
 800baba:	b29a      	uxth	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bac6:	2200      	movs	r2, #0
 800bac8:	2100      	movs	r1, #0
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f9c1 	bl	800be52 <USBH_CtlReq>
 800bad0:	4603      	mov	r3, r0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bada:	b480      	push	{r7}
 800badc:	b085      	sub	sp, #20
 800bade:	af00      	add	r7, sp, #0
 800bae0:	60f8      	str	r0, [r7, #12]
 800bae2:	60b9      	str	r1, [r7, #8]
 800bae4:	4613      	mov	r3, r2
 800bae6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	781a      	ldrb	r2, [r3, #0]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	785a      	ldrb	r2, [r3, #1]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	3302      	adds	r3, #2
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	3303      	adds	r3, #3
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	021b      	lsls	r3, r3, #8
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	b29a      	uxth	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	791a      	ldrb	r2, [r3, #4]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	795a      	ldrb	r2, [r3, #5]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	799a      	ldrb	r2, [r3, #6]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	79da      	ldrb	r2, [r3, #7]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bb34:	88fb      	ldrh	r3, [r7, #6]
 800bb36:	2b08      	cmp	r3, #8
 800bb38:	d939      	bls.n	800bbae <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	3308      	adds	r3, #8
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	3309      	adds	r3, #9
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	021b      	lsls	r3, r3, #8
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	4313      	orrs	r3, r2
 800bb50:	b29a      	uxth	r2, r3
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	330a      	adds	r3, #10
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	330b      	adds	r3, #11
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	b29b      	uxth	r3, r3
 800bb66:	021b      	lsls	r3, r3, #8
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	330c      	adds	r3, #12
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	330d      	adds	r3, #13
 800bb7e:	781b      	ldrb	r3, [r3, #0]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	4313      	orrs	r3, r2
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	7b9a      	ldrb	r2, [r3, #14]
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	7bda      	ldrb	r2, [r3, #15]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	7c1a      	ldrb	r2, [r3, #16]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	7c5a      	ldrb	r2, [r3, #17]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	745a      	strb	r2, [r3, #17]
  }
}
 800bbae:	bf00      	nop
 800bbb0:	3714      	adds	r7, #20
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b08a      	sub	sp, #40	; 0x28
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	60b9      	str	r1, [r7, #8]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	781a      	ldrb	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	785a      	ldrb	r2, [r3, #1]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	3302      	adds	r3, #2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	3303      	adds	r3, #3
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	4313      	orrs	r3, r2
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	791a      	ldrb	r2, [r3, #4]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	795a      	ldrb	r2, [r3, #5]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	799a      	ldrb	r2, [r3, #6]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	79da      	ldrb	r2, [r3, #7]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	7a1a      	ldrb	r2, [r3, #8]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bc30:	88fb      	ldrh	r3, [r7, #6]
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d95f      	bls.n	800bcf6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bc36:	2309      	movs	r3, #9
 800bc38:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bc3e:	e051      	b.n	800bce4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc40:	f107 0316 	add.w	r3, r7, #22
 800bc44:	4619      	mov	r1, r3
 800bc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc48:	f000 f8e8 	bl	800be1c <USBH_GetNextDesc>
 800bc4c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc50:	785b      	ldrb	r3, [r3, #1]
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d146      	bne.n	800bce4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bc56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc5a:	221a      	movs	r2, #26
 800bc5c:	fb02 f303 	mul.w	r3, r2, r3
 800bc60:	3308      	adds	r3, #8
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	3302      	adds	r3, #2
 800bc68:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bc6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bc6c:	69f8      	ldr	r0, [r7, #28]
 800bc6e:	f000 f846 	bl	800bcfe <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bc7c:	e022      	b.n	800bcc4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bc7e:	f107 0316 	add.w	r3, r7, #22
 800bc82:	4619      	mov	r1, r3
 800bc84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc86:	f000 f8c9 	bl	800be1c <USBH_GetNextDesc>
 800bc8a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8e:	785b      	ldrb	r3, [r3, #1]
 800bc90:	2b05      	cmp	r3, #5
 800bc92:	d117      	bne.n	800bcc4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bc94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bc98:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bc9c:	3201      	adds	r2, #1
 800bc9e:	00d2      	lsls	r2, r2, #3
 800bca0:	211a      	movs	r1, #26
 800bca2:	fb01 f303 	mul.w	r3, r1, r3
 800bca6:	4413      	add	r3, r2
 800bca8:	3308      	adds	r3, #8
 800bcaa:	68fa      	ldr	r2, [r7, #12]
 800bcac:	4413      	add	r3, r2
 800bcae:	3304      	adds	r3, #4
 800bcb0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bcb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bcb4:	69b8      	ldr	r0, [r7, #24]
 800bcb6:	f000 f851 	bl	800bd5c <USBH_ParseEPDesc>
            ep_ix++;
 800bcba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	791b      	ldrb	r3, [r3, #4]
 800bcc8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d204      	bcs.n	800bcda <USBH_ParseCfgDesc+0x120>
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	885a      	ldrh	r2, [r3, #2]
 800bcd4:	8afb      	ldrh	r3, [r7, #22]
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	d8d1      	bhi.n	800bc7e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bcda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bcde:	3301      	adds	r3, #1
 800bce0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bce4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d804      	bhi.n	800bcf6 <USBH_ParseCfgDesc+0x13c>
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	885a      	ldrh	r2, [r3, #2]
 800bcf0:	8afb      	ldrh	r3, [r7, #22]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d8a4      	bhi.n	800bc40 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bcf6:	bf00      	nop
 800bcf8:	3728      	adds	r7, #40	; 0x28
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
 800bd06:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781a      	ldrb	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	785a      	ldrb	r2, [r3, #1]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	789a      	ldrb	r2, [r3, #2]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	78da      	ldrb	r2, [r3, #3]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	791a      	ldrb	r2, [r3, #4]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	795a      	ldrb	r2, [r3, #5]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	799a      	ldrb	r2, [r3, #6]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	79da      	ldrb	r2, [r3, #7]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	7a1a      	ldrb	r2, [r3, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	721a      	strb	r2, [r3, #8]
}
 800bd50:	bf00      	nop
 800bd52:	370c      	adds	r7, #12
 800bd54:	46bd      	mov	sp, r7
 800bd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5a:	4770      	bx	lr

0800bd5c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781a      	ldrb	r2, [r3, #0]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	785a      	ldrb	r2, [r3, #1]
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	789a      	ldrb	r2, [r3, #2]
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	78da      	ldrb	r2, [r3, #3]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	b29a      	uxth	r2, r3
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	3305      	adds	r3, #5
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	021b      	lsls	r3, r3, #8
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	b29a      	uxth	r2, r3
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	799a      	ldrb	r2, [r3, #6]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	719a      	strb	r2, [r3, #6]
}
 800bdaa:	bf00      	nop
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b087      	sub	sp, #28
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	60f8      	str	r0, [r7, #12]
 800bdbe:	60b9      	str	r1, [r7, #8]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d120      	bne.n	800be10 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	1e9a      	subs	r2, r3, #2
 800bdd4:	88fb      	ldrh	r3, [r7, #6]
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	bf28      	it	cs
 800bdda:	4613      	movcs	r3, r2
 800bddc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3302      	adds	r3, #2
 800bde2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bde4:	2300      	movs	r3, #0
 800bde6:	82fb      	strh	r3, [r7, #22]
 800bde8:	e00b      	b.n	800be02 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bdea:	8afb      	ldrh	r3, [r7, #22]
 800bdec:	68fa      	ldr	r2, [r7, #12]
 800bdee:	4413      	add	r3, r2
 800bdf0:	781a      	ldrb	r2, [r3, #0]
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	3301      	adds	r3, #1
 800bdfa:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bdfc:	8afb      	ldrh	r3, [r7, #22]
 800bdfe:	3302      	adds	r3, #2
 800be00:	82fb      	strh	r3, [r7, #22]
 800be02:	8afa      	ldrh	r2, [r7, #22]
 800be04:	8abb      	ldrh	r3, [r7, #20]
 800be06:	429a      	cmp	r2, r3
 800be08:	d3ef      	bcc.n	800bdea <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	2200      	movs	r2, #0
 800be0e:	701a      	strb	r2, [r3, #0]
  }
}
 800be10:	bf00      	nop
 800be12:	371c      	adds	r7, #28
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	881a      	ldrh	r2, [r3, #0]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	4413      	add	r3, r2
 800be32:	b29a      	uxth	r2, r3
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4413      	add	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800be44:	68fb      	ldr	r3, [r7, #12]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3714      	adds	r7, #20
 800be4a:	46bd      	mov	sp, r7
 800be4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be50:	4770      	bx	lr

0800be52 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b086      	sub	sp, #24
 800be56:	af00      	add	r7, sp, #0
 800be58:	60f8      	str	r0, [r7, #12]
 800be5a:	60b9      	str	r1, [r7, #8]
 800be5c:	4613      	mov	r3, r2
 800be5e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800be60:	2301      	movs	r3, #1
 800be62:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	789b      	ldrb	r3, [r3, #2]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d002      	beq.n	800be72 <USBH_CtlReq+0x20>
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d00f      	beq.n	800be90 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800be70:	e027      	b.n	800bec2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	68ba      	ldr	r2, [r7, #8]
 800be76:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	88fa      	ldrh	r2, [r7, #6]
 800be7c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	2201      	movs	r2, #1
 800be82:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2202      	movs	r2, #2
 800be88:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800be8a:	2301      	movs	r3, #1
 800be8c:	75fb      	strb	r3, [r7, #23]
      break;
 800be8e:	e018      	b.n	800bec2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800be90:	68f8      	ldr	r0, [r7, #12]
 800be92:	f000 f81b 	bl	800becc <USBH_HandleControl>
 800be96:	4603      	mov	r3, r0
 800be98:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800be9a:	7dfb      	ldrb	r3, [r7, #23]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <USBH_CtlReq+0x54>
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d106      	bne.n	800beb4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	2201      	movs	r2, #1
 800beaa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	761a      	strb	r2, [r3, #24]
      break;
 800beb2:	e005      	b.n	800bec0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800beb4:	7dfb      	ldrb	r3, [r7, #23]
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d102      	bne.n	800bec0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2201      	movs	r2, #1
 800bebe:	709a      	strb	r2, [r3, #2]
      break;
 800bec0:	bf00      	nop
  }
  return status;
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3718      	adds	r7, #24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b086      	sub	sp, #24
 800bed0:	af02      	add	r7, sp, #8
 800bed2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bed4:	2301      	movs	r3, #1
 800bed6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bed8:	2300      	movs	r3, #0
 800beda:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	7e1b      	ldrb	r3, [r3, #24]
 800bee0:	3b01      	subs	r3, #1
 800bee2:	2b0a      	cmp	r3, #10
 800bee4:	f200 8158 	bhi.w	800c198 <USBH_HandleControl+0x2cc>
 800bee8:	a201      	add	r2, pc, #4	; (adr r2, 800bef0 <USBH_HandleControl+0x24>)
 800beea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beee:	bf00      	nop
 800bef0:	0800bf1d 	.word	0x0800bf1d
 800bef4:	0800bf37 	.word	0x0800bf37
 800bef8:	0800bfa1 	.word	0x0800bfa1
 800befc:	0800bfc7 	.word	0x0800bfc7
 800bf00:	0800bfff 	.word	0x0800bfff
 800bf04:	0800c02b 	.word	0x0800c02b
 800bf08:	0800c07d 	.word	0x0800c07d
 800bf0c:	0800c09f 	.word	0x0800c09f
 800bf10:	0800c0db 	.word	0x0800c0db
 800bf14:	0800c103 	.word	0x0800c103
 800bf18:	0800c141 	.word	0x0800c141
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f103 0110 	add.w	r1, r3, #16
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	795b      	ldrb	r3, [r3, #5]
 800bf26:	461a      	mov	r2, r3
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f000 f945 	bl	800c1b8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2202      	movs	r2, #2
 800bf32:	761a      	strb	r2, [r3, #24]
      break;
 800bf34:	e13b      	b.n	800c1ae <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	795b      	ldrb	r3, [r3, #5]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f003 f84b 	bl	800efd8 <USBH_LL_GetURBState>
 800bf42:	4603      	mov	r3, r0
 800bf44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800bf46:	7bbb      	ldrb	r3, [r7, #14]
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d11e      	bne.n	800bf8a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	7c1b      	ldrb	r3, [r3, #16]
 800bf50:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bf54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8adb      	ldrh	r3, [r3, #22]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00a      	beq.n	800bf74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800bf5e:	7b7b      	ldrb	r3, [r7, #13]
 800bf60:	2b80      	cmp	r3, #128	; 0x80
 800bf62:	d103      	bne.n	800bf6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2203      	movs	r2, #3
 800bf68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bf6a:	e117      	b.n	800c19c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2205      	movs	r2, #5
 800bf70:	761a      	strb	r2, [r3, #24]
      break;
 800bf72:	e113      	b.n	800c19c <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800bf74:	7b7b      	ldrb	r3, [r7, #13]
 800bf76:	2b80      	cmp	r3, #128	; 0x80
 800bf78:	d103      	bne.n	800bf82 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2209      	movs	r2, #9
 800bf7e:	761a      	strb	r2, [r3, #24]
      break;
 800bf80:	e10c      	b.n	800c19c <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2207      	movs	r2, #7
 800bf86:	761a      	strb	r2, [r3, #24]
      break;
 800bf88:	e108      	b.n	800c19c <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
 800bf8c:	2b04      	cmp	r3, #4
 800bf8e:	d003      	beq.n	800bf98 <USBH_HandleControl+0xcc>
 800bf90:	7bbb      	ldrb	r3, [r7, #14]
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	f040 8102 	bne.w	800c19c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	220b      	movs	r2, #11
 800bf9c:	761a      	strb	r2, [r3, #24]
      break;
 800bf9e:	e0fd      	b.n	800c19c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bfa6:	b29a      	uxth	r2, r3
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6899      	ldr	r1, [r3, #8]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	899a      	ldrh	r2, [r3, #12]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	791b      	ldrb	r3, [r3, #4]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 f93c 	bl	800c236 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2204      	movs	r2, #4
 800bfc2:	761a      	strb	r2, [r3, #24]
      break;
 800bfc4:	e0f3      	b.n	800c1ae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	791b      	ldrb	r3, [r3, #4]
 800bfca:	4619      	mov	r1, r3
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f003 f803 	bl	800efd8 <USBH_LL_GetURBState>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	2b01      	cmp	r3, #1
 800bfda:	d102      	bne.n	800bfe2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2209      	movs	r2, #9
 800bfe0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800bfe2:	7bbb      	ldrb	r3, [r7, #14]
 800bfe4:	2b05      	cmp	r3, #5
 800bfe6:	d102      	bne.n	800bfee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800bfec:	e0d8      	b.n	800c1a0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800bfee:	7bbb      	ldrb	r3, [r7, #14]
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	f040 80d5 	bne.w	800c1a0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	220b      	movs	r2, #11
 800bffa:	761a      	strb	r2, [r3, #24]
      break;
 800bffc:	e0d0      	b.n	800c1a0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6899      	ldr	r1, [r3, #8]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	899a      	ldrh	r2, [r3, #12]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	7958      	ldrb	r0, [r3, #5]
 800c00a:	2301      	movs	r3, #1
 800c00c:	9300      	str	r3, [sp, #0]
 800c00e:	4603      	mov	r3, r0
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f000 f8eb 	bl	800c1ec <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2206      	movs	r2, #6
 800c026:	761a      	strb	r2, [r3, #24]
      break;
 800c028:	e0c1      	b.n	800c1ae <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	795b      	ldrb	r3, [r3, #5]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f002 ffd1 	bl	800efd8 <USBH_LL_GetURBState>
 800c036:	4603      	mov	r3, r0
 800c038:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d103      	bne.n	800c048 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2207      	movs	r2, #7
 800c044:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c046:	e0ad      	b.n	800c1a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800c048:	7bbb      	ldrb	r3, [r7, #14]
 800c04a:	2b05      	cmp	r3, #5
 800c04c:	d105      	bne.n	800c05a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	220c      	movs	r2, #12
 800c052:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c054:	2303      	movs	r3, #3
 800c056:	73fb      	strb	r3, [r7, #15]
      break;
 800c058:	e0a4      	b.n	800c1a4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c05a:	7bbb      	ldrb	r3, [r7, #14]
 800c05c:	2b02      	cmp	r3, #2
 800c05e:	d103      	bne.n	800c068 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2205      	movs	r2, #5
 800c064:	761a      	strb	r2, [r3, #24]
      break;
 800c066:	e09d      	b.n	800c1a4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b04      	cmp	r3, #4
 800c06c:	f040 809a 	bne.w	800c1a4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	220b      	movs	r2, #11
 800c074:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c076:	2302      	movs	r3, #2
 800c078:	73fb      	strb	r3, [r7, #15]
      break;
 800c07a:	e093      	b.n	800c1a4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	791b      	ldrb	r3, [r3, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	2100      	movs	r1, #0
 800c084:	6878      	ldr	r0, [r7, #4]
 800c086:	f000 f8d6 	bl	800c236 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c090:	b29a      	uxth	r2, r3
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2208      	movs	r2, #8
 800c09a:	761a      	strb	r2, [r3, #24]

      break;
 800c09c:	e087      	b.n	800c1ae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	791b      	ldrb	r3, [r3, #4]
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f002 ff97 	bl	800efd8 <USBH_LL_GetURBState>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c0ae:	7bbb      	ldrb	r3, [r7, #14]
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d105      	bne.n	800c0c0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	220d      	movs	r2, #13
 800c0b8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0be:	e073      	b.n	800c1a8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800c0c0:	7bbb      	ldrb	r3, [r7, #14]
 800c0c2:	2b04      	cmp	r3, #4
 800c0c4:	d103      	bne.n	800c0ce <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	220b      	movs	r2, #11
 800c0ca:	761a      	strb	r2, [r3, #24]
      break;
 800c0cc:	e06c      	b.n	800c1a8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800c0ce:	7bbb      	ldrb	r3, [r7, #14]
 800c0d0:	2b05      	cmp	r3, #5
 800c0d2:	d169      	bne.n	800c1a8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	73fb      	strb	r3, [r7, #15]
      break;
 800c0d8:	e066      	b.n	800c1a8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	795a      	ldrb	r2, [r3, #5]
 800c0de:	2301      	movs	r3, #1
 800c0e0:	9300      	str	r3, [sp, #0]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f87f 	bl	800c1ec <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c0f4:	b29a      	uxth	r2, r3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	220a      	movs	r2, #10
 800c0fe:	761a      	strb	r2, [r3, #24]
      break;
 800c100:	e055      	b.n	800c1ae <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	795b      	ldrb	r3, [r3, #5]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f002 ff65 	bl	800efd8 <USBH_LL_GetURBState>
 800c10e:	4603      	mov	r3, r0
 800c110:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c112:	7bbb      	ldrb	r3, [r7, #14]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d105      	bne.n	800c124 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800c118:	2300      	movs	r3, #0
 800c11a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	220d      	movs	r2, #13
 800c120:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c122:	e043      	b.n	800c1ac <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c124:	7bbb      	ldrb	r3, [r7, #14]
 800c126:	2b02      	cmp	r3, #2
 800c128:	d103      	bne.n	800c132 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2209      	movs	r2, #9
 800c12e:	761a      	strb	r2, [r3, #24]
      break;
 800c130:	e03c      	b.n	800c1ac <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	2b04      	cmp	r3, #4
 800c136:	d139      	bne.n	800c1ac <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	220b      	movs	r2, #11
 800c13c:	761a      	strb	r2, [r3, #24]
      break;
 800c13e:	e035      	b.n	800c1ac <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7e5b      	ldrb	r3, [r3, #25]
 800c144:	3301      	adds	r3, #1
 800c146:	b2da      	uxtb	r2, r3
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	765a      	strb	r2, [r3, #25]
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	7e5b      	ldrb	r3, [r3, #25]
 800c150:	2b02      	cmp	r3, #2
 800c152:	d806      	bhi.n	800c162 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c160:	e025      	b.n	800c1ae <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c168:	2106      	movs	r1, #6
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	2200      	movs	r2, #0
 800c172:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	795b      	ldrb	r3, [r3, #5]
 800c178:	4619      	mov	r1, r3
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 f90c 	bl	800c398 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	791b      	ldrb	r3, [r3, #4]
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f906 	bl	800c398 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c192:	2302      	movs	r3, #2
 800c194:	73fb      	strb	r3, [r7, #15]
      break;
 800c196:	e00a      	b.n	800c1ae <USBH_HandleControl+0x2e2>

    default:
      break;
 800c198:	bf00      	nop
 800c19a:	e008      	b.n	800c1ae <USBH_HandleControl+0x2e2>
      break;
 800c19c:	bf00      	nop
 800c19e:	e006      	b.n	800c1ae <USBH_HandleControl+0x2e2>
      break;
 800c1a0:	bf00      	nop
 800c1a2:	e004      	b.n	800c1ae <USBH_HandleControl+0x2e2>
      break;
 800c1a4:	bf00      	nop
 800c1a6:	e002      	b.n	800c1ae <USBH_HandleControl+0x2e2>
      break;
 800c1a8:	bf00      	nop
 800c1aa:	e000      	b.n	800c1ae <USBH_HandleControl+0x2e2>
      break;
 800c1ac:	bf00      	nop
  }

  return status;
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3710      	adds	r7, #16
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	bd80      	pop	{r7, pc}

0800c1b8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b088      	sub	sp, #32
 800c1bc:	af04      	add	r7, sp, #16
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c1c6:	79f9      	ldrb	r1, [r7, #7]
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	9303      	str	r3, [sp, #12]
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	9302      	str	r3, [sp, #8]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	9301      	str	r3, [sp, #4]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	9300      	str	r3, [sp, #0]
 800c1d8:	2300      	movs	r3, #0
 800c1da:	2200      	movs	r2, #0
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f002 feca 	bl	800ef76 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c1e2:	2300      	movs	r3, #0
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	3710      	adds	r7, #16
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bd80      	pop	{r7, pc}

0800c1ec <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b088      	sub	sp, #32
 800c1f0:	af04      	add	r7, sp, #16
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	4611      	mov	r1, r2
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	80fb      	strh	r3, [r7, #6]
 800c1fe:	4613      	mov	r3, r2
 800c200:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c20c:	2300      	movs	r3, #0
 800c20e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c210:	7979      	ldrb	r1, [r7, #5]
 800c212:	7e3b      	ldrb	r3, [r7, #24]
 800c214:	9303      	str	r3, [sp, #12]
 800c216:	88fb      	ldrh	r3, [r7, #6]
 800c218:	9302      	str	r3, [sp, #8]
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	2301      	movs	r3, #1
 800c220:	9300      	str	r3, [sp, #0]
 800c222:	2300      	movs	r3, #0
 800c224:	2200      	movs	r2, #0
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f002 fea5 	bl	800ef76 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c22c:	2300      	movs	r3, #0
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}

0800c236 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c236:	b580      	push	{r7, lr}
 800c238:	b088      	sub	sp, #32
 800c23a:	af04      	add	r7, sp, #16
 800c23c:	60f8      	str	r0, [r7, #12]
 800c23e:	60b9      	str	r1, [r7, #8]
 800c240:	4611      	mov	r1, r2
 800c242:	461a      	mov	r2, r3
 800c244:	460b      	mov	r3, r1
 800c246:	80fb      	strh	r3, [r7, #6]
 800c248:	4613      	mov	r3, r2
 800c24a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c24c:	7979      	ldrb	r1, [r7, #5]
 800c24e:	2300      	movs	r3, #0
 800c250:	9303      	str	r3, [sp, #12]
 800c252:	88fb      	ldrh	r3, [r7, #6]
 800c254:	9302      	str	r3, [sp, #8]
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	2301      	movs	r3, #1
 800c25c:	9300      	str	r3, [sp, #0]
 800c25e:	2300      	movs	r3, #0
 800c260:	2201      	movs	r2, #1
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f002 fe87 	bl	800ef76 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c268:	2300      	movs	r3, #0

}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b088      	sub	sp, #32
 800c276:	af04      	add	r7, sp, #16
 800c278:	60f8      	str	r0, [r7, #12]
 800c27a:	60b9      	str	r1, [r7, #8]
 800c27c:	4611      	mov	r1, r2
 800c27e:	461a      	mov	r2, r3
 800c280:	460b      	mov	r3, r1
 800c282:	80fb      	strh	r3, [r7, #6]
 800c284:	4613      	mov	r3, r2
 800c286:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d001      	beq.n	800c296 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c296:	7979      	ldrb	r1, [r7, #5]
 800c298:	7e3b      	ldrb	r3, [r7, #24]
 800c29a:	9303      	str	r3, [sp, #12]
 800c29c:	88fb      	ldrh	r3, [r7, #6]
 800c29e:	9302      	str	r3, [sp, #8]
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	9301      	str	r3, [sp, #4]
 800c2a4:	2301      	movs	r3, #1
 800c2a6:	9300      	str	r3, [sp, #0]
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f002 fe62 	bl	800ef76 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c2b2:	2300      	movs	r3, #0
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3710      	adds	r7, #16
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}

0800c2bc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b088      	sub	sp, #32
 800c2c0:	af04      	add	r7, sp, #16
 800c2c2:	60f8      	str	r0, [r7, #12]
 800c2c4:	60b9      	str	r1, [r7, #8]
 800c2c6:	4611      	mov	r1, r2
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	460b      	mov	r3, r1
 800c2cc:	80fb      	strh	r3, [r7, #6]
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2d2:	7979      	ldrb	r1, [r7, #5]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9303      	str	r3, [sp, #12]
 800c2d8:	88fb      	ldrh	r3, [r7, #6]
 800c2da:	9302      	str	r3, [sp, #8]
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	9301      	str	r3, [sp, #4]
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	9300      	str	r3, [sp, #0]
 800c2e4:	2302      	movs	r3, #2
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f002 fe44 	bl	800ef76 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3710      	adds	r7, #16
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}

0800c2f8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b086      	sub	sp, #24
 800c2fc:	af04      	add	r7, sp, #16
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	4608      	mov	r0, r1
 800c302:	4611      	mov	r1, r2
 800c304:	461a      	mov	r2, r3
 800c306:	4603      	mov	r3, r0
 800c308:	70fb      	strb	r3, [r7, #3]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70bb      	strb	r3, [r7, #2]
 800c30e:	4613      	mov	r3, r2
 800c310:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c312:	7878      	ldrb	r0, [r7, #1]
 800c314:	78ba      	ldrb	r2, [r7, #2]
 800c316:	78f9      	ldrb	r1, [r7, #3]
 800c318:	8b3b      	ldrh	r3, [r7, #24]
 800c31a:	9302      	str	r3, [sp, #8]
 800c31c:	7d3b      	ldrb	r3, [r7, #20]
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	7c3b      	ldrb	r3, [r7, #16]
 800c322:	9300      	str	r3, [sp, #0]
 800c324:	4603      	mov	r3, r0
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f002 fdd7 	bl	800eeda <USBH_LL_OpenPipe>

  return USBH_OK;
 800c32c:	2300      	movs	r3, #0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c336:	b580      	push	{r7, lr}
 800c338:	b082      	sub	sp, #8
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
 800c33e:	460b      	mov	r3, r1
 800c340:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c342:	78fb      	ldrb	r3, [r7, #3]
 800c344:	4619      	mov	r1, r3
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f002 fdf6 	bl	800ef38 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3708      	adds	r7, #8
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 f836 	bl	800c3d4 <USBH_GetFreePipe>
 800c368:	4603      	mov	r3, r0
 800c36a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c36c:	89fb      	ldrh	r3, [r7, #14]
 800c36e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c372:	4293      	cmp	r3, r2
 800c374:	d00a      	beq.n	800c38c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c376:	78fa      	ldrb	r2, [r7, #3]
 800c378:	89fb      	ldrh	r3, [r7, #14]
 800c37a:	f003 030f 	and.w	r3, r3, #15
 800c37e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	33e0      	adds	r3, #224	; 0xe0
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	440b      	add	r3, r1
 800c38a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c38c:	89fb      	ldrh	r3, [r7, #14]
 800c38e:	b2db      	uxtb	r3, r3
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	460b      	mov	r3, r1
 800c3a2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c3a4:	78fb      	ldrb	r3, [r7, #3]
 800c3a6:	2b0a      	cmp	r3, #10
 800c3a8:	d80d      	bhi.n	800c3c6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c3aa:	78fb      	ldrb	r3, [r7, #3]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	33e0      	adds	r3, #224	; 0xe0
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	4413      	add	r3, r2
 800c3b4:	685a      	ldr	r2, [r3, #4]
 800c3b6:	78fb      	ldrb	r3, [r7, #3]
 800c3b8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c3bc:	6879      	ldr	r1, [r7, #4]
 800c3be:	33e0      	adds	r3, #224	; 0xe0
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	440b      	add	r3, r1
 800c3c4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73fb      	strb	r3, [r7, #15]
 800c3e4:	e00f      	b.n	800c406 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c3e6:	7bfb      	ldrb	r3, [r7, #15]
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	33e0      	adds	r3, #224	; 0xe0
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d102      	bne.n	800c400 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c3fa:	7bfb      	ldrb	r3, [r7, #15]
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	e007      	b.n	800c410 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	3301      	adds	r3, #1
 800c404:	73fb      	strb	r3, [r7, #15]
 800c406:	7bfb      	ldrb	r3, [r7, #15]
 800c408:	2b0a      	cmp	r3, #10
 800c40a:	d9ec      	bls.n	800c3e6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c40c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c410:	4618      	mov	r0, r3
 800c412:	3714      	adds	r7, #20
 800c414:	46bd      	mov	sp, r7
 800c416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41a:	4770      	bx	lr

0800c41c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	4603      	mov	r3, r0
 800c424:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c426:	79fb      	ldrb	r3, [r7, #7]
 800c428:	4a08      	ldr	r2, [pc, #32]	; (800c44c <disk_status+0x30>)
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	4413      	add	r3, r2
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	79fa      	ldrb	r2, [r7, #7]
 800c434:	4905      	ldr	r1, [pc, #20]	; (800c44c <disk_status+0x30>)
 800c436:	440a      	add	r2, r1
 800c438:	7a12      	ldrb	r2, [r2, #8]
 800c43a:	4610      	mov	r0, r2
 800c43c:	4798      	blx	r3
 800c43e:	4603      	mov	r3, r0
 800c440:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c442:	7bfb      	ldrb	r3, [r7, #15]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	200013b0 	.word	0x200013b0

0800c450 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	4603      	mov	r3, r0
 800c458:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	4a0d      	ldr	r2, [pc, #52]	; (800c498 <disk_initialize+0x48>)
 800c462:	5cd3      	ldrb	r3, [r2, r3]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d111      	bne.n	800c48c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c468:	79fb      	ldrb	r3, [r7, #7]
 800c46a:	4a0b      	ldr	r2, [pc, #44]	; (800c498 <disk_initialize+0x48>)
 800c46c:	2101      	movs	r1, #1
 800c46e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c470:	79fb      	ldrb	r3, [r7, #7]
 800c472:	4a09      	ldr	r2, [pc, #36]	; (800c498 <disk_initialize+0x48>)
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	685b      	ldr	r3, [r3, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	79fa      	ldrb	r2, [r7, #7]
 800c47e:	4906      	ldr	r1, [pc, #24]	; (800c498 <disk_initialize+0x48>)
 800c480:	440a      	add	r2, r1
 800c482:	7a12      	ldrb	r2, [r2, #8]
 800c484:	4610      	mov	r0, r2
 800c486:	4798      	blx	r3
 800c488:	4603      	mov	r3, r0
 800c48a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	200013b0 	.word	0x200013b0

0800c49c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c49c:	b590      	push	{r4, r7, lr}
 800c49e:	b087      	sub	sp, #28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60b9      	str	r1, [r7, #8]
 800c4a4:	607a      	str	r2, [r7, #4]
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	4a0a      	ldr	r2, [pc, #40]	; (800c4d8 <disk_read+0x3c>)
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	4413      	add	r3, r2
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	689c      	ldr	r4, [r3, #8]
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	4a07      	ldr	r2, [pc, #28]	; (800c4d8 <disk_read+0x3c>)
 800c4bc:	4413      	add	r3, r2
 800c4be:	7a18      	ldrb	r0, [r3, #8]
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	68b9      	ldr	r1, [r7, #8]
 800c4c6:	47a0      	blx	r4
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	75fb      	strb	r3, [r7, #23]
  return res;
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	371c      	adds	r7, #28
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd90      	pop	{r4, r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	200013b0 	.word	0x200013b0

0800c4dc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60b9      	str	r1, [r7, #8]
 800c4e4:	607a      	str	r2, [r7, #4]
 800c4e6:	603b      	str	r3, [r7, #0]
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c4ec:	7bfb      	ldrb	r3, [r7, #15]
 800c4ee:	4a0a      	ldr	r2, [pc, #40]	; (800c518 <disk_write+0x3c>)
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	68dc      	ldr	r4, [r3, #12]
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
 800c4fa:	4a07      	ldr	r2, [pc, #28]	; (800c518 <disk_write+0x3c>)
 800c4fc:	4413      	add	r3, r2
 800c4fe:	7a18      	ldrb	r0, [r3, #8]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	68b9      	ldr	r1, [r7, #8]
 800c506:	47a0      	blx	r4
 800c508:	4603      	mov	r3, r0
 800c50a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c50e:	4618      	mov	r0, r3
 800c510:	371c      	adds	r7, #28
 800c512:	46bd      	mov	sp, r7
 800c514:	bd90      	pop	{r4, r7, pc}
 800c516:	bf00      	nop
 800c518:	200013b0 	.word	0x200013b0

0800c51c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	4603      	mov	r3, r0
 800c524:	603a      	str	r2, [r7, #0]
 800c526:	71fb      	strb	r3, [r7, #7]
 800c528:	460b      	mov	r3, r1
 800c52a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c52c:	79fb      	ldrb	r3, [r7, #7]
 800c52e:	4a09      	ldr	r2, [pc, #36]	; (800c554 <disk_ioctl+0x38>)
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	79fa      	ldrb	r2, [r7, #7]
 800c53a:	4906      	ldr	r1, [pc, #24]	; (800c554 <disk_ioctl+0x38>)
 800c53c:	440a      	add	r2, r1
 800c53e:	7a10      	ldrb	r0, [r2, #8]
 800c540:	79b9      	ldrb	r1, [r7, #6]
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	4798      	blx	r3
 800c546:	4603      	mov	r3, r0
 800c548:	73fb      	strb	r3, [r7, #15]
  return res;
 800c54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	200013b0 	.word	0x200013b0

0800c558 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	3301      	adds	r3, #1
 800c564:	781b      	ldrb	r3, [r3, #0]
 800c566:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c568:	89fb      	ldrh	r3, [r7, #14]
 800c56a:	021b      	lsls	r3, r3, #8
 800c56c:	b21a      	sxth	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	b21b      	sxth	r3, r3
 800c574:	4313      	orrs	r3, r2
 800c576:	b21b      	sxth	r3, r3
 800c578:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c57a:	89fb      	ldrh	r3, [r7, #14]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3714      	adds	r7, #20
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	3303      	adds	r3, #3
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	021b      	lsls	r3, r3, #8
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	3202      	adds	r2, #2
 800c5a0:	7812      	ldrb	r2, [r2, #0]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	021b      	lsls	r3, r3, #8
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	3201      	adds	r2, #1
 800c5ae:	7812      	ldrb	r2, [r2, #0]
 800c5b0:	4313      	orrs	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	021b      	lsls	r3, r3, #8
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	7812      	ldrb	r2, [r2, #0]
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	60fb      	str	r3, [r7, #12]
	return rv;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
}
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3714      	adds	r7, #20
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5cc:	4770      	bx	lr

0800c5ce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c5ce:	b480      	push	{r7}
 800c5d0:	b083      	sub	sp, #12
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
 800c5d6:	460b      	mov	r3, r1
 800c5d8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	1c5a      	adds	r2, r3, #1
 800c5de:	607a      	str	r2, [r7, #4]
 800c5e0:	887a      	ldrh	r2, [r7, #2]
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	887b      	ldrh	r3, [r7, #2]
 800c5e8:	0a1b      	lsrs	r3, r3, #8
 800c5ea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	1c5a      	adds	r2, r3, #1
 800c5f0:	607a      	str	r2, [r7, #4]
 800c5f2:	887a      	ldrh	r2, [r7, #2]
 800c5f4:	b2d2      	uxtb	r2, r2
 800c5f6:	701a      	strb	r2, [r3, #0]
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr

0800c604 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c604:	b480      	push	{r7}
 800c606:	b083      	sub	sp, #12
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	1c5a      	adds	r2, r3, #1
 800c612:	607a      	str	r2, [r7, #4]
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	b2d2      	uxtb	r2, r2
 800c618:	701a      	strb	r2, [r3, #0]
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	0a1b      	lsrs	r3, r3, #8
 800c61e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	607a      	str	r2, [r7, #4]
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	b2d2      	uxtb	r2, r2
 800c62a:	701a      	strb	r2, [r3, #0]
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	0a1b      	lsrs	r3, r3, #8
 800c630:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	1c5a      	adds	r2, r3, #1
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	683a      	ldr	r2, [r7, #0]
 800c63a:	b2d2      	uxtb	r2, r2
 800c63c:	701a      	strb	r2, [r3, #0]
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	0a1b      	lsrs	r3, r3, #8
 800c642:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	1c5a      	adds	r2, r3, #1
 800c648:	607a      	str	r2, [r7, #4]
 800c64a:	683a      	ldr	r2, [r7, #0]
 800c64c:	b2d2      	uxtb	r2, r2
 800c64e:	701a      	strb	r2, [r3, #0]
}
 800c650:	bf00      	nop
 800c652:	370c      	adds	r7, #12
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c65c:	b480      	push	{r7}
 800c65e:	b087      	sub	sp, #28
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00d      	beq.n	800c692 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	1c53      	adds	r3, r2, #1
 800c67a:	613b      	str	r3, [r7, #16]
 800c67c:	697b      	ldr	r3, [r7, #20]
 800c67e:	1c59      	adds	r1, r3, #1
 800c680:	6179      	str	r1, [r7, #20]
 800c682:	7812      	ldrb	r2, [r2, #0]
 800c684:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3b01      	subs	r3, #1
 800c68a:	607b      	str	r3, [r7, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d1f1      	bne.n	800c676 <mem_cpy+0x1a>
	}
}
 800c692:	bf00      	nop
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c69e:	b480      	push	{r7}
 800c6a0:	b087      	sub	sp, #28
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c6ae:	697b      	ldr	r3, [r7, #20]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	617a      	str	r2, [r7, #20]
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	b2d2      	uxtb	r2, r2
 800c6b8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	607b      	str	r3, [r7, #4]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f3      	bne.n	800c6ae <mem_set+0x10>
}
 800c6c6:	bf00      	nop
 800c6c8:	371c      	adds	r7, #28
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr

0800c6d2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c6d2:	b480      	push	{r7}
 800c6d4:	b089      	sub	sp, #36	; 0x24
 800c6d6:	af00      	add	r7, sp, #0
 800c6d8:	60f8      	str	r0, [r7, #12]
 800c6da:	60b9      	str	r1, [r7, #8]
 800c6dc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	61fb      	str	r3, [r7, #28]
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c6ea:	69fb      	ldr	r3, [r7, #28]
 800c6ec:	1c5a      	adds	r2, r3, #1
 800c6ee:	61fa      	str	r2, [r7, #28]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	61ba      	str	r2, [r7, #24]
 800c6fa:	781b      	ldrb	r3, [r3, #0]
 800c6fc:	1acb      	subs	r3, r1, r3
 800c6fe:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3b01      	subs	r3, #1
 800c704:	607b      	str	r3, [r7, #4]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d002      	beq.n	800c712 <mem_cmp+0x40>
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0eb      	beq.n	800c6ea <mem_cmp+0x18>

	return r;
 800c712:	697b      	ldr	r3, [r7, #20]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3724      	adds	r7, #36	; 0x24
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c72a:	e002      	b.n	800c732 <chk_chr+0x12>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	3301      	adds	r3, #1
 800c730:	607b      	str	r3, [r7, #4]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d005      	beq.n	800c746 <chk_chr+0x26>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	4293      	cmp	r3, r2
 800c744:	d1f2      	bne.n	800c72c <chk_chr+0xc>
	return *str;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	781b      	ldrb	r3, [r3, #0]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	370c      	adds	r7, #12
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr
	...

0800c758 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c762:	2300      	movs	r3, #0
 800c764:	60bb      	str	r3, [r7, #8]
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	60fb      	str	r3, [r7, #12]
 800c76a:	e029      	b.n	800c7c0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c76c:	4a27      	ldr	r2, [pc, #156]	; (800c80c <chk_lock+0xb4>)
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	011b      	lsls	r3, r3, #4
 800c772:	4413      	add	r3, r2
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d01d      	beq.n	800c7b6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c77a:	4a24      	ldr	r2, [pc, #144]	; (800c80c <chk_lock+0xb4>)
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	011b      	lsls	r3, r3, #4
 800c780:	4413      	add	r3, r2
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d116      	bne.n	800c7ba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c78c:	4a1f      	ldr	r2, [pc, #124]	; (800c80c <chk_lock+0xb4>)
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	011b      	lsls	r3, r3, #4
 800c792:	4413      	add	r3, r2
 800c794:	3304      	adds	r3, #4
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c79c:	429a      	cmp	r2, r3
 800c79e:	d10c      	bne.n	800c7ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c7a0:	4a1a      	ldr	r2, [pc, #104]	; (800c80c <chk_lock+0xb4>)
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	011b      	lsls	r3, r3, #4
 800c7a6:	4413      	add	r3, r2
 800c7a8:	3308      	adds	r3, #8
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d102      	bne.n	800c7ba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c7b4:	e007      	b.n	800c7c6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	60fb      	str	r3, [r7, #12]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2b01      	cmp	r3, #1
 800c7c4:	d9d2      	bls.n	800c76c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d109      	bne.n	800c7e0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d102      	bne.n	800c7d8 <chk_lock+0x80>
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2b02      	cmp	r3, #2
 800c7d6:	d101      	bne.n	800c7dc <chk_lock+0x84>
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e010      	b.n	800c7fe <chk_lock+0xa6>
 800c7dc:	2312      	movs	r3, #18
 800c7de:	e00e      	b.n	800c7fe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d108      	bne.n	800c7f8 <chk_lock+0xa0>
 800c7e6:	4a09      	ldr	r2, [pc, #36]	; (800c80c <chk_lock+0xb4>)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	011b      	lsls	r3, r3, #4
 800c7ec:	4413      	add	r3, r2
 800c7ee:	330c      	adds	r3, #12
 800c7f0:	881b      	ldrh	r3, [r3, #0]
 800c7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7f6:	d101      	bne.n	800c7fc <chk_lock+0xa4>
 800c7f8:	2310      	movs	r3, #16
 800c7fa:	e000      	b.n	800c7fe <chk_lock+0xa6>
 800c7fc:	2300      	movs	r3, #0
}
 800c7fe:	4618      	mov	r0, r3
 800c800:	3714      	adds	r7, #20
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr
 800c80a:	bf00      	nop
 800c80c:	20001390 	.word	0x20001390

0800c810 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c816:	2300      	movs	r3, #0
 800c818:	607b      	str	r3, [r7, #4]
 800c81a:	e002      	b.n	800c822 <enq_lock+0x12>
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	3301      	adds	r3, #1
 800c820:	607b      	str	r3, [r7, #4]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b01      	cmp	r3, #1
 800c826:	d806      	bhi.n	800c836 <enq_lock+0x26>
 800c828:	4a09      	ldr	r2, [pc, #36]	; (800c850 <enq_lock+0x40>)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	011b      	lsls	r3, r3, #4
 800c82e:	4413      	add	r3, r2
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2b00      	cmp	r3, #0
 800c834:	d1f2      	bne.n	800c81c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	bf14      	ite	ne
 800c83c:	2301      	movne	r3, #1
 800c83e:	2300      	moveq	r3, #0
 800c840:	b2db      	uxtb	r3, r3
}
 800c842:	4618      	mov	r0, r3
 800c844:	370c      	adds	r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
 800c84e:	bf00      	nop
 800c850:	20001390 	.word	0x20001390

0800c854 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c854:	b480      	push	{r7}
 800c856:	b085      	sub	sp, #20
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c85e:	2300      	movs	r3, #0
 800c860:	60fb      	str	r3, [r7, #12]
 800c862:	e01f      	b.n	800c8a4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c864:	4a41      	ldr	r2, [pc, #260]	; (800c96c <inc_lock+0x118>)
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	011b      	lsls	r3, r3, #4
 800c86a:	4413      	add	r3, r2
 800c86c:	681a      	ldr	r2, [r3, #0]
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	429a      	cmp	r2, r3
 800c874:	d113      	bne.n	800c89e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c876:	4a3d      	ldr	r2, [pc, #244]	; (800c96c <inc_lock+0x118>)
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	011b      	lsls	r3, r3, #4
 800c87c:	4413      	add	r3, r2
 800c87e:	3304      	adds	r3, #4
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c886:	429a      	cmp	r2, r3
 800c888:	d109      	bne.n	800c89e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c88a:	4a38      	ldr	r2, [pc, #224]	; (800c96c <inc_lock+0x118>)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	011b      	lsls	r3, r3, #4
 800c890:	4413      	add	r3, r2
 800c892:	3308      	adds	r3, #8
 800c894:	681a      	ldr	r2, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d006      	beq.n	800c8ac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b01      	cmp	r3, #1
 800c8a8:	d9dc      	bls.n	800c864 <inc_lock+0x10>
 800c8aa:	e000      	b.n	800c8ae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c8ac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d132      	bne.n	800c91a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	60fb      	str	r3, [r7, #12]
 800c8b8:	e002      	b.n	800c8c0 <inc_lock+0x6c>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	60fb      	str	r3, [r7, #12]
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d806      	bhi.n	800c8d4 <inc_lock+0x80>
 800c8c6:	4a29      	ldr	r2, [pc, #164]	; (800c96c <inc_lock+0x118>)
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	011b      	lsls	r3, r3, #4
 800c8cc:	4413      	add	r3, r2
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d1f2      	bne.n	800c8ba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d101      	bne.n	800c8de <inc_lock+0x8a>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	e040      	b.n	800c960 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	4922      	ldr	r1, [pc, #136]	; (800c96c <inc_lock+0x118>)
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	011b      	lsls	r3, r3, #4
 800c8e8:	440b      	add	r3, r1
 800c8ea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	689a      	ldr	r2, [r3, #8]
 800c8f0:	491e      	ldr	r1, [pc, #120]	; (800c96c <inc_lock+0x118>)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	011b      	lsls	r3, r3, #4
 800c8f6:	440b      	add	r3, r1
 800c8f8:	3304      	adds	r3, #4
 800c8fa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	695a      	ldr	r2, [r3, #20]
 800c900:	491a      	ldr	r1, [pc, #104]	; (800c96c <inc_lock+0x118>)
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	011b      	lsls	r3, r3, #4
 800c906:	440b      	add	r3, r1
 800c908:	3308      	adds	r3, #8
 800c90a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c90c:	4a17      	ldr	r2, [pc, #92]	; (800c96c <inc_lock+0x118>)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	011b      	lsls	r3, r3, #4
 800c912:	4413      	add	r3, r2
 800c914:	330c      	adds	r3, #12
 800c916:	2200      	movs	r2, #0
 800c918:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d009      	beq.n	800c934 <inc_lock+0xe0>
 800c920:	4a12      	ldr	r2, [pc, #72]	; (800c96c <inc_lock+0x118>)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	011b      	lsls	r3, r3, #4
 800c926:	4413      	add	r3, r2
 800c928:	330c      	adds	r3, #12
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <inc_lock+0xe0>
 800c930:	2300      	movs	r3, #0
 800c932:	e015      	b.n	800c960 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d108      	bne.n	800c94c <inc_lock+0xf8>
 800c93a:	4a0c      	ldr	r2, [pc, #48]	; (800c96c <inc_lock+0x118>)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	011b      	lsls	r3, r3, #4
 800c940:	4413      	add	r3, r2
 800c942:	330c      	adds	r3, #12
 800c944:	881b      	ldrh	r3, [r3, #0]
 800c946:	3301      	adds	r3, #1
 800c948:	b29a      	uxth	r2, r3
 800c94a:	e001      	b.n	800c950 <inc_lock+0xfc>
 800c94c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c950:	4906      	ldr	r1, [pc, #24]	; (800c96c <inc_lock+0x118>)
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	011b      	lsls	r3, r3, #4
 800c956:	440b      	add	r3, r1
 800c958:	330c      	adds	r3, #12
 800c95a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	3301      	adds	r3, #1
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr
 800c96c:	20001390 	.word	0x20001390

0800c970 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	3b01      	subs	r3, #1
 800c97c:	607b      	str	r3, [r7, #4]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d825      	bhi.n	800c9d0 <dec_lock+0x60>
		n = Files[i].ctr;
 800c984:	4a17      	ldr	r2, [pc, #92]	; (800c9e4 <dec_lock+0x74>)
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	4413      	add	r3, r2
 800c98c:	330c      	adds	r3, #12
 800c98e:	881b      	ldrh	r3, [r3, #0]
 800c990:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c992:	89fb      	ldrh	r3, [r7, #14]
 800c994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c998:	d101      	bne.n	800c99e <dec_lock+0x2e>
 800c99a:	2300      	movs	r3, #0
 800c99c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c99e:	89fb      	ldrh	r3, [r7, #14]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d002      	beq.n	800c9aa <dec_lock+0x3a>
 800c9a4:	89fb      	ldrh	r3, [r7, #14]
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c9aa:	4a0e      	ldr	r2, [pc, #56]	; (800c9e4 <dec_lock+0x74>)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	011b      	lsls	r3, r3, #4
 800c9b0:	4413      	add	r3, r2
 800c9b2:	330c      	adds	r3, #12
 800c9b4:	89fa      	ldrh	r2, [r7, #14]
 800c9b6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c9b8:	89fb      	ldrh	r3, [r7, #14]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d105      	bne.n	800c9ca <dec_lock+0x5a>
 800c9be:	4a09      	ldr	r2, [pc, #36]	; (800c9e4 <dec_lock+0x74>)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	4413      	add	r3, r2
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	737b      	strb	r3, [r7, #13]
 800c9ce:	e001      	b.n	800c9d4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c9d0:	2302      	movs	r3, #2
 800c9d2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c9d4:	7b7b      	ldrb	r3, [r7, #13]
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3714      	adds	r7, #20
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
 800c9e2:	bf00      	nop
 800c9e4:	20001390 	.word	0x20001390

0800c9e8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	e010      	b.n	800ca18 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c9f6:	4a0d      	ldr	r2, [pc, #52]	; (800ca2c <clear_lock+0x44>)
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	011b      	lsls	r3, r3, #4
 800c9fc:	4413      	add	r3, r2
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d105      	bne.n	800ca12 <clear_lock+0x2a>
 800ca06:	4a09      	ldr	r2, [pc, #36]	; (800ca2c <clear_lock+0x44>)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	011b      	lsls	r3, r3, #4
 800ca0c:	4413      	add	r3, r2
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	3301      	adds	r3, #1
 800ca16:	60fb      	str	r3, [r7, #12]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2b01      	cmp	r3, #1
 800ca1c:	d9eb      	bls.n	800c9f6 <clear_lock+0xe>
	}
}
 800ca1e:	bf00      	nop
 800ca20:	3714      	adds	r7, #20
 800ca22:	46bd      	mov	sp, r7
 800ca24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca28:	4770      	bx	lr
 800ca2a:	bf00      	nop
 800ca2c:	20001390 	.word	0x20001390

0800ca30 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	78db      	ldrb	r3, [r3, #3]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d034      	beq.n	800caae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca48:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	7858      	ldrb	r0, [r3, #1]
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca54:	2301      	movs	r3, #1
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	f7ff fd40 	bl	800c4dc <disk_write>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d002      	beq.n	800ca68 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ca62:	2301      	movs	r3, #1
 800ca64:	73fb      	strb	r3, [r7, #15]
 800ca66:	e022      	b.n	800caae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6a1b      	ldr	r3, [r3, #32]
 800ca72:	697a      	ldr	r2, [r7, #20]
 800ca74:	1ad2      	subs	r2, r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d217      	bcs.n	800caae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	789b      	ldrb	r3, [r3, #2]
 800ca82:	613b      	str	r3, [r7, #16]
 800ca84:	e010      	b.n	800caa8 <sync_window+0x78>
					wsect += fs->fsize;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	699b      	ldr	r3, [r3, #24]
 800ca8a:	697a      	ldr	r2, [r7, #20]
 800ca8c:	4413      	add	r3, r2
 800ca8e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	7858      	ldrb	r0, [r3, #1]
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	697a      	ldr	r2, [r7, #20]
 800ca9e:	f7ff fd1d 	bl	800c4dc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	3b01      	subs	r3, #1
 800caa6:	613b      	str	r3, [r7, #16]
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	2b01      	cmp	r3, #1
 800caac:	d8eb      	bhi.n	800ca86 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cac2:	2300      	movs	r3, #0
 800cac4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caca:	683a      	ldr	r2, [r7, #0]
 800cacc:	429a      	cmp	r2, r3
 800cace:	d01b      	beq.n	800cb08 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff ffad 	bl	800ca30 <sync_window>
 800cad6:	4603      	mov	r3, r0
 800cad8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cada:	7bfb      	ldrb	r3, [r7, #15]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d113      	bne.n	800cb08 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7858      	ldrb	r0, [r3, #1]
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800caea:	2301      	movs	r3, #1
 800caec:	683a      	ldr	r2, [r7, #0]
 800caee:	f7ff fcd5 	bl	800c49c <disk_read>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d004      	beq.n	800cb02 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800caf8:	f04f 33ff 	mov.w	r3, #4294967295
 800cafc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cafe:	2301      	movs	r3, #1
 800cb00:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	683a      	ldr	r2, [r7, #0]
 800cb06:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800cb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
	...

0800cb14 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b084      	sub	sp, #16
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f7ff ff87 	bl	800ca30 <sync_window>
 800cb22:	4603      	mov	r3, r0
 800cb24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d158      	bne.n	800cbde <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d148      	bne.n	800cbc6 <sync_fs+0xb2>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	791b      	ldrb	r3, [r3, #4]
 800cb38:	2b01      	cmp	r3, #1
 800cb3a:	d144      	bne.n	800cbc6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3330      	adds	r3, #48	; 0x30
 800cb40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb44:	2100      	movs	r1, #0
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7ff fda9 	bl	800c69e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	3330      	adds	r3, #48	; 0x30
 800cb50:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cb54:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800cb58:	4618      	mov	r0, r3
 800cb5a:	f7ff fd38 	bl	800c5ce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	3330      	adds	r3, #48	; 0x30
 800cb62:	4921      	ldr	r1, [pc, #132]	; (800cbe8 <sync_fs+0xd4>)
 800cb64:	4618      	mov	r0, r3
 800cb66:	f7ff fd4d 	bl	800c604 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	3330      	adds	r3, #48	; 0x30
 800cb6e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cb72:	491e      	ldr	r1, [pc, #120]	; (800cbec <sync_fs+0xd8>)
 800cb74:	4618      	mov	r0, r3
 800cb76:	f7ff fd45 	bl	800c604 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	3330      	adds	r3, #48	; 0x30
 800cb7e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	691b      	ldr	r3, [r3, #16]
 800cb86:	4619      	mov	r1, r3
 800cb88:	4610      	mov	r0, r2
 800cb8a:	f7ff fd3b 	bl	800c604 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	3330      	adds	r3, #48	; 0x30
 800cb92:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	68db      	ldr	r3, [r3, #12]
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f7ff fd31 	bl	800c604 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	7858      	ldrb	r0, [r3, #1]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbba:	2301      	movs	r3, #1
 800cbbc:	f7ff fc8e 	bl	800c4dc <disk_write>
			fs->fsi_flag = 0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	785b      	ldrb	r3, [r3, #1]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7ff fca4 	bl	800c51c <disk_ioctl>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <sync_fs+0xca>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	41615252 	.word	0x41615252
 800cbec:	61417272 	.word	0x61417272

0800cbf0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	3b02      	subs	r3, #2
 800cbfe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	3b02      	subs	r3, #2
 800cc06:	683a      	ldr	r2, [r7, #0]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d301      	bcc.n	800cc10 <clust2sect+0x20>
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e008      	b.n	800cc22 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	895b      	ldrh	r3, [r3, #10]
 800cc14:	461a      	mov	r2, r3
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	fb03 f202 	mul.w	r2, r3, r2
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc20:	4413      	add	r3, r2
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr

0800cc2e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cc2e:	b580      	push	{r7, lr}
 800cc30:	b086      	sub	sp, #24
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
 800cc36:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b01      	cmp	r3, #1
 800cc42:	d904      	bls.n	800cc4e <get_fat+0x20>
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	683a      	ldr	r2, [r7, #0]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d302      	bcc.n	800cc54 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cc4e:	2301      	movs	r3, #1
 800cc50:	617b      	str	r3, [r7, #20]
 800cc52:	e08c      	b.n	800cd6e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cc54:	f04f 33ff 	mov.w	r3, #4294967295
 800cc58:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cc5a:	693b      	ldr	r3, [r7, #16]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d045      	beq.n	800ccee <get_fat+0xc0>
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d05d      	beq.n	800cd22 <get_fat+0xf4>
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d177      	bne.n	800cd5a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	085b      	lsrs	r3, r3, #1
 800cc72:	68fa      	ldr	r2, [r7, #12]
 800cc74:	4413      	add	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	6a1a      	ldr	r2, [r3, #32]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	0a5b      	lsrs	r3, r3, #9
 800cc80:	4413      	add	r3, r2
 800cc82:	4619      	mov	r1, r3
 800cc84:	6938      	ldr	r0, [r7, #16]
 800cc86:	f7ff ff17 	bl	800cab8 <move_window>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d167      	bne.n	800cd60 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	60fa      	str	r2, [r7, #12]
 800cc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc9a:	693a      	ldr	r2, [r7, #16]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cca2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cca4:	693b      	ldr	r3, [r7, #16]
 800cca6:	6a1a      	ldr	r2, [r3, #32]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	0a5b      	lsrs	r3, r3, #9
 800ccac:	4413      	add	r3, r2
 800ccae:	4619      	mov	r1, r3
 800ccb0:	6938      	ldr	r0, [r7, #16]
 800ccb2:	f7ff ff01 	bl	800cab8 <move_window>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d153      	bne.n	800cd64 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccc2:	693a      	ldr	r2, [r7, #16]
 800ccc4:	4413      	add	r3, r2
 800ccc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ccca:	021b      	lsls	r3, r3, #8
 800cccc:	461a      	mov	r2, r3
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	f003 0301 	and.w	r3, r3, #1
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <get_fat+0xb6>
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	091b      	lsrs	r3, r3, #4
 800cce2:	e002      	b.n	800ccea <get_fat+0xbc>
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ccea:	617b      	str	r3, [r7, #20]
			break;
 800ccec:	e03f      	b.n	800cd6e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	6a1a      	ldr	r2, [r3, #32]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	0a1b      	lsrs	r3, r3, #8
 800ccf6:	4413      	add	r3, r2
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6938      	ldr	r0, [r7, #16]
 800ccfc:	f7ff fedc 	bl	800cab8 <move_window>
 800cd00:	4603      	mov	r3, r0
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d130      	bne.n	800cd68 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	005b      	lsls	r3, r3, #1
 800cd10:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800cd14:	4413      	add	r3, r2
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff fc1e 	bl	800c558 <ld_word>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	617b      	str	r3, [r7, #20]
			break;
 800cd20:	e025      	b.n	800cd6e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	6a1a      	ldr	r2, [r3, #32]
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	09db      	lsrs	r3, r3, #7
 800cd2a:	4413      	add	r3, r2
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6938      	ldr	r0, [r7, #16]
 800cd30:	f7ff fec2 	bl	800cab8 <move_window>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d118      	bne.n	800cd6c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cd48:	4413      	add	r3, r2
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	f7ff fc1c 	bl	800c588 <ld_dword>
 800cd50:	4603      	mov	r3, r0
 800cd52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cd56:	617b      	str	r3, [r7, #20]
			break;
 800cd58:	e009      	b.n	800cd6e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	617b      	str	r3, [r7, #20]
 800cd5e:	e006      	b.n	800cd6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd60:	bf00      	nop
 800cd62:	e004      	b.n	800cd6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd64:	bf00      	nop
 800cd66:	e002      	b.n	800cd6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cd68:	bf00      	nop
 800cd6a:	e000      	b.n	800cd6e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cd6c:	bf00      	nop
		}
	}

	return val;
 800cd6e:	697b      	ldr	r3, [r7, #20]
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	3718      	adds	r7, #24
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bd80      	pop	{r7, pc}

0800cd78 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cd78:	b590      	push	{r4, r7, lr}
 800cd7a:	b089      	sub	sp, #36	; 0x24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	60f8      	str	r0, [r7, #12]
 800cd80:	60b9      	str	r1, [r7, #8]
 800cd82:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cd84:	2302      	movs	r3, #2
 800cd86:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	f240 80d6 	bls.w	800cf3c <put_fat+0x1c4>
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	68ba      	ldr	r2, [r7, #8]
 800cd96:	429a      	cmp	r2, r3
 800cd98:	f080 80d0 	bcs.w	800cf3c <put_fat+0x1c4>
		switch (fs->fs_type) {
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	2b02      	cmp	r3, #2
 800cda2:	d073      	beq.n	800ce8c <put_fat+0x114>
 800cda4:	2b03      	cmp	r3, #3
 800cda6:	f000 8091 	beq.w	800cecc <put_fat+0x154>
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	f040 80c6 	bne.w	800cf3c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	61bb      	str	r3, [r7, #24]
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	085b      	lsrs	r3, r3, #1
 800cdb8:	69ba      	ldr	r2, [r7, #24]
 800cdba:	4413      	add	r3, r2
 800cdbc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	6a1a      	ldr	r2, [r3, #32]
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	0a5b      	lsrs	r3, r3, #9
 800cdc6:	4413      	add	r3, r2
 800cdc8:	4619      	mov	r1, r3
 800cdca:	68f8      	ldr	r0, [r7, #12]
 800cdcc:	f7ff fe74 	bl	800cab8 <move_window>
 800cdd0:	4603      	mov	r3, r0
 800cdd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cdd4:	7ffb      	ldrb	r3, [r7, #31]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	f040 80a9 	bne.w	800cf2e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	1c59      	adds	r1, r3, #1
 800cde6:	61b9      	str	r1, [r7, #24]
 800cde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdec:	4413      	add	r3, r2
 800cdee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f003 0301 	and.w	r3, r3, #1
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00d      	beq.n	800ce16 <put_fat+0x9e>
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	b25b      	sxtb	r3, r3
 800ce00:	f003 030f 	and.w	r3, r3, #15
 800ce04:	b25a      	sxtb	r2, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	b2db      	uxtb	r3, r3
 800ce0a:	011b      	lsls	r3, r3, #4
 800ce0c:	b25b      	sxtb	r3, r3
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	b25b      	sxtb	r3, r3
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	e001      	b.n	800ce1a <put_fat+0xa2>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2201      	movs	r2, #1
 800ce22:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6a1a      	ldr	r2, [r3, #32]
 800ce28:	69bb      	ldr	r3, [r7, #24]
 800ce2a:	0a5b      	lsrs	r3, r3, #9
 800ce2c:	4413      	add	r3, r2
 800ce2e:	4619      	mov	r1, r3
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	f7ff fe41 	bl	800cab8 <move_window>
 800ce36:	4603      	mov	r3, r0
 800ce38:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ce3a:	7ffb      	ldrb	r3, [r7, #31]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d178      	bne.n	800cf32 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4c:	4413      	add	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <put_fat+0xea>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	091b      	lsrs	r3, r3, #4
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	e00e      	b.n	800ce80 <put_fat+0x108>
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	b25b      	sxtb	r3, r3
 800ce68:	f023 030f 	bic.w	r3, r3, #15
 800ce6c:	b25a      	sxtb	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	0a1b      	lsrs	r3, r3, #8
 800ce72:	b25b      	sxtb	r3, r3
 800ce74:	f003 030f 	and.w	r3, r3, #15
 800ce78:	b25b      	sxtb	r3, r3
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	b25b      	sxtb	r3, r3
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	697a      	ldr	r2, [r7, #20]
 800ce82:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	2201      	movs	r2, #1
 800ce88:	70da      	strb	r2, [r3, #3]
			break;
 800ce8a:	e057      	b.n	800cf3c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6a1a      	ldr	r2, [r3, #32]
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	0a1b      	lsrs	r3, r3, #8
 800ce94:	4413      	add	r3, r2
 800ce96:	4619      	mov	r1, r3
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f7ff fe0d 	bl	800cab8 <move_window>
 800ce9e:	4603      	mov	r3, r0
 800cea0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cea2:	7ffb      	ldrb	r3, [r7, #31]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d146      	bne.n	800cf36 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ceb6:	4413      	add	r3, r2
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	b292      	uxth	r2, r2
 800cebc:	4611      	mov	r1, r2
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7ff fb85 	bl	800c5ce <st_word>
			fs->wflag = 1;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2201      	movs	r2, #1
 800cec8:	70da      	strb	r2, [r3, #3]
			break;
 800ceca:	e037      	b.n	800cf3c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	6a1a      	ldr	r2, [r3, #32]
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	09db      	lsrs	r3, r3, #7
 800ced4:	4413      	add	r3, r2
 800ced6:	4619      	mov	r1, r3
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f7ff fded 	bl	800cab8 <move_window>
 800cede:	4603      	mov	r3, r0
 800cee0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cee2:	7ffb      	ldrb	r3, [r7, #31]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d128      	bne.n	800cf3a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cef4:	68bb      	ldr	r3, [r7, #8]
 800cef6:	009b      	lsls	r3, r3, #2
 800cef8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cefc:	4413      	add	r3, r2
 800cefe:	4618      	mov	r0, r3
 800cf00:	f7ff fb42 	bl	800c588 <ld_dword>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800cf0a:	4323      	orrs	r3, r4
 800cf0c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800cf1c:	4413      	add	r3, r2
 800cf1e:	6879      	ldr	r1, [r7, #4]
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7ff fb6f 	bl	800c604 <st_dword>
			fs->wflag = 1;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2201      	movs	r2, #1
 800cf2a:	70da      	strb	r2, [r3, #3]
			break;
 800cf2c:	e006      	b.n	800cf3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800cf2e:	bf00      	nop
 800cf30:	e004      	b.n	800cf3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800cf32:	bf00      	nop
 800cf34:	e002      	b.n	800cf3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800cf36:	bf00      	nop
 800cf38:	e000      	b.n	800cf3c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800cf3a:	bf00      	nop
		}
	}
	return res;
 800cf3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3724      	adds	r7, #36	; 0x24
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd90      	pop	{r4, r7, pc}

0800cf46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b088      	sub	sp, #32
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	60f8      	str	r0, [r7, #12]
 800cf4e:	60b9      	str	r1, [r7, #8]
 800cf50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d904      	bls.n	800cf6c <remove_chain+0x26>
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	695b      	ldr	r3, [r3, #20]
 800cf66:	68ba      	ldr	r2, [r7, #8]
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d301      	bcc.n	800cf70 <remove_chain+0x2a>
 800cf6c:	2302      	movs	r3, #2
 800cf6e:	e04b      	b.n	800d008 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d00c      	beq.n	800cf90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800cf76:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	69b8      	ldr	r0, [r7, #24]
 800cf7e:	f7ff fefb 	bl	800cd78 <put_fat>
 800cf82:	4603      	mov	r3, r0
 800cf84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800cf86:	7ffb      	ldrb	r3, [r7, #31]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <remove_chain+0x4a>
 800cf8c:	7ffb      	ldrb	r3, [r7, #31]
 800cf8e:	e03b      	b.n	800d008 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800cf90:	68b9      	ldr	r1, [r7, #8]
 800cf92:	68f8      	ldr	r0, [r7, #12]
 800cf94:	f7ff fe4b 	bl	800cc2e <get_fat>
 800cf98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d031      	beq.n	800d004 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	2b01      	cmp	r3, #1
 800cfa4:	d101      	bne.n	800cfaa <remove_chain+0x64>
 800cfa6:	2302      	movs	r3, #2
 800cfa8:	e02e      	b.n	800d008 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfb0:	d101      	bne.n	800cfb6 <remove_chain+0x70>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e028      	b.n	800d008 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	68b9      	ldr	r1, [r7, #8]
 800cfba:	69b8      	ldr	r0, [r7, #24]
 800cfbc:	f7ff fedc 	bl	800cd78 <put_fat>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800cfc4:	7ffb      	ldrb	r3, [r7, #31]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <remove_chain+0x88>
 800cfca:	7ffb      	ldrb	r3, [r7, #31]
 800cfcc:	e01c      	b.n	800d008 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800cfce:	69bb      	ldr	r3, [r7, #24]
 800cfd0:	691a      	ldr	r2, [r3, #16]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	695b      	ldr	r3, [r3, #20]
 800cfd6:	3b02      	subs	r3, #2
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d20b      	bcs.n	800cff4 <remove_chain+0xae>
			fs->free_clst++;
 800cfdc:	69bb      	ldr	r3, [r7, #24]
 800cfde:	691b      	ldr	r3, [r3, #16]
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	69bb      	ldr	r3, [r7, #24]
 800cfe4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800cfe6:	69bb      	ldr	r3, [r7, #24]
 800cfe8:	791b      	ldrb	r3, [r3, #4]
 800cfea:	f043 0301 	orr.w	r3, r3, #1
 800cfee:	b2da      	uxtb	r2, r3
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800cff8:	69bb      	ldr	r3, [r7, #24]
 800cffa:	695b      	ldr	r3, [r3, #20]
 800cffc:	68ba      	ldr	r2, [r7, #8]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d3c6      	bcc.n	800cf90 <remove_chain+0x4a>
 800d002:	e000      	b.n	800d006 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d004:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3720      	adds	r7, #32
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b088      	sub	sp, #32
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d10d      	bne.n	800d042 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	68db      	ldr	r3, [r3, #12]
 800d02a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d004      	beq.n	800d03c <create_chain+0x2c>
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	69ba      	ldr	r2, [r7, #24]
 800d038:	429a      	cmp	r2, r3
 800d03a:	d31b      	bcc.n	800d074 <create_chain+0x64>
 800d03c:	2301      	movs	r3, #1
 800d03e:	61bb      	str	r3, [r7, #24]
 800d040:	e018      	b.n	800d074 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d042:	6839      	ldr	r1, [r7, #0]
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f7ff fdf2 	bl	800cc2e <get_fat>
 800d04a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d801      	bhi.n	800d056 <create_chain+0x46>
 800d052:	2301      	movs	r3, #1
 800d054:	e070      	b.n	800d138 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d05c:	d101      	bne.n	800d062 <create_chain+0x52>
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	e06a      	b.n	800d138 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	695b      	ldr	r3, [r3, #20]
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d201      	bcs.n	800d070 <create_chain+0x60>
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	e063      	b.n	800d138 <create_chain+0x128>
		scl = clst;
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d074:	69bb      	ldr	r3, [r7, #24]
 800d076:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	3301      	adds	r3, #1
 800d07c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d07e:	693b      	ldr	r3, [r7, #16]
 800d080:	695b      	ldr	r3, [r3, #20]
 800d082:	69fa      	ldr	r2, [r7, #28]
 800d084:	429a      	cmp	r2, r3
 800d086:	d307      	bcc.n	800d098 <create_chain+0x88>
				ncl = 2;
 800d088:	2302      	movs	r3, #2
 800d08a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d08c:	69fa      	ldr	r2, [r7, #28]
 800d08e:	69bb      	ldr	r3, [r7, #24]
 800d090:	429a      	cmp	r2, r3
 800d092:	d901      	bls.n	800d098 <create_chain+0x88>
 800d094:	2300      	movs	r3, #0
 800d096:	e04f      	b.n	800d138 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d098:	69f9      	ldr	r1, [r7, #28]
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	f7ff fdc7 	bl	800cc2e <get_fat>
 800d0a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00e      	beq.n	800d0c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2b01      	cmp	r3, #1
 800d0ac:	d003      	beq.n	800d0b6 <create_chain+0xa6>
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b4:	d101      	bne.n	800d0ba <create_chain+0xaa>
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	e03e      	b.n	800d138 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d0ba:	69fa      	ldr	r2, [r7, #28]
 800d0bc:	69bb      	ldr	r3, [r7, #24]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d1da      	bne.n	800d078 <create_chain+0x68>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e038      	b.n	800d138 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d0c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800d0cc:	69f9      	ldr	r1, [r7, #28]
 800d0ce:	6938      	ldr	r0, [r7, #16]
 800d0d0:	f7ff fe52 	bl	800cd78 <put_fat>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d0d8:	7dfb      	ldrb	r3, [r7, #23]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d109      	bne.n	800d0f2 <create_chain+0xe2>
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d006      	beq.n	800d0f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d0e4:	69fa      	ldr	r2, [r7, #28]
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6938      	ldr	r0, [r7, #16]
 800d0ea:	f7ff fe45 	bl	800cd78 <put_fat>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d0f2:	7dfb      	ldrb	r3, [r7, #23]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d116      	bne.n	800d126 <create_chain+0x116>
		fs->last_clst = ncl;
 800d0f8:	693b      	ldr	r3, [r7, #16]
 800d0fa:	69fa      	ldr	r2, [r7, #28]
 800d0fc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	691a      	ldr	r2, [r3, #16]
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	695b      	ldr	r3, [r3, #20]
 800d106:	3b02      	subs	r3, #2
 800d108:	429a      	cmp	r2, r3
 800d10a:	d804      	bhi.n	800d116 <create_chain+0x106>
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	691b      	ldr	r3, [r3, #16]
 800d110:	1e5a      	subs	r2, r3, #1
 800d112:	693b      	ldr	r3, [r7, #16]
 800d114:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	791b      	ldrb	r3, [r3, #4]
 800d11a:	f043 0301 	orr.w	r3, r3, #1
 800d11e:	b2da      	uxtb	r2, r3
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	711a      	strb	r2, [r3, #4]
 800d124:	e007      	b.n	800d136 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d126:	7dfb      	ldrb	r3, [r7, #23]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d102      	bne.n	800d132 <create_chain+0x122>
 800d12c:	f04f 33ff 	mov.w	r3, #4294967295
 800d130:	e000      	b.n	800d134 <create_chain+0x124>
 800d132:	2301      	movs	r3, #1
 800d134:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d136:	69fb      	ldr	r3, [r7, #28]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3720      	adds	r7, #32
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d140:	b480      	push	{r7}
 800d142:	b087      	sub	sp, #28
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d154:	3304      	adds	r3, #4
 800d156:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	0a5b      	lsrs	r3, r3, #9
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	8952      	ldrh	r2, [r2, #10]
 800d160:	fbb3 f3f2 	udiv	r3, r3, r2
 800d164:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d166:	693b      	ldr	r3, [r7, #16]
 800d168:	1d1a      	adds	r2, r3, #4
 800d16a:	613a      	str	r2, [r7, #16]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d170:	68bb      	ldr	r3, [r7, #8]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <clmt_clust+0x3a>
 800d176:	2300      	movs	r3, #0
 800d178:	e010      	b.n	800d19c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d17a:	697a      	ldr	r2, [r7, #20]
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	429a      	cmp	r2, r3
 800d180:	d307      	bcc.n	800d192 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d182:	697a      	ldr	r2, [r7, #20]
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	617b      	str	r3, [r7, #20]
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	3304      	adds	r3, #4
 800d18e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d190:	e7e9      	b.n	800d166 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d192:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	4413      	add	r3, r2
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	371c      	adds	r7, #28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr

0800d1a8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b086      	sub	sp, #24
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d1be:	d204      	bcs.n	800d1ca <dir_sdi+0x22>
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	f003 031f 	and.w	r3, r3, #31
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d001      	beq.n	800d1ce <dir_sdi+0x26>
		return FR_INT_ERR;
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	e063      	b.n	800d296 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d1da:	697b      	ldr	r3, [r7, #20]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d106      	bne.n	800d1ee <dir_sdi+0x46>
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b02      	cmp	r3, #2
 800d1e6:	d902      	bls.n	800d1ee <dir_sdi+0x46>
		clst = fs->dirbase;
 800d1e8:	693b      	ldr	r3, [r7, #16]
 800d1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1ec:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d1ee:	697b      	ldr	r3, [r7, #20]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10c      	bne.n	800d20e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	095b      	lsrs	r3, r3, #5
 800d1f8:	693a      	ldr	r2, [r7, #16]
 800d1fa:	8912      	ldrh	r2, [r2, #8]
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d301      	bcc.n	800d204 <dir_sdi+0x5c>
 800d200:	2302      	movs	r3, #2
 800d202:	e048      	b.n	800d296 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	61da      	str	r2, [r3, #28]
 800d20c:	e029      	b.n	800d262 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	895b      	ldrh	r3, [r3, #10]
 800d212:	025b      	lsls	r3, r3, #9
 800d214:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d216:	e019      	b.n	800d24c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6979      	ldr	r1, [r7, #20]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7ff fd06 	bl	800cc2e <get_fat>
 800d222:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d22a:	d101      	bne.n	800d230 <dir_sdi+0x88>
 800d22c:	2301      	movs	r3, #1
 800d22e:	e032      	b.n	800d296 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	2b01      	cmp	r3, #1
 800d234:	d904      	bls.n	800d240 <dir_sdi+0x98>
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d301      	bcc.n	800d244 <dir_sdi+0x9c>
 800d240:	2302      	movs	r3, #2
 800d242:	e028      	b.n	800d296 <dir_sdi+0xee>
			ofs -= csz;
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	1ad3      	subs	r3, r2, r3
 800d24a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d24c:	683a      	ldr	r2, [r7, #0]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	429a      	cmp	r2, r3
 800d252:	d2e1      	bcs.n	800d218 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d254:	6979      	ldr	r1, [r7, #20]
 800d256:	6938      	ldr	r0, [r7, #16]
 800d258:	f7ff fcca 	bl	800cbf0 <clust2sect>
 800d25c:	4602      	mov	r2, r0
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	697a      	ldr	r2, [r7, #20]
 800d266:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d101      	bne.n	800d274 <dir_sdi+0xcc>
 800d270:	2302      	movs	r3, #2
 800d272:	e010      	b.n	800d296 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	69da      	ldr	r2, [r3, #28]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	0a5b      	lsrs	r3, r3, #9
 800d27c:	441a      	add	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d28e:	441a      	add	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3718      	adds	r7, #24
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd80      	pop	{r7, pc}

0800d29e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b086      	sub	sp, #24
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
 800d2a6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	695b      	ldr	r3, [r3, #20]
 800d2b2:	3320      	adds	r3, #32
 800d2b4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	69db      	ldr	r3, [r3, #28]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d003      	beq.n	800d2c6 <dir_next+0x28>
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d2c4:	d301      	bcc.n	800d2ca <dir_next+0x2c>
 800d2c6:	2304      	movs	r3, #4
 800d2c8:	e0aa      	b.n	800d420 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d2ca:	68bb      	ldr	r3, [r7, #8]
 800d2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	f040 8098 	bne.w	800d406 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	69db      	ldr	r3, [r3, #28]
 800d2da:	1c5a      	adds	r2, r3, #1
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d10b      	bne.n	800d300 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	095b      	lsrs	r3, r3, #5
 800d2ec:	68fa      	ldr	r2, [r7, #12]
 800d2ee:	8912      	ldrh	r2, [r2, #8]
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	f0c0 8088 	bcc.w	800d406 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	61da      	str	r2, [r3, #28]
 800d2fc:	2304      	movs	r3, #4
 800d2fe:	e08f      	b.n	800d420 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	0a5b      	lsrs	r3, r3, #9
 800d304:	68fa      	ldr	r2, [r7, #12]
 800d306:	8952      	ldrh	r2, [r2, #10]
 800d308:	3a01      	subs	r2, #1
 800d30a:	4013      	ands	r3, r2
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d17a      	bne.n	800d406 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	699b      	ldr	r3, [r3, #24]
 800d316:	4619      	mov	r1, r3
 800d318:	4610      	mov	r0, r2
 800d31a:	f7ff fc88 	bl	800cc2e <get_fat>
 800d31e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d801      	bhi.n	800d32a <dir_next+0x8c>
 800d326:	2302      	movs	r3, #2
 800d328:	e07a      	b.n	800d420 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d32a:	697b      	ldr	r3, [r7, #20]
 800d32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d330:	d101      	bne.n	800d336 <dir_next+0x98>
 800d332:	2301      	movs	r3, #1
 800d334:	e074      	b.n	800d420 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	695b      	ldr	r3, [r3, #20]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	429a      	cmp	r2, r3
 800d33e:	d358      	bcc.n	800d3f2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d104      	bne.n	800d350 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	61da      	str	r2, [r3, #28]
 800d34c:	2304      	movs	r3, #4
 800d34e:	e067      	b.n	800d420 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	699b      	ldr	r3, [r3, #24]
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7ff fe59 	bl	800d010 <create_chain>
 800d35e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <dir_next+0xcc>
 800d366:	2307      	movs	r3, #7
 800d368:	e05a      	b.n	800d420 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d101      	bne.n	800d374 <dir_next+0xd6>
 800d370:	2302      	movs	r3, #2
 800d372:	e055      	b.n	800d420 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37a:	d101      	bne.n	800d380 <dir_next+0xe2>
 800d37c:	2301      	movs	r3, #1
 800d37e:	e04f      	b.n	800d420 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7ff fb55 	bl	800ca30 <sync_window>
 800d386:	4603      	mov	r3, r0
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d001      	beq.n	800d390 <dir_next+0xf2>
 800d38c:	2301      	movs	r3, #1
 800d38e:	e047      	b.n	800d420 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3330      	adds	r3, #48	; 0x30
 800d394:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d398:	2100      	movs	r1, #0
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7ff f97f 	bl	800c69e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	613b      	str	r3, [r7, #16]
 800d3a4:	6979      	ldr	r1, [r7, #20]
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f7ff fc22 	bl	800cbf0 <clust2sect>
 800d3ac:	4602      	mov	r2, r0
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	62da      	str	r2, [r3, #44]	; 0x2c
 800d3b2:	e012      	b.n	800d3da <dir_next+0x13c>
						fs->wflag = 1;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2201      	movs	r2, #1
 800d3b8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f7ff fb38 	bl	800ca30 <sync_window>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d001      	beq.n	800d3ca <dir_next+0x12c>
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	e02a      	b.n	800d420 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	613b      	str	r3, [r7, #16]
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d4:	1c5a      	adds	r2, r3, #1
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	895b      	ldrh	r3, [r3, #10]
 800d3de:	461a      	mov	r2, r3
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d3e6      	bcc.n	800d3b4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	1ad2      	subs	r2, r2, r3
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	697a      	ldr	r2, [r7, #20]
 800d3f6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d3f8:	6979      	ldr	r1, [r7, #20]
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f7ff fbf8 	bl	800cbf0 <clust2sect>
 800d400:	4602      	mov	r2, r0
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	68ba      	ldr	r2, [r7, #8]
 800d40a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d418:	441a      	add	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	3718      	adds	r7, #24
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d438:	2100      	movs	r1, #0
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f7ff feb4 	bl	800d1a8 <dir_sdi>
 800d440:	4603      	mov	r3, r0
 800d442:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d444:	7dfb      	ldrb	r3, [r7, #23]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d12b      	bne.n	800d4a2 <dir_alloc+0x7a>
		n = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	69db      	ldr	r3, [r3, #28]
 800d452:	4619      	mov	r1, r3
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f7ff fb2f 	bl	800cab8 <move_window>
 800d45a:	4603      	mov	r3, r0
 800d45c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d45e:	7dfb      	ldrb	r3, [r7, #23]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d11d      	bne.n	800d4a0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	2be5      	cmp	r3, #229	; 0xe5
 800d46c:	d004      	beq.n	800d478 <dir_alloc+0x50>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	6a1b      	ldr	r3, [r3, #32]
 800d472:	781b      	ldrb	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d107      	bne.n	800d488 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	3301      	adds	r3, #1
 800d47c:	613b      	str	r3, [r7, #16]
 800d47e:	693a      	ldr	r2, [r7, #16]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	429a      	cmp	r2, r3
 800d484:	d102      	bne.n	800d48c <dir_alloc+0x64>
 800d486:	e00c      	b.n	800d4a2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d488:	2300      	movs	r3, #0
 800d48a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d48c:	2101      	movs	r1, #1
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f7ff ff05 	bl	800d29e <dir_next>
 800d494:	4603      	mov	r3, r0
 800d496:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d498:	7dfb      	ldrb	r3, [r7, #23]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d0d7      	beq.n	800d44e <dir_alloc+0x26>
 800d49e:	e000      	b.n	800d4a2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d4a0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d4a2:	7dfb      	ldrb	r3, [r7, #23]
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	d101      	bne.n	800d4ac <dir_alloc+0x84>
 800d4a8:	2307      	movs	r3, #7
 800d4aa:	75fb      	strb	r3, [r7, #23]
	return res;
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}

0800d4b6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d4b6:	b580      	push	{r7, lr}
 800d4b8:	b084      	sub	sp, #16
 800d4ba:	af00      	add	r7, sp, #0
 800d4bc:	6078      	str	r0, [r7, #4]
 800d4be:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	331a      	adds	r3, #26
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7ff f847 	bl	800c558 <ld_word>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	2b03      	cmp	r3, #3
 800d4d4:	d109      	bne.n	800d4ea <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	3314      	adds	r3, #20
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff f83c 	bl	800c558 <ld_word>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	041b      	lsls	r3, r3, #16
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	331a      	adds	r3, #26
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	b292      	uxth	r2, r2
 800d508:	4611      	mov	r1, r2
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7ff f85f 	bl	800c5ce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b03      	cmp	r3, #3
 800d516:	d109      	bne.n	800d52c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f103 0214 	add.w	r2, r3, #20
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	0c1b      	lsrs	r3, r3, #16
 800d522:	b29b      	uxth	r3, r3
 800d524:	4619      	mov	r1, r3
 800d526:	4610      	mov	r0, r2
 800d528:	f7ff f851 	bl	800c5ce <st_word>
	}
}
 800d52c:	bf00      	nop
 800d52e:	3710      	adds	r7, #16
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b086      	sub	sp, #24
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d542:	2100      	movs	r1, #0
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f7ff fe2f 	bl	800d1a8 <dir_sdi>
 800d54a:	4603      	mov	r3, r0
 800d54c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d001      	beq.n	800d558 <dir_find+0x24>
 800d554:	7dfb      	ldrb	r3, [r7, #23]
 800d556:	e03e      	b.n	800d5d6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	69db      	ldr	r3, [r3, #28]
 800d55c:	4619      	mov	r1, r3
 800d55e:	6938      	ldr	r0, [r7, #16]
 800d560:	f7ff faaa 	bl	800cab8 <move_window>
 800d564:	4603      	mov	r3, r0
 800d566:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d12f      	bne.n	800d5ce <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d102      	bne.n	800d582 <dir_find+0x4e>
 800d57c:	2304      	movs	r3, #4
 800d57e:	75fb      	strb	r3, [r7, #23]
 800d580:	e028      	b.n	800d5d4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a1b      	ldr	r3, [r3, #32]
 800d586:	330b      	adds	r3, #11
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6a1b      	ldr	r3, [r3, #32]
 800d598:	330b      	adds	r3, #11
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	f003 0308 	and.w	r3, r3, #8
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d10a      	bne.n	800d5ba <dir_find+0x86>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a18      	ldr	r0, [r3, #32]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	3324      	adds	r3, #36	; 0x24
 800d5ac:	220b      	movs	r2, #11
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	f7ff f88f 	bl	800c6d2 <mem_cmp>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00b      	beq.n	800d5d2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d5ba:	2100      	movs	r1, #0
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff fe6e 	bl	800d29e <dir_next>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d5c6:	7dfb      	ldrb	r3, [r7, #23]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d0c5      	beq.n	800d558 <dir_find+0x24>
 800d5cc:	e002      	b.n	800d5d4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d5ce:	bf00      	nop
 800d5d0:	e000      	b.n	800d5d4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d5d2:	bf00      	nop

	return res;
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3718      	adds	r7, #24
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}

0800d5de <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d5de:	b580      	push	{r7, lr}
 800d5e0:	b084      	sub	sp, #16
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d5ec:	2101      	movs	r1, #1
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f7ff ff1a 	bl	800d428 <dir_alloc>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d11c      	bne.n	800d638 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	69db      	ldr	r3, [r3, #28]
 800d602:	4619      	mov	r1, r3
 800d604:	68b8      	ldr	r0, [r7, #8]
 800d606:	f7ff fa57 	bl	800cab8 <move_window>
 800d60a:	4603      	mov	r3, r0
 800d60c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d60e:	7bfb      	ldrb	r3, [r7, #15]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d111      	bne.n	800d638 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a1b      	ldr	r3, [r3, #32]
 800d618:	2220      	movs	r2, #32
 800d61a:	2100      	movs	r1, #0
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7ff f83e 	bl	800c69e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a18      	ldr	r0, [r3, #32]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	3324      	adds	r3, #36	; 0x24
 800d62a:	220b      	movs	r2, #11
 800d62c:	4619      	mov	r1, r3
 800d62e:	f7ff f815 	bl	800c65c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	2201      	movs	r2, #1
 800d636:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
	...

0800d644 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b088      	sub	sp, #32
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	3324      	adds	r3, #36	; 0x24
 800d658:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d65a:	220b      	movs	r2, #11
 800d65c:	2120      	movs	r1, #32
 800d65e:	68b8      	ldr	r0, [r7, #8]
 800d660:	f7ff f81d 	bl	800c69e <mem_set>
	si = i = 0; ni = 8;
 800d664:	2300      	movs	r3, #0
 800d666:	613b      	str	r3, [r7, #16]
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	617b      	str	r3, [r7, #20]
 800d66c:	2308      	movs	r3, #8
 800d66e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	1c5a      	adds	r2, r3, #1
 800d674:	617a      	str	r2, [r7, #20]
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d67e:	7ffb      	ldrb	r3, [r7, #31]
 800d680:	2b20      	cmp	r3, #32
 800d682:	d94e      	bls.n	800d722 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d684:	7ffb      	ldrb	r3, [r7, #31]
 800d686:	2b2f      	cmp	r3, #47	; 0x2f
 800d688:	d006      	beq.n	800d698 <create_name+0x54>
 800d68a:	7ffb      	ldrb	r3, [r7, #31]
 800d68c:	2b5c      	cmp	r3, #92	; 0x5c
 800d68e:	d110      	bne.n	800d6b2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d690:	e002      	b.n	800d698 <create_name+0x54>
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	3301      	adds	r3, #1
 800d696:	617b      	str	r3, [r7, #20]
 800d698:	68fa      	ldr	r2, [r7, #12]
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	4413      	add	r3, r2
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	2b2f      	cmp	r3, #47	; 0x2f
 800d6a2:	d0f6      	beq.n	800d692 <create_name+0x4e>
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	4413      	add	r3, r2
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b5c      	cmp	r3, #92	; 0x5c
 800d6ae:	d0f0      	beq.n	800d692 <create_name+0x4e>
			break;
 800d6b0:	e038      	b.n	800d724 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d6b2:	7ffb      	ldrb	r3, [r7, #31]
 800d6b4:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b6:	d003      	beq.n	800d6c0 <create_name+0x7c>
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d30c      	bcc.n	800d6da <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d6c0:	69bb      	ldr	r3, [r7, #24]
 800d6c2:	2b0b      	cmp	r3, #11
 800d6c4:	d002      	beq.n	800d6cc <create_name+0x88>
 800d6c6:	7ffb      	ldrb	r3, [r7, #31]
 800d6c8:	2b2e      	cmp	r3, #46	; 0x2e
 800d6ca:	d001      	beq.n	800d6d0 <create_name+0x8c>
 800d6cc:	2306      	movs	r3, #6
 800d6ce:	e044      	b.n	800d75a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d6d0:	2308      	movs	r3, #8
 800d6d2:	613b      	str	r3, [r7, #16]
 800d6d4:	230b      	movs	r3, #11
 800d6d6:	61bb      	str	r3, [r7, #24]
			continue;
 800d6d8:	e022      	b.n	800d720 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d6da:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	da04      	bge.n	800d6ec <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d6e2:	7ffb      	ldrb	r3, [r7, #31]
 800d6e4:	3b80      	subs	r3, #128	; 0x80
 800d6e6:	4a1f      	ldr	r2, [pc, #124]	; (800d764 <create_name+0x120>)
 800d6e8:	5cd3      	ldrb	r3, [r2, r3]
 800d6ea:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d6ec:	7ffb      	ldrb	r3, [r7, #31]
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	481d      	ldr	r0, [pc, #116]	; (800d768 <create_name+0x124>)
 800d6f2:	f7ff f815 	bl	800c720 <chk_chr>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d001      	beq.n	800d700 <create_name+0xbc>
 800d6fc:	2306      	movs	r3, #6
 800d6fe:	e02c      	b.n	800d75a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d700:	7ffb      	ldrb	r3, [r7, #31]
 800d702:	2b60      	cmp	r3, #96	; 0x60
 800d704:	d905      	bls.n	800d712 <create_name+0xce>
 800d706:	7ffb      	ldrb	r3, [r7, #31]
 800d708:	2b7a      	cmp	r3, #122	; 0x7a
 800d70a:	d802      	bhi.n	800d712 <create_name+0xce>
 800d70c:	7ffb      	ldrb	r3, [r7, #31]
 800d70e:	3b20      	subs	r3, #32
 800d710:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	613a      	str	r2, [r7, #16]
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	4413      	add	r3, r2
 800d71c:	7ffa      	ldrb	r2, [r7, #31]
 800d71e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d720:	e7a6      	b.n	800d670 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d722:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d724:	68fa      	ldr	r2, [r7, #12]
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	441a      	add	r2, r3
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d101      	bne.n	800d738 <create_name+0xf4>
 800d734:	2306      	movs	r3, #6
 800d736:	e010      	b.n	800d75a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	2be5      	cmp	r3, #229	; 0xe5
 800d73e:	d102      	bne.n	800d746 <create_name+0x102>
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	2205      	movs	r2, #5
 800d744:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d746:	7ffb      	ldrb	r3, [r7, #31]
 800d748:	2b20      	cmp	r3, #32
 800d74a:	d801      	bhi.n	800d750 <create_name+0x10c>
 800d74c:	2204      	movs	r2, #4
 800d74e:	e000      	b.n	800d752 <create_name+0x10e>
 800d750:	2200      	movs	r2, #0
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	330b      	adds	r3, #11
 800d756:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d758:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3720      	adds	r7, #32
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	0800fbd0 	.word	0x0800fbd0
 800d768:	0800faf8 	.word	0x0800faf8

0800d76c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
 800d774:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d77a:	693b      	ldr	r3, [r7, #16]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d780:	e002      	b.n	800d788 <follow_path+0x1c>
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	3301      	adds	r3, #1
 800d786:	603b      	str	r3, [r7, #0]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b2f      	cmp	r3, #47	; 0x2f
 800d78e:	d0f8      	beq.n	800d782 <follow_path+0x16>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b5c      	cmp	r3, #92	; 0x5c
 800d796:	d0f4      	beq.n	800d782 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d798:	693b      	ldr	r3, [r7, #16]
 800d79a:	2200      	movs	r2, #0
 800d79c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b1f      	cmp	r3, #31
 800d7a4:	d80a      	bhi.n	800d7bc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2280      	movs	r2, #128	; 0x80
 800d7aa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f7ff fcf9 	bl	800d1a8 <dir_sdi>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75fb      	strb	r3, [r7, #23]
 800d7ba:	e043      	b.n	800d844 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d7bc:	463b      	mov	r3, r7
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7ff ff3f 	bl	800d644 <create_name>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d134      	bne.n	800d83a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f7ff feaf 	bl	800d534 <dir_find>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d7e0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d00a      	beq.n	800d7fe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	2b04      	cmp	r3, #4
 800d7ec:	d127      	bne.n	800d83e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d7ee:	7afb      	ldrb	r3, [r7, #11]
 800d7f0:	f003 0304 	and.w	r3, r3, #4
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d122      	bne.n	800d83e <follow_path+0xd2>
 800d7f8:	2305      	movs	r3, #5
 800d7fa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d7fc:	e01f      	b.n	800d83e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d7fe:	7afb      	ldrb	r3, [r7, #11]
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	2b00      	cmp	r3, #0
 800d806:	d11c      	bne.n	800d842 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d808:	693b      	ldr	r3, [r7, #16]
 800d80a:	799b      	ldrb	r3, [r3, #6]
 800d80c:	f003 0310 	and.w	r3, r3, #16
 800d810:	2b00      	cmp	r3, #0
 800d812:	d102      	bne.n	800d81a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d814:	2305      	movs	r3, #5
 800d816:	75fb      	strb	r3, [r7, #23]
 800d818:	e014      	b.n	800d844 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d828:	4413      	add	r3, r2
 800d82a:	4619      	mov	r1, r3
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f7ff fe42 	bl	800d4b6 <ld_clust>
 800d832:	4602      	mov	r2, r0
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d838:	e7c0      	b.n	800d7bc <follow_path+0x50>
			if (res != FR_OK) break;
 800d83a:	bf00      	nop
 800d83c:	e002      	b.n	800d844 <follow_path+0xd8>
				break;
 800d83e:	bf00      	nop
 800d840:	e000      	b.n	800d844 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d842:	bf00      	nop
			}
		}
	}

	return res;
 800d844:	7dfb      	ldrb	r3, [r7, #23]
}
 800d846:	4618      	mov	r0, r3
 800d848:	3718      	adds	r7, #24
 800d84a:	46bd      	mov	sp, r7
 800d84c:	bd80      	pop	{r7, pc}

0800d84e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d84e:	b480      	push	{r7}
 800d850:	b087      	sub	sp, #28
 800d852:	af00      	add	r7, sp, #0
 800d854:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d856:	f04f 33ff 	mov.w	r3, #4294967295
 800d85a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d031      	beq.n	800d8c8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	617b      	str	r3, [r7, #20]
 800d86a:	e002      	b.n	800d872 <get_ldnumber+0x24>
 800d86c:	697b      	ldr	r3, [r7, #20]
 800d86e:	3301      	adds	r3, #1
 800d870:	617b      	str	r3, [r7, #20]
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	2b20      	cmp	r3, #32
 800d878:	d903      	bls.n	800d882 <get_ldnumber+0x34>
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	2b3a      	cmp	r3, #58	; 0x3a
 800d880:	d1f4      	bne.n	800d86c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	2b3a      	cmp	r3, #58	; 0x3a
 800d888:	d11c      	bne.n	800d8c4 <get_ldnumber+0x76>
			tp = *path;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	60fa      	str	r2, [r7, #12]
 800d896:	781b      	ldrb	r3, [r3, #0]
 800d898:	3b30      	subs	r3, #48	; 0x30
 800d89a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	2b09      	cmp	r3, #9
 800d8a0:	d80e      	bhi.n	800d8c0 <get_ldnumber+0x72>
 800d8a2:	68fa      	ldr	r2, [r7, #12]
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d10a      	bne.n	800d8c0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d107      	bne.n	800d8c0 <get_ldnumber+0x72>
					vol = (int)i;
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	3301      	adds	r3, #1
 800d8b8:	617b      	str	r3, [r7, #20]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	697a      	ldr	r2, [r7, #20]
 800d8be:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	e002      	b.n	800d8ca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d8c8:	693b      	ldr	r3, [r7, #16]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	371c      	adds	r7, #28
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
	...

0800d8d8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	70da      	strb	r2, [r3, #3]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff f8e0 	bl	800cab8 <move_window>
 800d8f8:	4603      	mov	r3, r0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d001      	beq.n	800d902 <check_fs+0x2a>
 800d8fe:	2304      	movs	r3, #4
 800d900:	e038      	b.n	800d974 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	3330      	adds	r3, #48	; 0x30
 800d906:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fe fe24 	bl	800c558 <ld_word>
 800d910:	4603      	mov	r3, r0
 800d912:	461a      	mov	r2, r3
 800d914:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d918:	429a      	cmp	r2, r3
 800d91a:	d001      	beq.n	800d920 <check_fs+0x48>
 800d91c:	2303      	movs	r3, #3
 800d91e:	e029      	b.n	800d974 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d926:	2be9      	cmp	r3, #233	; 0xe9
 800d928:	d009      	beq.n	800d93e <check_fs+0x66>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d930:	2beb      	cmp	r3, #235	; 0xeb
 800d932:	d11e      	bne.n	800d972 <check_fs+0x9a>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d93a:	2b90      	cmp	r3, #144	; 0x90
 800d93c:	d119      	bne.n	800d972 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	3330      	adds	r3, #48	; 0x30
 800d942:	3336      	adds	r3, #54	; 0x36
 800d944:	4618      	mov	r0, r3
 800d946:	f7fe fe1f 	bl	800c588 <ld_dword>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d950:	4a0a      	ldr	r2, [pc, #40]	; (800d97c <check_fs+0xa4>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d101      	bne.n	800d95a <check_fs+0x82>
 800d956:	2300      	movs	r3, #0
 800d958:	e00c      	b.n	800d974 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	3330      	adds	r3, #48	; 0x30
 800d95e:	3352      	adds	r3, #82	; 0x52
 800d960:	4618      	mov	r0, r3
 800d962:	f7fe fe11 	bl	800c588 <ld_dword>
 800d966:	4602      	mov	r2, r0
 800d968:	4b05      	ldr	r3, [pc, #20]	; (800d980 <check_fs+0xa8>)
 800d96a:	429a      	cmp	r2, r3
 800d96c:	d101      	bne.n	800d972 <check_fs+0x9a>
 800d96e:	2300      	movs	r3, #0
 800d970:	e000      	b.n	800d974 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d972:	2302      	movs	r3, #2
}
 800d974:	4618      	mov	r0, r3
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	00544146 	.word	0x00544146
 800d980:	33544146 	.word	0x33544146

0800d984 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b096      	sub	sp, #88	; 0x58
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	4613      	mov	r3, r2
 800d990:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	2200      	movs	r2, #0
 800d996:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f7ff ff58 	bl	800d84e <get_ldnumber>
 800d99e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d9a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	da01      	bge.n	800d9aa <find_volume+0x26>
 800d9a6:	230b      	movs	r3, #11
 800d9a8:	e22e      	b.n	800de08 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d9aa:	4aa8      	ldr	r2, [pc, #672]	; (800dc4c <find_volume+0x2c8>)
 800d9ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9b2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <find_volume+0x3a>
 800d9ba:	230c      	movs	r3, #12
 800d9bc:	e224      	b.n	800de08 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d9c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	f023 0301 	bic.w	r3, r3, #1
 800d9ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d01a      	beq.n	800da0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d9d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d6:	785b      	ldrb	r3, [r3, #1]
 800d9d8:	4618      	mov	r0, r3
 800d9da:	f7fe fd1f 	bl	800c41c <disk_status>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d9e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d10c      	bne.n	800da0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d9f0:	79fb      	ldrb	r3, [r7, #7]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d007      	beq.n	800da06 <find_volume+0x82>
 800d9f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9fa:	f003 0304 	and.w	r3, r3, #4
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800da02:	230a      	movs	r3, #10
 800da04:	e200      	b.n	800de08 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800da06:	2300      	movs	r3, #0
 800da08:	e1fe      	b.n	800de08 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800da0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da0c:	2200      	movs	r2, #0
 800da0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800da10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da12:	b2da      	uxtb	r2, r3
 800da14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	785b      	ldrb	r3, [r3, #1]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7fe fd17 	bl	800c450 <disk_initialize>
 800da22:	4603      	mov	r3, r0
 800da24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800da28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da2c:	f003 0301 	and.w	r3, r3, #1
 800da30:	2b00      	cmp	r3, #0
 800da32:	d001      	beq.n	800da38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800da34:	2303      	movs	r3, #3
 800da36:	e1e7      	b.n	800de08 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800da38:	79fb      	ldrb	r3, [r7, #7]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d007      	beq.n	800da4e <find_volume+0xca>
 800da3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800da42:	f003 0304 	and.w	r3, r3, #4
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800da4a:	230a      	movs	r3, #10
 800da4c:	e1dc      	b.n	800de08 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800da4e:	2300      	movs	r3, #0
 800da50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800da52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da56:	f7ff ff3f 	bl	800d8d8 <check_fs>
 800da5a:	4603      	mov	r3, r0
 800da5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800da60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da64:	2b02      	cmp	r3, #2
 800da66:	d14b      	bne.n	800db00 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da68:	2300      	movs	r3, #0
 800da6a:	643b      	str	r3, [r7, #64]	; 0x40
 800da6c:	e01f      	b.n	800daae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da70:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800da74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da76:	011b      	lsls	r3, r3, #4
 800da78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800da7c:	4413      	add	r3, r2
 800da7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da82:	3304      	adds	r3, #4
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d006      	beq.n	800da98 <find_volume+0x114>
 800da8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da8c:	3308      	adds	r3, #8
 800da8e:	4618      	mov	r0, r3
 800da90:	f7fe fd7a 	bl	800c588 <ld_dword>
 800da94:	4602      	mov	r2, r0
 800da96:	e000      	b.n	800da9a <find_volume+0x116>
 800da98:	2200      	movs	r2, #0
 800da9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800daa2:	440b      	add	r3, r1
 800daa4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800daa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daaa:	3301      	adds	r3, #1
 800daac:	643b      	str	r3, [r7, #64]	; 0x40
 800daae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab0:	2b03      	cmp	r3, #3
 800dab2:	d9dc      	bls.n	800da6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dab4:	2300      	movs	r3, #0
 800dab6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800dab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d002      	beq.n	800dac4 <find_volume+0x140>
 800dabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac0:	3b01      	subs	r3, #1
 800dac2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800dacc:	4413      	add	r3, r2
 800dace:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dad2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d005      	beq.n	800dae6 <find_volume+0x162>
 800dada:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dadc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dade:	f7ff fefb 	bl	800d8d8 <check_fs>
 800dae2:	4603      	mov	r3, r0
 800dae4:	e000      	b.n	800dae8 <find_volume+0x164>
 800dae6:	2303      	movs	r3, #3
 800dae8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800daec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800daf0:	2b01      	cmp	r3, #1
 800daf2:	d905      	bls.n	800db00 <find_volume+0x17c>
 800daf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daf6:	3301      	adds	r3, #1
 800daf8:	643b      	str	r3, [r7, #64]	; 0x40
 800dafa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dafc:	2b03      	cmp	r3, #3
 800dafe:	d9e1      	bls.n	800dac4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800db00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db04:	2b04      	cmp	r3, #4
 800db06:	d101      	bne.n	800db0c <find_volume+0x188>
 800db08:	2301      	movs	r3, #1
 800db0a:	e17d      	b.n	800de08 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800db0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800db10:	2b01      	cmp	r3, #1
 800db12:	d901      	bls.n	800db18 <find_volume+0x194>
 800db14:	230d      	movs	r3, #13
 800db16:	e177      	b.n	800de08 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	3330      	adds	r3, #48	; 0x30
 800db1c:	330b      	adds	r3, #11
 800db1e:	4618      	mov	r0, r3
 800db20:	f7fe fd1a 	bl	800c558 <ld_word>
 800db24:	4603      	mov	r3, r0
 800db26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800db2a:	d001      	beq.n	800db30 <find_volume+0x1ac>
 800db2c:	230d      	movs	r3, #13
 800db2e:	e16b      	b.n	800de08 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	3330      	adds	r3, #48	; 0x30
 800db34:	3316      	adds	r3, #22
 800db36:	4618      	mov	r0, r3
 800db38:	f7fe fd0e 	bl	800c558 <ld_word>
 800db3c:	4603      	mov	r3, r0
 800db3e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800db40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db42:	2b00      	cmp	r3, #0
 800db44:	d106      	bne.n	800db54 <find_volume+0x1d0>
 800db46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db48:	3330      	adds	r3, #48	; 0x30
 800db4a:	3324      	adds	r3, #36	; 0x24
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7fe fd1b 	bl	800c588 <ld_dword>
 800db52:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800db54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db58:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800db5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db5c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800db60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db62:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	789b      	ldrb	r3, [r3, #2]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d005      	beq.n	800db78 <find_volume+0x1f4>
 800db6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db6e:	789b      	ldrb	r3, [r3, #2]
 800db70:	2b02      	cmp	r3, #2
 800db72:	d001      	beq.n	800db78 <find_volume+0x1f4>
 800db74:	230d      	movs	r3, #13
 800db76:	e147      	b.n	800de08 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800db78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db7a:	789b      	ldrb	r3, [r3, #2]
 800db7c:	461a      	mov	r2, r3
 800db7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db80:	fb02 f303 	mul.w	r3, r2, r3
 800db84:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800db86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db90:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800db92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db94:	895b      	ldrh	r3, [r3, #10]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d008      	beq.n	800dbac <find_volume+0x228>
 800db9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db9c:	895b      	ldrh	r3, [r3, #10]
 800db9e:	461a      	mov	r2, r3
 800dba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dba2:	895b      	ldrh	r3, [r3, #10]
 800dba4:	3b01      	subs	r3, #1
 800dba6:	4013      	ands	r3, r2
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <find_volume+0x22c>
 800dbac:	230d      	movs	r3, #13
 800dbae:	e12b      	b.n	800de08 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb2:	3330      	adds	r3, #48	; 0x30
 800dbb4:	3311      	adds	r3, #17
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe fcce 	bl	800c558 <ld_word>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dbc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc6:	891b      	ldrh	r3, [r3, #8]
 800dbc8:	f003 030f 	and.w	r3, r3, #15
 800dbcc:	b29b      	uxth	r3, r3
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <find_volume+0x252>
 800dbd2:	230d      	movs	r3, #13
 800dbd4:	e118      	b.n	800de08 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	3330      	adds	r3, #48	; 0x30
 800dbda:	3313      	adds	r3, #19
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fe fcbb 	bl	800c558 <ld_word>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dbe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d106      	bne.n	800dbfa <find_volume+0x276>
 800dbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbee:	3330      	adds	r3, #48	; 0x30
 800dbf0:	3320      	adds	r3, #32
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f7fe fcc8 	bl	800c588 <ld_dword>
 800dbf8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfc:	3330      	adds	r3, #48	; 0x30
 800dbfe:	330e      	adds	r3, #14
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7fe fca9 	bl	800c558 <ld_word>
 800dc06:	4603      	mov	r3, r0
 800dc08:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dc0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d101      	bne.n	800dc14 <find_volume+0x290>
 800dc10:	230d      	movs	r3, #13
 800dc12:	e0f9      	b.n	800de08 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dc14:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc18:	4413      	add	r3, r2
 800dc1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc1c:	8912      	ldrh	r2, [r2, #8]
 800dc1e:	0912      	lsrs	r2, r2, #4
 800dc20:	b292      	uxth	r2, r2
 800dc22:	4413      	add	r3, r2
 800dc24:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dc26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d201      	bcs.n	800dc32 <find_volume+0x2ae>
 800dc2e:	230d      	movs	r3, #13
 800dc30:	e0ea      	b.n	800de08 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dc32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc36:	1ad3      	subs	r3, r2, r3
 800dc38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc3a:	8952      	ldrh	r2, [r2, #10]
 800dc3c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc40:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d103      	bne.n	800dc50 <find_volume+0x2cc>
 800dc48:	230d      	movs	r3, #13
 800dc4a:	e0dd      	b.n	800de08 <find_volume+0x484>
 800dc4c:	20001388 	.word	0x20001388
		fmt = FS_FAT32;
 800dc50:	2303      	movs	r3, #3
 800dc52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d802      	bhi.n	800dc66 <find_volume+0x2e2>
 800dc60:	2302      	movs	r3, #2
 800dc62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc68:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dc6c:	4293      	cmp	r3, r2
 800dc6e:	d802      	bhi.n	800dc76 <find_volume+0x2f2>
 800dc70:	2301      	movs	r3, #1
 800dc72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc78:	1c9a      	adds	r2, r3, #2
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc82:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dc84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc88:	441a      	add	r2, r3
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dc8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	441a      	add	r2, r3
 800dc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc96:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800dc98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	d11e      	bne.n	800dcde <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca2:	3330      	adds	r3, #48	; 0x30
 800dca4:	332a      	adds	r3, #42	; 0x2a
 800dca6:	4618      	mov	r0, r3
 800dca8:	f7fe fc56 	bl	800c558 <ld_word>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <find_volume+0x332>
 800dcb2:	230d      	movs	r3, #13
 800dcb4:	e0a8      	b.n	800de08 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb8:	891b      	ldrh	r3, [r3, #8]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <find_volume+0x33e>
 800dcbe:	230d      	movs	r3, #13
 800dcc0:	e0a2      	b.n	800de08 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	3330      	adds	r3, #48	; 0x30
 800dcc6:	332c      	adds	r3, #44	; 0x2c
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe fc5d 	bl	800c588 <ld_dword>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	647b      	str	r3, [r7, #68]	; 0x44
 800dcdc:	e01f      	b.n	800dd1e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dcde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce0:	891b      	ldrh	r3, [r3, #8]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d101      	bne.n	800dcea <find_volume+0x366>
 800dce6:	230d      	movs	r3, #13
 800dce8:	e08e      	b.n	800de08 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	6a1a      	ldr	r2, [r3, #32]
 800dcee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf0:	441a      	add	r2, r3
 800dcf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf4:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dcf6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d103      	bne.n	800dd06 <find_volume+0x382>
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	695b      	ldr	r3, [r3, #20]
 800dd02:	005b      	lsls	r3, r3, #1
 800dd04:	e00a      	b.n	800dd1c <find_volume+0x398>
 800dd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd08:	695a      	ldr	r2, [r3, #20]
 800dd0a:	4613      	mov	r3, r2
 800dd0c:	005b      	lsls	r3, r3, #1
 800dd0e:	4413      	add	r3, r2
 800dd10:	085a      	lsrs	r2, r3, #1
 800dd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd14:	695b      	ldr	r3, [r3, #20]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dd1c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd20:	699a      	ldr	r2, [r3, #24]
 800dd22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dd28:	0a5b      	lsrs	r3, r3, #9
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d201      	bcs.n	800dd32 <find_volume+0x3ae>
 800dd2e:	230d      	movs	r3, #13
 800dd30:	e06a      	b.n	800de08 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd34:	f04f 32ff 	mov.w	r2, #4294967295
 800dd38:	611a      	str	r2, [r3, #16]
 800dd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3c:	691a      	ldr	r2, [r3, #16]
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd40:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd44:	2280      	movs	r2, #128	; 0x80
 800dd46:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dd48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	d149      	bne.n	800dde4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dd50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd52:	3330      	adds	r3, #48	; 0x30
 800dd54:	3330      	adds	r3, #48	; 0x30
 800dd56:	4618      	mov	r0, r3
 800dd58:	f7fe fbfe 	bl	800c558 <ld_word>
 800dd5c:	4603      	mov	r3, r0
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d140      	bne.n	800dde4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dd62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd64:	3301      	adds	r3, #1
 800dd66:	4619      	mov	r1, r3
 800dd68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd6a:	f7fe fea5 	bl	800cab8 <move_window>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d137      	bne.n	800dde4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800dd74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd76:	2200      	movs	r2, #0
 800dd78:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7c:	3330      	adds	r3, #48	; 0x30
 800dd7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fbe8 	bl	800c558 <ld_word>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d127      	bne.n	800dde4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd96:	3330      	adds	r3, #48	; 0x30
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe fbf5 	bl	800c588 <ld_dword>
 800dd9e:	4602      	mov	r2, r0
 800dda0:	4b1b      	ldr	r3, [pc, #108]	; (800de10 <find_volume+0x48c>)
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d11e      	bne.n	800dde4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda8:	3330      	adds	r3, #48	; 0x30
 800ddaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fe fbea 	bl	800c588 <ld_dword>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	4b17      	ldr	r3, [pc, #92]	; (800de14 <find_volume+0x490>)
 800ddb8:	429a      	cmp	r2, r3
 800ddba:	d113      	bne.n	800dde4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ddbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddbe:	3330      	adds	r3, #48	; 0x30
 800ddc0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fbdf 	bl	800c588 <ld_dword>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ddd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddd2:	3330      	adds	r3, #48	; 0x30
 800ddd4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe fbd5 	bl	800c588 <ld_dword>
 800ddde:	4602      	mov	r2, r0
 800dde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ddea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ddec:	4b0a      	ldr	r3, [pc, #40]	; (800de18 <find_volume+0x494>)
 800ddee:	881b      	ldrh	r3, [r3, #0]
 800ddf0:	3301      	adds	r3, #1
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	4b08      	ldr	r3, [pc, #32]	; (800de18 <find_volume+0x494>)
 800ddf6:	801a      	strh	r2, [r3, #0]
 800ddf8:	4b07      	ldr	r3, [pc, #28]	; (800de18 <find_volume+0x494>)
 800ddfa:	881a      	ldrh	r2, [r3, #0]
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddfe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800de00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800de02:	f7fe fdf1 	bl	800c9e8 <clear_lock>
#endif
	return FR_OK;
 800de06:	2300      	movs	r3, #0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3758      	adds	r7, #88	; 0x58
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	41615252 	.word	0x41615252
 800de14:	61417272 	.word	0x61417272
 800de18:	2000138c 	.word	0x2000138c

0800de1c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
 800de24:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800de26:	2309      	movs	r3, #9
 800de28:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d01c      	beq.n	800de6a <validate+0x4e>
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d018      	beq.n	800de6a <validate+0x4e>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d013      	beq.n	800de6a <validate+0x4e>
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	889a      	ldrh	r2, [r3, #4]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	88db      	ldrh	r3, [r3, #6]
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d10c      	bne.n	800de6a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	785b      	ldrb	r3, [r3, #1]
 800de56:	4618      	mov	r0, r3
 800de58:	f7fe fae0 	bl	800c41c <disk_status>
 800de5c:	4603      	mov	r3, r0
 800de5e:	f003 0301 	and.w	r3, r3, #1
 800de62:	2b00      	cmp	r3, #0
 800de64:	d101      	bne.n	800de6a <validate+0x4e>
			res = FR_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800de6a:	7bfb      	ldrb	r3, [r7, #15]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <validate+0x5a>
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	e000      	b.n	800de78 <validate+0x5c>
 800de76:	2300      	movs	r3, #0
 800de78:	683a      	ldr	r2, [r7, #0]
 800de7a:	6013      	str	r3, [r2, #0]
	return res;
 800de7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}
	...

0800de88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b088      	sub	sp, #32
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	4613      	mov	r3, r2
 800de94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800de9a:	f107 0310 	add.w	r3, r7, #16
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff fcd5 	bl	800d84e <get_ldnumber>
 800dea4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	da01      	bge.n	800deb0 <f_mount+0x28>
 800deac:	230b      	movs	r3, #11
 800deae:	e02b      	b.n	800df08 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800deb0:	4a17      	ldr	r2, [pc, #92]	; (800df10 <f_mount+0x88>)
 800deb2:	69fb      	ldr	r3, [r7, #28]
 800deb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dec0:	69b8      	ldr	r0, [r7, #24]
 800dec2:	f7fe fd91 	bl	800c9e8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	2200      	movs	r2, #0
 800deca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d002      	beq.n	800ded8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2200      	movs	r2, #0
 800ded6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	490d      	ldr	r1, [pc, #52]	; (800df10 <f_mount+0x88>)
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d002      	beq.n	800deee <f_mount+0x66>
 800dee8:	79fb      	ldrb	r3, [r7, #7]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d001      	beq.n	800def2 <f_mount+0x6a>
 800deee:	2300      	movs	r3, #0
 800def0:	e00a      	b.n	800df08 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800def2:	f107 010c 	add.w	r1, r7, #12
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	2200      	movs	r2, #0
 800defc:	4618      	mov	r0, r3
 800defe:	f7ff fd41 	bl	800d984 <find_volume>
 800df02:	4603      	mov	r3, r0
 800df04:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800df06:	7dfb      	ldrb	r3, [r7, #23]
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3720      	adds	r7, #32
 800df0c:	46bd      	mov	sp, r7
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	20001388 	.word	0x20001388

0800df14 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b098      	sub	sp, #96	; 0x60
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	60b9      	str	r1, [r7, #8]
 800df1e:	4613      	mov	r3, r2
 800df20:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d101      	bne.n	800df2c <f_open+0x18>
 800df28:	2309      	movs	r3, #9
 800df2a:	e1ad      	b.n	800e288 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800df2c:	79fb      	ldrb	r3, [r7, #7]
 800df2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df32:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800df34:	79fa      	ldrb	r2, [r7, #7]
 800df36:	f107 0110 	add.w	r1, r7, #16
 800df3a:	f107 0308 	add.w	r3, r7, #8
 800df3e:	4618      	mov	r0, r3
 800df40:	f7ff fd20 	bl	800d984 <find_volume>
 800df44:	4603      	mov	r3, r0
 800df46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800df4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f040 8191 	bne.w	800e276 <f_open+0x362>
		dj.obj.fs = fs;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800df58:	68ba      	ldr	r2, [r7, #8]
 800df5a:	f107 0314 	add.w	r3, r7, #20
 800df5e:	4611      	mov	r1, r2
 800df60:	4618      	mov	r0, r3
 800df62:	f7ff fc03 	bl	800d76c <follow_path>
 800df66:	4603      	mov	r3, r0
 800df68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800df6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df70:	2b00      	cmp	r3, #0
 800df72:	d11a      	bne.n	800dfaa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800df74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800df78:	b25b      	sxtb	r3, r3
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	da03      	bge.n	800df86 <f_open+0x72>
				res = FR_INVALID_NAME;
 800df7e:	2306      	movs	r3, #6
 800df80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800df84:	e011      	b.n	800dfaa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800df86:	79fb      	ldrb	r3, [r7, #7]
 800df88:	f023 0301 	bic.w	r3, r3, #1
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	bf14      	ite	ne
 800df90:	2301      	movne	r3, #1
 800df92:	2300      	moveq	r3, #0
 800df94:	b2db      	uxtb	r3, r3
 800df96:	461a      	mov	r2, r3
 800df98:	f107 0314 	add.w	r3, r7, #20
 800df9c:	4611      	mov	r1, r2
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe fbda 	bl	800c758 <chk_lock>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	f003 031c 	and.w	r3, r3, #28
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d07f      	beq.n	800e0b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dfb4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d017      	beq.n	800dfec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dfbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	d10e      	bne.n	800dfe2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dfc4:	f7fe fc24 	bl	800c810 <enq_lock>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d006      	beq.n	800dfdc <f_open+0xc8>
 800dfce:	f107 0314 	add.w	r3, r7, #20
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7ff fb03 	bl	800d5de <dir_register>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	e000      	b.n	800dfde <f_open+0xca>
 800dfdc:	2312      	movs	r3, #18
 800dfde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dfe2:	79fb      	ldrb	r3, [r7, #7]
 800dfe4:	f043 0308 	orr.w	r3, r3, #8
 800dfe8:	71fb      	strb	r3, [r7, #7]
 800dfea:	e010      	b.n	800e00e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dfec:	7ebb      	ldrb	r3, [r7, #26]
 800dfee:	f003 0311 	and.w	r3, r3, #17
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d003      	beq.n	800dffe <f_open+0xea>
					res = FR_DENIED;
 800dff6:	2307      	movs	r3, #7
 800dff8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dffc:	e007      	b.n	800e00e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dffe:	79fb      	ldrb	r3, [r7, #7]
 800e000:	f003 0304 	and.w	r3, r3, #4
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <f_open+0xfa>
 800e008:	2308      	movs	r3, #8
 800e00a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e00e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e012:	2b00      	cmp	r3, #0
 800e014:	d168      	bne.n	800e0e8 <f_open+0x1d4>
 800e016:	79fb      	ldrb	r3, [r7, #7]
 800e018:	f003 0308 	and.w	r3, r3, #8
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d063      	beq.n	800e0e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800e020:	f7fb fa04 	bl	800942c <get_fattime>
 800e024:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e028:	330e      	adds	r3, #14
 800e02a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fe fae9 	bl	800c604 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e034:	3316      	adds	r3, #22
 800e036:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e038:	4618      	mov	r0, r3
 800e03a:	f7fe fae3 	bl	800c604 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e040:	330b      	adds	r3, #11
 800e042:	2220      	movs	r2, #32
 800e044:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e04a:	4611      	mov	r1, r2
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff fa32 	bl	800d4b6 <ld_clust>
 800e052:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e058:	2200      	movs	r2, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff fa4a 	bl	800d4f4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e062:	331c      	adds	r3, #28
 800e064:	2100      	movs	r1, #0
 800e066:	4618      	mov	r0, r3
 800e068:	f7fe facc 	bl	800c604 <st_dword>
					fs->wflag = 1;
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	2201      	movs	r2, #1
 800e070:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e074:	2b00      	cmp	r3, #0
 800e076:	d037      	beq.n	800e0e8 <f_open+0x1d4>
						dw = fs->winsect;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e07e:	f107 0314 	add.w	r3, r7, #20
 800e082:	2200      	movs	r2, #0
 800e084:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe ff5d 	bl	800cf46 <remove_chain>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800e092:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e096:	2b00      	cmp	r3, #0
 800e098:	d126      	bne.n	800e0e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800e09a:	693b      	ldr	r3, [r7, #16]
 800e09c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fd0a 	bl	800cab8 <move_window>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e0ae:	3a01      	subs	r2, #1
 800e0b0:	60da      	str	r2, [r3, #12]
 800e0b2:	e019      	b.n	800e0e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e0b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d115      	bne.n	800e0e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e0bc:	7ebb      	ldrb	r3, [r7, #26]
 800e0be:	f003 0310 	and.w	r3, r3, #16
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d003      	beq.n	800e0ce <f_open+0x1ba>
					res = FR_NO_FILE;
 800e0c6:	2304      	movs	r3, #4
 800e0c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e0cc:	e00c      	b.n	800e0e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	f003 0302 	and.w	r3, r3, #2
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d007      	beq.n	800e0e8 <f_open+0x1d4>
 800e0d8:	7ebb      	ldrb	r3, [r7, #26]
 800e0da:	f003 0301 	and.w	r3, r3, #1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d002      	beq.n	800e0e8 <f_open+0x1d4>
						res = FR_DENIED;
 800e0e2:	2307      	movs	r3, #7
 800e0e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e0e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d128      	bne.n	800e142 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e0f0:	79fb      	ldrb	r3, [r7, #7]
 800e0f2:	f003 0308 	and.w	r3, r3, #8
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e0fa:	79fb      	ldrb	r3, [r7, #7]
 800e0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e100:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e10a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e110:	79fb      	ldrb	r3, [r7, #7]
 800e112:	f023 0301 	bic.w	r3, r3, #1
 800e116:	2b00      	cmp	r3, #0
 800e118:	bf14      	ite	ne
 800e11a:	2301      	movne	r3, #1
 800e11c:	2300      	moveq	r3, #0
 800e11e:	b2db      	uxtb	r3, r3
 800e120:	461a      	mov	r2, r3
 800e122:	f107 0314 	add.w	r3, r7, #20
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fe fb93 	bl	800c854 <inc_lock>
 800e12e:	4602      	mov	r2, r0
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	691b      	ldr	r3, [r3, #16]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d102      	bne.n	800e142 <f_open+0x22e>
 800e13c:	2302      	movs	r3, #2
 800e13e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e146:	2b00      	cmp	r3, #0
 800e148:	f040 8095 	bne.w	800e276 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e150:	4611      	mov	r1, r2
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff f9af 	bl	800d4b6 <ld_clust>
 800e158:	4602      	mov	r2, r0
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e15e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e160:	331c      	adds	r3, #28
 800e162:	4618      	mov	r0, r3
 800e164:	f7fe fa10 	bl	800c588 <ld_dword>
 800e168:	4602      	mov	r2, r0
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2200      	movs	r2, #0
 800e172:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e174:	693a      	ldr	r2, [r7, #16]
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	88da      	ldrh	r2, [r3, #6]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	79fa      	ldrb	r2, [r7, #7]
 800e186:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2200      	movs	r2, #0
 800e192:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	3330      	adds	r3, #48	; 0x30
 800e19e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f7fe fa7a 	bl	800c69e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	f003 0320 	and.w	r3, r3, #32
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d060      	beq.n	800e276 <f_open+0x362>
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d05c      	beq.n	800e276 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e1c4:	693b      	ldr	r3, [r7, #16]
 800e1c6:	895b      	ldrh	r3, [r3, #10]
 800e1c8:	025b      	lsls	r3, r3, #9
 800e1ca:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	68db      	ldr	r3, [r3, #12]
 800e1d6:	657b      	str	r3, [r7, #84]	; 0x54
 800e1d8:	e016      	b.n	800e208 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1de:	4618      	mov	r0, r3
 800e1e0:	f7fe fd25 	bl	800cc2e <get_fat>
 800e1e4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e1e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1e8:	2b01      	cmp	r3, #1
 800e1ea:	d802      	bhi.n	800e1f2 <f_open+0x2de>
 800e1ec:	2302      	movs	r3, #2
 800e1ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e1f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f8:	d102      	bne.n	800e200 <f_open+0x2ec>
 800e1fa:	2301      	movs	r3, #1
 800e1fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	657b      	str	r3, [r7, #84]	; 0x54
 800e208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d103      	bne.n	800e218 <f_open+0x304>
 800e210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e212:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e214:	429a      	cmp	r2, r3
 800e216:	d8e0      	bhi.n	800e1da <f_open+0x2c6>
				}
				fp->clust = clst;
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e21c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e21e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e222:	2b00      	cmp	r3, #0
 800e224:	d127      	bne.n	800e276 <f_open+0x362>
 800e226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d022      	beq.n	800e276 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e234:	4618      	mov	r0, r3
 800e236:	f7fe fcdb 	bl	800cbf0 <clust2sect>
 800e23a:	6478      	str	r0, [r7, #68]	; 0x44
 800e23c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d103      	bne.n	800e24a <f_open+0x336>
						res = FR_INT_ERR;
 800e242:	2302      	movs	r3, #2
 800e244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800e248:	e015      	b.n	800e276 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e24a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e24c:	0a5a      	lsrs	r2, r3, #9
 800e24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e250:	441a      	add	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	7858      	ldrb	r0, [r3, #1]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	6a1a      	ldr	r2, [r3, #32]
 800e264:	2301      	movs	r3, #1
 800e266:	f7fe f919 	bl	800c49c <disk_read>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d002      	beq.n	800e276 <f_open+0x362>
 800e270:	2301      	movs	r3, #1
 800e272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d002      	beq.n	800e284 <f_open+0x370>
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	2200      	movs	r2, #0
 800e282:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e284:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3760      	adds	r7, #96	; 0x60
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08e      	sub	sp, #56	; 0x38
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	607a      	str	r2, [r7, #4]
 800e29c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f107 0214 	add.w	r2, r7, #20
 800e2ae:	4611      	mov	r1, r2
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7ff fdb3 	bl	800de1c <validate>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e2bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d107      	bne.n	800e2d4 <f_read+0x44>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	7d5b      	ldrb	r3, [r3, #21]
 800e2c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800e2cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d002      	beq.n	800e2da <f_read+0x4a>
 800e2d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2d8:	e115      	b.n	800e506 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	7d1b      	ldrb	r3, [r3, #20]
 800e2de:	f003 0301 	and.w	r3, r3, #1
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d101      	bne.n	800e2ea <f_read+0x5a>
 800e2e6:	2307      	movs	r3, #7
 800e2e8:	e10d      	b.n	800e506 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	68da      	ldr	r2, [r3, #12]
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	1ad3      	subs	r3, r2, r3
 800e2f4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	f240 80fe 	bls.w	800e4fc <f_read+0x26c>
 800e300:	6a3b      	ldr	r3, [r7, #32]
 800e302:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e304:	e0fa      	b.n	800e4fc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e30e:	2b00      	cmp	r3, #0
 800e310:	f040 80c6 	bne.w	800e4a0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	699b      	ldr	r3, [r3, #24]
 800e318:	0a5b      	lsrs	r3, r3, #9
 800e31a:	697a      	ldr	r2, [r7, #20]
 800e31c:	8952      	ldrh	r2, [r2, #10]
 800e31e:	3a01      	subs	r2, #1
 800e320:	4013      	ands	r3, r2
 800e322:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d12f      	bne.n	800e38a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	699b      	ldr	r3, [r3, #24]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d103      	bne.n	800e33a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	633b      	str	r3, [r7, #48]	; 0x30
 800e338:	e013      	b.n	800e362 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d007      	beq.n	800e352 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	4619      	mov	r1, r3
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7fe fef9 	bl	800d140 <clmt_clust>
 800e34e:	6338      	str	r0, [r7, #48]	; 0x30
 800e350:	e007      	b.n	800e362 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e352:	68fa      	ldr	r2, [r7, #12]
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	69db      	ldr	r3, [r3, #28]
 800e358:	4619      	mov	r1, r3
 800e35a:	4610      	mov	r0, r2
 800e35c:	f7fe fc67 	bl	800cc2e <get_fat>
 800e360:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e364:	2b01      	cmp	r3, #1
 800e366:	d804      	bhi.n	800e372 <f_read+0xe2>
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2202      	movs	r2, #2
 800e36c:	755a      	strb	r2, [r3, #21]
 800e36e:	2302      	movs	r3, #2
 800e370:	e0c9      	b.n	800e506 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e378:	d104      	bne.n	800e384 <f_read+0xf4>
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	2201      	movs	r2, #1
 800e37e:	755a      	strb	r2, [r3, #21]
 800e380:	2301      	movs	r3, #1
 800e382:	e0c0      	b.n	800e506 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e388:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e38a:	697a      	ldr	r2, [r7, #20]
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	69db      	ldr	r3, [r3, #28]
 800e390:	4619      	mov	r1, r3
 800e392:	4610      	mov	r0, r2
 800e394:	f7fe fc2c 	bl	800cbf0 <clust2sect>
 800e398:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d104      	bne.n	800e3aa <f_read+0x11a>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2202      	movs	r2, #2
 800e3a4:	755a      	strb	r2, [r3, #21]
 800e3a6:	2302      	movs	r3, #2
 800e3a8:	e0ad      	b.n	800e506 <f_read+0x276>
			sect += csect;
 800e3aa:	69ba      	ldr	r2, [r7, #24]
 800e3ac:	69fb      	ldr	r3, [r7, #28]
 800e3ae:	4413      	add	r3, r2
 800e3b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	0a5b      	lsrs	r3, r3, #9
 800e3b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d039      	beq.n	800e432 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3c2:	4413      	add	r3, r2
 800e3c4:	697a      	ldr	r2, [r7, #20]
 800e3c6:	8952      	ldrh	r2, [r2, #10]
 800e3c8:	4293      	cmp	r3, r2
 800e3ca:	d905      	bls.n	800e3d8 <f_read+0x148>
					cc = fs->csize - csect;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	895b      	ldrh	r3, [r3, #10]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	69fb      	ldr	r3, [r7, #28]
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3d8:	697b      	ldr	r3, [r7, #20]
 800e3da:	7858      	ldrb	r0, [r3, #1]
 800e3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3de:	69ba      	ldr	r2, [r7, #24]
 800e3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3e2:	f7fe f85b 	bl	800c49c <disk_read>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d004      	beq.n	800e3f6 <f_read+0x166>
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	755a      	strb	r2, [r3, #21]
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e087      	b.n	800e506 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	7d1b      	ldrb	r3, [r3, #20]
 800e3fa:	b25b      	sxtb	r3, r3
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	da14      	bge.n	800e42a <f_read+0x19a>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6a1a      	ldr	r2, [r3, #32]
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	1ad3      	subs	r3, r2, r3
 800e408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d90d      	bls.n	800e42a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	6a1a      	ldr	r2, [r3, #32]
 800e412:	69bb      	ldr	r3, [r7, #24]
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	025b      	lsls	r3, r3, #9
 800e418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e41a:	18d0      	adds	r0, r2, r3
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	3330      	adds	r3, #48	; 0x30
 800e420:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e424:	4619      	mov	r1, r3
 800e426:	f7fe f919 	bl	800c65c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e42c:	025b      	lsls	r3, r3, #9
 800e42e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800e430:	e050      	b.n	800e4d4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	6a1b      	ldr	r3, [r3, #32]
 800e436:	69ba      	ldr	r2, [r7, #24]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d02e      	beq.n	800e49a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	7d1b      	ldrb	r3, [r3, #20]
 800e440:	b25b      	sxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	da18      	bge.n	800e478 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e446:	697b      	ldr	r3, [r7, #20]
 800e448:	7858      	ldrb	r0, [r3, #1]
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6a1a      	ldr	r2, [r3, #32]
 800e454:	2301      	movs	r3, #1
 800e456:	f7fe f841 	bl	800c4dc <disk_write>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d004      	beq.n	800e46a <f_read+0x1da>
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2201      	movs	r2, #1
 800e464:	755a      	strb	r2, [r3, #21]
 800e466:	2301      	movs	r3, #1
 800e468:	e04d      	b.n	800e506 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	7d1b      	ldrb	r3, [r3, #20]
 800e46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e472:	b2da      	uxtb	r2, r3
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e478:	697b      	ldr	r3, [r7, #20]
 800e47a:	7858      	ldrb	r0, [r3, #1]
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e482:	2301      	movs	r3, #1
 800e484:	69ba      	ldr	r2, [r7, #24]
 800e486:	f7fe f809 	bl	800c49c <disk_read>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d004      	beq.n	800e49a <f_read+0x20a>
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	2201      	movs	r2, #1
 800e494:	755a      	strb	r2, [r3, #21]
 800e496:	2301      	movs	r3, #1
 800e498:	e035      	b.n	800e506 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	69ba      	ldr	r2, [r7, #24]
 800e49e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	699b      	ldr	r3, [r3, #24]
 800e4a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e4ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e4ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d901      	bls.n	800e4ba <f_read+0x22a>
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	699b      	ldr	r3, [r3, #24]
 800e4c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4c8:	4413      	add	r3, r2
 800e4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4d0:	f7fe f8c4 	bl	800c65c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e4d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	4413      	add	r3, r2
 800e4da:	627b      	str	r3, [r7, #36]	; 0x24
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	699a      	ldr	r2, [r3, #24]
 800e4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e2:	441a      	add	r2, r3
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	619a      	str	r2, [r3, #24]
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	441a      	add	r2, r3
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	601a      	str	r2, [r3, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f8:	1ad3      	subs	r3, r2, r3
 800e4fa:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f47f af01 	bne.w	800e306 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e504:	2300      	movs	r3, #0
}
 800e506:	4618      	mov	r0, r3
 800e508:	3738      	adds	r7, #56	; 0x38
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}

0800e50e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e50e:	b580      	push	{r7, lr}
 800e510:	b086      	sub	sp, #24
 800e512:	af00      	add	r7, sp, #0
 800e514:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f107 0208 	add.w	r2, r7, #8
 800e51c:	4611      	mov	r1, r2
 800e51e:	4618      	mov	r0, r3
 800e520:	f7ff fc7c 	bl	800de1c <validate>
 800e524:	4603      	mov	r3, r0
 800e526:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e528:	7dfb      	ldrb	r3, [r7, #23]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d168      	bne.n	800e600 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	7d1b      	ldrb	r3, [r3, #20]
 800e532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e536:	2b00      	cmp	r3, #0
 800e538:	d062      	beq.n	800e600 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	b25b      	sxtb	r3, r3
 800e540:	2b00      	cmp	r3, #0
 800e542:	da15      	bge.n	800e570 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	7858      	ldrb	r0, [r3, #1]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6a1a      	ldr	r2, [r3, #32]
 800e552:	2301      	movs	r3, #1
 800e554:	f7fd ffc2 	bl	800c4dc <disk_write>
 800e558:	4603      	mov	r3, r0
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <f_sync+0x54>
 800e55e:	2301      	movs	r3, #1
 800e560:	e04f      	b.n	800e602 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	7d1b      	ldrb	r3, [r3, #20]
 800e566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e56a:	b2da      	uxtb	r2, r3
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e570:	f7fa ff5c 	bl	800942c <get_fattime>
 800e574:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e576:	68ba      	ldr	r2, [r7, #8]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57c:	4619      	mov	r1, r3
 800e57e:	4610      	mov	r0, r2
 800e580:	f7fe fa9a 	bl	800cab8 <move_window>
 800e584:	4603      	mov	r3, r0
 800e586:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e588:	7dfb      	ldrb	r3, [r7, #23]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d138      	bne.n	800e600 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e592:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	330b      	adds	r3, #11
 800e598:	781a      	ldrb	r2, [r3, #0]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	330b      	adds	r3, #11
 800e59e:	f042 0220 	orr.w	r2, r2, #32
 800e5a2:	b2d2      	uxtb	r2, r2
 800e5a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6818      	ldr	r0, [r3, #0]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	689b      	ldr	r3, [r3, #8]
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	68f9      	ldr	r1, [r7, #12]
 800e5b2:	f7fe ff9f 	bl	800d4f4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f103 021c 	add.w	r2, r3, #28
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	4619      	mov	r1, r3
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	f7fe f81e 	bl	800c604 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	3316      	adds	r3, #22
 800e5cc:	6939      	ldr	r1, [r7, #16]
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe f818 	bl	800c604 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	3312      	adds	r3, #18
 800e5d8:	2100      	movs	r1, #0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fd fff7 	bl	800c5ce <st_word>
					fs->wflag = 1;
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fe fa93 	bl	800cb14 <sync_fs>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	7d1b      	ldrb	r3, [r3, #20]
 800e5f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e5fa:	b2da      	uxtb	r2, r3
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e600:	7dfb      	ldrb	r3, [r7, #23]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3718      	adds	r7, #24
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f7ff ff7b 	bl	800e50e <f_sync>
 800e618:	4603      	mov	r3, r0
 800e61a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e61c:	7bfb      	ldrb	r3, [r7, #15]
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d118      	bne.n	800e654 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f107 0208 	add.w	r2, r7, #8
 800e628:	4611      	mov	r1, r2
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff fbf6 	bl	800de1c <validate>
 800e630:	4603      	mov	r3, r0
 800e632:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10c      	bne.n	800e654 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	691b      	ldr	r3, [r3, #16]
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fe f996 	bl	800c970 <dec_lock>
 800e644:	4603      	mov	r3, r0
 800e646:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e648:	7bfb      	ldrb	r3, [r7, #15]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d102      	bne.n	800e654 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e654:	7bfb      	ldrb	r3, [r7, #15]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b090      	sub	sp, #64	; 0x40
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
 800e666:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f107 0208 	add.w	r2, r7, #8
 800e66e:	4611      	mov	r1, r2
 800e670:	4618      	mov	r0, r3
 800e672:	f7ff fbd3 	bl	800de1c <validate>
 800e676:	4603      	mov	r3, r0
 800e678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800e67c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e680:	2b00      	cmp	r3, #0
 800e682:	d103      	bne.n	800e68c <f_lseek+0x2e>
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	7d5b      	ldrb	r3, [r3, #21]
 800e688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800e68c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e690:	2b00      	cmp	r3, #0
 800e692:	d002      	beq.n	800e69a <f_lseek+0x3c>
 800e694:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e698:	e1e6      	b.n	800ea68 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f000 80d1 	beq.w	800e846 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6aa:	d15a      	bne.n	800e762 <f_lseek+0x104>
			tbl = fp->cltbl;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6b0:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800e6b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b4:	1d1a      	adds	r2, r3, #4
 800e6b6:	627a      	str	r2, [r7, #36]	; 0x24
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	617b      	str	r3, [r7, #20]
 800e6bc:	2302      	movs	r3, #2
 800e6be:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	689b      	ldr	r3, [r3, #8]
 800e6c4:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d03a      	beq.n	800e742 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800e6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ce:	613b      	str	r3, [r7, #16]
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d6:	3302      	adds	r3, #2
 800e6d8:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800e6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6dc:	60fb      	str	r3, [r7, #12]
 800e6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e0:	3301      	adds	r3, #1
 800e6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7fe faa0 	bl	800cc2e <get_fat>
 800e6ee:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d804      	bhi.n	800e700 <f_lseek+0xa2>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2202      	movs	r2, #2
 800e6fa:	755a      	strb	r2, [r3, #21]
 800e6fc:	2302      	movs	r3, #2
 800e6fe:	e1b3      	b.n	800ea68 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e706:	d104      	bne.n	800e712 <f_lseek+0xb4>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2201      	movs	r2, #1
 800e70c:	755a      	strb	r2, [r3, #21]
 800e70e:	2301      	movs	r3, #1
 800e710:	e1aa      	b.n	800ea68 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	3301      	adds	r3, #1
 800e716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e718:	429a      	cmp	r2, r3
 800e71a:	d0de      	beq.n	800e6da <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800e71c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e71e:	697b      	ldr	r3, [r7, #20]
 800e720:	429a      	cmp	r2, r3
 800e722:	d809      	bhi.n	800e738 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	1d1a      	adds	r2, r3, #4
 800e728:	627a      	str	r2, [r7, #36]	; 0x24
 800e72a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e72c:	601a      	str	r2, [r3, #0]
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	1d1a      	adds	r2, r3, #4
 800e732:	627a      	str	r2, [r7, #36]	; 0x24
 800e734:	693a      	ldr	r2, [r7, #16]
 800e736:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e73e:	429a      	cmp	r2, r3
 800e740:	d3c4      	bcc.n	800e6cc <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e748:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800e74a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	429a      	cmp	r2, r3
 800e750:	d803      	bhi.n	800e75a <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800e752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e754:	2200      	movs	r2, #0
 800e756:	601a      	str	r2, [r3, #0]
 800e758:	e184      	b.n	800ea64 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800e75a:	2311      	movs	r3, #17
 800e75c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800e760:	e180      	b.n	800ea64 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	683a      	ldr	r2, [r7, #0]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d902      	bls.n	800e772 <f_lseek+0x114>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	683a      	ldr	r2, [r7, #0]
 800e776:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f000 8172 	beq.w	800ea64 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800e780:	683b      	ldr	r3, [r7, #0]
 800e782:	3b01      	subs	r3, #1
 800e784:	4619      	mov	r1, r3
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f7fe fcda 	bl	800d140 <clmt_clust>
 800e78c:	4602      	mov	r2, r0
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800e792:	68ba      	ldr	r2, [r7, #8]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	69db      	ldr	r3, [r3, #28]
 800e798:	4619      	mov	r1, r3
 800e79a:	4610      	mov	r0, r2
 800e79c:	f7fe fa28 	bl	800cbf0 <clust2sect>
 800e7a0:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d104      	bne.n	800e7b2 <f_lseek+0x154>
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2202      	movs	r2, #2
 800e7ac:	755a      	strb	r2, [r3, #21]
 800e7ae:	2302      	movs	r3, #2
 800e7b0:	e15a      	b.n	800ea68 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	3b01      	subs	r3, #1
 800e7b6:	0a5b      	lsrs	r3, r3, #9
 800e7b8:	68ba      	ldr	r2, [r7, #8]
 800e7ba:	8952      	ldrh	r2, [r2, #10]
 800e7bc:	3a01      	subs	r2, #1
 800e7be:	4013      	ands	r3, r2
 800e7c0:	69ba      	ldr	r2, [r7, #24]
 800e7c2:	4413      	add	r3, r2
 800e7c4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 8148 	beq.w	800ea64 <f_lseek+0x406>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6a1b      	ldr	r3, [r3, #32]
 800e7d8:	69ba      	ldr	r2, [r7, #24]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	f000 8142 	beq.w	800ea64 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	7d1b      	ldrb	r3, [r3, #20]
 800e7e4:	b25b      	sxtb	r3, r3
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	da18      	bge.n	800e81c <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	7858      	ldrb	r0, [r3, #1]
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	6a1a      	ldr	r2, [r3, #32]
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	f7fd fe6f 	bl	800c4dc <disk_write>
 800e7fe:	4603      	mov	r3, r0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d004      	beq.n	800e80e <f_lseek+0x1b0>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	2201      	movs	r2, #1
 800e808:	755a      	strb	r2, [r3, #21]
 800e80a:	2301      	movs	r3, #1
 800e80c:	e12c      	b.n	800ea68 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	7d1b      	ldrb	r3, [r3, #20]
 800e812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e816:	b2da      	uxtb	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	7858      	ldrb	r0, [r3, #1]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e826:	2301      	movs	r3, #1
 800e828:	69ba      	ldr	r2, [r7, #24]
 800e82a:	f7fd fe37 	bl	800c49c <disk_read>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	d004      	beq.n	800e83e <f_lseek+0x1e0>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2201      	movs	r2, #1
 800e838:	755a      	strb	r2, [r3, #21]
 800e83a:	2301      	movs	r3, #1
 800e83c:	e114      	b.n	800ea68 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	69ba      	ldr	r2, [r7, #24]
 800e842:	621a      	str	r2, [r3, #32]
 800e844:	e10e      	b.n	800ea64 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	683a      	ldr	r2, [r7, #0]
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d908      	bls.n	800e862 <f_lseek+0x204>
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	7d1b      	ldrb	r3, [r3, #20]
 800e854:	f003 0302 	and.w	r3, r3, #2
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d102      	bne.n	800e862 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	699b      	ldr	r3, [r3, #24]
 800e866:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800e868:	2300      	movs	r3, #0
 800e86a:	637b      	str	r3, [r7, #52]	; 0x34
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e870:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	f000 80a7 	beq.w	800e9c8 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	895b      	ldrh	r3, [r3, #10]
 800e87e:	025b      	lsls	r3, r3, #9
 800e880:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01b      	beq.n	800e8c0 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	1e5a      	subs	r2, r3, #1
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	fbb2 f2f3 	udiv	r2, r2, r3
 800e892:	6a3b      	ldr	r3, [r7, #32]
 800e894:	1e59      	subs	r1, r3, #1
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d30f      	bcc.n	800e8c0 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800e8a0:	6a3b      	ldr	r3, [r7, #32]
 800e8a2:	1e5a      	subs	r2, r3, #1
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	425b      	negs	r3, r3
 800e8a8:	401a      	ands	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	699b      	ldr	r3, [r3, #24]
 800e8b2:	683a      	ldr	r2, [r7, #0]
 800e8b4:	1ad3      	subs	r3, r2, r3
 800e8b6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	69db      	ldr	r3, [r3, #28]
 800e8bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8be:	e022      	b.n	800e906 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	689b      	ldr	r3, [r3, #8]
 800e8c4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800e8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d119      	bne.n	800e900 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f7fe fb9d 	bl	800d010 <create_chain>
 800e8d6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e8d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d104      	bne.n	800e8e8 <f_lseek+0x28a>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2202      	movs	r2, #2
 800e8e2:	755a      	strb	r2, [r3, #21]
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	e0bf      	b.n	800ea68 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e8e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ee:	d104      	bne.n	800e8fa <f_lseek+0x29c>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	755a      	strb	r2, [r3, #21]
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	e0b6      	b.n	800ea68 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e8fe:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e904:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800e906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d05d      	beq.n	800e9c8 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800e90c:	e03a      	b.n	800e984 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	603b      	str	r3, [r7, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	699a      	ldr	r2, [r3, #24]
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	441a      	add	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	7d1b      	ldrb	r3, [r3, #20]
 800e926:	f003 0302 	and.w	r3, r3, #2
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00b      	beq.n	800e946 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fb6c 	bl	800d010 <create_chain>
 800e938:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800e93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d108      	bne.n	800e952 <f_lseek+0x2f4>
							ofs = 0; break;
 800e940:	2300      	movs	r3, #0
 800e942:	603b      	str	r3, [r7, #0]
 800e944:	e022      	b.n	800e98c <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e94a:	4618      	mov	r0, r3
 800e94c:	f7fe f96f 	bl	800cc2e <get_fat>
 800e950:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e954:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e958:	d104      	bne.n	800e964 <f_lseek+0x306>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2201      	movs	r2, #1
 800e95e:	755a      	strb	r2, [r3, #21]
 800e960:	2301      	movs	r3, #1
 800e962:	e081      	b.n	800ea68 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800e964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e966:	2b01      	cmp	r3, #1
 800e968:	d904      	bls.n	800e974 <f_lseek+0x316>
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	695b      	ldr	r3, [r3, #20]
 800e96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e970:	429a      	cmp	r2, r3
 800e972:	d304      	bcc.n	800e97e <f_lseek+0x320>
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2202      	movs	r2, #2
 800e978:	755a      	strb	r2, [r3, #21]
 800e97a:	2302      	movs	r3, #2
 800e97c:	e074      	b.n	800ea68 <f_lseek+0x40a>
					fp->clust = clst;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e982:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800e984:	683a      	ldr	r2, [r7, #0]
 800e986:	69fb      	ldr	r3, [r7, #28]
 800e988:	429a      	cmp	r2, r3
 800e98a:	d8c0      	bhi.n	800e90e <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	699a      	ldr	r2, [r3, #24]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	441a      	add	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d012      	beq.n	800e9c8 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7fe f922 	bl	800cbf0 <clust2sect>
 800e9ac:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800e9ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d104      	bne.n	800e9be <f_lseek+0x360>
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2202      	movs	r2, #2
 800e9b8:	755a      	strb	r2, [r3, #21]
 800e9ba:	2302      	movs	r3, #2
 800e9bc:	e054      	b.n	800ea68 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800e9be:	683b      	ldr	r3, [r7, #0]
 800e9c0:	0a5b      	lsrs	r3, r3, #9
 800e9c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9c4:	4413      	add	r3, r2
 800e9c6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	699a      	ldr	r2, [r3, #24]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d90a      	bls.n	800e9ea <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	699a      	ldr	r2, [r3, #24]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	7d1b      	ldrb	r3, [r3, #20]
 800e9e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9e4:	b2da      	uxtb	r2, r3
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	699b      	ldr	r3, [r3, #24]
 800e9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d036      	beq.n	800ea64 <f_lseek+0x406>
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a1b      	ldr	r3, [r3, #32]
 800e9fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d031      	beq.n	800ea64 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7d1b      	ldrb	r3, [r3, #20]
 800ea04:	b25b      	sxtb	r3, r3
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	da18      	bge.n	800ea3c <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	7858      	ldrb	r0, [r3, #1]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6a1a      	ldr	r2, [r3, #32]
 800ea18:	2301      	movs	r3, #1
 800ea1a:	f7fd fd5f 	bl	800c4dc <disk_write>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d004      	beq.n	800ea2e <f_lseek+0x3d0>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2201      	movs	r2, #1
 800ea28:	755a      	strb	r2, [r3, #21]
 800ea2a:	2301      	movs	r3, #1
 800ea2c:	e01c      	b.n	800ea68 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	7d1b      	ldrb	r3, [r3, #20]
 800ea32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea36:	b2da      	uxtb	r2, r3
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	7858      	ldrb	r0, [r3, #1]
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ea46:	2301      	movs	r3, #1
 800ea48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea4a:	f7fd fd27 	bl	800c49c <disk_read>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d004      	beq.n	800ea5e <f_lseek+0x400>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	755a      	strb	r2, [r3, #21]
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e004      	b.n	800ea68 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea62:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ea64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3740      	adds	r7, #64	; 0x40
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b087      	sub	sp, #28
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	4613      	mov	r3, r2
 800ea7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea7e:	2301      	movs	r3, #1
 800ea80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea82:	2300      	movs	r3, #0
 800ea84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea86:	4b1f      	ldr	r3, [pc, #124]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800ea88:	7a5b      	ldrb	r3, [r3, #9]
 800ea8a:	b2db      	uxtb	r3, r3
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d131      	bne.n	800eaf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea90:	4b1c      	ldr	r3, [pc, #112]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800ea92:	7a5b      	ldrb	r3, [r3, #9]
 800ea94:	b2db      	uxtb	r3, r3
 800ea96:	461a      	mov	r2, r3
 800ea98:	4b1a      	ldr	r3, [pc, #104]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea9e:	4b19      	ldr	r3, [pc, #100]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eaa0:	7a5b      	ldrb	r3, [r3, #9]
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	4a17      	ldr	r2, [pc, #92]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	4413      	add	r3, r2
 800eaaa:	68fa      	ldr	r2, [r7, #12]
 800eaac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800eaae:	4b15      	ldr	r3, [pc, #84]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eab0:	7a5b      	ldrb	r3, [r3, #9]
 800eab2:	b2db      	uxtb	r3, r3
 800eab4:	461a      	mov	r2, r3
 800eab6:	4b13      	ldr	r3, [pc, #76]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eab8:	4413      	add	r3, r2
 800eaba:	79fa      	ldrb	r2, [r7, #7]
 800eabc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800eabe:	4b11      	ldr	r3, [pc, #68]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eac0:	7a5b      	ldrb	r3, [r3, #9]
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	1c5a      	adds	r2, r3, #1
 800eac6:	b2d1      	uxtb	r1, r2
 800eac8:	4a0e      	ldr	r2, [pc, #56]	; (800eb04 <FATFS_LinkDriverEx+0x94>)
 800eaca:	7251      	strb	r1, [r2, #9]
 800eacc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800eace:	7dbb      	ldrb	r3, [r7, #22]
 800ead0:	3330      	adds	r3, #48	; 0x30
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	3301      	adds	r3, #1
 800eadc:	223a      	movs	r2, #58	; 0x3a
 800eade:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	3302      	adds	r3, #2
 800eae4:	222f      	movs	r2, #47	; 0x2f
 800eae6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800eae8:	68bb      	ldr	r3, [r7, #8]
 800eaea:	3303      	adds	r3, #3
 800eaec:	2200      	movs	r2, #0
 800eaee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	371c      	adds	r7, #28
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop
 800eb04:	200013b0 	.word	0x200013b0

0800eb08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eb12:	2200      	movs	r2, #0
 800eb14:	6839      	ldr	r1, [r7, #0]
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f7ff ffaa 	bl	800ea70 <FATFS_LinkDriverEx>
 800eb1c:	4603      	mov	r3, r0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
	...

0800eb28 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	490e      	ldr	r1, [pc, #56]	; (800eb68 <MX_USB_HOST_Init+0x40>)
 800eb30:	480e      	ldr	r0, [pc, #56]	; (800eb6c <MX_USB_HOST_Init+0x44>)
 800eb32:	f7fc f919 	bl	800ad68 <USBH_Init>
 800eb36:	4603      	mov	r3, r0
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d001      	beq.n	800eb40 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800eb3c:	f7f2 ffd0 	bl	8001ae0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800eb40:	490b      	ldr	r1, [pc, #44]	; (800eb70 <MX_USB_HOST_Init+0x48>)
 800eb42:	480a      	ldr	r0, [pc, #40]	; (800eb6c <MX_USB_HOST_Init+0x44>)
 800eb44:	f7fc f99e 	bl	800ae84 <USBH_RegisterClass>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d001      	beq.n	800eb52 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800eb4e:	f7f2 ffc7 	bl	8001ae0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800eb52:	4806      	ldr	r0, [pc, #24]	; (800eb6c <MX_USB_HOST_Init+0x44>)
 800eb54:	f7fc fa22 	bl	800af9c <USBH_Start>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eb5e:	f7f2 ffbf 	bl	8001ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eb62:	bf00      	nop
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	0800eb89 	.word	0x0800eb89
 800eb6c:	20001a4c 	.word	0x20001a4c
 800eb70:	20000020 	.word	0x20000020

0800eb74 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800eb78:	4802      	ldr	r0, [pc, #8]	; (800eb84 <MX_USB_HOST_Process+0x10>)
 800eb7a:	f7fc fa1f 	bl	800afbc <USBH_Process>
}
 800eb7e:	bf00      	nop
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20001a4c 	.word	0x20001a4c

0800eb88 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	460b      	mov	r3, r1
 800eb92:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800eb94:	78fb      	ldrb	r3, [r7, #3]
 800eb96:	3b01      	subs	r3, #1
 800eb98:	2b04      	cmp	r3, #4
 800eb9a:	d819      	bhi.n	800ebd0 <USBH_UserProcess+0x48>
 800eb9c:	a201      	add	r2, pc, #4	; (adr r2, 800eba4 <USBH_UserProcess+0x1c>)
 800eb9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eba2:	bf00      	nop
 800eba4:	0800ebd1 	.word	0x0800ebd1
 800eba8:	0800ebc1 	.word	0x0800ebc1
 800ebac:	0800ebd1 	.word	0x0800ebd1
 800ebb0:	0800ebc9 	.word	0x0800ebc9
 800ebb4:	0800ebb9 	.word	0x0800ebb9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ebb8:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <USBH_UserProcess+0x58>)
 800ebba:	2203      	movs	r2, #3
 800ebbc:	701a      	strb	r2, [r3, #0]
  break;
 800ebbe:	e008      	b.n	800ebd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ebc0:	4b07      	ldr	r3, [pc, #28]	; (800ebe0 <USBH_UserProcess+0x58>)
 800ebc2:	2202      	movs	r2, #2
 800ebc4:	701a      	strb	r2, [r3, #0]
  break;
 800ebc6:	e004      	b.n	800ebd2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ebc8:	4b05      	ldr	r3, [pc, #20]	; (800ebe0 <USBH_UserProcess+0x58>)
 800ebca:	2201      	movs	r2, #1
 800ebcc:	701a      	strb	r2, [r3, #0]
  break;
 800ebce:	e000      	b.n	800ebd2 <USBH_UserProcess+0x4a>

  default:
  break;
 800ebd0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ebd2:	bf00      	nop
 800ebd4:	370c      	adds	r7, #12
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebdc:	4770      	bx	lr
 800ebde:	bf00      	nop
 800ebe0:	200013bc 	.word	0x200013bc

0800ebe4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b08a      	sub	sp, #40	; 0x28
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ebec:	f107 0314 	add.w	r3, r7, #20
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	601a      	str	r2, [r3, #0]
 800ebf4:	605a      	str	r2, [r3, #4]
 800ebf6:	609a      	str	r2, [r3, #8]
 800ebf8:	60da      	str	r2, [r3, #12]
 800ebfa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ec04:	d147      	bne.n	800ec96 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec06:	2300      	movs	r3, #0
 800ec08:	613b      	str	r3, [r7, #16]
 800ec0a:	4b25      	ldr	r3, [pc, #148]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec0e:	4a24      	ldr	r2, [pc, #144]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec10:	f043 0301 	orr.w	r3, r3, #1
 800ec14:	6313      	str	r3, [r2, #48]	; 0x30
 800ec16:	4b22      	ldr	r3, [pc, #136]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1a:	f003 0301 	and.w	r3, r3, #1
 800ec1e:	613b      	str	r3, [r7, #16]
 800ec20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ec22:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec30:	f107 0314 	add.w	r3, r7, #20
 800ec34:	4619      	mov	r1, r3
 800ec36:	481b      	ldr	r0, [pc, #108]	; (800eca4 <HAL_HCD_MspInit+0xc0>)
 800ec38:	f7f4 f8cc 	bl	8002dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ec40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec42:	2302      	movs	r3, #2
 800ec44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec46:	2300      	movs	r3, #0
 800ec48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec4e:	230a      	movs	r3, #10
 800ec50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec52:	f107 0314 	add.w	r3, r7, #20
 800ec56:	4619      	mov	r1, r3
 800ec58:	4812      	ldr	r0, [pc, #72]	; (800eca4 <HAL_HCD_MspInit+0xc0>)
 800ec5a:	f7f4 f8bb 	bl	8002dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec5e:	4b10      	ldr	r3, [pc, #64]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec62:	4a0f      	ldr	r2, [pc, #60]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec68:	6353      	str	r3, [r2, #52]	; 0x34
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	60fb      	str	r3, [r7, #12]
 800ec6e:	4b0c      	ldr	r3, [pc, #48]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec72:	4a0b      	ldr	r2, [pc, #44]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ec78:	6453      	str	r3, [r2, #68]	; 0x44
 800ec7a:	4b09      	ldr	r3, [pc, #36]	; (800eca0 <HAL_HCD_MspInit+0xbc>)
 800ec7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec86:	2200      	movs	r2, #0
 800ec88:	2100      	movs	r1, #0
 800ec8a:	2043      	movs	r0, #67	; 0x43
 800ec8c:	f7f3 fc8d 	bl	80025aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ec90:	2043      	movs	r0, #67	; 0x43
 800ec92:	f7f3 fca6 	bl	80025e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ec96:	bf00      	nop
 800ec98:	3728      	adds	r7, #40	; 0x28
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	40023800 	.word	0x40023800
 800eca4:	40020000 	.word	0x40020000

0800eca8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7fc fd53 	bl	800b762 <USBH_LL_IncTimer>
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b082      	sub	sp, #8
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7fc fd8b 	bl	800b7ee <USBH_LL_Connect>
}
 800ecd8:	bf00      	nop
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f7fc fd94 	bl	800b81c <USBH_LL_Disconnect>
}
 800ecf4:	bf00      	nop
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	460b      	mov	r3, r1
 800ed06:	70fb      	strb	r3, [r7, #3]
 800ed08:	4613      	mov	r3, r2
 800ed0a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ed0c:	bf00      	nop
 800ed0e:	370c      	adds	r7, #12
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed26:	4618      	mov	r0, r3
 800ed28:	f7fc fd45 	bl	800b7b6 <USBH_LL_PortEnabled>
} 
 800ed2c:	bf00      	nop
 800ed2e:	3708      	adds	r7, #8
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ed42:	4618      	mov	r0, r3
 800ed44:	f7fc fd45 	bl	800b7d2 <USBH_LL_PortDisabled>
} 
 800ed48:	bf00      	nop
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d12a      	bne.n	800edb8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ed62:	4a18      	ldr	r2, [pc, #96]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a15      	ldr	r2, [pc, #84]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed6e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ed72:	4b14      	ldr	r3, [pc, #80]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ed78:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800ed7a:	4b12      	ldr	r3, [pc, #72]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed7c:	2208      	movs	r2, #8
 800ed7e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800ed80:	4b10      	ldr	r3, [pc, #64]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed82:	2201      	movs	r2, #1
 800ed84:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ed86:	4b0f      	ldr	r3, [pc, #60]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed88:	2200      	movs	r2, #0
 800ed8a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800ed8c:	4b0d      	ldr	r3, [pc, #52]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed8e:	2202      	movs	r2, #2
 800ed90:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ed92:	4b0c      	ldr	r3, [pc, #48]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed94:	2200      	movs	r2, #0
 800ed96:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ed98:	480a      	ldr	r0, [pc, #40]	; (800edc4 <USBH_LL_Init+0x74>)
 800ed9a:	f7f4 f9e9 	bl	8003170 <HAL_HCD_Init>
 800ed9e:	4603      	mov	r3, r0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d001      	beq.n	800eda8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800eda4:	f7f2 fe9c 	bl	8001ae0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800eda8:	4806      	ldr	r0, [pc, #24]	; (800edc4 <USBH_LL_Init+0x74>)
 800edaa:	f7f4 fded 	bl	8003988 <HAL_HCD_GetCurrentFrame>
 800edae:	4603      	mov	r3, r0
 800edb0:	4619      	mov	r1, r3
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7fc fcc6 	bl	800b744 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}
 800edc2:	bf00      	nop
 800edc4:	20001e24 	.word	0x20001e24

0800edc8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edd0:	2300      	movs	r3, #0
 800edd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800edd4:	2300      	movs	r3, #0
 800edd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800edde:	4618      	mov	r0, r3
 800ede0:	f7f4 fd5a 	bl	8003898 <HAL_HCD_Start>
 800ede4:	4603      	mov	r3, r0
 800ede6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	4618      	mov	r0, r3
 800edec:	f000 f990 	bl	800f110 <USBH_Get_USB_Status>
 800edf0:	4603      	mov	r3, r0
 800edf2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800edf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b084      	sub	sp, #16
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee06:	2300      	movs	r3, #0
 800ee08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7f4 fd62 	bl	80038de <HAL_HCD_Stop>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
 800ee20:	4618      	mov	r0, r3
 800ee22:	f000 f975 	bl	800f110 <USBH_Get_USB_Status>
 800ee26:	4603      	mov	r3, r0
 800ee28:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7f4 fdac 	bl	80039a4 <HAL_HCD_GetCurrentSpeed>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d007      	beq.n	800ee62 <USBH_LL_GetSpeed+0x2e>
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	d302      	bcc.n	800ee5c <USBH_LL_GetSpeed+0x28>
 800ee56:	2b02      	cmp	r3, #2
 800ee58:	d006      	beq.n	800ee68 <USBH_LL_GetSpeed+0x34>
 800ee5a:	e008      	b.n	800ee6e <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	73fb      	strb	r3, [r7, #15]
    break;
 800ee60:	e008      	b.n	800ee74 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ee62:	2301      	movs	r3, #1
 800ee64:	73fb      	strb	r3, [r7, #15]
    break;
 800ee66:	e005      	b.n	800ee74 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ee68:	2302      	movs	r3, #2
 800ee6a:	73fb      	strb	r3, [r7, #15]
    break;
 800ee6c:	e002      	b.n	800ee74 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	73fb      	strb	r3, [r7, #15]
    break;
 800ee72:	bf00      	nop
  }
  return  speed;
 800ee74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3710      	adds	r7, #16
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	bd80      	pop	{r7, pc}

0800ee7e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800ee7e:	b580      	push	{r7, lr}
 800ee80:	b084      	sub	sp, #16
 800ee82:	af00      	add	r7, sp, #0
 800ee84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee86:	2300      	movs	r3, #0
 800ee88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7f4 fd3f 	bl	8003918 <HAL_HCD_ResetPort>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800ee9e:	7bfb      	ldrb	r3, [r7, #15]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 f935 	bl	800f110 <USBH_Get_USB_Status>
 800eea6:	4603      	mov	r3, r0
 800eea8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800eeaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b082      	sub	sp, #8
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	460b      	mov	r3, r1
 800eebe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800eec6:	78fa      	ldrb	r2, [r7, #3]
 800eec8:	4611      	mov	r1, r2
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f4 fd47 	bl	800395e <HAL_HCD_HC_GetXferCount>
 800eed0:	4603      	mov	r3, r0
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3708      	adds	r7, #8
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800eeda:	b590      	push	{r4, r7, lr}
 800eedc:	b089      	sub	sp, #36	; 0x24
 800eede:	af04      	add	r7, sp, #16
 800eee0:	6078      	str	r0, [r7, #4]
 800eee2:	4608      	mov	r0, r1
 800eee4:	4611      	mov	r1, r2
 800eee6:	461a      	mov	r2, r3
 800eee8:	4603      	mov	r3, r0
 800eeea:	70fb      	strb	r3, [r7, #3]
 800eeec:	460b      	mov	r3, r1
 800eeee:	70bb      	strb	r3, [r7, #2]
 800eef0:	4613      	mov	r3, r2
 800eef2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eef4:	2300      	movs	r3, #0
 800eef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800eef8:	2300      	movs	r3, #0
 800eefa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef02:	787c      	ldrb	r4, [r7, #1]
 800ef04:	78ba      	ldrb	r2, [r7, #2]
 800ef06:	78f9      	ldrb	r1, [r7, #3]
 800ef08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ef0a:	9302      	str	r3, [sp, #8]
 800ef0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ef10:	9301      	str	r3, [sp, #4]
 800ef12:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	4623      	mov	r3, r4
 800ef1a:	f7f4 f98b 	bl	8003234 <HAL_HCD_HC_Init>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	4618      	mov	r0, r3
 800ef26:	f000 f8f3 	bl	800f110 <USBH_Get_USB_Status>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ef2e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3714      	adds	r7, #20
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd90      	pop	{r4, r7, pc}

0800ef38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	460b      	mov	r3, r1
 800ef42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ef52:	78fa      	ldrb	r2, [r7, #3]
 800ef54:	4611      	mov	r1, r2
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7f4 fa04 	bl	8003364 <HAL_HCD_HC_Halt>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ef60:	7bfb      	ldrb	r3, [r7, #15]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f000 f8d4 	bl	800f110 <USBH_Get_USB_Status>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ef6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3710      	adds	r7, #16
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}

0800ef76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ef76:	b590      	push	{r4, r7, lr}
 800ef78:	b089      	sub	sp, #36	; 0x24
 800ef7a:	af04      	add	r7, sp, #16
 800ef7c:	6078      	str	r0, [r7, #4]
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	461a      	mov	r2, r3
 800ef84:	4603      	mov	r3, r0
 800ef86:	70fb      	strb	r3, [r7, #3]
 800ef88:	460b      	mov	r3, r1
 800ef8a:	70bb      	strb	r3, [r7, #2]
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef90:	2300      	movs	r3, #0
 800ef92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ef9e:	787c      	ldrb	r4, [r7, #1]
 800efa0:	78ba      	ldrb	r2, [r7, #2]
 800efa2:	78f9      	ldrb	r1, [r7, #3]
 800efa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800efa8:	9303      	str	r3, [sp, #12]
 800efaa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800efac:	9302      	str	r3, [sp, #8]
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	9301      	str	r3, [sp, #4]
 800efb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800efb6:	9300      	str	r3, [sp, #0]
 800efb8:	4623      	mov	r3, r4
 800efba:	f7f4 f9f7 	bl	80033ac <HAL_HCD_HC_SubmitRequest>
 800efbe:	4603      	mov	r3, r0
 800efc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800efc2:	7bfb      	ldrb	r3, [r7, #15]
 800efc4:	4618      	mov	r0, r3
 800efc6:	f000 f8a3 	bl	800f110 <USBH_Get_USB_Status>
 800efca:	4603      	mov	r3, r0
 800efcc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800efce:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3714      	adds	r7, #20
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd90      	pop	{r4, r7, pc}

0800efd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b082      	sub	sp, #8
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	460b      	mov	r3, r1
 800efe2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800efea:	78fa      	ldrb	r2, [r7, #3]
 800efec:	4611      	mov	r1, r2
 800efee:	4618      	mov	r0, r3
 800eff0:	f7f4 fca0 	bl	8003934 <HAL_HCD_HC_GetURBState>
 800eff4:	4603      	mov	r3, r0
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3708      	adds	r7, #8
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}

0800effe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800effe:	b580      	push	{r7, lr}
 800f000:	b082      	sub	sp, #8
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
 800f006:	460b      	mov	r3, r1
 800f008:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800f010:	2b01      	cmp	r3, #1
 800f012:	d103      	bne.n	800f01c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f014:	78fb      	ldrb	r3, [r7, #3]
 800f016:	4618      	mov	r0, r3
 800f018:	f000 f8a6 	bl	800f168 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f01c:	20c8      	movs	r0, #200	; 0xc8
 800f01e:	f7f3 f9c7 	bl	80023b0 <HAL_Delay>
  return USBH_OK;
 800f022:	2300      	movs	r3, #0
}
 800f024:	4618      	mov	r0, r3
 800f026:	3708      	adds	r7, #8
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd80      	pop	{r7, pc}

0800f02c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b085      	sub	sp, #20
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	460b      	mov	r3, r1
 800f036:	70fb      	strb	r3, [r7, #3]
 800f038:	4613      	mov	r3, r2
 800f03a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f042:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f044:	78fa      	ldrb	r2, [r7, #3]
 800f046:	68f9      	ldr	r1, [r7, #12]
 800f048:	4613      	mov	r3, r2
 800f04a:	009b      	lsls	r3, r3, #2
 800f04c:	4413      	add	r3, r2
 800f04e:	00db      	lsls	r3, r3, #3
 800f050:	440b      	add	r3, r1
 800f052:	333b      	adds	r3, #59	; 0x3b
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00a      	beq.n	800f070 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f05a:	78fa      	ldrb	r2, [r7, #3]
 800f05c:	68f9      	ldr	r1, [r7, #12]
 800f05e:	4613      	mov	r3, r2
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	4413      	add	r3, r2
 800f064:	00db      	lsls	r3, r3, #3
 800f066:	440b      	add	r3, r1
 800f068:	3350      	adds	r3, #80	; 0x50
 800f06a:	78ba      	ldrb	r2, [r7, #2]
 800f06c:	701a      	strb	r2, [r3, #0]
 800f06e:	e009      	b.n	800f084 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	68f9      	ldr	r1, [r7, #12]
 800f074:	4613      	mov	r3, r2
 800f076:	009b      	lsls	r3, r3, #2
 800f078:	4413      	add	r3, r2
 800f07a:	00db      	lsls	r3, r3, #3
 800f07c:	440b      	add	r3, r1
 800f07e:	3351      	adds	r3, #81	; 0x51
 800f080:	78ba      	ldrb	r2, [r7, #2]
 800f082:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f092:	b480      	push	{r7}
 800f094:	b085      	sub	sp, #20
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
 800f09a:	460b      	mov	r3, r1
 800f09c:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800f0a8:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f0aa:	78fa      	ldrb	r2, [r7, #3]
 800f0ac:	68b9      	ldr	r1, [r7, #8]
 800f0ae:	4613      	mov	r3, r2
 800f0b0:	009b      	lsls	r3, r3, #2
 800f0b2:	4413      	add	r3, r2
 800f0b4:	00db      	lsls	r3, r3, #3
 800f0b6:	440b      	add	r3, r1
 800f0b8:	333b      	adds	r3, #59	; 0x3b
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d00a      	beq.n	800f0d6 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f0c0:	78fa      	ldrb	r2, [r7, #3]
 800f0c2:	68b9      	ldr	r1, [r7, #8]
 800f0c4:	4613      	mov	r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	4413      	add	r3, r2
 800f0ca:	00db      	lsls	r3, r3, #3
 800f0cc:	440b      	add	r3, r1
 800f0ce:	3350      	adds	r3, #80	; 0x50
 800f0d0:	781b      	ldrb	r3, [r3, #0]
 800f0d2:	73fb      	strb	r3, [r7, #15]
 800f0d4:	e009      	b.n	800f0ea <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f0d6:	78fa      	ldrb	r2, [r7, #3]
 800f0d8:	68b9      	ldr	r1, [r7, #8]
 800f0da:	4613      	mov	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	4413      	add	r3, r2
 800f0e0:	00db      	lsls	r3, r3, #3
 800f0e2:	440b      	add	r3, r1
 800f0e4:	3351      	adds	r3, #81	; 0x51
 800f0e6:	781b      	ldrb	r3, [r3, #0]
 800f0e8:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3714      	adds	r7, #20
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f6:	4770      	bx	lr

0800f0f8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b082      	sub	sp, #8
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7f3 f955 	bl	80023b0 <HAL_Delay>
}
 800f106:	bf00      	nop
 800f108:	3708      	adds	r7, #8
 800f10a:	46bd      	mov	sp, r7
 800f10c:	bd80      	pop	{r7, pc}
	...

0800f110 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	4603      	mov	r3, r0
 800f118:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f11a:	2300      	movs	r3, #0
 800f11c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	2b03      	cmp	r3, #3
 800f122:	d817      	bhi.n	800f154 <USBH_Get_USB_Status+0x44>
 800f124:	a201      	add	r2, pc, #4	; (adr r2, 800f12c <USBH_Get_USB_Status+0x1c>)
 800f126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f12a:	bf00      	nop
 800f12c:	0800f13d 	.word	0x0800f13d
 800f130:	0800f143 	.word	0x0800f143
 800f134:	0800f149 	.word	0x0800f149
 800f138:	0800f14f 	.word	0x0800f14f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	73fb      	strb	r3, [r7, #15]
    break;
 800f140:	e00b      	b.n	800f15a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f142:	2302      	movs	r3, #2
 800f144:	73fb      	strb	r3, [r7, #15]
    break;
 800f146:	e008      	b.n	800f15a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f148:	2301      	movs	r3, #1
 800f14a:	73fb      	strb	r3, [r7, #15]
    break;
 800f14c:	e005      	b.n	800f15a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f14e:	2302      	movs	r3, #2
 800f150:	73fb      	strb	r3, [r7, #15]
    break;
 800f152:	e002      	b.n	800f15a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f154:	2302      	movs	r3, #2
 800f156:	73fb      	strb	r3, [r7, #15]
    break;
 800f158:	bf00      	nop
  }
  return usb_status;
 800f15a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	4603      	mov	r3, r0
 800f170:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800f172:	79fb      	ldrb	r3, [r7, #7]
 800f174:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f176:	79fb      	ldrb	r3, [r7, #7]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d102      	bne.n	800f182 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800f17c:	2301      	movs	r3, #1
 800f17e:	73fb      	strb	r3, [r7, #15]
 800f180:	e001      	b.n	800f186 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800f182:	2300      	movs	r3, #0
 800f184:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800f186:	7bfb      	ldrb	r3, [r7, #15]
 800f188:	461a      	mov	r2, r3
 800f18a:	2101      	movs	r1, #1
 800f18c:	4803      	ldr	r0, [pc, #12]	; (800f19c <MX_DriverVbusFS+0x34>)
 800f18e:	f7f3 ffa3 	bl	80030d8 <HAL_GPIO_WritePin>
}
 800f192:	bf00      	nop
 800f194:	3710      	adds	r7, #16
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	bf00      	nop
 800f19c:	40020800 	.word	0x40020800

0800f1a0 <__errno>:
 800f1a0:	4b01      	ldr	r3, [pc, #4]	; (800f1a8 <__errno+0x8>)
 800f1a2:	6818      	ldr	r0, [r3, #0]
 800f1a4:	4770      	bx	lr
 800f1a6:	bf00      	nop
 800f1a8:	20000040 	.word	0x20000040

0800f1ac <__libc_init_array>:
 800f1ac:	b570      	push	{r4, r5, r6, lr}
 800f1ae:	4e0d      	ldr	r6, [pc, #52]	; (800f1e4 <__libc_init_array+0x38>)
 800f1b0:	4c0d      	ldr	r4, [pc, #52]	; (800f1e8 <__libc_init_array+0x3c>)
 800f1b2:	1ba4      	subs	r4, r4, r6
 800f1b4:	10a4      	asrs	r4, r4, #2
 800f1b6:	2500      	movs	r5, #0
 800f1b8:	42a5      	cmp	r5, r4
 800f1ba:	d109      	bne.n	800f1d0 <__libc_init_array+0x24>
 800f1bc:	4e0b      	ldr	r6, [pc, #44]	; (800f1ec <__libc_init_array+0x40>)
 800f1be:	4c0c      	ldr	r4, [pc, #48]	; (800f1f0 <__libc_init_array+0x44>)
 800f1c0:	f000 fc38 	bl	800fa34 <_init>
 800f1c4:	1ba4      	subs	r4, r4, r6
 800f1c6:	10a4      	asrs	r4, r4, #2
 800f1c8:	2500      	movs	r5, #0
 800f1ca:	42a5      	cmp	r5, r4
 800f1cc:	d105      	bne.n	800f1da <__libc_init_array+0x2e>
 800f1ce:	bd70      	pop	{r4, r5, r6, pc}
 800f1d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1d4:	4798      	blx	r3
 800f1d6:	3501      	adds	r5, #1
 800f1d8:	e7ee      	b.n	800f1b8 <__libc_init_array+0xc>
 800f1da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f1de:	4798      	blx	r3
 800f1e0:	3501      	adds	r5, #1
 800f1e2:	e7f2      	b.n	800f1ca <__libc_init_array+0x1e>
 800f1e4:	0800fc8c 	.word	0x0800fc8c
 800f1e8:	0800fc8c 	.word	0x0800fc8c
 800f1ec:	0800fc8c 	.word	0x0800fc8c
 800f1f0:	0800fc90 	.word	0x0800fc90

0800f1f4 <malloc>:
 800f1f4:	4b02      	ldr	r3, [pc, #8]	; (800f200 <malloc+0xc>)
 800f1f6:	4601      	mov	r1, r0
 800f1f8:	6818      	ldr	r0, [r3, #0]
 800f1fa:	f000 b86d 	b.w	800f2d8 <_malloc_r>
 800f1fe:	bf00      	nop
 800f200:	20000040 	.word	0x20000040

0800f204 <free>:
 800f204:	4b02      	ldr	r3, [pc, #8]	; (800f210 <free+0xc>)
 800f206:	4601      	mov	r1, r0
 800f208:	6818      	ldr	r0, [r3, #0]
 800f20a:	f000 b817 	b.w	800f23c <_free_r>
 800f20e:	bf00      	nop
 800f210:	20000040 	.word	0x20000040

0800f214 <memcpy>:
 800f214:	b510      	push	{r4, lr}
 800f216:	1e43      	subs	r3, r0, #1
 800f218:	440a      	add	r2, r1
 800f21a:	4291      	cmp	r1, r2
 800f21c:	d100      	bne.n	800f220 <memcpy+0xc>
 800f21e:	bd10      	pop	{r4, pc}
 800f220:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f224:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f228:	e7f7      	b.n	800f21a <memcpy+0x6>

0800f22a <memset>:
 800f22a:	4402      	add	r2, r0
 800f22c:	4603      	mov	r3, r0
 800f22e:	4293      	cmp	r3, r2
 800f230:	d100      	bne.n	800f234 <memset+0xa>
 800f232:	4770      	bx	lr
 800f234:	f803 1b01 	strb.w	r1, [r3], #1
 800f238:	e7f9      	b.n	800f22e <memset+0x4>
	...

0800f23c <_free_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	4605      	mov	r5, r0
 800f240:	2900      	cmp	r1, #0
 800f242:	d045      	beq.n	800f2d0 <_free_r+0x94>
 800f244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f248:	1f0c      	subs	r4, r1, #4
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	bfb8      	it	lt
 800f24e:	18e4      	addlt	r4, r4, r3
 800f250:	f000 f8cc 	bl	800f3ec <__malloc_lock>
 800f254:	4a1f      	ldr	r2, [pc, #124]	; (800f2d4 <_free_r+0x98>)
 800f256:	6813      	ldr	r3, [r2, #0]
 800f258:	4610      	mov	r0, r2
 800f25a:	b933      	cbnz	r3, 800f26a <_free_r+0x2e>
 800f25c:	6063      	str	r3, [r4, #4]
 800f25e:	6014      	str	r4, [r2, #0]
 800f260:	4628      	mov	r0, r5
 800f262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f266:	f000 b8c2 	b.w	800f3ee <__malloc_unlock>
 800f26a:	42a3      	cmp	r3, r4
 800f26c:	d90c      	bls.n	800f288 <_free_r+0x4c>
 800f26e:	6821      	ldr	r1, [r4, #0]
 800f270:	1862      	adds	r2, r4, r1
 800f272:	4293      	cmp	r3, r2
 800f274:	bf04      	itt	eq
 800f276:	681a      	ldreq	r2, [r3, #0]
 800f278:	685b      	ldreq	r3, [r3, #4]
 800f27a:	6063      	str	r3, [r4, #4]
 800f27c:	bf04      	itt	eq
 800f27e:	1852      	addeq	r2, r2, r1
 800f280:	6022      	streq	r2, [r4, #0]
 800f282:	6004      	str	r4, [r0, #0]
 800f284:	e7ec      	b.n	800f260 <_free_r+0x24>
 800f286:	4613      	mov	r3, r2
 800f288:	685a      	ldr	r2, [r3, #4]
 800f28a:	b10a      	cbz	r2, 800f290 <_free_r+0x54>
 800f28c:	42a2      	cmp	r2, r4
 800f28e:	d9fa      	bls.n	800f286 <_free_r+0x4a>
 800f290:	6819      	ldr	r1, [r3, #0]
 800f292:	1858      	adds	r0, r3, r1
 800f294:	42a0      	cmp	r0, r4
 800f296:	d10b      	bne.n	800f2b0 <_free_r+0x74>
 800f298:	6820      	ldr	r0, [r4, #0]
 800f29a:	4401      	add	r1, r0
 800f29c:	1858      	adds	r0, r3, r1
 800f29e:	4282      	cmp	r2, r0
 800f2a0:	6019      	str	r1, [r3, #0]
 800f2a2:	d1dd      	bne.n	800f260 <_free_r+0x24>
 800f2a4:	6810      	ldr	r0, [r2, #0]
 800f2a6:	6852      	ldr	r2, [r2, #4]
 800f2a8:	605a      	str	r2, [r3, #4]
 800f2aa:	4401      	add	r1, r0
 800f2ac:	6019      	str	r1, [r3, #0]
 800f2ae:	e7d7      	b.n	800f260 <_free_r+0x24>
 800f2b0:	d902      	bls.n	800f2b8 <_free_r+0x7c>
 800f2b2:	230c      	movs	r3, #12
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	e7d3      	b.n	800f260 <_free_r+0x24>
 800f2b8:	6820      	ldr	r0, [r4, #0]
 800f2ba:	1821      	adds	r1, r4, r0
 800f2bc:	428a      	cmp	r2, r1
 800f2be:	bf04      	itt	eq
 800f2c0:	6811      	ldreq	r1, [r2, #0]
 800f2c2:	6852      	ldreq	r2, [r2, #4]
 800f2c4:	6062      	str	r2, [r4, #4]
 800f2c6:	bf04      	itt	eq
 800f2c8:	1809      	addeq	r1, r1, r0
 800f2ca:	6021      	streq	r1, [r4, #0]
 800f2cc:	605c      	str	r4, [r3, #4]
 800f2ce:	e7c7      	b.n	800f260 <_free_r+0x24>
 800f2d0:	bd38      	pop	{r3, r4, r5, pc}
 800f2d2:	bf00      	nop
 800f2d4:	200013c0 	.word	0x200013c0

0800f2d8 <_malloc_r>:
 800f2d8:	b570      	push	{r4, r5, r6, lr}
 800f2da:	1ccd      	adds	r5, r1, #3
 800f2dc:	f025 0503 	bic.w	r5, r5, #3
 800f2e0:	3508      	adds	r5, #8
 800f2e2:	2d0c      	cmp	r5, #12
 800f2e4:	bf38      	it	cc
 800f2e6:	250c      	movcc	r5, #12
 800f2e8:	2d00      	cmp	r5, #0
 800f2ea:	4606      	mov	r6, r0
 800f2ec:	db01      	blt.n	800f2f2 <_malloc_r+0x1a>
 800f2ee:	42a9      	cmp	r1, r5
 800f2f0:	d903      	bls.n	800f2fa <_malloc_r+0x22>
 800f2f2:	230c      	movs	r3, #12
 800f2f4:	6033      	str	r3, [r6, #0]
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	bd70      	pop	{r4, r5, r6, pc}
 800f2fa:	f000 f877 	bl	800f3ec <__malloc_lock>
 800f2fe:	4a21      	ldr	r2, [pc, #132]	; (800f384 <_malloc_r+0xac>)
 800f300:	6814      	ldr	r4, [r2, #0]
 800f302:	4621      	mov	r1, r4
 800f304:	b991      	cbnz	r1, 800f32c <_malloc_r+0x54>
 800f306:	4c20      	ldr	r4, [pc, #128]	; (800f388 <_malloc_r+0xb0>)
 800f308:	6823      	ldr	r3, [r4, #0]
 800f30a:	b91b      	cbnz	r3, 800f314 <_malloc_r+0x3c>
 800f30c:	4630      	mov	r0, r6
 800f30e:	f000 f83d 	bl	800f38c <_sbrk_r>
 800f312:	6020      	str	r0, [r4, #0]
 800f314:	4629      	mov	r1, r5
 800f316:	4630      	mov	r0, r6
 800f318:	f000 f838 	bl	800f38c <_sbrk_r>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d124      	bne.n	800f36a <_malloc_r+0x92>
 800f320:	230c      	movs	r3, #12
 800f322:	6033      	str	r3, [r6, #0]
 800f324:	4630      	mov	r0, r6
 800f326:	f000 f862 	bl	800f3ee <__malloc_unlock>
 800f32a:	e7e4      	b.n	800f2f6 <_malloc_r+0x1e>
 800f32c:	680b      	ldr	r3, [r1, #0]
 800f32e:	1b5b      	subs	r3, r3, r5
 800f330:	d418      	bmi.n	800f364 <_malloc_r+0x8c>
 800f332:	2b0b      	cmp	r3, #11
 800f334:	d90f      	bls.n	800f356 <_malloc_r+0x7e>
 800f336:	600b      	str	r3, [r1, #0]
 800f338:	50cd      	str	r5, [r1, r3]
 800f33a:	18cc      	adds	r4, r1, r3
 800f33c:	4630      	mov	r0, r6
 800f33e:	f000 f856 	bl	800f3ee <__malloc_unlock>
 800f342:	f104 000b 	add.w	r0, r4, #11
 800f346:	1d23      	adds	r3, r4, #4
 800f348:	f020 0007 	bic.w	r0, r0, #7
 800f34c:	1ac3      	subs	r3, r0, r3
 800f34e:	d0d3      	beq.n	800f2f8 <_malloc_r+0x20>
 800f350:	425a      	negs	r2, r3
 800f352:	50e2      	str	r2, [r4, r3]
 800f354:	e7d0      	b.n	800f2f8 <_malloc_r+0x20>
 800f356:	428c      	cmp	r4, r1
 800f358:	684b      	ldr	r3, [r1, #4]
 800f35a:	bf16      	itet	ne
 800f35c:	6063      	strne	r3, [r4, #4]
 800f35e:	6013      	streq	r3, [r2, #0]
 800f360:	460c      	movne	r4, r1
 800f362:	e7eb      	b.n	800f33c <_malloc_r+0x64>
 800f364:	460c      	mov	r4, r1
 800f366:	6849      	ldr	r1, [r1, #4]
 800f368:	e7cc      	b.n	800f304 <_malloc_r+0x2c>
 800f36a:	1cc4      	adds	r4, r0, #3
 800f36c:	f024 0403 	bic.w	r4, r4, #3
 800f370:	42a0      	cmp	r0, r4
 800f372:	d005      	beq.n	800f380 <_malloc_r+0xa8>
 800f374:	1a21      	subs	r1, r4, r0
 800f376:	4630      	mov	r0, r6
 800f378:	f000 f808 	bl	800f38c <_sbrk_r>
 800f37c:	3001      	adds	r0, #1
 800f37e:	d0cf      	beq.n	800f320 <_malloc_r+0x48>
 800f380:	6025      	str	r5, [r4, #0]
 800f382:	e7db      	b.n	800f33c <_malloc_r+0x64>
 800f384:	200013c0 	.word	0x200013c0
 800f388:	200013c4 	.word	0x200013c4

0800f38c <_sbrk_r>:
 800f38c:	b538      	push	{r3, r4, r5, lr}
 800f38e:	4c06      	ldr	r4, [pc, #24]	; (800f3a8 <_sbrk_r+0x1c>)
 800f390:	2300      	movs	r3, #0
 800f392:	4605      	mov	r5, r0
 800f394:	4608      	mov	r0, r1
 800f396:	6023      	str	r3, [r4, #0]
 800f398:	f7f2 fe1c 	bl	8001fd4 <_sbrk>
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	d102      	bne.n	800f3a6 <_sbrk_r+0x1a>
 800f3a0:	6823      	ldr	r3, [r4, #0]
 800f3a2:	b103      	cbz	r3, 800f3a6 <_sbrk_r+0x1a>
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
 800f3a8:	200020e8 	.word	0x200020e8

0800f3ac <_vsiprintf_r>:
 800f3ac:	b500      	push	{lr}
 800f3ae:	b09b      	sub	sp, #108	; 0x6c
 800f3b0:	9100      	str	r1, [sp, #0]
 800f3b2:	9104      	str	r1, [sp, #16]
 800f3b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f3b8:	9105      	str	r1, [sp, #20]
 800f3ba:	9102      	str	r1, [sp, #8]
 800f3bc:	4905      	ldr	r1, [pc, #20]	; (800f3d4 <_vsiprintf_r+0x28>)
 800f3be:	9103      	str	r1, [sp, #12]
 800f3c0:	4669      	mov	r1, sp
 800f3c2:	f000 f86f 	bl	800f4a4 <_svfiprintf_r>
 800f3c6:	9b00      	ldr	r3, [sp, #0]
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	701a      	strb	r2, [r3, #0]
 800f3cc:	b01b      	add	sp, #108	; 0x6c
 800f3ce:	f85d fb04 	ldr.w	pc, [sp], #4
 800f3d2:	bf00      	nop
 800f3d4:	ffff0208 	.word	0xffff0208

0800f3d8 <vsiprintf>:
 800f3d8:	4613      	mov	r3, r2
 800f3da:	460a      	mov	r2, r1
 800f3dc:	4601      	mov	r1, r0
 800f3de:	4802      	ldr	r0, [pc, #8]	; (800f3e8 <vsiprintf+0x10>)
 800f3e0:	6800      	ldr	r0, [r0, #0]
 800f3e2:	f7ff bfe3 	b.w	800f3ac <_vsiprintf_r>
 800f3e6:	bf00      	nop
 800f3e8:	20000040 	.word	0x20000040

0800f3ec <__malloc_lock>:
 800f3ec:	4770      	bx	lr

0800f3ee <__malloc_unlock>:
 800f3ee:	4770      	bx	lr

0800f3f0 <__ssputs_r>:
 800f3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f4:	688e      	ldr	r6, [r1, #8]
 800f3f6:	429e      	cmp	r6, r3
 800f3f8:	4682      	mov	sl, r0
 800f3fa:	460c      	mov	r4, r1
 800f3fc:	4690      	mov	r8, r2
 800f3fe:	4699      	mov	r9, r3
 800f400:	d837      	bhi.n	800f472 <__ssputs_r+0x82>
 800f402:	898a      	ldrh	r2, [r1, #12]
 800f404:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f408:	d031      	beq.n	800f46e <__ssputs_r+0x7e>
 800f40a:	6825      	ldr	r5, [r4, #0]
 800f40c:	6909      	ldr	r1, [r1, #16]
 800f40e:	1a6f      	subs	r7, r5, r1
 800f410:	6965      	ldr	r5, [r4, #20]
 800f412:	2302      	movs	r3, #2
 800f414:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f418:	fb95 f5f3 	sdiv	r5, r5, r3
 800f41c:	f109 0301 	add.w	r3, r9, #1
 800f420:	443b      	add	r3, r7
 800f422:	429d      	cmp	r5, r3
 800f424:	bf38      	it	cc
 800f426:	461d      	movcc	r5, r3
 800f428:	0553      	lsls	r3, r2, #21
 800f42a:	d530      	bpl.n	800f48e <__ssputs_r+0x9e>
 800f42c:	4629      	mov	r1, r5
 800f42e:	f7ff ff53 	bl	800f2d8 <_malloc_r>
 800f432:	4606      	mov	r6, r0
 800f434:	b950      	cbnz	r0, 800f44c <__ssputs_r+0x5c>
 800f436:	230c      	movs	r3, #12
 800f438:	f8ca 3000 	str.w	r3, [sl]
 800f43c:	89a3      	ldrh	r3, [r4, #12]
 800f43e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f442:	81a3      	strh	r3, [r4, #12]
 800f444:	f04f 30ff 	mov.w	r0, #4294967295
 800f448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44c:	463a      	mov	r2, r7
 800f44e:	6921      	ldr	r1, [r4, #16]
 800f450:	f7ff fee0 	bl	800f214 <memcpy>
 800f454:	89a3      	ldrh	r3, [r4, #12]
 800f456:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f45a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f45e:	81a3      	strh	r3, [r4, #12]
 800f460:	6126      	str	r6, [r4, #16]
 800f462:	6165      	str	r5, [r4, #20]
 800f464:	443e      	add	r6, r7
 800f466:	1bed      	subs	r5, r5, r7
 800f468:	6026      	str	r6, [r4, #0]
 800f46a:	60a5      	str	r5, [r4, #8]
 800f46c:	464e      	mov	r6, r9
 800f46e:	454e      	cmp	r6, r9
 800f470:	d900      	bls.n	800f474 <__ssputs_r+0x84>
 800f472:	464e      	mov	r6, r9
 800f474:	4632      	mov	r2, r6
 800f476:	4641      	mov	r1, r8
 800f478:	6820      	ldr	r0, [r4, #0]
 800f47a:	f000 fa93 	bl	800f9a4 <memmove>
 800f47e:	68a3      	ldr	r3, [r4, #8]
 800f480:	1b9b      	subs	r3, r3, r6
 800f482:	60a3      	str	r3, [r4, #8]
 800f484:	6823      	ldr	r3, [r4, #0]
 800f486:	441e      	add	r6, r3
 800f488:	6026      	str	r6, [r4, #0]
 800f48a:	2000      	movs	r0, #0
 800f48c:	e7dc      	b.n	800f448 <__ssputs_r+0x58>
 800f48e:	462a      	mov	r2, r5
 800f490:	f000 faa1 	bl	800f9d6 <_realloc_r>
 800f494:	4606      	mov	r6, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d1e2      	bne.n	800f460 <__ssputs_r+0x70>
 800f49a:	6921      	ldr	r1, [r4, #16]
 800f49c:	4650      	mov	r0, sl
 800f49e:	f7ff fecd 	bl	800f23c <_free_r>
 800f4a2:	e7c8      	b.n	800f436 <__ssputs_r+0x46>

0800f4a4 <_svfiprintf_r>:
 800f4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4a8:	461d      	mov	r5, r3
 800f4aa:	898b      	ldrh	r3, [r1, #12]
 800f4ac:	061f      	lsls	r7, r3, #24
 800f4ae:	b09d      	sub	sp, #116	; 0x74
 800f4b0:	4680      	mov	r8, r0
 800f4b2:	460c      	mov	r4, r1
 800f4b4:	4616      	mov	r6, r2
 800f4b6:	d50f      	bpl.n	800f4d8 <_svfiprintf_r+0x34>
 800f4b8:	690b      	ldr	r3, [r1, #16]
 800f4ba:	b96b      	cbnz	r3, 800f4d8 <_svfiprintf_r+0x34>
 800f4bc:	2140      	movs	r1, #64	; 0x40
 800f4be:	f7ff ff0b 	bl	800f2d8 <_malloc_r>
 800f4c2:	6020      	str	r0, [r4, #0]
 800f4c4:	6120      	str	r0, [r4, #16]
 800f4c6:	b928      	cbnz	r0, 800f4d4 <_svfiprintf_r+0x30>
 800f4c8:	230c      	movs	r3, #12
 800f4ca:	f8c8 3000 	str.w	r3, [r8]
 800f4ce:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d2:	e0c8      	b.n	800f666 <_svfiprintf_r+0x1c2>
 800f4d4:	2340      	movs	r3, #64	; 0x40
 800f4d6:	6163      	str	r3, [r4, #20]
 800f4d8:	2300      	movs	r3, #0
 800f4da:	9309      	str	r3, [sp, #36]	; 0x24
 800f4dc:	2320      	movs	r3, #32
 800f4de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4e2:	2330      	movs	r3, #48	; 0x30
 800f4e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4e8:	9503      	str	r5, [sp, #12]
 800f4ea:	f04f 0b01 	mov.w	fp, #1
 800f4ee:	4637      	mov	r7, r6
 800f4f0:	463d      	mov	r5, r7
 800f4f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f4f6:	b10b      	cbz	r3, 800f4fc <_svfiprintf_r+0x58>
 800f4f8:	2b25      	cmp	r3, #37	; 0x25
 800f4fa:	d13e      	bne.n	800f57a <_svfiprintf_r+0xd6>
 800f4fc:	ebb7 0a06 	subs.w	sl, r7, r6
 800f500:	d00b      	beq.n	800f51a <_svfiprintf_r+0x76>
 800f502:	4653      	mov	r3, sl
 800f504:	4632      	mov	r2, r6
 800f506:	4621      	mov	r1, r4
 800f508:	4640      	mov	r0, r8
 800f50a:	f7ff ff71 	bl	800f3f0 <__ssputs_r>
 800f50e:	3001      	adds	r0, #1
 800f510:	f000 80a4 	beq.w	800f65c <_svfiprintf_r+0x1b8>
 800f514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f516:	4453      	add	r3, sl
 800f518:	9309      	str	r3, [sp, #36]	; 0x24
 800f51a:	783b      	ldrb	r3, [r7, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	f000 809d 	beq.w	800f65c <_svfiprintf_r+0x1b8>
 800f522:	2300      	movs	r3, #0
 800f524:	f04f 32ff 	mov.w	r2, #4294967295
 800f528:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f52c:	9304      	str	r3, [sp, #16]
 800f52e:	9307      	str	r3, [sp, #28]
 800f530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f534:	931a      	str	r3, [sp, #104]	; 0x68
 800f536:	462f      	mov	r7, r5
 800f538:	2205      	movs	r2, #5
 800f53a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f53e:	4850      	ldr	r0, [pc, #320]	; (800f680 <_svfiprintf_r+0x1dc>)
 800f540:	f7f0 fe56 	bl	80001f0 <memchr>
 800f544:	9b04      	ldr	r3, [sp, #16]
 800f546:	b9d0      	cbnz	r0, 800f57e <_svfiprintf_r+0xda>
 800f548:	06d9      	lsls	r1, r3, #27
 800f54a:	bf44      	itt	mi
 800f54c:	2220      	movmi	r2, #32
 800f54e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f552:	071a      	lsls	r2, r3, #28
 800f554:	bf44      	itt	mi
 800f556:	222b      	movmi	r2, #43	; 0x2b
 800f558:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f55c:	782a      	ldrb	r2, [r5, #0]
 800f55e:	2a2a      	cmp	r2, #42	; 0x2a
 800f560:	d015      	beq.n	800f58e <_svfiprintf_r+0xea>
 800f562:	9a07      	ldr	r2, [sp, #28]
 800f564:	462f      	mov	r7, r5
 800f566:	2000      	movs	r0, #0
 800f568:	250a      	movs	r5, #10
 800f56a:	4639      	mov	r1, r7
 800f56c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f570:	3b30      	subs	r3, #48	; 0x30
 800f572:	2b09      	cmp	r3, #9
 800f574:	d94d      	bls.n	800f612 <_svfiprintf_r+0x16e>
 800f576:	b1b8      	cbz	r0, 800f5a8 <_svfiprintf_r+0x104>
 800f578:	e00f      	b.n	800f59a <_svfiprintf_r+0xf6>
 800f57a:	462f      	mov	r7, r5
 800f57c:	e7b8      	b.n	800f4f0 <_svfiprintf_r+0x4c>
 800f57e:	4a40      	ldr	r2, [pc, #256]	; (800f680 <_svfiprintf_r+0x1dc>)
 800f580:	1a80      	subs	r0, r0, r2
 800f582:	fa0b f000 	lsl.w	r0, fp, r0
 800f586:	4318      	orrs	r0, r3
 800f588:	9004      	str	r0, [sp, #16]
 800f58a:	463d      	mov	r5, r7
 800f58c:	e7d3      	b.n	800f536 <_svfiprintf_r+0x92>
 800f58e:	9a03      	ldr	r2, [sp, #12]
 800f590:	1d11      	adds	r1, r2, #4
 800f592:	6812      	ldr	r2, [r2, #0]
 800f594:	9103      	str	r1, [sp, #12]
 800f596:	2a00      	cmp	r2, #0
 800f598:	db01      	blt.n	800f59e <_svfiprintf_r+0xfa>
 800f59a:	9207      	str	r2, [sp, #28]
 800f59c:	e004      	b.n	800f5a8 <_svfiprintf_r+0x104>
 800f59e:	4252      	negs	r2, r2
 800f5a0:	f043 0302 	orr.w	r3, r3, #2
 800f5a4:	9207      	str	r2, [sp, #28]
 800f5a6:	9304      	str	r3, [sp, #16]
 800f5a8:	783b      	ldrb	r3, [r7, #0]
 800f5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800f5ac:	d10c      	bne.n	800f5c8 <_svfiprintf_r+0x124>
 800f5ae:	787b      	ldrb	r3, [r7, #1]
 800f5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800f5b2:	d133      	bne.n	800f61c <_svfiprintf_r+0x178>
 800f5b4:	9b03      	ldr	r3, [sp, #12]
 800f5b6:	1d1a      	adds	r2, r3, #4
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	9203      	str	r2, [sp, #12]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bfb8      	it	lt
 800f5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5c4:	3702      	adds	r7, #2
 800f5c6:	9305      	str	r3, [sp, #20]
 800f5c8:	4d2e      	ldr	r5, [pc, #184]	; (800f684 <_svfiprintf_r+0x1e0>)
 800f5ca:	7839      	ldrb	r1, [r7, #0]
 800f5cc:	2203      	movs	r2, #3
 800f5ce:	4628      	mov	r0, r5
 800f5d0:	f7f0 fe0e 	bl	80001f0 <memchr>
 800f5d4:	b138      	cbz	r0, 800f5e6 <_svfiprintf_r+0x142>
 800f5d6:	2340      	movs	r3, #64	; 0x40
 800f5d8:	1b40      	subs	r0, r0, r5
 800f5da:	fa03 f000 	lsl.w	r0, r3, r0
 800f5de:	9b04      	ldr	r3, [sp, #16]
 800f5e0:	4303      	orrs	r3, r0
 800f5e2:	3701      	adds	r7, #1
 800f5e4:	9304      	str	r3, [sp, #16]
 800f5e6:	7839      	ldrb	r1, [r7, #0]
 800f5e8:	4827      	ldr	r0, [pc, #156]	; (800f688 <_svfiprintf_r+0x1e4>)
 800f5ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5ee:	2206      	movs	r2, #6
 800f5f0:	1c7e      	adds	r6, r7, #1
 800f5f2:	f7f0 fdfd 	bl	80001f0 <memchr>
 800f5f6:	2800      	cmp	r0, #0
 800f5f8:	d038      	beq.n	800f66c <_svfiprintf_r+0x1c8>
 800f5fa:	4b24      	ldr	r3, [pc, #144]	; (800f68c <_svfiprintf_r+0x1e8>)
 800f5fc:	bb13      	cbnz	r3, 800f644 <_svfiprintf_r+0x1a0>
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	3307      	adds	r3, #7
 800f602:	f023 0307 	bic.w	r3, r3, #7
 800f606:	3308      	adds	r3, #8
 800f608:	9303      	str	r3, [sp, #12]
 800f60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f60c:	444b      	add	r3, r9
 800f60e:	9309      	str	r3, [sp, #36]	; 0x24
 800f610:	e76d      	b.n	800f4ee <_svfiprintf_r+0x4a>
 800f612:	fb05 3202 	mla	r2, r5, r2, r3
 800f616:	2001      	movs	r0, #1
 800f618:	460f      	mov	r7, r1
 800f61a:	e7a6      	b.n	800f56a <_svfiprintf_r+0xc6>
 800f61c:	2300      	movs	r3, #0
 800f61e:	3701      	adds	r7, #1
 800f620:	9305      	str	r3, [sp, #20]
 800f622:	4619      	mov	r1, r3
 800f624:	250a      	movs	r5, #10
 800f626:	4638      	mov	r0, r7
 800f628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f62c:	3a30      	subs	r2, #48	; 0x30
 800f62e:	2a09      	cmp	r2, #9
 800f630:	d903      	bls.n	800f63a <_svfiprintf_r+0x196>
 800f632:	2b00      	cmp	r3, #0
 800f634:	d0c8      	beq.n	800f5c8 <_svfiprintf_r+0x124>
 800f636:	9105      	str	r1, [sp, #20]
 800f638:	e7c6      	b.n	800f5c8 <_svfiprintf_r+0x124>
 800f63a:	fb05 2101 	mla	r1, r5, r1, r2
 800f63e:	2301      	movs	r3, #1
 800f640:	4607      	mov	r7, r0
 800f642:	e7f0      	b.n	800f626 <_svfiprintf_r+0x182>
 800f644:	ab03      	add	r3, sp, #12
 800f646:	9300      	str	r3, [sp, #0]
 800f648:	4622      	mov	r2, r4
 800f64a:	4b11      	ldr	r3, [pc, #68]	; (800f690 <_svfiprintf_r+0x1ec>)
 800f64c:	a904      	add	r1, sp, #16
 800f64e:	4640      	mov	r0, r8
 800f650:	f3af 8000 	nop.w
 800f654:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f658:	4681      	mov	r9, r0
 800f65a:	d1d6      	bne.n	800f60a <_svfiprintf_r+0x166>
 800f65c:	89a3      	ldrh	r3, [r4, #12]
 800f65e:	065b      	lsls	r3, r3, #25
 800f660:	f53f af35 	bmi.w	800f4ce <_svfiprintf_r+0x2a>
 800f664:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f666:	b01d      	add	sp, #116	; 0x74
 800f668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f66c:	ab03      	add	r3, sp, #12
 800f66e:	9300      	str	r3, [sp, #0]
 800f670:	4622      	mov	r2, r4
 800f672:	4b07      	ldr	r3, [pc, #28]	; (800f690 <_svfiprintf_r+0x1ec>)
 800f674:	a904      	add	r1, sp, #16
 800f676:	4640      	mov	r0, r8
 800f678:	f000 f882 	bl	800f780 <_printf_i>
 800f67c:	e7ea      	b.n	800f654 <_svfiprintf_r+0x1b0>
 800f67e:	bf00      	nop
 800f680:	0800fc50 	.word	0x0800fc50
 800f684:	0800fc56 	.word	0x0800fc56
 800f688:	0800fc5a 	.word	0x0800fc5a
 800f68c:	00000000 	.word	0x00000000
 800f690:	0800f3f1 	.word	0x0800f3f1

0800f694 <_printf_common>:
 800f694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f698:	4691      	mov	r9, r2
 800f69a:	461f      	mov	r7, r3
 800f69c:	688a      	ldr	r2, [r1, #8]
 800f69e:	690b      	ldr	r3, [r1, #16]
 800f6a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	bfb8      	it	lt
 800f6a8:	4613      	movlt	r3, r2
 800f6aa:	f8c9 3000 	str.w	r3, [r9]
 800f6ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f6b2:	4606      	mov	r6, r0
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	b112      	cbz	r2, 800f6be <_printf_common+0x2a>
 800f6b8:	3301      	adds	r3, #1
 800f6ba:	f8c9 3000 	str.w	r3, [r9]
 800f6be:	6823      	ldr	r3, [r4, #0]
 800f6c0:	0699      	lsls	r1, r3, #26
 800f6c2:	bf42      	ittt	mi
 800f6c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f6c8:	3302      	addmi	r3, #2
 800f6ca:	f8c9 3000 	strmi.w	r3, [r9]
 800f6ce:	6825      	ldr	r5, [r4, #0]
 800f6d0:	f015 0506 	ands.w	r5, r5, #6
 800f6d4:	d107      	bne.n	800f6e6 <_printf_common+0x52>
 800f6d6:	f104 0a19 	add.w	sl, r4, #25
 800f6da:	68e3      	ldr	r3, [r4, #12]
 800f6dc:	f8d9 2000 	ldr.w	r2, [r9]
 800f6e0:	1a9b      	subs	r3, r3, r2
 800f6e2:	42ab      	cmp	r3, r5
 800f6e4:	dc28      	bgt.n	800f738 <_printf_common+0xa4>
 800f6e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f6ea:	6822      	ldr	r2, [r4, #0]
 800f6ec:	3300      	adds	r3, #0
 800f6ee:	bf18      	it	ne
 800f6f0:	2301      	movne	r3, #1
 800f6f2:	0692      	lsls	r2, r2, #26
 800f6f4:	d42d      	bmi.n	800f752 <_printf_common+0xbe>
 800f6f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f6fa:	4639      	mov	r1, r7
 800f6fc:	4630      	mov	r0, r6
 800f6fe:	47c0      	blx	r8
 800f700:	3001      	adds	r0, #1
 800f702:	d020      	beq.n	800f746 <_printf_common+0xb2>
 800f704:	6823      	ldr	r3, [r4, #0]
 800f706:	68e5      	ldr	r5, [r4, #12]
 800f708:	f8d9 2000 	ldr.w	r2, [r9]
 800f70c:	f003 0306 	and.w	r3, r3, #6
 800f710:	2b04      	cmp	r3, #4
 800f712:	bf08      	it	eq
 800f714:	1aad      	subeq	r5, r5, r2
 800f716:	68a3      	ldr	r3, [r4, #8]
 800f718:	6922      	ldr	r2, [r4, #16]
 800f71a:	bf0c      	ite	eq
 800f71c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f720:	2500      	movne	r5, #0
 800f722:	4293      	cmp	r3, r2
 800f724:	bfc4      	itt	gt
 800f726:	1a9b      	subgt	r3, r3, r2
 800f728:	18ed      	addgt	r5, r5, r3
 800f72a:	f04f 0900 	mov.w	r9, #0
 800f72e:	341a      	adds	r4, #26
 800f730:	454d      	cmp	r5, r9
 800f732:	d11a      	bne.n	800f76a <_printf_common+0xd6>
 800f734:	2000      	movs	r0, #0
 800f736:	e008      	b.n	800f74a <_printf_common+0xb6>
 800f738:	2301      	movs	r3, #1
 800f73a:	4652      	mov	r2, sl
 800f73c:	4639      	mov	r1, r7
 800f73e:	4630      	mov	r0, r6
 800f740:	47c0      	blx	r8
 800f742:	3001      	adds	r0, #1
 800f744:	d103      	bne.n	800f74e <_printf_common+0xba>
 800f746:	f04f 30ff 	mov.w	r0, #4294967295
 800f74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f74e:	3501      	adds	r5, #1
 800f750:	e7c3      	b.n	800f6da <_printf_common+0x46>
 800f752:	18e1      	adds	r1, r4, r3
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	2030      	movs	r0, #48	; 0x30
 800f758:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f75c:	4422      	add	r2, r4
 800f75e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f762:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f766:	3302      	adds	r3, #2
 800f768:	e7c5      	b.n	800f6f6 <_printf_common+0x62>
 800f76a:	2301      	movs	r3, #1
 800f76c:	4622      	mov	r2, r4
 800f76e:	4639      	mov	r1, r7
 800f770:	4630      	mov	r0, r6
 800f772:	47c0      	blx	r8
 800f774:	3001      	adds	r0, #1
 800f776:	d0e6      	beq.n	800f746 <_printf_common+0xb2>
 800f778:	f109 0901 	add.w	r9, r9, #1
 800f77c:	e7d8      	b.n	800f730 <_printf_common+0x9c>
	...

0800f780 <_printf_i>:
 800f780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f784:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f788:	460c      	mov	r4, r1
 800f78a:	7e09      	ldrb	r1, [r1, #24]
 800f78c:	b085      	sub	sp, #20
 800f78e:	296e      	cmp	r1, #110	; 0x6e
 800f790:	4617      	mov	r7, r2
 800f792:	4606      	mov	r6, r0
 800f794:	4698      	mov	r8, r3
 800f796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f798:	f000 80b3 	beq.w	800f902 <_printf_i+0x182>
 800f79c:	d822      	bhi.n	800f7e4 <_printf_i+0x64>
 800f79e:	2963      	cmp	r1, #99	; 0x63
 800f7a0:	d036      	beq.n	800f810 <_printf_i+0x90>
 800f7a2:	d80a      	bhi.n	800f7ba <_printf_i+0x3a>
 800f7a4:	2900      	cmp	r1, #0
 800f7a6:	f000 80b9 	beq.w	800f91c <_printf_i+0x19c>
 800f7aa:	2958      	cmp	r1, #88	; 0x58
 800f7ac:	f000 8083 	beq.w	800f8b6 <_printf_i+0x136>
 800f7b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f7b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f7b8:	e032      	b.n	800f820 <_printf_i+0xa0>
 800f7ba:	2964      	cmp	r1, #100	; 0x64
 800f7bc:	d001      	beq.n	800f7c2 <_printf_i+0x42>
 800f7be:	2969      	cmp	r1, #105	; 0x69
 800f7c0:	d1f6      	bne.n	800f7b0 <_printf_i+0x30>
 800f7c2:	6820      	ldr	r0, [r4, #0]
 800f7c4:	6813      	ldr	r3, [r2, #0]
 800f7c6:	0605      	lsls	r5, r0, #24
 800f7c8:	f103 0104 	add.w	r1, r3, #4
 800f7cc:	d52a      	bpl.n	800f824 <_printf_i+0xa4>
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	6011      	str	r1, [r2, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	da03      	bge.n	800f7de <_printf_i+0x5e>
 800f7d6:	222d      	movs	r2, #45	; 0x2d
 800f7d8:	425b      	negs	r3, r3
 800f7da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f7de:	486f      	ldr	r0, [pc, #444]	; (800f99c <_printf_i+0x21c>)
 800f7e0:	220a      	movs	r2, #10
 800f7e2:	e039      	b.n	800f858 <_printf_i+0xd8>
 800f7e4:	2973      	cmp	r1, #115	; 0x73
 800f7e6:	f000 809d 	beq.w	800f924 <_printf_i+0x1a4>
 800f7ea:	d808      	bhi.n	800f7fe <_printf_i+0x7e>
 800f7ec:	296f      	cmp	r1, #111	; 0x6f
 800f7ee:	d020      	beq.n	800f832 <_printf_i+0xb2>
 800f7f0:	2970      	cmp	r1, #112	; 0x70
 800f7f2:	d1dd      	bne.n	800f7b0 <_printf_i+0x30>
 800f7f4:	6823      	ldr	r3, [r4, #0]
 800f7f6:	f043 0320 	orr.w	r3, r3, #32
 800f7fa:	6023      	str	r3, [r4, #0]
 800f7fc:	e003      	b.n	800f806 <_printf_i+0x86>
 800f7fe:	2975      	cmp	r1, #117	; 0x75
 800f800:	d017      	beq.n	800f832 <_printf_i+0xb2>
 800f802:	2978      	cmp	r1, #120	; 0x78
 800f804:	d1d4      	bne.n	800f7b0 <_printf_i+0x30>
 800f806:	2378      	movs	r3, #120	; 0x78
 800f808:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f80c:	4864      	ldr	r0, [pc, #400]	; (800f9a0 <_printf_i+0x220>)
 800f80e:	e055      	b.n	800f8bc <_printf_i+0x13c>
 800f810:	6813      	ldr	r3, [r2, #0]
 800f812:	1d19      	adds	r1, r3, #4
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	6011      	str	r1, [r2, #0]
 800f818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f81c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f820:	2301      	movs	r3, #1
 800f822:	e08c      	b.n	800f93e <_printf_i+0x1be>
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	6011      	str	r1, [r2, #0]
 800f828:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f82c:	bf18      	it	ne
 800f82e:	b21b      	sxthne	r3, r3
 800f830:	e7cf      	b.n	800f7d2 <_printf_i+0x52>
 800f832:	6813      	ldr	r3, [r2, #0]
 800f834:	6825      	ldr	r5, [r4, #0]
 800f836:	1d18      	adds	r0, r3, #4
 800f838:	6010      	str	r0, [r2, #0]
 800f83a:	0628      	lsls	r0, r5, #24
 800f83c:	d501      	bpl.n	800f842 <_printf_i+0xc2>
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	e002      	b.n	800f848 <_printf_i+0xc8>
 800f842:	0668      	lsls	r0, r5, #25
 800f844:	d5fb      	bpl.n	800f83e <_printf_i+0xbe>
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	4854      	ldr	r0, [pc, #336]	; (800f99c <_printf_i+0x21c>)
 800f84a:	296f      	cmp	r1, #111	; 0x6f
 800f84c:	bf14      	ite	ne
 800f84e:	220a      	movne	r2, #10
 800f850:	2208      	moveq	r2, #8
 800f852:	2100      	movs	r1, #0
 800f854:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f858:	6865      	ldr	r5, [r4, #4]
 800f85a:	60a5      	str	r5, [r4, #8]
 800f85c:	2d00      	cmp	r5, #0
 800f85e:	f2c0 8095 	blt.w	800f98c <_printf_i+0x20c>
 800f862:	6821      	ldr	r1, [r4, #0]
 800f864:	f021 0104 	bic.w	r1, r1, #4
 800f868:	6021      	str	r1, [r4, #0]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d13d      	bne.n	800f8ea <_printf_i+0x16a>
 800f86e:	2d00      	cmp	r5, #0
 800f870:	f040 808e 	bne.w	800f990 <_printf_i+0x210>
 800f874:	4665      	mov	r5, ip
 800f876:	2a08      	cmp	r2, #8
 800f878:	d10b      	bne.n	800f892 <_printf_i+0x112>
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	07db      	lsls	r3, r3, #31
 800f87e:	d508      	bpl.n	800f892 <_printf_i+0x112>
 800f880:	6923      	ldr	r3, [r4, #16]
 800f882:	6862      	ldr	r2, [r4, #4]
 800f884:	429a      	cmp	r2, r3
 800f886:	bfde      	ittt	le
 800f888:	2330      	movle	r3, #48	; 0x30
 800f88a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f88e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f892:	ebac 0305 	sub.w	r3, ip, r5
 800f896:	6123      	str	r3, [r4, #16]
 800f898:	f8cd 8000 	str.w	r8, [sp]
 800f89c:	463b      	mov	r3, r7
 800f89e:	aa03      	add	r2, sp, #12
 800f8a0:	4621      	mov	r1, r4
 800f8a2:	4630      	mov	r0, r6
 800f8a4:	f7ff fef6 	bl	800f694 <_printf_common>
 800f8a8:	3001      	adds	r0, #1
 800f8aa:	d14d      	bne.n	800f948 <_printf_i+0x1c8>
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f8b0:	b005      	add	sp, #20
 800f8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f8b6:	4839      	ldr	r0, [pc, #228]	; (800f99c <_printf_i+0x21c>)
 800f8b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f8bc:	6813      	ldr	r3, [r2, #0]
 800f8be:	6821      	ldr	r1, [r4, #0]
 800f8c0:	1d1d      	adds	r5, r3, #4
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	6015      	str	r5, [r2, #0]
 800f8c6:	060a      	lsls	r2, r1, #24
 800f8c8:	d50b      	bpl.n	800f8e2 <_printf_i+0x162>
 800f8ca:	07ca      	lsls	r2, r1, #31
 800f8cc:	bf44      	itt	mi
 800f8ce:	f041 0120 	orrmi.w	r1, r1, #32
 800f8d2:	6021      	strmi	r1, [r4, #0]
 800f8d4:	b91b      	cbnz	r3, 800f8de <_printf_i+0x15e>
 800f8d6:	6822      	ldr	r2, [r4, #0]
 800f8d8:	f022 0220 	bic.w	r2, r2, #32
 800f8dc:	6022      	str	r2, [r4, #0]
 800f8de:	2210      	movs	r2, #16
 800f8e0:	e7b7      	b.n	800f852 <_printf_i+0xd2>
 800f8e2:	064d      	lsls	r5, r1, #25
 800f8e4:	bf48      	it	mi
 800f8e6:	b29b      	uxthmi	r3, r3
 800f8e8:	e7ef      	b.n	800f8ca <_printf_i+0x14a>
 800f8ea:	4665      	mov	r5, ip
 800f8ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800f8f0:	fb02 3311 	mls	r3, r2, r1, r3
 800f8f4:	5cc3      	ldrb	r3, [r0, r3]
 800f8f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f8fa:	460b      	mov	r3, r1
 800f8fc:	2900      	cmp	r1, #0
 800f8fe:	d1f5      	bne.n	800f8ec <_printf_i+0x16c>
 800f900:	e7b9      	b.n	800f876 <_printf_i+0xf6>
 800f902:	6813      	ldr	r3, [r2, #0]
 800f904:	6825      	ldr	r5, [r4, #0]
 800f906:	6961      	ldr	r1, [r4, #20]
 800f908:	1d18      	adds	r0, r3, #4
 800f90a:	6010      	str	r0, [r2, #0]
 800f90c:	0628      	lsls	r0, r5, #24
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	d501      	bpl.n	800f916 <_printf_i+0x196>
 800f912:	6019      	str	r1, [r3, #0]
 800f914:	e002      	b.n	800f91c <_printf_i+0x19c>
 800f916:	066a      	lsls	r2, r5, #25
 800f918:	d5fb      	bpl.n	800f912 <_printf_i+0x192>
 800f91a:	8019      	strh	r1, [r3, #0]
 800f91c:	2300      	movs	r3, #0
 800f91e:	6123      	str	r3, [r4, #16]
 800f920:	4665      	mov	r5, ip
 800f922:	e7b9      	b.n	800f898 <_printf_i+0x118>
 800f924:	6813      	ldr	r3, [r2, #0]
 800f926:	1d19      	adds	r1, r3, #4
 800f928:	6011      	str	r1, [r2, #0]
 800f92a:	681d      	ldr	r5, [r3, #0]
 800f92c:	6862      	ldr	r2, [r4, #4]
 800f92e:	2100      	movs	r1, #0
 800f930:	4628      	mov	r0, r5
 800f932:	f7f0 fc5d 	bl	80001f0 <memchr>
 800f936:	b108      	cbz	r0, 800f93c <_printf_i+0x1bc>
 800f938:	1b40      	subs	r0, r0, r5
 800f93a:	6060      	str	r0, [r4, #4]
 800f93c:	6863      	ldr	r3, [r4, #4]
 800f93e:	6123      	str	r3, [r4, #16]
 800f940:	2300      	movs	r3, #0
 800f942:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f946:	e7a7      	b.n	800f898 <_printf_i+0x118>
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	462a      	mov	r2, r5
 800f94c:	4639      	mov	r1, r7
 800f94e:	4630      	mov	r0, r6
 800f950:	47c0      	blx	r8
 800f952:	3001      	adds	r0, #1
 800f954:	d0aa      	beq.n	800f8ac <_printf_i+0x12c>
 800f956:	6823      	ldr	r3, [r4, #0]
 800f958:	079b      	lsls	r3, r3, #30
 800f95a:	d413      	bmi.n	800f984 <_printf_i+0x204>
 800f95c:	68e0      	ldr	r0, [r4, #12]
 800f95e:	9b03      	ldr	r3, [sp, #12]
 800f960:	4298      	cmp	r0, r3
 800f962:	bfb8      	it	lt
 800f964:	4618      	movlt	r0, r3
 800f966:	e7a3      	b.n	800f8b0 <_printf_i+0x130>
 800f968:	2301      	movs	r3, #1
 800f96a:	464a      	mov	r2, r9
 800f96c:	4639      	mov	r1, r7
 800f96e:	4630      	mov	r0, r6
 800f970:	47c0      	blx	r8
 800f972:	3001      	adds	r0, #1
 800f974:	d09a      	beq.n	800f8ac <_printf_i+0x12c>
 800f976:	3501      	adds	r5, #1
 800f978:	68e3      	ldr	r3, [r4, #12]
 800f97a:	9a03      	ldr	r2, [sp, #12]
 800f97c:	1a9b      	subs	r3, r3, r2
 800f97e:	42ab      	cmp	r3, r5
 800f980:	dcf2      	bgt.n	800f968 <_printf_i+0x1e8>
 800f982:	e7eb      	b.n	800f95c <_printf_i+0x1dc>
 800f984:	2500      	movs	r5, #0
 800f986:	f104 0919 	add.w	r9, r4, #25
 800f98a:	e7f5      	b.n	800f978 <_printf_i+0x1f8>
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1ac      	bne.n	800f8ea <_printf_i+0x16a>
 800f990:	7803      	ldrb	r3, [r0, #0]
 800f992:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f996:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f99a:	e76c      	b.n	800f876 <_printf_i+0xf6>
 800f99c:	0800fc61 	.word	0x0800fc61
 800f9a0:	0800fc72 	.word	0x0800fc72

0800f9a4 <memmove>:
 800f9a4:	4288      	cmp	r0, r1
 800f9a6:	b510      	push	{r4, lr}
 800f9a8:	eb01 0302 	add.w	r3, r1, r2
 800f9ac:	d807      	bhi.n	800f9be <memmove+0x1a>
 800f9ae:	1e42      	subs	r2, r0, #1
 800f9b0:	4299      	cmp	r1, r3
 800f9b2:	d00a      	beq.n	800f9ca <memmove+0x26>
 800f9b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f9bc:	e7f8      	b.n	800f9b0 <memmove+0xc>
 800f9be:	4283      	cmp	r3, r0
 800f9c0:	d9f5      	bls.n	800f9ae <memmove+0xa>
 800f9c2:	1881      	adds	r1, r0, r2
 800f9c4:	1ad2      	subs	r2, r2, r3
 800f9c6:	42d3      	cmn	r3, r2
 800f9c8:	d100      	bne.n	800f9cc <memmove+0x28>
 800f9ca:	bd10      	pop	{r4, pc}
 800f9cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f9d4:	e7f7      	b.n	800f9c6 <memmove+0x22>

0800f9d6 <_realloc_r>:
 800f9d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d8:	4607      	mov	r7, r0
 800f9da:	4614      	mov	r4, r2
 800f9dc:	460e      	mov	r6, r1
 800f9de:	b921      	cbnz	r1, 800f9ea <_realloc_r+0x14>
 800f9e0:	4611      	mov	r1, r2
 800f9e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f9e6:	f7ff bc77 	b.w	800f2d8 <_malloc_r>
 800f9ea:	b922      	cbnz	r2, 800f9f6 <_realloc_r+0x20>
 800f9ec:	f7ff fc26 	bl	800f23c <_free_r>
 800f9f0:	4625      	mov	r5, r4
 800f9f2:	4628      	mov	r0, r5
 800f9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f9f6:	f000 f814 	bl	800fa22 <_malloc_usable_size_r>
 800f9fa:	42a0      	cmp	r0, r4
 800f9fc:	d20f      	bcs.n	800fa1e <_realloc_r+0x48>
 800f9fe:	4621      	mov	r1, r4
 800fa00:	4638      	mov	r0, r7
 800fa02:	f7ff fc69 	bl	800f2d8 <_malloc_r>
 800fa06:	4605      	mov	r5, r0
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	d0f2      	beq.n	800f9f2 <_realloc_r+0x1c>
 800fa0c:	4631      	mov	r1, r6
 800fa0e:	4622      	mov	r2, r4
 800fa10:	f7ff fc00 	bl	800f214 <memcpy>
 800fa14:	4631      	mov	r1, r6
 800fa16:	4638      	mov	r0, r7
 800fa18:	f7ff fc10 	bl	800f23c <_free_r>
 800fa1c:	e7e9      	b.n	800f9f2 <_realloc_r+0x1c>
 800fa1e:	4635      	mov	r5, r6
 800fa20:	e7e7      	b.n	800f9f2 <_realloc_r+0x1c>

0800fa22 <_malloc_usable_size_r>:
 800fa22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa26:	1f18      	subs	r0, r3, #4
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	bfbc      	itt	lt
 800fa2c:	580b      	ldrlt	r3, [r1, r0]
 800fa2e:	18c0      	addlt	r0, r0, r3
 800fa30:	4770      	bx	lr
	...

0800fa34 <_init>:
 800fa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa36:	bf00      	nop
 800fa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa3a:	bc08      	pop	{r3}
 800fa3c:	469e      	mov	lr, r3
 800fa3e:	4770      	bx	lr

0800fa40 <_fini>:
 800fa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa42:	bf00      	nop
 800fa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa46:	bc08      	pop	{r3}
 800fa48:	469e      	mov	lr, r3
 800fa4a:	4770      	bx	lr
