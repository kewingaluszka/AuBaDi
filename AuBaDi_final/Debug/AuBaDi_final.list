
AuBaDi_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800f034  0800f034  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f200  0800f200  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800f200  0800f200  0001f200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f208  0800f208  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f208  0800f208  0001f208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f20c  0800f20c  0001f20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800f210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002028  20000090  0800f2a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004000  200020b8  0800f2a0  000220b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c96b  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005758  00000000  00000000  0004ca2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a50  00000000  00000000  00052188  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001818  00000000  00000000  00053bd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d728  00000000  00000000  000553f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c042  00000000  00000000  00072b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000961df  00000000  00000000  0008eb5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124d39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f94  00000000  00000000  00124db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f01c 	.word	0x0800f01c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800f01c 	.word	0x0800f01c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af02      	add	r7, sp, #8
 8000596:	4603      	mov	r3, r0
 8000598:	6039      	str	r1, [r7, #0]
 800059a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80005a0:	683b      	ldr	r3, [r7, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80005a6:	f107 020c 	add.w	r2, r7, #12
 80005aa:	2364      	movs	r3, #100	; 0x64
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	2302      	movs	r3, #2
 80005b0:	2194      	movs	r1, #148	; 0x94
 80005b2:	4803      	ldr	r0, [pc, #12]	; (80005c0 <write_register+0x30>)
 80005b4:	f004 f93a 	bl	800482c <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80005b8:	bf00      	nop
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	200000ac 	.word	0x200000ac

080005c4 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	2364      	movs	r3, #100	; 0x64
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	2301      	movs	r3, #1
 80005de:	2194      	movs	r1, #148	; 0x94
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <read_register+0x3c>)
 80005e2:	f004 f923 	bl	800482c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2301      	movs	r3, #1
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	2194      	movs	r1, #148	; 0x94
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <read_register+0x3c>)
 80005f2:	f004 fa19 	bl	8004a28 <HAL_I2C_Master_Receive>
}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	200000ac 	.word	0x200000ac

08000604 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000604:	b084      	sub	sp, #16
 8000606:	b580      	push	{r7, lr}
 8000608:	b082      	sub	sp, #8
 800060a:	af00      	add	r7, sp, #0
 800060c:	f107 0c10 	add.w	ip, r7, #16
 8000610:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000614:	4b7b      	ldr	r3, [pc, #492]	; (8000804 <CS43_Init+0x200>)
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800061c:	4b79      	ldr	r3, [pc, #484]	; (8000804 <CS43_Init+0x200>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	69da      	ldr	r2, [r3, #28]
 8000622:	4b78      	ldr	r3, [pc, #480]	; (8000804 <CS43_Init+0x200>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800062a:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2110      	movs	r1, #16
 8000630:	4875      	ldr	r0, [pc, #468]	; (8000808 <CS43_Init+0x204>)
 8000632:	f002 fa95 	bl	8002b60 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8000636:	4b75      	ldr	r3, [pc, #468]	; (800080c <CS43_Init+0x208>)
 8000638:	4618      	mov	r0, r3
 800063a:	f107 0110 	add.w	r1, r7, #16
 800063e:	2354      	movs	r3, #84	; 0x54
 8000640:	461a      	mov	r2, r3
 8000642:	f00e f8db 	bl	800e7fc <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 8000646:	2301      	movs	r3, #1
 8000648:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4619      	mov	r1, r3
 800064e:	2002      	movs	r0, #2
 8000650:	f7ff ff9e 	bl	8000590 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000654:	2380      	movs	r3, #128	; 0x80
 8000656:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000658:	797b      	ldrb	r3, [r7, #5]
 800065a:	f043 0320 	orr.w	r3, r3, #32
 800065e:	b2db      	uxtb	r3, r3
 8000660:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000662:	797b      	ldrb	r3, [r7, #5]
 8000664:	f043 030c 	orr.w	r3, r3, #12
 8000668:	b2db      	uxtb	r3, r3
 800066a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 800066c:	797b      	ldrb	r3, [r7, #5]
 800066e:	f043 0303 	orr.w	r3, r3, #3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	3301      	adds	r3, #1
 800067a:	4619      	mov	r1, r3
 800067c:	2004      	movs	r0, #4
 800067e:	f7ff ff87 	bl	8000590 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	3301      	adds	r3, #1
 800068a:	4619      	mov	r1, r3
 800068c:	2005      	movs	r0, #5
 800068e:	f7ff ff7f 	bl	8000590 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	4619      	mov	r1, r3
 8000696:	2006      	movs	r0, #6
 8000698:	f7ff ff94 	bl	80005c4 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 800069c:	797b      	ldrb	r3, [r7, #5]
 800069e:	f003 0320 	and.w	r3, r3, #32
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80006a6:	797b      	ldrb	r3, [r7, #5]
 80006a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80006ba:	797b      	ldrb	r3, [r7, #5]
 80006bc:	f023 0310 	bic.w	r3, r3, #16
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80006c4:	797b      	ldrb	r3, [r7, #5]
 80006c6:	f023 0304 	bic.w	r3, r3, #4
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 80006ce:	797b      	ldrb	r3, [r7, #5]
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 80006d8:	797b      	ldrb	r3, [r7, #5]
 80006da:	f043 0303 	orr.w	r3, r3, #3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	2006      	movs	r0, #6
 80006ea:	f7ff ff51 	bl	8000590 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	2008      	movs	r0, #8
 80006f6:	f7ff ff65 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80006fa:	797b      	ldrb	r3, [r7, #5]
 80006fc:	f023 030f 	bic.w	r3, r3, #15
 8000700:	b2db      	uxtb	r3, r3
 8000702:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000704:	797b      	ldrb	r3, [r7, #5]
 8000706:	f043 0301 	orr.w	r3, r3, #1
 800070a:	b2db      	uxtb	r3, r3
 800070c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2008      	movs	r0, #8
 8000716:	f7ff ff3b 	bl	8000590 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	2009      	movs	r0, #9
 8000722:	f7ff ff4f 	bl	80005c4 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000726:	797b      	ldrb	r3, [r7, #5]
 8000728:	f023 030f 	bic.w	r3, r3, #15
 800072c:	b2db      	uxtb	r3, r3
 800072e:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000730:	797b      	ldrb	r3, [r7, #5]
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	3301      	adds	r3, #1
 800073e:	4619      	mov	r1, r3
 8000740:	2009      	movs	r0, #9
 8000742:	f7ff ff25 	bl	8000590 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	3301      	adds	r3, #1
 800074a:	4619      	mov	r1, r3
 800074c:	200e      	movs	r0, #14
 800074e:	f7ff ff39 	bl	80005c4 <read_register>
	if(outputMode == MODE_ANALOG)
 8000752:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000756:	2b01      	cmp	r3, #1
 8000758:	d119      	bne.n	800078e <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800075a:	797b      	ldrb	r3, [r7, #5]
 800075c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000764:	797b      	ldrb	r3, [r7, #5]
 8000766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076a:	b2db      	uxtb	r3, r3
 800076c:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 800076e:	797b      	ldrb	r3, [r7, #5]
 8000770:	f023 0320 	bic.w	r3, r3, #32
 8000774:	b2db      	uxtb	r3, r3
 8000776:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	f023 0310 	bic.w	r3, r3, #16
 800077e:	b2db      	uxtb	r3, r3
 8000780:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8000782:	797b      	ldrb	r3, [r7, #5]
 8000784:	f023 0308 	bic.w	r3, r3, #8
 8000788:	b2db      	uxtb	r3, r3
 800078a:	717b      	strb	r3, [r7, #5]
 800078c:	e005      	b.n	800079a <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 800078e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000792:	2b00      	cmp	r3, #0
 8000794:	d101      	bne.n	800079a <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 8000796:	2302      	movs	r3, #2
 8000798:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	3301      	adds	r3, #1
 800079e:	4619      	mov	r1, r3
 80007a0:	200e      	movs	r0, #14
 80007a2:	f7ff fef5 	bl	8000590 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	3301      	adds	r3, #1
 80007aa:	4619      	mov	r1, r3
 80007ac:	200f      	movs	r0, #15
 80007ae:	f7ff ff09 	bl	80005c4 <read_register>
	iData[1] = 0x00;
 80007b2:	2300      	movs	r3, #0
 80007b4:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	3301      	adds	r3, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	200f      	movs	r0, #15
 80007be:	f7ff fee7 	bl	8000590 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	3301      	adds	r3, #1
 80007ca:	4619      	mov	r1, r3
 80007cc:	2014      	movs	r0, #20
 80007ce:	f7ff fedf 	bl	8000590 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	3301      	adds	r3, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	2015      	movs	r0, #21
 80007da:	f7ff fed9 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	3301      	adds	r3, #1
 80007e2:	4619      	mov	r1, r3
 80007e4:	201a      	movs	r0, #26
 80007e6:	f7ff fed3 	bl	8000590 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	3301      	adds	r3, #1
 80007ee:	4619      	mov	r1, r3
 80007f0:	201b      	movs	r0, #27
 80007f2:	f7ff fecd 	bl	8000590 <write_register>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000800:	b004      	add	sp, #16
 8000802:	4770      	bx	lr
 8000804:	20001564 	.word	0x20001564
 8000808:	40020c00 	.word	0x40020c00
 800080c:	200000ac 	.word	0x200000ac

08000810 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2b03      	cmp	r3, #3
 800081e:	d82b      	bhi.n	8000878 <CS43_Enable_RightLeft+0x68>
 8000820:	a201      	add	r2, pc, #4	; (adr r2, 8000828 <CS43_Enable_RightLeft+0x18>)
 8000822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000826:	bf00      	nop
 8000828:	08000839 	.word	0x08000839
 800082c:	08000849 	.word	0x08000849
 8000830:	08000859 	.word	0x08000859
 8000834:	08000869 	.word	0x08000869
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000838:	23c0      	movs	r3, #192	; 0xc0
 800083a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800083c:	7b7b      	ldrb	r3, [r7, #13]
 800083e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000842:	b2db      	uxtb	r3, r3
 8000844:	737b      	strb	r3, [r7, #13]
			break;
 8000846:	e018      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000848:	2380      	movs	r3, #128	; 0x80
 800084a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000852:	b2db      	uxtb	r3, r3
 8000854:	737b      	strb	r3, [r7, #13]
			break;
 8000856:	e010      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000858:	23c0      	movs	r3, #192	; 0xc0
 800085a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800085c:	7b7b      	ldrb	r3, [r7, #13]
 800085e:	f043 0320 	orr.w	r3, r3, #32
 8000862:	b2db      	uxtb	r3, r3
 8000864:	737b      	strb	r3, [r7, #13]
			break;
 8000866:	e008      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000868:	2380      	movs	r3, #128	; 0x80
 800086a:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800086c:	7b7b      	ldrb	r3, [r7, #13]
 800086e:	f043 0320 	orr.w	r3, r3, #32
 8000872:	b2db      	uxtb	r3, r3
 8000874:	737b      	strb	r3, [r7, #13]
			break;
 8000876:	e000      	b.n	800087a <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 8000878:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 800087a:	7b7b      	ldrb	r3, [r7, #13]
 800087c:	f043 030c 	orr.w	r3, r3, #12
 8000880:	b2db      	uxtb	r3, r3
 8000882:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 8000884:	7b7b      	ldrb	r3, [r7, #13]
 8000886:	f043 0303 	orr.w	r3, r3, #3
 800088a:	b2db      	uxtb	r3, r3
 800088c:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	3301      	adds	r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	2004      	movs	r0, #4
 8000898:	f7ff fe7a 	bl	8000590 <write_register>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	3319      	adds	r3, #25
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	3301      	adds	r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	2020      	movs	r0, #32
 80008c0:	f7ff fe66 	bl	8000590 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	3301      	adds	r3, #1
 80008ca:	4619      	mov	r1, r3
 80008cc:	2021      	movs	r0, #33	; 0x21
 80008ce:	f7ff fe5f 	bl	8000590 <write_register>
}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b084      	sub	sp, #16
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d019      	beq.n	800091e <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 80008ea:	23ff      	movs	r3, #255	; 0xff
 80008ec:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2004      	movs	r0, #4
 80008f8:	f7ff fe4a 	bl	8000590 <write_register>
    iData[1] = 0x01;
 80008fc:	2301      	movs	r3, #1
 80008fe:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000900:	f107 030c 	add.w	r3, r7, #12
 8000904:	3301      	adds	r3, #1
 8000906:	4619      	mov	r1, r3
 8000908:	2022      	movs	r0, #34	; 0x22
 800090a:	f7ff fe41 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	3301      	adds	r3, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2023      	movs	r0, #35	; 0x23
 8000918:	f7ff fe3a 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 800091c:	e018      	b.n	8000950 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 800091e:	2300      	movs	r3, #0
 8000920:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	3301      	adds	r3, #1
 8000928:	4619      	mov	r1, r3
 800092a:	2022      	movs	r0, #34	; 0x22
 800092c:	f7ff fe30 	bl	8000590 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	3301      	adds	r3, #1
 8000936:	4619      	mov	r1, r3
 8000938:	2023      	movs	r0, #35	; 0x23
 800093a:	f7ff fe29 	bl	8000590 <write_register>
    iData[1] = 0xAF;
 800093e:	23af      	movs	r3, #175	; 0xaf
 8000940:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	3301      	adds	r3, #1
 8000948:	4619      	mov	r1, r3
 800094a:	2004      	movs	r0, #4
 800094c:	f7ff fe20 	bl	8000590 <write_register>
}
 8000950:	bf00      	nop
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffbb 	bl	80008da <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000964:	2399      	movs	r3, #153	; 0x99
 8000966:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	3301      	adds	r3, #1
 800096c:	4619      	mov	r1, r3
 800096e:	2000      	movs	r0, #0
 8000970:	f7ff fe0e 	bl	8000590 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 8000974:	2380      	movs	r3, #128	; 0x80
 8000976:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	3301      	adds	r3, #1
 800097c:	4619      	mov	r1, r3
 800097e:	2047      	movs	r0, #71	; 0x47
 8000980:	f7ff fe06 	bl	8000590 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	3301      	adds	r3, #1
 8000988:	4619      	mov	r1, r3
 800098a:	2032      	movs	r0, #50	; 0x32
 800098c:	f7ff fe1a 	bl	80005c4 <read_register>
	iData[1] |= 0x80;
 8000990:	797b      	ldrb	r3, [r7, #5]
 8000992:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000996:	b2db      	uxtb	r3, r3
 8000998:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	3301      	adds	r3, #1
 800099e:	4619      	mov	r1, r3
 80009a0:	2032      	movs	r0, #50	; 0x32
 80009a2:	f7ff fdf5 	bl	8000590 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	3301      	adds	r3, #1
 80009aa:	4619      	mov	r1, r3
 80009ac:	2032      	movs	r0, #50	; 0x32
 80009ae:	f7ff fe09 	bl	80005c4 <read_register>
	iData[1] &= ~(0x80);
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80009bc:	1d3b      	adds	r3, r7, #4
 80009be:	3301      	adds	r3, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	2032      	movs	r0, #50	; 0x32
 80009c4:	f7ff fde4 	bl	8000590 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80009c8:	2300      	movs	r3, #0
 80009ca:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	3301      	adds	r3, #1
 80009d0:	4619      	mov	r1, r3
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff fddc 	bl	8000590 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 80009d8:	239e      	movs	r3, #158	; 0x9e
 80009da:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 80009dc:	1d3b      	adds	r3, r7, #4
 80009de:	3301      	adds	r3, #1
 80009e0:	4619      	mov	r1, r3
 80009e2:	2002      	movs	r0, #2
 80009e4:	f7ff fdd4 	bl	8000590 <write_register>
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009fe:	23ff      	movs	r3, #255	; 0xff
 8000a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 8000a04:	2300      	movs	r3, #0
 8000a06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a0a:	e010      	b.n	8000a2e <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8000a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <audioI2S_pllClockConfig+0xa4>)
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	687a      	ldr	r2, [r7, #4]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d103      	bne.n	8000a24 <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8000a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a20:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 8000a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a28:	3301      	adds	r3, #1
 8000a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	d9ea      	bls.n	8000a0c <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8000a36:	f107 030c 	add.w	r3, r7, #12
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f006 f944 	bl	8006cc8 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000a40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a44:	f003 0307 	and.w	r3, r3, #7
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d113      	bne.n	8000a74 <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000a50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a54:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <audioI2S_pllClockConfig+0xa8>)
 8000a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5a:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 8000a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000a60:	4a0e      	ldr	r2, [pc, #56]	; (8000a9c <audioI2S_pllClockConfig+0xac>)
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 f83b 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 8000a72:	e00b      	b.n	8000a8c <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a74:	2301      	movs	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 8000a78:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a7c:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8000a82:	f107 030c 	add.w	r3, r7, #12
 8000a86:	4618      	mov	r0, r3
 8000a88:	f006 f82e 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
}
 8000a8c:	bf00      	nop
 8000a8e:	3728      	adds	r7, #40	; 0x28
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	0800f0b8 	.word	0x0800f0b8
 8000a98:	0800f0d8 	.word	0x0800f0d8
 8000a9c:	0800f0f8 	.word	0x0800f0f8

08000aa0 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a1d      	ldr	r2, [pc, #116]	; (8000b24 <I2S3_freqUpdate+0x84>)
 8000aae:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000ac2:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000adc:	4b10      	ldr	r3, [pc, #64]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aec:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af6:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000b00:	4b07      	ldr	r3, [pc, #28]	; (8000b20 <I2S3_freqUpdate+0x80>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f004 fe0f 	bl	8005728 <HAL_I2S_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000b10:	2300      	movs	r3, #0
 8000b12:	e000      	b.n	8000b16 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000b14:	2301      	movs	r3, #1
  }
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20000100 	.word	0x20000100
 8000b24:	40003c00 	.word	0x40003c00

08000b28 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <audioI2S_setHandle+0x1c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	6013      	str	r3, [r2, #0]
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000100 	.word	0x20000100

08000b48 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff4d 	bl	80009f0 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ffa2 	bl	8000aa0 <I2S3_freqUpdate>
  return true;
 8000b5c:	2301      	movs	r3, #1
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000b72:	f7ff fef1 	bl	8000958 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <audioI2S_play+0x38>)
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000b80:	d203      	bcs.n	8000b8a <audioI2S_play+0x22>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	085b      	lsrs	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	e001      	b.n	8000b8e <audioI2S_play+0x26>
 8000b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b8e:	461a      	mov	r2, r3
 8000b90:	6879      	ldr	r1, [r7, #4]
 8000b92:	f004 ff09 	bl	80059a8 <HAL_I2S_Transmit_DMA>
  return true;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000100 	.word	0x20000100

08000ba4 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_I2S_TxCpltCallback+0x20>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d101      	bne.n	8000bba <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000bb6:	f001 f8ef 	bl	8001d98 <audioI2S_fullTransfer_Callback>
  }
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40003c00 	.word	0x40003c00

08000bc8 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d101      	bne.n	8000bde <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000bda:	f001 f8d1 	bl	8001d80 <audioI2S_halfTransfer_Callback>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40003c00 	.word	0x40003c00

08000bec <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af02      	add	r7, sp, #8
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	011b      	lsls	r3, r3, #4
 8000bfa:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f023 030f 	bic.w	r3, r3, #15
 8000c02:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000c04:	7bbb      	ldrb	r3, [r7, #14]
 8000c06:	f043 030c 	orr.w	r3, r3, #12
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	723b      	strb	r3, [r7, #8]
 8000c0e:	7bbb      	ldrb	r3, [r7, #14]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	727b      	strb	r3, [r7, #9]
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	f043 030c 	orr.w	r3, r3, #12
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	72bb      	strb	r3, [r7, #10]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <lcd16x2_i2c_sendCommand+0x60>)
 8000c2e:	6818      	ldr	r0, [r3, #0]
 8000c30:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <lcd16x2_i2c_sendCommand+0x64>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b299      	uxth	r1, r3
 8000c36:	f107 0208 	add.w	r2, r7, #8
 8000c3a:	23c8      	movs	r3, #200	; 0xc8
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2304      	movs	r3, #4
 8000c40:	f003 fdf4 	bl	800482c <HAL_I2C_Master_Transmit>
}
 8000c44:	bf00      	nop
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000104 	.word	0x20000104
 8000c50:	20000108 	.word	0x20000108

08000c54 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af02      	add	r7, sp, #8
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	f023 030f 	bic.w	r3, r3, #15
 8000c6a:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000c6c:	7bbb      	ldrb	r3, [r7, #14]
 8000c6e:	f043 030d 	orr.w	r3, r3, #13
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	723b      	strb	r3, [r7, #8]
 8000c76:	7bbb      	ldrb	r3, [r7, #14]
 8000c78:	f043 0309 	orr.w	r3, r3, #9
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	727b      	strb	r3, [r7, #9]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	f043 030d 	orr.w	r3, r3, #13
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	72bb      	strb	r3, [r7, #10]
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	f043 0309 	orr.w	r3, r3, #9
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000c94:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <lcd16x2_i2c_sendData+0x60>)
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <lcd16x2_i2c_sendData+0x64>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	f107 0208 	add.w	r2, r7, #8
 8000ca2:	23c8      	movs	r3, #200	; 0xc8
 8000ca4:	9300      	str	r3, [sp, #0]
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	f003 fdc0 	bl	800482c <HAL_I2C_Master_Transmit>
}
 8000cac:	bf00      	nop
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000104 	.word	0x20000104
 8000cb8:	20000108 	.word	0x20000108

08000cbc <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000cc4:	2032      	movs	r0, #50	; 0x32
 8000cc6:	f001 f90f 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000cca:	4a30      	ldr	r2, [pc, #192]	; (8000d8c <lcd16x2_i2c_init+0xd0>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000cd0:	4b2e      	ldr	r3, [pc, #184]	; (8000d8c <lcd16x2_i2c_init+0xd0>)
 8000cd2:	6818      	ldr	r0, [r3, #0]
 8000cd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd8:	2205      	movs	r2, #5
 8000cda:	214e      	movs	r1, #78	; 0x4e
 8000cdc:	f004 f8ca 	bl	8004e74 <HAL_I2C_IsDeviceReady>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d010      	beq.n	8000d08 <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <lcd16x2_i2c_init+0xd0>)
 8000ce8:	6818      	ldr	r0, [r3, #0]
 8000cea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cee:	2205      	movs	r2, #5
 8000cf0:	217e      	movs	r1, #126	; 0x7e
 8000cf2:	f004 f8bf 	bl	8004e74 <HAL_I2C_IsDeviceReady>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	e040      	b.n	8000d82 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000d00:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <lcd16x2_i2c_init+0xd4>)
 8000d02:	227e      	movs	r2, #126	; 0x7e
 8000d04:	701a      	strb	r2, [r3, #0]
 8000d06:	e002      	b.n	8000d0e <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000d08:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <lcd16x2_i2c_init+0xd4>)
 8000d0a:	224e      	movs	r2, #78	; 0x4e
 8000d0c:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000d0e:	202d      	movs	r0, #45	; 0x2d
 8000d10:	f001 f8ea 	bl	8001ee8 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000d14:	2030      	movs	r0, #48	; 0x30
 8000d16:	f7ff ff69 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f001 f8e4 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d20:	2030      	movs	r0, #48	; 0x30
 8000d22:	f7ff ff63 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d26:	2001      	movs	r0, #1
 8000d28:	f001 f8de 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000d2c:	2030      	movs	r0, #48	; 0x30
 8000d2e:	f7ff ff5d 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d32:	2008      	movs	r0, #8
 8000d34:	f001 f8d8 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000d38:	2020      	movs	r0, #32
 8000d3a:	f7ff ff57 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000d3e:	2008      	movs	r0, #8
 8000d40:	f001 f8d2 	bl	8001ee8 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000d44:	2028      	movs	r0, #40	; 0x28
 8000d46:	f7ff ff51 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f001 f8cc 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000d50:	2008      	movs	r0, #8
 8000d52:	f7ff ff4b 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d56:	2001      	movs	r0, #1
 8000d58:	f001 f8c6 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff ff45 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000d62:	2003      	movs	r0, #3
 8000d64:	f001 f8c0 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000d68:	2006      	movs	r0, #6
 8000d6a:	f7ff ff3f 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f001 f8ba 	bl	8001ee8 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000d74:	200c      	movs	r0, #12
 8000d76:	f7ff ff39 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f001 f8b4 	bl	8001ee8 <HAL_Delay>

  return true;
 8000d80:	2301      	movs	r3, #1
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000104 	.word	0x20000104
 8000d90:	20000108 	.word	0x20000108

08000d94 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d108      	bne.n	8000dc4 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000db8:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff15 	bl	8000bec <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000dc2:	e007      	b.n	8000dd4 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000dca:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff0c 	bl	8000bec <lcd16x2_i2c_sendCommand>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <lcd16x2_i2c_1stLine>:

/**
 * @brief Move to beginning of 1st line
 */
void lcd16x2_i2c_1stLine(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(0,0);
 8000de0:	2100      	movs	r1, #0
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff ffd6 	bl	8000d94 <lcd16x2_i2c_setCursor>
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <lcd16x2_i2c_2ndLine>:
/**
 * @brief Move to beginning of 2nd line
 */
void lcd16x2_i2c_2ndLine(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  lcd16x2_i2c_setCursor(1,0);
 8000df0:	2100      	movs	r1, #0
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff ffce 	bl	8000d94 <lcd16x2_i2c_setCursor>
}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <lcd16x2_i2c_clear>:

/**
 * @brief Display clear
 */
void lcd16x2_i2c_clear(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000e00:	2001      	movs	r0, #1
 8000e02:	f7ff fef3 	bl	8000bec <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f001 f86e 	bl	8001ee8 <HAL_Delay>
}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000e10:	b40f      	push	{r0, r1, r2, r3}
 8000e12:	b590      	push	{r4, r7, lr}
 8000e14:	b089      	sub	sp, #36	; 0x24
 8000e16:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000e18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e1c:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00d fdca 	bl	800e9c0 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	77fb      	strb	r3, [r7, #31]
 8000e30:	e00b      	b.n	8000e4a <lcd16x2_i2c_printf+0x3a>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	f107 0220 	add.w	r2, r7, #32
 8000e38:	4413      	add	r3, r2
 8000e3a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff08 	bl	8000c54 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000e44:	7ffb      	ldrb	r3, [r7, #31]
 8000e46:	3301      	adds	r3, #1
 8000e48:	77fb      	strb	r3, [r7, #31]
 8000e4a:	7ffc      	ldrb	r4, [r7, #31]
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff f9c5 	bl	80001e0 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	d202      	bcs.n	8000e62 <lcd16x2_i2c_printf+0x52>
 8000e5c:	7ffb      	ldrb	r3, [r7, #31]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d9e7      	bls.n	8000e32 <lcd16x2_i2c_printf+0x22>
  }
}
 8000e62:	bf00      	nop
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000e6c:	b004      	add	sp, #16
 8000e6e:	4770      	bx	lr

08000e70 <HAL_TIM_PeriodElapsedCallback>:
static void MX_TIM5_Init(void);
static void MX_TIM10_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
	if (htim == &htim10) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d10d      	bne.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x2c>
		if (duty < 1000) {
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e88:	da05      	bge.n	8000e96 <HAL_TIM_PeriodElapsedCallback+0x26>
			duty++;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e92:	6013      	str	r3, [r2, #0]
		} else
			duty = 0;
	}
}
 8000e94:	e002      	b.n	8000e9c <HAL_TIM_PeriodElapsedCallback+0x2c>
			duty = 0;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	20001430 	.word	0x20001430
 8000eac:	2000010c 	.word	0x2000010c

08000eb0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b095      	sub	sp, #84	; 0x54
 8000eb4:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eb6:	f000 ffa5 	bl	8001e04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000eba:	f000 f8d1 	bl	8001060 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ebe:	f000 fadf 	bl	8001480 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ec2:	f000 fabd 	bl	8001440 <MX_DMA_Init>
	MX_I2C1_Init();
 8000ec6:	f000 f94f 	bl	8001168 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000eca:	f000 f9a9 	bl	8001220 <MX_I2S3_Init>
	MX_USB_HOST_Init();
 8000ece:	f00d f91f 	bl	800e110 <MX_USB_HOST_Init>
	MX_FATFS_Init();
 8000ed2:	f007 fd8d 	bl	80089f0 <MX_FATFS_Init>
	MX_I2C2_Init();
 8000ed6:	f000 f975 	bl	80011c4 <MX_I2C2_Init>
	MX_TIM4_Init();
 8000eda:	f000 f9cf 	bl	800127c <MX_TIM4_Init>
	MX_TIM5_Init();
 8000ede:	f000 fa1b 	bl	8001318 <MX_TIM5_Init>
	MX_TIM10_Init();
 8000ee2:	f000 fa89 	bl	80013f8 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */

	/******************************DAC AUDIO INIT ******************************/
	CS43_Init(hi2c1, MODE_I2S);
 8000ee6:	4c4d      	ldr	r4, [pc, #308]	; (800101c <main+0x16c>)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	9311      	str	r3, [sp, #68]	; 0x44
 8000eec:	4668      	mov	r0, sp
 8000eee:	f104 0310 	add.w	r3, r4, #16
 8000ef2:	2244      	movs	r2, #68	; 0x44
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f00d fc81 	bl	800e7fc <memcpy>
 8000efa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000efe:	f7ff fb81 	bl	8000604 <CS43_Init>
	CS43_SetVolume(200); //0-255
 8000f02:	20c8      	movs	r0, #200	; 0xc8
 8000f04:	f7ff fcce 	bl	80008a4 <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f7ff fc81 	bl	8000810 <CS43_Enable_RightLeft>
	audioI2S_setHandle(&hi2s3);
 8000f0e:	4844      	ldr	r0, [pc, #272]	; (8001020 <main+0x170>)
 8000f10:	f7ff fe0a 	bl	8000b28 <audioI2S_setHandle>
	bool isSdCardMounted = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	71fb      	strb	r3, [r7, #7]
	bool pauseResumeToggle = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	71bb      	strb	r3, [r7, #6]

	/******************************LCD INIT ************************************/
	lcd16x2_i2c_init(&hi2c2);
 8000f1c:	4841      	ldr	r0, [pc, #260]	; (8001024 <main+0x174>)
 8000f1e:	f7ff fecd 	bl	8000cbc <lcd16x2_i2c_init>
	lcd16x2_i2c_1stLine();
 8000f22:	f7ff ff5b 	bl	8000ddc <lcd16x2_i2c_1stLine>
	lcd16x2_i2c_printf("first line");
 8000f26:	4840      	ldr	r0, [pc, #256]	; (8001028 <main+0x178>)
 8000f28:	f7ff ff72 	bl	8000e10 <lcd16x2_i2c_printf>
	lcd16x2_i2c_2ndLine();
 8000f2c:	f7ff ff5e 	bl	8000dec <lcd16x2_i2c_2ndLine>
	lcd16x2_i2c_printf("second line");
 8000f30:	483e      	ldr	r0, [pc, #248]	; (800102c <main+0x17c>)
 8000f32:	f7ff ff6d 	bl	8000e10 <lcd16x2_i2c_printf>

	/******************************PWM INIT ************************************/
	HAL_TIM_Base_Start_IT(&htim10);
 8000f36:	483e      	ldr	r0, [pc, #248]	; (8001030 <main+0x180>)
 8000f38:	f005 ff91 	bl	8006e5e <HAL_TIM_Base_Start_IT>
	//blue LED
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_2, 0);
 8000f3c:	4b3d      	ldr	r3, [pc, #244]	; (8001034 <main+0x184>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000f44:	2104      	movs	r1, #4
 8000f46:	483b      	ldr	r0, [pc, #236]	; (8001034 <main+0x184>)
 8000f48:	f005 ffd8 	bl	8006efc <HAL_TIM_PWM_Start>
	//green LED
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_3, 0);
 8000f4c:	4b39      	ldr	r3, [pc, #228]	; (8001034 <main+0x184>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8000f54:	2108      	movs	r1, #8
 8000f56:	4837      	ldr	r0, [pc, #220]	; (8001034 <main+0x184>)
 8000f58:	f005 ffd0 	bl	8006efc <HAL_TIM_PWM_Start>
	//red LED
	__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, 0);
 8000f5c:	4b35      	ldr	r3, [pc, #212]	; (8001034 <main+0x184>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2200      	movs	r2, #0
 8000f62:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8000f64:	210c      	movs	r1, #12
 8000f66:	4833      	ldr	r0, [pc, #204]	; (8001034 <main+0x184>)
 8000f68:	f005 ffc8 	bl	8006efc <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		TIM5->CCR2 = duty;
 8000f6c:	4b32      	ldr	r3, [pc, #200]	; (8001038 <main+0x188>)
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	4b32      	ldr	r3, [pc, #200]	; (800103c <main+0x18c>)
 8000f72:	639a      	str	r2, [r3, #56]	; 0x38
		TIM5->CCR3 = duty;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <main+0x188>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b30      	ldr	r3, [pc, #192]	; (800103c <main+0x18c>)
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
		TIM5->CCR4 = 1000;
 8000f7c:	4b2f      	ldr	r3, [pc, #188]	; (800103c <main+0x18c>)
 8000f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f82:	641a      	str	r2, [r3, #64]	; 0x40

		if (Appli_state == APPLICATION_START) {
 8000f84:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <main+0x190>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d106      	bne.n	8000f9a <main+0xea>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f92:	482c      	ldr	r0, [pc, #176]	; (8001044 <main+0x194>)
 8000f94:	f001 fde4 	bl	8002b60 <HAL_GPIO_WritePin>
 8000f98:	e009      	b.n	8000fae <main+0xfe>
		}

		else if (Appli_state == APPLICATION_DISCONNECT) {
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <main+0x190>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	d105      	bne.n	8000fae <main+0xfe>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	4826      	ldr	r0, [pc, #152]	; (8001044 <main+0x194>)
 8000faa:	f001 fdd9 	bl	8002b60 <HAL_GPIO_WritePin>

		}

		if (Appli_state == APPLICATION_READY) {
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <main+0x190>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d12d      	bne.n	8001012 <main+0x162>
			if (!isSdCardMounted) {
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	f083 0301 	eor.w	r3, r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <main+0x120>
				f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	4920      	ldr	r1, [pc, #128]	; (8001048 <main+0x198>)
 8000fc6:	4821      	ldr	r0, [pc, #132]	; (800104c <main+0x19c>)
 8000fc8:	f00c fa52 	bl	800d470 <f_mount>
				isSdCardMounted = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	71fb      	strb	r3, [r7, #7]
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	481f      	ldr	r0, [pc, #124]	; (8001050 <main+0x1a0>)
 8000fd4:	f001 fdac 	bl	8002b30 <HAL_GPIO_ReadPin>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d019      	beq.n	8001012 <main+0x162>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <main+0x194>)
 8000fe6:	f001 fdbb 	bl	8002b60 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000fea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fee:	f000 ff7b 	bl	8001ee8 <HAL_Delay>
				wavPlayer_fileSelect(WAV_FILE);
 8000ff2:	4818      	ldr	r0, [pc, #96]	; (8001054 <main+0x1a4>)
 8000ff4:	f000 fdf6 	bl	8001be4 <wavPlayer_fileSelect>
				lcd16x2_i2c_clear();
 8000ff8:	f7ff ff00 	bl	8000dfc <lcd16x2_i2c_clear>
				lcd16x2_i2c_printf("Odtwarzam teraz ");
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <main+0x1a8>)
 8000ffe:	f7ff ff07 	bl	8000e10 <lcd16x2_i2c_printf>
				lcd16x2_i2c_2ndLine();
 8001002:	f7ff fef3 	bl	8000dec <lcd16x2_i2c_2ndLine>
				lcd16x2_i2c_printf("%s", WAV_FILE);
 8001006:	4913      	ldr	r1, [pc, #76]	; (8001054 <main+0x1a4>)
 8001008:	4814      	ldr	r0, [pc, #80]	; (800105c <main+0x1ac>)
 800100a:	f7ff ff01 	bl	8000e10 <lcd16x2_i2c_printf>

				wavPlayer_play();
 800100e:	f000 fe13 	bl	8001c38 <wavPlayer_play>

			}

		}
// audio process
		wavPlayer_process();
 8001012:	f000 fe43 	bl	8001c9c <wavPlayer_process>

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001016:	f00d f8a1 	bl	800e15c <MX_USB_HOST_Process>
		TIM5->CCR2 = duty;
 800101a:	e7a7      	b.n	8000f6c <main+0xbc>
 800101c:	200013dc 	.word	0x200013dc
 8001020:	20001564 	.word	0x20001564
 8001024:	20001470 	.word	0x20001470
 8001028:	0800f034 	.word	0x0800f034
 800102c:	0800f040 	.word	0x0800f040
 8001030:	20001430 	.word	0x20001430
 8001034:	200014c4 	.word	0x200014c4
 8001038:	2000010c 	.word	0x2000010c
 800103c:	40000c00 	.word	0x40000c00
 8001040:	20001390 	.word	0x20001390
 8001044:	40020c00 	.word	0x40020c00
 8001048:	200015b0 	.word	0x200015b0
 800104c:	200017e4 	.word	0x200017e4
 8001050:	40020000 	.word	0x40020000
 8001054:	0800f04c 	.word	0x0800f04c
 8001058:	0800f058 	.word	0x0800f058
 800105c:	0800f06c 	.word	0x0800f06c

08001060 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b09a      	sub	sp, #104	; 0x68
 8001064:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001066:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800106a:	2230      	movs	r2, #48	; 0x30
 800106c:	2100      	movs	r1, #0
 800106e:	4618      	mov	r0, r3
 8001070:	f00d fbcf 	bl	800e812 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
 8001094:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b31      	ldr	r3, [pc, #196]	; (8001160 <SystemClock_Config+0x100>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a30      	ldr	r2, [pc, #192]	; (8001160 <SystemClock_Config+0x100>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <SystemClock_Config+0x100>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <SystemClock_Config+0x104>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a2a      	ldr	r2, [pc, #168]	; (8001164 <SystemClock_Config+0x104>)
 80010bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <SystemClock_Config+0x104>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ce:	2301      	movs	r3, #1
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d8:	2302      	movs	r3, #2
 80010da:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e0:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 72;
 80010e6:	2348      	movs	r3, #72	; 0x48
 80010e8:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80010ee:	2303      	movs	r3, #3
 80010f0:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f6:	4618      	mov	r0, r3
 80010f8:	f005 f8a8 	bl	800624c <HAL_RCC_OscConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0xa6>
		Error_Handler();
 8001102:	f000 faa9 	bl	8001658 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800111c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001120:	2102      	movs	r1, #2
 8001122:	4618      	mov	r0, r3
 8001124:	f005 fb02 	bl	800672c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0xd2>
		Error_Handler();
 800112e:	f000 fa93 	bl	8001658 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001132:	2301      	movs	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 288;
 8001136:	f44f 7390 	mov.w	r3, #288	; 0x120
 800113a:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 800113c:	2308      	movs	r3, #8
 800113e:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001140:	2306      	movs	r3, #6
 8001142:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4618      	mov	r0, r3
 800114a:	f005 fccd 	bl	8006ae8 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0xf8>
		Error_Handler();
 8001154:	f000 fa80 	bl	8001658 <Error_Handler>
	}
}
 8001158:	bf00      	nop
 800115a:	3768      	adds	r7, #104	; 0x68
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40007000 	.word	0x40007000

08001168 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_I2C1_Init+0x50>)
 800116e:	4a13      	ldr	r2, [pc, #76]	; (80011bc <MX_I2C1_Init+0x54>)
 8001170:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <MX_I2C1_Init+0x58>)
 8001176:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_I2C1_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800118a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119e:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <MX_I2C1_Init+0x50>)
 80011a6:	f003 fa09 	bl	80045bc <HAL_I2C_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80011b0:	f000 fa52 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200013dc 	.word	0x200013dc
 80011bc:	40005400 	.word	0x40005400
 80011c0:	000186a0 	.word	0x000186a0

080011c4 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C2_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C2_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C2_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_I2C2_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C2_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2C2_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_I2C2_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_I2C2_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2C2_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C2_Init+0x50>)
 8001202:	f003 f9db 	bl	80045bc <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C2_Init+0x4c>
		Error_Handler();
 800120c:	f000 fa24 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20001470 	.word	0x20001470
 8001218:	40005800 	.word	0x40005800
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_I2S3_Init+0x54>)
 8001226:	4a14      	ldr	r2, [pc, #80]	; (8001278 <MX_I2S3_Init+0x58>)
 8001228:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2S3_Init+0x54>)
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_I2S3_Init+0x54>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_I2S3_Init+0x54>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <MX_I2S3_Init+0x54>)
 8001240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001244:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_I2S3_Init+0x54>)
 8001248:	f64a 4244 	movw	r2, #44100	; 0xac44
 800124c:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2S3_Init+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_I2S3_Init+0x54>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_I2S3_Init+0x54>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2S3_Init+0x54>)
 8001262:	f004 fa61 	bl	8005728 <HAL_I2S_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2S3_Init+0x50>
		Error_Handler();
 800126c:	f000 f9f4 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20001564 	.word	0x20001564
 8001278:	40003c00 	.word	0x40003c00

0800127c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001298:	4b1d      	ldr	r3, [pc, #116]	; (8001310 <MX_TIM4_Init+0x94>)
 800129a:	4a1e      	ldr	r2, [pc, #120]	; (8001314 <MX_TIM4_Init+0x98>)
 800129c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = TIM4_PRESCALER;
 800129e:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_TIM4_Init+0x94>)
 80012a0:	2263      	movs	r2, #99	; 0x63
 80012a2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	; (8001310 <MX_TIM4_Init+0x94>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_PERIOD;
 80012aa:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_TIM4_Init+0x94>)
 80012ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012b0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <MX_TIM4_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_TIM4_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <MX_TIM4_Init+0x94>)
 80012c0:	f005 fda2 	bl	8006e08 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM4_Init+0x52>
		Error_Handler();
 80012ca:	f000 f9c5 	bl	8001658 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM4_Init+0x94>)
 80012dc:	f006 f80e 	bl	80072fc <HAL_TIM_ConfigClockSource>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0x6e>
		Error_Handler();
 80012e6:	f000 f9b7 	bl	8001658 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80012f2:	463b      	mov	r3, r7
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <MX_TIM4_Init+0x94>)
 80012f8:	f006 fbac 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001302:	f000 f9a9 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2000139c 	.word	0x2000139c
 8001314:	40000800 	.word	0x40000800

08001318 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]
 8001336:	615a      	str	r2, [r3, #20]
 8001338:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <MX_TIM5_Init+0xd8>)
 800133c:	4a2d      	ldr	r2, [pc, #180]	; (80013f4 <MX_TIM5_Init+0xdc>)
 800133e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = TIM5_PRESCALER;
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <MX_TIM5_Init+0xd8>)
 8001342:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001346:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <MX_TIM5_Init+0xd8>)
 800134a:	2200      	movs	r2, #0
 800134c:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = TIM5_PERIOD;
 800134e:	4b28      	ldr	r3, [pc, #160]	; (80013f0 <MX_TIM5_Init+0xd8>)
 8001350:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001354:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <MX_TIM5_Init+0xd8>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <MX_TIM5_Init+0xd8>)
 800135e:	2200      	movs	r2, #0
 8001360:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001362:	4823      	ldr	r0, [pc, #140]	; (80013f0 <MX_TIM5_Init+0xd8>)
 8001364:	f005 fd9f 	bl	8006ea6 <HAL_TIM_PWM_Init>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM5_Init+0x5a>
		Error_Handler();
 800136e:	f000 f973 	bl	8001658 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001372:	2300      	movs	r3, #0
 8001374:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	4619      	mov	r1, r3
 8001380:	481b      	ldr	r0, [pc, #108]	; (80013f0 <MX_TIM5_Init+0xd8>)
 8001382:	f006 fb67 	bl	8007a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM5_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 800138c:	f000 f964 	bl	8001658 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001390:	2360      	movs	r3, #96	; 0x60
 8001392:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2204      	movs	r2, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4812      	ldr	r0, [pc, #72]	; (80013f0 <MX_TIM5_Init+0xd8>)
 80013a8:	f005 fee2 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM5_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80013b2:	f000 f951 	bl	8001658 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2208      	movs	r2, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <MX_TIM5_Init+0xd8>)
 80013be:	f005 fed7 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM5_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80013c8:	f000 f946 	bl	8001658 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	220c      	movs	r2, #12
 80013d0:	4619      	mov	r1, r3
 80013d2:	4807      	ldr	r0, [pc, #28]	; (80013f0 <MX_TIM5_Init+0xd8>)
 80013d4:	f005 fecc 	bl	8007170 <HAL_TIM_PWM_ConfigChannel>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM5_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 80013de:	f000 f93b 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 80013e2:	4803      	ldr	r0, [pc, #12]	; (80013f0 <MX_TIM5_Init+0xd8>)
 80013e4:	f000 fb04 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	200014c4 	.word	0x200014c4
 80013f4:	40000c00 	.word	0x40000c00

080013f8 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_TIM10_Init+0x40>)
 80013fe:	4a0f      	ldr	r2, [pc, #60]	; (800143c <MX_TIM10_Init+0x44>)
 8001400:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = TIM10_PRESCALER;
 8001402:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <MX_TIM10_Init+0x40>)
 8001404:	f240 3252 	movw	r2, #850	; 0x352
 8001408:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <MX_TIM10_Init+0x40>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = TIM10_PERIOD;
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <MX_TIM10_Init+0x40>)
 8001412:	f240 3252 	movw	r2, #850	; 0x352
 8001416:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001418:	4b07      	ldr	r3, [pc, #28]	; (8001438 <MX_TIM10_Init+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141e:	4b06      	ldr	r3, [pc, #24]	; (8001438 <MX_TIM10_Init+0x40>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001424:	4804      	ldr	r0, [pc, #16]	; (8001438 <MX_TIM10_Init+0x40>)
 8001426:	f005 fcef 	bl	8006e08 <HAL_TIM_Base_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM10_Init+0x3c>
		Error_Handler();
 8001430:	f000 f912 	bl	8001658 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20001430 	.word	0x20001430
 800143c:	40014400 	.word	0x40014400

08001440 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_DMA_Init+0x3c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a0b      	ldr	r2, [pc, #44]	; (800147c <MX_DMA_Init+0x3c>)
 8001450:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_DMA_Init+0x3c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2010      	movs	r0, #16
 8001468:	f000 fe3b 	bl	80020e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800146c:	2010      	movs	r0, #16
 800146e:	f000 fe54 	bl	800211a <HAL_NVIC_EnableIRQ>

}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40023800 	.word	0x40023800

08001480 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b69      	ldr	r3, [pc, #420]	; (8001640 <MX_GPIO_Init+0x1c0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a68      	ldr	r2, [pc, #416]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b66      	ldr	r3, [pc, #408]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b62      	ldr	r3, [pc, #392]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b5f      	ldr	r3, [pc, #380]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b5b      	ldr	r3, [pc, #364]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a5a      	ldr	r2, [pc, #360]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b58      	ldr	r3, [pc, #352]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b54      	ldr	r3, [pc, #336]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a53      	ldr	r2, [pc, #332]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b51      	ldr	r3, [pc, #324]	; (8001640 <MX_GPIO_Init+0x1c0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <MX_GPIO_Init+0x1c0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <MX_GPIO_Init+0x1c0>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <MX_GPIO_Init+0x1c0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b46      	ldr	r3, [pc, #280]	; (8001640 <MX_GPIO_Init+0x1c0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a45      	ldr	r2, [pc, #276]	; (8001640 <MX_GPIO_Init+0x1c0>)
 800152c:	f043 0308 	orr.w	r3, r3, #8
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b43      	ldr	r3, [pc, #268]	; (8001640 <MX_GPIO_Init+0x1c0>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, USB_power_Pin | dir_Pin | step_Pin,
 800153e:	2200      	movs	r2, #0
 8001540:	f240 1141 	movw	r1, #321	; 0x141
 8001544:	483f      	ldr	r0, [pc, #252]	; (8001644 <MX_GPIO_Init+0x1c4>)
 8001546:	f001 fb0b 	bl	8002b60 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 800154a:	2200      	movs	r2, #0
 800154c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001550:	483d      	ldr	r0, [pc, #244]	; (8001648 <MX_GPIO_Init+0x1c8>)
 8001552:	f001 fb05 	bl	8002b60 <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 7180 	mov.w	r1, #256	; 0x100
 800155c:	483b      	ldr	r0, [pc, #236]	; (800164c <MX_GPIO_Init+0x1cc>)
 800155e:	f001 faff 	bl	8002b60 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : button_left_Pin button_select_Pin button_right_Pin */
	GPIO_InitStruct.Pin =
 8001562:	232a      	movs	r3, #42	; 0x2a
 8001564:	61fb      	str	r3, [r7, #28]
	button_left_Pin | button_select_Pin | button_right_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <MX_GPIO_Init+0x1d0>)
 8001568:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156a:	2302      	movs	r3, #2
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800156e:	f107 031c 	add.w	r3, r7, #28
 8001572:	4619      	mov	r1, r3
 8001574:	4837      	ldr	r0, [pc, #220]	; (8001654 <MX_GPIO_Init+0x1d4>)
 8001576:	f001 f959 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_power_Pin dir_Pin step_Pin */
	GPIO_InitStruct.Pin = USB_power_Pin | dir_Pin | step_Pin;
 800157a:	f240 1341 	movw	r3, #321	; 0x141
 800157e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	4619      	mov	r1, r3
 8001592:	482c      	ldr	r0, [pc, #176]	; (8001644 <MX_GPIO_Init+0x1c4>)
 8001594:	f001 f94a 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001598:	2301      	movs	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4828      	ldr	r0, [pc, #160]	; (800164c <MX_GPIO_Init+0x1cc>)
 80015ac:	f001 f93e 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pin : endstop_Pin */
	GPIO_InitStruct.Pin = endstop_Pin;
 80015b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015b4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b6:	4b26      	ldr	r3, [pc, #152]	; (8001650 <MX_GPIO_Init+0x1d0>)
 80015b8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(endstop_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4820      	ldr	r0, [pc, #128]	; (8001648 <MX_GPIO_Init+0x1c8>)
 80015c6:	f001 f931 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 80015ca:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015ce:	61fb      	str	r3, [r7, #28]
			| Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d0:	2301      	movs	r3, #1
 80015d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4819      	ldr	r0, [pc, #100]	; (8001648 <MX_GPIO_Init+0x1c8>)
 80015e4:	f001 f922 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pin : slp_rst_Pin */
	GPIO_InitStruct.Pin = slp_rst_Pin;
 80015e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(slp_rst_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	4619      	mov	r1, r3
 8001600:	4812      	ldr	r0, [pc, #72]	; (800164c <MX_GPIO_Init+0x1cc>)
 8001602:	f001 f913 	bl	800282c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	2007      	movs	r0, #7
 800160c:	f000 fd69 	bl	80020e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001610:	2007      	movs	r0, #7
 8001612:	f000 fd82 	bl	800211a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	2009      	movs	r0, #9
 800161c:	f000 fd61 	bl	80020e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001620:	2009      	movs	r0, #9
 8001622:	f000 fd7a 	bl	800211a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2017      	movs	r0, #23
 800162c:	f000 fd59 	bl	80020e2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001630:	2017      	movs	r0, #23
 8001632:	f000 fd72 	bl	800211a <HAL_NVIC_EnableIRQ>

}
 8001636:	bf00      	nop
 8001638:	3730      	adds	r7, #48	; 0x30
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020800 	.word	0x40020800
 8001648:	40020c00 	.word	0x40020c00
 800164c:	40020000 	.word	0x40020000
 8001650:	10110000 	.word	0x10110000
 8001654:	40021000 	.word	0x40021000

08001658 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 fd10 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 031c 	add.w	r3, r7, #28
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a3b      	ldr	r2, [pc, #236]	; (80017c4 <HAL_I2C_MspInit+0x10c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12d      	bne.n	8001736 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61bb      	str	r3, [r7, #24]
 80016de:	4b3a      	ldr	r3, [pc, #232]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a39      	ldr	r2, [pc, #228]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b37      	ldr	r3, [pc, #220]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2X1_SCL_Pin|I2C1_SDA_Pin;
 80016f6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80016fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fc:	2312      	movs	r3, #18
 80016fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001700:	2301      	movs	r3, #1
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001708:	2304      	movs	r3, #4
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 031c 	add.w	r3, r7, #28
 8001710:	4619      	mov	r1, r3
 8001712:	482e      	ldr	r0, [pc, #184]	; (80017cc <HAL_I2C_MspInit+0x114>)
 8001714:	f001 f88a 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	4b2a      	ldr	r3, [pc, #168]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	4a29      	ldr	r2, [pc, #164]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 8001722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001726:	6413      	str	r3, [r2, #64]	; 0x40
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001734:	e041      	b.n	80017ba <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_I2C_MspInit+0x118>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d13c      	bne.n	80017ba <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 8001746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001748:	4a1f      	ldr	r2, [pc, #124]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 800174a:	f043 0302 	orr.w	r3, r3, #2
 800174e:	6313      	str	r3, [r2, #48]	; 0x30
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 800175c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800176e:	2304      	movs	r3, #4
 8001770:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 8001772:	f107 031c 	add.w	r3, r7, #28
 8001776:	4619      	mov	r1, r3
 8001778:	4814      	ldr	r0, [pc, #80]	; (80017cc <HAL_I2C_MspInit+0x114>)
 800177a:	f001 f857 	bl	800282c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800177e:	2308      	movs	r3, #8
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001782:	2312      	movs	r3, #18
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001786:	2301      	movs	r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800178e:	2309      	movs	r3, #9
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <HAL_I2C_MspInit+0x114>)
 800179a:	f001 f847 	bl	800282c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b09      	ldr	r3, [pc, #36]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 80017a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <HAL_I2C_MspInit+0x110>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
}
 80017ba:	bf00      	nop
 80017bc:	3730      	adds	r7, #48	; 0x30
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020400 	.word	0x40020400
 80017d0:	40005800 	.word	0x40005800

080017d4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	; 0x28
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0314 	add.w	r3, r7, #20
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a45      	ldr	r2, [pc, #276]	; (8001908 <HAL_I2S_MspInit+0x134>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f040 8084 	bne.w	8001900 <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_I2S_MspInit+0x138>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001800:	4a42      	ldr	r2, [pc, #264]	; (800190c <HAL_I2S_MspInit+0x138>)
 8001802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001806:	6413      	str	r3, [r2, #64]	; 0x40
 8001808:	4b40      	ldr	r3, [pc, #256]	; (800190c <HAL_I2S_MspInit+0x138>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <HAL_I2S_MspInit+0x138>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <HAL_I2S_MspInit+0x138>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6313      	str	r3, [r2, #48]	; 0x30
 8001824:	4b39      	ldr	r3, [pc, #228]	; (800190c <HAL_I2S_MspInit+0x138>)
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	4b35      	ldr	r3, [pc, #212]	; (800190c <HAL_I2S_MspInit+0x138>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	4a34      	ldr	r2, [pc, #208]	; (800190c <HAL_I2S_MspInit+0x138>)
 800183a:	f043 0304 	orr.w	r3, r3, #4
 800183e:	6313      	str	r3, [r2, #48]	; 0x30
 8001840:	4b32      	ldr	r3, [pc, #200]	; (800190c <HAL_I2S_MspInit+0x138>)
 8001842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800184c:	2310      	movs	r3, #16
 800184e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	2302      	movs	r3, #2
 8001852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001858:	2300      	movs	r3, #0
 800185a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800185c:	2306      	movs	r3, #6
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4619      	mov	r1, r3
 8001866:	482a      	ldr	r0, [pc, #168]	; (8001910 <HAL_I2S_MspInit+0x13c>)
 8001868:	f000 ffe0 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_CK_Pin|I2S3_SD_Pin;
 800186c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800187e:	2306      	movs	r3, #6
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4822      	ldr	r0, [pc, #136]	; (8001914 <HAL_I2S_MspInit+0x140>)
 800188a:	f000 ffcf 	bl	800282c <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800188e:	4b22      	ldr	r3, [pc, #136]	; (8001918 <HAL_I2S_MspInit+0x144>)
 8001890:	4a22      	ldr	r2, [pc, #136]	; (800191c <HAL_I2S_MspInit+0x148>)
 8001892:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_I2S_MspInit+0x144>)
 8001896:	2200      	movs	r2, #0
 8001898:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800189a:	4b1f      	ldr	r3, [pc, #124]	; (8001918 <HAL_I2S_MspInit+0x144>)
 800189c:	2240      	movs	r2, #64	; 0x40
 800189e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ac:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018ae:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b6:	4b18      	ldr	r3, [pc, #96]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018bc:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80018be:	4b16      	ldr	r3, [pc, #88]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80018c6:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018ce:	2204      	movs	r2, #4
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018d2:	4b11      	ldr	r3, [pc, #68]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018d4:	2203      	movs	r2, #3
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018d8:	4b0f      	ldr	r3, [pc, #60]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80018e4:	480c      	ldr	r0, [pc, #48]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018e6:	f000 fc33 	bl	8002150 <HAL_DMA_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 80018f0:	f7ff feb2 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a08      	ldr	r2, [pc, #32]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_I2S_MspInit+0x144>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	; 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40003c00 	.word	0x40003c00
 800190c:	40023800 	.word	0x40023800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020800 	.word	0x40020800
 8001918:	20001504 	.word	0x20001504
 800191c:	40026088 	.word	0x40026088

08001920 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <HAL_TIM_Base_MspInit+0x80>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d116      	bne.n	8001960 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <HAL_TIM_Base_MspInit+0x84>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a1a      	ldr	r2, [pc, #104]	; (80019a4 <HAL_TIM_Base_MspInit+0x84>)
 800193c:	f043 0304 	orr.w	r3, r3, #4
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_TIM_Base_MspInit+0x84>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 0304 	and.w	r3, r3, #4
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2100      	movs	r1, #0
 8001952:	201e      	movs	r0, #30
 8001954:	f000 fbc5 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001958:	201e      	movs	r0, #30
 800195a:	f000 fbde 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800195e:	e01a      	b.n	8001996 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <HAL_TIM_Base_MspInit+0x88>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d115      	bne.n	8001996 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_TIM_Base_MspInit+0x84>)
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <HAL_TIM_Base_MspInit+0x84>)
 8001974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001978:	6453      	str	r3, [r2, #68]	; 0x44
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_TIM_Base_MspInit+0x84>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	2019      	movs	r0, #25
 800198c:	f000 fba9 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001990:	2019      	movs	r0, #25
 8001992:	f000 fbc2 	bl	800211a <HAL_NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40000800 	.word	0x40000800
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40014400 	.word	0x40014400

080019ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <HAL_TIM_PWM_MspInit+0x3c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10d      	bne.n	80019da <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <HAL_TIM_PWM_MspInit+0x40>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_TIM_PWM_MspInit+0x40>)
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	6413      	str	r3, [r2, #64]	; 0x40
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <HAL_TIM_PWM_MspInit+0x40>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40000c00 	.word	0x40000c00
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_TIM_MspPostInit+0x68>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d11d      	bne.n	8001a4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001a2e:	230e      	movs	r3, #14
 8001a30:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <HAL_TIM_MspPostInit+0x70>)
 8001a4a:	f000 feef 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40000c00 	.word	0x40000c00
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020000 	.word	0x40020000

08001a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab8:	f000 f9f6 	bl	8001ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f001 f865 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}

08001ace <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ad2:	2008      	movs	r0, #8
 8001ad4:	f001 f85e 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <DMA1_Stream5_IRQHandler+0x10>)
 8001ae2:	f000 fc3b 	bl	800235c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	20001504 	.word	0x20001504

08001af0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001af4:	2020      	movs	r0, #32
 8001af6:	f001 f84d 	bl	8002b94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b06:	f005 fa2b 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20001430 	.word	0x20001430

08001b14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM4_IRQHandler+0x10>)
 8001b1a:	f005 fa21 	bl	8006f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000139c 	.word	0x2000139c

08001b28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <OTG_FS_IRQHandler+0x10>)
 8001b2e:	f001 fae3 	bl	80030f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20001df0 	.word	0x20001df0

08001b3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <_sbrk+0x50>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d102      	bne.n	8001b52 <_sbrk+0x16>
		heap_end = &end;
 8001b4c:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <_sbrk+0x50>)
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <_sbrk+0x54>)
 8001b50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <_sbrk+0x50>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001b58:	4b0c      	ldr	r3, [pc, #48]	; (8001b8c <_sbrk+0x50>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4413      	add	r3, r2
 8001b60:	466a      	mov	r2, sp
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d907      	bls.n	8001b76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001b66:	f00c fe0f 	bl	800e788 <__errno>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001b70:	f04f 33ff 	mov.w	r3, #4294967295
 8001b74:	e006      	b.n	8001b84 <_sbrk+0x48>
	}

	heap_end += incr;
 8001b76:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <_sbrk+0x50>)
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <_sbrk+0x50>)
 8001b80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001b82:	68fb      	ldr	r3, [r7, #12]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000110 	.word	0x20000110
 8001b90:	200020b8 	.word	0x200020b8

08001b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <SystemInit+0x28>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	4a07      	ldr	r2, [pc, #28]	; (8001bbc <SystemInit+0x28>)
 8001ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <SystemInit+0x28>)
 8001baa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bae:	609a      	str	r2, [r3, #8]
#endif
}
 8001bb0:	bf00      	nop
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <wavPlayer_reset+0x1c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8001bca:	4b05      	ldr	r3, [pc, #20]	; (8001be0 <wavPlayer_reset+0x20>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20001348 	.word	0x20001348
 8001be0:	20001350 	.word	0x20001350

08001be4 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08e      	sub	sp, #56	; 0x38
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <wavPlayer_fileSelect+0x48>)
 8001bf6:	f00b fc81 	bl	800d4fc <f_open>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e00e      	b.n	8001c22 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8001c04:	f107 0308 	add.w	r3, r7, #8
 8001c08:	f107 010c 	add.w	r1, r7, #12
 8001c0c:	222c      	movs	r2, #44	; 0x2c
 8001c0e:	4807      	ldr	r0, [pc, #28]	; (8001c2c <wavPlayer_fileSelect+0x48>)
 8001c10:	f00b fe32 	bl	800d878 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4a06      	ldr	r2, [pc, #24]	; (8001c30 <wavPlayer_fileSelect+0x4c>)
 8001c18:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <wavPlayer_fileSelect+0x50>)
 8001c1e:	6013      	str	r3, [r2, #0]
  return true;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3738      	adds	r7, #56	; 0x38
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000114 	.word	0x20000114
 8001c30:	20000344 	.word	0x20000344
 8001c34:	2000134c 	.word	0x2000134c

08001c38 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  isFinished = false;
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <wavPlayer_play+0x48>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <wavPlayer_play+0x4c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ff7e 	bl	8000b48 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	480e      	ldr	r0, [pc, #56]	; (8001c88 <wavPlayer_play+0x50>)
 8001c50:	f00b fff9 	bl	800dc46 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8001c54:	4b0d      	ldr	r3, [pc, #52]	; (8001c8c <wavPlayer_play+0x54>)
 8001c56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c5a:	490d      	ldr	r1, [pc, #52]	; (8001c90 <wavPlayer_play+0x58>)
 8001c5c:	480a      	ldr	r0, [pc, #40]	; (8001c88 <wavPlayer_play+0x50>)
 8001c5e:	f00b fe0b 	bl	800d878 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <wavPlayer_play+0x5c>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <wavPlayer_play+0x54>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	; (8001c98 <wavPlayer_play+0x60>)
 8001c6e:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8001c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <wavPlayer_play+0x58>)
 8001c76:	f7fe ff77 	bl	8000b68 <audioI2S_play>
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20001354 	.word	0x20001354
 8001c84:	2000134c 	.word	0x2000134c
 8001c88:	20000114 	.word	0x20000114
 8001c8c:	20001350 	.word	0x20001350
 8001c90:	20000348 	.word	0x20000348
 8001c94:	20000344 	.word	0x20000344
 8001c98:	20001348 	.word	0x20001348

08001c9c <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <wavPlayer_process+0xc8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d859      	bhi.n	8001d5e <wavPlayer_process+0xc2>
 8001caa:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <wavPlayer_process+0x14>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001d5d 	.word	0x08001d5d
 8001cb4:	08001cc1 	.word	0x08001cc1
 8001cb8:	08001d03 	.word	0x08001d03
 8001cbc:	08001d45 	.word	0x08001d45
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8001cc0:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <wavPlayer_process+0xcc>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001cc6:	4b27      	ldr	r3, [pc, #156]	; (8001d64 <wavPlayer_process+0xc8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001ccc:	4b26      	ldr	r3, [pc, #152]	; (8001d68 <wavPlayer_process+0xcc>)
 8001cce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001cd2:	4926      	ldr	r1, [pc, #152]	; (8001d6c <wavPlayer_process+0xd0>)
 8001cd4:	4826      	ldr	r0, [pc, #152]	; (8001d70 <wavPlayer_process+0xd4>)
 8001cd6:	f00b fdcf 	bl	800d878 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001cda:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <wavPlayer_process+0xd8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ce2:	d907      	bls.n	8001cf4 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8001ce4:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <wavPlayer_process+0xd8>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <wavPlayer_process+0xcc>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <wavPlayer_process+0xd8>)
 8001cf0:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001cf2:	e034      	b.n	8001d5e <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <wavPlayer_process+0xd8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <wavPlayer_process+0xc8>)
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	701a      	strb	r2, [r3, #0]
    break;
 8001d00:	e02d      	b.n	8001d5e <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <wavPlayer_process+0xcc>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001d08:	4b16      	ldr	r3, [pc, #88]	; (8001d64 <wavPlayer_process+0xc8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <wavPlayer_process+0xcc>)
 8001d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d14:	4918      	ldr	r1, [pc, #96]	; (8001d78 <wavPlayer_process+0xdc>)
 8001d16:	4816      	ldr	r0, [pc, #88]	; (8001d70 <wavPlayer_process+0xd4>)
 8001d18:	f00b fdae 	bl	800d878 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <wavPlayer_process+0xd8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d24:	d907      	bls.n	8001d36 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <wavPlayer_process+0xd8>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <wavPlayer_process+0xcc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <wavPlayer_process+0xd8>)
 8001d32:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001d34:	e013      	b.n	8001d5e <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <wavPlayer_process+0xd8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <wavPlayer_process+0xc8>)
 8001d3e:	2203      	movs	r2, #3
 8001d40:	701a      	strb	r2, [r3, #0]
    break;
 8001d42:	e00c      	b.n	8001d5e <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8001d44:	480a      	ldr	r0, [pc, #40]	; (8001d70 <wavPlayer_process+0xd4>)
 8001d46:	f00b ff54 	bl	800dbf2 <f_close>
    wavPlayer_reset();
 8001d4a:	f7ff ff39 	bl	8001bc0 <wavPlayer_reset>
    isFinished = true;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <wavPlayer_process+0xe0>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001d54:	4b03      	ldr	r3, [pc, #12]	; (8001d64 <wavPlayer_process+0xc8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
    break;
 8001d5a:	e000      	b.n	8001d5e <wavPlayer_process+0xc2>
    break;
 8001d5c:	bf00      	nop
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20001355 	.word	0x20001355
 8001d68:	20001350 	.word	0x20001350
 8001d6c:	20000348 	.word	0x20000348
 8001d70:	20000114 	.word	0x20000114
 8001d74:	20001348 	.word	0x20001348
 8001d78:	20000b48 	.word	0x20000b48
 8001d7c:	20001354 	.word	0x20001354

08001d80 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001d84:	4b03      	ldr	r3, [pc, #12]	; (8001d94 <audioI2S_halfTransfer_Callback+0x14>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	701a      	strb	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	20001355 	.word	0x20001355

08001d98 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <audioI2S_fullTransfer_Callback+0x14>)
 8001d9e:	2202      	movs	r2, #2
 8001da0:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	20001355 	.word	0x20001355

08001db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001db4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001db6:	e003      	b.n	8001dc0 <LoopCopyDataInit>

08001db8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dbe:	3104      	adds	r1, #4

08001dc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dc0:	480b      	ldr	r0, [pc, #44]	; (8001df0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dc8:	d3f6      	bcc.n	8001db8 <CopyDataInit>
  ldr  r2, =_sbss
 8001dca:	4a0b      	ldr	r2, [pc, #44]	; (8001df8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dcc:	e002      	b.n	8001dd4 <LoopFillZerobss>

08001dce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dd0:	f842 3b04 	str.w	r3, [r2], #4

08001dd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001dd8:	d3f9      	bcc.n	8001dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001dda:	f7ff fedb 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dde:	f00c fcd9 	bl	800e794 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de2:	f7ff f865 	bl	8000eb0 <main>
  bx  lr    
 8001de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001dec:	0800f210 	.word	0x0800f210
  ldr  r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001df4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8001df8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001dfc:	200020b8 	.word	0x200020b8

08001e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <HAL_Init+0x40>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <HAL_Init+0x40>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_Init+0x40>)
 8001e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e20:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a07      	ldr	r2, [pc, #28]	; (8001e44 <HAL_Init+0x40>)
 8001e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2c:	2003      	movs	r0, #3
 8001e2e:	f000 f94d 	bl	80020cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f000 f808 	bl	8001e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e38:	f7ff fc16 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x54>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x58>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f965 	bl	8002136 <HAL_SYSTICK_Config>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00e      	b.n	8001e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d80a      	bhi.n	8001e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f000 f92d 	bl	80020e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e88:	4a06      	ldr	r2, [pc, #24]	; (8001ea4 <HAL_InitTick+0x5c>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	20000008 	.word	0x20000008
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x20>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x24>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a04      	ldr	r2, [pc, #16]	; (8001ecc <HAL_IncTick+0x24>)
 8001eba:	6013      	str	r3, [r2, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000008 	.word	0x20000008
 8001ecc:	200015ac 	.word	0x200015ac

08001ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <HAL_GetTick+0x14>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	200015ac 	.word	0x200015ac

08001ee8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef0:	f7ff ffee 	bl	8001ed0 <HAL_GetTick>
 8001ef4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f00:	d005      	beq.n	8001f0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_Delay+0x40>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0e:	bf00      	nop
 8001f10:	f7ff ffde 	bl	8001ed0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d8f7      	bhi.n	8001f10 <HAL_Delay+0x28>
  {
  }
}
 8001f20:	bf00      	nop
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	20000008 	.word	0x20000008

08001f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f48:	4013      	ands	r3, r2
 8001f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5e:	4a04      	ldr	r2, [pc, #16]	; (8001f70 <__NVIC_SetPriorityGrouping+0x44>)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	60d3      	str	r3, [r2, #12]
}
 8001f64:	bf00      	nop
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f78:	4b04      	ldr	r3, [pc, #16]	; (8001f8c <__NVIC_GetPriorityGrouping+0x18>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	0a1b      	lsrs	r3, r3, #8
 8001f7e:	f003 0307 	and.w	r3, r3, #7
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	db0b      	blt.n	8001fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	f003 021f 	and.w	r2, r3, #31
 8001fa8:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <__NVIC_EnableIRQ+0x38>)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2001      	movs	r0, #1
 8001fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	e000e100 	.word	0xe000e100

08001fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	6039      	str	r1, [r7, #0]
 8001fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db0a      	blt.n	8001ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	b2da      	uxtb	r2, r3
 8001fe4:	490c      	ldr	r1, [pc, #48]	; (8002018 <__NVIC_SetPriority+0x4c>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	0112      	lsls	r2, r2, #4
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff4:	e00a      	b.n	800200c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4908      	ldr	r1, [pc, #32]	; (800201c <__NVIC_SetPriority+0x50>)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3b04      	subs	r3, #4
 8002004:	0112      	lsls	r2, r2, #4
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	440b      	add	r3, r1
 800200a:	761a      	strb	r2, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000e100 	.word	0xe000e100
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002020:	b480      	push	{r7}
 8002022:	b089      	sub	sp, #36	; 0x24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f1c3 0307 	rsb	r3, r3, #7
 800203a:	2b04      	cmp	r3, #4
 800203c:	bf28      	it	cs
 800203e:	2304      	movcs	r3, #4
 8002040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	3304      	adds	r3, #4
 8002046:	2b06      	cmp	r3, #6
 8002048:	d902      	bls.n	8002050 <NVIC_EncodePriority+0x30>
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	3b03      	subs	r3, #3
 800204e:	e000      	b.n	8002052 <NVIC_EncodePriority+0x32>
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	401a      	ands	r2, r3
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43d9      	mvns	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002078:	4313      	orrs	r3, r2
         );
}
 800207a:	4618      	mov	r0, r3
 800207c:	3724      	adds	r7, #36	; 0x24
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3b01      	subs	r3, #1
 8002094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002098:	d301      	bcc.n	800209e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800209a:	2301      	movs	r3, #1
 800209c:	e00f      	b.n	80020be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800209e:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <SysTick_Config+0x40>)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020a6:	210f      	movs	r1, #15
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f7ff ff8e 	bl	8001fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <SysTick_Config+0x40>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020b6:	4b04      	ldr	r3, [pc, #16]	; (80020c8 <SysTick_Config+0x40>)
 80020b8:	2207      	movs	r2, #7
 80020ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	e000e010 	.word	0xe000e010

080020cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f7ff ff29 	bl	8001f2c <__NVIC_SetPriorityGrouping>
}
 80020da:	bf00      	nop
 80020dc:	3708      	adds	r7, #8
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b086      	sub	sp, #24
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020f4:	f7ff ff3e 	bl	8001f74 <__NVIC_GetPriorityGrouping>
 80020f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	6978      	ldr	r0, [r7, #20]
 8002100:	f7ff ff8e 	bl	8002020 <NVIC_EncodePriority>
 8002104:	4602      	mov	r2, r0
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800210a:	4611      	mov	r1, r2
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ff5d 	bl	8001fcc <__NVIC_SetPriority>
}
 8002112:	bf00      	nop
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	4603      	mov	r3, r0
 8002122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff31 	bl	8001f90 <__NVIC_EnableIRQ>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f7ff ffa2 	bl	8002088 <SysTick_Config>
 8002144:	4603      	mov	r3, r0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff feb8 	bl	8001ed0 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e099      	b.n	80022a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2202      	movs	r2, #2
 8002178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f022 0201 	bic.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218c:	e00f      	b.n	80021ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800218e:	f7ff fe9f 	bl	8001ed0 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b05      	cmp	r3, #5
 800219a:	d908      	bls.n	80021ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2220      	movs	r2, #32
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e078      	b.n	80022a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1e8      	bne.n	800218e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_DMA_Init+0x158>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	2b04      	cmp	r3, #4
 8002206:	d107      	bne.n	8002218 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	4313      	orrs	r3, r2
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	f023 0307 	bic.w	r3, r3, #7
 800222e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4313      	orrs	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223e:	2b04      	cmp	r3, #4
 8002240:	d117      	bne.n	8002272 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4313      	orrs	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00e      	beq.n	8002272 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 fa6f 	bl	8002738 <DMA_CheckFifoParam>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800226e:	2301      	movs	r3, #1
 8002270:	e016      	b.n	80022a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa26 	bl	80026cc <DMA_CalcBaseAndBitshift>
 8002280:	4603      	mov	r3, r0
 8002282:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002288:	223f      	movs	r2, #63	; 0x3f
 800228a:	409a      	lsls	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3718      	adds	r7, #24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	f010803f 	.word	0xf010803f

080022ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
 80022b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d101      	bne.n	80022d2 <HAL_DMA_Start_IT+0x26>
 80022ce:	2302      	movs	r3, #2
 80022d0:	e040      	b.n	8002354 <HAL_DMA_Start_IT+0xa8>
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d12f      	bne.n	8002346 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f000 f9b8 	bl	8002670 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0216 	orr.w	r2, r2, #22
 800231a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	2b00      	cmp	r3, #0
 8002322:	d007      	beq.n	8002334 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0208 	orr.w	r2, r2, #8
 8002332:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	e005      	b.n	8002352 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800234e:	2302      	movs	r3, #2
 8002350:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002352:	7dfb      	ldrb	r3, [r7, #23]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3718      	adds	r7, #24
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002368:	4b92      	ldr	r3, [pc, #584]	; (80025b4 <HAL_DMA_IRQHandler+0x258>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a92      	ldr	r2, [pc, #584]	; (80025b8 <HAL_DMA_IRQHandler+0x25c>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	0a9b      	lsrs	r3, r3, #10
 8002374:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002386:	2208      	movs	r2, #8
 8002388:	409a      	lsls	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4013      	ands	r3, r2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01a      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f022 0204 	bic.w	r2, r2, #4
 80023ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b4:	2208      	movs	r2, #8
 80023b6:	409a      	lsls	r2, r3
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023cc:	2201      	movs	r2, #1
 80023ce:	409a      	lsls	r2, r3
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d012      	beq.n	80023fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00b      	beq.n	80023fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ea:	2201      	movs	r2, #1
 80023ec:	409a      	lsls	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2204      	movs	r2, #4
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d012      	beq.n	8002434 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d00b      	beq.n	8002434 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	2204      	movs	r2, #4
 8002422:	409a      	lsls	r2, r3
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	f043 0204 	orr.w	r2, r3, #4
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	2210      	movs	r2, #16
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d043      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d03c      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002456:	2210      	movs	r2, #16
 8002458:	409a      	lsls	r2, r3
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d018      	beq.n	800249e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d108      	bne.n	800248c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d024      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	4798      	blx	r3
 800248a:	e01f      	b.n	80024cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01b      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	4798      	blx	r3
 800249c:	e016      	b.n	80024cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0208 	bic.w	r2, r2, #8
 80024ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d0:	2220      	movs	r2, #32
 80024d2:	409a      	lsls	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 808e 	beq.w	80025fa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 8086 	beq.w	80025fa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f2:	2220      	movs	r2, #32
 80024f4:	409a      	lsls	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b05      	cmp	r3, #5
 8002504:	d136      	bne.n	8002574 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0216 	bic.w	r2, r2, #22
 8002514:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	695a      	ldr	r2, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002524:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	2b00      	cmp	r3, #0
 800252c:	d103      	bne.n	8002536 <HAL_DMA_IRQHandler+0x1da>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	2b00      	cmp	r3, #0
 8002534:	d007      	beq.n	8002546 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0208 	bic.w	r2, r2, #8
 8002544:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254a:	223f      	movs	r2, #63	; 0x3f
 800254c:	409a      	lsls	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002566:	2b00      	cmp	r3, #0
 8002568:	d07d      	beq.n	8002666 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	4798      	blx	r3
        }
        return;
 8002572:	e078      	b.n	8002666 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01c      	beq.n	80025bc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d108      	bne.n	80025a2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	2b00      	cmp	r3, #0
 8002596:	d030      	beq.n	80025fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	4798      	blx	r3
 80025a0:	e02b      	b.n	80025fa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d027      	beq.n	80025fa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	4798      	blx	r3
 80025b2:	e022      	b.n	80025fa <HAL_DMA_IRQHandler+0x29e>
 80025b4:	20000000 	.word	0x20000000
 80025b8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0210 	bic.w	r2, r2, #16
 80025d8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d032      	beq.n	8002668 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d022      	beq.n	8002654 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2205      	movs	r2, #5
 8002612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0201 	bic.w	r2, r2, #1
 8002624:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3301      	adds	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	429a      	cmp	r2, r3
 8002630:	d307      	bcc.n	8002642 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1f2      	bne.n	8002626 <HAL_DMA_IRQHandler+0x2ca>
 8002640:	e000      	b.n	8002644 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002642:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	4798      	blx	r3
 8002664:	e000      	b.n	8002668 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002666:	bf00      	nop
    }
  }
}
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop

08002670 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800268c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b40      	cmp	r3, #64	; 0x40
 800269c:	d108      	bne.n	80026b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026ae:	e007      	b.n	80026c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	60da      	str	r2, [r3, #12]
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	3b10      	subs	r3, #16
 80026dc:	4a14      	ldr	r2, [pc, #80]	; (8002730 <DMA_CalcBaseAndBitshift+0x64>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	091b      	lsrs	r3, r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80026e6:	4a13      	ldr	r2, [pc, #76]	; (8002734 <DMA_CalcBaseAndBitshift+0x68>)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4413      	add	r3, r2
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	461a      	mov	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	d909      	bls.n	800270e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	1d1a      	adds	r2, r3, #4
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	659a      	str	r2, [r3, #88]	; 0x58
 800270c:	e007      	b.n	800271e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002716:	f023 0303 	bic.w	r3, r3, #3
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	aaaaaaab 	.word	0xaaaaaaab
 8002734:	0800f130 	.word	0x0800f130

08002738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002740:	2300      	movs	r3, #0
 8002742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11f      	bne.n	8002792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2b03      	cmp	r3, #3
 8002756:	d855      	bhi.n	8002804 <DMA_CheckFifoParam+0xcc>
 8002758:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <DMA_CheckFifoParam+0x28>)
 800275a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275e:	bf00      	nop
 8002760:	08002771 	.word	0x08002771
 8002764:	08002783 	.word	0x08002783
 8002768:	08002771 	.word	0x08002771
 800276c:	08002805 	.word	0x08002805
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002774:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d045      	beq.n	8002808 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002780:	e042      	b.n	8002808 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002786:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800278a:	d13f      	bne.n	800280c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002790:	e03c      	b.n	800280c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800279a:	d121      	bne.n	80027e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d836      	bhi.n	8002810 <DMA_CheckFifoParam+0xd8>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <DMA_CheckFifoParam+0x70>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027b9 	.word	0x080027b9
 80027ac:	080027bf 	.word	0x080027bf
 80027b0:	080027b9 	.word	0x080027b9
 80027b4:	080027d1 	.word	0x080027d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	73fb      	strb	r3, [r7, #15]
      break;
 80027bc:	e02f      	b.n	800281e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d024      	beq.n	8002814 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027ce:	e021      	b.n	8002814 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027d8:	d11e      	bne.n	8002818 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80027de:	e01b      	b.n	8002818 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d902      	bls.n	80027ec <DMA_CheckFifoParam+0xb4>
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d003      	beq.n	80027f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80027ea:	e018      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      break;
 80027f0:	e015      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00e      	beq.n	800281c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
      break;
 8002802:	e00b      	b.n	800281c <DMA_CheckFifoParam+0xe4>
      break;
 8002804:	bf00      	nop
 8002806:	e00a      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 8002808:	bf00      	nop
 800280a:	e008      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 800280c:	bf00      	nop
 800280e:	e006      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 8002810:	bf00      	nop
 8002812:	e004      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 8002814:	bf00      	nop
 8002816:	e002      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;   
 8002818:	bf00      	nop
 800281a:	e000      	b.n	800281e <DMA_CheckFifoParam+0xe6>
      break;
 800281c:	bf00      	nop
    }
  } 
  
  return status; 
 800281e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800283e:	2300      	movs	r3, #0
 8002840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	e159      	b.n	8002afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002848:	2201      	movs	r2, #1
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	4013      	ands	r3, r2
 800285a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	429a      	cmp	r2, r3
 8002862:	f040 8148 	bne.w	8002af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d00b      	beq.n	8002886 <HAL_GPIO_Init+0x5a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d007      	beq.n	8002886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287a:	2b11      	cmp	r3, #17
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b12      	cmp	r3, #18
 8002884:	d130      	bne.n	80028e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	2203      	movs	r2, #3
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028bc:	2201      	movs	r2, #1
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 0201 	and.w	r2, r3, #1
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	2203      	movs	r2, #3
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	4013      	ands	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b02      	cmp	r3, #2
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0xfc>
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b12      	cmp	r3, #18
 8002926:	d123      	bne.n	8002970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	08da      	lsrs	r2, r3, #3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3208      	adds	r2, #8
 8002930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	f003 0307 	and.w	r3, r3, #7
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	220f      	movs	r2, #15
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4313      	orrs	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	69b9      	ldr	r1, [r7, #24]
 800296c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0203 	and.w	r2, r3, #3
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	005b      	lsls	r3, r3, #1
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 80a2 	beq.w	8002af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
 80029b6:	4b56      	ldr	r3, [pc, #344]	; (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	6453      	str	r3, [r2, #68]	; 0x44
 80029c2:	4b53      	ldr	r3, [pc, #332]	; (8002b10 <HAL_GPIO_Init+0x2e4>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ce:	4a51      	ldr	r2, [pc, #324]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	089b      	lsrs	r3, r3, #2
 80029d4:	3302      	adds	r3, #2
 80029d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4013      	ands	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a48      	ldr	r2, [pc, #288]	; (8002b18 <HAL_GPIO_Init+0x2ec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x202>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a47      	ldr	r2, [pc, #284]	; (8002b1c <HAL_GPIO_Init+0x2f0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x1fe>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a46      	ldr	r2, [pc, #280]	; (8002b20 <HAL_GPIO_Init+0x2f4>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x1fa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a45      	ldr	r2, [pc, #276]	; (8002b24 <HAL_GPIO_Init+0x2f8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x1f6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a44      	ldr	r2, [pc, #272]	; (8002b28 <HAL_GPIO_Init+0x2fc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x1f2>
 8002a1a:	2304      	movs	r3, #4
 8002a1c:	e008      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a22:	2303      	movs	r3, #3
 8002a24:	e004      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e002      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	f002 0203 	and.w	r2, r2, #3
 8002a36:	0092      	lsls	r2, r2, #2
 8002a38:	4093      	lsls	r3, r2
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a40:	4934      	ldr	r1, [pc, #208]	; (8002b14 <HAL_GPIO_Init+0x2e8>)
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a4e:	4b37      	ldr	r3, [pc, #220]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a72:	4a2e      	ldr	r2, [pc, #184]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a78:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a9c:	4a23      	ldr	r2, [pc, #140]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002acc:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d003      	beq.n	8002af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002af0:	4a0e      	ldr	r2, [pc, #56]	; (8002b2c <HAL_GPIO_Init+0x300>)
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3301      	adds	r3, #1
 8002afa:	61fb      	str	r3, [r7, #28]
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	f67f aea2 	bls.w	8002848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b04:	bf00      	nop
 8002b06:	3724      	adds	r7, #36	; 0x24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40013800 	.word	0x40013800
 8002b18:	40020000 	.word	0x40020000
 8002b1c:	40020400 	.word	0x40020400
 8002b20:	40020800 	.word	0x40020800
 8002b24:	40020c00 	.word	0x40020c00
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40013c00 	.word	0x40013c00

08002b30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	460b      	mov	r3, r1
 8002b3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	887b      	ldrh	r3, [r7, #2]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d002      	beq.n	8002b4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
 8002b4c:	e001      	b.n	8002b52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	807b      	strh	r3, [r7, #2]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b70:	787b      	ldrb	r3, [r7, #1]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b76:	887a      	ldrh	r2, [r7, #2]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b7c:	e003      	b.n	8002b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	619a      	str	r2, [r3, #24]
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b9e:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba0:	695a      	ldr	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bac:	88fb      	ldrh	r3, [r7, #6]
 8002bae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f806 	bl	8002bc4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002bda:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bdc:	b08f      	sub	sp, #60	; 0x3c
 8002bde:	af0a      	add	r7, sp, #40	; 0x28
 8002be0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e054      	b.n	8002c96 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d106      	bne.n	8002c0c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f00b fae0 	bl	800e1cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2203      	movs	r2, #3
 8002c10:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f005 f806 	bl	8007c3c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	603b      	str	r3, [r7, #0]
 8002c36:	687e      	ldr	r6, [r7, #4]
 8002c38:	466d      	mov	r5, sp
 8002c3a:	f106 0410 	add.w	r4, r6, #16
 8002c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c4e:	1d33      	adds	r3, r6, #4
 8002c50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	f004 ff80 	bl	8007b58 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fffd 	bl	8007c5e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	603b      	str	r3, [r7, #0]
 8002c6a:	687e      	ldr	r6, [r7, #4]
 8002c6c:	466d      	mov	r5, sp
 8002c6e:	f106 0410 	add.w	r4, r6, #16
 8002c72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c82:	1d33      	adds	r3, r6, #4
 8002c84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c86:	6838      	ldr	r0, [r7, #0]
 8002c88:	f005 f910 	bl	8007eac <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c9e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002c9e:	b590      	push	{r4, r7, lr}
 8002ca0:	b089      	sub	sp, #36	; 0x24
 8002ca2:	af04      	add	r7, sp, #16
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	4608      	mov	r0, r1
 8002ca8:	4611      	mov	r1, r2
 8002caa:	461a      	mov	r2, r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	70fb      	strb	r3, [r7, #3]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	70bb      	strb	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_HCD_HC_Init+0x28>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e07f      	b.n	8002dc6 <HAL_HCD_HC_Init+0x128>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	333d      	adds	r3, #61	; 0x3d
 8002cde:	2200      	movs	r2, #0
 8002ce0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4413      	add	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	440b      	add	r3, r1
 8002cf0:	3338      	adds	r3, #56	; 0x38
 8002cf2:	787a      	ldrb	r2, [r7, #1]
 8002cf4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	440b      	add	r3, r1
 8002d04:	3340      	adds	r3, #64	; 0x40
 8002d06:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d08:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	440b      	add	r3, r1
 8002d18:	3339      	adds	r3, #57	; 0x39
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	440b      	add	r3, r1
 8002d2c:	333f      	adds	r3, #63	; 0x3f
 8002d2e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	78bb      	ldrb	r3, [r7, #2]
 8002d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d3c:	b2d8      	uxtb	r0, r3
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	4413      	add	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	440b      	add	r3, r1
 8002d4a:	333a      	adds	r3, #58	; 0x3a
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da0a      	bge.n	8002d6e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	00db      	lsls	r3, r3, #3
 8002d64:	440b      	add	r3, r1
 8002d66:	333b      	adds	r3, #59	; 0x3b
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]
 8002d6c:	e009      	b.n	8002d82 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	440b      	add	r3, r1
 8002d7c:	333b      	adds	r3, #59	; 0x3b
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	333c      	adds	r3, #60	; 0x3c
 8002d92:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002d96:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6818      	ldr	r0, [r3, #0]
 8002d9c:	787c      	ldrb	r4, [r7, #1]
 8002d9e:	78ba      	ldrb	r2, [r7, #2]
 8002da0:	78f9      	ldrb	r1, [r7, #3]
 8002da2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002da4:	9302      	str	r3, [sp, #8]
 8002da6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002daa:	9301      	str	r3, [sp, #4]
 8002dac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	4623      	mov	r3, r4
 8002db4:	f005 f9fc 	bl	80081b0 <USB_HC_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd90      	pop	{r4, r7, pc}

08002dce <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_HCD_HC_Halt+0x1e>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e00f      	b.n	8002e0c <HAL_HCD_HC_Halt+0x3e>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 fc36 	bl	800866e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	70fb      	strb	r3, [r7, #3]
 8002e26:	460b      	mov	r3, r1
 8002e28:	70bb      	strb	r3, [r7, #2]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	333b      	adds	r3, #59	; 0x3b
 8002e3e:	78ba      	ldrb	r2, [r7, #2]
 8002e40:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	440b      	add	r3, r1
 8002e50:	333f      	adds	r3, #63	; 0x3f
 8002e52:	787a      	ldrb	r2, [r7, #1]
 8002e54:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e56:	7c3b      	ldrb	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d114      	bne.n	8002e86 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	6879      	ldr	r1, [r7, #4]
 8002e60:	4613      	mov	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	440b      	add	r3, r1
 8002e6a:	3342      	adds	r3, #66	; 0x42
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	440b      	add	r3, r1
 8002e7e:	333d      	adds	r3, #61	; 0x3d
 8002e80:	7f3a      	ldrb	r2, [r7, #28]
 8002e82:	701a      	strb	r2, [r3, #0]
 8002e84:	e009      	b.n	8002e9a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e86:	78fa      	ldrb	r2, [r7, #3]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	4413      	add	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	440b      	add	r3, r1
 8002e94:	3342      	adds	r3, #66	; 0x42
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e9a:	787b      	ldrb	r3, [r7, #1]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	f200 80d6 	bhi.w	800304e <HAL_HCD_HC_SubmitRequest+0x23a>
 8002ea2:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08003039 	.word	0x08003039
 8002eb0:	08002f25 	.word	0x08002f25
 8002eb4:	08002faf 	.word	0x08002faf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002eb8:	7c3b      	ldrb	r3, [r7, #16]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	f040 80c9 	bne.w	8003052 <HAL_HCD_HC_SubmitRequest+0x23e>
 8002ec0:	78bb      	ldrb	r3, [r7, #2]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f040 80c5 	bne.w	8003052 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002ec8:	8b3b      	ldrh	r3, [r7, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	440b      	add	r3, r1
 8002edc:	3351      	adds	r3, #81	; 0x51
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	4413      	add	r3, r2
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	440b      	add	r3, r1
 8002ef0:	3351      	adds	r3, #81	; 0x51
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10a      	bne.n	8002f0e <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	440b      	add	r3, r1
 8002f06:	3342      	adds	r3, #66	; 0x42
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f0c:	e0a1      	b.n	8003052 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3342      	adds	r3, #66	; 0x42
 8002f1e:	2202      	movs	r2, #2
 8002f20:	701a      	strb	r2, [r3, #0]
      break;
 8002f22:	e096      	b.n	8003052 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f24:	78bb      	ldrb	r3, [r7, #2]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d120      	bne.n	8002f6c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	3351      	adds	r3, #81	; 0x51
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10a      	bne.n	8002f56 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	4613      	mov	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4413      	add	r3, r2
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	440b      	add	r3, r1
 8002f4e:	3342      	adds	r3, #66	; 0x42
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f54:	e07e      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	3342      	adds	r3, #66	; 0x42
 8002f66:	2202      	movs	r2, #2
 8002f68:	701a      	strb	r2, [r3, #0]
      break;
 8002f6a:	e073      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	6879      	ldr	r1, [r7, #4]
 8002f70:	4613      	mov	r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	440b      	add	r3, r1
 8002f7a:	3350      	adds	r3, #80	; 0x50
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10a      	bne.n	8002f98 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	440b      	add	r3, r1
 8002f90:	3342      	adds	r3, #66	; 0x42
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
      break;
 8002f96:	e05d      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	440b      	add	r3, r1
 8002fa6:	3342      	adds	r3, #66	; 0x42
 8002fa8:	2202      	movs	r2, #2
 8002faa:	701a      	strb	r2, [r3, #0]
      break;
 8002fac:	e052      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002fae:	78bb      	ldrb	r3, [r7, #2]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d120      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	440b      	add	r3, r1
 8002fc2:	3351      	adds	r3, #81	; 0x51
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10a      	bne.n	8002fe0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3342      	adds	r3, #66	; 0x42
 8002fda:	2200      	movs	r2, #0
 8002fdc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fde:	e039      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3342      	adds	r3, #66	; 0x42
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]
      break;
 8002ff4:	e02e      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3350      	adds	r3, #80	; 0x50
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
      break;
 8003020:	e018      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e00d      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	6879      	ldr	r1, [r7, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	440b      	add	r3, r1
 8003046:	3342      	adds	r3, #66	; 0x42
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
      break;
 800304c:	e002      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 800304e:	bf00      	nop
 8003050:	e000      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8003052:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3344      	adds	r3, #68	; 0x44
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	8b39      	ldrh	r1, [r7, #24]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4403      	add	r3, r0
 8003078:	3348      	adds	r3, #72	; 0x48
 800307a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4413      	add	r3, r2
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	440b      	add	r3, r1
 800308a:	335c      	adds	r3, #92	; 0x5c
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	334c      	adds	r3, #76	; 0x4c
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	3339      	adds	r3, #57	; 0x39
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80030b8:	78fa      	ldrb	r2, [r7, #3]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	440b      	add	r3, r1
 80030c6:	335d      	adds	r3, #93	; 0x5d
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	3338      	adds	r3, #56	; 0x38
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	18d1      	adds	r1, r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	461a      	mov	r2, r3
 80030e8:	f005 f96c 	bl	80083c4 <USB_HC_StartXfer>
 80030ec:	4603      	mov	r3, r0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop

080030f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f004 fe89 	bl	8007e26 <USB_GetMode>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	f040 80ef 	bne.w	80032fa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f004 fe6d 	bl	8007e00 <USB_ReadInterrupts>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80e5 	beq.w	80032f8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f004 fe64 	bl	8007e00 <USB_ReadInterrupts>
 8003138:	4603      	mov	r3, r0
 800313a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800313e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003142:	d104      	bne.n	800314e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800314c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f004 fe54 	bl	8007e00 <USB_ReadInterrupts>
 8003158:	4603      	mov	r3, r0
 800315a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003162:	d104      	bne.n	800316e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800316c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f004 fe44 	bl	8007e00 <USB_ReadInterrupts>
 8003178:	4603      	mov	r3, r0
 800317a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800317e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003182:	d104      	bne.n	800318e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800318c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f004 fe34 	bl	8007e00 <USB_ReadInterrupts>
 8003198:	4603      	mov	r3, r0
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d103      	bne.n	80031aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2202      	movs	r2, #2
 80031a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4618      	mov	r0, r3
 80031b0:	f004 fe26 	bl	8007e00 <USB_ReadInterrupts>
 80031b4:	4603      	mov	r3, r0
 80031b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031be:	d115      	bne.n	80031ec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d108      	bne.n	80031ec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f00b f874 	bl	800e2c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2101      	movs	r1, #1
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 ff1c 	bl	8008024 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f004 fe05 	bl	8007e00 <USB_ReadInterrupts>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003200:	d102      	bne.n	8003208 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 f966 	bl	80044d4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 fdf7 	bl	8007e00 <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d106      	bne.n	800322a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f00b f837 	bl	800e290 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2208      	movs	r2, #8
 8003228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f004 fde6 	bl	8007e00 <USB_ReadInterrupts>
 8003234:	4603      	mov	r3, r0
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800323e:	d138      	bne.n	80032b2 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f005 fa01 	bl	800864c <USB_HC_ReadInterrupt>
 800324a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	617b      	str	r3, [r7, #20]
 8003250:	e025      	b.n	800329e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	fa22 f303 	lsr.w	r3, r2, r3
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d018      	beq.n	8003298 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	015a      	lsls	r2, r3, #5
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	4413      	add	r3, r2
 800326e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800327c:	d106      	bne.n	800328c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f000 f8cf 	bl	8003428 <HCD_HC_IN_IRQHandler>
 800328a:	e005      	b.n	8003298 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	4619      	mov	r1, r3
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fcfd 	bl	8003c92 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3301      	adds	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d3d4      	bcc.n	8003252 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f004 fda2 	bl	8007e00 <USB_ReadInterrupts>
 80032bc:	4603      	mov	r3, r0
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d101      	bne.n	80032ca <HAL_HCD_IRQHandler+0x1d2>
 80032c6:	2301      	movs	r3, #1
 80032c8:	e000      	b.n	80032cc <HAL_HCD_IRQHandler+0x1d4>
 80032ca:	2300      	movs	r3, #0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d014      	beq.n	80032fa <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f001 f84b 	bl	800437c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699a      	ldr	r2, [r3, #24]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 0210 	orr.w	r2, r2, #16
 80032f4:	619a      	str	r2, [r3, #24]
 80032f6:	e000      	b.n	80032fa <HAL_HCD_IRQHandler+0x202>
      return;
 80032f8:	bf00      	nop
    }
  }
}
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_HCD_Start+0x16>
 8003312:	2302      	movs	r3, #2
 8003314:	e013      	b.n	800333e <HAL_HCD_Start+0x3e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f004 fc79 	bl	8007c1a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f004 fedc 	bl	80080ec <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}

08003346 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_HCD_Stop+0x16>
 8003358:	2302      	movs	r3, #2
 800335a:	e00d      	b.n	8003378 <HAL_HCD_Stop+0x32>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f005 fabb 	bl	80088e4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f004 fe83 	bl	8008098 <USB_ResetPort>
 8003392:	4603      	mov	r3, r0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	335c      	adds	r3, #92	; 0x5c
 80033b8:	781b      	ldrb	r3, [r3, #0]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	334c      	adds	r3, #76	; 0x4c
 80033e2:	681b      	ldr	r3, [r3, #0]
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f004 fec5 	bl	800818c <USB_GetCurrentFrame>
 8003402:	4603      	mov	r3, r0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f004 fea0 	bl	800815e <USB_GetHostSpeed>
 800341e:	4603      	mov	r3, r0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	015a      	lsls	r2, r3, #5
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4413      	add	r3, r2
 800344a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b04      	cmp	r3, #4
 8003456:	d119      	bne.n	800348c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003464:	461a      	mov	r2, r3
 8003466:	2304      	movs	r3, #4
 8003468:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	0151      	lsls	r1, r2, #5
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	440a      	add	r2, r1
 8003480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	60d3      	str	r3, [r2, #12]
 800348a:	e0ce      	b.n	800362a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a2:	d12c      	bne.n	80034fe <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	015a      	lsls	r2, r3, #5
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	4413      	add	r3, r2
 80034ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034b0:	461a      	mov	r2, r3
 80034b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	335d      	adds	r3, #93	; 0x5d
 80034c8:	2207      	movs	r2, #7
 80034ca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	0151      	lsls	r1, r2, #5
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	440a      	add	r2, r1
 80034e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e6:	f043 0302 	orr.w	r3, r3, #2
 80034ea:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f005 f8b9 	bl	800866e <USB_HC_Halt>
 80034fc:	e095      	b.n	800362a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	015a      	lsls	r2, r3, #5
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4413      	add	r3, r2
 8003506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b20      	cmp	r3, #32
 8003512:	d109      	bne.n	8003528 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4413      	add	r3, r2
 800351c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003520:	461a      	mov	r2, r3
 8003522:	2320      	movs	r3, #32
 8003524:	6093      	str	r3, [r2, #8]
 8003526:	e080      	b.n	800362a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b08      	cmp	r3, #8
 800353c:	d134      	bne.n	80035a8 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	015a      	lsls	r2, r3, #5
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4413      	add	r3, r2
 8003546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	0151      	lsls	r1, r2, #5
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	440a      	add	r2, r1
 8003554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003558:	f043 0302 	orr.w	r3, r3, #2
 800355c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	440b      	add	r3, r1
 800356c:	335d      	adds	r3, #93	; 0x5d
 800356e:	2205      	movs	r2, #5
 8003570:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	015a      	lsls	r2, r3, #5
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	4413      	add	r3, r2
 800357a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357e:	461a      	mov	r2, r3
 8003580:	2310      	movs	r3, #16
 8003582:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2308      	movs	r3, #8
 8003594:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 f864 	bl	800866e <USB_HC_Halt>
 80035a6:	e040      	b.n	800362a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035be:	d134      	bne.n	800362a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 f83f 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035fc:	461a      	mov	r2, r3
 80035fe:	2310      	movs	r3, #16
 8003600:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	4613      	mov	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	440b      	add	r3, r1
 8003610:	335d      	adds	r3, #93	; 0x5d
 8003612:	2208      	movs	r2, #8
 8003614:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	015a      	lsls	r2, r3, #5
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4413      	add	r3, r2
 800361e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003622:	461a      	mov	r2, r3
 8003624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003628:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003640:	d122      	bne.n	8003688 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	0151      	lsls	r1, r2, #5
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	440a      	add	r2, r1
 8003658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f004 fffe 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	015a      	lsls	r2, r3, #5
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	4413      	add	r3, r2
 800367a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800367e:	461a      	mov	r2, r3
 8003680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003684:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003686:	e300      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	015a      	lsls	r2, r3, #5
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	4413      	add	r3, r2
 8003690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	f040 80fd 	bne.w	800389a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d01b      	beq.n	80036e0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	3348      	adds	r3, #72	; 0x48
 80036b8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	0159      	lsls	r1, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	440b      	add	r3, r1
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80036cc:	1ad1      	subs	r1, r2, r3
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	4403      	add	r3, r0
 80036dc:	334c      	adds	r3, #76	; 0x4c
 80036de:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	440b      	add	r3, r1
 80036ee:	335d      	adds	r3, #93	; 0x5d
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	440b      	add	r3, r1
 8003702:	3358      	adds	r3, #88	; 0x58
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	4413      	add	r3, r2
 8003710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003714:	461a      	mov	r2, r3
 8003716:	2301      	movs	r3, #1
 8003718:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800371a:	6879      	ldr	r1, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4613      	mov	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	4413      	add	r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	440b      	add	r3, r1
 8003728:	333f      	adds	r3, #63	; 0x3f
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	440b      	add	r3, r1
 800373e:	333f      	adds	r3, #63	; 0x3f
 8003740:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003742:	2b02      	cmp	r3, #2
 8003744:	d121      	bne.n	800378a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	440a      	add	r2, r1
 800375c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003760:	f043 0302 	orr.w	r3, r3, #2
 8003764:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f004 ff7c 	bl	800866e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	461a      	mov	r2, r3
 8003784:	2310      	movs	r3, #16
 8003786:	6093      	str	r3, [r2, #8]
 8003788:	e070      	b.n	800386c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	333f      	adds	r3, #63	; 0x3f
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d12a      	bne.n	80037f6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	0151      	lsls	r1, r2, #5
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	440a      	add	r2, r1
 80037b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037be:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	335c      	adds	r3, #92	; 0x5c
 80037d0:	2201      	movs	r2, #1
 80037d2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	b2d8      	uxtb	r0, r3
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	440b      	add	r3, r1
 80037e6:	335c      	adds	r3, #92	; 0x5c
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4601      	mov	r1, r0
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f00a fd78 	bl	800e2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80037f4:	e03a      	b.n	800386c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	440b      	add	r3, r1
 8003804:	333f      	adds	r3, #63	; 0x3f
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d12f      	bne.n	800386c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	440b      	add	r3, r1
 800381a:	335c      	adds	r3, #92	; 0x5c
 800381c:	2201      	movs	r2, #1
 800381e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	3350      	adds	r3, #80	; 0x50
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	f083 0301 	eor.w	r3, r3, #1
 8003836:	b2d8      	uxtb	r0, r3
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4613      	mov	r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	440b      	add	r3, r1
 8003846:	3350      	adds	r3, #80	; 0x50
 8003848:	4602      	mov	r2, r0
 800384a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	b2d8      	uxtb	r0, r3
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	335c      	adds	r3, #92	; 0x5c
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	461a      	mov	r2, r3
 8003864:	4601      	mov	r1, r0
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f00a fd3c 	bl	800e2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	3350      	adds	r3, #80	; 0x50
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2d8      	uxtb	r0, r3
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	440b      	add	r3, r1
 8003892:	3350      	adds	r3, #80	; 0x50
 8003894:	4602      	mov	r2, r0
 8003896:	701a      	strb	r2, [r3, #0]
}
 8003898:	e1f7      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	f040 811a 	bne.w	8003ae6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	0151      	lsls	r1, r2, #5
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	440a      	add	r2, r1
 80038c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038cc:	f023 0302 	bic.w	r3, r3, #2
 80038d0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038d2:	6879      	ldr	r1, [r7, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4613      	mov	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	00db      	lsls	r3, r3, #3
 80038de:	440b      	add	r3, r1
 80038e0:	335d      	adds	r3, #93	; 0x5d
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d10a      	bne.n	80038fe <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80038e8:	6879      	ldr	r1, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	440b      	add	r3, r1
 80038f6:	335c      	adds	r3, #92	; 0x5c
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
 80038fc:	e0d9      	b.n	8003ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4613      	mov	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	4413      	add	r3, r2
 8003908:	00db      	lsls	r3, r3, #3
 800390a:	440b      	add	r3, r1
 800390c:	335d      	adds	r3, #93	; 0x5d
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b05      	cmp	r3, #5
 8003912:	d10a      	bne.n	800392a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	440b      	add	r3, r1
 8003922:	335c      	adds	r3, #92	; 0x5c
 8003924:	2205      	movs	r2, #5
 8003926:	701a      	strb	r2, [r3, #0]
 8003928:	e0c3      	b.n	8003ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	440b      	add	r3, r1
 8003938:	335d      	adds	r3, #93	; 0x5d
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b06      	cmp	r3, #6
 800393e:	d00a      	beq.n	8003956 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	440b      	add	r3, r1
 800394e:	335d      	adds	r3, #93	; 0x5d
 8003950:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003952:	2b08      	cmp	r3, #8
 8003954:	d156      	bne.n	8003a04 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	440b      	add	r3, r1
 8003964:	3358      	adds	r3, #88	; 0x58
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1c59      	adds	r1, r3, #1
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	4613      	mov	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	4413      	add	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4403      	add	r3, r0
 8003978:	3358      	adds	r3, #88	; 0x58
 800397a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	440b      	add	r3, r1
 800398a:	3358      	adds	r3, #88	; 0x58
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b03      	cmp	r3, #3
 8003990:	d914      	bls.n	80039bc <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	440b      	add	r3, r1
 80039a0:	3358      	adds	r3, #88	; 0x58
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	335c      	adds	r3, #92	; 0x5c
 80039b6:	2204      	movs	r2, #4
 80039b8:	701a      	strb	r2, [r3, #0]
 80039ba:	e009      	b.n	80039d0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4613      	mov	r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	440b      	add	r3, r1
 80039ca:	335c      	adds	r3, #92	; 0x5c
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039e6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039ee:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	e056      	b.n	8003ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4413      	add	r3, r2
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	440b      	add	r3, r1
 8003a12:	335d      	adds	r3, #93	; 0x5d
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b03      	cmp	r3, #3
 8003a18:	d123      	bne.n	8003a62 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	440b      	add	r3, r1
 8003a28:	335c      	adds	r3, #92	; 0x5c
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a44:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a4c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e027      	b.n	8003ab2 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	335d      	adds	r3, #93	; 0x5d
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b07      	cmp	r3, #7
 8003a76:	d11c      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	3358      	adds	r3, #88	; 0x58
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	4403      	add	r3, r0
 8003a9a:	3358      	adds	r3, #88	; 0x58
 8003a9c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	00db      	lsls	r3, r3, #3
 8003aaa:	440b      	add	r3, r1
 8003aac:	335c      	adds	r3, #92	; 0x5c
 8003aae:	2204      	movs	r2, #4
 8003ab0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	b2d8      	uxtb	r0, r3
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4613      	mov	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	00db      	lsls	r3, r3, #3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	335c      	adds	r3, #92	; 0x5c
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	4601      	mov	r1, r0
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f00a fc00 	bl	800e2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ae4:	e0d1      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af8:	2b80      	cmp	r3, #128	; 0x80
 8003afa:	d13e      	bne.n	8003b7a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	015a      	lsls	r2, r3, #5
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	4413      	add	r3, r2
 8003b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	0151      	lsls	r1, r2, #5
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	440a      	add	r2, r1
 8003b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b16:	f043 0302 	orr.w	r3, r3, #2
 8003b1a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4613      	mov	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4413      	add	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3358      	adds	r3, #88	; 0x58
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	1c59      	adds	r1, r3, #1
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4403      	add	r3, r0
 8003b3e:	3358      	adds	r3, #88	; 0x58
 8003b40:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	335d      	adds	r3, #93	; 0x5d
 8003b52:	2206      	movs	r2, #6
 8003b54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f004 fd84 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b72:	461a      	mov	r2, r3
 8003b74:	2380      	movs	r3, #128	; 0x80
 8003b76:	6093      	str	r3, [r2, #8]
}
 8003b78:	e087      	b.n	8003c8a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d17c      	bne.n	8003c8a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b90:	6879      	ldr	r1, [r7, #4]
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	440b      	add	r3, r1
 8003b9e:	333f      	adds	r3, #63	; 0x3f
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d122      	bne.n	8003bec <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3358      	adds	r3, #88	; 0x58
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	015a      	lsls	r2, r3, #5
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	0151      	lsls	r1, r2, #5
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	440a      	add	r2, r1
 8003bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f004 fd42 	bl	800866e <USB_HC_Halt>
 8003bea:	e045      	b.n	8003c78 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	333f      	adds	r3, #63	; 0x3f
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	333f      	adds	r3, #63	; 0x3f
 8003c12:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d12f      	bne.n	8003c78 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	3358      	adds	r3, #88	; 0x58
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d121      	bne.n	8003c78 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	440b      	add	r3, r1
 8003c42:	335d      	adds	r3, #93	; 0x5d
 8003c44:	2203      	movs	r2, #3
 8003c46:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	0151      	lsls	r1, r2, #5
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	440a      	add	r2, r1
 8003c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c62:	f043 0302 	orr.w	r3, r3, #2
 8003c66:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	4611      	mov	r1, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f004 fcfb 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c84:	461a      	mov	r2, r3
 8003c86:	2310      	movs	r3, #16
 8003c88:	6093      	str	r3, [r2, #8]
}
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003ca8:	78fb      	ldrb	r3, [r7, #3]
 8003caa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 0304 	and.w	r3, r3, #4
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d119      	bne.n	8003cf6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cce:	461a      	mov	r2, r3
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	0151      	lsls	r1, r2, #5
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	440a      	add	r2, r1
 8003cea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cee:	f043 0302 	orr.w	r3, r3, #2
 8003cf2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cf4:	e33e      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	2b20      	cmp	r3, #32
 8003d0a:	d141      	bne.n	8003d90 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d18:	461a      	mov	r2, r3
 8003d1a:	2320      	movs	r3, #32
 8003d1c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003d1e:	6879      	ldr	r1, [r7, #4]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4613      	mov	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	4413      	add	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	440b      	add	r3, r1
 8003d2c:	333d      	adds	r3, #61	; 0x3d
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	f040 831f 	bne.w	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	440b      	add	r3, r1
 8003d44:	333d      	adds	r3, #61	; 0x3d
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	440b      	add	r3, r1
 8003d58:	335c      	adds	r3, #92	; 0x5c
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d78:	f043 0302 	orr.w	r3, r3, #2
 8003d7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f004 fc70 	bl	800866e <USB_HC_Halt>
}
 8003d8e:	e2f1      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da2:	2b40      	cmp	r3, #64	; 0x40
 8003da4:	d13f      	bne.n	8003e26 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4613      	mov	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4413      	add	r3, r2
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	440b      	add	r3, r1
 8003db4:	335d      	adds	r3, #93	; 0x5d
 8003db6:	2204      	movs	r2, #4
 8003db8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	440b      	add	r3, r1
 8003dc8:	333d      	adds	r3, #61	; 0x3d
 8003dca:	2201      	movs	r2, #1
 8003dcc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	440b      	add	r3, r1
 8003ddc:	3358      	adds	r3, #88	; 0x58
 8003dde:	2200      	movs	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	015a      	lsls	r2, r3, #5
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4413      	add	r3, r2
 8003dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	0151      	lsls	r1, r2, #5
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	440a      	add	r2, r1
 8003df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dfc:	f043 0302 	orr.w	r3, r3, #2
 8003e00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f004 fc2e 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1e:	461a      	mov	r2, r3
 8003e20:	2340      	movs	r3, #64	; 0x40
 8003e22:	6093      	str	r3, [r2, #8]
}
 8003e24:	e2a6      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3c:	d122      	bne.n	8003e84 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	0151      	lsls	r1, r2, #5
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	440a      	add	r2, r1
 8003e54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	4611      	mov	r1, r2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f004 fc00 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e80:	6093      	str	r3, [r2, #8]
}
 8003e82:	e277      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d135      	bne.n	8003f06 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3358      	adds	r3, #88	; 0x58
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	0151      	lsls	r1, r2, #5
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	440a      	add	r2, r1
 8003ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ec8:	f043 0302 	orr.w	r3, r3, #2
 8003ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f004 fbc8 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eea:	461a      	mov	r2, r3
 8003eec:	2301      	movs	r3, #1
 8003eee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ef0:	6879      	ldr	r1, [r7, #4]
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	440b      	add	r3, r1
 8003efe:	335d      	adds	r3, #93	; 0x5d
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
}
 8003f04:	e236      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	015a      	lsls	r2, r3, #5
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d12b      	bne.n	8003f74 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	0151      	lsls	r1, r2, #5
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	440a      	add	r2, r1
 8003f44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f48:	f043 0302 	orr.w	r3, r3, #2
 8003f4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f004 fb88 	bl	800866e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	440b      	add	r3, r1
 8003f6c:	335d      	adds	r3, #93	; 0x5d
 8003f6e:	2205      	movs	r2, #5
 8003f70:	701a      	strb	r2, [r3, #0]
}
 8003f72:	e1ff      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d155      	bne.n	8004036 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4413      	add	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	440b      	add	r3, r1
 8003f98:	3358      	adds	r3, #88	; 0x58
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	440b      	add	r3, r1
 8003fac:	335d      	adds	r3, #93	; 0x5d
 8003fae:	2203      	movs	r2, #3
 8003fb0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	333d      	adds	r3, #61	; 0x3d
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d114      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	00db      	lsls	r3, r3, #3
 8003fd4:	440b      	add	r3, r1
 8003fd6:	333c      	adds	r3, #60	; 0x3c
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d109      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fde:	6879      	ldr	r1, [r7, #4]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4413      	add	r3, r2
 8003fe8:	00db      	lsls	r3, r3, #3
 8003fea:	440b      	add	r3, r1
 8003fec:	333d      	adds	r3, #61	; 0x3d
 8003fee:	2201      	movs	r2, #1
 8003ff0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	693a      	ldr	r2, [r7, #16]
 8004006:	440a      	add	r2, r1
 8004008:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f004 fb26 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	015a      	lsls	r2, r3, #5
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800402e:	461a      	mov	r2, r3
 8004030:	2310      	movs	r3, #16
 8004032:	6093      	str	r3, [r2, #8]
}
 8004034:	e19e      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	015a      	lsls	r2, r3, #5
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4413      	add	r3, r2
 800403e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b80      	cmp	r3, #128	; 0x80
 800404a:	d12b      	bne.n	80040a4 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	015a      	lsls	r2, r3, #5
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	4413      	add	r3, r2
 8004054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	0151      	lsls	r1, r2, #5
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	440a      	add	r2, r1
 8004062:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004066:	f043 0302 	orr.w	r3, r3, #2
 800406a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	b2d2      	uxtb	r2, r2
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f004 faf9 	bl	800866e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4613      	mov	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	335d      	adds	r3, #93	; 0x5d
 800408c:	2206      	movs	r2, #6
 800408e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800409c:	461a      	mov	r2, r3
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	6093      	str	r3, [r2, #8]
}
 80040a2:	e167      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040ba:	d135      	bne.n	8004128 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	0151      	lsls	r1, r2, #5
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	440a      	add	r2, r1
 80040d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040d6:	f043 0302 	orr.w	r3, r3, #2
 80040da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	4611      	mov	r1, r2
 80040e6:	4618      	mov	r0, r3
 80040e8:	f004 fac1 	bl	800866e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	015a      	lsls	r2, r3, #5
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040f8:	461a      	mov	r2, r3
 80040fa:	2310      	movs	r3, #16
 80040fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4413      	add	r3, r2
 8004106:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410a:	461a      	mov	r2, r3
 800410c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004110:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	440b      	add	r3, r1
 8004120:	335d      	adds	r3, #93	; 0x5d
 8004122:	2208      	movs	r2, #8
 8004124:	701a      	strb	r2, [r3, #0]
}
 8004126:	e125      	b.n	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	f040 811a 	bne.w	8004374 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	015a      	lsls	r2, r3, #5
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	0151      	lsls	r1, r2, #5
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	440a      	add	r2, r1
 8004156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800415a:	f023 0302 	bic.w	r3, r3, #2
 800415e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	440b      	add	r3, r1
 800416e:	335d      	adds	r3, #93	; 0x5d
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	2b01      	cmp	r3, #1
 8004174:	d137      	bne.n	80041e6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	440b      	add	r3, r1
 8004184:	335c      	adds	r3, #92	; 0x5c
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	440b      	add	r3, r1
 8004198:	333f      	adds	r3, #63	; 0x3f
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d00b      	beq.n	80041b8 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4613      	mov	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	440b      	add	r3, r1
 80041ae:	333f      	adds	r3, #63	; 0x3f
 80041b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	f040 80c5 	bne.w	8004342 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	440b      	add	r3, r1
 80041c6:	3351      	adds	r3, #81	; 0x51
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f083 0301 	eor.w	r3, r3, #1
 80041ce:	b2d8      	uxtb	r0, r3
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4613      	mov	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	440b      	add	r3, r1
 80041de:	3351      	adds	r3, #81	; 0x51
 80041e0:	4602      	mov	r2, r0
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	e0ad      	b.n	8004342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	440b      	add	r3, r1
 80041f4:	335d      	adds	r3, #93	; 0x5d
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d10a      	bne.n	8004212 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	440b      	add	r3, r1
 800420a:	335c      	adds	r3, #92	; 0x5c
 800420c:	2202      	movs	r2, #2
 800420e:	701a      	strb	r2, [r3, #0]
 8004210:	e097      	b.n	8004342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	440b      	add	r3, r1
 8004220:	335d      	adds	r3, #93	; 0x5d
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	2b04      	cmp	r3, #4
 8004226:	d10a      	bne.n	800423e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	440b      	add	r3, r1
 8004236:	335c      	adds	r3, #92	; 0x5c
 8004238:	2202      	movs	r2, #2
 800423a:	701a      	strb	r2, [r3, #0]
 800423c:	e081      	b.n	8004342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	440b      	add	r3, r1
 800424c:	335d      	adds	r3, #93	; 0x5d
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b05      	cmp	r3, #5
 8004252:	d10a      	bne.n	800426a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	440b      	add	r3, r1
 8004262:	335c      	adds	r3, #92	; 0x5c
 8004264:	2205      	movs	r2, #5
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e06b      	b.n	8004342 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	440b      	add	r3, r1
 8004278:	335d      	adds	r3, #93	; 0x5d
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d00a      	beq.n	8004296 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	440b      	add	r3, r1
 800428e:	335d      	adds	r3, #93	; 0x5d
 8004290:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004292:	2b08      	cmp	r3, #8
 8004294:	d155      	bne.n	8004342 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4613      	mov	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4413      	add	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	440b      	add	r3, r1
 80042a4:	3358      	adds	r3, #88	; 0x58
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1c59      	adds	r1, r3, #1
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4613      	mov	r3, r2
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4413      	add	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4403      	add	r3, r0
 80042b8:	3358      	adds	r3, #88	; 0x58
 80042ba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	440b      	add	r3, r1
 80042ca:	3358      	adds	r3, #88	; 0x58
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b03      	cmp	r3, #3
 80042d0:	d914      	bls.n	80042fc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4613      	mov	r3, r2
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	4413      	add	r3, r2
 80042dc:	00db      	lsls	r3, r3, #3
 80042de:	440b      	add	r3, r1
 80042e0:	3358      	adds	r3, #88	; 0x58
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4613      	mov	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	4413      	add	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	440b      	add	r3, r1
 80042f4:	335c      	adds	r3, #92	; 0x5c
 80042f6:	2204      	movs	r2, #4
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	e009      	b.n	8004310 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	4613      	mov	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	440b      	add	r3, r1
 800430a:	335c      	adds	r3, #92	; 0x5c
 800430c:	2202      	movs	r2, #2
 800430e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004326:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800432e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	4413      	add	r3, r2
 800434a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800434e:	461a      	mov	r2, r3
 8004350:	2302      	movs	r3, #2
 8004352:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	b2d8      	uxtb	r0, r3
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	440b      	add	r3, r1
 8004366:	335c      	adds	r3, #92	; 0x5c
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	4601      	mov	r1, r0
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f009 ffb8 	bl	800e2e4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004374:	bf00      	nop
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	0c5b      	lsrs	r3, r3, #17
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043b0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d003      	beq.n	80043c0 <HCD_RXQLVL_IRQHandler+0x44>
 80043b8:	2b05      	cmp	r3, #5
 80043ba:	f000 8082 	beq.w	80044c2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043be:	e083      	b.n	80044c8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d07f      	beq.n	80044c6 <HCD_RXQLVL_IRQHandler+0x14a>
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4613      	mov	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4413      	add	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	440b      	add	r3, r1
 80043d4:	3344      	adds	r3, #68	; 0x44
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d074      	beq.n	80044c6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6818      	ldr	r0, [r3, #0]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	440b      	add	r3, r1
 80043ee:	3344      	adds	r3, #68	; 0x44
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	b292      	uxth	r2, r2
 80043f6:	4619      	mov	r1, r3
 80043f8:	f003 fcd9 	bl	8007dae <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	440b      	add	r3, r1
 800440a:	3344      	adds	r3, #68	; 0x44
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	18d1      	adds	r1, r2, r3
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4403      	add	r3, r0
 8004420:	3344      	adds	r3, #68	; 0x44
 8004422:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	69ba      	ldr	r2, [r7, #24]
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	440b      	add	r3, r1
 8004432:	334c      	adds	r3, #76	; 0x4c
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	18d1      	adds	r1, r2, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	69ba      	ldr	r2, [r7, #24]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4403      	add	r3, r0
 8004448:	334c      	adds	r3, #76	; 0x4c
 800444a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	6a3b      	ldr	r3, [r7, #32]
 8004452:	4413      	add	r3, r2
 8004454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004458:	691a      	ldr	r2, [r3, #16]
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <HCD_RXQLVL_IRQHandler+0x154>)
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d031      	beq.n	80044c6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	4413      	add	r3, r2
 800446a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004478:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004480:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	015a      	lsls	r2, r3, #5
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	4413      	add	r3, r2
 800448a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4613      	mov	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	440b      	add	r3, r1
 80044a2:	3350      	adds	r3, #80	; 0x50
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	f083 0301 	eor.w	r3, r3, #1
 80044aa:	b2d8      	uxtb	r0, r3
 80044ac:	6879      	ldr	r1, [r7, #4]
 80044ae:	69ba      	ldr	r2, [r7, #24]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	3350      	adds	r3, #80	; 0x50
 80044bc:	4602      	mov	r2, r0
 80044be:	701a      	strb	r2, [r3, #0]
      break;
 80044c0:	e001      	b.n	80044c6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80044c2:	bf00      	nop
 80044c4:	e000      	b.n	80044c8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044c6:	bf00      	nop
  }
}
 80044c8:	bf00      	nop
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	1ff80000 	.word	0x1ff80000

080044d4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004500:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d10b      	bne.n	8004524 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	2b01      	cmp	r3, #1
 8004514:	d102      	bne.n	800451c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f009 fec8 	bl	800e2ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b08      	cmp	r3, #8
 800452c:	d132      	bne.n	8004594 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f043 0308 	orr.w	r3, r3, #8
 8004534:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b04      	cmp	r3, #4
 800453e:	d126      	bne.n	800458e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	2b02      	cmp	r3, #2
 8004546:	d113      	bne.n	8004570 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800454e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004552:	d106      	bne.n	8004562 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2102      	movs	r1, #2
 800455a:	4618      	mov	r0, r3
 800455c:	f003 fd62 	bl	8008024 <USB_InitFSLSPClkSel>
 8004560:	e011      	b.n	8004586 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2101      	movs	r1, #1
 8004568:	4618      	mov	r0, r3
 800456a:	f003 fd5b 	bl	8008024 <USB_InitFSLSPClkSel>
 800456e:	e00a      	b.n	8004586 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800457e:	461a      	mov	r2, r3
 8004580:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004584:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f009 feba 	bl	800e300 <HAL_HCD_PortEnabled_Callback>
 800458c:	e002      	b.n	8004594 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f009 fec4 	bl	800e31c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b20      	cmp	r3, #32
 800459c:	d103      	bne.n	80045a6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f043 0320 	orr.w	r3, r3, #32
 80045a4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045ac:	461a      	mov	r2, r3
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	6013      	str	r3, [r2, #0]
}
 80045b2:	bf00      	nop
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e11f      	b.n	800480e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd f868 	bl	80016b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2224      	movs	r2, #36	; 0x24
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800460e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800461e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004620:	f002 fa4e 	bl	8006ac0 <HAL_RCC_GetPCLK1Freq>
 8004624:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4a7b      	ldr	r2, [pc, #492]	; (8004818 <HAL_I2C_Init+0x25c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d807      	bhi.n	8004640 <HAL_I2C_Init+0x84>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a7a      	ldr	r2, [pc, #488]	; (800481c <HAL_I2C_Init+0x260>)
 8004634:	4293      	cmp	r3, r2
 8004636:	bf94      	ite	ls
 8004638:	2301      	movls	r3, #1
 800463a:	2300      	movhi	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	e006      	b.n	800464e <HAL_I2C_Init+0x92>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4a77      	ldr	r2, [pc, #476]	; (8004820 <HAL_I2C_Init+0x264>)
 8004644:	4293      	cmp	r3, r2
 8004646:	bf94      	ite	ls
 8004648:	2301      	movls	r3, #1
 800464a:	2300      	movhi	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0db      	b.n	800480e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4a72      	ldr	r2, [pc, #456]	; (8004824 <HAL_I2C_Init+0x268>)
 800465a:	fba2 2303 	umull	r2, r3, r2, r3
 800465e:	0c9b      	lsrs	r3, r3, #18
 8004660:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	430a      	orrs	r2, r1
 8004674:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4a64      	ldr	r2, [pc, #400]	; (8004818 <HAL_I2C_Init+0x25c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d802      	bhi.n	8004690 <HAL_I2C_Init+0xd4>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	3301      	adds	r3, #1
 800468e:	e009      	b.n	80046a4 <HAL_I2C_Init+0xe8>
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	4a63      	ldr	r2, [pc, #396]	; (8004828 <HAL_I2C_Init+0x26c>)
 800469c:	fba2 2303 	umull	r2, r3, r2, r3
 80046a0:	099b      	lsrs	r3, r3, #6
 80046a2:	3301      	adds	r3, #1
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6812      	ldr	r2, [r2, #0]
 80046a8:	430b      	orrs	r3, r1
 80046aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4956      	ldr	r1, [pc, #344]	; (8004818 <HAL_I2C_Init+0x25c>)
 80046c0:	428b      	cmp	r3, r1
 80046c2:	d80d      	bhi.n	80046e0 <HAL_I2C_Init+0x124>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	1e59      	subs	r1, r3, #1
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d8:	2b04      	cmp	r3, #4
 80046da:	bf38      	it	cc
 80046dc:	2304      	movcc	r3, #4
 80046de:	e04f      	b.n	8004780 <HAL_I2C_Init+0x1c4>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d111      	bne.n	800470c <HAL_I2C_Init+0x150>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	1e58      	subs	r0, r3, #1
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6859      	ldr	r1, [r3, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	440b      	add	r3, r1
 80046f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e012      	b.n	8004732 <HAL_I2C_Init+0x176>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1e58      	subs	r0, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	0099      	lsls	r1, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004722:	3301      	adds	r3, #1
 8004724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004728:	2b00      	cmp	r3, #0
 800472a:	bf0c      	ite	eq
 800472c:	2301      	moveq	r3, #1
 800472e:	2300      	movne	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Init+0x17e>
 8004736:	2301      	movs	r3, #1
 8004738:	e022      	b.n	8004780 <HAL_I2C_Init+0x1c4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10e      	bne.n	8004760 <HAL_I2C_Init+0x1a4>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1e58      	subs	r0, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6859      	ldr	r1, [r3, #4]
 800474a:	460b      	mov	r3, r1
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	440b      	add	r3, r1
 8004750:	fbb0 f3f3 	udiv	r3, r0, r3
 8004754:	3301      	adds	r3, #1
 8004756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800475a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800475e:	e00f      	b.n	8004780 <HAL_I2C_Init+0x1c4>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	1e58      	subs	r0, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6859      	ldr	r1, [r3, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	0099      	lsls	r1, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	fbb0 f3f3 	udiv	r3, r0, r3
 8004776:	3301      	adds	r3, #1
 8004778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	6809      	ldr	r1, [r1, #0]
 8004784:	4313      	orrs	r3, r2
 8004786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69da      	ldr	r2, [r3, #28]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6911      	ldr	r1, [r2, #16]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68d2      	ldr	r2, [r2, #12]
 80047ba:	4311      	orrs	r1, r2
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	6812      	ldr	r2, [r2, #0]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	000186a0 	.word	0x000186a0
 800481c:	001e847f 	.word	0x001e847f
 8004820:	003d08ff 	.word	0x003d08ff
 8004824:	431bde83 	.word	0x431bde83
 8004828:	10624dd3 	.word	0x10624dd3

0800482c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af02      	add	r7, sp, #8
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	460b      	mov	r3, r1
 800483a:	817b      	strh	r3, [r7, #10]
 800483c:	4613      	mov	r3, r2
 800483e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004840:	f7fd fb46 	bl	8001ed0 <HAL_GetTick>
 8004844:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b20      	cmp	r3, #32
 8004850:	f040 80e0 	bne.w	8004a14 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	2319      	movs	r3, #25
 800485a:	2201      	movs	r2, #1
 800485c:	4970      	ldr	r1, [pc, #448]	; (8004a20 <HAL_I2C_Master_Transmit+0x1f4>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fd84 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800486a:	2302      	movs	r3, #2
 800486c:	e0d3      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_I2C_Master_Transmit+0x50>
 8004878:	2302      	movs	r3, #2
 800487a:	e0cc      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d007      	beq.n	80048a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2221      	movs	r2, #33	; 0x21
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2210      	movs	r2, #16
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	893a      	ldrh	r2, [r7, #8]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d8:	b29a      	uxth	r2, r3
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	4a50      	ldr	r2, [pc, #320]	; (8004a24 <HAL_I2C_Master_Transmit+0x1f8>)
 80048e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048e4:	8979      	ldrh	r1, [r7, #10]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6a3a      	ldr	r2, [r7, #32]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 fbf0 	bl	80050d0 <I2C_MasterRequestWrite>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e08d      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048fa:	2300      	movs	r3, #0
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	613b      	str	r3, [r7, #16]
 800490e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004910:	e066      	b.n	80049e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	6a39      	ldr	r1, [r7, #32]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f000 fdfe 	bl	8005518 <I2C_WaitOnTXEFlagUntilTimeout>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00d      	beq.n	800493e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	2b04      	cmp	r3, #4
 8004928:	d107      	bne.n	800493a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004938:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e06b      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	781a      	ldrb	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29a      	uxth	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004966:	3b01      	subs	r3, #1
 8004968:	b29a      	uxth	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b04      	cmp	r3, #4
 800497a:	d11b      	bne.n	80049b4 <HAL_I2C_Master_Transmit+0x188>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004980:	2b00      	cmp	r3, #0
 8004982:	d017      	beq.n	80049b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004988:	781a      	ldrb	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	6a39      	ldr	r1, [r7, #32]
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 fdee 	bl	800559a <I2C_WaitOnBTFFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00d      	beq.n	80049e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d107      	bne.n	80049dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e01a      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d194      	bne.n	8004912 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	e000      	b.n	8004a16 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
  }
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3718      	adds	r7, #24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	00100002 	.word	0x00100002
 8004a24:	ffff0000 	.word	0xffff0000

08004a28 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	607a      	str	r2, [r7, #4]
 8004a32:	461a      	mov	r2, r3
 8004a34:	460b      	mov	r3, r1
 8004a36:	817b      	strh	r3, [r7, #10]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a3c:	f7fd fa48 	bl	8001ed0 <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b20      	cmp	r3, #32
 8004a4c:	f040 820b 	bne.w	8004e66 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	2319      	movs	r3, #25
 8004a56:	2201      	movs	r2, #1
 8004a58:	497c      	ldr	r1, [pc, #496]	; (8004c4c <HAL_I2C_Master_Receive+0x224>)
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f000 fc86 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a66:	2302      	movs	r3, #2
 8004a68:	e1fe      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_I2C_Master_Receive+0x50>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e1f7      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d007      	beq.n	8004a9e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2222      	movs	r2, #34	; 0x22
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2210      	movs	r2, #16
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	893a      	ldrh	r2, [r7, #8]
 8004ace:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <HAL_I2C_Master_Receive+0x228>)
 8004ade:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ae0:	8979      	ldrh	r1, [r7, #10]
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 fb74 	bl	80051d4 <I2C_MasterRequestRead>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e1b8      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d113      	bne.n	8004b26 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afe:	2300      	movs	r3, #0
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	623b      	str	r3, [r7, #32]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	623b      	str	r3, [r7, #32]
 8004b12:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e18c      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d11b      	bne.n	8004b66 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61fb      	str	r3, [r7, #28]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	61fb      	str	r3, [r7, #28]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	61fb      	str	r3, [r7, #28]
 8004b52:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e16c      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d11b      	bne.n	8004ba6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b8e:	2300      	movs	r3, #0
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	e14c      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	617b      	str	r3, [r7, #20]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	617b      	str	r3, [r7, #20]
 8004bca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bcc:	e138      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	f200 80f1 	bhi.w	8004dba <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d123      	bne.n	8004c28 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fd19 	bl	800561c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e139      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c26:	e10b      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d14e      	bne.n	8004cce <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	2200      	movs	r2, #0
 8004c38:	4906      	ldr	r1, [pc, #24]	; (8004c54 <HAL_I2C_Master_Receive+0x22c>)
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fb96 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e10e      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
 8004c4a:	bf00      	nop
 8004c4c:	00100002 	.word	0x00100002
 8004c50:	ffff0000 	.word	0xffff0000
 8004c54:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691a      	ldr	r2, [r3, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	1c5a      	adds	r2, r3, #1
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3b01      	subs	r3, #1
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	691a      	ldr	r2, [r3, #16]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	1c5a      	adds	r2, r3, #1
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b29a      	uxth	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ccc:	e0b8      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4966      	ldr	r1, [pc, #408]	; (8004e70 <HAL_I2C_Master_Receive+0x448>)
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fb47 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0bf      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cf6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2200      	movs	r2, #0
 8004d32:	494f      	ldr	r1, [pc, #316]	; (8004e70 <HAL_I2C_Master_Receive+0x448>)
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f000 fb19 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e091      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d70:	3b01      	subs	r3, #1
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	b2d2      	uxtb	r2, r2
 8004d92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	1c5a      	adds	r2, r3, #1
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da2:	3b01      	subs	r3, #1
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	3b01      	subs	r3, #1
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004db8:	e042      	b.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fc2c 	bl	800561c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e04c      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	b29a      	uxth	r2, r3
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d118      	bne.n	8004e40 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f aec2 	bne.w	8004bce <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	; 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	00010004 	.word	0x00010004

08004e74 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004e84:	f7fd f824 	bl	8001ed0 <HAL_GetTick>
 8004e88:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	f040 8110 	bne.w	80050bc <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	9300      	str	r3, [sp, #0]
 8004ea0:	2319      	movs	r3, #25
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	4988      	ldr	r1, [pc, #544]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8004ea6:	68f8      	ldr	r0, [r7, #12]
 8004ea8:	f000 fa60 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004eb2:	2302      	movs	r3, #2
 8004eb4:	e103      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_I2C_IsDeviceReady+0x50>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e0fc      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d007      	beq.n	8004eea <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f042 0201 	orr.w	r2, r2, #1
 8004ee8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ef8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2224      	movs	r2, #36	; 0x24
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a70      	ldr	r2, [pc, #448]	; (80050cc <HAL_I2C_IsDeviceReady+0x258>)
 8004f0c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f1e:	69fb      	ldr	r3, [r7, #28]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa1e 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00c      	beq.n	8004f50 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f4a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e0b6      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f50:	897b      	ldrh	r3, [r7, #10]
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f5e:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f60:	f7fc ffb6 	bl	8001ed0 <HAL_GetTick>
 8004f64:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f8a:	bf0c      	ite	eq
 8004f8c:	2301      	moveq	r3, #1
 8004f8e:	2300      	movne	r3, #0
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004f94:	e025      	b.n	8004fe2 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004f96:	f7fc ff9b 	bl	8001ed0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d302      	bcc.n	8004fac <HAL_I2C_IsDeviceReady+0x138>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d103      	bne.n	8004fb4 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	22a0      	movs	r2, #160	; 0xa0
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	bf0c      	ite	eq
 8004fc2:	2301      	moveq	r3, #1
 8004fc4:	2300      	movne	r3, #0
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	695b      	ldr	r3, [r3, #20]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2ba0      	cmp	r3, #160	; 0xa0
 8004fec:	d005      	beq.n	8004ffa <HAL_I2C_IsDeviceReady+0x186>
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <HAL_I2C_IsDeviceReady+0x186>
 8004ff4:	7dbb      	ldrb	r3, [r7, #22]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0cd      	beq.n	8004f96 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b02      	cmp	r3, #2
 800500e:	d129      	bne.n	8005064 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005020:	2300      	movs	r3, #0
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	613b      	str	r3, [r7, #16]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	2319      	movs	r3, #25
 800503c:	2201      	movs	r2, #1
 800503e:	4922      	ldr	r1, [pc, #136]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f993 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e036      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005060:	2300      	movs	r3, #0
 8005062:	e02c      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005072:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800507c:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	2319      	movs	r3, #25
 8005084:	2201      	movs	r2, #1
 8005086:	4910      	ldr	r1, [pc, #64]	; (80050c8 <HAL_I2C_IsDeviceReady+0x254>)
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 f96f 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e012      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	3301      	adds	r3, #1
 800509c:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	f4ff af33 	bcc.w	8004f0e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
  }
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3720      	adds	r7, #32
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	00100002 	.word	0x00100002
 80050cc:	ffff0000 	.word	0xffff0000

080050d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	607a      	str	r2, [r7, #4]
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	460b      	mov	r3, r1
 80050de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b08      	cmp	r3, #8
 80050ea:	d006      	beq.n	80050fa <I2C_MasterRequestWrite+0x2a>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d003      	beq.n	80050fa <I2C_MasterRequestWrite+0x2a>
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050f8:	d108      	bne.n	800510c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	e00b      	b.n	8005124 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	2b12      	cmp	r3, #18
 8005112:	d107      	bne.n	8005124 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005122:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f91b 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005150:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e035      	b.n	80051c2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800515e:	d108      	bne.n	8005172 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005160:	897b      	ldrh	r3, [r7, #10]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800516e:	611a      	str	r2, [r3, #16]
 8005170:	e01b      	b.n	80051aa <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005172:	897b      	ldrh	r3, [r7, #10]
 8005174:	11db      	asrs	r3, r3, #7
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f003 0306 	and.w	r3, r3, #6
 800517c:	b2db      	uxtb	r3, r3
 800517e:	f063 030f 	orn	r3, r3, #15
 8005182:	b2da      	uxtb	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	490f      	ldr	r1, [pc, #60]	; (80051cc <I2C_MasterRequestWrite+0xfc>)
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f942 	bl	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d001      	beq.n	80051a0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e010      	b.n	80051c2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80051a0:	897b      	ldrh	r3, [r7, #10]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4908      	ldr	r1, [pc, #32]	; (80051d0 <I2C_MasterRequestWrite+0x100>)
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 f932 	bl	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d001      	beq.n	80051c0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e000      	b.n	80051c2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3718      	adds	r7, #24
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	00010008 	.word	0x00010008
 80051d0:	00010002 	.word	0x00010002

080051d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	607a      	str	r2, [r7, #4]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	460b      	mov	r3, r1
 80051e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	2b08      	cmp	r3, #8
 80051fe:	d006      	beq.n	800520e <I2C_MasterRequestRead+0x3a>
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d003      	beq.n	800520e <I2C_MasterRequestRead+0x3a>
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800520c:	d108      	bne.n	8005220 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e00b      	b.n	8005238 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005224:	2b11      	cmp	r3, #17
 8005226:	d107      	bne.n	8005238 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005236:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005244:	68f8      	ldr	r0, [r7, #12]
 8005246:	f000 f891 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e078      	b.n	800535c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005272:	d108      	bne.n	8005286 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005274:	897b      	ldrh	r3, [r7, #10]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f043 0301 	orr.w	r3, r3, #1
 800527c:	b2da      	uxtb	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	611a      	str	r2, [r3, #16]
 8005284:	e05e      	b.n	8005344 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005286:	897b      	ldrh	r3, [r7, #10]
 8005288:	11db      	asrs	r3, r3, #7
 800528a:	b2db      	uxtb	r3, r3
 800528c:	f003 0306 	and.w	r3, r3, #6
 8005290:	b2db      	uxtb	r3, r3
 8005292:	f063 030f 	orn	r3, r3, #15
 8005296:	b2da      	uxtb	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4930      	ldr	r1, [pc, #192]	; (8005364 <I2C_MasterRequestRead+0x190>)
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 f8b8 	bl	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	e053      	b.n	800535c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052b4:	897b      	ldrh	r3, [r7, #10]
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4929      	ldr	r1, [pc, #164]	; (8005368 <I2C_MasterRequestRead+0x194>)
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f000 f8a8 	bl	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e043      	b.n	800535c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d4:	2300      	movs	r3, #0
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	695b      	ldr	r3, [r3, #20]
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	613b      	str	r3, [r7, #16]
 80052e8:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052f8:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 f830 	bl	800536c <I2C_WaitOnFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00c      	beq.n	800532c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005326:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e017      	b.n	800535c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800532c:	897b      	ldrh	r3, [r7, #10]
 800532e:	11db      	asrs	r3, r3, #7
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0306 	and.w	r3, r3, #6
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f063 030e 	orn	r3, r3, #14
 800533c:	b2da      	uxtb	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	4907      	ldr	r1, [pc, #28]	; (8005368 <I2C_MasterRequestRead+0x194>)
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f865 	bl	800541a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e000      	b.n	800535c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800535a:	2300      	movs	r3, #0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	00010008 	.word	0x00010008
 8005368:	00010002 	.word	0x00010002

0800536c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800537c:	e025      	b.n	80053ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d021      	beq.n	80053ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005386:	f7fc fda3 	bl	8001ed0 <HAL_GetTick>
 800538a:	4602      	mov	r2, r0
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d302      	bcc.n	800539c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d116      	bne.n	80053ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b6:	f043 0220 	orr.w	r2, r3, #32
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e023      	b.n	8005412 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	0c1b      	lsrs	r3, r3, #16
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d10d      	bne.n	80053f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	43da      	mvns	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	e00c      	b.n	800540a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	43da      	mvns	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	4013      	ands	r3, r2
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	bf0c      	ite	eq
 8005402:	2301      	moveq	r3, #1
 8005404:	2300      	movne	r3, #0
 8005406:	b2db      	uxtb	r3, r3
 8005408:	461a      	mov	r2, r3
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	429a      	cmp	r2, r3
 800540e:	d0b6      	beq.n	800537e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800541a:	b580      	push	{r7, lr}
 800541c:	b084      	sub	sp, #16
 800541e:	af00      	add	r7, sp, #0
 8005420:	60f8      	str	r0, [r7, #12]
 8005422:	60b9      	str	r1, [r7, #8]
 8005424:	607a      	str	r2, [r7, #4]
 8005426:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005428:	e051      	b.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695b      	ldr	r3, [r3, #20]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005438:	d123      	bne.n	8005482 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005448:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005452:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2220      	movs	r2, #32
 800545e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f043 0204 	orr.w	r2, r3, #4
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e046      	b.n	8005510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d021      	beq.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548a:	f7fc fd21 	bl	8001ed0 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	429a      	cmp	r2, r3
 8005498:	d302      	bcc.n	80054a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d116      	bne.n	80054ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e020      	b.n	8005510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	0c1b      	lsrs	r3, r3, #16
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d10c      	bne.n	80054f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	43da      	mvns	r2, r3
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	4013      	ands	r3, r2
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	bf14      	ite	ne
 80054ea:	2301      	movne	r3, #1
 80054ec:	2300      	moveq	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e00b      	b.n	800550a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	43da      	mvns	r2, r3
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	4013      	ands	r3, r2
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	bf14      	ite	ne
 8005504:	2301      	movne	r3, #1
 8005506:	2300      	moveq	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d18d      	bne.n	800542a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3710      	adds	r7, #16
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005524:	e02d      	b.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 f8ce 	bl	80056c8 <I2C_IsAcknowledgeFailed>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e02d      	b.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553c:	d021      	beq.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553e:	f7fc fcc7 	bl	8001ed0 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	429a      	cmp	r2, r3
 800554c:	d302      	bcc.n	8005554 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d116      	bne.n	8005582 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0220 	orr.w	r2, r3, #32
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e007      	b.n	8005592 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d1ca      	bne.n	8005526 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80055a6:	e02d      	b.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f88d 	bl	80056c8 <I2C_IsAcknowledgeFailed>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e02d      	b.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055be:	d021      	beq.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055c0:	f7fc fc86 	bl	8001ed0 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d302      	bcc.n	80055d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d116      	bne.n	8005604 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e007      	b.n	8005614 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b04      	cmp	r3, #4
 8005610:	d1ca      	bne.n	80055a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005628:	e042      	b.n	80056b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0310 	and.w	r3, r3, #16
 8005634:	2b10      	cmp	r3, #16
 8005636:	d119      	bne.n	800566c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0210 	mvn.w	r2, #16
 8005640:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e029      	b.n	80056c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800566c:	f7fc fc30 	bl	8001ed0 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	68ba      	ldr	r2, [r7, #8]
 8005678:	429a      	cmp	r2, r3
 800567a:	d302      	bcc.n	8005682 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d116      	bne.n	80056b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569c:	f043 0220 	orr.w	r2, r3, #32
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e007      	b.n	80056c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d1b5      	bne.n	800562a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056de:	d11b      	bne.n	8005718 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005704:	f043 0204 	orr.w	r2, r3, #4
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr
	...

08005728 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d101      	bne.n	800573a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e128      	b.n	800598c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d109      	bne.n	800575a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a90      	ldr	r2, [pc, #576]	; (8005994 <HAL_I2S_Init+0x26c>)
 8005752:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7fc f83d 	bl	80017d4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2202      	movs	r2, #2
 800575e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6812      	ldr	r2, [r2, #0]
 800576c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005770:	f023 030f 	bic.w	r3, r3, #15
 8005774:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2202      	movs	r2, #2
 800577c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d060      	beq.n	8005848 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d102      	bne.n	8005794 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800578e:	2310      	movs	r3, #16
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e001      	b.n	8005798 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005794:	2320      	movs	r3, #32
 8005796:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b20      	cmp	r3, #32
 800579e:	d802      	bhi.n	80057a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80057a6:	2001      	movs	r0, #1
 80057a8:	f001 fad0 	bl	8006d4c <HAL_RCCEx_GetPeriphCLKFreq>
 80057ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b6:	d125      	bne.n	8005804 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d010      	beq.n	80057e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	461a      	mov	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057dc:	3305      	adds	r3, #5
 80057de:	613b      	str	r3, [r7, #16]
 80057e0:	e01f      	b.n	8005822 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	461a      	mov	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	695b      	ldr	r3, [r3, #20]
 80057fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fe:	3305      	adds	r3, #5
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	e00e      	b.n	8005822 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fbb2 f2f3 	udiv	r2, r2, r3
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	461a      	mov	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	3305      	adds	r3, #5
 8005820:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4a5c      	ldr	r2, [pc, #368]	; (8005998 <HAL_I2S_Init+0x270>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	08db      	lsrs	r3, r3, #3
 800582c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	021b      	lsls	r3, r3, #8
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	e003      	b.n	8005850 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005848:	2302      	movs	r3, #2
 800584a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d902      	bls.n	800585c <HAL_I2S_Init+0x134>
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2bff      	cmp	r3, #255	; 0xff
 800585a:	d907      	bls.n	800586c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005860:	f043 0210 	orr.w	r2, r3, #16
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e08f      	b.n	800598c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	ea42 0103 	orr.w	r1, r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	430a      	orrs	r2, r1
 800587e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800588a:	f023 030f 	bic.w	r3, r3, #15
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	6851      	ldr	r1, [r2, #4]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6892      	ldr	r2, [r2, #8]
 8005896:	4311      	orrs	r1, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	68d2      	ldr	r2, [r2, #12]
 800589c:	4311      	orrs	r1, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6992      	ldr	r2, [r2, #24]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	431a      	orrs	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a1b      	ldr	r3, [r3, #32]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d161      	bne.n	800597c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a38      	ldr	r2, [pc, #224]	; (800599c <HAL_I2S_Init+0x274>)
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a37      	ldr	r2, [pc, #220]	; (80059a0 <HAL_I2S_Init+0x278>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_I2S_Init+0x1a4>
 80058c8:	4b36      	ldr	r3, [pc, #216]	; (80059a4 <HAL_I2S_Init+0x27c>)
 80058ca:	e001      	b.n	80058d0 <HAL_I2S_Init+0x1a8>
 80058cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	4932      	ldr	r1, [pc, #200]	; (80059a0 <HAL_I2S_Init+0x278>)
 80058d8:	428a      	cmp	r2, r1
 80058da:	d101      	bne.n	80058e0 <HAL_I2S_Init+0x1b8>
 80058dc:	4a31      	ldr	r2, [pc, #196]	; (80059a4 <HAL_I2S_Init+0x27c>)
 80058de:	e001      	b.n	80058e4 <HAL_I2S_Init+0x1bc>
 80058e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80058e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058e8:	f023 030f 	bic.w	r3, r3, #15
 80058ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a2b      	ldr	r2, [pc, #172]	; (80059a0 <HAL_I2S_Init+0x278>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d101      	bne.n	80058fc <HAL_I2S_Init+0x1d4>
 80058f8:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <HAL_I2S_Init+0x27c>)
 80058fa:	e001      	b.n	8005900 <HAL_I2S_Init+0x1d8>
 80058fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005900:	2202      	movs	r2, #2
 8005902:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a25      	ldr	r2, [pc, #148]	; (80059a0 <HAL_I2S_Init+0x278>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d101      	bne.n	8005912 <HAL_I2S_Init+0x1ea>
 800590e:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <HAL_I2S_Init+0x27c>)
 8005910:	e001      	b.n	8005916 <HAL_I2S_Init+0x1ee>
 8005912:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005922:	d003      	beq.n	800592c <HAL_I2S_Init+0x204>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800592c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	e001      	b.n	8005938 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	b299      	uxth	r1, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800594e:	4303      	orrs	r3, r0
 8005950:	b29b      	uxth	r3, r3
 8005952:	430b      	orrs	r3, r1
 8005954:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005956:	4313      	orrs	r3, r2
 8005958:	b29a      	uxth	r2, r3
 800595a:	897b      	ldrh	r3, [r7, #10]
 800595c:	4313      	orrs	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005964:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a0d      	ldr	r2, [pc, #52]	; (80059a0 <HAL_I2S_Init+0x278>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d101      	bne.n	8005974 <HAL_I2S_Init+0x24c>
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <HAL_I2S_Init+0x27c>)
 8005972:	e001      	b.n	8005978 <HAL_I2S_Init+0x250>
 8005974:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005978:	897a      	ldrh	r2, [r7, #10]
 800597a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3720      	adds	r7, #32
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	08005c85 	.word	0x08005c85
 8005998:	cccccccd 	.word	0xcccccccd
 800599c:	08005d99 	.word	0x08005d99
 80059a0:	40003800 	.word	0x40003800
 80059a4:	40003400 	.word	0x40003400

080059a8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	4613      	mov	r3, r2
 80059b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_I2S_Transmit_DMA+0x1a>
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e08e      	b.n	8005ae4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_I2S_Transmit_DMA+0x2e>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e086      	b.n	8005ae4 <HAL_I2S_Transmit_DMA+0x13c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d005      	beq.n	80059f6 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
 80059f4:	e076      	b.n	8005ae4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2203      	movs	r2, #3
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d002      	beq.n	8005a22 <HAL_I2S_Transmit_DMA+0x7a>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b05      	cmp	r3, #5
 8005a20:	d10a      	bne.n	8005a38 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005a22:	88fb      	ldrh	r3, [r7, #6]
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005a2c:	88fb      	ldrh	r3, [r7, #6]
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005a36:	e005      	b.n	8005a44 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	88fa      	ldrh	r2, [r7, #6]
 8005a42:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a48:	4a28      	ldr	r2, [pc, #160]	; (8005aec <HAL_I2S_Transmit_DMA+0x144>)
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	4a27      	ldr	r2, [pc, #156]	; (8005af0 <HAL_I2S_Transmit_DMA+0x148>)
 8005a52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	4a26      	ldr	r2, [pc, #152]	; (8005af4 <HAL_I2S_Transmit_DMA+0x14c>)
 8005a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a64:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a6c:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005a74:	f7fc fc1a 	bl	80022ac <HAL_DMA_Start_IT>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00f      	beq.n	8005a9e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0208 	orr.w	r2, r3, #8
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e022      	b.n	8005ae4 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d107      	bne.n	8005abc <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69da      	ldr	r2, [r3, #28]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aba:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0302 	and.w	r3, r3, #2
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0202 	orr.w	r2, r2, #2
 8005ad8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3718      	adds	r7, #24
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	08005b63 	.word	0x08005b63
 8005af0:	08005b21 	.word	0x08005b21
 8005af4:	08005b7f 	.word	0x08005b7f

08005af8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10e      	bne.n	8005b54 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685a      	ldr	r2, [r3, #4]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0202 	bic.w	r2, r2, #2
 8005b44:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7fb f825 	bl	8000ba4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005b70:	68f8      	ldr	r0, [r7, #12]
 8005b72:	f7fb f829 	bl	8000bc8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005b76:	bf00      	nop
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0203 	bic.w	r2, r2, #3
 8005b9a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb4:	f043 0208 	orr.w	r2, r3, #8
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ffa5 	bl	8005b0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd6:	881a      	ldrh	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be2:	1c9a      	adds	r2, r3, #2
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10e      	bne.n	8005c1e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c0e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fa ffc3 	bl	8000ba4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	1c9a      	adds	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10e      	bne.n	8005c7c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	685a      	ldr	r2, [r3, #4]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c6c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff ff3e 	bl	8005af8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005c7c:	bf00      	nop
 8005c7e:	3708      	adds	r7, #8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	2b04      	cmp	r3, #4
 8005c9e:	d13a      	bne.n	8005d16 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d109      	bne.n	8005cbe <I2S_IRQHandler+0x3a>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b40      	cmp	r3, #64	; 0x40
 8005cb6:	d102      	bne.n	8005cbe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7ff ffb4 	bl	8005c26 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc4:	2b40      	cmp	r3, #64	; 0x40
 8005cc6:	d126      	bne.n	8005d16 <I2S_IRQHandler+0x92>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f003 0320 	and.w	r3, r3, #32
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d11f      	bne.n	8005d16 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ce4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	613b      	str	r3, [r7, #16]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f043 0202 	orr.w	r2, r3, #2
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7ff fefb 	bl	8005b0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d136      	bne.n	8005d90 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d109      	bne.n	8005d40 <I2S_IRQHandler+0xbc>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d102      	bne.n	8005d40 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f7ff ff45 	bl	8005bca <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f003 0308 	and.w	r3, r3, #8
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d122      	bne.n	8005d90 <I2S_IRQHandler+0x10c>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b20      	cmp	r3, #32
 8005d56:	d11b      	bne.n	8005d90 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d66:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d82:	f043 0204 	orr.w	r2, r3, #4
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff febe 	bl	8005b0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d90:	bf00      	nop
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4aa2      	ldr	r2, [pc, #648]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d101      	bne.n	8005db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005db2:	4ba2      	ldr	r3, [pc, #648]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005db4:	e001      	b.n	8005dba <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005db6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a9b      	ldr	r2, [pc, #620]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005dd0:	4b9a      	ldr	r3, [pc, #616]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dd2:	e001      	b.n	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de4:	d004      	beq.n	8005df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 8099 	bne.w	8005f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d107      	bne.n	8005e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f925 	bl	8006054 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d107      	bne.n	8005e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d002      	beq.n	8005e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 f9c8 	bl	80061b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d13a      	bne.n	8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d035      	beq.n	8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a7e      	ldr	r2, [pc, #504]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d101      	bne.n	8005e46 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005e42:	4b7e      	ldr	r3, [pc, #504]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e44:	e001      	b.n	8005e4a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4979      	ldr	r1, [pc, #484]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e52:	428b      	cmp	r3, r1
 8005e54:	d101      	bne.n	8005e5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005e56:	4b79      	ldr	r3, [pc, #484]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e58:	e001      	b.n	8005e5e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e5e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e62:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e72:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005e74:	2300      	movs	r3, #0
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7ff fe34 	bl	8005b0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	f040 80be 	bne.w	800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	f003 0320 	and.w	r3, r3, #32
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 80b8 	beq.w	800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005eca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a59      	ldr	r2, [pc, #356]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d101      	bne.n	8005eda <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005ed6:	4b59      	ldr	r3, [pc, #356]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ed8:	e001      	b.n	8005ede <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4954      	ldr	r1, [pc, #336]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ee6:	428b      	cmp	r3, r1
 8005ee8:	d101      	bne.n	8005eee <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005eea:	4b54      	ldr	r3, [pc, #336]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eec:	e001      	b.n	8005ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ef2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005ef6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ef8:	2300      	movs	r3, #0
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f12:	f043 0204 	orr.w	r2, r3, #4
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fdf6 	bl	8005b0c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f20:	e084      	b.n	800602c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d107      	bne.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f8be 	bl	80060b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d107      	bne.n	8005f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f8fd 	bl	8006150 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f5c:	2b40      	cmp	r3, #64	; 0x40
 8005f5e:	d12f      	bne.n	8005fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f003 0320 	and.w	r3, r3, #32
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d02a      	beq.n	8005fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685a      	ldr	r2, [r3, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f78:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a2e      	ldr	r2, [pc, #184]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d101      	bne.n	8005f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005f84:	4b2d      	ldr	r3, [pc, #180]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f86:	e001      	b.n	8005f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4929      	ldr	r1, [pc, #164]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f94:	428b      	cmp	r3, r1
 8005f96:	d101      	bne.n	8005f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005f98:	4b28      	ldr	r3, [pc, #160]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f9a:	e001      	b.n	8005fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005f9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fa0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fa4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f043 0202 	orr.w	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f7ff fda6 	bl	8005b0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d131      	bne.n	800602e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d02c      	beq.n	800602e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d101      	bne.n	8005fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005fde:	4b17      	ldr	r3, [pc, #92]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005fe0:	e001      	b.n	8005fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4912      	ldr	r1, [pc, #72]	; (8006038 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005fee:	428b      	cmp	r3, r1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ff4:	e001      	b.n	8005ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ffa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ffe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800600e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f043 0204 	orr.w	r2, r3, #4
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7ff fd71 	bl	8005b0c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800602a:	e000      	b.n	800602e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800602c:	bf00      	nop
}
 800602e:	bf00      	nop
 8006030:	3720      	adds	r7, #32
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40003800 	.word	0x40003800
 800603c:	40003400 	.word	0x40003400

08006040 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006060:	1c99      	adds	r1, r3, #2
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	6251      	str	r1, [r2, #36]	; 0x24
 8006066:	881a      	ldrh	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d113      	bne.n	80060ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006094:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ffc9 	bl	8006040 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060ae:	bf00      	nop
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
	...

080060b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c4:	1c99      	adds	r1, r3, #2
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	6251      	str	r1, [r2, #36]	; 0x24
 80060ca:	8819      	ldrh	r1, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <I2SEx_TxISR_I2SExt+0x90>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d101      	bne.n	80060da <I2SEx_TxISR_I2SExt+0x22>
 80060d6:	4b1d      	ldr	r3, [pc, #116]	; (800614c <I2SEx_TxISR_I2SExt+0x94>)
 80060d8:	e001      	b.n	80060de <I2SEx_TxISR_I2SExt+0x26>
 80060da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060de:	460a      	mov	r2, r1
 80060e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d121      	bne.n	800613e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a12      	ldr	r2, [pc, #72]	; (8006148 <I2SEx_TxISR_I2SExt+0x90>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d101      	bne.n	8006108 <I2SEx_TxISR_I2SExt+0x50>
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <I2SEx_TxISR_I2SExt+0x94>)
 8006106:	e001      	b.n	800610c <I2SEx_TxISR_I2SExt+0x54>
 8006108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	490d      	ldr	r1, [pc, #52]	; (8006148 <I2SEx_TxISR_I2SExt+0x90>)
 8006114:	428b      	cmp	r3, r1
 8006116:	d101      	bne.n	800611c <I2SEx_TxISR_I2SExt+0x64>
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <I2SEx_TxISR_I2SExt+0x94>)
 800611a:	e001      	b.n	8006120 <I2SEx_TxISR_I2SExt+0x68>
 800611c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006120:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006124:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d106      	bne.n	800613e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f7ff ff81 	bl	8006040 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800613e:	bf00      	nop
 8006140:	3708      	adds	r7, #8
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	40003800 	.word	0x40003800
 800614c:	40003400 	.word	0x40003400

08006150 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	68d8      	ldr	r0, [r3, #12]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	1c99      	adds	r1, r3, #2
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006168:	b282      	uxth	r2, r0
 800616a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29a      	uxth	r2, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800617e:	b29b      	uxth	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d113      	bne.n	80061ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006192:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	2b00      	cmp	r3, #0
 800619c:	d106      	bne.n	80061ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff ff4a 	bl	8006040 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80061ac:	bf00      	nop
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a20      	ldr	r2, [pc, #128]	; (8006244 <I2SEx_RxISR_I2SExt+0x90>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d101      	bne.n	80061ca <I2SEx_RxISR_I2SExt+0x16>
 80061c6:	4b20      	ldr	r3, [pc, #128]	; (8006248 <I2SEx_RxISR_I2SExt+0x94>)
 80061c8:	e001      	b.n	80061ce <I2SEx_RxISR_I2SExt+0x1a>
 80061ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80061ce:	68d8      	ldr	r0, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	1c99      	adds	r1, r3, #2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80061da:	b282      	uxth	r2, r0
 80061dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d121      	bne.n	800623a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a12      	ldr	r2, [pc, #72]	; (8006244 <I2SEx_RxISR_I2SExt+0x90>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <I2SEx_RxISR_I2SExt+0x50>
 8006200:	4b11      	ldr	r3, [pc, #68]	; (8006248 <I2SEx_RxISR_I2SExt+0x94>)
 8006202:	e001      	b.n	8006208 <I2SEx_RxISR_I2SExt+0x54>
 8006204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006208:	685a      	ldr	r2, [r3, #4]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	490d      	ldr	r1, [pc, #52]	; (8006244 <I2SEx_RxISR_I2SExt+0x90>)
 8006210:	428b      	cmp	r3, r1
 8006212:	d101      	bne.n	8006218 <I2SEx_RxISR_I2SExt+0x64>
 8006214:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <I2SEx_RxISR_I2SExt+0x94>)
 8006216:	e001      	b.n	800621c <I2SEx_RxISR_I2SExt+0x68>
 8006218:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800621c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006220:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d106      	bne.n	800623a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff03 	bl	8006040 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40003800 	.word	0x40003800
 8006248:	40003400 	.word	0x40003400

0800624c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d101      	bne.n	800625e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e25b      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d075      	beq.n	8006356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800626a:	4ba3      	ldr	r3, [pc, #652]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	f003 030c 	and.w	r3, r3, #12
 8006272:	2b04      	cmp	r3, #4
 8006274:	d00c      	beq.n	8006290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006276:	4ba0      	ldr	r3, [pc, #640]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800627e:	2b08      	cmp	r3, #8
 8006280:	d112      	bne.n	80062a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006282:	4b9d      	ldr	r3, [pc, #628]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800628a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800628e:	d10b      	bne.n	80062a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006290:	4b99      	ldr	r3, [pc, #612]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d05b      	beq.n	8006354 <HAL_RCC_OscConfig+0x108>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d157      	bne.n	8006354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e236      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062b0:	d106      	bne.n	80062c0 <HAL_RCC_OscConfig+0x74>
 80062b2:	4b91      	ldr	r3, [pc, #580]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a90      	ldr	r2, [pc, #576]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e01d      	b.n	80062fc <HAL_RCC_OscConfig+0xb0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062c8:	d10c      	bne.n	80062e4 <HAL_RCC_OscConfig+0x98>
 80062ca:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a8a      	ldr	r2, [pc, #552]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	4b88      	ldr	r3, [pc, #544]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a87      	ldr	r2, [pc, #540]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062e0:	6013      	str	r3, [r2, #0]
 80062e2:	e00b      	b.n	80062fc <HAL_RCC_OscConfig+0xb0>
 80062e4:	4b84      	ldr	r3, [pc, #528]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a83      	ldr	r2, [pc, #524]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	4b81      	ldr	r3, [pc, #516]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a80      	ldr	r2, [pc, #512]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80062f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d013      	beq.n	800632c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006304:	f7fb fde4 	bl	8001ed0 <HAL_GetTick>
 8006308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630a:	e008      	b.n	800631e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800630c:	f7fb fde0 	bl	8001ed0 <HAL_GetTick>
 8006310:	4602      	mov	r2, r0
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	2b64      	cmp	r3, #100	; 0x64
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e1fb      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800631e:	4b76      	ldr	r3, [pc, #472]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d0f0      	beq.n	800630c <HAL_RCC_OscConfig+0xc0>
 800632a:	e014      	b.n	8006356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632c:	f7fb fdd0 	bl	8001ed0 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006334:	f7fb fdcc 	bl	8001ed0 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b64      	cmp	r3, #100	; 0x64
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e1e7      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006346:	4b6c      	ldr	r3, [pc, #432]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1f0      	bne.n	8006334 <HAL_RCC_OscConfig+0xe8>
 8006352:	e000      	b.n	8006356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d063      	beq.n	800642a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006362:	4b65      	ldr	r3, [pc, #404]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800636e:	4b62      	ldr	r3, [pc, #392]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006376:	2b08      	cmp	r3, #8
 8006378:	d11c      	bne.n	80063b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800637a:	4b5f      	ldr	r3, [pc, #380]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d116      	bne.n	80063b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006386:	4b5c      	ldr	r3, [pc, #368]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <HAL_RCC_OscConfig+0x152>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d001      	beq.n	800639e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e1bb      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639e:	4b56      	ldr	r3, [pc, #344]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	00db      	lsls	r3, r3, #3
 80063ac:	4952      	ldr	r1, [pc, #328]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063b2:	e03a      	b.n	800642a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d020      	beq.n	80063fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063bc:	4b4f      	ldr	r3, [pc, #316]	; (80064fc <HAL_RCC_OscConfig+0x2b0>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063c2:	f7fb fd85 	bl	8001ed0 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ca:	f7fb fd81 	bl	8001ed0 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e19c      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063dc:	4b46      	ldr	r3, [pc, #280]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0302 	and.w	r3, r3, #2
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0f0      	beq.n	80063ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063e8:	4b43      	ldr	r3, [pc, #268]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	00db      	lsls	r3, r3, #3
 80063f6:	4940      	ldr	r1, [pc, #256]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	600b      	str	r3, [r1, #0]
 80063fc:	e015      	b.n	800642a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063fe:	4b3f      	ldr	r3, [pc, #252]	; (80064fc <HAL_RCC_OscConfig+0x2b0>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fb fd64 	bl	8001ed0 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800640c:	f7fb fd60 	bl	8001ed0 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e17b      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800641e:	4b36      	ldr	r3, [pc, #216]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f003 0308 	and.w	r3, r3, #8
 8006432:	2b00      	cmp	r3, #0
 8006434:	d030      	beq.n	8006498 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d016      	beq.n	800646c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800643e:	4b30      	ldr	r3, [pc, #192]	; (8006500 <HAL_RCC_OscConfig+0x2b4>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006444:	f7fb fd44 	bl	8001ed0 <HAL_GetTick>
 8006448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800644a:	e008      	b.n	800645e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800644c:	f7fb fd40 	bl	8001ed0 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	2b02      	cmp	r3, #2
 8006458:	d901      	bls.n	800645e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e15b      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800645e:	4b26      	ldr	r3, [pc, #152]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 8006460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006462:	f003 0302 	and.w	r3, r3, #2
 8006466:	2b00      	cmp	r3, #0
 8006468:	d0f0      	beq.n	800644c <HAL_RCC_OscConfig+0x200>
 800646a:	e015      	b.n	8006498 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800646c:	4b24      	ldr	r3, [pc, #144]	; (8006500 <HAL_RCC_OscConfig+0x2b4>)
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006472:	f7fb fd2d 	bl	8001ed0 <HAL_GetTick>
 8006476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006478:	e008      	b.n	800648c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800647a:	f7fb fd29 	bl	8001ed0 <HAL_GetTick>
 800647e:	4602      	mov	r2, r0
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	1ad3      	subs	r3, r2, r3
 8006484:	2b02      	cmp	r3, #2
 8006486:	d901      	bls.n	800648c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e144      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800648c:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 800648e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006490:	f003 0302 	and.w	r3, r3, #2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1f0      	bne.n	800647a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a0 	beq.w	80065e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064a6:	2300      	movs	r3, #0
 80064a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80064ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10f      	bne.n	80064d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064b6:	2300      	movs	r3, #0
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	4b0f      	ldr	r3, [pc, #60]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80064bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064be:	4a0e      	ldr	r2, [pc, #56]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80064c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064c4:	6413      	str	r3, [r2, #64]	; 0x40
 80064c6:	4b0c      	ldr	r3, [pc, #48]	; (80064f8 <HAL_RCC_OscConfig+0x2ac>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_OscConfig+0x2b8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d121      	bne.n	8006526 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <HAL_RCC_OscConfig+0x2b8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a07      	ldr	r2, [pc, #28]	; (8006504 <HAL_RCC_OscConfig+0x2b8>)
 80064e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ee:	f7fb fcef 	bl	8001ed0 <HAL_GetTick>
 80064f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064f4:	e011      	b.n	800651a <HAL_RCC_OscConfig+0x2ce>
 80064f6:	bf00      	nop
 80064f8:	40023800 	.word	0x40023800
 80064fc:	42470000 	.word	0x42470000
 8006500:	42470e80 	.word	0x42470e80
 8006504:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006508:	f7fb fce2 	bl	8001ed0 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e0fd      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800651a:	4b81      	ldr	r3, [pc, #516]	; (8006720 <HAL_RCC_OscConfig+0x4d4>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d106      	bne.n	800653c <HAL_RCC_OscConfig+0x2f0>
 800652e:	4b7d      	ldr	r3, [pc, #500]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006532:	4a7c      	ldr	r2, [pc, #496]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6713      	str	r3, [r2, #112]	; 0x70
 800653a:	e01c      	b.n	8006576 <HAL_RCC_OscConfig+0x32a>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	2b05      	cmp	r3, #5
 8006542:	d10c      	bne.n	800655e <HAL_RCC_OscConfig+0x312>
 8006544:	4b77      	ldr	r3, [pc, #476]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	4a76      	ldr	r2, [pc, #472]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 800654a:	f043 0304 	orr.w	r3, r3, #4
 800654e:	6713      	str	r3, [r2, #112]	; 0x70
 8006550:	4b74      	ldr	r3, [pc, #464]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4a73      	ldr	r2, [pc, #460]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6713      	str	r3, [r2, #112]	; 0x70
 800655c:	e00b      	b.n	8006576 <HAL_RCC_OscConfig+0x32a>
 800655e:	4b71      	ldr	r3, [pc, #452]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006562:	4a70      	ldr	r2, [pc, #448]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	6713      	str	r3, [r2, #112]	; 0x70
 800656a:	4b6e      	ldr	r3, [pc, #440]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800656e:	4a6d      	ldr	r2, [pc, #436]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006570:	f023 0304 	bic.w	r3, r3, #4
 8006574:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d015      	beq.n	80065aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800657e:	f7fb fca7 	bl	8001ed0 <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006584:	e00a      	b.n	800659c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006586:	f7fb fca3 	bl	8001ed0 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	f241 3288 	movw	r2, #5000	; 0x1388
 8006594:	4293      	cmp	r3, r2
 8006596:	d901      	bls.n	800659c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	e0bc      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659c:	4b61      	ldr	r3, [pc, #388]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 800659e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a0:	f003 0302 	and.w	r3, r3, #2
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d0ee      	beq.n	8006586 <HAL_RCC_OscConfig+0x33a>
 80065a8:	e014      	b.n	80065d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065aa:	f7fb fc91 	bl	8001ed0 <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065b0:	e00a      	b.n	80065c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065b2:	f7fb fc8d 	bl	8001ed0 <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e0a6      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065c8:	4b56      	ldr	r3, [pc, #344]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 80065ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1ee      	bne.n	80065b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065d4:	7dfb      	ldrb	r3, [r7, #23]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d105      	bne.n	80065e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065da:	4b52      	ldr	r3, [pc, #328]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	4a51      	ldr	r2, [pc, #324]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 80065e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8092 	beq.w	8006714 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065f0:	4b4c      	ldr	r3, [pc, #304]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 030c 	and.w	r3, r3, #12
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d05c      	beq.n	80066b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d141      	bne.n	8006688 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006604:	4b48      	ldr	r3, [pc, #288]	; (8006728 <HAL_RCC_OscConfig+0x4dc>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660a:	f7fb fc61 	bl	8001ed0 <HAL_GetTick>
 800660e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006612:	f7fb fc5d 	bl	8001ed0 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e078      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006624:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	69da      	ldr	r2, [r3, #28]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a1b      	ldr	r3, [r3, #32]
 8006638:	431a      	orrs	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	019b      	lsls	r3, r3, #6
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	3b01      	subs	r3, #1
 800664a:	041b      	lsls	r3, r3, #16
 800664c:	431a      	orrs	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006652:	061b      	lsls	r3, r3, #24
 8006654:	4933      	ldr	r1, [pc, #204]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 8006656:	4313      	orrs	r3, r2
 8006658:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800665a:	4b33      	ldr	r3, [pc, #204]	; (8006728 <HAL_RCC_OscConfig+0x4dc>)
 800665c:	2201      	movs	r2, #1
 800665e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006660:	f7fb fc36 	bl	8001ed0 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006668:	f7fb fc32 	bl	8001ed0 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e04d      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800667a:	4b2a      	ldr	r3, [pc, #168]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x41c>
 8006686:	e045      	b.n	8006714 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006688:	4b27      	ldr	r3, [pc, #156]	; (8006728 <HAL_RCC_OscConfig+0x4dc>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fb fc1f 	bl	8001ed0 <HAL_GetTick>
 8006692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006694:	e008      	b.n	80066a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006696:	f7fb fc1b 	bl	8001ed0 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d901      	bls.n	80066a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80066a4:	2303      	movs	r3, #3
 80066a6:	e036      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a8:	4b1e      	ldr	r3, [pc, #120]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f0      	bne.n	8006696 <HAL_RCC_OscConfig+0x44a>
 80066b4:	e02e      	b.n	8006714 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e029      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066c2:	4b18      	ldr	r3, [pc, #96]	; (8006724 <HAL_RCC_OscConfig+0x4d8>)
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d11c      	bne.n	8006710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d115      	bne.n	8006710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ea:	4013      	ands	r3, r2
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d10d      	bne.n	8006710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80066fe:	429a      	cmp	r2, r3
 8006700:	d106      	bne.n	8006710 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800670c:	429a      	cmp	r2, r3
 800670e:	d001      	beq.n	8006714 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e000      	b.n	8006716 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40007000 	.word	0x40007000
 8006724:	40023800 	.word	0x40023800
 8006728:	42470060 	.word	0x42470060

0800672c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e0cc      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006740:	4b68      	ldr	r3, [pc, #416]	; (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d90c      	bls.n	8006768 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674e:	4b65      	ldr	r3, [pc, #404]	; (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006750:	683a      	ldr	r2, [r7, #0]
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006756:	4b63      	ldr	r3, [pc, #396]	; (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 030f 	and.w	r3, r3, #15
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d001      	beq.n	8006768 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e0b8      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0302 	and.w	r3, r3, #2
 8006770:	2b00      	cmp	r3, #0
 8006772:	d020      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d005      	beq.n	800678c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006780:	4b59      	ldr	r3, [pc, #356]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4a58      	ldr	r2, [pc, #352]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006786:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800678a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006798:	4b53      	ldr	r3, [pc, #332]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	4a52      	ldr	r2, [pc, #328]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800679e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067a4:	4b50      	ldr	r3, [pc, #320]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	494d      	ldr	r1, [pc, #308]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0301 	and.w	r3, r3, #1
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d044      	beq.n	800684c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d107      	bne.n	80067da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d119      	bne.n	800680a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e07f      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d003      	beq.n	80067ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d107      	bne.n	80067fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ea:	4b3f      	ldr	r3, [pc, #252]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d109      	bne.n	800680a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e06f      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fa:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0302 	and.w	r3, r3, #2
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e067      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800680a:	4b37      	ldr	r3, [pc, #220]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	f023 0203 	bic.w	r2, r3, #3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	4934      	ldr	r1, [pc, #208]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006818:	4313      	orrs	r3, r2
 800681a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800681c:	f7fb fb58 	bl	8001ed0 <HAL_GetTick>
 8006820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006822:	e00a      	b.n	800683a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006824:	f7fb fb54 	bl	8001ed0 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006832:	4293      	cmp	r3, r2
 8006834:	d901      	bls.n	800683a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e04f      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800683a:	4b2b      	ldr	r3, [pc, #172]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 020c 	and.w	r2, r3, #12
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	429a      	cmp	r2, r3
 800684a:	d1eb      	bne.n	8006824 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800684c:	4b25      	ldr	r3, [pc, #148]	; (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	683a      	ldr	r2, [r7, #0]
 8006856:	429a      	cmp	r2, r3
 8006858:	d20c      	bcs.n	8006874 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800685a:	4b22      	ldr	r3, [pc, #136]	; (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 800685c:	683a      	ldr	r2, [r7, #0]
 800685e:	b2d2      	uxtb	r2, r2
 8006860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006862:	4b20      	ldr	r3, [pc, #128]	; (80068e4 <HAL_RCC_ClockConfig+0x1b8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 030f 	and.w	r3, r3, #15
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d001      	beq.n	8006874 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e032      	b.n	80068da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0304 	and.w	r3, r3, #4
 800687c:	2b00      	cmp	r3, #0
 800687e:	d008      	beq.n	8006892 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006880:	4b19      	ldr	r3, [pc, #100]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	68db      	ldr	r3, [r3, #12]
 800688c:	4916      	ldr	r1, [pc, #88]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 800688e:	4313      	orrs	r3, r2
 8006890:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0308 	and.w	r3, r3, #8
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800689e:	4b12      	ldr	r3, [pc, #72]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	490e      	ldr	r1, [pc, #56]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068b2:	f000 f821 	bl	80068f8 <HAL_RCC_GetSysClockFreq>
 80068b6:	4601      	mov	r1, r0
 80068b8:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <HAL_RCC_ClockConfig+0x1bc>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	091b      	lsrs	r3, r3, #4
 80068be:	f003 030f 	and.w	r3, r3, #15
 80068c2:	4a0a      	ldr	r2, [pc, #40]	; (80068ec <HAL_RCC_ClockConfig+0x1c0>)
 80068c4:	5cd3      	ldrb	r3, [r2, r3]
 80068c6:	fa21 f303 	lsr.w	r3, r1, r3
 80068ca:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <HAL_RCC_ClockConfig+0x1c4>)
 80068cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ce:	4b09      	ldr	r3, [pc, #36]	; (80068f4 <HAL_RCC_ClockConfig+0x1c8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7fb fab8 	bl	8001e48 <HAL_InitTick>

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	40023c00 	.word	0x40023c00
 80068e8:	40023800 	.word	0x40023800
 80068ec:	0800f118 	.word	0x0800f118
 80068f0:	20000000 	.word	0x20000000
 80068f4:	20000004 	.word	0x20000004

080068f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068fa:	b085      	sub	sp, #20
 80068fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068fe:	2300      	movs	r3, #0
 8006900:	607b      	str	r3, [r7, #4]
 8006902:	2300      	movs	r3, #0
 8006904:	60fb      	str	r3, [r7, #12]
 8006906:	2300      	movs	r3, #0
 8006908:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800690a:	2300      	movs	r3, #0
 800690c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800690e:	4b63      	ldr	r3, [pc, #396]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	f003 030c 	and.w	r3, r3, #12
 8006916:	2b04      	cmp	r3, #4
 8006918:	d007      	beq.n	800692a <HAL_RCC_GetSysClockFreq+0x32>
 800691a:	2b08      	cmp	r3, #8
 800691c:	d008      	beq.n	8006930 <HAL_RCC_GetSysClockFreq+0x38>
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 80b4 	bne.w	8006a8c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006924:	4b5e      	ldr	r3, [pc, #376]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006926:	60bb      	str	r3, [r7, #8]
       break;
 8006928:	e0b3      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800692a:	4b5e      	ldr	r3, [pc, #376]	; (8006aa4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800692c:	60bb      	str	r3, [r7, #8]
      break;
 800692e:	e0b0      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006930:	4b5a      	ldr	r3, [pc, #360]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006938:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800693a:	4b58      	ldr	r3, [pc, #352]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d04a      	beq.n	80069dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006946:	4b55      	ldr	r3, [pc, #340]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	099b      	lsrs	r3, r3, #6
 800694c:	f04f 0400 	mov.w	r4, #0
 8006950:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	ea03 0501 	and.w	r5, r3, r1
 800695c:	ea04 0602 	and.w	r6, r4, r2
 8006960:	4629      	mov	r1, r5
 8006962:	4632      	mov	r2, r6
 8006964:	f04f 0300 	mov.w	r3, #0
 8006968:	f04f 0400 	mov.w	r4, #0
 800696c:	0154      	lsls	r4, r2, #5
 800696e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006972:	014b      	lsls	r3, r1, #5
 8006974:	4619      	mov	r1, r3
 8006976:	4622      	mov	r2, r4
 8006978:	1b49      	subs	r1, r1, r5
 800697a:	eb62 0206 	sbc.w	r2, r2, r6
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	f04f 0400 	mov.w	r4, #0
 8006986:	0194      	lsls	r4, r2, #6
 8006988:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800698c:	018b      	lsls	r3, r1, #6
 800698e:	1a5b      	subs	r3, r3, r1
 8006990:	eb64 0402 	sbc.w	r4, r4, r2
 8006994:	f04f 0100 	mov.w	r1, #0
 8006998:	f04f 0200 	mov.w	r2, #0
 800699c:	00e2      	lsls	r2, r4, #3
 800699e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80069a2:	00d9      	lsls	r1, r3, #3
 80069a4:	460b      	mov	r3, r1
 80069a6:	4614      	mov	r4, r2
 80069a8:	195b      	adds	r3, r3, r5
 80069aa:	eb44 0406 	adc.w	r4, r4, r6
 80069ae:	f04f 0100 	mov.w	r1, #0
 80069b2:	f04f 0200 	mov.w	r2, #0
 80069b6:	0262      	lsls	r2, r4, #9
 80069b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80069bc:	0259      	lsls	r1, r3, #9
 80069be:	460b      	mov	r3, r1
 80069c0:	4614      	mov	r4, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	4621      	mov	r1, r4
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f04f 0400 	mov.w	r4, #0
 80069cc:	461a      	mov	r2, r3
 80069ce:	4623      	mov	r3, r4
 80069d0:	f7f9 fc5e 	bl	8000290 <__aeabi_uldivmod>
 80069d4:	4603      	mov	r3, r0
 80069d6:	460c      	mov	r4, r1
 80069d8:	60fb      	str	r3, [r7, #12]
 80069da:	e049      	b.n	8006a70 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069dc:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	099b      	lsrs	r3, r3, #6
 80069e2:	f04f 0400 	mov.w	r4, #0
 80069e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	ea03 0501 	and.w	r5, r3, r1
 80069f2:	ea04 0602 	and.w	r6, r4, r2
 80069f6:	4629      	mov	r1, r5
 80069f8:	4632      	mov	r2, r6
 80069fa:	f04f 0300 	mov.w	r3, #0
 80069fe:	f04f 0400 	mov.w	r4, #0
 8006a02:	0154      	lsls	r4, r2, #5
 8006a04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a08:	014b      	lsls	r3, r1, #5
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	1b49      	subs	r1, r1, r5
 8006a10:	eb62 0206 	sbc.w	r2, r2, r6
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	f04f 0400 	mov.w	r4, #0
 8006a1c:	0194      	lsls	r4, r2, #6
 8006a1e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006a22:	018b      	lsls	r3, r1, #6
 8006a24:	1a5b      	subs	r3, r3, r1
 8006a26:	eb64 0402 	sbc.w	r4, r4, r2
 8006a2a:	f04f 0100 	mov.w	r1, #0
 8006a2e:	f04f 0200 	mov.w	r2, #0
 8006a32:	00e2      	lsls	r2, r4, #3
 8006a34:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006a38:	00d9      	lsls	r1, r3, #3
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	195b      	adds	r3, r3, r5
 8006a40:	eb44 0406 	adc.w	r4, r4, r6
 8006a44:	f04f 0100 	mov.w	r1, #0
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	02a2      	lsls	r2, r4, #10
 8006a4e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006a52:	0299      	lsls	r1, r3, #10
 8006a54:	460b      	mov	r3, r1
 8006a56:	4614      	mov	r4, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f04f 0400 	mov.w	r4, #0
 8006a62:	461a      	mov	r2, r3
 8006a64:	4623      	mov	r3, r4
 8006a66:	f7f9 fc13 	bl	8000290 <__aeabi_uldivmod>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a70:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	0c1b      	lsrs	r3, r3, #16
 8006a76:	f003 0303 	and.w	r3, r3, #3
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	005b      	lsls	r3, r3, #1
 8006a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a88:	60bb      	str	r3, [r7, #8]
      break;
 8006a8a:	e002      	b.n	8006a92 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006a8e:	60bb      	str	r3, [r7, #8]
      break;
 8006a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a92:	68bb      	ldr	r3, [r7, #8]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	00f42400 	.word	0x00f42400
 8006aa4:	007a1200 	.word	0x007a1200

08006aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006aac:	4b03      	ldr	r3, [pc, #12]	; (8006abc <HAL_RCC_GetHCLKFreq+0x14>)
 8006aae:	681b      	ldr	r3, [r3, #0]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000000 	.word	0x20000000

08006ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ac4:	f7ff fff0 	bl	8006aa8 <HAL_RCC_GetHCLKFreq>
 8006ac8:	4601      	mov	r1, r0
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	0a9b      	lsrs	r3, r3, #10
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	4a03      	ldr	r2, [pc, #12]	; (8006ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ad6:	5cd3      	ldrb	r3, [r2, r3]
 8006ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	0800f128 	.word	0x0800f128

08006ae8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b086      	sub	sp, #24
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0301 	and.w	r3, r3, #1
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d038      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006b10:	4b68      	ldr	r3, [pc, #416]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b16:	f7fb f9db 	bl	8001ed0 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b1c:	e008      	b.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b1e:	f7fb f9d7 	bl	8001ed0 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e0bd      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006b30:	4b61      	ldr	r3, [pc, #388]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f0      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	019b      	lsls	r3, r3, #6
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	071b      	lsls	r3, r3, #28
 8006b4e:	495a      	ldr	r1, [pc, #360]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006b56:	4b57      	ldr	r3, [pc, #348]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b5c:	f7fb f9b8 	bl	8001ed0 <HAL_GetTick>
 8006b60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006b64:	f7fb f9b4 	bl	8001ed0 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d901      	bls.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e09a      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b76:	4b50      	ldr	r3, [pc, #320]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d0f0      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 8083 	beq.w	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006b90:	2300      	movs	r3, #0
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	4b48      	ldr	r3, [pc, #288]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b98:	4a47      	ldr	r2, [pc, #284]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8006ba0:	4b45      	ldr	r3, [pc, #276]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bac:	4b43      	ldr	r3, [pc, #268]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a42      	ldr	r2, [pc, #264]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bb8:	f7fb f98a 	bl	8001ed0 <HAL_GetTick>
 8006bbc:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bbe:	e008      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bc0:	f7fb f986 	bl	8001ed0 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d901      	bls.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e06c      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bd2:	4b3a      	ldr	r3, [pc, #232]	; (8006cbc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d0f0      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006bde:	4b36      	ldr	r3, [pc, #216]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006be6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d02f      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d028      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bfc:	4b2e      	ldr	r3, [pc, #184]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c04:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c06:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c08:	2201      	movs	r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c0c:	4b2c      	ldr	r3, [pc, #176]	; (8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c12:	4a29      	ldr	r2, [pc, #164]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c18:	4b27      	ldr	r3, [pc, #156]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d114      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c24:	f7fb f954 	bl	8001ed0 <HAL_GetTick>
 8006c28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c2a:	e00a      	b.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c2c:	f7fb f950 	bl	8001ed0 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e034      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c42:	4b1d      	ldr	r3, [pc, #116]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0ee      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c5a:	d10d      	bne.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006c5c:	4b16      	ldr	r3, [pc, #88]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c70:	4911      	ldr	r1, [pc, #68]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c72:	4313      	orrs	r3, r2
 8006c74:	608b      	str	r3, [r1, #8]
 8006c76:	e005      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006c78:	4b0f      	ldr	r3, [pc, #60]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4a0e      	ldr	r2, [pc, #56]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006c82:	6093      	str	r3, [r2, #8]
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c86:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	691b      	ldr	r3, [r3, #16]
 8006c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c90:	4909      	ldr	r1, [pc, #36]	; (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c92:	4313      	orrs	r3, r2
 8006c94:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0308 	and.w	r3, r3, #8
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	7d1a      	ldrb	r2, [r3, #20]
 8006ca6:	4b07      	ldr	r3, [pc, #28]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006ca8:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3718      	adds	r7, #24
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	42470068 	.word	0x42470068
 8006cb8:	40023800 	.word	0x40023800
 8006cbc:	40007000 	.word	0x40007000
 8006cc0:	42470e40 	.word	0x42470e40
 8006cc4:	424711e0 	.word	0x424711e0

08006cc8 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cdc:	099b      	lsrs	r3, r3, #6
 8006cde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006ce6:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cec:	0f1b      	lsrs	r3, r3, #28
 8006cee:	f003 0207 	and.w	r2, r3, #7
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006d04:	4b10      	ldr	r3, [pc, #64]	; (8006d48 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006d0c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006d0e:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	431a      	orrs	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 8006d1e:	4b0a      	ldr	r3, [pc, #40]	; (8006d48 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d103      	bne.n	8006d34 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8006d32:	e002      	b.n	8006d3a <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	751a      	strb	r2, [r3, #20]
}
 8006d3a:	bf00      	nop
 8006d3c:	3714      	adds	r7, #20
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40023800 	.word	0x40023800

08006d4c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d13f      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006d6a:	4b23      	ldr	r3, [pc, #140]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d72:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d004      	beq.n	8006d84 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d131      	bne.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006d80:	617b      	str	r3, [r7, #20]
          break;
 8006d82:	e031      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006d84:	4b1c      	ldr	r3, [pc, #112]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d90:	d109      	bne.n	8006da6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006d92:	4b19      	ldr	r3, [pc, #100]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d9c:	4a18      	ldr	r2, [pc, #96]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	e008      	b.n	8006db8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db0:	4a14      	ldr	r2, [pc, #80]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db6:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006db8:	4b0f      	ldr	r3, [pc, #60]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dbe:	099b      	lsrs	r3, r3, #6
 8006dc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	fb02 f303 	mul.w	r3, r2, r3
 8006dca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dd2:	0f1b      	lsrs	r3, r3, #28
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	617b      	str	r3, [r7, #20]
          break;
 8006de0:	e002      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
          break;
 8006de6:	bf00      	nop
        }
      }
      break;
 8006de8:	bf00      	nop
    }
  }
  return frequency;
 8006dea:	697b      	ldr	r3, [r7, #20]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr
 8006df8:	40023800 	.word	0x40023800
 8006dfc:	00bb8000 	.word	0x00bb8000
 8006e00:	007a1200 	.word	0x007a1200
 8006e04:	00f42400 	.word	0x00f42400

08006e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e01d      	b.n	8006e56 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7fa fd76 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2202      	movs	r2, #2
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	4619      	mov	r1, r3
 8006e46:	4610      	mov	r0, r2
 8006e48:	f000 fb38 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b085      	sub	sp, #20
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68da      	ldr	r2, [r3, #12]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f042 0201 	orr.w	r2, r2, #1
 8006e74:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b06      	cmp	r3, #6
 8006e86:	d007      	beq.n	8006e98 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f042 0201 	orr.w	r2, r2, #1
 8006e96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b082      	sub	sp, #8
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e01d      	b.n	8006ef4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d106      	bne.n	8006ed2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7fa fd6d 	bl	80019ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4610      	mov	r0, r2
 8006ee6:	f000 fae9 	bl	80074bc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	6839      	ldr	r1, [r7, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f000 fd7a 	bl	8007a08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a10      	ldr	r2, [pc, #64]	; (8006f5c <HAL_TIM_PWM_Start+0x60>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d107      	bne.n	8006f2e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 0307 	and.w	r3, r3, #7
 8006f38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2b06      	cmp	r3, #6
 8006f3e:	d007      	beq.n	8006f50 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f042 0201 	orr.w	r2, r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	40010000 	.word	0x40010000

08006f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	691b      	ldr	r3, [r3, #16]
 8006f6e:	f003 0302 	and.w	r3, r3, #2
 8006f72:	2b02      	cmp	r3, #2
 8006f74:	d122      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	f003 0302 	and.w	r3, r3, #2
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d11b      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f06f 0202 	mvn.w	r2, #2
 8006f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	699b      	ldr	r3, [r3, #24]
 8006f9a:	f003 0303 	and.w	r3, r3, #3
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d003      	beq.n	8006faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fa6b 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 8006fa8:	e005      	b.n	8006fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fa5d 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fa6e 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f003 0304 	and.w	r3, r3, #4
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d122      	bne.n	8007010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	d11b      	bne.n	8007010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f06f 0204 	mvn.w	r2, #4
 8006fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2202      	movs	r2, #2
 8006fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d003      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 fa41 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 8006ffc:	e005      	b.n	800700a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa33 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 fa44 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b08      	cmp	r3, #8
 800701c:	d122      	bne.n	8007064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b08      	cmp	r3, #8
 800702a:	d11b      	bne.n	8007064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0208 	mvn.w	r2, #8
 8007034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	69db      	ldr	r3, [r3, #28]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fa17 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 8007050:	e005      	b.n	800705e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fa09 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fa1a 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	f003 0310 	and.w	r3, r3, #16
 800706e:	2b10      	cmp	r3, #16
 8007070:	d122      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b10      	cmp	r3, #16
 800707e:	d11b      	bne.n	80070b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0210 	mvn.w	r2, #16
 8007088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2208      	movs	r2, #8
 800708e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f9ed 	bl	800747e <HAL_TIM_IC_CaptureCallback>
 80070a4:	e005      	b.n	80070b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f9df 	bl	800746a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f9f0 	bl	8007492 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	691b      	ldr	r3, [r3, #16]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d10e      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d107      	bne.n	80070e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f06f 0201 	mvn.w	r2, #1
 80070dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7f9 fec6 	bl	8000e70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	2b80      	cmp	r3, #128	; 0x80
 80070f0:	d10e      	bne.n	8007110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fc:	2b80      	cmp	r3, #128	; 0x80
 80070fe:	d107      	bne.n	8007110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fd1a 	bl	8007b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800711a:	2b40      	cmp	r3, #64	; 0x40
 800711c:	d10e      	bne.n	800713c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007128:	2b40      	cmp	r3, #64	; 0x40
 800712a:	d107      	bne.n	800713c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9b5 	bl	80074a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b20      	cmp	r3, #32
 8007148:	d10e      	bne.n	8007168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f003 0320 	and.w	r3, r3, #32
 8007154:	2b20      	cmp	r3, #32
 8007156:	d107      	bne.n	8007168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f06f 0220 	mvn.w	r2, #32
 8007160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fce4 	bl	8007b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007168:	bf00      	nop
 800716a:	3708      	adds	r7, #8
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}

08007170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007186:	2302      	movs	r3, #2
 8007188:	e0b4      	b.n	80072f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b0c      	cmp	r3, #12
 800719e:	f200 809f 	bhi.w	80072e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80071a2:	a201      	add	r2, pc, #4	; (adr r2, 80071a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a8:	080071dd 	.word	0x080071dd
 80071ac:	080072e1 	.word	0x080072e1
 80071b0:	080072e1 	.word	0x080072e1
 80071b4:	080072e1 	.word	0x080072e1
 80071b8:	0800721d 	.word	0x0800721d
 80071bc:	080072e1 	.word	0x080072e1
 80071c0:	080072e1 	.word	0x080072e1
 80071c4:	080072e1 	.word	0x080072e1
 80071c8:	0800725f 	.word	0x0800725f
 80071cc:	080072e1 	.word	0x080072e1
 80071d0:	080072e1 	.word	0x080072e1
 80071d4:	080072e1 	.word	0x080072e1
 80071d8:	0800729f 	.word	0x0800729f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68b9      	ldr	r1, [r7, #8]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 f9ea 	bl	80075bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	699a      	ldr	r2, [r3, #24]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0208 	orr.w	r2, r2, #8
 80071f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0204 	bic.w	r2, r2, #4
 8007206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6999      	ldr	r1, [r3, #24]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	691a      	ldr	r2, [r3, #16]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	430a      	orrs	r2, r1
 8007218:	619a      	str	r2, [r3, #24]
      break;
 800721a:	e062      	b.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68b9      	ldr	r1, [r7, #8]
 8007222:	4618      	mov	r0, r3
 8007224:	f000 fa30 	bl	8007688 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	6999      	ldr	r1, [r3, #24]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	021a      	lsls	r2, r3, #8
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	619a      	str	r2, [r3, #24]
      break;
 800725c:	e041      	b.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68b9      	ldr	r1, [r7, #8]
 8007264:	4618      	mov	r0, r3
 8007266:	f000 fa7b 	bl	8007760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	69da      	ldr	r2, [r3, #28]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f042 0208 	orr.w	r2, r2, #8
 8007278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f022 0204 	bic.w	r2, r2, #4
 8007288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69d9      	ldr	r1, [r3, #28]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	691a      	ldr	r2, [r3, #16]
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	430a      	orrs	r2, r1
 800729a:	61da      	str	r2, [r3, #28]
      break;
 800729c:	e021      	b.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68b9      	ldr	r1, [r7, #8]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f000 fac5 	bl	8007834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69da      	ldr	r2, [r3, #28]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69d9      	ldr	r1, [r3, #28]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	021a      	lsls	r2, r3, #8
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	430a      	orrs	r2, r1
 80072dc:	61da      	str	r2, [r3, #28]
      break;
 80072de:	e000      	b.n	80072e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80072e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800730c:	2b01      	cmp	r3, #1
 800730e:	d101      	bne.n	8007314 <HAL_TIM_ConfigClockSource+0x18>
 8007310:	2302      	movs	r3, #2
 8007312:	e0a6      	b.n	8007462 <HAL_TIM_ConfigClockSource+0x166>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007332:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800733a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	d067      	beq.n	800741c <HAL_TIM_ConfigClockSource+0x120>
 800734c:	2b40      	cmp	r3, #64	; 0x40
 800734e:	d80b      	bhi.n	8007368 <HAL_TIM_ConfigClockSource+0x6c>
 8007350:	2b10      	cmp	r3, #16
 8007352:	d073      	beq.n	800743c <HAL_TIM_ConfigClockSource+0x140>
 8007354:	2b10      	cmp	r3, #16
 8007356:	d802      	bhi.n	800735e <HAL_TIM_ConfigClockSource+0x62>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d06f      	beq.n	800743c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800735c:	e078      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800735e:	2b20      	cmp	r3, #32
 8007360:	d06c      	beq.n	800743c <HAL_TIM_ConfigClockSource+0x140>
 8007362:	2b30      	cmp	r3, #48	; 0x30
 8007364:	d06a      	beq.n	800743c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007366:	e073      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007368:	2b70      	cmp	r3, #112	; 0x70
 800736a:	d00d      	beq.n	8007388 <HAL_TIM_ConfigClockSource+0x8c>
 800736c:	2b70      	cmp	r3, #112	; 0x70
 800736e:	d804      	bhi.n	800737a <HAL_TIM_ConfigClockSource+0x7e>
 8007370:	2b50      	cmp	r3, #80	; 0x50
 8007372:	d033      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0xe0>
 8007374:	2b60      	cmp	r3, #96	; 0x60
 8007376:	d041      	beq.n	80073fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007378:	e06a      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800737a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800737e:	d066      	beq.n	800744e <HAL_TIM_ConfigClockSource+0x152>
 8007380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007384:	d017      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007386:	e063      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6818      	ldr	r0, [r3, #0]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6899      	ldr	r1, [r3, #8]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685a      	ldr	r2, [r3, #4]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68db      	ldr	r3, [r3, #12]
 8007398:	f000 fb16 	bl	80079c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	609a      	str	r2, [r3, #8]
      break;
 80073b4:	e04c      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6899      	ldr	r1, [r3, #8]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	f000 faff 	bl	80079c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689a      	ldr	r2, [r3, #8]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073d8:	609a      	str	r2, [r3, #8]
      break;
 80073da:	e039      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6818      	ldr	r0, [r3, #0]
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	6859      	ldr	r1, [r3, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	68db      	ldr	r3, [r3, #12]
 80073e8:	461a      	mov	r2, r3
 80073ea:	f000 fa73 	bl	80078d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2150      	movs	r1, #80	; 0x50
 80073f4:	4618      	mov	r0, r3
 80073f6:	f000 facc 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 80073fa:	e029      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	6859      	ldr	r1, [r3, #4]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	68db      	ldr	r3, [r3, #12]
 8007408:	461a      	mov	r2, r3
 800740a:	f000 fa92 	bl	8007932 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2160      	movs	r1, #96	; 0x60
 8007414:	4618      	mov	r0, r3
 8007416:	f000 fabc 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800741a:	e019      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6859      	ldr	r1, [r3, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	461a      	mov	r2, r3
 800742a:	f000 fa53 	bl	80078d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2140      	movs	r1, #64	; 0x40
 8007434:	4618      	mov	r0, r3
 8007436:	f000 faac 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800743a:	e009      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f000 faa3 	bl	8007992 <TIM_ITRx_SetConfig>
      break;
 800744c:	e000      	b.n	8007450 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800744e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800746a:	b480      	push	{r7}
 800746c:	b083      	sub	sp, #12
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007472:	bf00      	nop
 8007474:	370c      	adds	r7, #12
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr

0800747e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800747e:	b480      	push	{r7}
 8007480:	b083      	sub	sp, #12
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007486:	bf00      	nop
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074a6:	b480      	push	{r7}
 80074a8:	b083      	sub	sp, #12
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a34      	ldr	r2, [pc, #208]	; (80075a0 <TIM_Base_SetConfig+0xe4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d00f      	beq.n	80074f4 <TIM_Base_SetConfig+0x38>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074da:	d00b      	beq.n	80074f4 <TIM_Base_SetConfig+0x38>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	4a31      	ldr	r2, [pc, #196]	; (80075a4 <TIM_Base_SetConfig+0xe8>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d007      	beq.n	80074f4 <TIM_Base_SetConfig+0x38>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a30      	ldr	r2, [pc, #192]	; (80075a8 <TIM_Base_SetConfig+0xec>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d003      	beq.n	80074f4 <TIM_Base_SetConfig+0x38>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a2f      	ldr	r2, [pc, #188]	; (80075ac <TIM_Base_SetConfig+0xf0>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d108      	bne.n	8007506 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	4313      	orrs	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a25      	ldr	r2, [pc, #148]	; (80075a0 <TIM_Base_SetConfig+0xe4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d01b      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007514:	d017      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <TIM_Base_SetConfig+0xe8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d013      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <TIM_Base_SetConfig+0xec>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d00f      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a20      	ldr	r2, [pc, #128]	; (80075ac <TIM_Base_SetConfig+0xf0>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d00b      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a1f      	ldr	r2, [pc, #124]	; (80075b0 <TIM_Base_SetConfig+0xf4>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d007      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a1e      	ldr	r2, [pc, #120]	; (80075b4 <TIM_Base_SetConfig+0xf8>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d003      	beq.n	8007546 <TIM_Base_SetConfig+0x8a>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a1d      	ldr	r2, [pc, #116]	; (80075b8 <TIM_Base_SetConfig+0xfc>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d108      	bne.n	8007558 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800754c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4313      	orrs	r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	4313      	orrs	r3, r2
 8007564:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	689a      	ldr	r2, [r3, #8]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a08      	ldr	r2, [pc, #32]	; (80075a0 <TIM_Base_SetConfig+0xe4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d103      	bne.n	800758c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	691a      	ldr	r2, [r3, #16]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	615a      	str	r2, [r3, #20]
}
 8007592:	bf00      	nop
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40014000 	.word	0x40014000
 80075b4:	40014400 	.word	0x40014400
 80075b8:	40014800 	.word	0x40014800

080075bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
 80075ca:	f023 0201 	bic.w	r2, r3, #1
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0303 	bic.w	r3, r3, #3
 80075f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	f023 0302 	bic.w	r3, r3, #2
 8007604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	4313      	orrs	r3, r2
 800760e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a1c      	ldr	r2, [pc, #112]	; (8007684 <TIM_OC1_SetConfig+0xc8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d10c      	bne.n	8007632 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	f023 0308 	bic.w	r3, r3, #8
 800761e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	4313      	orrs	r3, r2
 8007628:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f023 0304 	bic.w	r3, r3, #4
 8007630:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a13      	ldr	r2, [pc, #76]	; (8007684 <TIM_OC1_SetConfig+0xc8>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d111      	bne.n	800765e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	693a      	ldr	r2, [r7, #16]
 8007650:	4313      	orrs	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	621a      	str	r2, [r3, #32]
}
 8007678:	bf00      	nop
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40010000 	.word	0x40010000

08007688 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a1b      	ldr	r3, [r3, #32]
 8007696:	f023 0210 	bic.w	r2, r3, #16
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f023 0320 	bic.w	r3, r3, #32
 80076d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1e      	ldr	r2, [pc, #120]	; (800775c <TIM_OC2_SetConfig+0xd4>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d10d      	bne.n	8007704 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	011b      	lsls	r3, r3, #4
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007702:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a15      	ldr	r2, [pc, #84]	; (800775c <TIM_OC2_SetConfig+0xd4>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d113      	bne.n	8007734 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800771a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	4313      	orrs	r3, r2
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	621a      	str	r2, [r3, #32]
}
 800774e:	bf00      	nop
 8007750:	371c      	adds	r7, #28
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	40010000 	.word	0x40010000

08007760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800778e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f023 0303 	bic.w	r3, r3, #3
 8007796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	4313      	orrs	r3, r2
 80077a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	021b      	lsls	r3, r3, #8
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	4313      	orrs	r3, r2
 80077b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a1d      	ldr	r2, [pc, #116]	; (8007830 <TIM_OC3_SetConfig+0xd0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d10d      	bne.n	80077da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	021b      	lsls	r3, r3, #8
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4313      	orrs	r3, r2
 80077d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80077d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	4a14      	ldr	r2, [pc, #80]	; (8007830 <TIM_OC3_SetConfig+0xd0>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d113      	bne.n	800780a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	011b      	lsls	r3, r3, #4
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68fa      	ldr	r2, [r7, #12]
 8007814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	697a      	ldr	r2, [r7, #20]
 8007822:	621a      	str	r2, [r3, #32]
}
 8007824:	bf00      	nop
 8007826:	371c      	adds	r7, #28
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	40010000 	.word	0x40010000

08007834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800786a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	021b      	lsls	r3, r3, #8
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800787e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	031b      	lsls	r3, r3, #12
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	4313      	orrs	r3, r2
 800788a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a10      	ldr	r2, [pc, #64]	; (80078d0 <TIM_OC4_SetConfig+0x9c>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d109      	bne.n	80078a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800789a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	019b      	lsls	r3, r3, #6
 80078a2:	697a      	ldr	r2, [r7, #20]
 80078a4:	4313      	orrs	r3, r2
 80078a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	621a      	str	r2, [r3, #32]
}
 80078c2:	bf00      	nop
 80078c4:	371c      	adds	r7, #28
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40010000 	.word	0x40010000

080078d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b087      	sub	sp, #28
 80078d8:	af00      	add	r7, sp, #0
 80078da:	60f8      	str	r0, [r7, #12]
 80078dc:	60b9      	str	r1, [r7, #8]
 80078de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
 80078ea:	f023 0201 	bic.w	r2, r3, #1
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80078fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	4313      	orrs	r3, r2
 8007908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f023 030a 	bic.w	r3, r3, #10
 8007910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	4313      	orrs	r3, r2
 8007918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	693a      	ldr	r2, [r7, #16]
 800791e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	621a      	str	r2, [r3, #32]
}
 8007926:	bf00      	nop
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007932:	b480      	push	{r7}
 8007934:	b087      	sub	sp, #28
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1b      	ldr	r3, [r3, #32]
 8007942:	f023 0210 	bic.w	r2, r3, #16
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6a1b      	ldr	r3, [r3, #32]
 8007954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800795c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	031b      	lsls	r3, r3, #12
 8007962:	697a      	ldr	r2, [r7, #20]
 8007964:	4313      	orrs	r3, r2
 8007966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800796e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	011b      	lsls	r3, r3, #4
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	4313      	orrs	r3, r2
 8007978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	697a      	ldr	r2, [r7, #20]
 800797e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	693a      	ldr	r2, [r7, #16]
 8007984:	621a      	str	r2, [r3, #32]
}
 8007986:	bf00      	nop
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f043 0307 	orr.w	r3, r3, #7
 80079b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	68fa      	ldr	r2, [r7, #12]
 80079ba:	609a      	str	r2, [r3, #8]
}
 80079bc:	bf00      	nop
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b087      	sub	sp, #28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	021a      	lsls	r2, r3, #8
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	697a      	ldr	r2, [r7, #20]
 80079fa:	609a      	str	r2, [r3, #8]
}
 80079fc:	bf00      	nop
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 031f 	and.w	r3, r3, #31
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	43db      	mvns	r3, r3
 8007a2a:	401a      	ands	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	6a1a      	ldr	r2, [r3, #32]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 031f 	and.w	r3, r3, #31
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	621a      	str	r2, [r3, #32]
}
 8007a46:	bf00      	nop
 8007a48:	371c      	adds	r7, #28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
	...

08007a54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d101      	bne.n	8007a6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a68:	2302      	movs	r3, #2
 8007a6a:	e050      	b.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1c      	ldr	r2, [pc, #112]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ab8:	d013      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a18      	ldr	r2, [pc, #96]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a16      	ldr	r2, [pc, #88]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a15      	ldr	r2, [pc, #84]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10c      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40010000 	.word	0x40010000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40014000 	.word	0x40014000

08007b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b083      	sub	sp, #12
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b58:	b084      	sub	sp, #16
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	f107 001c 	add.w	r0, r7, #28
 8007b66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d122      	bne.n	8007bb6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d105      	bne.n	8007baa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f94a 	bl	8007e44 <USB_CoreReset>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	73fb      	strb	r3, [r7, #15]
 8007bb4:	e01a      	b.n	8007bec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f93e 	bl	8007e44 <USB_CoreReset>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	639a      	str	r2, [r3, #56]	; 0x38
 8007bde:	e005      	b.n	8007bec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d10b      	bne.n	8007c0a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f043 0206 	orr.w	r2, r3, #6
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	689b      	ldr	r3, [r3, #8]
 8007c02:	f043 0220 	orr.w	r2, r3, #32
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c16:	b004      	add	sp, #16
 8007c18:	4770      	bx	lr

08007c1a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f043 0201 	orr.w	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr

08007c3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f023 0201 	bic.w	r2, r3, #1
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007c76:	78fb      	ldrb	r3, [r7, #3]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d106      	bne.n	8007c8a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e00b      	b.n	8007ca2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007c8a:	78fb      	ldrb	r3, [r7, #3]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	60da      	str	r2, [r3, #12]
 8007c9c:	e001      	b.n	8007ca2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e003      	b.n	8007caa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007ca2:	2032      	movs	r0, #50	; 0x32
 8007ca4:	f7fa f920 	bl	8001ee8 <HAL_Delay>

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	019b      	lsls	r3, r3, #6
 8007cc6:	f043 0220 	orr.w	r2, r3, #32
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	4a09      	ldr	r2, [pc, #36]	; (8007cfc <USB_FlushTxFifo+0x48>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d901      	bls.n	8007ce0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e006      	b.n	8007cee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f003 0320 	and.w	r3, r3, #32
 8007ce8:	2b20      	cmp	r3, #32
 8007cea:	d0f0      	beq.n	8007cce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	00030d40 	.word	0x00030d40

08007d00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2210      	movs	r2, #16
 8007d10:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	3301      	adds	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4a09      	ldr	r2, [pc, #36]	; (8007d40 <USB_FlushRxFifo+0x40>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d901      	bls.n	8007d24 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e006      	b.n	8007d32 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b10      	cmp	r3, #16
 8007d2e:	d0f0      	beq.n	8007d12 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	00030d40 	.word	0x00030d40

08007d44 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b089      	sub	sp, #36	; 0x24
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	4611      	mov	r1, r2
 8007d50:	461a      	mov	r2, r3
 8007d52:	460b      	mov	r3, r1
 8007d54:	71fb      	strb	r3, [r7, #7]
 8007d56:	4613      	mov	r3, r2
 8007d58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007d62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d11a      	bne.n	8007da0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007d6a:	88bb      	ldrh	r3, [r7, #4]
 8007d6c:	3303      	adds	r3, #3
 8007d6e:	089b      	lsrs	r3, r3, #2
 8007d70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007d72:	2300      	movs	r3, #0
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	e00f      	b.n	8007d98 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	031a      	lsls	r2, r3, #12
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d84:	461a      	mov	r2, r3
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	3304      	adds	r3, #4
 8007d90:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	3301      	adds	r3, #1
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	69ba      	ldr	r2, [r7, #24]
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d3eb      	bcc.n	8007d78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3724      	adds	r7, #36	; 0x24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b089      	sub	sp, #36	; 0x24
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	60f8      	str	r0, [r7, #12]
 8007db6:	60b9      	str	r1, [r7, #8]
 8007db8:	4613      	mov	r3, r2
 8007dba:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007dc4:	88fb      	ldrh	r3, [r7, #6]
 8007dc6:	3303      	adds	r3, #3
 8007dc8:	089b      	lsrs	r3, r3, #2
 8007dca:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	e00b      	b.n	8007dea <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	601a      	str	r2, [r3, #0]
    pDest++;
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	3304      	adds	r3, #4
 8007de2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	3301      	adds	r3, #1
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d3ef      	bcc.n	8007dd2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007df2:	69fb      	ldr	r3, [r7, #28]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3724      	adds	r7, #36	; 0x24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	699b      	ldr	r3, [r3, #24]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	4013      	ands	r3, r2
 8007e16:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e26:	b480      	push	{r7}
 8007e28:	b083      	sub	sp, #12
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f003 0301 	and.w	r3, r3, #1
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b085      	sub	sp, #20
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4a13      	ldr	r2, [pc, #76]	; (8007ea8 <USB_CoreReset+0x64>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d901      	bls.n	8007e62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e01b      	b.n	8007e9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	daf2      	bge.n	8007e50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	f043 0201 	orr.w	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	4a09      	ldr	r2, [pc, #36]	; (8007ea8 <USB_CoreReset+0x64>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d901      	bls.n	8007e8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e006      	b.n	8007e9a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691b      	ldr	r3, [r3, #16]
 8007e90:	f003 0301 	and.w	r3, r3, #1
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d0f0      	beq.n	8007e7a <USB_CoreReset+0x36>

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	00030d40 	.word	0x00030d40

08007eac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007eac:	b084      	sub	sp, #16
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	f107 001c 	add.w	r0, r7, #28
 8007eba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007ec8:	461a      	mov	r2, r3
 8007eca:	2300      	movs	r3, #0
 8007ecc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d018      	beq.n	8007f30 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d10a      	bne.n	8007f1a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68ba      	ldr	r2, [r7, #8]
 8007f0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f12:	f043 0304 	orr.w	r3, r3, #4
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	e014      	b.n	8007f44 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f28:	f023 0304 	bic.w	r3, r3, #4
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	e009      	b.n	8007f44 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007f3e:	f023 0304 	bic.w	r3, r3, #4
 8007f42:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007f44:	2110      	movs	r1, #16
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff feb4 	bl	8007cb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff fed7 	bl	8007d00 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f52:	2300      	movs	r3, #0
 8007f54:	60fb      	str	r3, [r7, #12]
 8007f56:	e015      	b.n	8007f84 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	015a      	lsls	r2, r3, #5
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4413      	add	r3, r2
 8007f60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f64:	461a      	mov	r2, r3
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	015a      	lsls	r2, r3, #5
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f78:	461a      	mov	r2, r3
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d3e5      	bcc.n	8007f58 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f8ac 	bl	80080ec <USB_DriveVbus>

  HAL_Delay(200U);
 8007f94:	20c8      	movs	r0, #200	; 0xc8
 8007f96:	f7f9 ffa7 	bl	8001ee8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00b      	beq.n	8007fcc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fba:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a14      	ldr	r2, [pc, #80]	; (8008010 <USB_HostInit+0x164>)
 8007fc0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a13      	ldr	r2, [pc, #76]	; (8008014 <USB_HostInit+0x168>)
 8007fc6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007fca:	e009      	b.n	8007fe0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2280      	movs	r2, #128	; 0x80
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a10      	ldr	r2, [pc, #64]	; (8008018 <USB_HostInit+0x16c>)
 8007fd6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a10      	ldr	r2, [pc, #64]	; (800801c <USB_HostInit+0x170>)
 8007fdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d105      	bne.n	8007ff2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f043 0210 	orr.w	r2, r3, #16
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699a      	ldr	r2, [r3, #24]
 8007ff6:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <USB_HostInit+0x174>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800800a:	b004      	add	sp, #16
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	01000200 	.word	0x01000200
 8008014:	00e00300 	.word	0x00e00300
 8008018:	00600080 	.word	0x00600080
 800801c:	004000e0 	.word	0x004000e0
 8008020:	a3200008 	.word	0xa3200008

08008024 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	68f9      	ldr	r1, [r7, #12]
 8008058:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800805c:	4313      	orrs	r3, r2
 800805e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008060:	78fb      	ldrb	r3, [r7, #3]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800806c:	461a      	mov	r2, r3
 800806e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008072:	6053      	str	r3, [r2, #4]
 8008074:	e009      	b.n	800808a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d106      	bne.n	800808a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008082:	461a      	mov	r2, r3
 8008084:	f241 7370 	movw	r3, #6000	; 0x1770
 8008088:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800808a:	2300      	movs	r3, #0
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80080b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	68fa      	ldr	r2, [r7, #12]
 80080be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80080c8:	2064      	movs	r0, #100	; 0x64
 80080ca:	f7f9 ff0d 	bl	8001ee8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80080d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80080dc:	200a      	movs	r0, #10
 80080de:	f7f9 ff03 	bl	8001ee8 <HAL_Delay>

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	460b      	mov	r3, r1
 80080f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008110:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <USB_DriveVbus+0x44>
 800811c:	78fb      	ldrb	r3, [r7, #3]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d106      	bne.n	8008130 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800812a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800812e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008136:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800813a:	d109      	bne.n	8008150 <USB_DriveVbus+0x64>
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	68fa      	ldr	r2, [r7, #12]
 8008146:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800814a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800814e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3714      	adds	r7, #20
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800815e:	b480      	push	{r7}
 8008160:	b085      	sub	sp, #20
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	0c5b      	lsrs	r3, r3, #17
 800817c:	f003 0303 	and.w	r3, r3, #3
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr

0800818c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	b29b      	uxth	r3, r3
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	4608      	mov	r0, r1
 80081ba:	4611      	mov	r1, r2
 80081bc:	461a      	mov	r2, r3
 80081be:	4603      	mov	r3, r0
 80081c0:	70fb      	strb	r3, [r7, #3]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70bb      	strb	r3, [r7, #2]
 80081c6:	4613      	mov	r3, r2
 80081c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80081d2:	78fb      	ldrb	r3, [r7, #3]
 80081d4:	015a      	lsls	r2, r3, #5
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4413      	add	r3, r2
 80081da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081de:	461a      	mov	r2, r3
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295
 80081e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80081e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d87e      	bhi.n	80082ec <USB_HC_Init+0x13c>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <USB_HC_Init+0x44>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008205 	.word	0x08008205
 80081f8:	080082af 	.word	0x080082af
 80081fc:	08008205 	.word	0x08008205
 8008200:	08008271 	.word	0x08008271
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008204:	78fb      	ldrb	r3, [r7, #3]
 8008206:	015a      	lsls	r2, r3, #5
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	4413      	add	r3, r2
 800820c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008210:	461a      	mov	r2, r3
 8008212:	f240 439d 	movw	r3, #1181	; 0x49d
 8008216:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008218:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800821c:	2b00      	cmp	r3, #0
 800821e:	da10      	bge.n	8008242 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4413      	add	r3, r2
 8008228:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	0151      	lsls	r1, r2, #5
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	440a      	add	r2, r1
 8008236:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800823a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800823e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8008240:	e057      	b.n	80082f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824a:	2b00      	cmp	r3, #0
 800824c:	d051      	beq.n	80082f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800824e:	78fb      	ldrb	r3, [r7, #3]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	4413      	add	r3, r2
 8008256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	0151      	lsls	r1, r2, #5
 8008260:	68ba      	ldr	r2, [r7, #8]
 8008262:	440a      	add	r2, r1
 8008264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008268:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800826c:	60d3      	str	r3, [r2, #12]
      break;
 800826e:	e040      	b.n	80082f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008270:	78fb      	ldrb	r3, [r7, #3]
 8008272:	015a      	lsls	r2, r3, #5
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	4413      	add	r3, r2
 8008278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800827c:	461a      	mov	r2, r3
 800827e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008282:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008284:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008288:	2b00      	cmp	r3, #0
 800828a:	da34      	bge.n	80082f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800828c:	78fb      	ldrb	r3, [r7, #3]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	4413      	add	r3, r2
 8008294:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	78fa      	ldrb	r2, [r7, #3]
 800829c:	0151      	lsls	r1, r2, #5
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	440a      	add	r2, r1
 80082a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80082ac:	e023      	b.n	80082f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80082ae:	78fb      	ldrb	r3, [r7, #3]
 80082b0:	015a      	lsls	r2, r3, #5
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	4413      	add	r3, r2
 80082b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082ba:	461a      	mov	r2, r3
 80082bc:	f240 2325 	movw	r3, #549	; 0x225
 80082c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80082c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	da17      	bge.n	80082fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	78fa      	ldrb	r2, [r7, #3]
 80082da:	0151      	lsls	r1, r2, #5
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	440a      	add	r2, r1
 80082e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80082e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80082e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80082ea:	e006      	b.n	80082fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
      break;
 80082f0:	e004      	b.n	80082fc <USB_HC_Init+0x14c>
      break;
 80082f2:	bf00      	nop
 80082f4:	e002      	b.n	80082fc <USB_HC_Init+0x14c>
      break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <USB_HC_Init+0x14c>
      break;
 80082fa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	2101      	movs	r1, #1
 800830c:	fa01 f303 	lsl.w	r3, r1, r3
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008316:	4313      	orrs	r3, r2
 8008318:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	699b      	ldr	r3, [r3, #24]
 800831e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800832a:	2b00      	cmp	r3, #0
 800832c:	da03      	bge.n	8008336 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800832e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	e001      	b.n	800833a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800833a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800833e:	2b02      	cmp	r3, #2
 8008340:	d103      	bne.n	800834a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008342:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008346:	60fb      	str	r3, [r7, #12]
 8008348:	e001      	b.n	800834e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800834e:	787b      	ldrb	r3, [r7, #1]
 8008350:	059b      	lsls	r3, r3, #22
 8008352:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008356:	78bb      	ldrb	r3, [r7, #2]
 8008358:	02db      	lsls	r3, r3, #11
 800835a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800835e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008360:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008364:	049b      	lsls	r3, r3, #18
 8008366:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800836a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800836c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800836e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008372:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	0159      	lsls	r1, r3, #5
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	440b      	add	r3, r1
 8008380:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008384:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800838a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800838c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008390:	2b03      	cmp	r3, #3
 8008392:	d10f      	bne.n	80083b4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	4413      	add	r3, r2
 800839c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	78fa      	ldrb	r2, [r7, #3]
 80083a4:	0151      	lsls	r1, r2, #5
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	440a      	add	r2, r1
 80083aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80083b2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	371c      	adds	r7, #28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop

080083c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08c      	sub	sp, #48	; 0x30
 80083c8:	af02      	add	r7, sp, #8
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	785b      	ldrb	r3, [r3, #1]
 80083da:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80083dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d028      	beq.n	8008440 <USB_HC_StartXfer+0x7c>
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	791b      	ldrb	r3, [r3, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d124      	bne.n	8008440 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <USB_HC_StartXfer+0x50>
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	795b      	ldrb	r3, [r3, #5]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d107      	bne.n	8008414 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	4619      	mov	r1, r3
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f000 fa2e 	bl	800886c <USB_DoPing>
      return HAL_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	e112      	b.n	800863a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d112      	bne.n	8008440 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	015a      	lsls	r2, r3, #5
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	4413      	add	r3, r2
 8008422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	69fa      	ldr	r2, [r7, #28]
 800842a:	0151      	lsls	r1, r2, #5
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	440a      	add	r2, r1
 8008430:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008434:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8008438:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2200      	movs	r2, #0
 800843e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d018      	beq.n	800847a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	8912      	ldrh	r2, [r2, #8]
 8008450:	4413      	add	r3, r2
 8008452:	3b01      	subs	r3, #1
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	8912      	ldrh	r2, [r2, #8]
 8008458:	fbb3 f3f2 	udiv	r3, r3, r2
 800845c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800845e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008460:	8b7b      	ldrh	r3, [r7, #26]
 8008462:	429a      	cmp	r2, r3
 8008464:	d90b      	bls.n	800847e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8008466:	8b7b      	ldrh	r3, [r7, #26]
 8008468:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800846a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	8912      	ldrh	r2, [r2, #8]
 8008470:	fb02 f203 	mul.w	r2, r2, r3
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	611a      	str	r2, [r3, #16]
 8008478:	e001      	b.n	800847e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800847a:	2301      	movs	r3, #1
 800847c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	78db      	ldrb	r3, [r3, #3]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8008486:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	8912      	ldrh	r2, [r2, #8]
 800848c:	fb02 f203 	mul.w	r2, r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800849c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800849e:	04d9      	lsls	r1, r3, #19
 80084a0:	4b68      	ldr	r3, [pc, #416]	; (8008644 <USB_HC_StartXfer+0x280>)
 80084a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	7a9b      	ldrb	r3, [r3, #10]
 80084aa:	075b      	lsls	r3, r3, #29
 80084ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084b0:	69f9      	ldr	r1, [r7, #28]
 80084b2:	0148      	lsls	r0, r1, #5
 80084b4:	6a39      	ldr	r1, [r7, #32]
 80084b6:	4401      	add	r1, r0
 80084b8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80084bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80084be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d009      	beq.n	80084da <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	68d9      	ldr	r1, [r3, #12]
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	6a3b      	ldr	r3, [r7, #32]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084d6:	460a      	mov	r2, r1
 80084d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	bf0c      	ite	eq
 80084ea:	2301      	moveq	r3, #1
 80084ec:	2300      	movne	r3, #0
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	69fa      	ldr	r2, [r7, #28]
 8008502:	0151      	lsls	r1, r2, #5
 8008504:	6a3a      	ldr	r2, [r7, #32]
 8008506:	440a      	add	r2, r1
 8008508:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800850c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008510:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	015a      	lsls	r2, r3, #5
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	4413      	add	r3, r2
 800851a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	7e7b      	ldrb	r3, [r7, #25]
 8008522:	075b      	lsls	r3, r3, #29
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	0148      	lsls	r0, r1, #5
 8008528:	6a39      	ldr	r1, [r7, #32]
 800852a:	4401      	add	r1, r0
 800852c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008530:	4313      	orrs	r3, r2
 8008532:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	4413      	add	r3, r2
 800853c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a41      	ldr	r2, [pc, #260]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008544:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008546:	4b40      	ldr	r3, [pc, #256]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800854e:	4a3e      	ldr	r2, [pc, #248]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008550:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	78db      	ldrb	r3, [r3, #3]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d006      	beq.n	8008568 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800855a:	4b3b      	ldr	r3, [pc, #236]	; (8008648 <USB_HC_StartXfer+0x284>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008562:	4a39      	ldr	r2, [pc, #228]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	e005      	b.n	8008574 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008568:	4b37      	ldr	r3, [pc, #220]	; (8008648 <USB_HC_StartXfer+0x284>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008570:	4a35      	ldr	r2, [pc, #212]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008572:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008574:	4b34      	ldr	r3, [pc, #208]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800857c:	4a32      	ldr	r2, [pc, #200]	; (8008648 <USB_HC_StartXfer+0x284>)
 800857e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	4413      	add	r3, r2
 8008588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800858c:	461a      	mov	r2, r3
 800858e:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <USB_HC_StartXfer+0x284>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8008594:	79fb      	ldrb	r3, [r7, #7]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d14e      	bne.n	8008638 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	78db      	ldrb	r3, [r3, #3]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d14a      	bne.n	8008638 <USB_HC_StartXfer+0x274>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d046      	beq.n	8008638 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	79db      	ldrb	r3, [r3, #7]
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d830      	bhi.n	8008614 <USB_HC_StartXfer+0x250>
 80085b2:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <USB_HC_StartXfer+0x1f4>)
 80085b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085ed 	.word	0x080085ed
 80085c0:	080085c9 	.word	0x080085c9
 80085c4:	080085ed 	.word	0x080085ed
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	691b      	ldr	r3, [r3, #16]
 80085cc:	3303      	adds	r3, #3
 80085ce:	089b      	lsrs	r3, r3, #2
 80085d0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80085d2:	8afa      	ldrh	r2, [r7, #22]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	b29b      	uxth	r3, r3
 80085da:	429a      	cmp	r2, r3
 80085dc:	d91c      	bls.n	8008618 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	619a      	str	r2, [r3, #24]
          }
          break;
 80085ea:	e015      	b.n	8008618 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	3303      	adds	r3, #3
 80085f2:	089b      	lsrs	r3, r3, #2
 80085f4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80085f6:	8afa      	ldrh	r2, [r7, #22]
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	b29b      	uxth	r3, r3
 8008602:	429a      	cmp	r2, r3
 8008604:	d90a      	bls.n	800861c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	619a      	str	r2, [r3, #24]
          }
          break;
 8008612:	e003      	b.n	800861c <USB_HC_StartXfer+0x258>

        default:
          break;
 8008614:	bf00      	nop
 8008616:	e002      	b.n	800861e <USB_HC_StartXfer+0x25a>
          break;
 8008618:	bf00      	nop
 800861a:	e000      	b.n	800861e <USB_HC_StartXfer+0x25a>
          break;
 800861c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	68d9      	ldr	r1, [r3, #12]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	785a      	ldrb	r2, [r3, #1]
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	b298      	uxth	r0, r3
 800862c:	2300      	movs	r3, #0
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4603      	mov	r3, r0
 8008632:	68f8      	ldr	r0, [r7, #12]
 8008634:	f7ff fb86 	bl	8007d44 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3728      	adds	r7, #40	; 0x28
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	1ff80000 	.word	0x1ff80000
 8008648:	20001358 	.word	0x20001358

0800864c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800864c:	b480      	push	{r7}
 800864e:	b085      	sub	sp, #20
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800865e:	695b      	ldr	r3, [r3, #20]
 8008660:	b29b      	uxth	r3, r3
}
 8008662:	4618      	mov	r0, r3
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800866e:	b480      	push	{r7}
 8008670:	b087      	sub	sp, #28
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	460b      	mov	r3, r1
 8008678:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800867e:	78fb      	ldrb	r3, [r7, #3]
 8008680:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	015a      	lsls	r2, r3, #5
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	4413      	add	r3, r2
 800868e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	0c9b      	lsrs	r3, r3, #18
 8008696:	f003 0303 	and.w	r3, r3, #3
 800869a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d002      	beq.n	80086a8 <USB_HC_Halt+0x3a>
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d16c      	bne.n	8008782 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80086c6:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d143      	bne.n	800875c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	0151      	lsls	r1, r2, #5
 80086e6:	693a      	ldr	r2, [r7, #16]
 80086e8:	440a      	add	r2, r1
 80086ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80086f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68fa      	ldr	r2, [r7, #12]
 8008704:	0151      	lsls	r1, r2, #5
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	440a      	add	r2, r1
 800870a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800870e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008712:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	4413      	add	r3, r2
 800871c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	0151      	lsls	r1, r2, #5
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	440a      	add	r2, r1
 800872a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800872e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008732:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	3301      	adds	r3, #1
 8008738:	617b      	str	r3, [r7, #20]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008740:	d81d      	bhi.n	800877e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	4413      	add	r3, r2
 800874a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008754:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008758:	d0ec      	beq.n	8008734 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800875a:	e080      	b.n	800885e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4413      	add	r3, r2
 8008764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	0151      	lsls	r1, r2, #5
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	440a      	add	r2, r1
 8008772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008776:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800877a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800877c:	e06f      	b.n	800885e <USB_HC_Halt+0x1f0>
          break;
 800877e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008780:	e06d      	b.n	800885e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	015a      	lsls	r2, r3, #5
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	4413      	add	r3, r2
 800878a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	0151      	lsls	r1, r2, #5
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	440a      	add	r2, r1
 8008798:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800879c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087a0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087a8:	691b      	ldr	r3, [r3, #16]
 80087aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d143      	bne.n	800883a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68fa      	ldr	r2, [r7, #12]
 80087c2:	0151      	lsls	r1, r2, #5
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	440a      	add	r2, r1
 80087c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087d0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	0151      	lsls	r1, r2, #5
 80087e4:	693a      	ldr	r2, [r7, #16]
 80087e6:	440a      	add	r2, r1
 80087e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80087f0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	0151      	lsls	r1, r2, #5
 8008804:	693a      	ldr	r2, [r7, #16]
 8008806:	440a      	add	r2, r1
 8008808:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800880c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008810:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	3301      	adds	r3, #1
 8008816:	617b      	str	r3, [r7, #20]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800881e:	d81d      	bhi.n	800885c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008836:	d0ec      	beq.n	8008812 <USB_HC_Halt+0x1a4>
 8008838:	e011      	b.n	800885e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	015a      	lsls	r2, r3, #5
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	4413      	add	r3, r2
 8008842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	0151      	lsls	r1, r2, #5
 800884c:	693a      	ldr	r2, [r7, #16]
 800884e:	440a      	add	r2, r1
 8008850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008854:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008858:	6013      	str	r3, [r2, #0]
 800885a:	e000      	b.n	800885e <USB_HC_Halt+0x1f0>
          break;
 800885c:	bf00      	nop
    }
  }

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800886c:	b480      	push	{r7}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
 8008874:	460b      	mov	r3, r1
 8008876:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008880:	2301      	movs	r3, #1
 8008882:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	04da      	lsls	r2, r3, #19
 8008888:	4b15      	ldr	r3, [pc, #84]	; (80088e0 <USB_DoPing+0x74>)
 800888a:	4013      	ands	r3, r2
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	697a      	ldr	r2, [r7, #20]
 8008892:	440a      	add	r2, r1
 8008894:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008898:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800889c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	015a      	lsls	r2, r3, #5
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	4413      	add	r3, r2
 80088a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088b4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088bc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088ca:	461a      	mov	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	371c      	adds	r7, #28
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop
 80088e0:	1ff80000 	.word	0x1ff80000

080088e4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f7ff f9a1 	bl	8007c3c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80088fa:	2110      	movs	r1, #16
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f7ff f9d9 	bl	8007cb4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f7ff f9fc 	bl	8007d00 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008908:	2300      	movs	r3, #0
 800890a:	613b      	str	r3, [r7, #16]
 800890c:	e01f      	b.n	800894e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008924:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800892c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008934:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	015a      	lsls	r2, r3, #5
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4413      	add	r3, r2
 800893e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008942:	461a      	mov	r2, r3
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	3301      	adds	r3, #1
 800894c:	613b      	str	r3, [r7, #16]
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	2b0f      	cmp	r3, #15
 8008952:	d9dc      	bls.n	800890e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]
 8008958:	e034      	b.n	80089c4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	4413      	add	r3, r2
 8008962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008970:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008978:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008980:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	4413      	add	r3, r2
 800898a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800898e:	461a      	mov	r2, r3
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	3301      	adds	r3, #1
 8008998:	617b      	str	r3, [r7, #20]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089a0:	d80c      	bhi.n	80089bc <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089b8:	d0ec      	beq.n	8008994 <USB_StopHost+0xb0>
 80089ba:	e000      	b.n	80089be <USB_StopHost+0xda>
        break;
 80089bc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	3301      	adds	r3, #1
 80089c2:	613b      	str	r3, [r7, #16]
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d9c7      	bls.n	800895a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80089d0:	461a      	mov	r2, r3
 80089d2:	f04f 33ff 	mov.w	r3, #4294967295
 80089d6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f04f 32ff 	mov.w	r2, #4294967295
 80089de:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7ff f91a 	bl	8007c1a <USB_EnableGlobalInt>

  return HAL_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3718      	adds	r7, #24
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80089f4:	4904      	ldr	r1, [pc, #16]	; (8008a08 <MX_FATFS_Init+0x18>)
 80089f6:	4805      	ldr	r0, [pc, #20]	; (8008a0c <MX_FATFS_Init+0x1c>)
 80089f8:	f005 fb7a 	bl	800e0f0 <FATFS_LinkDriver>
 80089fc:	4603      	mov	r3, r0
 80089fe:	461a      	mov	r2, r3
 8008a00:	4b03      	ldr	r3, [pc, #12]	; (8008a10 <MX_FATFS_Init+0x20>)
 8008a02:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8008a04:	bf00      	nop
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	200015b0 	.word	0x200015b0
 8008a0c:	0800f138 	.word	0x0800f138
 8008a10:	20001a14 	.word	0x20001a14

08008a14 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008a14:	b480      	push	{r7}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008a18:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr

08008a24 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008a2e:	2300      	movs	r3, #0
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	4603      	mov	r3, r0
 8008a44:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	4808      	ldr	r0, [pc, #32]	; (8008a70 <USBH_status+0x34>)
 8008a50:	f000 fe11 	bl	8009676 <USBH_MSC_UnitIsReady>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d002      	beq.n	8008a60 <USBH_status+0x24>
  {
    res = RES_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73fb      	strb	r3, [r7, #15]
 8008a5e:	e001      	b.n	8008a64 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	20001a18 	.word	0x20001a18

08008a74 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b094      	sub	sp, #80	; 0x50
 8008a78:	af02      	add	r7, sp, #8
 8008a7a:	60b9      	str	r1, [r7, #8]
 8008a7c:	607a      	str	r2, [r7, #4]
 8008a7e:	603b      	str	r3, [r7, #0]
 8008a80:	4603      	mov	r3, r0
 8008a82:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8008a8a:	7bf9      	ldrb	r1, [r7, #15]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	4812      	ldr	r0, [pc, #72]	; (8008ae0 <USBH_read+0x6c>)
 8008a96:	f000 fe38 	bl	800970a <USBH_MSC_Read>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d103      	bne.n	8008aa8 <USBH_read+0x34>
  {
    res = RES_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008aa6:	e015      	b.n	8008ad4 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008aa8:	f107 0210 	add.w	r2, r7, #16
 8008aac:	7bfb      	ldrb	r3, [r7, #15]
 8008aae:	4619      	mov	r1, r3
 8008ab0:	480b      	ldr	r0, [pc, #44]	; (8008ae0 <USBH_read+0x6c>)
 8008ab2:	f000 fe06 	bl	80096c2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008ab6:	7f7b      	ldrb	r3, [r7, #29]
 8008ab8:	2b28      	cmp	r3, #40	; 0x28
 8008aba:	d003      	beq.n	8008ac4 <USBH_read+0x50>
 8008abc:	2b3a      	cmp	r3, #58	; 0x3a
 8008abe:	d001      	beq.n	8008ac4 <USBH_read+0x50>
 8008ac0:	2b04      	cmp	r3, #4
 8008ac2:	d103      	bne.n	8008acc <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8008aca:	e003      	b.n	8008ad4 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008ad2:	bf00      	nop
    }
  }

  return res;
 8008ad4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3748      	adds	r7, #72	; 0x48
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}
 8008ae0:	20001a18 	.word	0x20001a18

08008ae4 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b094      	sub	sp, #80	; 0x50
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
 8008aee:	603b      	str	r3, [r7, #0]
 8008af0:	4603      	mov	r3, r0
 8008af2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008af4:	2301      	movs	r3, #1
 8008af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8008afa:	7bf9      	ldrb	r1, [r7, #15]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4817      	ldr	r0, [pc, #92]	; (8008b64 <USBH_write+0x80>)
 8008b06:	f000 fe69 	bl	80097dc <USBH_MSC_Write>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d103      	bne.n	8008b18 <USBH_write+0x34>
  {
    res = RES_OK;
 8008b10:	2300      	movs	r3, #0
 8008b12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b16:	e01f      	b.n	8008b58 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8008b18:	f107 0210 	add.w	r2, r7, #16
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	4810      	ldr	r0, [pc, #64]	; (8008b64 <USBH_write+0x80>)
 8008b22:	f000 fdce 	bl	80096c2 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8008b26:	7f7b      	ldrb	r3, [r7, #29]
 8008b28:	2b27      	cmp	r3, #39	; 0x27
 8008b2a:	d009      	beq.n	8008b40 <USBH_write+0x5c>
 8008b2c:	2b27      	cmp	r3, #39	; 0x27
 8008b2e:	dc02      	bgt.n	8008b36 <USBH_write+0x52>
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d009      	beq.n	8008b48 <USBH_write+0x64>
 8008b34:	e00c      	b.n	8008b50 <USBH_write+0x6c>
 8008b36:	2b28      	cmp	r3, #40	; 0x28
 8008b38:	d006      	beq.n	8008b48 <USBH_write+0x64>
 8008b3a:	2b3a      	cmp	r3, #58	; 0x3a
 8008b3c:	d004      	beq.n	8008b48 <USBH_write+0x64>
 8008b3e:	e007      	b.n	8008b50 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008b40:	2302      	movs	r3, #2
 8008b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b46:	e007      	b.n	8008b58 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8008b48:	2303      	movs	r3, #3
 8008b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b4e:	e003      	b.n	8008b58 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008b56:	bf00      	nop
    }
  }

  return res;
 8008b58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3748      	adds	r7, #72	; 0x48
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20001a18 	.word	0x20001a18

08008b68 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b090      	sub	sp, #64	; 0x40
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	603a      	str	r2, [r7, #0]
 8008b72:	71fb      	strb	r3, [r7, #7]
 8008b74:	460b      	mov	r3, r1
 8008b76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008b7e:	79bb      	ldrb	r3, [r7, #6]
 8008b80:	2b03      	cmp	r3, #3
 8008b82:	d852      	bhi.n	8008c2a <USBH_ioctl+0xc2>
 8008b84:	a201      	add	r2, pc, #4	; (adr r2, 8008b8c <USBH_ioctl+0x24>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008b9d 	.word	0x08008b9d
 8008b90:	08008ba5 	.word	0x08008ba5
 8008b94:	08008bcf 	.word	0x08008bcf
 8008b98:	08008bfb 	.word	0x08008bfb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008ba2:	e045      	b.n	8008c30 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008ba4:	f107 0208 	add.w	r2, r7, #8
 8008ba8:	79fb      	ldrb	r3, [r7, #7]
 8008baa:	4619      	mov	r1, r3
 8008bac:	4823      	ldr	r0, [pc, #140]	; (8008c3c <USBH_ioctl+0xd4>)
 8008bae:	f000 fd88 	bl	80096c2 <USBH_MSC_GetLUNInfo>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d106      	bne.n	8008bc6 <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008bc4:	e034      	b.n	8008c30 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008bcc:	e030      	b.n	8008c30 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008bce:	f107 0208 	add.w	r2, r7, #8
 8008bd2:	79fb      	ldrb	r3, [r7, #7]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	4819      	ldr	r0, [pc, #100]	; (8008c3c <USBH_ioctl+0xd4>)
 8008bd8:	f000 fd73 	bl	80096c2 <USBH_MSC_GetLUNInfo>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d107      	bne.n	8008bf2 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8008be2:	8a3b      	ldrh	r3, [r7, #16]
 8008be4:	461a      	mov	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008bf0:	e01e      	b.n	8008c30 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008bf8:	e01a      	b.n	8008c30 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008bfa:	f107 0208 	add.w	r2, r7, #8
 8008bfe:	79fb      	ldrb	r3, [r7, #7]
 8008c00:	4619      	mov	r1, r3
 8008c02:	480e      	ldr	r0, [pc, #56]	; (8008c3c <USBH_ioctl+0xd4>)
 8008c04:	f000 fd5d 	bl	80096c2 <USBH_MSC_GetLUNInfo>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d109      	bne.n	8008c22 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008c0e:	8a3b      	ldrh	r3, [r7, #16]
 8008c10:	0a5b      	lsrs	r3, r3, #9
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008c20:	e006      	b.n	8008c30 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008c28:	e002      	b.n	8008c30 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8008c2a:	2304      	movs	r3, #4
 8008c2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3740      	adds	r7, #64	; 0x40
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20001a18 	.word	0x20001a18

08008c40 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008c40:	b590      	push	{r4, r7, lr}
 8008c42:	b089      	sub	sp, #36	; 0x24
 8008c44:	af04      	add	r7, sp, #16
 8008c46:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c4e:	7919      	ldrb	r1, [r3, #4]
 8008c50:	2350      	movs	r3, #80	; 0x50
 8008c52:	2206      	movs	r2, #6
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f001 fc4f 	bl	800a4f8 <USBH_FindInterface>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
 8008c60:	2bff      	cmp	r3, #255	; 0xff
 8008c62:	d002      	beq.n	8008c6a <USBH_MSC_InterfaceInit+0x2a>
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d901      	bls.n	8008c6e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	e0ef      	b.n	8008e4e <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f001 fc24 	bl	800a4c0 <USBH_SelectInterface>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008c82:	2302      	movs	r3, #2
 8008c84:	e0e3      	b.n	8008e4e <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008c8c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008c90:	f005 fda4 	bl	800e7dc <malloc>
 8008c94:	4603      	mov	r3, r0
 8008c96:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e0d0      	b.n	8008e4e <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008cac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	68b8      	ldr	r0, [r7, #8]
 8008cb4:	f005 fdad 	bl	800e812 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	211a      	movs	r1, #26
 8008cbe:	fb01 f303 	mul.w	r3, r1, r3
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	b25b      	sxtb	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	da16      	bge.n	8008cfe <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	211a      	movs	r1, #26
 8008cd6:	fb01 f303 	mul.w	r3, r1, r3
 8008cda:	4413      	add	r3, r2
 8008cdc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	211a      	movs	r1, #26
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008cf6:	881a      	ldrh	r2, [r3, #0]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	815a      	strh	r2, [r3, #10]
 8008cfc:	e015      	b.n	8008d2a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	211a      	movs	r1, #26
 8008d04:	fb01 f303 	mul.w	r3, r1, r3
 8008d08:	4413      	add	r3, r2
 8008d0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d0e:	781a      	ldrb	r2, [r3, #0]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	211a      	movs	r1, #26
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d24:	881a      	ldrh	r2, [r3, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	211a      	movs	r1, #26
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	b25b      	sxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da16      	bge.n	8008d70 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	211a      	movs	r1, #26
 8008d48:	fb01 f303 	mul.w	r3, r1, r3
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d52:	781a      	ldrb	r2, [r3, #0]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	211a      	movs	r1, #26
 8008d5e:	fb01 f303 	mul.w	r3, r1, r3
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d68:	881a      	ldrh	r2, [r3, #0]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	815a      	strh	r2, [r3, #10]
 8008d6e:	e015      	b.n	8008d9c <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008d70:	7bfb      	ldrb	r3, [r7, #15]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	211a      	movs	r1, #26
 8008d76:	fb01 f303 	mul.w	r3, r1, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d80:	781a      	ldrb	r2, [r3, #0]
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	211a      	movs	r1, #26
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	4413      	add	r3, r2
 8008d92:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d96:	881a      	ldrh	r2, [r3, #0]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2200      	movs	r2, #0
 8008dac:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	799b      	ldrb	r3, [r3, #6]
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f002 fdc2 	bl	800b93e <USBH_AllocPipe>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	79db      	ldrb	r3, [r3, #7]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f002 fdb8 	bl	800b93e <USBH_AllocPipe>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	461a      	mov	r2, r3
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fda4 	bl	8009924 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	7959      	ldrb	r1, [r3, #5]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	7998      	ldrb	r0, [r3, #6]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008df0:	68ba      	ldr	r2, [r7, #8]
 8008df2:	8912      	ldrh	r2, [r2, #8]
 8008df4:	9202      	str	r2, [sp, #8]
 8008df6:	2202      	movs	r2, #2
 8008df8:	9201      	str	r2, [sp, #4]
 8008dfa:	9300      	str	r3, [sp, #0]
 8008dfc:	4623      	mov	r3, r4
 8008dfe:	4602      	mov	r2, r0
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f002 fd6d 	bl	800b8e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	7919      	ldrb	r1, [r3, #4]
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	79d8      	ldrb	r0, [r3, #7]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	8952      	ldrh	r2, [r2, #10]
 8008e1e:	9202      	str	r2, [sp, #8]
 8008e20:	2202      	movs	r2, #2
 8008e22:	9201      	str	r2, [sp, #4]
 8008e24:	9300      	str	r3, [sp, #0]
 8008e26:	4623      	mov	r3, r4
 8008e28:	4602      	mov	r2, r0
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f002 fd58 	bl	800b8e0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	791b      	ldrb	r3, [r3, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f005 fbeb 	bl	800e614 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	795b      	ldrb	r3, [r3, #5]
 8008e42:	2200      	movs	r2, #0
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f005 fbe4 	bl	800e614 <USBH_LL_SetToggle>

  return USBH_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd90      	pop	{r4, r7, pc}

08008e56 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b084      	sub	sp, #16
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	795b      	ldrb	r3, [r3, #5]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00e      	beq.n	8008e8e <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	795b      	ldrb	r3, [r3, #5]
 8008e74:	4619      	mov	r1, r3
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f002 fd51 	bl	800b91e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	795b      	ldrb	r3, [r3, #5]
 8008e80:	4619      	mov	r1, r3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f002 fd7c 	bl	800b980 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	791b      	ldrb	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00e      	beq.n	8008eb4 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	791b      	ldrb	r3, [r3, #4]
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f002 fd3e 	bl	800b91e <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	791b      	ldrb	r3, [r3, #4]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f002 fd69 	bl	800b980 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008eba:	69db      	ldr	r3, [r3, #28]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ec6:	69db      	ldr	r3, [r3, #28]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f005 fc8f 	bl	800e7ec <free>
    phost->pActiveClass->pData = 0U;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008ed8:	2300      	movs	r3, #0
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	7b9b      	ldrb	r3, [r3, #14]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	d004      	beq.n	8008f0a <USBH_MSC_ClassRequest+0x28>
 8008f00:	2b03      	cmp	r3, #3
 8008f02:	d03e      	beq.n	8008f82 <USBH_MSC_ClassRequest+0xa0>
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d000      	beq.n	8008f0a <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8008f08:	e04a      	b.n	8008fa0 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fcea 	bl	80098e8 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	d104      	bne.n	8008f28 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	2200      	movs	r2, #0
 8008f22:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d135      	bne.n	8008f9a <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d804      	bhi.n	8008f40 <USBH_MSC_ClassRequest+0x5e>
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	e000      	b.n	8008f42 <USBH_MSC_ClassRequest+0x60>
 8008f40:	2202      	movs	r2, #2
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	73bb      	strb	r3, [r7, #14]
 8008f4a:	e014      	b.n	8008f76 <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	2134      	movs	r1, #52	; 0x34
 8008f52:	fb01 f303 	mul.w	r3, r1, r3
 8008f56:	4413      	add	r3, r2
 8008f58:	3392      	adds	r3, #146	; 0x92
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	2134      	movs	r1, #52	; 0x34
 8008f64:	fb01 f303 	mul.w	r3, r1, r3
 8008f68:	4413      	add	r3, r2
 8008f6a:	33c1      	adds	r3, #193	; 0xc1
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008f70:	7bbb      	ldrb	r3, [r7, #14]
 8008f72:	3301      	adds	r3, #1
 8008f74:	73bb      	strb	r3, [r7, #14]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	7bba      	ldrb	r2, [r7, #14]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d3e5      	bcc.n	8008f4c <USBH_MSC_ClassRequest+0x6a>
      break;
 8008f80:	e00b      	b.n	8008f9a <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008f82:	2100      	movs	r1, #0
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f002 f878 	bl	800b07a <USBH_ClrFeature>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d106      	bne.n	8008f9e <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	7bda      	ldrb	r2, [r3, #15]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	739a      	strb	r2, [r3, #14]
      break;
 8008f98:	e001      	b.n	8008f9e <USBH_MSC_ClassRequest+0xbc>
      break;
 8008f9a:	bf00      	nop
 8008f9c:	e000      	b.n	8008fa0 <USBH_MSC_ClassRequest+0xbe>
      break;
 8008f9e:	bf00      	nop
  }

  return status;
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	7b1b      	ldrb	r3, [r3, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d003      	beq.n	8008fda <USBH_MSC_Process+0x2e>
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	f000 8271 	beq.w	80094ba <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008fd8:	e272      	b.n	80094c0 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	f080 824f 	bcs.w	800948a <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	2334      	movs	r3, #52	; 0x34
 8008ff8:	fb03 f301 	mul.w	r3, r3, r1
 8008ffc:	4413      	add	r3, r2
 8008ffe:	3391      	adds	r3, #145	; 0x91
 8009000:	2201      	movs	r2, #1
 8009002:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800900a:	4619      	mov	r1, r3
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	2334      	movs	r3, #52	; 0x34
 8009010:	fb03 f301 	mul.w	r3, r3, r1
 8009014:	4413      	add	r3, r2
 8009016:	3390      	adds	r3, #144	; 0x90
 8009018:	781b      	ldrb	r3, [r3, #0]
 800901a:	2b08      	cmp	r3, #8
 800901c:	f200 8243 	bhi.w	80094a6 <USBH_MSC_Process+0x4fa>
 8009020:	a201      	add	r2, pc, #4	; (adr r2, 8009028 <USBH_MSC_Process+0x7c>)
 8009022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009026:	bf00      	nop
 8009028:	0800904d 	.word	0x0800904d
 800902c:	080094a7 	.word	0x080094a7
 8009030:	08009115 	.word	0x08009115
 8009034:	08009299 	.word	0x08009299
 8009038:	08009073 	.word	0x08009073
 800903c:	08009365 	.word	0x08009365
 8009040:	080094a7 	.word	0x080094a7
 8009044:	080094a7 	.word	0x080094a7
 8009048:	08009479 	.word	0x08009479
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009052:	4619      	mov	r1, r3
 8009054:	693a      	ldr	r2, [r7, #16]
 8009056:	2334      	movs	r3, #52	; 0x34
 8009058:	fb03 f301 	mul.w	r3, r3, r1
 800905c:	4413      	add	r3, r2
 800905e:	3390      	adds	r3, #144	; 0x90
 8009060:	2204      	movs	r2, #4
 8009062:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8009070:	e222      	b.n	80094b8 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009078:	b2d9      	uxtb	r1, r3
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009080:	461a      	mov	r2, r3
 8009082:	2334      	movs	r3, #52	; 0x34
 8009084:	fb03 f302 	mul.w	r3, r3, r2
 8009088:	3398      	adds	r3, #152	; 0x98
 800908a:	693a      	ldr	r2, [r7, #16]
 800908c:	4413      	add	r3, r2
 800908e:	3307      	adds	r3, #7
 8009090:	461a      	mov	r2, r3
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 ff68 	bl	8009f68 <USBH_MSC_SCSI_Inquiry>
 8009098:	4603      	mov	r3, r0
 800909a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d10b      	bne.n	80090ba <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090a8:	4619      	mov	r1, r3
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	2334      	movs	r3, #52	; 0x34
 80090ae:	fb03 f301 	mul.w	r3, r3, r1
 80090b2:	4413      	add	r3, r2
 80090b4:	3390      	adds	r3, #144	; 0x90
 80090b6:	2202      	movs	r2, #2
 80090b8:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d10c      	bne.n	80090da <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090c6:	4619      	mov	r1, r3
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	2334      	movs	r3, #52	; 0x34
 80090cc:	fb03 f301 	mul.w	r3, r3, r1
 80090d0:	4413      	add	r3, r2
 80090d2:	3390      	adds	r3, #144	; 0x90
 80090d4:	2205      	movs	r2, #5
 80090d6:	701a      	strb	r2, [r3, #0]
            break;
 80090d8:	e1e7      	b.n	80094aa <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80090da:	7bfb      	ldrb	r3, [r7, #15]
 80090dc:	2b04      	cmp	r3, #4
 80090de:	f040 81e4 	bne.w	80094aa <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80090e8:	4619      	mov	r1, r3
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	2334      	movs	r3, #52	; 0x34
 80090ee:	fb03 f301 	mul.w	r3, r3, r1
 80090f2:	4413      	add	r3, r2
 80090f4:	3390      	adds	r3, #144	; 0x90
 80090f6:	2201      	movs	r2, #1
 80090f8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009100:	4619      	mov	r1, r3
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	2334      	movs	r3, #52	; 0x34
 8009106:	fb03 f301 	mul.w	r3, r3, r1
 800910a:	4413      	add	r3, r2
 800910c:	3391      	adds	r3, #145	; 0x91
 800910e:	2202      	movs	r2, #2
 8009110:	701a      	strb	r2, [r3, #0]
            break;
 8009112:	e1ca      	b.n	80094aa <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800911a:	b2db      	uxtb	r3, r3
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fe64 	bl	8009dec <USBH_MSC_SCSI_TestUnitReady>
 8009124:	4603      	mov	r3, r0
 8009126:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009128:	7bbb      	ldrb	r3, [r7, #14]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d149      	bne.n	80091c2 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009134:	4619      	mov	r1, r3
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	2334      	movs	r3, #52	; 0x34
 800913a:	fb03 f301 	mul.w	r3, r3, r1
 800913e:	4413      	add	r3, r2
 8009140:	3392      	adds	r3, #146	; 0x92
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00c      	beq.n	8009162 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800914e:	4619      	mov	r1, r3
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	2334      	movs	r3, #52	; 0x34
 8009154:	fb03 f301 	mul.w	r3, r3, r1
 8009158:	4413      	add	r3, r2
 800915a:	33c1      	adds	r3, #193	; 0xc1
 800915c:	2201      	movs	r2, #1
 800915e:	701a      	strb	r2, [r3, #0]
 8009160:	e00b      	b.n	800917a <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009168:	4619      	mov	r1, r3
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	2334      	movs	r3, #52	; 0x34
 800916e:	fb03 f301 	mul.w	r3, r3, r1
 8009172:	4413      	add	r3, r2
 8009174:	33c1      	adds	r3, #193	; 0xc1
 8009176:	2200      	movs	r2, #0
 8009178:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009180:	4619      	mov	r1, r3
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	2334      	movs	r3, #52	; 0x34
 8009186:	fb03 f301 	mul.w	r3, r3, r1
 800918a:	4413      	add	r3, r2
 800918c:	3390      	adds	r3, #144	; 0x90
 800918e:	2203      	movs	r2, #3
 8009190:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009198:	4619      	mov	r1, r3
 800919a:	693a      	ldr	r2, [r7, #16]
 800919c:	2334      	movs	r3, #52	; 0x34
 800919e:	fb03 f301 	mul.w	r3, r3, r1
 80091a2:	4413      	add	r3, r2
 80091a4:	3391      	adds	r3, #145	; 0x91
 80091a6:	2200      	movs	r2, #0
 80091a8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091b0:	4619      	mov	r1, r3
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	2334      	movs	r3, #52	; 0x34
 80091b6:	fb03 f301 	mul.w	r3, r3, r1
 80091ba:	4413      	add	r3, r2
 80091bc:	3392      	adds	r3, #146	; 0x92
 80091be:	2200      	movs	r2, #0
 80091c0:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80091c2:	7bbb      	ldrb	r3, [r7, #14]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d14a      	bne.n	800925e <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091ce:	4619      	mov	r1, r3
 80091d0:	693a      	ldr	r2, [r7, #16]
 80091d2:	2334      	movs	r3, #52	; 0x34
 80091d4:	fb03 f301 	mul.w	r3, r3, r1
 80091d8:	4413      	add	r3, r2
 80091da:	3392      	adds	r3, #146	; 0x92
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d00c      	beq.n	80091fc <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80091e8:	4619      	mov	r1, r3
 80091ea:	693a      	ldr	r2, [r7, #16]
 80091ec:	2334      	movs	r3, #52	; 0x34
 80091ee:	fb03 f301 	mul.w	r3, r3, r1
 80091f2:	4413      	add	r3, r2
 80091f4:	33c1      	adds	r3, #193	; 0xc1
 80091f6:	2201      	movs	r2, #1
 80091f8:	701a      	strb	r2, [r3, #0]
 80091fa:	e00b      	b.n	8009214 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009202:	4619      	mov	r1, r3
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	2334      	movs	r3, #52	; 0x34
 8009208:	fb03 f301 	mul.w	r3, r3, r1
 800920c:	4413      	add	r3, r2
 800920e:	33c1      	adds	r3, #193	; 0xc1
 8009210:	2200      	movs	r2, #0
 8009212:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800921a:	4619      	mov	r1, r3
 800921c:	693a      	ldr	r2, [r7, #16]
 800921e:	2334      	movs	r3, #52	; 0x34
 8009220:	fb03 f301 	mul.w	r3, r3, r1
 8009224:	4413      	add	r3, r2
 8009226:	3390      	adds	r3, #144	; 0x90
 8009228:	2205      	movs	r2, #5
 800922a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009232:	4619      	mov	r1, r3
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	2334      	movs	r3, #52	; 0x34
 8009238:	fb03 f301 	mul.w	r3, r3, r1
 800923c:	4413      	add	r3, r2
 800923e:	3391      	adds	r3, #145	; 0x91
 8009240:	2201      	movs	r2, #1
 8009242:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800924a:	4619      	mov	r1, r3
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	2334      	movs	r3, #52	; 0x34
 8009250:	fb03 f301 	mul.w	r3, r3, r1
 8009254:	4413      	add	r3, r2
 8009256:	3392      	adds	r3, #146	; 0x92
 8009258:	2202      	movs	r2, #2
 800925a:	701a      	strb	r2, [r3, #0]
            break;
 800925c:	e127      	b.n	80094ae <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b04      	cmp	r3, #4
 8009262:	f040 8124 	bne.w	80094ae <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800926c:	4619      	mov	r1, r3
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	2334      	movs	r3, #52	; 0x34
 8009272:	fb03 f301 	mul.w	r3, r3, r1
 8009276:	4413      	add	r3, r2
 8009278:	3390      	adds	r3, #144	; 0x90
 800927a:	2201      	movs	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009284:	4619      	mov	r1, r3
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	2334      	movs	r3, #52	; 0x34
 800928a:	fb03 f301 	mul.w	r3, r3, r1
 800928e:	4413      	add	r3, r2
 8009290:	3391      	adds	r3, #145	; 0x91
 8009292:	2202      	movs	r2, #2
 8009294:	701a      	strb	r2, [r3, #0]
            break;
 8009296:	e10a      	b.n	80094ae <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800929e:	b2d9      	uxtb	r1, r3
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092a6:	461a      	mov	r2, r3
 80092a8:	2334      	movs	r3, #52	; 0x34
 80092aa:	fb03 f302 	mul.w	r3, r3, r2
 80092ae:	3390      	adds	r3, #144	; 0x90
 80092b0:	693a      	ldr	r2, [r7, #16]
 80092b2:	4413      	add	r3, r2
 80092b4:	3304      	adds	r3, #4
 80092b6:	461a      	mov	r2, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fdda 	bl	8009e72 <USBH_MSC_SCSI_ReadCapacity>
 80092be:	4603      	mov	r3, r0
 80092c0:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80092c2:	7bfb      	ldrb	r3, [r7, #15]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d120      	bne.n	800930a <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092ce:	4619      	mov	r1, r3
 80092d0:	693a      	ldr	r2, [r7, #16]
 80092d2:	2334      	movs	r3, #52	; 0x34
 80092d4:	fb03 f301 	mul.w	r3, r3, r1
 80092d8:	4413      	add	r3, r2
 80092da:	3390      	adds	r3, #144	; 0x90
 80092dc:	2201      	movs	r2, #1
 80092de:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092e6:	4619      	mov	r1, r3
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	2334      	movs	r3, #52	; 0x34
 80092ec:	fb03 f301 	mul.w	r3, r3, r1
 80092f0:	4413      	add	r3, r2
 80092f2:	3391      	adds	r3, #145	; 0x91
 80092f4:	2200      	movs	r2, #0
 80092f6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80092fe:	3301      	adds	r3, #1
 8009300:	b29a      	uxth	r2, r3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009308:	e0d3      	b.n	80094b2 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	2b02      	cmp	r3, #2
 800930e:	d10c      	bne.n	800932a <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009316:	4619      	mov	r1, r3
 8009318:	693a      	ldr	r2, [r7, #16]
 800931a:	2334      	movs	r3, #52	; 0x34
 800931c:	fb03 f301 	mul.w	r3, r3, r1
 8009320:	4413      	add	r3, r2
 8009322:	3390      	adds	r3, #144	; 0x90
 8009324:	2205      	movs	r2, #5
 8009326:	701a      	strb	r2, [r3, #0]
            break;
 8009328:	e0c3      	b.n	80094b2 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b04      	cmp	r3, #4
 800932e:	f040 80c0 	bne.w	80094b2 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009338:	4619      	mov	r1, r3
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	2334      	movs	r3, #52	; 0x34
 800933e:	fb03 f301 	mul.w	r3, r3, r1
 8009342:	4413      	add	r3, r2
 8009344:	3390      	adds	r3, #144	; 0x90
 8009346:	2201      	movs	r2, #1
 8009348:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009350:	4619      	mov	r1, r3
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	2334      	movs	r3, #52	; 0x34
 8009356:	fb03 f301 	mul.w	r3, r3, r1
 800935a:	4413      	add	r3, r2
 800935c:	3391      	adds	r3, #145	; 0x91
 800935e:	2202      	movs	r2, #2
 8009360:	701a      	strb	r2, [r3, #0]
            break;
 8009362:	e0a6      	b.n	80094b2 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800936a:	b2d9      	uxtb	r1, r3
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009372:	461a      	mov	r2, r3
 8009374:	2334      	movs	r3, #52	; 0x34
 8009376:	fb03 f302 	mul.w	r3, r3, r2
 800937a:	3398      	adds	r3, #152	; 0x98
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	4413      	add	r3, r2
 8009380:	3304      	adds	r3, #4
 8009382:	461a      	mov	r2, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fe94 	bl	800a0b2 <USBH_MSC_SCSI_RequestSense>
 800938a:	4603      	mov	r3, r0
 800938c:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d145      	bne.n	8009420 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800939a:	4619      	mov	r1, r3
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	2334      	movs	r3, #52	; 0x34
 80093a0:	fb03 f301 	mul.w	r3, r3, r1
 80093a4:	4413      	add	r3, r2
 80093a6:	339c      	adds	r3, #156	; 0x9c
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b06      	cmp	r3, #6
 80093ac:	d00c      	beq.n	80093c8 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093b4:	4619      	mov	r1, r3
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	2334      	movs	r3, #52	; 0x34
 80093ba:	fb03 f301 	mul.w	r3, r3, r1
 80093be:	4413      	add	r3, r2
 80093c0:	339c      	adds	r3, #156	; 0x9c
 80093c2:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d117      	bne.n	80093f8 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80093da:	4293      	cmp	r3, r2
 80093dc:	d80c      	bhi.n	80093f8 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093e4:	4619      	mov	r1, r3
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	2334      	movs	r3, #52	; 0x34
 80093ea:	fb03 f301 	mul.w	r3, r3, r1
 80093ee:	4413      	add	r3, r2
 80093f0:	3390      	adds	r3, #144	; 0x90
 80093f2:	2202      	movs	r2, #2
 80093f4:	701a      	strb	r2, [r3, #0]
                  break;
 80093f6:	e05f      	b.n	80094b8 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80093fe:	4619      	mov	r1, r3
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	2334      	movs	r3, #52	; 0x34
 8009404:	fb03 f301 	mul.w	r3, r3, r1
 8009408:	4413      	add	r3, r2
 800940a:	3390      	adds	r3, #144	; 0x90
 800940c:	2201      	movs	r2, #1
 800940e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009416:	3301      	adds	r3, #1
 8009418:	b29a      	uxth	r2, r3
 800941a:	693b      	ldr	r3, [r7, #16]
 800941c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b02      	cmp	r3, #2
 8009424:	d10c      	bne.n	8009440 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800942c:	4619      	mov	r1, r3
 800942e:	693a      	ldr	r2, [r7, #16]
 8009430:	2334      	movs	r3, #52	; 0x34
 8009432:	fb03 f301 	mul.w	r3, r3, r1
 8009436:	4413      	add	r3, r2
 8009438:	3390      	adds	r3, #144	; 0x90
 800943a:	2208      	movs	r2, #8
 800943c:	701a      	strb	r2, [r3, #0]
            break;
 800943e:	e03a      	b.n	80094b6 <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	2b04      	cmp	r3, #4
 8009444:	d137      	bne.n	80094b6 <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800944c:	4619      	mov	r1, r3
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	2334      	movs	r3, #52	; 0x34
 8009452:	fb03 f301 	mul.w	r3, r3, r1
 8009456:	4413      	add	r3, r2
 8009458:	3390      	adds	r3, #144	; 0x90
 800945a:	2201      	movs	r2, #1
 800945c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8009464:	4619      	mov	r1, r3
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	2334      	movs	r3, #52	; 0x34
 800946a:	fb03 f301 	mul.w	r3, r3, r1
 800946e:	4413      	add	r3, r2
 8009470:	3391      	adds	r3, #145	; 0x91
 8009472:	2202      	movs	r2, #2
 8009474:	701a      	strb	r2, [r3, #0]
            break;
 8009476:	e01e      	b.n	80094b6 <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800947e:	3301      	adds	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8009488:	e016      	b.n	80094b8 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	2200      	movs	r2, #0
 800948e:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	2201      	movs	r2, #1
 8009496:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800949e:	2102      	movs	r1, #2
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	4798      	blx	r3
      break;
 80094a4:	e00c      	b.n	80094c0 <USBH_MSC_Process+0x514>
            break;
 80094a6:	bf00      	nop
 80094a8:	e00a      	b.n	80094c0 <USBH_MSC_Process+0x514>
            break;
 80094aa:	bf00      	nop
 80094ac:	e008      	b.n	80094c0 <USBH_MSC_Process+0x514>
            break;
 80094ae:	bf00      	nop
 80094b0:	e006      	b.n	80094c0 <USBH_MSC_Process+0x514>
            break;
 80094b2:	bf00      	nop
 80094b4:	e004      	b.n	80094c0 <USBH_MSC_Process+0x514>
            break;
 80094b6:	bf00      	nop
      break;
 80094b8:	e002      	b.n	80094c0 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
      break;
 80094be:	bf00      	nop
  }
  return error;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop

080094cc <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80094d4:	2300      	movs	r3, #0
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b088      	sub	sp, #32
 80094e6:	af02      	add	r7, sp, #8
 80094e8:	6078      	str	r0, [r7, #4]
 80094ea:	460b      	mov	r3, r1
 80094ec:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 80094f8:	2301      	movs	r3, #1
 80094fa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 80094fc:	2301      	movs	r3, #1
 80094fe:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8009500:	78fb      	ldrb	r3, [r7, #3]
 8009502:	693a      	ldr	r2, [r7, #16]
 8009504:	2134      	movs	r1, #52	; 0x34
 8009506:	fb01 f303 	mul.w	r3, r1, r3
 800950a:	4413      	add	r3, r2
 800950c:	3390      	adds	r3, #144	; 0x90
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b06      	cmp	r3, #6
 8009512:	d004      	beq.n	800951e <USBH_MSC_RdWrProcess+0x3c>
 8009514:	2b07      	cmp	r3, #7
 8009516:	d037      	beq.n	8009588 <USBH_MSC_RdWrProcess+0xa6>
 8009518:	2b05      	cmp	r3, #5
 800951a:	d06a      	beq.n	80095f2 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 800951c:	e0a6      	b.n	800966c <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800951e:	78f9      	ldrb	r1, [r7, #3]
 8009520:	2300      	movs	r3, #0
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	2300      	movs	r3, #0
 8009526:	2200      	movs	r2, #0
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fea6 	bl	800a27a <USBH_MSC_SCSI_Read>
 800952e:	4603      	mov	r3, r0
 8009530:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009532:	7bfb      	ldrb	r3, [r7, #15]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10b      	bne.n	8009550 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	693a      	ldr	r2, [r7, #16]
 800953c:	2134      	movs	r1, #52	; 0x34
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	4413      	add	r3, r2
 8009544:	3390      	adds	r3, #144	; 0x90
 8009546:	2201      	movs	r2, #1
 8009548:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800954a:	2300      	movs	r3, #0
 800954c:	75fb      	strb	r3, [r7, #23]
      break;
 800954e:	e088      	b.n	8009662 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8009550:	7bfb      	ldrb	r3, [r7, #15]
 8009552:	2b02      	cmp	r3, #2
 8009554:	d109      	bne.n	800956a <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	2134      	movs	r1, #52	; 0x34
 800955c:	fb01 f303 	mul.w	r3, r1, r3
 8009560:	4413      	add	r3, r2
 8009562:	3390      	adds	r3, #144	; 0x90
 8009564:	2205      	movs	r2, #5
 8009566:	701a      	strb	r2, [r3, #0]
      break;
 8009568:	e07b      	b.n	8009662 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800956a:	7bfb      	ldrb	r3, [r7, #15]
 800956c:	2b04      	cmp	r3, #4
 800956e:	d178      	bne.n	8009662 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8009570:	78fb      	ldrb	r3, [r7, #3]
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	2134      	movs	r1, #52	; 0x34
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	4413      	add	r3, r2
 800957c:	3390      	adds	r3, #144	; 0x90
 800957e:	2208      	movs	r2, #8
 8009580:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8009582:	2302      	movs	r3, #2
 8009584:	75fb      	strb	r3, [r7, #23]
      break;
 8009586:	e06c      	b.n	8009662 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8009588:	78f9      	ldrb	r1, [r7, #3]
 800958a:	2300      	movs	r3, #0
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	2300      	movs	r3, #0
 8009590:	2200      	movs	r2, #0
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 fe06 	bl	800a1a4 <USBH_MSC_SCSI_Write>
 8009598:	4603      	mov	r3, r0
 800959a:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800959c:	7bfb      	ldrb	r3, [r7, #15]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10b      	bne.n	80095ba <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80095a2:	78fb      	ldrb	r3, [r7, #3]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	2134      	movs	r1, #52	; 0x34
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	4413      	add	r3, r2
 80095ae:	3390      	adds	r3, #144	; 0x90
 80095b0:	2201      	movs	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	75fb      	strb	r3, [r7, #23]
      break;
 80095b8:	e055      	b.n	8009666 <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d109      	bne.n	80095d4 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	693a      	ldr	r2, [r7, #16]
 80095c4:	2134      	movs	r1, #52	; 0x34
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	3390      	adds	r3, #144	; 0x90
 80095ce:	2205      	movs	r2, #5
 80095d0:	701a      	strb	r2, [r3, #0]
      break;
 80095d2:	e048      	b.n	8009666 <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80095d4:	7bfb      	ldrb	r3, [r7, #15]
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	d145      	bne.n	8009666 <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80095da:	78fb      	ldrb	r3, [r7, #3]
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	2134      	movs	r1, #52	; 0x34
 80095e0:	fb01 f303 	mul.w	r3, r1, r3
 80095e4:	4413      	add	r3, r2
 80095e6:	3390      	adds	r3, #144	; 0x90
 80095e8:	2208      	movs	r2, #8
 80095ea:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80095ec:	2302      	movs	r3, #2
 80095ee:	75fb      	strb	r3, [r7, #23]
      break;
 80095f0:	e039      	b.n	8009666 <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	2234      	movs	r2, #52	; 0x34
 80095f6:	fb02 f303 	mul.w	r3, r2, r3
 80095fa:	3398      	adds	r3, #152	; 0x98
 80095fc:	693a      	ldr	r2, [r7, #16]
 80095fe:	4413      	add	r3, r2
 8009600:	1d1a      	adds	r2, r3, #4
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fd53 	bl	800a0b2 <USBH_MSC_SCSI_RequestSense>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8009610:	7bfb      	ldrb	r3, [r7, #15]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d113      	bne.n	800963e <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	2134      	movs	r1, #52	; 0x34
 800961c:	fb01 f303 	mul.w	r3, r1, r3
 8009620:	4413      	add	r3, r2
 8009622:	3390      	adds	r3, #144	; 0x90
 8009624:	2201      	movs	r2, #1
 8009626:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8009628:	78fb      	ldrb	r3, [r7, #3]
 800962a:	693a      	ldr	r2, [r7, #16]
 800962c:	2134      	movs	r1, #52	; 0x34
 800962e:	fb01 f303 	mul.w	r3, r1, r3
 8009632:	4413      	add	r3, r2
 8009634:	3391      	adds	r3, #145	; 0x91
 8009636:	2202      	movs	r2, #2
 8009638:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 800963a:	2302      	movs	r3, #2
 800963c:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d012      	beq.n	800966a <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	2b04      	cmp	r3, #4
 8009648:	d10f      	bne.n	800966a <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	693a      	ldr	r2, [r7, #16]
 800964e:	2134      	movs	r1, #52	; 0x34
 8009650:	fb01 f303 	mul.w	r3, r1, r3
 8009654:	4413      	add	r3, r2
 8009656:	3390      	adds	r3, #144	; 0x90
 8009658:	2208      	movs	r2, #8
 800965a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800965c:	2302      	movs	r3, #2
 800965e:	75fb      	strb	r3, [r7, #23]
      break;
 8009660:	e003      	b.n	800966a <USBH_MSC_RdWrProcess+0x188>
      break;
 8009662:	bf00      	nop
 8009664:	e002      	b.n	800966c <USBH_MSC_RdWrProcess+0x18a>
      break;
 8009666:	bf00      	nop
 8009668:	e000      	b.n	800966c <USBH_MSC_RdWrProcess+0x18a>
      break;
 800966a:	bf00      	nop

  }
  return error;
 800966c:	7dfb      	ldrb	r3, [r7, #23]
}
 800966e:	4618      	mov	r0, r3
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009688:	69db      	ldr	r3, [r3, #28]
 800968a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	b2db      	uxtb	r3, r3
 8009692:	2b0b      	cmp	r3, #11
 8009694:	d10c      	bne.n	80096b0 <USBH_MSC_UnitIsReady+0x3a>
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	2134      	movs	r1, #52	; 0x34
 800969c:	fb01 f303 	mul.w	r3, r1, r3
 80096a0:	4413      	add	r3, r2
 80096a2:	3391      	adds	r3, #145	; 0x91
 80096a4:	781b      	ldrb	r3, [r3, #0]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d102      	bne.n	80096b0 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80096aa:	2301      	movs	r3, #1
 80096ac:	73fb      	strb	r3, [r7, #15]
 80096ae:	e001      	b.n	80096b4 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80096b0:	2300      	movs	r3, #0
 80096b2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3714      	adds	r7, #20
 80096ba:	46bd      	mov	sp, r7
 80096bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c0:	4770      	bx	lr

080096c2 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	60f8      	str	r0, [r7, #12]
 80096ca:	460b      	mov	r3, r1
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b0b      	cmp	r3, #11
 80096e2:	d10d      	bne.n	8009700 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 80096e4:	7afb      	ldrb	r3, [r7, #11]
 80096e6:	2234      	movs	r2, #52	; 0x34
 80096e8:	fb02 f303 	mul.w	r3, r2, r3
 80096ec:	3390      	adds	r3, #144	; 0x90
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4413      	add	r3, r2
 80096f2:	2234      	movs	r2, #52	; 0x34
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f005 f880 	bl	800e7fc <memcpy>
    return USBH_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	e000      	b.n	8009702 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8009700:	2302      	movs	r3, #2
  }
}
 8009702:	4618      	mov	r0, r3
 8009704:	3718      	adds	r7, #24
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}

0800970a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800970a:	b580      	push	{r7, lr}
 800970c:	b088      	sub	sp, #32
 800970e:	af02      	add	r7, sp, #8
 8009710:	60f8      	str	r0, [r7, #12]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
 8009716:	460b      	mov	r3, r1
 8009718:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009720:	69db      	ldr	r3, [r3, #28]
 8009722:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800972a:	b2db      	uxtb	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d00e      	beq.n	800974e <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009736:	2b0b      	cmp	r3, #11
 8009738:	d109      	bne.n	800974e <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	2134      	movs	r1, #52	; 0x34
 8009740:	fb01 f303 	mul.w	r3, r1, r3
 8009744:	4413      	add	r3, r2
 8009746:	3390      	adds	r3, #144	; 0x90
 8009748:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800974a:	2b01      	cmp	r3, #1
 800974c:	d001      	beq.n	8009752 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800974e:	2302      	movs	r3, #2
 8009750:	e040      	b.n	80097d4 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	2206      	movs	r2, #6
 8009756:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	2134      	movs	r1, #52	; 0x34
 800975e:	fb01 f303 	mul.w	r3, r1, r3
 8009762:	4413      	add	r3, r2
 8009764:	3390      	adds	r3, #144	; 0x90
 8009766:	2206      	movs	r2, #6
 8009768:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800976a:	7afb      	ldrb	r3, [r7, #11]
 800976c:	b29a      	uxth	r2, r3
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009774:	7af9      	ldrb	r1, [r7, #11]
 8009776:	6a3b      	ldr	r3, [r7, #32]
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 fd7b 	bl	800a27a <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800978a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800978c:	e016      	b.n	80097bc <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	1ad2      	subs	r2, r2, r3
 8009798:	6a3b      	ldr	r3, [r7, #32]
 800979a:	f242 7110 	movw	r1, #10000	; 0x2710
 800979e:	fb01 f303 	mul.w	r3, r1, r3
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d805      	bhi.n	80097b2 <USBH_MSC_Read+0xa8>
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d104      	bne.n	80097bc <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2201      	movs	r2, #1
 80097b6:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80097b8:	2302      	movs	r3, #2
 80097ba:	e00b      	b.n	80097d4 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80097bc:	7afb      	ldrb	r3, [r7, #11]
 80097be:	4619      	mov	r1, r3
 80097c0:	68f8      	ldr	r0, [r7, #12]
 80097c2:	f7ff fe8e 	bl	80094e2 <USBH_MSC_RdWrProcess>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d0e0      	beq.n	800978e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	2201      	movs	r2, #1
 80097d0:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3718      	adds	r7, #24
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af02      	add	r7, sp, #8
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	607a      	str	r2, [r7, #4]
 80097e6:	603b      	str	r3, [r7, #0]
 80097e8:	460b      	mov	r3, r1
 80097ea:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00e      	beq.n	8009820 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8009808:	2b0b      	cmp	r3, #11
 800980a:	d109      	bne.n	8009820 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	2134      	movs	r1, #52	; 0x34
 8009812:	fb01 f303 	mul.w	r3, r1, r3
 8009816:	4413      	add	r3, r2
 8009818:	3390      	adds	r3, #144	; 0x90
 800981a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800981c:	2b01      	cmp	r3, #1
 800981e:	d001      	beq.n	8009824 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009820:	2302      	movs	r3, #2
 8009822:	e040      	b.n	80098a6 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2207      	movs	r2, #7
 8009828:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800982a:	7afb      	ldrb	r3, [r7, #11]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	2134      	movs	r1, #52	; 0x34
 8009830:	fb01 f303 	mul.w	r3, r1, r3
 8009834:	4413      	add	r3, r2
 8009836:	3390      	adds	r3, #144	; 0x90
 8009838:	2207      	movs	r2, #7
 800983a:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800983c:	7afb      	ldrb	r3, [r7, #11]
 800983e:	b29a      	uxth	r2, r3
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8009846:	7af9      	ldrb	r1, [r7, #11]
 8009848:	6a3b      	ldr	r3, [r7, #32]
 800984a:	9300      	str	r3, [sp, #0]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 fca7 	bl	800a1a4 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800985c:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800985e:	e016      	b.n	800988e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	1ad2      	subs	r2, r2, r3
 800986a:	6a3b      	ldr	r3, [r7, #32]
 800986c:	f242 7110 	movw	r1, #10000	; 0x2710
 8009870:	fb01 f303 	mul.w	r3, r1, r3
 8009874:	429a      	cmp	r2, r3
 8009876:	d805      	bhi.n	8009884 <USBH_MSC_Write+0xa8>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d104      	bne.n	800988e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2201      	movs	r2, #1
 8009888:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800988a:	2302      	movs	r3, #2
 800988c:	e00b      	b.n	80098a6 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	4619      	mov	r1, r3
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	f7ff fe25 	bl	80094e2 <USBH_MSC_RdWrProcess>
 8009898:	4603      	mov	r3, r0
 800989a:	2b01      	cmp	r3, #1
 800989c:	d0e0      	beq.n	8009860 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2201      	movs	r2, #1
 80098a2:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b082      	sub	sp, #8
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2221      	movs	r2, #33	; 0x21
 80098ba:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	22ff      	movs	r2, #255	; 0xff
 80098c0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80098d4:	2200      	movs	r2, #0
 80098d6:	2100      	movs	r1, #0
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f001 fdae 	bl	800b43a <USBH_CtlReq>
 80098de:	4603      	mov	r3, r0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	22a1      	movs	r2, #161	; 0xa1
 80098f6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	22fe      	movs	r2, #254	; 0xfe
 80098fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009910:	2201      	movs	r2, #1
 8009912:	6839      	ldr	r1, [r7, #0]
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 fd90 	bl	800b43a <USBH_CtlReq>
 800991a:	4603      	mov	r3, r0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009932:	69db      	ldr	r3, [r3, #28]
 8009934:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	4a09      	ldr	r2, [pc, #36]	; (8009960 <USBH_MSC_BOT_Init+0x3c>)
 800993a:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4a09      	ldr	r2, [pc, #36]	; (8009964 <USBH_MSC_BOT_Init+0x40>)
 8009940:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2201      	movs	r2, #1
 800994e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr
 8009960:	43425355 	.word	0x43425355
 8009964:	20304050 	.word	0x20304050

08009968 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b088      	sub	sp, #32
 800996c:	af02      	add	r7, sp, #8
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	460b      	mov	r3, r1
 8009972:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009974:	2301      	movs	r3, #1
 8009976:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8009978:	2301      	movs	r3, #1
 800997a:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800997c:	2301      	movs	r3, #1
 800997e:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009980:	2300      	movs	r3, #0
 8009982:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009998:	3b01      	subs	r3, #1
 800999a:	2b0a      	cmp	r3, #10
 800999c:	f200 81a1 	bhi.w	8009ce2 <USBH_MSC_BOT_Process+0x37a>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <USBH_MSC_BOT_Process+0x40>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099d5 	.word	0x080099d5
 80099ac:	080099ff 	.word	0x080099ff
 80099b0:	08009a69 	.word	0x08009a69
 80099b4:	08009a87 	.word	0x08009a87
 80099b8:	08009b0b 	.word	0x08009b0b
 80099bc:	08009b2f 	.word	0x08009b2f
 80099c0:	08009bc9 	.word	0x08009bc9
 80099c4:	08009be5 	.word	0x08009be5
 80099c8:	08009c37 	.word	0x08009c37
 80099cc:	08009c67 	.word	0x08009c67
 80099d0:	08009cc9 	.word	0x08009cc9
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	2202      	movs	r2, #2
 80099e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	795a      	ldrb	r2, [r3, #5]
 80099ee:	2301      	movs	r3, #1
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	4613      	mov	r3, r2
 80099f4:	221f      	movs	r2, #31
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 ff2f 	bl	800b85a <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80099fc:	e180      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80099fe:	693b      	ldr	r3, [r7, #16]
 8009a00:	795b      	ldrb	r3, [r3, #5]
 8009a02:	4619      	mov	r1, r3
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f004 fddb 	bl	800e5c0 <USBH_LL_GetURBState>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a0e:	7d3b      	ldrb	r3, [r7, #20]
 8009a10:	2b01      	cmp	r3, #1
 8009a12:	d118      	bne.n	8009a46 <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00f      	beq.n	8009a3c <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009a22:	b25b      	sxtb	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	da04      	bge.n	8009a32 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	2203      	movs	r2, #3
 8009a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009a30:	e159      	b.n	8009ce6 <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2205      	movs	r2, #5
 8009a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a3a:	e154      	b.n	8009ce6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	2207      	movs	r2, #7
 8009a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a44:	e14f      	b.n	8009ce6 <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009a46:	7d3b      	ldrb	r3, [r7, #20]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d104      	bne.n	8009a56 <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a54:	e147      	b.n	8009ce6 <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8009a56:	7d3b      	ldrb	r3, [r7, #20]
 8009a58:	2b05      	cmp	r3, #5
 8009a5a:	f040 8144 	bne.w	8009ce6 <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	220a      	movs	r2, #10
 8009a62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009a66:	e13e      	b.n	8009ce6 <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	895a      	ldrh	r2, [r3, #10]
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	791b      	ldrb	r3, [r3, #4]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 ff14 	bl	800b8a4 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2204      	movs	r2, #4
 8009a80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009a84:	e13c      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	791b      	ldrb	r3, [r3, #4]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f004 fd97 	bl	800e5c0 <USBH_LL_GetURBState>
 8009a92:	4603      	mov	r3, r0
 8009a94:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009a96:	7d3b      	ldrb	r3, [r7, #20]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d12d      	bne.n	8009af8 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	8952      	ldrh	r2, [r2, #10]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d910      	bls.n	8009aca <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	8952      	ldrh	r2, [r2, #10]
 8009ab2:	441a      	add	r2, r3
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009abe:	693a      	ldr	r2, [r7, #16]
 8009ac0:	8952      	ldrh	r2, [r2, #10]
 8009ac2:	1a9a      	subs	r2, r3, r2
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	65da      	str	r2, [r3, #92]	; 0x5c
 8009ac8:	e002      	b.n	8009ad0 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	2200      	movs	r2, #0
 8009ace:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00a      	beq.n	8009aee <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	895a      	ldrh	r2, [r3, #10]
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	791b      	ldrb	r3, [r3, #4]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f001 fedc 	bl	800b8a4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009aec:	e0fd      	b.n	8009cea <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2207      	movs	r2, #7
 8009af2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009af6:	e0f8      	b.n	8009cea <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8009af8:	7d3b      	ldrb	r3, [r7, #20]
 8009afa:	2b05      	cmp	r3, #5
 8009afc:	f040 80f5 	bne.w	8009cea <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	2209      	movs	r2, #9
 8009b04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b08:	e0ef      	b.n	8009cea <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	891a      	ldrh	r2, [r3, #8]
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	7958      	ldrb	r0, [r3, #5]
 8009b18:	2301      	movs	r3, #1
 8009b1a:	9300      	str	r3, [sp, #0]
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f001 fe9b 	bl	800b85a <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2206      	movs	r2, #6
 8009b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009b2c:	e0e8      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	795b      	ldrb	r3, [r3, #5]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f004 fd43 	bl	800e5c0 <USBH_LL_GetURBState>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009b3e:	7d3b      	ldrb	r3, [r7, #20]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d130      	bne.n	8009ba6 <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	8912      	ldrh	r2, [r2, #8]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d910      	bls.n	8009b72 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b56:	693a      	ldr	r2, [r7, #16]
 8009b58:	8912      	ldrh	r2, [r2, #8]
 8009b5a:	441a      	add	r2, r3
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b66:	693a      	ldr	r2, [r7, #16]
 8009b68:	8912      	ldrh	r2, [r2, #8]
 8009b6a:	1a9a      	subs	r2, r3, r2
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009b70:	e002      	b.n	8009b78 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	2200      	movs	r2, #0
 8009b76:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00d      	beq.n	8009b9c <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	891a      	ldrh	r2, [r3, #8]
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	7958      	ldrb	r0, [r3, #5]
 8009b8e:	2301      	movs	r3, #1
 8009b90:	9300      	str	r3, [sp, #0]
 8009b92:	4603      	mov	r3, r0
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f001 fe60 	bl	800b85a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8009b9a:	e0a8      	b.n	8009cee <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2207      	movs	r2, #7
 8009ba0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009ba4:	e0a3      	b.n	8009cee <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ba6:	7d3b      	ldrb	r3, [r7, #20]
 8009ba8:	2b02      	cmp	r3, #2
 8009baa:	d104      	bne.n	8009bb6 <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	2205      	movs	r2, #5
 8009bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bb4:	e09b      	b.n	8009cee <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8009bb6:	7d3b      	ldrb	r3, [r7, #20]
 8009bb8:	2b05      	cmp	r3, #5
 8009bba:	f040 8098 	bne.w	8009cee <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	220a      	movs	r2, #10
 8009bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009bc6:	e092      	b.n	8009cee <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	791b      	ldrb	r3, [r3, #4]
 8009bd2:	220d      	movs	r2, #13
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f001 fe65 	bl	800b8a4 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	2208      	movs	r2, #8
 8009bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009be2:	e08d      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	791b      	ldrb	r3, [r3, #4]
 8009be8:	4619      	mov	r1, r3
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f004 fce8 	bl	800e5c0 <USBH_LL_GetURBState>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009bf4:	7d3b      	ldrb	r3, [r7, #20]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d115      	bne.n	8009c26 <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f8aa 	bl	8009d64 <USBH_MSC_DecodeCSW>
 8009c10:	4603      	mov	r3, r0
 8009c12:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009c14:	7d7b      	ldrb	r3, [r7, #21]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d102      	bne.n	8009c20 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009c1e:	e068      	b.n	8009cf2 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009c20:	2302      	movs	r3, #2
 8009c22:	75fb      	strb	r3, [r7, #23]
      break;
 8009c24:	e065      	b.n	8009cf2 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8009c26:	7d3b      	ldrb	r3, [r7, #20]
 8009c28:	2b05      	cmp	r3, #5
 8009c2a:	d162      	bne.n	8009cf2 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2209      	movs	r2, #9
 8009c30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c34:	e05d      	b.n	8009cf2 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8009c36:	78fb      	ldrb	r3, [r7, #3]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f865 	bl	8009d0c <USBH_MSC_BOT_Abort>
 8009c42:	4603      	mov	r3, r0
 8009c44:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009c46:	7dbb      	ldrb	r3, [r7, #22]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d104      	bne.n	8009c56 <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2207      	movs	r2, #7
 8009c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009c54:	e04f      	b.n	8009cf6 <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8009c56:	7dbb      	ldrb	r3, [r7, #22]
 8009c58:	2b04      	cmp	r3, #4
 8009c5a:	d14c      	bne.n	8009cf6 <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	220b      	movs	r2, #11
 8009c60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009c64:	e047      	b.n	8009cf6 <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8009c66:	78fb      	ldrb	r3, [r7, #3]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f000 f84d 	bl	8009d0c <USBH_MSC_BOT_Abort>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8009c76:	7dbb      	ldrb	r3, [r7, #22]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d11d      	bne.n	8009cb8 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	795b      	ldrb	r3, [r3, #5]
 8009c80:	4619      	mov	r1, r3
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f004 fcf9 	bl	800e67a <USBH_LL_GetToggle>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	7959      	ldrb	r1, [r3, #5]
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	f1c3 0301 	rsb	r3, r3, #1
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	461a      	mov	r2, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f004 fcba 	bl	800e614 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	791b      	ldrb	r3, [r3, #4]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f004 fcb3 	bl	800e614 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	2209      	movs	r2, #9
 8009cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009cb6:	e020      	b.n	8009cfa <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8009cb8:	7dbb      	ldrb	r3, [r7, #22]
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	d11d      	bne.n	8009cfa <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	220b      	movs	r2, #11
 8009cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009cc6:	e018      	b.n	8009cfa <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f7ff fdf0 	bl	80098ae <USBH_MSC_BOT_REQ_Reset>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d112      	bne.n	8009cfe <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8009ce0:	e00d      	b.n	8009cfe <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8009ce2:	bf00      	nop
 8009ce4:	e00c      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009ce6:	bf00      	nop
 8009ce8:	e00a      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009cea:	bf00      	nop
 8009cec:	e008      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009cee:	bf00      	nop
 8009cf0:	e006      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009cf2:	bf00      	nop
 8009cf4:	e004      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009cf6:	bf00      	nop
 8009cf8:	e002      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009cfa:	bf00      	nop
 8009cfc:	e000      	b.n	8009d00 <USBH_MSC_BOT_Process+0x398>
      break;
 8009cfe:	bf00      	nop
  }
  return status;
 8009d00:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop

08009d0c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8009d2a:	78bb      	ldrb	r3, [r7, #2]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d002      	beq.n	8009d36 <USBH_MSC_BOT_Abort+0x2a>
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d009      	beq.n	8009d48 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009d34:	e011      	b.n	8009d5a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	79db      	ldrb	r3, [r3, #7]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f001 f99c 	bl	800b07a <USBH_ClrFeature>
 8009d42:	4603      	mov	r3, r0
 8009d44:	73fb      	strb	r3, [r7, #15]
      break;
 8009d46:	e008      	b.n	8009d5a <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	799b      	ldrb	r3, [r3, #6]
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f001 f993 	bl	800b07a <USBH_ClrFeature>
 8009d54:	4603      	mov	r3, r0
 8009d56:	73fb      	strb	r3, [r7, #15]
      break;
 8009d58:	bf00      	nop
  }
  return status;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d72:	69db      	ldr	r3, [r3, #28]
 8009d74:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8009d76:	2301      	movs	r3, #1
 8009d78:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	791b      	ldrb	r3, [r3, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f004 fb8b 	bl	800e49c <USBH_LL_GetLastXferSize>
 8009d86:	4603      	mov	r3, r0
 8009d88:	2b0d      	cmp	r3, #13
 8009d8a:	d002      	beq.n	8009d92 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009d8c:	2302      	movs	r3, #2
 8009d8e:	73fb      	strb	r3, [r7, #15]
 8009d90:	e024      	b.n	8009ddc <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009d92:	68bb      	ldr	r3, [r7, #8]
 8009d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d96:	4a14      	ldr	r2, [pc, #80]	; (8009de8 <USBH_MSC_DecodeCSW+0x84>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d11d      	bne.n	8009dd8 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009da4:	429a      	cmp	r2, r3
 8009da6:	d119      	bne.n	8009ddc <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d102      	bne.n	8009db8 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
 8009db6:	e011      	b.n	8009ddc <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d102      	bne.n	8009dc8 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	73fb      	strb	r3, [r7, #15]
 8009dc6:	e009      	b.n	8009ddc <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d104      	bne.n	8009ddc <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009dd2:	2302      	movs	r3, #2
 8009dd4:	73fb      	strb	r3, [r7, #15]
 8009dd6:	e001      	b.n	8009ddc <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009dd8:	2302      	movs	r3, #2
 8009dda:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8009ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
 8009de6:	bf00      	nop
 8009de8:	53425355 	.word	0x53425355

08009dec <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009df8:	2302      	movs	r3, #2
 8009dfa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d002      	beq.n	8009e16 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d021      	beq.n	8009e58 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009e14:	e028      	b.n	8009e68 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	220a      	movs	r2, #10
 8009e28:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	3363      	adds	r3, #99	; 0x63
 8009e30:	2210      	movs	r2, #16
 8009e32:	2100      	movs	r1, #0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f004 fcec 	bl	800e812 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	2202      	movs	r2, #2
 8009e4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009e52:	2301      	movs	r3, #1
 8009e54:	73fb      	strb	r3, [r7, #15]
      break;
 8009e56:	e007      	b.n	8009e68 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009e58:	78fb      	ldrb	r3, [r7, #3]
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff fd83 	bl	8009968 <USBH_MSC_BOT_Process>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73fb      	strb	r3, [r7, #15]
      break;
 8009e66:	bf00      	nop
  }

  return error;
 8009e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b086      	sub	sp, #24
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	60f8      	str	r0, [r7, #12]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	607a      	str	r2, [r7, #4]
 8009e7e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009e80:	2301      	movs	r3, #1
 8009e82:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d002      	beq.n	8009e9e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d027      	beq.n	8009eec <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009e9c:	e05f      	b.n	8009f5e <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	2208      	movs	r2, #8
 8009ea2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2280      	movs	r2, #128	; 0x80
 8009ea8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	220a      	movs	r2, #10
 8009eb0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	3363      	adds	r3, #99	; 0x63
 8009eb8:	2210      	movs	r2, #16
 8009eba:	2100      	movs	r1, #0
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f004 fca8 	bl	800e812 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2225      	movs	r2, #37	; 0x25
 8009ec6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	2201      	movs	r2, #1
 8009ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	2202      	movs	r2, #2
 8009ed6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	f103 0210 	add.w	r2, r3, #16
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eea:	e038      	b.n	8009f5e <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	4619      	mov	r1, r3
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f7ff fd39 	bl	8009968 <USBH_MSC_BOT_Process>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d12d      	bne.n	8009f5c <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f06:	3303      	adds	r3, #3
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f12:	3302      	adds	r3, #2
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	021b      	lsls	r3, r3, #8
 8009f18:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f20:	3301      	adds	r3, #1
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f26:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	061b      	lsls	r3, r3, #24
 8009f32:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f3e:	3307      	adds	r3, #7
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f4a:	3306      	adds	r3, #6
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4313      	orrs	r3, r2
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	809a      	strh	r2, [r3, #4]
      break;
 8009f5c:	bf00      	nop
  }

  return error;
 8009f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	460b      	mov	r3, r1
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009f76:	2302      	movs	r3, #2
 8009f78:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d002      	beq.n	8009f94 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009f8e:	2b02      	cmp	r3, #2
 8009f90:	d03d      	beq.n	800a00e <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009f92:	e089      	b.n	800a0a8 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009f94:	693b      	ldr	r3, [r7, #16]
 8009f96:	2224      	movs	r2, #36	; 0x24
 8009f98:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	2280      	movs	r2, #128	; 0x80
 8009f9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009faa:	693b      	ldr	r3, [r7, #16]
 8009fac:	3363      	adds	r3, #99	; 0x63
 8009fae:	220a      	movs	r2, #10
 8009fb0:	2100      	movs	r1, #0
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f004 fc2d 	bl	800e812 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	2212      	movs	r2, #18
 8009fbc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	015b      	lsls	r3, r3, #5
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2224      	movs	r2, #36	; 0x24
 8009fe0:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	f103 0210 	add.w	r2, r3, #16
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a008:	2301      	movs	r3, #1
 800a00a:	75fb      	strb	r3, [r7, #23]
      break;
 800a00c:	e04c      	b.n	800a0a8 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	4619      	mov	r1, r3
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f7ff fca8 	bl	8009968 <USBH_MSC_BOT_Process>
 800a018:	4603      	mov	r3, r0
 800a01a:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a01c:	7dfb      	ldrb	r3, [r7, #23]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d141      	bne.n	800a0a6 <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a022:	2222      	movs	r2, #34	; 0x22
 800a024:	2100      	movs	r1, #0
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f004 fbf3 	bl	800e812 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	095b      	lsrs	r3, r3, #5
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a054:	3301      	adds	r3, #1
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	b25b      	sxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	da03      	bge.n	800a066 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2201      	movs	r2, #1
 800a062:	709a      	strb	r2, [r3, #2]
 800a064:	e002      	b.n	800a06c <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2200      	movs	r2, #0
 800a06a:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	1cd8      	adds	r0, r3, #3
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a076:	3308      	adds	r3, #8
 800a078:	2208      	movs	r2, #8
 800a07a:	4619      	mov	r1, r3
 800a07c:	f004 fbbe 	bl	800e7fc <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f103 000c 	add.w	r0, r3, #12
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a08c:	3310      	adds	r3, #16
 800a08e:	2210      	movs	r2, #16
 800a090:	4619      	mov	r1, r3
 800a092:	f004 fbb3 	bl	800e7fc <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	331d      	adds	r3, #29
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800a0a0:	3220      	adds	r2, #32
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	601a      	str	r2, [r3, #0]
      break;
 800a0a6:	bf00      	nop
  }

  return error;
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b086      	sub	sp, #24
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	607a      	str	r2, [r7, #4]
 800a0be:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a0c0:	2302      	movs	r3, #2
 800a0c2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d002      	beq.n	800a0de <USBH_MSC_SCSI_RequestSense+0x2c>
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d03d      	beq.n	800a158 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800a0dc:	e05d      	b.n	800a19a <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	220e      	movs	r2, #14
 800a0e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	2280      	movs	r2, #128	; 0x80
 800a0e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	220a      	movs	r2, #10
 800a0f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	3363      	adds	r3, #99	; 0x63
 800a0f8:	2210      	movs	r2, #16
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f004 fb88 	bl	800e812 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	2203      	movs	r2, #3
 800a106:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800a10a:	7afb      	ldrb	r3, [r7, #11]
 800a10c:	015b      	lsls	r3, r3, #5
 800a10e:	b2da      	uxtb	r2, r3
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	220e      	movs	r2, #14
 800a12a:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	2200      	movs	r2, #0
 800a132:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	2201      	movs	r2, #1
 800a13a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	2202      	movs	r2, #2
 800a142:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f103 0210 	add.w	r2, r3, #16
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a152:	2301      	movs	r3, #1
 800a154:	75fb      	strb	r3, [r7, #23]
      break;
 800a156:	e020      	b.n	800a19a <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a158:	7afb      	ldrb	r3, [r7, #11]
 800a15a:	4619      	mov	r1, r3
 800a15c:	68f8      	ldr	r0, [r7, #12]
 800a15e:	f7ff fc03 	bl	8009968 <USBH_MSC_BOT_Process>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a166:	7dfb      	ldrb	r3, [r7, #23]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d115      	bne.n	800a198 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a172:	3302      	adds	r3, #2
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	f003 030f 	and.w	r3, r3, #15
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a186:	7b1a      	ldrb	r2, [r3, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a192:	7b5a      	ldrb	r2, [r3, #13]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	709a      	strb	r2, [r3, #2]
      break;
 800a198:	bf00      	nop
  }

  return error;
 800a19a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3718      	adds	r7, #24
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1be:	69db      	ldr	r3, [r3, #28]
 800a1c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d002      	beq.n	800a1d2 <USBH_MSC_SCSI_Write+0x2e>
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d047      	beq.n	800a260 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a1d0:	e04e      	b.n	800a270 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a1d8:	461a      	mov	r2, r3
 800a1da:	6a3b      	ldr	r3, [r7, #32]
 800a1dc:	fb03 f202 	mul.w	r2, r3, r2
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	220a      	movs	r2, #10
 800a1f0:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	3363      	adds	r3, #99	; 0x63
 800a1f8:	2210      	movs	r2, #16
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f004 fb08 	bl	800e812 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	222a      	movs	r2, #42	; 0x2a
 800a206:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a20a:	79fa      	ldrb	r2, [r7, #7]
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a212:	79ba      	ldrb	r2, [r7, #6]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a21a:	797a      	ldrb	r2, [r7, #5]
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a222:	1d3b      	adds	r3, r7, #4
 800a224:	781a      	ldrb	r2, [r3, #0]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a22c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a236:	f107 0320 	add.w	r3, r7, #32
 800a23a:	781a      	ldrb	r2, [r3, #0]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2202      	movs	r2, #2
 800a24e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a25a:	2301      	movs	r3, #1
 800a25c:	75fb      	strb	r3, [r7, #23]
      break;
 800a25e:	e007      	b.n	800a270 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a260:	7afb      	ldrb	r3, [r7, #11]
 800a262:	4619      	mov	r1, r3
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f7ff fb7f 	bl	8009968 <USBH_MSC_BOT_Process>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]
      break;
 800a26e:	bf00      	nop
  }

  return error;
 800a270:	7dfb      	ldrb	r3, [r7, #23]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b086      	sub	sp, #24
 800a27e:	af00      	add	r7, sp, #0
 800a280:	60f8      	str	r0, [r7, #12]
 800a282:	607a      	str	r2, [r7, #4]
 800a284:	603b      	str	r3, [r7, #0]
 800a286:	460b      	mov	r3, r1
 800a288:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800a28a:	2302      	movs	r3, #2
 800a28c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d002      	beq.n	800a2a8 <USBH_MSC_SCSI_Read+0x2e>
 800a2a2:	2b02      	cmp	r3, #2
 800a2a4:	d047      	beq.n	800a336 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a2a6:	e04e      	b.n	800a346 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	fb03 f202 	mul.w	r2, r3, r2
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2280      	movs	r2, #128	; 0x80
 800a2be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	3363      	adds	r3, #99	; 0x63
 800a2ce:	2210      	movs	r2, #16
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f004 fa9d 	bl	800e812 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	2228      	movs	r2, #40	; 0x28
 800a2dc:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800a2e0:	79fa      	ldrb	r2, [r7, #7]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800a2e8:	79ba      	ldrb	r2, [r7, #6]
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800a2f0:	797a      	ldrb	r2, [r7, #5]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800a2f8:	1d3b      	adds	r3, r7, #4
 800a2fa:	781a      	ldrb	r2, [r3, #0]
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800a302:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800a30c:	f107 0320 	add.w	r3, r7, #32
 800a310:	781a      	ldrb	r2, [r3, #0]
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	2201      	movs	r2, #1
 800a31c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	2202      	movs	r2, #2
 800a324:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	683a      	ldr	r2, [r7, #0]
 800a32c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800a330:	2301      	movs	r3, #1
 800a332:	75fb      	strb	r3, [r7, #23]
      break;
 800a334:	e007      	b.n	800a346 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a336:	7afb      	ldrb	r3, [r7, #11]
 800a338:	4619      	mov	r1, r3
 800a33a:	68f8      	ldr	r0, [r7, #12]
 800a33c:	f7ff fb14 	bl	8009968 <USBH_MSC_BOT_Process>
 800a340:	4603      	mov	r3, r0
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	bf00      	nop
  }

  return error;
 800a346:	7dfb      	ldrb	r3, [r7, #23]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	4613      	mov	r3, r2
 800a35c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a364:	2302      	movs	r3, #2
 800a366:	e029      	b.n	800a3bc <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	79fa      	ldrb	r2, [r7, #7]
 800a36c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 f81f 	bl	800a3c4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	2200      	movs	r2, #0
 800a39a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d003      	beq.n	800a3b4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	68ba      	ldr	r2, [r7, #8]
 800a3b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f003 ffbf 	bl	800e338 <USBH_LL_Init>

  return USBH_OK;
 800a3ba:	2300      	movs	r3, #0
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3710      	adds	r7, #16
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b085      	sub	sp, #20
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e009      	b.n	800a3ea <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	33e0      	adds	r3, #224	; 0xe0
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4413      	add	r3, r2
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	60fb      	str	r3, [r7, #12]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	2b0e      	cmp	r3, #14
 800a3ee:	d9f2      	bls.n	800a3d6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]
 800a3f4:	e009      	b.n	800a40a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a400:	2200      	movs	r2, #0
 800a402:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	3301      	adds	r3, #1
 800a408:	60fb      	str	r3, [r7, #12]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a410:	d3f1      	bcc.n	800a3f6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2240      	movs	r2, #64	; 0x40
 800a436:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d016      	beq.n	800a4ae <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10e      	bne.n	800a4a8 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a490:	1c59      	adds	r1, r3, #1
 800a492:	687a      	ldr	r2, [r7, #4]
 800a494:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	33de      	adds	r3, #222	; 0xde
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
 800a4a6:	e004      	b.n	800a4b2 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a4a8:	2302      	movs	r3, #2
 800a4aa:	73fb      	strb	r3, [r7, #15]
 800a4ac:	e001      	b.n	800a4b2 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a4ae:	2302      	movs	r3, #2
 800a4b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3714      	adds	r7, #20
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b085      	sub	sp, #20
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
 800a4c8:	460b      	mov	r3, r1
 800a4ca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a4d6:	78fa      	ldrb	r2, [r7, #3]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d204      	bcs.n	800a4e6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	78fa      	ldrb	r2, [r7, #3]
 800a4e0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a4e4:	e001      	b.n	800a4ea <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3714      	adds	r7, #20
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	4608      	mov	r0, r1
 800a502:	4611      	mov	r1, r2
 800a504:	461a      	mov	r2, r3
 800a506:	4603      	mov	r3, r0
 800a508:	70fb      	strb	r3, [r7, #3]
 800a50a:	460b      	mov	r3, r1
 800a50c:	70bb      	strb	r3, [r7, #2]
 800a50e:	4613      	mov	r3, r2
 800a510:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800a516:	2300      	movs	r3, #0
 800a518:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a520:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a522:	e025      	b.n	800a570 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	221a      	movs	r2, #26
 800a528:	fb02 f303 	mul.w	r3, r2, r3
 800a52c:	3308      	adds	r3, #8
 800a52e:	68fa      	ldr	r2, [r7, #12]
 800a530:	4413      	add	r3, r2
 800a532:	3302      	adds	r3, #2
 800a534:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	795b      	ldrb	r3, [r3, #5]
 800a53a:	78fa      	ldrb	r2, [r7, #3]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d002      	beq.n	800a546 <USBH_FindInterface+0x4e>
 800a540:	78fb      	ldrb	r3, [r7, #3]
 800a542:	2bff      	cmp	r3, #255	; 0xff
 800a544:	d111      	bne.n	800a56a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a54a:	78ba      	ldrb	r2, [r7, #2]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d002      	beq.n	800a556 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a550:	78bb      	ldrb	r3, [r7, #2]
 800a552:	2bff      	cmp	r3, #255	; 0xff
 800a554:	d109      	bne.n	800a56a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a55a:	787a      	ldrb	r2, [r7, #1]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d002      	beq.n	800a566 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a560:	787b      	ldrb	r3, [r7, #1]
 800a562:	2bff      	cmp	r3, #255	; 0xff
 800a564:	d101      	bne.n	800a56a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a566:	7dfb      	ldrb	r3, [r7, #23]
 800a568:	e006      	b.n	800a578 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a56a:	7dfb      	ldrb	r3, [r7, #23]
 800a56c:	3301      	adds	r3, #1
 800a56e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d9d6      	bls.n	800a524 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a576:	23ff      	movs	r3, #255	; 0xff
}
 800a578:	4618      	mov	r0, r3
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f003 ff0f 	bl	800e3b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800a592:	2101      	movs	r1, #1
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f004 f826 	bl	800e5e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b088      	sub	sp, #32
 800a5a8:	af04      	add	r7, sp, #16
 800a5aa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d102      	bne.n	800a5c6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2203      	movs	r2, #3
 800a5c4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	b2db      	uxtb	r3, r3
 800a5cc:	2b0b      	cmp	r3, #11
 800a5ce:	f200 81b3 	bhi.w	800a938 <USBH_Process+0x394>
 800a5d2:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <USBH_Process+0x34>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a609 	.word	0x0800a609
 800a5dc:	0800a63b 	.word	0x0800a63b
 800a5e0:	0800a6a3 	.word	0x0800a6a3
 800a5e4:	0800a8d3 	.word	0x0800a8d3
 800a5e8:	0800a939 	.word	0x0800a939
 800a5ec:	0800a747 	.word	0x0800a747
 800a5f0:	0800a879 	.word	0x0800a879
 800a5f4:	0800a77d 	.word	0x0800a77d
 800a5f8:	0800a79d 	.word	0x0800a79d
 800a5fc:	0800a7bd 	.word	0x0800a7bd
 800a600:	0800a7eb 	.word	0x0800a7eb
 800a604:	0800a8bb 	.word	0x0800a8bb
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 8193 	beq.w	800a93c <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a61c:	20c8      	movs	r0, #200	; 0xc8
 800a61e:	f004 f85f 	bl	800e6e0 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f003 ff1f 	bl	800e466 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a638:	e180      	b.n	800a93c <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a640:	2b01      	cmp	r3, #1
 800a642:	d107      	bne.n	800a654 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2202      	movs	r2, #2
 800a650:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a652:	e182      	b.n	800a95a <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a65a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a65e:	d914      	bls.n	800a68a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a666:	3301      	adds	r3, #1
 800a668:	b2da      	uxtb	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a676:	2b03      	cmp	r3, #3
 800a678:	d903      	bls.n	800a682 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	220d      	movs	r2, #13
 800a67e:	701a      	strb	r2, [r3, #0]
      break;
 800a680:	e16b      	b.n	800a95a <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2200      	movs	r2, #0
 800a686:	701a      	strb	r2, [r3, #0]
      break;
 800a688:	e167      	b.n	800a95a <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a690:	f103 020a 	add.w	r2, r3, #10
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a69a:	200a      	movs	r0, #10
 800a69c:	f004 f820 	bl	800e6e0 <USBH_Delay>
      break;
 800a6a0:	e15b      	b.n	800a95a <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d005      	beq.n	800a6b8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6b2:	2104      	movs	r1, #4
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a6b8:	2064      	movs	r0, #100	; 0x64
 800a6ba:	f004 f811 	bl	800e6e0 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f003 feac 	bl	800e41c <USBH_LL_GetSpeed>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2205      	movs	r2, #5
 800a6d2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f001 f931 	bl	800b93e <USBH_AllocPipe>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a6e4:	2180      	movs	r1, #128	; 0x80
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f001 f929 	bl	800b93e <USBH_AllocPipe>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	7919      	ldrb	r1, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a708:	b292      	uxth	r2, r2
 800a70a:	9202      	str	r2, [sp, #8]
 800a70c:	2200      	movs	r2, #0
 800a70e:	9201      	str	r2, [sp, #4]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	4603      	mov	r3, r0
 800a714:	2280      	movs	r2, #128	; 0x80
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f001 f8e2 	bl	800b8e0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	7959      	ldrb	r1, [r3, #5]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a730:	b292      	uxth	r2, r2
 800a732:	9202      	str	r2, [sp, #8]
 800a734:	2200      	movs	r2, #0
 800a736:	9201      	str	r2, [sp, #4]
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	4603      	mov	r3, r0
 800a73c:	2200      	movs	r2, #0
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f001 f8ce 	bl	800b8e0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a744:	e109      	b.n	800a95a <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f90c 	bl	800a964 <USBH_HandleEnum>
 800a74c:	4603      	mov	r3, r0
 800a74e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	b2db      	uxtb	r3, r3
 800a754:	2b00      	cmp	r3, #0
 800a756:	f040 80f3 	bne.w	800a940 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d103      	bne.n	800a774 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2208      	movs	r2, #8
 800a770:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a772:	e0e5      	b.n	800a940 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2207      	movs	r2, #7
 800a778:	701a      	strb	r2, [r3, #0]
      break;
 800a77a:	e0e1      	b.n	800a940 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a782:	2b00      	cmp	r3, #0
 800a784:	f000 80de 	beq.w	800a944 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a78e:	2101      	movs	r1, #1
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2208      	movs	r2, #8
 800a798:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a79a:	e0d3      	b.n	800a944 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fc20 	bl	800afec <USBH_SetCfg>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f040 80ca 	bne.w	800a948 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2209      	movs	r2, #9
 800a7b8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7ba:	e0c5      	b.n	800a948 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a7c2:	f003 0320 	and.w	r3, r3, #32
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fc30 	bl	800b032 <USBH_SetFeature>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f040 80b9 	bne.w	800a94c <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	220a      	movs	r2, #10
 800a7de:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a7e0:	e0b4      	b.n	800a94c <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	220a      	movs	r2, #10
 800a7e6:	701a      	strb	r2, [r3, #0]
      break;
 800a7e8:	e0b0      	b.n	800a94c <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 80ad 	beq.w	800a950 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]
 800a802:	e016      	b.n	800a832 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a804:	7bfa      	ldrb	r2, [r7, #15]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	32de      	adds	r2, #222	; 0xde
 800a80a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a80e:	791a      	ldrb	r2, [r3, #4]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a816:	429a      	cmp	r2, r3
 800a818:	d108      	bne.n	800a82c <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a81a:	7bfa      	ldrb	r2, [r7, #15]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	32de      	adds	r2, #222	; 0xde
 800a820:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a82a:	e005      	b.n	800a838 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a82c:	7bfb      	ldrb	r3, [r7, #15]
 800a82e:	3301      	adds	r3, #1
 800a830:	73fb      	strb	r3, [r7, #15]
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d0e5      	beq.n	800a804 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d016      	beq.n	800a870 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a848:	689b      	ldr	r3, [r3, #8]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d109      	bne.n	800a868 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2206      	movs	r2, #6
 800a858:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a860:	2103      	movs	r1, #3
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a866:	e073      	b.n	800a950 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	220d      	movs	r2, #13
 800a86c:	701a      	strb	r2, [r3, #0]
      break;
 800a86e:	e06f      	b.n	800a950 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	220d      	movs	r2, #13
 800a874:	701a      	strb	r2, [r3, #0]
      break;
 800a876:	e06b      	b.n	800a950 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d017      	beq.n	800a8b2 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	6878      	ldr	r0, [r7, #4]
 800a88c:	4798      	blx	r3
 800a88e:	4603      	mov	r3, r0
 800a890:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	b2db      	uxtb	r3, r3
 800a896:	2b00      	cmp	r3, #0
 800a898:	d103      	bne.n	800a8a2 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	220b      	movs	r2, #11
 800a89e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a8a0:	e058      	b.n	800a954 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b02      	cmp	r3, #2
 800a8a8:	d154      	bne.n	800a954 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	220d      	movs	r2, #13
 800a8ae:	701a      	strb	r2, [r3, #0]
      break;
 800a8b0:	e050      	b.n	800a954 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	220d      	movs	r2, #13
 800a8b6:	701a      	strb	r2, [r3, #0]
      break;
 800a8b8:	e04c      	b.n	800a954 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d049      	beq.n	800a958 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8ca:	695b      	ldr	r3, [r3, #20]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	4798      	blx	r3
      }
      break;
 800a8d0:	e042      	b.n	800a958 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7ff fd72 	bl	800a3c4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d005      	beq.n	800a914 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a90e:	2105      	movs	r1, #5
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d107      	bne.n	800a930 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7ff fe2b 	bl	800a584 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a92e:	e014      	b.n	800a95a <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f003 fd3d 	bl	800e3b0 <USBH_LL_Start>
      break;
 800a936:	e010      	b.n	800a95a <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a938:	bf00      	nop
 800a93a:	e00e      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a93c:	bf00      	nop
 800a93e:	e00c      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a940:	bf00      	nop
 800a942:	e00a      	b.n	800a95a <USBH_Process+0x3b6>
    break;
 800a944:	bf00      	nop
 800a946:	e008      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a948:	bf00      	nop
 800a94a:	e006      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a94c:	bf00      	nop
 800a94e:	e004      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a950:	bf00      	nop
 800a952:	e002      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a954:	bf00      	nop
 800a956:	e000      	b.n	800a95a <USBH_Process+0x3b6>
      break;
 800a958:	bf00      	nop
  }
  return USBH_OK;
 800a95a:	2300      	movs	r3, #0
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3710      	adds	r7, #16
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}

0800a964 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af04      	add	r7, sp, #16
 800a96a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a96c:	2301      	movs	r3, #1
 800a96e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a970:	2301      	movs	r3, #1
 800a972:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	785b      	ldrb	r3, [r3, #1]
 800a978:	2b07      	cmp	r3, #7
 800a97a:	f200 81c1 	bhi.w	800ad00 <USBH_HandleEnum+0x39c>
 800a97e:	a201      	add	r2, pc, #4	; (adr r2, 800a984 <USBH_HandleEnum+0x20>)
 800a980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a984:	0800a9a5 	.word	0x0800a9a5
 800a988:	0800aa63 	.word	0x0800aa63
 800a98c:	0800aacd 	.word	0x0800aacd
 800a990:	0800ab5b 	.word	0x0800ab5b
 800a994:	0800abc5 	.word	0x0800abc5
 800a998:	0800ac35 	.word	0x0800ac35
 800a99c:	0800ac7b 	.word	0x0800ac7b
 800a9a0:	0800acc1 	.word	0x0800acc1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a9a4:	2108      	movs	r1, #8
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 fa50 	bl	800ae4c <USBH_Get_DevDesc>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d130      	bne.n	800aa18 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	7919      	ldrb	r1, [r3, #4]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	9202      	str	r2, [sp, #8]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	9201      	str	r2, [sp, #4]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2280      	movs	r2, #128	; 0x80
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 ff79 	bl	800b8e0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	7959      	ldrb	r1, [r3, #5]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a9fe:	687a      	ldr	r2, [r7, #4]
 800aa00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800aa02:	b292      	uxth	r2, r2
 800aa04:	9202      	str	r2, [sp, #8]
 800aa06:	2200      	movs	r2, #0
 800aa08:	9201      	str	r2, [sp, #4]
 800aa0a:	9300      	str	r3, [sp, #0]
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2200      	movs	r2, #0
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f000 ff65 	bl	800b8e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800aa16:	e175      	b.n	800ad04 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa18:	7bbb      	ldrb	r3, [r7, #14]
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	f040 8172 	bne.w	800ad04 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa26:	3301      	adds	r3, #1
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa36:	2b03      	cmp	r3, #3
 800aa38:	d903      	bls.n	800aa42 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	220d      	movs	r2, #13
 800aa3e:	701a      	strb	r2, [r3, #0]
      break;
 800aa40:	e160      	b.n	800ad04 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	795b      	ldrb	r3, [r3, #5]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 ff99 	bl	800b980 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	791b      	ldrb	r3, [r3, #4]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 ff93 	bl	800b980 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	701a      	strb	r2, [r3, #0]
      break;
 800aa60:	e150      	b.n	800ad04 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aa62:	2112      	movs	r1, #18
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f9f1 	bl	800ae4c <USBH_Get_DevDesc>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d103      	bne.n	800aa7c <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2202      	movs	r2, #2
 800aa78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa7a:	e145      	b.n	800ad08 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa7c:	7bbb      	ldrb	r3, [r7, #14]
 800aa7e:	2b03      	cmp	r3, #3
 800aa80:	f040 8142 	bne.w	800ad08 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d903      	bls.n	800aaa6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	220d      	movs	r2, #13
 800aaa2:	701a      	strb	r2, [r3, #0]
      break;
 800aaa4:	e130      	b.n	800ad08 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	795b      	ldrb	r3, [r3, #5]
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6878      	ldr	r0, [r7, #4]
 800aaae:	f000 ff67 	bl	800b980 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	791b      	ldrb	r3, [r3, #4]
 800aab6:	4619      	mov	r1, r3
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	f000 ff61 	bl	800b980 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2200      	movs	r2, #0
 800aac8:	701a      	strb	r2, [r3, #0]
      break;
 800aaca:	e11d      	b.n	800ad08 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aacc:	2101      	movs	r1, #1
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 fa68 	bl	800afa4 <USBH_SetAddress>
 800aad4:	4603      	mov	r3, r0
 800aad6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d132      	bne.n	800ab44 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aade:	2002      	movs	r0, #2
 800aae0:	f003 fdfe 	bl	800e6e0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2203      	movs	r2, #3
 800aaf0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	7919      	ldrb	r1, [r3, #4]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ab06:	b292      	uxth	r2, r2
 800ab08:	9202      	str	r2, [sp, #8]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	9201      	str	r2, [sp, #4]
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	4603      	mov	r3, r0
 800ab12:	2280      	movs	r2, #128	; 0x80
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 fee3 	bl	800b8e0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7959      	ldrb	r1, [r3, #5]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab2e:	b292      	uxth	r2, r2
 800ab30:	9202      	str	r2, [sp, #8]
 800ab32:	2200      	movs	r2, #0
 800ab34:	9201      	str	r2, [sp, #4]
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fecf 	bl	800b8e0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab42:	e0e3      	b.n	800ad0c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab44:	7bbb      	ldrb	r3, [r7, #14]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	f040 80e0 	bne.w	800ad0c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	220d      	movs	r2, #13
 800ab50:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	705a      	strb	r2, [r3, #1]
      break;
 800ab58:	e0d8      	b.n	800ad0c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ab5a:	2109      	movs	r1, #9
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f99d 	bl	800ae9c <USBH_Get_CfgDesc>
 800ab62:	4603      	mov	r3, r0
 800ab64:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab66:	7bbb      	ldrb	r3, [r7, #14]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2204      	movs	r2, #4
 800ab70:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab72:	e0cd      	b.n	800ad10 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab74:	7bbb      	ldrb	r3, [r7, #14]
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	f040 80ca 	bne.w	800ad10 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab82:	3301      	adds	r3, #1
 800ab84:	b2da      	uxtb	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d903      	bls.n	800ab9e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	220d      	movs	r2, #13
 800ab9a:	701a      	strb	r2, [r3, #0]
      break;
 800ab9c:	e0b8      	b.n	800ad10 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	795b      	ldrb	r3, [r3, #5]
 800aba2:	4619      	mov	r1, r3
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 feeb 	bl	800b980 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	791b      	ldrb	r3, [r3, #4]
 800abae:	4619      	mov	r1, r3
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fee5 	bl	800b980 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	701a      	strb	r2, [r3, #0]
      break;
 800abc2:	e0a5      	b.n	800ad10 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f965 	bl	800ae9c <USBH_Get_CfgDesc>
 800abd2:	4603      	mov	r3, r0
 800abd4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abd6:	7bbb      	ldrb	r3, [r7, #14]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d103      	bne.n	800abe4 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2205      	movs	r2, #5
 800abe0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abe2:	e097      	b.n	800ad14 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abe4:	7bbb      	ldrb	r3, [r7, #14]
 800abe6:	2b03      	cmp	r3, #3
 800abe8:	f040 8094 	bne.w	800ad14 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abf2:	3301      	adds	r3, #1
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d903      	bls.n	800ac0e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	220d      	movs	r2, #13
 800ac0a:	701a      	strb	r2, [r3, #0]
      break;
 800ac0c:	e082      	b.n	800ad14 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	795b      	ldrb	r3, [r3, #5]
 800ac12:	4619      	mov	r1, r3
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 feb3 	bl	800b980 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	791b      	ldrb	r3, [r3, #4]
 800ac1e:	4619      	mov	r1, r3
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fead 	bl	800b980 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	701a      	strb	r2, [r3, #0]
      break;
 800ac32:	e06f      	b.n	800ad14 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d019      	beq.n	800ac72 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac4a:	23ff      	movs	r3, #255	; 0xff
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 f949 	bl	800aee4 <USBH_Get_StringDesc>
 800ac52:	4603      	mov	r3, r0
 800ac54:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac56:	7bbb      	ldrb	r3, [r7, #14]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d103      	bne.n	800ac64 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2206      	movs	r2, #6
 800ac60:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800ac62:	e059      	b.n	800ad18 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d156      	bne.n	800ad18 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2206      	movs	r2, #6
 800ac6e:	705a      	strb	r2, [r3, #1]
      break;
 800ac70:	e052      	b.n	800ad18 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2206      	movs	r2, #6
 800ac76:	705a      	strb	r2, [r3, #1]
      break;
 800ac78:	e04e      	b.n	800ad18 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d019      	beq.n	800acb8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800ac90:	23ff      	movs	r3, #255	; 0xff
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f926 	bl	800aee4 <USBH_Get_StringDesc>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d103      	bne.n	800acaa <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2207      	movs	r2, #7
 800aca6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800aca8:	e038      	b.n	800ad1c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	2b03      	cmp	r3, #3
 800acae:	d135      	bne.n	800ad1c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2207      	movs	r2, #7
 800acb4:	705a      	strb	r2, [r3, #1]
      break;
 800acb6:	e031      	b.n	800ad1c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2207      	movs	r2, #7
 800acbc:	705a      	strb	r2, [r3, #1]
      break;
 800acbe:	e02d      	b.n	800ad1c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d017      	beq.n	800acfa <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800acd6:	23ff      	movs	r3, #255	; 0xff
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f903 	bl	800aee4 <USBH_Get_StringDesc>
 800acde:	4603      	mov	r3, r0
 800ace0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ace2:	7bbb      	ldrb	r3, [r7, #14]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d102      	bne.n	800acee <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ace8:	2300      	movs	r3, #0
 800acea:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800acec:	e018      	b.n	800ad20 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b03      	cmp	r3, #3
 800acf2:	d115      	bne.n	800ad20 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800acf4:	2300      	movs	r3, #0
 800acf6:	73fb      	strb	r3, [r7, #15]
      break;
 800acf8:	e012      	b.n	800ad20 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]
      break;
 800acfe:	e00f      	b.n	800ad20 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800ad00:	bf00      	nop
 800ad02:	e00e      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad04:	bf00      	nop
 800ad06:	e00c      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad08:	bf00      	nop
 800ad0a:	e00a      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad0c:	bf00      	nop
 800ad0e:	e008      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad10:	bf00      	nop
 800ad12:	e006      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad14:	bf00      	nop
 800ad16:	e004      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad18:	bf00      	nop
 800ad1a:	e002      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad1c:	bf00      	nop
 800ad1e:	e000      	b.n	800ad22 <USBH_HandleEnum+0x3be>
      break;
 800ad20:	bf00      	nop
  }
  return Status;
 800ad22:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	683a      	ldr	r2, [r7, #0]
 800ad3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800ad3e:	bf00      	nop
 800ad40:	370c      	adds	r7, #12
 800ad42:	46bd      	mov	sp, r7
 800ad44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad48:	4770      	bx	lr

0800ad4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f804 	bl	800ad6e <USBH_HandleSof>
}
 800ad66:	bf00      	nop
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	b082      	sub	sp, #8
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	2b0b      	cmp	r3, #11
 800ad7e:	d10a      	bne.n	800ad96 <USBH_HandleSof+0x28>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
  }
}
 800ad96:	bf00      	nop
 800ad98:	3708      	adds	r7, #8
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}

0800ad9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800adae:	bf00      	nop
}
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800adca:	bf00      	nop
}
 800adcc:	370c      	adds	r7, #12
 800adce:	46bd      	mov	sp, r7
 800add0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add4:	4770      	bx	lr

0800add6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800add6:	b480      	push	{r7}
 800add8:	b083      	sub	sp, #12
 800adda:	af00      	add	r7, sp, #0
 800addc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2201      	movs	r2, #1
 800ade2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800adf6:	2300      	movs	r3, #0
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f003 fade 	bl	800e3e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	791b      	ldrb	r3, [r3, #4]
 800ae2e:	4619      	mov	r1, r3
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 fda5 	bl	800b980 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	795b      	ldrb	r3, [r3, #5]
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fd9f 	bl	800b980 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b086      	sub	sp, #24
 800ae50:	af02      	add	r7, sp, #8
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ae5e:	78fb      	ldrb	r3, [r7, #3]
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	4613      	mov	r3, r2
 800ae66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f864 	bl	800af3a <USBH_GetDescriptor>
 800ae72:	4603      	mov	r3, r0
 800ae74:	73fb      	strb	r3, [r7, #15]
 800ae76:	7bfb      	ldrb	r3, [r7, #15]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ae88:	78fa      	ldrb	r2, [r7, #3]
 800ae8a:	b292      	uxth	r2, r2
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	f000 f918 	bl	800b0c2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ae92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	460b      	mov	r3, r1
 800aea6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	331c      	adds	r3, #28
 800aeac:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800aeae:	887b      	ldrh	r3, [r7, #2]
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb8:	2100      	movs	r1, #0
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f83d 	bl	800af3a <USBH_GetDescriptor>
 800aec0:	4603      	mov	r3, r0
 800aec2:	72fb      	strb	r3, [r7, #11]
 800aec4:	7afb      	ldrb	r3, [r7, #11]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d107      	bne.n	800aeda <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800aed0:	887a      	ldrh	r2, [r7, #2]
 800aed2:	68f9      	ldr	r1, [r7, #12]
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 f964 	bl	800b1a2 <USBH_ParseCfgDesc>
  }

  return status;
 800aeda:	7afb      	ldrb	r3, [r7, #11]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b088      	sub	sp, #32
 800aee8:	af02      	add	r7, sp, #8
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	607a      	str	r2, [r7, #4]
 800aeee:	461a      	mov	r2, r3
 800aef0:	460b      	mov	r3, r1
 800aef2:	72fb      	strb	r3, [r7, #11]
 800aef4:	4613      	mov	r3, r2
 800aef6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800aef8:	7afb      	ldrb	r3, [r7, #11]
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800af00:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800af08:	893b      	ldrh	r3, [r7, #8]
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	460b      	mov	r3, r1
 800af0e:	2100      	movs	r1, #0
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f000 f812 	bl	800af3a <USBH_GetDescriptor>
 800af16:	4603      	mov	r3, r0
 800af18:	75fb      	strb	r3, [r7, #23]
 800af1a:	7dfb      	ldrb	r3, [r7, #23]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d107      	bne.n	800af30 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af26:	893a      	ldrh	r2, [r7, #8]
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4618      	mov	r0, r3
 800af2c:	f000 fa37 	bl	800b39e <USBH_ParseStringDesc>
  }

  return status;
 800af30:	7dfb      	ldrb	r3, [r7, #23]
}
 800af32:	4618      	mov	r0, r3
 800af34:	3718      	adds	r7, #24
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b084      	sub	sp, #16
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	607b      	str	r3, [r7, #4]
 800af44:	460b      	mov	r3, r1
 800af46:	72fb      	strb	r3, [r7, #11]
 800af48:	4613      	mov	r3, r2
 800af4a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	789b      	ldrb	r3, [r3, #2]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d11c      	bne.n	800af8e <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2206      	movs	r2, #6
 800af64:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	893a      	ldrh	r2, [r7, #8]
 800af6a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800af6c:	893b      	ldrh	r3, [r7, #8]
 800af6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af76:	d104      	bne.n	800af82 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f240 4209 	movw	r2, #1033	; 0x409
 800af7e:	829a      	strh	r2, [r3, #20]
 800af80:	e002      	b.n	800af88 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2200      	movs	r2, #0
 800af86:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	8b3a      	ldrh	r2, [r7, #24]
 800af8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800af8e:	8b3b      	ldrh	r3, [r7, #24]
 800af90:	461a      	mov	r2, r3
 800af92:	6879      	ldr	r1, [r7, #4]
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f000 fa50 	bl	800b43a <USBH_CtlReq>
 800af9a:	4603      	mov	r3, r0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	460b      	mov	r3, r1
 800afae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	789b      	ldrb	r3, [r3, #2]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d10f      	bne.n	800afd8 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2205      	movs	r2, #5
 800afc2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800afc4:	78fb      	ldrb	r3, [r7, #3]
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2200      	movs	r2, #0
 800afd0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800afd8:	2200      	movs	r2, #0
 800afda:	2100      	movs	r1, #0
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fa2c 	bl	800b43a <USBH_CtlReq>
 800afe2:	4603      	mov	r3, r0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	460b      	mov	r3, r1
 800aff6:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	789b      	ldrb	r3, [r3, #2]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d10e      	bne.n	800b01e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2209      	movs	r2, #9
 800b00a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	887a      	ldrh	r2, [r7, #2]
 800b010:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	2200      	movs	r2, #0
 800b016:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fa09 	bl	800b43a <USBH_CtlReq>
 800b028:	4603      	mov	r3, r0
}
 800b02a:	4618      	mov	r0, r3
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b082      	sub	sp, #8
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]
 800b03a:	460b      	mov	r3, r1
 800b03c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	789b      	ldrb	r3, [r3, #2]
 800b042:	2b01      	cmp	r3, #1
 800b044:	d10f      	bne.n	800b066 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2200      	movs	r2, #0
 800b04a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	2203      	movs	r2, #3
 800b050:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b052:	78fb      	ldrb	r3, [r7, #3]
 800b054:	b29a      	uxth	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2200      	movs	r2, #0
 800b05e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2200      	movs	r2, #0
 800b064:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800b066:	2200      	movs	r2, #0
 800b068:	2100      	movs	r1, #0
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f9e5 	bl	800b43a <USBH_CtlReq>
 800b070:	4603      	mov	r3, r0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	460b      	mov	r3, r1
 800b084:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	789b      	ldrb	r3, [r3, #2]
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	d10f      	bne.n	800b0ae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2202      	movs	r2, #2
 800b092:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2200      	movs	r2, #0
 800b09e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b0a0:	78fb      	ldrb	r3, [r7, #3]
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	2100      	movs	r1, #0
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f9c1 	bl	800b43a <USBH_CtlReq>
 800b0b8:	4603      	mov	r3, r0
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3708      	adds	r7, #8
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}

0800b0c2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b0c2:	b480      	push	{r7}
 800b0c4:	b085      	sub	sp, #20
 800b0c6:	af00      	add	r7, sp, #0
 800b0c8:	60f8      	str	r0, [r7, #12]
 800b0ca:	60b9      	str	r1, [r7, #8]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	781a      	ldrb	r2, [r3, #0]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	785a      	ldrb	r2, [r3, #1]
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	3302      	adds	r3, #2
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	3303      	adds	r3, #3
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	021b      	lsls	r3, r3, #8
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	791a      	ldrb	r2, [r3, #4]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	795a      	ldrb	r2, [r3, #5]
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b10c:	68bb      	ldr	r3, [r7, #8]
 800b10e:	799a      	ldrb	r2, [r3, #6]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	79da      	ldrb	r2, [r3, #7]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800b11c:	88fb      	ldrh	r3, [r7, #6]
 800b11e:	2b08      	cmp	r3, #8
 800b120:	d939      	bls.n	800b196 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	3308      	adds	r3, #8
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	3309      	adds	r3, #9
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	b29b      	uxth	r3, r3
 800b132:	021b      	lsls	r3, r3, #8
 800b134:	b29b      	uxth	r3, r3
 800b136:	4313      	orrs	r3, r2
 800b138:	b29a      	uxth	r2, r3
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	330a      	adds	r3, #10
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	b29a      	uxth	r2, r3
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	330b      	adds	r3, #11
 800b14a:	781b      	ldrb	r3, [r3, #0]
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	021b      	lsls	r3, r3, #8
 800b150:	b29b      	uxth	r3, r3
 800b152:	4313      	orrs	r3, r2
 800b154:	b29a      	uxth	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	330c      	adds	r3, #12
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	b29a      	uxth	r2, r3
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	330d      	adds	r3, #13
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	b29b      	uxth	r3, r3
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	4313      	orrs	r3, r2
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	7b9a      	ldrb	r2, [r3, #14]
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	7bda      	ldrb	r2, [r3, #15]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	7c1a      	ldrb	r2, [r3, #16]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	7c5a      	ldrb	r2, [r3, #17]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	745a      	strb	r2, [r3, #17]
  }
}
 800b196:	bf00      	nop
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b08a      	sub	sp, #40	; 0x28
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	60f8      	str	r0, [r7, #12]
 800b1aa:	60b9      	str	r1, [r7, #8]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	781a      	ldrb	r2, [r3, #0]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	785a      	ldrb	r2, [r3, #1]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	3302      	adds	r3, #2
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	3303      	adds	r3, #3
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	021b      	lsls	r3, r3, #8
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	791a      	ldrb	r2, [r3, #4]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	795a      	ldrb	r2, [r3, #5]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	799a      	ldrb	r2, [r3, #6]
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	79da      	ldrb	r2, [r3, #7]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	7a1a      	ldrb	r2, [r3, #8]
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b218:	88fb      	ldrh	r3, [r7, #6]
 800b21a:	2b09      	cmp	r3, #9
 800b21c:	d95f      	bls.n	800b2de <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800b21e:	2309      	movs	r3, #9
 800b220:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800b222:	2300      	movs	r3, #0
 800b224:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b226:	e051      	b.n	800b2cc <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b228:	f107 0316 	add.w	r3, r7, #22
 800b22c:	4619      	mov	r1, r3
 800b22e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b230:	f000 f8e8 	bl	800b404 <USBH_GetNextDesc>
 800b234:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800b236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b238:	785b      	ldrb	r3, [r3, #1]
 800b23a:	2b04      	cmp	r3, #4
 800b23c:	d146      	bne.n	800b2cc <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800b23e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b242:	221a      	movs	r2, #26
 800b244:	fb02 f303 	mul.w	r3, r2, r3
 800b248:	3308      	adds	r3, #8
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	4413      	add	r3, r2
 800b24e:	3302      	adds	r3, #2
 800b250:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b254:	69f8      	ldr	r0, [r7, #28]
 800b256:	f000 f846 	bl	800b2e6 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b25a:	2300      	movs	r3, #0
 800b25c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800b260:	2300      	movs	r3, #0
 800b262:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b264:	e022      	b.n	800b2ac <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b266:	f107 0316 	add.w	r3, r7, #22
 800b26a:	4619      	mov	r1, r3
 800b26c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b26e:	f000 f8c9 	bl	800b404 <USBH_GetNextDesc>
 800b272:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	785b      	ldrb	r3, [r3, #1]
 800b278:	2b05      	cmp	r3, #5
 800b27a:	d117      	bne.n	800b2ac <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b27c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b280:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b284:	3201      	adds	r2, #1
 800b286:	00d2      	lsls	r2, r2, #3
 800b288:	211a      	movs	r1, #26
 800b28a:	fb01 f303 	mul.w	r3, r1, r3
 800b28e:	4413      	add	r3, r2
 800b290:	3308      	adds	r3, #8
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	3304      	adds	r3, #4
 800b298:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800b29a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b29c:	69b8      	ldr	r0, [r7, #24]
 800b29e:	f000 f851 	bl	800b344 <USBH_ParseEPDesc>
            ep_ix++;
 800b2a2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b2ac:	69fb      	ldr	r3, [r7, #28]
 800b2ae:	791b      	ldrb	r3, [r3, #4]
 800b2b0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d204      	bcs.n	800b2c2 <USBH_ParseCfgDesc+0x120>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	885a      	ldrh	r2, [r3, #2]
 800b2bc:	8afb      	ldrh	r3, [r7, #22]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d8d1      	bhi.n	800b266 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800b2c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b2cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b2d0:	2b01      	cmp	r3, #1
 800b2d2:	d804      	bhi.n	800b2de <USBH_ParseCfgDesc+0x13c>
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	885a      	ldrh	r2, [r3, #2]
 800b2d8:	8afb      	ldrh	r3, [r7, #22]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	d8a4      	bhi.n	800b228 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800b2de:	bf00      	nop
 800b2e0:	3728      	adds	r7, #40	; 0x28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b2e6:	b480      	push	{r7}
 800b2e8:	b083      	sub	sp, #12
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
 800b2ee:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	781a      	ldrb	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	785a      	ldrb	r2, [r3, #1]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	789a      	ldrb	r2, [r3, #2]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	78da      	ldrb	r2, [r3, #3]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	791a      	ldrb	r2, [r3, #4]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	795a      	ldrb	r2, [r3, #5]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	799a      	ldrb	r2, [r3, #6]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	79da      	ldrb	r2, [r3, #7]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	7a1a      	ldrb	r2, [r3, #8]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	721a      	strb	r2, [r3, #8]
}
 800b338:	bf00      	nop
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr

0800b344 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	781a      	ldrb	r2, [r3, #0]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	785a      	ldrb	r2, [r3, #1]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	789a      	ldrb	r2, [r3, #2]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	78da      	ldrb	r2, [r3, #3]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	3304      	adds	r3, #4
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	b29a      	uxth	r2, r3
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	3305      	adds	r3, #5
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	021b      	lsls	r3, r3, #8
 800b380:	b29b      	uxth	r3, r3
 800b382:	4313      	orrs	r3, r2
 800b384:	b29a      	uxth	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	799a      	ldrb	r2, [r3, #6]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	719a      	strb	r2, [r3, #6]
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b087      	sub	sp, #28
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	60f8      	str	r0, [r7, #12]
 800b3a6:	60b9      	str	r1, [r7, #8]
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	d120      	bne.n	800b3f8 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	1e9a      	subs	r2, r3, #2
 800b3bc:	88fb      	ldrh	r3, [r7, #6]
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	bf28      	it	cs
 800b3c2:	4613      	movcs	r3, r2
 800b3c4:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3302      	adds	r3, #2
 800b3ca:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	82fb      	strh	r3, [r7, #22]
 800b3d0:	e00b      	b.n	800b3ea <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b3d2:	8afb      	ldrh	r3, [r7, #22]
 800b3d4:	68fa      	ldr	r2, [r7, #12]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	781a      	ldrb	r2, [r3, #0]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b3e4:	8afb      	ldrh	r3, [r7, #22]
 800b3e6:	3302      	adds	r3, #2
 800b3e8:	82fb      	strh	r3, [r7, #22]
 800b3ea:	8afa      	ldrh	r2, [r7, #22]
 800b3ec:	8abb      	ldrh	r3, [r7, #20]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d3ef      	bcc.n	800b3d2 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	701a      	strb	r2, [r3, #0]
  }
}
 800b3f8:	bf00      	nop
 800b3fa:	371c      	adds	r7, #28
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	881a      	ldrh	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	4413      	add	r3, r2
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	4413      	add	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b42c:	68fb      	ldr	r3, [r7, #12]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3714      	adds	r7, #20
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr

0800b43a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b43a:	b580      	push	{r7, lr}
 800b43c:	b086      	sub	sp, #24
 800b43e:	af00      	add	r7, sp, #0
 800b440:	60f8      	str	r0, [r7, #12]
 800b442:	60b9      	str	r1, [r7, #8]
 800b444:	4613      	mov	r3, r2
 800b446:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b448:	2301      	movs	r3, #1
 800b44a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	789b      	ldrb	r3, [r3, #2]
 800b450:	2b01      	cmp	r3, #1
 800b452:	d002      	beq.n	800b45a <USBH_CtlReq+0x20>
 800b454:	2b02      	cmp	r3, #2
 800b456:	d00f      	beq.n	800b478 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b458:	e027      	b.n	800b4aa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	88fa      	ldrh	r2, [r7, #6]
 800b464:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2201      	movs	r2, #1
 800b46a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2202      	movs	r2, #2
 800b470:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b472:	2301      	movs	r3, #1
 800b474:	75fb      	strb	r3, [r7, #23]
      break;
 800b476:	e018      	b.n	800b4aa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f81b 	bl	800b4b4 <USBH_HandleControl>
 800b47e:	4603      	mov	r3, r0
 800b480:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d002      	beq.n	800b48e <USBH_CtlReq+0x54>
 800b488:	7dfb      	ldrb	r3, [r7, #23]
 800b48a:	2b03      	cmp	r3, #3
 800b48c:	d106      	bne.n	800b49c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2201      	movs	r2, #1
 800b492:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	761a      	strb	r2, [r3, #24]
      break;
 800b49a:	e005      	b.n	800b4a8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b49c:	7dfb      	ldrb	r3, [r7, #23]
 800b49e:	2b02      	cmp	r3, #2
 800b4a0:	d102      	bne.n	800b4a8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	709a      	strb	r2, [r3, #2]
      break;
 800b4a8:	bf00      	nop
  }
  return status;
 800b4aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	7e1b      	ldrb	r3, [r3, #24]
 800b4c8:	3b01      	subs	r3, #1
 800b4ca:	2b0a      	cmp	r3, #10
 800b4cc:	f200 8158 	bhi.w	800b780 <USBH_HandleControl+0x2cc>
 800b4d0:	a201      	add	r2, pc, #4	; (adr r2, 800b4d8 <USBH_HandleControl+0x24>)
 800b4d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d6:	bf00      	nop
 800b4d8:	0800b505 	.word	0x0800b505
 800b4dc:	0800b51f 	.word	0x0800b51f
 800b4e0:	0800b589 	.word	0x0800b589
 800b4e4:	0800b5af 	.word	0x0800b5af
 800b4e8:	0800b5e7 	.word	0x0800b5e7
 800b4ec:	0800b613 	.word	0x0800b613
 800b4f0:	0800b665 	.word	0x0800b665
 800b4f4:	0800b687 	.word	0x0800b687
 800b4f8:	0800b6c3 	.word	0x0800b6c3
 800b4fc:	0800b6eb 	.word	0x0800b6eb
 800b500:	0800b729 	.word	0x0800b729
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f103 0110 	add.w	r1, r3, #16
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	795b      	ldrb	r3, [r3, #5]
 800b50e:	461a      	mov	r2, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 f945 	bl	800b7a0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2202      	movs	r2, #2
 800b51a:	761a      	strb	r2, [r3, #24]
      break;
 800b51c:	e13b      	b.n	800b796 <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	795b      	ldrb	r3, [r3, #5]
 800b522:	4619      	mov	r1, r3
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f003 f84b 	bl	800e5c0 <USBH_LL_GetURBState>
 800b52a:	4603      	mov	r3, r0
 800b52c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b52e:	7bbb      	ldrb	r3, [r7, #14]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d11e      	bne.n	800b572 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	7c1b      	ldrb	r3, [r3, #16]
 800b538:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b53c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8adb      	ldrh	r3, [r3, #22]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d00a      	beq.n	800b55c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b546:	7b7b      	ldrb	r3, [r7, #13]
 800b548:	2b80      	cmp	r3, #128	; 0x80
 800b54a:	d103      	bne.n	800b554 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2203      	movs	r2, #3
 800b550:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b552:	e117      	b.n	800b784 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2205      	movs	r2, #5
 800b558:	761a      	strb	r2, [r3, #24]
      break;
 800b55a:	e113      	b.n	800b784 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800b55c:	7b7b      	ldrb	r3, [r7, #13]
 800b55e:	2b80      	cmp	r3, #128	; 0x80
 800b560:	d103      	bne.n	800b56a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2209      	movs	r2, #9
 800b566:	761a      	strb	r2, [r3, #24]
      break;
 800b568:	e10c      	b.n	800b784 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2207      	movs	r2, #7
 800b56e:	761a      	strb	r2, [r3, #24]
      break;
 800b570:	e108      	b.n	800b784 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b572:	7bbb      	ldrb	r3, [r7, #14]
 800b574:	2b04      	cmp	r3, #4
 800b576:	d003      	beq.n	800b580 <USBH_HandleControl+0xcc>
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	f040 8102 	bne.w	800b784 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	220b      	movs	r2, #11
 800b584:	761a      	strb	r2, [r3, #24]
      break;
 800b586:	e0fd      	b.n	800b784 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b58e:	b29a      	uxth	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6899      	ldr	r1, [r3, #8]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	899a      	ldrh	r2, [r3, #12]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	791b      	ldrb	r3, [r3, #4]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f93c 	bl	800b81e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	2204      	movs	r2, #4
 800b5aa:	761a      	strb	r2, [r3, #24]
      break;
 800b5ac:	e0f3      	b.n	800b796 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	791b      	ldrb	r3, [r3, #4]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f003 f803 	bl	800e5c0 <USBH_LL_GetURBState>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b5be:	7bbb      	ldrb	r3, [r7, #14]
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d102      	bne.n	800b5ca <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2209      	movs	r2, #9
 800b5c8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	2b05      	cmp	r3, #5
 800b5ce:	d102      	bne.n	800b5d6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b5d4:	e0d8      	b.n	800b788 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	2b04      	cmp	r3, #4
 800b5da:	f040 80d5 	bne.w	800b788 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	220b      	movs	r2, #11
 800b5e2:	761a      	strb	r2, [r3, #24]
      break;
 800b5e4:	e0d0      	b.n	800b788 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6899      	ldr	r1, [r3, #8]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	899a      	ldrh	r2, [r3, #12]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	7958      	ldrb	r0, [r3, #5]
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f8eb 	bl	800b7d4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b604:	b29a      	uxth	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2206      	movs	r2, #6
 800b60e:	761a      	strb	r2, [r3, #24]
      break;
 800b610:	e0c1      	b.n	800b796 <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	795b      	ldrb	r3, [r3, #5]
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f002 ffd1 	bl	800e5c0 <USBH_LL_GetURBState>
 800b61e:	4603      	mov	r3, r0
 800b620:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b622:	7bbb      	ldrb	r3, [r7, #14]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d103      	bne.n	800b630 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2207      	movs	r2, #7
 800b62c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b62e:	e0ad      	b.n	800b78c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800b630:	7bbb      	ldrb	r3, [r7, #14]
 800b632:	2b05      	cmp	r3, #5
 800b634:	d105      	bne.n	800b642 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	220c      	movs	r2, #12
 800b63a:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b63c:	2303      	movs	r3, #3
 800b63e:	73fb      	strb	r3, [r7, #15]
      break;
 800b640:	e0a4      	b.n	800b78c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b642:	7bbb      	ldrb	r3, [r7, #14]
 800b644:	2b02      	cmp	r3, #2
 800b646:	d103      	bne.n	800b650 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2205      	movs	r2, #5
 800b64c:	761a      	strb	r2, [r3, #24]
      break;
 800b64e:	e09d      	b.n	800b78c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	2b04      	cmp	r3, #4
 800b654:	f040 809a 	bne.w	800b78c <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	220b      	movs	r2, #11
 800b65c:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b65e:	2302      	movs	r3, #2
 800b660:	73fb      	strb	r3, [r7, #15]
      break;
 800b662:	e093      	b.n	800b78c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	791b      	ldrb	r3, [r3, #4]
 800b668:	2200      	movs	r2, #0
 800b66a:	2100      	movs	r1, #0
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 f8d6 	bl	800b81e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b678:	b29a      	uxth	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2208      	movs	r2, #8
 800b682:	761a      	strb	r2, [r3, #24]

      break;
 800b684:	e087      	b.n	800b796 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	791b      	ldrb	r3, [r3, #4]
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f002 ff97 	bl	800e5c0 <USBH_LL_GetURBState>
 800b692:	4603      	mov	r3, r0
 800b694:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d105      	bne.n	800b6a8 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	220d      	movs	r2, #13
 800b6a0:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b6a6:	e073      	b.n	800b790 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800b6a8:	7bbb      	ldrb	r3, [r7, #14]
 800b6aa:	2b04      	cmp	r3, #4
 800b6ac:	d103      	bne.n	800b6b6 <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	220b      	movs	r2, #11
 800b6b2:	761a      	strb	r2, [r3, #24]
      break;
 800b6b4:	e06c      	b.n	800b790 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	2b05      	cmp	r3, #5
 800b6ba:	d169      	bne.n	800b790 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	73fb      	strb	r3, [r7, #15]
      break;
 800b6c0:	e066      	b.n	800b790 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	795a      	ldrb	r2, [r3, #5]
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f87f 	bl	800b7d4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	220a      	movs	r2, #10
 800b6e6:	761a      	strb	r2, [r3, #24]
      break;
 800b6e8:	e055      	b.n	800b796 <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	795b      	ldrb	r3, [r3, #5]
 800b6ee:	4619      	mov	r1, r3
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f002 ff65 	bl	800e5c0 <USBH_LL_GetURBState>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b6fa:	7bbb      	ldrb	r3, [r7, #14]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d105      	bne.n	800b70c <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	220d      	movs	r2, #13
 800b708:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800b70a:	e043      	b.n	800b794 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b70c:	7bbb      	ldrb	r3, [r7, #14]
 800b70e:	2b02      	cmp	r3, #2
 800b710:	d103      	bne.n	800b71a <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2209      	movs	r2, #9
 800b716:	761a      	strb	r2, [r3, #24]
      break;
 800b718:	e03c      	b.n	800b794 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b71a:	7bbb      	ldrb	r3, [r7, #14]
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	d139      	bne.n	800b794 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	220b      	movs	r2, #11
 800b724:	761a      	strb	r2, [r3, #24]
      break;
 800b726:	e035      	b.n	800b794 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7e5b      	ldrb	r3, [r3, #25]
 800b72c:	3301      	adds	r3, #1
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	765a      	strb	r2, [r3, #25]
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	7e5b      	ldrb	r3, [r3, #25]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d806      	bhi.n	800b74a <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2201      	movs	r2, #1
 800b746:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b748:	e025      	b.n	800b796 <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b750:	2106      	movs	r1, #6
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	795b      	ldrb	r3, [r3, #5]
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f90c 	bl	800b980 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	791b      	ldrb	r3, [r3, #4]
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f906 	bl	800b980 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b77a:	2302      	movs	r3, #2
 800b77c:	73fb      	strb	r3, [r7, #15]
      break;
 800b77e:	e00a      	b.n	800b796 <USBH_HandleControl+0x2e2>

    default:
      break;
 800b780:	bf00      	nop
 800b782:	e008      	b.n	800b796 <USBH_HandleControl+0x2e2>
      break;
 800b784:	bf00      	nop
 800b786:	e006      	b.n	800b796 <USBH_HandleControl+0x2e2>
      break;
 800b788:	bf00      	nop
 800b78a:	e004      	b.n	800b796 <USBH_HandleControl+0x2e2>
      break;
 800b78c:	bf00      	nop
 800b78e:	e002      	b.n	800b796 <USBH_HandleControl+0x2e2>
      break;
 800b790:	bf00      	nop
 800b792:	e000      	b.n	800b796 <USBH_HandleControl+0x2e2>
      break;
 800b794:	bf00      	nop
  }

  return status;
 800b796:	7bfb      	ldrb	r3, [r7, #15]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af04      	add	r7, sp, #16
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7ae:	79f9      	ldrb	r1, [r7, #7]
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	9303      	str	r3, [sp, #12]
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	9302      	str	r3, [sp, #8]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	9301      	str	r3, [sp, #4]
 800b7bc:	2300      	movs	r3, #0
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f002 feca 	bl	800e55e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b088      	sub	sp, #32
 800b7d8:	af04      	add	r7, sp, #16
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	4611      	mov	r1, r2
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	460b      	mov	r3, r1
 800b7e4:	80fb      	strh	r3, [r7, #6]
 800b7e6:	4613      	mov	r3, r2
 800b7e8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d001      	beq.n	800b7f8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b7f8:	7979      	ldrb	r1, [r7, #5]
 800b7fa:	7e3b      	ldrb	r3, [r7, #24]
 800b7fc:	9303      	str	r3, [sp, #12]
 800b7fe:	88fb      	ldrh	r3, [r7, #6]
 800b800:	9302      	str	r3, [sp, #8]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	9301      	str	r3, [sp, #4]
 800b806:	2301      	movs	r3, #1
 800b808:	9300      	str	r3, [sp, #0]
 800b80a:	2300      	movs	r3, #0
 800b80c:	2200      	movs	r2, #0
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f002 fea5 	bl	800e55e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b814:	2300      	movs	r3, #0
}
 800b816:	4618      	mov	r0, r3
 800b818:	3710      	adds	r7, #16
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}

0800b81e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b81e:	b580      	push	{r7, lr}
 800b820:	b088      	sub	sp, #32
 800b822:	af04      	add	r7, sp, #16
 800b824:	60f8      	str	r0, [r7, #12]
 800b826:	60b9      	str	r1, [r7, #8]
 800b828:	4611      	mov	r1, r2
 800b82a:	461a      	mov	r2, r3
 800b82c:	460b      	mov	r3, r1
 800b82e:	80fb      	strh	r3, [r7, #6]
 800b830:	4613      	mov	r3, r2
 800b832:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b834:	7979      	ldrb	r1, [r7, #5]
 800b836:	2300      	movs	r3, #0
 800b838:	9303      	str	r3, [sp, #12]
 800b83a:	88fb      	ldrh	r3, [r7, #6]
 800b83c:	9302      	str	r3, [sp, #8]
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	9301      	str	r3, [sp, #4]
 800b842:	2301      	movs	r3, #1
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	2300      	movs	r3, #0
 800b848:	2201      	movs	r2, #1
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f002 fe87 	bl	800e55e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b850:	2300      	movs	r3, #0

}
 800b852:	4618      	mov	r0, r3
 800b854:	3710      	adds	r7, #16
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b088      	sub	sp, #32
 800b85e:	af04      	add	r7, sp, #16
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	4611      	mov	r1, r2
 800b866:	461a      	mov	r2, r3
 800b868:	460b      	mov	r3, r1
 800b86a:	80fb      	strh	r3, [r7, #6]
 800b86c:	4613      	mov	r3, r2
 800b86e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b876:	2b00      	cmp	r3, #0
 800b878:	d001      	beq.n	800b87e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b87a:	2300      	movs	r3, #0
 800b87c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b87e:	7979      	ldrb	r1, [r7, #5]
 800b880:	7e3b      	ldrb	r3, [r7, #24]
 800b882:	9303      	str	r3, [sp, #12]
 800b884:	88fb      	ldrh	r3, [r7, #6]
 800b886:	9302      	str	r3, [sp, #8]
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	9301      	str	r3, [sp, #4]
 800b88c:	2301      	movs	r3, #1
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	2302      	movs	r3, #2
 800b892:	2200      	movs	r2, #0
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f002 fe62 	bl	800e55e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b088      	sub	sp, #32
 800b8a8:	af04      	add	r7, sp, #16
 800b8aa:	60f8      	str	r0, [r7, #12]
 800b8ac:	60b9      	str	r1, [r7, #8]
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	80fb      	strh	r3, [r7, #6]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b8ba:	7979      	ldrb	r1, [r7, #5]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	9303      	str	r3, [sp, #12]
 800b8c0:	88fb      	ldrh	r3, [r7, #6]
 800b8c2:	9302      	str	r3, [sp, #8]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f002 fe44 	bl	800e55e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b086      	sub	sp, #24
 800b8e4:	af04      	add	r7, sp, #16
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	4608      	mov	r0, r1
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	461a      	mov	r2, r3
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	70fb      	strb	r3, [r7, #3]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	70bb      	strb	r3, [r7, #2]
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b8fa:	7878      	ldrb	r0, [r7, #1]
 800b8fc:	78ba      	ldrb	r2, [r7, #2]
 800b8fe:	78f9      	ldrb	r1, [r7, #3]
 800b900:	8b3b      	ldrh	r3, [r7, #24]
 800b902:	9302      	str	r3, [sp, #8]
 800b904:	7d3b      	ldrb	r3, [r7, #20]
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	7c3b      	ldrb	r3, [r7, #16]
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	4603      	mov	r3, r0
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f002 fdd7 	bl	800e4c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	460b      	mov	r3, r1
 800b928:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	4619      	mov	r1, r3
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f002 fdf6 	bl	800e520 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b934:	2300      	movs	r3, #0
}
 800b936:	4618      	mov	r0, r3
 800b938:	3708      	adds	r7, #8
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	460b      	mov	r3, r1
 800b948:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 f836 	bl	800b9bc <USBH_GetFreePipe>
 800b950:	4603      	mov	r3, r0
 800b952:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b954:	89fb      	ldrh	r3, [r7, #14]
 800b956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b95a:	4293      	cmp	r3, r2
 800b95c:	d00a      	beq.n	800b974 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b95e:	78fa      	ldrb	r2, [r7, #3]
 800b960:	89fb      	ldrh	r3, [r7, #14]
 800b962:	f003 030f 	and.w	r3, r3, #15
 800b966:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b96a:	6879      	ldr	r1, [r7, #4]
 800b96c:	33e0      	adds	r3, #224	; 0xe0
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	440b      	add	r3, r1
 800b972:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b974:	89fb      	ldrh	r3, [r7, #14]
 800b976:	b2db      	uxtb	r3, r3
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b98c:	78fb      	ldrb	r3, [r7, #3]
 800b98e:	2b0a      	cmp	r3, #10
 800b990:	d80d      	bhi.n	800b9ae <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b992:	78fb      	ldrb	r3, [r7, #3]
 800b994:	687a      	ldr	r2, [r7, #4]
 800b996:	33e0      	adds	r3, #224	; 0xe0
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4413      	add	r3, r2
 800b99c:	685a      	ldr	r2, [r3, #4]
 800b99e:	78fb      	ldrb	r3, [r7, #3]
 800b9a0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b9a4:	6879      	ldr	r1, [r7, #4]
 800b9a6:	33e0      	adds	r3, #224	; 0xe0
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	440b      	add	r3, r1
 800b9ac:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b9ae:	2300      	movs	r3, #0
}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	370c      	adds	r7, #12
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
 800b9cc:	e00f      	b.n	800b9ee <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b9ce:	7bfb      	ldrb	r3, [r7, #15]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	33e0      	adds	r3, #224	; 0xe0
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d102      	bne.n	800b9e8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b9e2:	7bfb      	ldrb	r3, [r7, #15]
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	e007      	b.n	800b9f8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	73fb      	strb	r3, [r7, #15]
 800b9ee:	7bfb      	ldrb	r3, [r7, #15]
 800b9f0:	2b0a      	cmp	r3, #10
 800b9f2:	d9ec      	bls.n	800b9ce <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ba0e:	79fb      	ldrb	r3, [r7, #7]
 800ba10:	4a08      	ldr	r2, [pc, #32]	; (800ba34 <disk_status+0x30>)
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	685b      	ldr	r3, [r3, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	79fa      	ldrb	r2, [r7, #7]
 800ba1c:	4905      	ldr	r1, [pc, #20]	; (800ba34 <disk_status+0x30>)
 800ba1e:	440a      	add	r2, r1
 800ba20:	7a12      	ldrb	r2, [r2, #8]
 800ba22:	4610      	mov	r0, r2
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20001384 	.word	0x20001384

0800ba38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	4603      	mov	r3, r0
 800ba40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	4a0d      	ldr	r2, [pc, #52]	; (800ba80 <disk_initialize+0x48>)
 800ba4a:	5cd3      	ldrb	r3, [r2, r3]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d111      	bne.n	800ba74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ba50:	79fb      	ldrb	r3, [r7, #7]
 800ba52:	4a0b      	ldr	r2, [pc, #44]	; (800ba80 <disk_initialize+0x48>)
 800ba54:	2101      	movs	r1, #1
 800ba56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ba58:	79fb      	ldrb	r3, [r7, #7]
 800ba5a:	4a09      	ldr	r2, [pc, #36]	; (800ba80 <disk_initialize+0x48>)
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	79fa      	ldrb	r2, [r7, #7]
 800ba66:	4906      	ldr	r1, [pc, #24]	; (800ba80 <disk_initialize+0x48>)
 800ba68:	440a      	add	r2, r1
 800ba6a:	7a12      	ldrb	r2, [r2, #8]
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	20001384 	.word	0x20001384

0800ba84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ba84:	b590      	push	{r4, r7, lr}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	60b9      	str	r1, [r7, #8]
 800ba8c:	607a      	str	r2, [r7, #4]
 800ba8e:	603b      	str	r3, [r7, #0]
 800ba90:	4603      	mov	r3, r0
 800ba92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ba94:	7bfb      	ldrb	r3, [r7, #15]
 800ba96:	4a0a      	ldr	r2, [pc, #40]	; (800bac0 <disk_read+0x3c>)
 800ba98:	009b      	lsls	r3, r3, #2
 800ba9a:	4413      	add	r3, r2
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	689c      	ldr	r4, [r3, #8]
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
 800baa2:	4a07      	ldr	r2, [pc, #28]	; (800bac0 <disk_read+0x3c>)
 800baa4:	4413      	add	r3, r2
 800baa6:	7a18      	ldrb	r0, [r3, #8]
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	687a      	ldr	r2, [r7, #4]
 800baac:	68b9      	ldr	r1, [r7, #8]
 800baae:	47a0      	blx	r4
 800bab0:	4603      	mov	r3, r0
 800bab2:	75fb      	strb	r3, [r7, #23]
  return res;
 800bab4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	bd90      	pop	{r4, r7, pc}
 800babe:	bf00      	nop
 800bac0:	20001384 	.word	0x20001384

0800bac4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bac4:	b590      	push	{r4, r7, lr}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	607a      	str	r2, [r7, #4]
 800bace:	603b      	str	r3, [r7, #0]
 800bad0:	4603      	mov	r3, r0
 800bad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bad4:	7bfb      	ldrb	r3, [r7, #15]
 800bad6:	4a0a      	ldr	r2, [pc, #40]	; (800bb00 <disk_write+0x3c>)
 800bad8:	009b      	lsls	r3, r3, #2
 800bada:	4413      	add	r3, r2
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68dc      	ldr	r4, [r3, #12]
 800bae0:	7bfb      	ldrb	r3, [r7, #15]
 800bae2:	4a07      	ldr	r2, [pc, #28]	; (800bb00 <disk_write+0x3c>)
 800bae4:	4413      	add	r3, r2
 800bae6:	7a18      	ldrb	r0, [r3, #8]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	68b9      	ldr	r1, [r7, #8]
 800baee:	47a0      	blx	r4
 800baf0:	4603      	mov	r3, r0
 800baf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	371c      	adds	r7, #28
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd90      	pop	{r4, r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20001384 	.word	0x20001384

0800bb04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	603a      	str	r2, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
 800bb10:	460b      	mov	r3, r1
 800bb12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bb14:	79fb      	ldrb	r3, [r7, #7]
 800bb16:	4a09      	ldr	r2, [pc, #36]	; (800bb3c <disk_ioctl+0x38>)
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	79fa      	ldrb	r2, [r7, #7]
 800bb22:	4906      	ldr	r1, [pc, #24]	; (800bb3c <disk_ioctl+0x38>)
 800bb24:	440a      	add	r2, r1
 800bb26:	7a10      	ldrb	r0, [r2, #8]
 800bb28:	79b9      	ldrb	r1, [r7, #6]
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	4798      	blx	r3
 800bb2e:	4603      	mov	r3, r0
 800bb30:	73fb      	strb	r3, [r7, #15]
  return res;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3710      	adds	r7, #16
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	20001384 	.word	0x20001384

0800bb40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bb40:	b480      	push	{r7}
 800bb42:	b085      	sub	sp, #20
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bb50:	89fb      	ldrh	r3, [r7, #14]
 800bb52:	021b      	lsls	r3, r3, #8
 800bb54:	b21a      	sxth	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	b21b      	sxth	r3, r3
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	b21b      	sxth	r3, r3
 800bb60:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bb62:	89fb      	ldrh	r3, [r7, #14]
}
 800bb64:	4618      	mov	r0, r3
 800bb66:	3714      	adds	r7, #20
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	3303      	adds	r3, #3
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	021b      	lsls	r3, r3, #8
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	3202      	adds	r2, #2
 800bb88:	7812      	ldrb	r2, [r2, #0]
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	021b      	lsls	r3, r3, #8
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	3201      	adds	r2, #1
 800bb96:	7812      	ldrb	r2, [r2, #0]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	021b      	lsls	r3, r3, #8
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	7812      	ldrb	r2, [r2, #0]
 800bba4:	4313      	orrs	r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	return rv;
 800bba8:	68fb      	ldr	r3, [r7, #12]
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3714      	adds	r7, #20
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b083      	sub	sp, #12
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	887a      	ldrh	r2, [r7, #2]
 800bbca:	b2d2      	uxtb	r2, r2
 800bbcc:	701a      	strb	r2, [r3, #0]
 800bbce:	887b      	ldrh	r3, [r7, #2]
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	1c5a      	adds	r2, r3, #1
 800bbd8:	607a      	str	r2, [r7, #4]
 800bbda:	887a      	ldrh	r2, [r7, #2]
 800bbdc:	b2d2      	uxtb	r2, r2
 800bbde:	701a      	strb	r2, [r3, #0]
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	1c5a      	adds	r2, r3, #1
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	683a      	ldr	r2, [r7, #0]
 800bbfe:	b2d2      	uxtb	r2, r2
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	1c5a      	adds	r2, r3, #1
 800bc0c:	607a      	str	r2, [r7, #4]
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	b2d2      	uxtb	r2, r2
 800bc12:	701a      	strb	r2, [r3, #0]
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	0a1b      	lsrs	r3, r3, #8
 800bc18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	607a      	str	r2, [r7, #4]
 800bc20:	683a      	ldr	r2, [r7, #0]
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	0a1b      	lsrs	r3, r3, #8
 800bc2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	1c5a      	adds	r2, r3, #1
 800bc30:	607a      	str	r2, [r7, #4]
 800bc32:	683a      	ldr	r2, [r7, #0]
 800bc34:	b2d2      	uxtb	r2, r2
 800bc36:	701a      	strb	r2, [r3, #0]
}
 800bc38:	bf00      	nop
 800bc3a:	370c      	adds	r7, #12
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bc44:	b480      	push	{r7}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00d      	beq.n	800bc7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	1c53      	adds	r3, r2, #1
 800bc62:	613b      	str	r3, [r7, #16]
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	1c59      	adds	r1, r3, #1
 800bc68:	6179      	str	r1, [r7, #20]
 800bc6a:	7812      	ldrb	r2, [r2, #0]
 800bc6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	3b01      	subs	r3, #1
 800bc72:	607b      	str	r3, [r7, #4]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1f1      	bne.n	800bc5e <mem_cpy+0x1a>
	}
}
 800bc7a:	bf00      	nop
 800bc7c:	371c      	adds	r7, #28
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bc86:	b480      	push	{r7}
 800bc88:	b087      	sub	sp, #28
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bc96:	697b      	ldr	r3, [r7, #20]
 800bc98:	1c5a      	adds	r2, r3, #1
 800bc9a:	617a      	str	r2, [r7, #20]
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	b2d2      	uxtb	r2, r2
 800bca0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	607b      	str	r3, [r7, #4]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1f3      	bne.n	800bc96 <mem_set+0x10>
}
 800bcae:	bf00      	nop
 800bcb0:	371c      	adds	r7, #28
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bcba:	b480      	push	{r7}
 800bcbc:	b089      	sub	sp, #36	; 0x24
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	60f8      	str	r0, [r7, #12]
 800bcc2:	60b9      	str	r1, [r7, #8]
 800bcc4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	61fb      	str	r3, [r7, #28]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	1c5a      	adds	r2, r3, #1
 800bcd6:	61fa      	str	r2, [r7, #28]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	1c5a      	adds	r2, r3, #1
 800bce0:	61ba      	str	r2, [r7, #24]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	1acb      	subs	r3, r1, r3
 800bce6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	607b      	str	r3, [r7, #4]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d002      	beq.n	800bcfa <mem_cmp+0x40>
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d0eb      	beq.n	800bcd2 <mem_cmp+0x18>

	return r;
 800bcfa:	697b      	ldr	r3, [r7, #20]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	3724      	adds	r7, #36	; 0x24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bd12:	e002      	b.n	800bd1a <chk_chr+0x12>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	3301      	adds	r3, #1
 800bd18:	607b      	str	r3, [r7, #4]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	781b      	ldrb	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d005      	beq.n	800bd2e <chk_chr+0x26>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	461a      	mov	r2, r3
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	4293      	cmp	r3, r2
 800bd2c:	d1f2      	bne.n	800bd14 <chk_chr+0xc>
	return *str;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	781b      	ldrb	r3, [r3, #0]
}
 800bd32:	4618      	mov	r0, r3
 800bd34:	370c      	adds	r7, #12
 800bd36:	46bd      	mov	sp, r7
 800bd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3c:	4770      	bx	lr
	...

0800bd40 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b085      	sub	sp, #20
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	60bb      	str	r3, [r7, #8]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	e029      	b.n	800bda8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bd54:	4a27      	ldr	r2, [pc, #156]	; (800bdf4 <chk_lock+0xb4>)
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	011b      	lsls	r3, r3, #4
 800bd5a:	4413      	add	r3, r2
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d01d      	beq.n	800bd9e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd62:	4a24      	ldr	r2, [pc, #144]	; (800bdf4 <chk_lock+0xb4>)
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	011b      	lsls	r3, r3, #4
 800bd68:	4413      	add	r3, r2
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d116      	bne.n	800bda2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bd74:	4a1f      	ldr	r2, [pc, #124]	; (800bdf4 <chk_lock+0xb4>)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	011b      	lsls	r3, r3, #4
 800bd7a:	4413      	add	r3, r2
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d10c      	bne.n	800bda2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bd88:	4a1a      	ldr	r2, [pc, #104]	; (800bdf4 <chk_lock+0xb4>)
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	011b      	lsls	r3, r3, #4
 800bd8e:	4413      	add	r3, r2
 800bd90:	3308      	adds	r3, #8
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d102      	bne.n	800bda2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bd9c:	e007      	b.n	800bdae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3301      	adds	r3, #1
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d9d2      	bls.n	800bd54 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	d109      	bne.n	800bdc8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d102      	bne.n	800bdc0 <chk_lock+0x80>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b02      	cmp	r3, #2
 800bdbe:	d101      	bne.n	800bdc4 <chk_lock+0x84>
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e010      	b.n	800bde6 <chk_lock+0xa6>
 800bdc4:	2312      	movs	r3, #18
 800bdc6:	e00e      	b.n	800bde6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d108      	bne.n	800bde0 <chk_lock+0xa0>
 800bdce:	4a09      	ldr	r2, [pc, #36]	; (800bdf4 <chk_lock+0xb4>)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	011b      	lsls	r3, r3, #4
 800bdd4:	4413      	add	r3, r2
 800bdd6:	330c      	adds	r3, #12
 800bdd8:	881b      	ldrh	r3, [r3, #0]
 800bdda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdde:	d101      	bne.n	800bde4 <chk_lock+0xa4>
 800bde0:	2310      	movs	r3, #16
 800bde2:	e000      	b.n	800bde6 <chk_lock+0xa6>
 800bde4:	2300      	movs	r3, #0
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3714      	adds	r7, #20
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20001364 	.word	0x20001364

0800bdf8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b083      	sub	sp, #12
 800bdfc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bdfe:	2300      	movs	r3, #0
 800be00:	607b      	str	r3, [r7, #4]
 800be02:	e002      	b.n	800be0a <enq_lock+0x12>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3301      	adds	r3, #1
 800be08:	607b      	str	r3, [r7, #4]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2b01      	cmp	r3, #1
 800be0e:	d806      	bhi.n	800be1e <enq_lock+0x26>
 800be10:	4a09      	ldr	r2, [pc, #36]	; (800be38 <enq_lock+0x40>)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	011b      	lsls	r3, r3, #4
 800be16:	4413      	add	r3, r2
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d1f2      	bne.n	800be04 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2b02      	cmp	r3, #2
 800be22:	bf14      	ite	ne
 800be24:	2301      	movne	r3, #1
 800be26:	2300      	moveq	r3, #0
 800be28:	b2db      	uxtb	r3, r3
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	20001364 	.word	0x20001364

0800be3c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b085      	sub	sp, #20
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
 800be44:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be46:	2300      	movs	r3, #0
 800be48:	60fb      	str	r3, [r7, #12]
 800be4a:	e01f      	b.n	800be8c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800be4c:	4a41      	ldr	r2, [pc, #260]	; (800bf54 <inc_lock+0x118>)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	4413      	add	r3, r2
 800be54:	681a      	ldr	r2, [r3, #0]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d113      	bne.n	800be86 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800be5e:	4a3d      	ldr	r2, [pc, #244]	; (800bf54 <inc_lock+0x118>)
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	011b      	lsls	r3, r3, #4
 800be64:	4413      	add	r3, r2
 800be66:	3304      	adds	r3, #4
 800be68:	681a      	ldr	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800be6e:	429a      	cmp	r2, r3
 800be70:	d109      	bne.n	800be86 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800be72:	4a38      	ldr	r2, [pc, #224]	; (800bf54 <inc_lock+0x118>)
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	011b      	lsls	r3, r3, #4
 800be78:	4413      	add	r3, r2
 800be7a:	3308      	adds	r3, #8
 800be7c:	681a      	ldr	r2, [r3, #0]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800be82:	429a      	cmp	r2, r3
 800be84:	d006      	beq.n	800be94 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3301      	adds	r3, #1
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	d9dc      	bls.n	800be4c <inc_lock+0x10>
 800be92:	e000      	b.n	800be96 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800be94:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d132      	bne.n	800bf02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800be9c:	2300      	movs	r3, #0
 800be9e:	60fb      	str	r3, [r7, #12]
 800bea0:	e002      	b.n	800bea8 <inc_lock+0x6c>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3301      	adds	r3, #1
 800bea6:	60fb      	str	r3, [r7, #12]
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d806      	bhi.n	800bebc <inc_lock+0x80>
 800beae:	4a29      	ldr	r2, [pc, #164]	; (800bf54 <inc_lock+0x118>)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	4413      	add	r3, r2
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f2      	bne.n	800bea2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d101      	bne.n	800bec6 <inc_lock+0x8a>
 800bec2:	2300      	movs	r3, #0
 800bec4:	e040      	b.n	800bf48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681a      	ldr	r2, [r3, #0]
 800beca:	4922      	ldr	r1, [pc, #136]	; (800bf54 <inc_lock+0x118>)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	011b      	lsls	r3, r3, #4
 800bed0:	440b      	add	r3, r1
 800bed2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	689a      	ldr	r2, [r3, #8]
 800bed8:	491e      	ldr	r1, [pc, #120]	; (800bf54 <inc_lock+0x118>)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	011b      	lsls	r3, r3, #4
 800bede:	440b      	add	r3, r1
 800bee0:	3304      	adds	r3, #4
 800bee2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	695a      	ldr	r2, [r3, #20]
 800bee8:	491a      	ldr	r1, [pc, #104]	; (800bf54 <inc_lock+0x118>)
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	011b      	lsls	r3, r3, #4
 800beee:	440b      	add	r3, r1
 800bef0:	3308      	adds	r3, #8
 800bef2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bef4:	4a17      	ldr	r2, [pc, #92]	; (800bf54 <inc_lock+0x118>)
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	011b      	lsls	r3, r3, #4
 800befa:	4413      	add	r3, r2
 800befc:	330c      	adds	r3, #12
 800befe:	2200      	movs	r2, #0
 800bf00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d009      	beq.n	800bf1c <inc_lock+0xe0>
 800bf08:	4a12      	ldr	r2, [pc, #72]	; (800bf54 <inc_lock+0x118>)
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	011b      	lsls	r3, r3, #4
 800bf0e:	4413      	add	r3, r2
 800bf10:	330c      	adds	r3, #12
 800bf12:	881b      	ldrh	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d001      	beq.n	800bf1c <inc_lock+0xe0>
 800bf18:	2300      	movs	r3, #0
 800bf1a:	e015      	b.n	800bf48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d108      	bne.n	800bf34 <inc_lock+0xf8>
 800bf22:	4a0c      	ldr	r2, [pc, #48]	; (800bf54 <inc_lock+0x118>)
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	011b      	lsls	r3, r3, #4
 800bf28:	4413      	add	r3, r2
 800bf2a:	330c      	adds	r3, #12
 800bf2c:	881b      	ldrh	r3, [r3, #0]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	e001      	b.n	800bf38 <inc_lock+0xfc>
 800bf34:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf38:	4906      	ldr	r1, [pc, #24]	; (800bf54 <inc_lock+0x118>)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	011b      	lsls	r3, r3, #4
 800bf3e:	440b      	add	r3, r1
 800bf40:	330c      	adds	r3, #12
 800bf42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	3301      	adds	r3, #1
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3714      	adds	r7, #20
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	20001364 	.word	0x20001364

0800bf58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	3b01      	subs	r3, #1
 800bf64:	607b      	str	r3, [r7, #4]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2b01      	cmp	r3, #1
 800bf6a:	d825      	bhi.n	800bfb8 <dec_lock+0x60>
		n = Files[i].ctr;
 800bf6c:	4a17      	ldr	r2, [pc, #92]	; (800bfcc <dec_lock+0x74>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	011b      	lsls	r3, r3, #4
 800bf72:	4413      	add	r3, r2
 800bf74:	330c      	adds	r3, #12
 800bf76:	881b      	ldrh	r3, [r3, #0]
 800bf78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bf7a:	89fb      	ldrh	r3, [r7, #14]
 800bf7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf80:	d101      	bne.n	800bf86 <dec_lock+0x2e>
 800bf82:	2300      	movs	r3, #0
 800bf84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bf86:	89fb      	ldrh	r3, [r7, #14]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d002      	beq.n	800bf92 <dec_lock+0x3a>
 800bf8c:	89fb      	ldrh	r3, [r7, #14]
 800bf8e:	3b01      	subs	r3, #1
 800bf90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bf92:	4a0e      	ldr	r2, [pc, #56]	; (800bfcc <dec_lock+0x74>)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	4413      	add	r3, r2
 800bf9a:	330c      	adds	r3, #12
 800bf9c:	89fa      	ldrh	r2, [r7, #14]
 800bf9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bfa0:	89fb      	ldrh	r3, [r7, #14]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d105      	bne.n	800bfb2 <dec_lock+0x5a>
 800bfa6:	4a09      	ldr	r2, [pc, #36]	; (800bfcc <dec_lock+0x74>)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	011b      	lsls	r3, r3, #4
 800bfac:	4413      	add	r3, r2
 800bfae:	2200      	movs	r2, #0
 800bfb0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	737b      	strb	r3, [r7, #13]
 800bfb6:	e001      	b.n	800bfbc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bfb8:	2302      	movs	r3, #2
 800bfba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bfbc:	7b7b      	ldrb	r3, [r7, #13]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	20001364 	.word	0x20001364

0800bfd0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b085      	sub	sp, #20
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bfd8:	2300      	movs	r3, #0
 800bfda:	60fb      	str	r3, [r7, #12]
 800bfdc:	e010      	b.n	800c000 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bfde:	4a0d      	ldr	r2, [pc, #52]	; (800c014 <clear_lock+0x44>)
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	011b      	lsls	r3, r3, #4
 800bfe4:	4413      	add	r3, r2
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d105      	bne.n	800bffa <clear_lock+0x2a>
 800bfee:	4a09      	ldr	r2, [pc, #36]	; (800c014 <clear_lock+0x44>)
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	011b      	lsls	r3, r3, #4
 800bff4:	4413      	add	r3, r2
 800bff6:	2200      	movs	r2, #0
 800bff8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	3301      	adds	r3, #1
 800bffe:	60fb      	str	r3, [r7, #12]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2b01      	cmp	r3, #1
 800c004:	d9eb      	bls.n	800bfde <clear_lock+0xe>
	}
}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	20001364 	.word	0x20001364

0800c018 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c020:	2300      	movs	r3, #0
 800c022:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	78db      	ldrb	r3, [r3, #3]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d034      	beq.n	800c096 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	7858      	ldrb	r0, [r3, #1]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c03c:	2301      	movs	r3, #1
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	f7ff fd40 	bl	800bac4 <disk_write>
 800c044:	4603      	mov	r3, r0
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	73fb      	strb	r3, [r7, #15]
 800c04e:	e022      	b.n	800c096 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6a1b      	ldr	r3, [r3, #32]
 800c05a:	697a      	ldr	r2, [r7, #20]
 800c05c:	1ad2      	subs	r2, r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	699b      	ldr	r3, [r3, #24]
 800c062:	429a      	cmp	r2, r3
 800c064:	d217      	bcs.n	800c096 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	789b      	ldrb	r3, [r3, #2]
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	e010      	b.n	800c090 <sync_window+0x78>
					wsect += fs->fsize;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	4413      	add	r3, r2
 800c076:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	7858      	ldrb	r0, [r3, #1]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c082:	2301      	movs	r3, #1
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	f7ff fd1d 	bl	800bac4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	3b01      	subs	r3, #1
 800c08e:	613b      	str	r3, [r7, #16]
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b01      	cmp	r3, #1
 800c094:	d8eb      	bhi.n	800c06e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c096:	7bfb      	ldrb	r3, [r7, #15]
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3718      	adds	r7, #24
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}

0800c0a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
 800c0a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d01b      	beq.n	800c0f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff ffad 	bl	800c018 <sync_window>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c0c2:	7bfb      	ldrb	r3, [r7, #15]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d113      	bne.n	800c0f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	7858      	ldrb	r0, [r3, #1]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	f7ff fcd5 	bl	800ba84 <disk_read>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d004      	beq.n	800c0ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	683a      	ldr	r2, [r7, #0]
 800c0ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f7ff ff87 	bl	800c018 <sync_window>
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d158      	bne.n	800c1c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	2b03      	cmp	r3, #3
 800c11a:	d148      	bne.n	800c1ae <sync_fs+0xb2>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	791b      	ldrb	r3, [r3, #4]
 800c120:	2b01      	cmp	r3, #1
 800c122:	d144      	bne.n	800c1ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	3330      	adds	r3, #48	; 0x30
 800c128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c12c:	2100      	movs	r1, #0
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fda9 	bl	800bc86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	3330      	adds	r3, #48	; 0x30
 800c138:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c13c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c140:	4618      	mov	r0, r3
 800c142:	f7ff fd38 	bl	800bbb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	3330      	adds	r3, #48	; 0x30
 800c14a:	4921      	ldr	r1, [pc, #132]	; (800c1d0 <sync_fs+0xd4>)
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7ff fd4d 	bl	800bbec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3330      	adds	r3, #48	; 0x30
 800c156:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c15a:	491e      	ldr	r1, [pc, #120]	; (800c1d4 <sync_fs+0xd8>)
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7ff fd45 	bl	800bbec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	3330      	adds	r3, #48	; 0x30
 800c166:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	691b      	ldr	r3, [r3, #16]
 800c16e:	4619      	mov	r1, r3
 800c170:	4610      	mov	r0, r2
 800c172:	f7ff fd3b 	bl	800bbec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3330      	adds	r3, #48	; 0x30
 800c17a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	4619      	mov	r1, r3
 800c184:	4610      	mov	r0, r2
 800c186:	f7ff fd31 	bl	800bbec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	69db      	ldr	r3, [r3, #28]
 800c18e:	1c5a      	adds	r2, r3, #1
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	7858      	ldrb	r0, [r3, #1]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	f7ff fc8e 	bl	800bac4 <disk_write>
			fs->fsi_flag = 0;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	785b      	ldrb	r3, [r3, #1]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7ff fca4 	bl	800bb04 <disk_ioctl>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <sync_fs+0xca>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	41615252 	.word	0x41615252
 800c1d4:	61417272 	.word	0x61417272

0800c1d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	3b02      	subs	r3, #2
 800c1e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	695b      	ldr	r3, [r3, #20]
 800c1ec:	3b02      	subs	r3, #2
 800c1ee:	683a      	ldr	r2, [r7, #0]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	d301      	bcc.n	800c1f8 <clust2sect+0x20>
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	e008      	b.n	800c20a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	895b      	ldrh	r3, [r3, #10]
 800c1fc:	461a      	mov	r2, r3
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	fb03 f202 	mul.w	r2, r3, r2
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c208:	4413      	add	r3, r2
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	370c      	adds	r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr

0800c216 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c216:	b580      	push	{r7, lr}
 800c218:	b086      	sub	sp, #24
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d904      	bls.n	800c236 <get_fat+0x20>
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	695b      	ldr	r3, [r3, #20]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	429a      	cmp	r2, r3
 800c234:	d302      	bcc.n	800c23c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c236:	2301      	movs	r3, #1
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	e08c      	b.n	800c356 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c23c:	f04f 33ff 	mov.w	r3, #4294967295
 800c240:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	2b02      	cmp	r3, #2
 800c248:	d045      	beq.n	800c2d6 <get_fat+0xc0>
 800c24a:	2b03      	cmp	r3, #3
 800c24c:	d05d      	beq.n	800c30a <get_fat+0xf4>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d177      	bne.n	800c342 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	60fb      	str	r3, [r7, #12]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	085b      	lsrs	r3, r3, #1
 800c25a:	68fa      	ldr	r2, [r7, #12]
 800c25c:	4413      	add	r3, r2
 800c25e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	6a1a      	ldr	r2, [r3, #32]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	0a5b      	lsrs	r3, r3, #9
 800c268:	4413      	add	r3, r2
 800c26a:	4619      	mov	r1, r3
 800c26c:	6938      	ldr	r0, [r7, #16]
 800c26e:	f7ff ff17 	bl	800c0a0 <move_window>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d167      	bne.n	800c348 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	60fa      	str	r2, [r7, #12]
 800c27e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c282:	693a      	ldr	r2, [r7, #16]
 800c284:	4413      	add	r3, r2
 800c286:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c28a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	6a1a      	ldr	r2, [r3, #32]
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	0a5b      	lsrs	r3, r3, #9
 800c294:	4413      	add	r3, r2
 800c296:	4619      	mov	r1, r3
 800c298:	6938      	ldr	r0, [r7, #16]
 800c29a:	f7ff ff01 	bl	800c0a0 <move_window>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d153      	bne.n	800c34c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2aa:	693a      	ldr	r2, [r7, #16]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c2b2:	021b      	lsls	r3, r3, #8
 800c2b4:	461a      	mov	r2, r3
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	f003 0301 	and.w	r3, r3, #1
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d002      	beq.n	800c2cc <get_fat+0xb6>
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	091b      	lsrs	r3, r3, #4
 800c2ca:	e002      	b.n	800c2d2 <get_fat+0xbc>
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c2d2:	617b      	str	r3, [r7, #20]
			break;
 800c2d4:	e03f      	b.n	800c356 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	6a1a      	ldr	r2, [r3, #32]
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	0a1b      	lsrs	r3, r3, #8
 800c2de:	4413      	add	r3, r2
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6938      	ldr	r0, [r7, #16]
 800c2e4:	f7ff fedc 	bl	800c0a0 <move_window>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d130      	bne.n	800c350 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	005b      	lsls	r3, r3, #1
 800c2f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c2fc:	4413      	add	r3, r2
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff fc1e 	bl	800bb40 <ld_word>
 800c304:	4603      	mov	r3, r0
 800c306:	617b      	str	r3, [r7, #20]
			break;
 800c308:	e025      	b.n	800c356 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c30a:	693b      	ldr	r3, [r7, #16]
 800c30c:	6a1a      	ldr	r2, [r3, #32]
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	09db      	lsrs	r3, r3, #7
 800c312:	4413      	add	r3, r2
 800c314:	4619      	mov	r1, r3
 800c316:	6938      	ldr	r0, [r7, #16]
 800c318:	f7ff fec2 	bl	800c0a0 <move_window>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d118      	bne.n	800c354 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c330:	4413      	add	r3, r2
 800c332:	4618      	mov	r0, r3
 800c334:	f7ff fc1c 	bl	800bb70 <ld_dword>
 800c338:	4603      	mov	r3, r0
 800c33a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c33e:	617b      	str	r3, [r7, #20]
			break;
 800c340:	e009      	b.n	800c356 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c342:	2301      	movs	r3, #1
 800c344:	617b      	str	r3, [r7, #20]
 800c346:	e006      	b.n	800c356 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c348:	bf00      	nop
 800c34a:	e004      	b.n	800c356 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c34c:	bf00      	nop
 800c34e:	e002      	b.n	800c356 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c350:	bf00      	nop
 800c352:	e000      	b.n	800c356 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c354:	bf00      	nop
		}
	}

	return val;
 800c356:	697b      	ldr	r3, [r7, #20]
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3718      	adds	r7, #24
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c360:	b590      	push	{r4, r7, lr}
 800c362:	b089      	sub	sp, #36	; 0x24
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	60b9      	str	r1, [r7, #8]
 800c36a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c36c:	2302      	movs	r3, #2
 800c36e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	2b01      	cmp	r3, #1
 800c374:	f240 80d6 	bls.w	800c524 <put_fat+0x1c4>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	695b      	ldr	r3, [r3, #20]
 800c37c:	68ba      	ldr	r2, [r7, #8]
 800c37e:	429a      	cmp	r2, r3
 800c380:	f080 80d0 	bcs.w	800c524 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d073      	beq.n	800c474 <put_fat+0x114>
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	f000 8091 	beq.w	800c4b4 <put_fat+0x154>
 800c392:	2b01      	cmp	r3, #1
 800c394:	f040 80c6 	bne.w	800c524 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	61bb      	str	r3, [r7, #24]
 800c39c:	69bb      	ldr	r3, [r7, #24]
 800c39e:	085b      	lsrs	r3, r3, #1
 800c3a0:	69ba      	ldr	r2, [r7, #24]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6a1a      	ldr	r2, [r3, #32]
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	0a5b      	lsrs	r3, r3, #9
 800c3ae:	4413      	add	r3, r2
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	68f8      	ldr	r0, [r7, #12]
 800c3b4:	f7ff fe74 	bl	800c0a0 <move_window>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c3bc:	7ffb      	ldrb	r3, [r7, #31]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	f040 80a9 	bne.w	800c516 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	1c59      	adds	r1, r3, #1
 800c3ce:	61b9      	str	r1, [r7, #24]
 800c3d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3d4:	4413      	add	r3, r2
 800c3d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00d      	beq.n	800c3fe <put_fat+0x9e>
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	b25b      	sxtb	r3, r3
 800c3e8:	f003 030f 	and.w	r3, r3, #15
 800c3ec:	b25a      	sxtb	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	b2db      	uxtb	r3, r3
 800c3f2:	011b      	lsls	r3, r3, #4
 800c3f4:	b25b      	sxtb	r3, r3
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	b25b      	sxtb	r3, r3
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	e001      	b.n	800c402 <put_fat+0xa2>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	b2db      	uxtb	r3, r3
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2201      	movs	r2, #1
 800c40a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6a1a      	ldr	r2, [r3, #32]
 800c410:	69bb      	ldr	r3, [r7, #24]
 800c412:	0a5b      	lsrs	r3, r3, #9
 800c414:	4413      	add	r3, r2
 800c416:	4619      	mov	r1, r3
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f7ff fe41 	bl	800c0a0 <move_window>
 800c41e:	4603      	mov	r3, r0
 800c420:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c422:	7ffb      	ldrb	r3, [r7, #31]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d178      	bne.n	800c51a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c434:	4413      	add	r3, r2
 800c436:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	f003 0301 	and.w	r3, r3, #1
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <put_fat+0xea>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	091b      	lsrs	r3, r3, #4
 800c446:	b2db      	uxtb	r3, r3
 800c448:	e00e      	b.n	800c468 <put_fat+0x108>
 800c44a:	697b      	ldr	r3, [r7, #20]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	b25b      	sxtb	r3, r3
 800c450:	f023 030f 	bic.w	r3, r3, #15
 800c454:	b25a      	sxtb	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	0a1b      	lsrs	r3, r3, #8
 800c45a:	b25b      	sxtb	r3, r3
 800c45c:	f003 030f 	and.w	r3, r3, #15
 800c460:	b25b      	sxtb	r3, r3
 800c462:	4313      	orrs	r3, r2
 800c464:	b25b      	sxtb	r3, r3
 800c466:	b2db      	uxtb	r3, r3
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	70da      	strb	r2, [r3, #3]
			break;
 800c472:	e057      	b.n	800c524 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	6a1a      	ldr	r2, [r3, #32]
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	0a1b      	lsrs	r3, r3, #8
 800c47c:	4413      	add	r3, r2
 800c47e:	4619      	mov	r1, r3
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff fe0d 	bl	800c0a0 <move_window>
 800c486:	4603      	mov	r3, r0
 800c488:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c48a:	7ffb      	ldrb	r3, [r7, #31]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d146      	bne.n	800c51e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c49e:	4413      	add	r3, r2
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	b292      	uxth	r2, r2
 800c4a4:	4611      	mov	r1, r2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff fb85 	bl	800bbb6 <st_word>
			fs->wflag = 1;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	70da      	strb	r2, [r3, #3]
			break;
 800c4b2:	e037      	b.n	800c524 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	6a1a      	ldr	r2, [r3, #32]
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	09db      	lsrs	r3, r3, #7
 800c4bc:	4413      	add	r3, r2
 800c4be:	4619      	mov	r1, r3
 800c4c0:	68f8      	ldr	r0, [r7, #12]
 800c4c2:	f7ff fded 	bl	800c0a0 <move_window>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4ca:	7ffb      	ldrb	r3, [r7, #31]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d128      	bne.n	800c522 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c4e4:	4413      	add	r3, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f7ff fb42 	bl	800bb70 <ld_dword>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4f2:	4323      	orrs	r3, r4
 800c4f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	009b      	lsls	r3, r3, #2
 800c500:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c504:	4413      	add	r3, r2
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	4618      	mov	r0, r3
 800c50a:	f7ff fb6f 	bl	800bbec <st_dword>
			fs->wflag = 1;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2201      	movs	r2, #1
 800c512:	70da      	strb	r2, [r3, #3]
			break;
 800c514:	e006      	b.n	800c524 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c516:	bf00      	nop
 800c518:	e004      	b.n	800c524 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c51a:	bf00      	nop
 800c51c:	e002      	b.n	800c524 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c51e:	bf00      	nop
 800c520:	e000      	b.n	800c524 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800c522:	bf00      	nop
		}
	}
	return res;
 800c524:	7ffb      	ldrb	r3, [r7, #31]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3724      	adds	r7, #36	; 0x24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd90      	pop	{r4, r7, pc}

0800c52e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b088      	sub	sp, #32
 800c532:	af00      	add	r7, sp, #0
 800c534:	60f8      	str	r0, [r7, #12]
 800c536:	60b9      	str	r1, [r7, #8]
 800c538:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d904      	bls.n	800c554 <remove_chain+0x26>
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	695b      	ldr	r3, [r3, #20]
 800c54e:	68ba      	ldr	r2, [r7, #8]
 800c550:	429a      	cmp	r2, r3
 800c552:	d301      	bcc.n	800c558 <remove_chain+0x2a>
 800c554:	2302      	movs	r3, #2
 800c556:	e04b      	b.n	800c5f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00c      	beq.n	800c578 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	69b8      	ldr	r0, [r7, #24]
 800c566:	f7ff fefb 	bl	800c360 <put_fat>
 800c56a:	4603      	mov	r3, r0
 800c56c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c56e:	7ffb      	ldrb	r3, [r7, #31]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d001      	beq.n	800c578 <remove_chain+0x4a>
 800c574:	7ffb      	ldrb	r3, [r7, #31]
 800c576:	e03b      	b.n	800c5f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c578:	68b9      	ldr	r1, [r7, #8]
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f7ff fe4b 	bl	800c216 <get_fat>
 800c580:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d031      	beq.n	800c5ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	d101      	bne.n	800c592 <remove_chain+0x64>
 800c58e:	2302      	movs	r3, #2
 800c590:	e02e      	b.n	800c5f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c598:	d101      	bne.n	800c59e <remove_chain+0x70>
 800c59a:	2301      	movs	r3, #1
 800c59c:	e028      	b.n	800c5f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c59e:	2200      	movs	r2, #0
 800c5a0:	68b9      	ldr	r1, [r7, #8]
 800c5a2:	69b8      	ldr	r0, [r7, #24]
 800c5a4:	f7ff fedc 	bl	800c360 <put_fat>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c5ac:	7ffb      	ldrb	r3, [r7, #31]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d001      	beq.n	800c5b6 <remove_chain+0x88>
 800c5b2:	7ffb      	ldrb	r3, [r7, #31]
 800c5b4:	e01c      	b.n	800c5f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	691a      	ldr	r2, [r3, #16]
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	3b02      	subs	r3, #2
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d20b      	bcs.n	800c5dc <remove_chain+0xae>
			fs->free_clst++;
 800c5c4:	69bb      	ldr	r3, [r7, #24]
 800c5c6:	691b      	ldr	r3, [r3, #16]
 800c5c8:	1c5a      	adds	r2, r3, #1
 800c5ca:	69bb      	ldr	r3, [r7, #24]
 800c5cc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	791b      	ldrb	r3, [r3, #4]
 800c5d2:	f043 0301 	orr.w	r3, r3, #1
 800c5d6:	b2da      	uxtb	r2, r3
 800c5d8:	69bb      	ldr	r3, [r7, #24]
 800c5da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c5e0:	69bb      	ldr	r3, [r7, #24]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d3c6      	bcc.n	800c578 <remove_chain+0x4a>
 800c5ea:	e000      	b.n	800c5ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c5ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c5ee:	2300      	movs	r3, #0
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3720      	adds	r7, #32
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d10d      	bne.n	800c62a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c614:	69bb      	ldr	r3, [r7, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d004      	beq.n	800c624 <create_chain+0x2c>
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	695b      	ldr	r3, [r3, #20]
 800c61e:	69ba      	ldr	r2, [r7, #24]
 800c620:	429a      	cmp	r2, r3
 800c622:	d31b      	bcc.n	800c65c <create_chain+0x64>
 800c624:	2301      	movs	r3, #1
 800c626:	61bb      	str	r3, [r7, #24]
 800c628:	e018      	b.n	800c65c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c62a:	6839      	ldr	r1, [r7, #0]
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	f7ff fdf2 	bl	800c216 <get_fat>
 800c632:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d801      	bhi.n	800c63e <create_chain+0x46>
 800c63a:	2301      	movs	r3, #1
 800c63c:	e070      	b.n	800c720 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c644:	d101      	bne.n	800c64a <create_chain+0x52>
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	e06a      	b.n	800c720 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	429a      	cmp	r2, r3
 800c652:	d201      	bcs.n	800c658 <create_chain+0x60>
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	e063      	b.n	800c720 <create_chain+0x128>
		scl = clst;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c65c:	69bb      	ldr	r3, [r7, #24]
 800c65e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c660:	69fb      	ldr	r3, [r7, #28]
 800c662:	3301      	adds	r3, #1
 800c664:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	69fa      	ldr	r2, [r7, #28]
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d307      	bcc.n	800c680 <create_chain+0x88>
				ncl = 2;
 800c670:	2302      	movs	r3, #2
 800c672:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c674:	69fa      	ldr	r2, [r7, #28]
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d901      	bls.n	800c680 <create_chain+0x88>
 800c67c:	2300      	movs	r3, #0
 800c67e:	e04f      	b.n	800c720 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c680:	69f9      	ldr	r1, [r7, #28]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f7ff fdc7 	bl	800c216 <get_fat>
 800c688:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d00e      	beq.n	800c6ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b01      	cmp	r3, #1
 800c694:	d003      	beq.n	800c69e <create_chain+0xa6>
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69c:	d101      	bne.n	800c6a2 <create_chain+0xaa>
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	e03e      	b.n	800c720 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c6a2:	69fa      	ldr	r2, [r7, #28]
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d1da      	bne.n	800c660 <create_chain+0x68>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	e038      	b.n	800c720 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c6ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6b4:	69f9      	ldr	r1, [r7, #28]
 800c6b6:	6938      	ldr	r0, [r7, #16]
 800c6b8:	f7ff fe52 	bl	800c360 <put_fat>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <create_chain+0xe2>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d006      	beq.n	800c6da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c6cc:	69fa      	ldr	r2, [r7, #28]
 800c6ce:	6839      	ldr	r1, [r7, #0]
 800c6d0:	6938      	ldr	r0, [r7, #16]
 800c6d2:	f7ff fe45 	bl	800c360 <put_fat>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d116      	bne.n	800c70e <create_chain+0x116>
		fs->last_clst = ncl;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	69fa      	ldr	r2, [r7, #28]
 800c6e4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	691a      	ldr	r2, [r3, #16]
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	695b      	ldr	r3, [r3, #20]
 800c6ee:	3b02      	subs	r3, #2
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d804      	bhi.n	800c6fe <create_chain+0x106>
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	1e5a      	subs	r2, r3, #1
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	791b      	ldrb	r3, [r3, #4]
 800c702:	f043 0301 	orr.w	r3, r3, #1
 800c706:	b2da      	uxtb	r2, r3
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	711a      	strb	r2, [r3, #4]
 800c70c:	e007      	b.n	800c71e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c70e:	7dfb      	ldrb	r3, [r7, #23]
 800c710:	2b01      	cmp	r3, #1
 800c712:	d102      	bne.n	800c71a <create_chain+0x122>
 800c714:	f04f 33ff 	mov.w	r3, #4294967295
 800c718:	e000      	b.n	800c71c <create_chain+0x124>
 800c71a:	2301      	movs	r3, #1
 800c71c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c71e:	69fb      	ldr	r3, [r7, #28]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3720      	adds	r7, #32
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}

0800c728 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c728:	b480      	push	{r7}
 800c72a:	b087      	sub	sp, #28
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73c:	3304      	adds	r3, #4
 800c73e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	0a5b      	lsrs	r3, r3, #9
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	8952      	ldrh	r2, [r2, #10]
 800c748:	fbb3 f3f2 	udiv	r3, r3, r2
 800c74c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	1d1a      	adds	r2, r3, #4
 800c752:	613a      	str	r2, [r7, #16]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <clmt_clust+0x3a>
 800c75e:	2300      	movs	r3, #0
 800c760:	e010      	b.n	800c784 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	429a      	cmp	r2, r3
 800c768:	d307      	bcc.n	800c77a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	1ad3      	subs	r3, r2, r3
 800c770:	617b      	str	r3, [r7, #20]
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	3304      	adds	r3, #4
 800c776:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c778:	e7e9      	b.n	800c74e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c77a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	681a      	ldr	r2, [r3, #0]
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	4413      	add	r3, r2
}
 800c784:	4618      	mov	r0, r3
 800c786:	371c      	adds	r7, #28
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b086      	sub	sp, #24
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c7a6:	d204      	bcs.n	800c7b2 <dir_sdi+0x22>
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	f003 031f 	and.w	r3, r3, #31
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d001      	beq.n	800c7b6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	e063      	b.n	800c87e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c7c2:	697b      	ldr	r3, [r7, #20]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d106      	bne.n	800c7d6 <dir_sdi+0x46>
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d902      	bls.n	800c7d6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7d4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10c      	bne.n	800c7f6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	095b      	lsrs	r3, r3, #5
 800c7e0:	693a      	ldr	r2, [r7, #16]
 800c7e2:	8912      	ldrh	r2, [r2, #8]
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d301      	bcc.n	800c7ec <dir_sdi+0x5c>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e048      	b.n	800c87e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	61da      	str	r2, [r3, #28]
 800c7f4:	e029      	b.n	800c84a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	895b      	ldrh	r3, [r3, #10]
 800c7fa:	025b      	lsls	r3, r3, #9
 800c7fc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c7fe:	e019      	b.n	800c834 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6979      	ldr	r1, [r7, #20]
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff fd06 	bl	800c216 <get_fat>
 800c80a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c812:	d101      	bne.n	800c818 <dir_sdi+0x88>
 800c814:	2301      	movs	r3, #1
 800c816:	e032      	b.n	800c87e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d904      	bls.n	800c828 <dir_sdi+0x98>
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	695b      	ldr	r3, [r3, #20]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	429a      	cmp	r2, r3
 800c826:	d301      	bcc.n	800c82c <dir_sdi+0x9c>
 800c828:	2302      	movs	r3, #2
 800c82a:	e028      	b.n	800c87e <dir_sdi+0xee>
			ofs -= csz;
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c834:	683a      	ldr	r2, [r7, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	429a      	cmp	r2, r3
 800c83a:	d2e1      	bcs.n	800c800 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c83c:	6979      	ldr	r1, [r7, #20]
 800c83e:	6938      	ldr	r0, [r7, #16]
 800c840:	f7ff fcca 	bl	800c1d8 <clust2sect>
 800c844:	4602      	mov	r2, r0
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	69db      	ldr	r3, [r3, #28]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d101      	bne.n	800c85c <dir_sdi+0xcc>
 800c858:	2302      	movs	r3, #2
 800c85a:	e010      	b.n	800c87e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	69da      	ldr	r2, [r3, #28]
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	0a5b      	lsrs	r3, r3, #9
 800c864:	441a      	add	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c876:	441a      	add	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}

0800c886 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c886:	b580      	push	{r7, lr}
 800c888:	b086      	sub	sp, #24
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	6078      	str	r0, [r7, #4]
 800c88e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	695b      	ldr	r3, [r3, #20]
 800c89a:	3320      	adds	r3, #32
 800c89c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	69db      	ldr	r3, [r3, #28]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d003      	beq.n	800c8ae <dir_next+0x28>
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c8ac:	d301      	bcc.n	800c8b2 <dir_next+0x2c>
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	e0aa      	b.n	800ca08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f040 8098 	bne.w	800c9ee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	69db      	ldr	r3, [r3, #28]
 800c8c2:	1c5a      	adds	r2, r3, #1
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10b      	bne.n	800c8e8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	095b      	lsrs	r3, r3, #5
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	8912      	ldrh	r2, [r2, #8]
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	f0c0 8088 	bcc.w	800c9ee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	61da      	str	r2, [r3, #28]
 800c8e4:	2304      	movs	r3, #4
 800c8e6:	e08f      	b.n	800ca08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	0a5b      	lsrs	r3, r3, #9
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	8952      	ldrh	r2, [r2, #10]
 800c8f0:	3a01      	subs	r2, #1
 800c8f2:	4013      	ands	r3, r2
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d17a      	bne.n	800c9ee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	4619      	mov	r1, r3
 800c900:	4610      	mov	r0, r2
 800c902:	f7ff fc88 	bl	800c216 <get_fat>
 800c906:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c908:	697b      	ldr	r3, [r7, #20]
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d801      	bhi.n	800c912 <dir_next+0x8c>
 800c90e:	2302      	movs	r3, #2
 800c910:	e07a      	b.n	800ca08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c918:	d101      	bne.n	800c91e <dir_next+0x98>
 800c91a:	2301      	movs	r3, #1
 800c91c:	e074      	b.n	800ca08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	695b      	ldr	r3, [r3, #20]
 800c922:	697a      	ldr	r2, [r7, #20]
 800c924:	429a      	cmp	r2, r3
 800c926:	d358      	bcc.n	800c9da <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d104      	bne.n	800c938 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	61da      	str	r2, [r3, #28]
 800c934:	2304      	movs	r3, #4
 800c936:	e067      	b.n	800ca08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7ff fe59 	bl	800c5f8 <create_chain>
 800c946:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d101      	bne.n	800c952 <dir_next+0xcc>
 800c94e:	2307      	movs	r3, #7
 800c950:	e05a      	b.n	800ca08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c952:	697b      	ldr	r3, [r7, #20]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d101      	bne.n	800c95c <dir_next+0xd6>
 800c958:	2302      	movs	r3, #2
 800c95a:	e055      	b.n	800ca08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c962:	d101      	bne.n	800c968 <dir_next+0xe2>
 800c964:	2301      	movs	r3, #1
 800c966:	e04f      	b.n	800ca08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c968:	68f8      	ldr	r0, [r7, #12]
 800c96a:	f7ff fb55 	bl	800c018 <sync_window>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	d001      	beq.n	800c978 <dir_next+0xf2>
 800c974:	2301      	movs	r3, #1
 800c976:	e047      	b.n	800ca08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	3330      	adds	r3, #48	; 0x30
 800c97c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c980:	2100      	movs	r1, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f7ff f97f 	bl	800bc86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c988:	2300      	movs	r3, #0
 800c98a:	613b      	str	r3, [r7, #16]
 800c98c:	6979      	ldr	r1, [r7, #20]
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f7ff fc22 	bl	800c1d8 <clust2sect>
 800c994:	4602      	mov	r2, r0
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	62da      	str	r2, [r3, #44]	; 0x2c
 800c99a:	e012      	b.n	800c9c2 <dir_next+0x13c>
						fs->wflag = 1;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7ff fb38 	bl	800c018 <sync_window>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <dir_next+0x12c>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e02a      	b.n	800ca08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	613b      	str	r3, [r7, #16]
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9bc:	1c5a      	adds	r2, r3, #1
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	895b      	ldrh	r3, [r3, #10]
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d3e6      	bcc.n	800c99c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	1ad2      	subs	r2, r2, r3
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c9e0:	6979      	ldr	r1, [r7, #20]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	f7ff fbf8 	bl	800c1d8 <clust2sect>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca00:	441a      	add	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca06:	2300      	movs	r3, #0
}
 800ca08:	4618      	mov	r0, r3
 800ca0a:	3718      	adds	r7, #24
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ca20:	2100      	movs	r1, #0
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7ff feb4 	bl	800c790 <dir_sdi>
 800ca28:	4603      	mov	r3, r0
 800ca2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ca2c:	7dfb      	ldrb	r3, [r7, #23]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d12b      	bne.n	800ca8a <dir_alloc+0x7a>
		n = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	69db      	ldr	r3, [r3, #28]
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f7ff fb2f 	bl	800c0a0 <move_window>
 800ca42:	4603      	mov	r3, r0
 800ca44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d11d      	bne.n	800ca88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6a1b      	ldr	r3, [r3, #32]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	2be5      	cmp	r3, #229	; 0xe5
 800ca54:	d004      	beq.n	800ca60 <dir_alloc+0x50>
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d107      	bne.n	800ca70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	3301      	adds	r3, #1
 800ca64:	613b      	str	r3, [r7, #16]
 800ca66:	693a      	ldr	r2, [r7, #16]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d102      	bne.n	800ca74 <dir_alloc+0x64>
 800ca6e:	e00c      	b.n	800ca8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ca70:	2300      	movs	r3, #0
 800ca72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ca74:	2101      	movs	r1, #1
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7ff ff05 	bl	800c886 <dir_next>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d0d7      	beq.n	800ca36 <dir_alloc+0x26>
 800ca86:	e000      	b.n	800ca8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ca88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
 800ca8c:	2b04      	cmp	r3, #4
 800ca8e:	d101      	bne.n	800ca94 <dir_alloc+0x84>
 800ca90:	2307      	movs	r3, #7
 800ca92:	75fb      	strb	r3, [r7, #23]
	return res;
 800ca94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3718      	adds	r7, #24
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ca9e:	b580      	push	{r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6078      	str	r0, [r7, #4]
 800caa6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	331a      	adds	r3, #26
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff f847 	bl	800bb40 <ld_word>
 800cab2:	4603      	mov	r3, r0
 800cab4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	2b03      	cmp	r3, #3
 800cabc:	d109      	bne.n	800cad2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	3314      	adds	r3, #20
 800cac2:	4618      	mov	r0, r3
 800cac4:	f7ff f83c 	bl	800bb40 <ld_word>
 800cac8:	4603      	mov	r3, r0
 800caca:	041b      	lsls	r3, r3, #16
 800cacc:	68fa      	ldr	r2, [r7, #12]
 800cace:	4313      	orrs	r3, r2
 800cad0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cad2:	68fb      	ldr	r3, [r7, #12]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	331a      	adds	r3, #26
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	b292      	uxth	r2, r2
 800caf0:	4611      	mov	r1, r2
 800caf2:	4618      	mov	r0, r3
 800caf4:	f7ff f85f 	bl	800bbb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	2b03      	cmp	r3, #3
 800cafe:	d109      	bne.n	800cb14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	f103 0214 	add.w	r2, r3, #20
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	0c1b      	lsrs	r3, r3, #16
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	4610      	mov	r0, r2
 800cb10:	f7ff f851 	bl	800bbb6 <st_word>
	}
}
 800cb14:	bf00      	nop
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b086      	sub	sp, #24
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f7ff fe2f 	bl	800c790 <dir_sdi>
 800cb32:	4603      	mov	r3, r0
 800cb34:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cb36:	7dfb      	ldrb	r3, [r7, #23]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <dir_find+0x24>
 800cb3c:	7dfb      	ldrb	r3, [r7, #23]
 800cb3e:	e03e      	b.n	800cbbe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	69db      	ldr	r3, [r3, #28]
 800cb44:	4619      	mov	r1, r3
 800cb46:	6938      	ldr	r0, [r7, #16]
 800cb48:	f7ff faaa 	bl	800c0a0 <move_window>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800cb50:	7dfb      	ldrb	r3, [r7, #23]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d12f      	bne.n	800cbb6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cb5e:	7bfb      	ldrb	r3, [r7, #15]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d102      	bne.n	800cb6a <dir_find+0x4e>
 800cb64:	2304      	movs	r3, #4
 800cb66:	75fb      	strb	r3, [r7, #23]
 800cb68:	e028      	b.n	800cbbc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	330b      	adds	r3, #11
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a1b      	ldr	r3, [r3, #32]
 800cb80:	330b      	adds	r3, #11
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	f003 0308 	and.w	r3, r3, #8
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d10a      	bne.n	800cba2 <dir_find+0x86>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6a18      	ldr	r0, [r3, #32]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	3324      	adds	r3, #36	; 0x24
 800cb94:	220b      	movs	r2, #11
 800cb96:	4619      	mov	r1, r3
 800cb98:	f7ff f88f 	bl	800bcba <mem_cmp>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00b      	beq.n	800cbba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cba2:	2100      	movs	r1, #0
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	f7ff fe6e 	bl	800c886 <dir_next>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cbae:	7dfb      	ldrb	r3, [r7, #23]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d0c5      	beq.n	800cb40 <dir_find+0x24>
 800cbb4:	e002      	b.n	800cbbc <dir_find+0xa0>
		if (res != FR_OK) break;
 800cbb6:	bf00      	nop
 800cbb8:	e000      	b.n	800cbbc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cbba:	bf00      	nop

	return res;
 800cbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3718      	adds	r7, #24
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b084      	sub	sp, #16
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800cbd4:	2101      	movs	r1, #1
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff ff1a 	bl	800ca10 <dir_alloc>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800cbe0:	7bfb      	ldrb	r3, [r7, #15]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d11c      	bne.n	800cc20 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	69db      	ldr	r3, [r3, #28]
 800cbea:	4619      	mov	r1, r3
 800cbec:	68b8      	ldr	r0, [r7, #8]
 800cbee:	f7ff fa57 	bl	800c0a0 <move_window>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cbf6:	7bfb      	ldrb	r3, [r7, #15]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d111      	bne.n	800cc20 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6a1b      	ldr	r3, [r3, #32]
 800cc00:	2220      	movs	r2, #32
 800cc02:	2100      	movs	r1, #0
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff f83e 	bl	800bc86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a18      	ldr	r0, [r3, #32]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	3324      	adds	r3, #36	; 0x24
 800cc12:	220b      	movs	r2, #11
 800cc14:	4619      	mov	r1, r3
 800cc16:	f7ff f815 	bl	800bc44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800cc1a:	68bb      	ldr	r3, [r7, #8]
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cc20:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3324      	adds	r3, #36	; 0x24
 800cc40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cc42:	220b      	movs	r2, #11
 800cc44:	2120      	movs	r1, #32
 800cc46:	68b8      	ldr	r0, [r7, #8]
 800cc48:	f7ff f81d 	bl	800bc86 <mem_set>
	si = i = 0; ni = 8;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	613b      	str	r3, [r7, #16]
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	617b      	str	r3, [r7, #20]
 800cc54:	2308      	movs	r3, #8
 800cc56:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	617a      	str	r2, [r7, #20]
 800cc5e:	68fa      	ldr	r2, [r7, #12]
 800cc60:	4413      	add	r3, r2
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cc66:	7ffb      	ldrb	r3, [r7, #31]
 800cc68:	2b20      	cmp	r3, #32
 800cc6a:	d94e      	bls.n	800cd0a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cc6c:	7ffb      	ldrb	r3, [r7, #31]
 800cc6e:	2b2f      	cmp	r3, #47	; 0x2f
 800cc70:	d006      	beq.n	800cc80 <create_name+0x54>
 800cc72:	7ffb      	ldrb	r3, [r7, #31]
 800cc74:	2b5c      	cmp	r3, #92	; 0x5c
 800cc76:	d110      	bne.n	800cc9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cc78:	e002      	b.n	800cc80 <create_name+0x54>
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	617b      	str	r3, [r7, #20]
 800cc80:	68fa      	ldr	r2, [r7, #12]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	4413      	add	r3, r2
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	2b2f      	cmp	r3, #47	; 0x2f
 800cc8a:	d0f6      	beq.n	800cc7a <create_name+0x4e>
 800cc8c:	68fa      	ldr	r2, [r7, #12]
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	4413      	add	r3, r2
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b5c      	cmp	r3, #92	; 0x5c
 800cc96:	d0f0      	beq.n	800cc7a <create_name+0x4e>
			break;
 800cc98:	e038      	b.n	800cd0c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cc9a:	7ffb      	ldrb	r3, [r7, #31]
 800cc9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc9e:	d003      	beq.n	800cca8 <create_name+0x7c>
 800cca0:	693a      	ldr	r2, [r7, #16]
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d30c      	bcc.n	800ccc2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cca8:	69bb      	ldr	r3, [r7, #24]
 800ccaa:	2b0b      	cmp	r3, #11
 800ccac:	d002      	beq.n	800ccb4 <create_name+0x88>
 800ccae:	7ffb      	ldrb	r3, [r7, #31]
 800ccb0:	2b2e      	cmp	r3, #46	; 0x2e
 800ccb2:	d001      	beq.n	800ccb8 <create_name+0x8c>
 800ccb4:	2306      	movs	r3, #6
 800ccb6:	e044      	b.n	800cd42 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ccb8:	2308      	movs	r3, #8
 800ccba:	613b      	str	r3, [r7, #16]
 800ccbc:	230b      	movs	r3, #11
 800ccbe:	61bb      	str	r3, [r7, #24]
			continue;
 800ccc0:	e022      	b.n	800cd08 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ccc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	da04      	bge.n	800ccd4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	3b80      	subs	r3, #128	; 0x80
 800ccce:	4a1f      	ldr	r2, [pc, #124]	; (800cd4c <create_name+0x120>)
 800ccd0:	5cd3      	ldrb	r3, [r2, r3]
 800ccd2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ccd4:	7ffb      	ldrb	r3, [r7, #31]
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	481d      	ldr	r0, [pc, #116]	; (800cd50 <create_name+0x124>)
 800ccda:	f7ff f815 	bl	800bd08 <chk_chr>
 800ccde:	4603      	mov	r3, r0
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d001      	beq.n	800cce8 <create_name+0xbc>
 800cce4:	2306      	movs	r3, #6
 800cce6:	e02c      	b.n	800cd42 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cce8:	7ffb      	ldrb	r3, [r7, #31]
 800ccea:	2b60      	cmp	r3, #96	; 0x60
 800ccec:	d905      	bls.n	800ccfa <create_name+0xce>
 800ccee:	7ffb      	ldrb	r3, [r7, #31]
 800ccf0:	2b7a      	cmp	r3, #122	; 0x7a
 800ccf2:	d802      	bhi.n	800ccfa <create_name+0xce>
 800ccf4:	7ffb      	ldrb	r3, [r7, #31]
 800ccf6:	3b20      	subs	r3, #32
 800ccf8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	1c5a      	adds	r2, r3, #1
 800ccfe:	613a      	str	r2, [r7, #16]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	4413      	add	r3, r2
 800cd04:	7ffa      	ldrb	r2, [r7, #31]
 800cd06:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cd08:	e7a6      	b.n	800cc58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cd0a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cd0c:	68fa      	ldr	r2, [r7, #12]
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	441a      	add	r2, r3
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <create_name+0xf4>
 800cd1c:	2306      	movs	r3, #6
 800cd1e:	e010      	b.n	800cd42 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	781b      	ldrb	r3, [r3, #0]
 800cd24:	2be5      	cmp	r3, #229	; 0xe5
 800cd26:	d102      	bne.n	800cd2e <create_name+0x102>
 800cd28:	68bb      	ldr	r3, [r7, #8]
 800cd2a:	2205      	movs	r2, #5
 800cd2c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cd2e:	7ffb      	ldrb	r3, [r7, #31]
 800cd30:	2b20      	cmp	r3, #32
 800cd32:	d801      	bhi.n	800cd38 <create_name+0x10c>
 800cd34:	2204      	movs	r2, #4
 800cd36:	e000      	b.n	800cd3a <create_name+0x10e>
 800cd38:	2200      	movs	r2, #0
 800cd3a:	68bb      	ldr	r3, [r7, #8]
 800cd3c:	330b      	adds	r3, #11
 800cd3e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cd40:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3720      	adds	r7, #32
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	0800f14c 	.word	0x0800f14c
 800cd50:	0800f074 	.word	0x0800f074

0800cd54 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cd62:	693b      	ldr	r3, [r7, #16]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cd68:	e002      	b.n	800cd70 <follow_path+0x1c>
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	3301      	adds	r3, #1
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	2b2f      	cmp	r3, #47	; 0x2f
 800cd76:	d0f8      	beq.n	800cd6a <follow_path+0x16>
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	2b5c      	cmp	r3, #92	; 0x5c
 800cd7e:	d0f4      	beq.n	800cd6a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	2200      	movs	r2, #0
 800cd84:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	2b1f      	cmp	r3, #31
 800cd8c:	d80a      	bhi.n	800cda4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2280      	movs	r2, #128	; 0x80
 800cd92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cd96:	2100      	movs	r1, #0
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff fcf9 	bl	800c790 <dir_sdi>
 800cd9e:	4603      	mov	r3, r0
 800cda0:	75fb      	strb	r3, [r7, #23]
 800cda2:	e043      	b.n	800ce2c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cda4:	463b      	mov	r3, r7
 800cda6:	4619      	mov	r1, r3
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f7ff ff3f 	bl	800cc2c <create_name>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cdb2:	7dfb      	ldrb	r3, [r7, #23]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d134      	bne.n	800ce22 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7ff feaf 	bl	800cb1c <dir_find>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cdc8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cdca:	7dfb      	ldrb	r3, [r7, #23]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d00a      	beq.n	800cde6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cdd0:	7dfb      	ldrb	r3, [r7, #23]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d127      	bne.n	800ce26 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cdd6:	7afb      	ldrb	r3, [r7, #11]
 800cdd8:	f003 0304 	and.w	r3, r3, #4
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d122      	bne.n	800ce26 <follow_path+0xd2>
 800cde0:	2305      	movs	r3, #5
 800cde2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cde4:	e01f      	b.n	800ce26 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cde6:	7afb      	ldrb	r3, [r7, #11]
 800cde8:	f003 0304 	and.w	r3, r3, #4
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d11c      	bne.n	800ce2a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	799b      	ldrb	r3, [r3, #6]
 800cdf4:	f003 0310 	and.w	r3, r3, #16
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d102      	bne.n	800ce02 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cdfc:	2305      	movs	r3, #5
 800cdfe:	75fb      	strb	r3, [r7, #23]
 800ce00:	e014      	b.n	800ce2c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce10:	4413      	add	r3, r2
 800ce12:	4619      	mov	r1, r3
 800ce14:	68f8      	ldr	r0, [r7, #12]
 800ce16:	f7ff fe42 	bl	800ca9e <ld_clust>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ce20:	e7c0      	b.n	800cda4 <follow_path+0x50>
			if (res != FR_OK) break;
 800ce22:	bf00      	nop
 800ce24:	e002      	b.n	800ce2c <follow_path+0xd8>
				break;
 800ce26:	bf00      	nop
 800ce28:	e000      	b.n	800ce2c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ce2a:	bf00      	nop
			}
		}
	}

	return res;
 800ce2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3718      	adds	r7, #24
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ce36:	b480      	push	{r7}
 800ce38:	b087      	sub	sp, #28
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ce3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce42:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d031      	beq.n	800ceb0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	617b      	str	r3, [r7, #20]
 800ce52:	e002      	b.n	800ce5a <get_ldnumber+0x24>
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	3301      	adds	r3, #1
 800ce58:	617b      	str	r3, [r7, #20]
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	2b20      	cmp	r3, #32
 800ce60:	d903      	bls.n	800ce6a <get_ldnumber+0x34>
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	2b3a      	cmp	r3, #58	; 0x3a
 800ce68:	d1f4      	bne.n	800ce54 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	2b3a      	cmp	r3, #58	; 0x3a
 800ce70:	d11c      	bne.n	800ceac <get_ldnumber+0x76>
			tp = *path;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	1c5a      	adds	r2, r3, #1
 800ce7c:	60fa      	str	r2, [r7, #12]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	3b30      	subs	r3, #48	; 0x30
 800ce82:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ce84:	68bb      	ldr	r3, [r7, #8]
 800ce86:	2b09      	cmp	r3, #9
 800ce88:	d80e      	bhi.n	800cea8 <get_ldnumber+0x72>
 800ce8a:	68fa      	ldr	r2, [r7, #12]
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	429a      	cmp	r2, r3
 800ce90:	d10a      	bne.n	800cea8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d107      	bne.n	800cea8 <get_ldnumber+0x72>
					vol = (int)i;
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	697a      	ldr	r2, [r7, #20]
 800cea6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	e002      	b.n	800ceb2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ceac:	2300      	movs	r3, #0
 800ceae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ceb0:	693b      	ldr	r3, [r7, #16]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
	...

0800cec0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	70da      	strb	r2, [r3, #3]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f04f 32ff 	mov.w	r2, #4294967295
 800ced6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ced8:	6839      	ldr	r1, [r7, #0]
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f7ff f8e0 	bl	800c0a0 <move_window>
 800cee0:	4603      	mov	r3, r0
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d001      	beq.n	800ceea <check_fs+0x2a>
 800cee6:	2304      	movs	r3, #4
 800cee8:	e038      	b.n	800cf5c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3330      	adds	r3, #48	; 0x30
 800ceee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cef2:	4618      	mov	r0, r3
 800cef4:	f7fe fe24 	bl	800bb40 <ld_word>
 800cef8:	4603      	mov	r3, r0
 800cefa:	461a      	mov	r2, r3
 800cefc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cf00:	429a      	cmp	r2, r3
 800cf02:	d001      	beq.n	800cf08 <check_fs+0x48>
 800cf04:	2303      	movs	r3, #3
 800cf06:	e029      	b.n	800cf5c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf0e:	2be9      	cmp	r3, #233	; 0xe9
 800cf10:	d009      	beq.n	800cf26 <check_fs+0x66>
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf18:	2beb      	cmp	r3, #235	; 0xeb
 800cf1a:	d11e      	bne.n	800cf5a <check_fs+0x9a>
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800cf22:	2b90      	cmp	r3, #144	; 0x90
 800cf24:	d119      	bne.n	800cf5a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	3330      	adds	r3, #48	; 0x30
 800cf2a:	3336      	adds	r3, #54	; 0x36
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe fe1f 	bl	800bb70 <ld_dword>
 800cf32:	4603      	mov	r3, r0
 800cf34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cf38:	4a0a      	ldr	r2, [pc, #40]	; (800cf64 <check_fs+0xa4>)
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	d101      	bne.n	800cf42 <check_fs+0x82>
 800cf3e:	2300      	movs	r3, #0
 800cf40:	e00c      	b.n	800cf5c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3330      	adds	r3, #48	; 0x30
 800cf46:	3352      	adds	r3, #82	; 0x52
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7fe fe11 	bl	800bb70 <ld_dword>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <check_fs+0xa8>)
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d101      	bne.n	800cf5a <check_fs+0x9a>
 800cf56:	2300      	movs	r3, #0
 800cf58:	e000      	b.n	800cf5c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800cf5a:	2302      	movs	r3, #2
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3708      	adds	r7, #8
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}
 800cf64:	00544146 	.word	0x00544146
 800cf68:	33544146 	.word	0x33544146

0800cf6c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b096      	sub	sp, #88	; 0x58
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	60b9      	str	r1, [r7, #8]
 800cf76:	4613      	mov	r3, r2
 800cf78:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f7ff ff58 	bl	800ce36 <get_ldnumber>
 800cf86:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	da01      	bge.n	800cf92 <find_volume+0x26>
 800cf8e:	230b      	movs	r3, #11
 800cf90:	e22e      	b.n	800d3f0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800cf92:	4aa8      	ldr	r2, [pc, #672]	; (800d234 <find_volume+0x2c8>)
 800cf94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf9a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <find_volume+0x3a>
 800cfa2:	230c      	movs	r3, #12
 800cfa4:	e224      	b.n	800d3f0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfaa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	f023 0301 	bic.w	r3, r3, #1
 800cfb2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800cfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d01a      	beq.n	800cff2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbe:	785b      	ldrb	r3, [r3, #1]
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7fe fd1f 	bl	800ba04 <disk_status>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800cfcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10c      	bne.n	800cff2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800cfd8:	79fb      	ldrb	r3, [r7, #7]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d007      	beq.n	800cfee <find_volume+0x82>
 800cfde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cfe2:	f003 0304 	and.w	r3, r3, #4
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d001      	beq.n	800cfee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800cfea:	230a      	movs	r3, #10
 800cfec:	e200      	b.n	800d3f0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800cfee:	2300      	movs	r3, #0
 800cff0:	e1fe      	b.n	800d3f0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cff4:	2200      	movs	r2, #0
 800cff6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffa:	b2da      	uxtb	r2, r3
 800cffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cffe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	785b      	ldrb	r3, [r3, #1]
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fd17 	bl	800ba38 <disk_initialize>
 800d00a:	4603      	mov	r3, r0
 800d00c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d010:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d014:	f003 0301 	and.w	r3, r3, #1
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d001      	beq.n	800d020 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d01c:	2303      	movs	r3, #3
 800d01e:	e1e7      	b.n	800d3f0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d007      	beq.n	800d036 <find_volume+0xca>
 800d026:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d02a:	f003 0304 	and.w	r3, r3, #4
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d032:	230a      	movs	r3, #10
 800d034:	e1dc      	b.n	800d3f0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d036:	2300      	movs	r3, #0
 800d038:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d03a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d03c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d03e:	f7ff ff3f 	bl	800cec0 <check_fs>
 800d042:	4603      	mov	r3, r0
 800d044:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d048:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d14b      	bne.n	800d0e8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d050:	2300      	movs	r3, #0
 800d052:	643b      	str	r3, [r7, #64]	; 0x40
 800d054:	e01f      	b.n	800d096 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d05c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d05e:	011b      	lsls	r3, r3, #4
 800d060:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d064:	4413      	add	r3, r2
 800d066:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	3304      	adds	r3, #4
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d006      	beq.n	800d080 <find_volume+0x114>
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	3308      	adds	r3, #8
 800d076:	4618      	mov	r0, r3
 800d078:	f7fe fd7a 	bl	800bb70 <ld_dword>
 800d07c:	4602      	mov	r2, r0
 800d07e:	e000      	b.n	800d082 <find_volume+0x116>
 800d080:	2200      	movs	r2, #0
 800d082:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d084:	009b      	lsls	r3, r3, #2
 800d086:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800d08a:	440b      	add	r3, r1
 800d08c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d092:	3301      	adds	r3, #1
 800d094:	643b      	str	r3, [r7, #64]	; 0x40
 800d096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d9dc      	bls.n	800d056 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d09c:	2300      	movs	r3, #0
 800d09e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <find_volume+0x140>
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a8:	3b01      	subs	r3, #1
 800d0aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800d0b4:	4413      	add	r3, r2
 800d0b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d0ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d0bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d005      	beq.n	800d0ce <find_volume+0x162>
 800d0c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d0c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d0c6:	f7ff fefb 	bl	800cec0 <check_fs>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	e000      	b.n	800d0d0 <find_volume+0x164>
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d905      	bls.n	800d0e8 <find_volume+0x17c>
 800d0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0de:	3301      	adds	r3, #1
 800d0e0:	643b      	str	r3, [r7, #64]	; 0x40
 800d0e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e4:	2b03      	cmp	r3, #3
 800d0e6:	d9e1      	bls.n	800d0ac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d0e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d101      	bne.n	800d0f4 <find_volume+0x188>
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e17d      	b.n	800d3f0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d0f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d0f8:	2b01      	cmp	r3, #1
 800d0fa:	d901      	bls.n	800d100 <find_volume+0x194>
 800d0fc:	230d      	movs	r3, #13
 800d0fe:	e177      	b.n	800d3f0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d102:	3330      	adds	r3, #48	; 0x30
 800d104:	330b      	adds	r3, #11
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fd1a 	bl	800bb40 <ld_word>
 800d10c:	4603      	mov	r3, r0
 800d10e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d112:	d001      	beq.n	800d118 <find_volume+0x1ac>
 800d114:	230d      	movs	r3, #13
 800d116:	e16b      	b.n	800d3f0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	3330      	adds	r3, #48	; 0x30
 800d11c:	3316      	adds	r3, #22
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fd0e 	bl	800bb40 <ld_word>
 800d124:	4603      	mov	r3, r0
 800d126:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d106      	bne.n	800d13c <find_volume+0x1d0>
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	3330      	adds	r3, #48	; 0x30
 800d132:	3324      	adds	r3, #36	; 0x24
 800d134:	4618      	mov	r0, r3
 800d136:	f7fe fd1b 	bl	800bb70 <ld_dword>
 800d13a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d13c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d140:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d144:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	789b      	ldrb	r3, [r3, #2]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d005      	beq.n	800d160 <find_volume+0x1f4>
 800d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d156:	789b      	ldrb	r3, [r3, #2]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d001      	beq.n	800d160 <find_volume+0x1f4>
 800d15c:	230d      	movs	r3, #13
 800d15e:	e147      	b.n	800d3f0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d162:	789b      	ldrb	r3, [r3, #2]
 800d164:	461a      	mov	r2, r3
 800d166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d168:	fb02 f303 	mul.w	r3, r2, r3
 800d16c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d174:	b29a      	uxth	r2, r3
 800d176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d178:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	895b      	ldrh	r3, [r3, #10]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d008      	beq.n	800d194 <find_volume+0x228>
 800d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d184:	895b      	ldrh	r3, [r3, #10]
 800d186:	461a      	mov	r2, r3
 800d188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d18a:	895b      	ldrh	r3, [r3, #10]
 800d18c:	3b01      	subs	r3, #1
 800d18e:	4013      	ands	r3, r2
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <find_volume+0x22c>
 800d194:	230d      	movs	r3, #13
 800d196:	e12b      	b.n	800d3f0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d19a:	3330      	adds	r3, #48	; 0x30
 800d19c:	3311      	adds	r3, #17
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fcce 	bl	800bb40 <ld_word>
 800d1a4:	4603      	mov	r3, r0
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ae:	891b      	ldrh	r3, [r3, #8]
 800d1b0:	f003 030f 	and.w	r3, r3, #15
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d001      	beq.n	800d1be <find_volume+0x252>
 800d1ba:	230d      	movs	r3, #13
 800d1bc:	e118      	b.n	800d3f0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c0:	3330      	adds	r3, #48	; 0x30
 800d1c2:	3313      	adds	r3, #19
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe fcbb 	bl	800bb40 <ld_word>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d106      	bne.n	800d1e2 <find_volume+0x276>
 800d1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d6:	3330      	adds	r3, #48	; 0x30
 800d1d8:	3320      	adds	r3, #32
 800d1da:	4618      	mov	r0, r3
 800d1dc:	f7fe fcc8 	bl	800bb70 <ld_dword>
 800d1e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e4:	3330      	adds	r3, #48	; 0x30
 800d1e6:	330e      	adds	r3, #14
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7fe fca9 	bl	800bb40 <ld_word>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d1f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d101      	bne.n	800d1fc <find_volume+0x290>
 800d1f8:	230d      	movs	r3, #13
 800d1fa:	e0f9      	b.n	800d3f0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d1fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d200:	4413      	add	r3, r2
 800d202:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d204:	8912      	ldrh	r2, [r2, #8]
 800d206:	0912      	lsrs	r2, r2, #4
 800d208:	b292      	uxth	r2, r2
 800d20a:	4413      	add	r3, r2
 800d20c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d20e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d212:	429a      	cmp	r2, r3
 800d214:	d201      	bcs.n	800d21a <find_volume+0x2ae>
 800d216:	230d      	movs	r3, #13
 800d218:	e0ea      	b.n	800d3f0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d21a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21e:	1ad3      	subs	r3, r2, r3
 800d220:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d222:	8952      	ldrh	r2, [r2, #10]
 800d224:	fbb3 f3f2 	udiv	r3, r3, r2
 800d228:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d103      	bne.n	800d238 <find_volume+0x2cc>
 800d230:	230d      	movs	r3, #13
 800d232:	e0dd      	b.n	800d3f0 <find_volume+0x484>
 800d234:	2000135c 	.word	0x2000135c
		fmt = FS_FAT32;
 800d238:	2303      	movs	r3, #3
 800d23a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d240:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d244:	4293      	cmp	r3, r2
 800d246:	d802      	bhi.n	800d24e <find_volume+0x2e2>
 800d248:	2302      	movs	r3, #2
 800d24a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d250:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d254:	4293      	cmp	r3, r2
 800d256:	d802      	bhi.n	800d25e <find_volume+0x2f2>
 800d258:	2301      	movs	r3, #1
 800d25a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d260:	1c9a      	adds	r2, r3, #2
 800d262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d264:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d26a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d26c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d270:	441a      	add	r2, r3
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d276:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d27a:	441a      	add	r2, r3
 800d27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d284:	2b03      	cmp	r3, #3
 800d286:	d11e      	bne.n	800d2c6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d28a:	3330      	adds	r3, #48	; 0x30
 800d28c:	332a      	adds	r3, #42	; 0x2a
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe fc56 	bl	800bb40 <ld_word>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d001      	beq.n	800d29e <find_volume+0x332>
 800d29a:	230d      	movs	r3, #13
 800d29c:	e0a8      	b.n	800d3f0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a0:	891b      	ldrh	r3, [r3, #8]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <find_volume+0x33e>
 800d2a6:	230d      	movs	r3, #13
 800d2a8:	e0a2      	b.n	800d3f0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	3330      	adds	r3, #48	; 0x30
 800d2ae:	332c      	adds	r3, #44	; 0x2c
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7fe fc5d 	bl	800bb70 <ld_dword>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2be:	695b      	ldr	r3, [r3, #20]
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2c4:	e01f      	b.n	800d306 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	891b      	ldrh	r3, [r3, #8]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d101      	bne.n	800d2d2 <find_volume+0x366>
 800d2ce:	230d      	movs	r3, #13
 800d2d0:	e08e      	b.n	800d3f0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d4:	6a1a      	ldr	r2, [r3, #32]
 800d2d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2d8:	441a      	add	r2, r3
 800d2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d2de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d103      	bne.n	800d2ee <find_volume+0x382>
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	695b      	ldr	r3, [r3, #20]
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	e00a      	b.n	800d304 <find_volume+0x398>
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	695a      	ldr	r2, [r3, #20]
 800d2f2:	4613      	mov	r3, r2
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	4413      	add	r3, r2
 800d2f8:	085a      	lsrs	r2, r3, #1
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	695b      	ldr	r3, [r3, #20]
 800d2fe:	f003 0301 	and.w	r3, r3, #1
 800d302:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d304:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d308:	699a      	ldr	r2, [r3, #24]
 800d30a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d30c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d310:	0a5b      	lsrs	r3, r3, #9
 800d312:	429a      	cmp	r2, r3
 800d314:	d201      	bcs.n	800d31a <find_volume+0x3ae>
 800d316:	230d      	movs	r3, #13
 800d318:	e06a      	b.n	800d3f0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31c:	f04f 32ff 	mov.w	r2, #4294967295
 800d320:	611a      	str	r2, [r3, #16]
 800d322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d324:	691a      	ldr	r2, [r3, #16]
 800d326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d328:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32c:	2280      	movs	r2, #128	; 0x80
 800d32e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d330:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d334:	2b03      	cmp	r3, #3
 800d336:	d149      	bne.n	800d3cc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33a:	3330      	adds	r3, #48	; 0x30
 800d33c:	3330      	adds	r3, #48	; 0x30
 800d33e:	4618      	mov	r0, r3
 800d340:	f7fe fbfe 	bl	800bb40 <ld_word>
 800d344:	4603      	mov	r3, r0
 800d346:	2b01      	cmp	r3, #1
 800d348:	d140      	bne.n	800d3cc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d34c:	3301      	adds	r3, #1
 800d34e:	4619      	mov	r1, r3
 800d350:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d352:	f7fe fea5 	bl	800c0a0 <move_window>
 800d356:	4603      	mov	r3, r0
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d137      	bne.n	800d3cc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800d35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35e:	2200      	movs	r2, #0
 800d360:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d364:	3330      	adds	r3, #48	; 0x30
 800d366:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d36a:	4618      	mov	r0, r3
 800d36c:	f7fe fbe8 	bl	800bb40 <ld_word>
 800d370:	4603      	mov	r3, r0
 800d372:	461a      	mov	r2, r3
 800d374:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d378:	429a      	cmp	r2, r3
 800d37a:	d127      	bne.n	800d3cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d37e:	3330      	adds	r3, #48	; 0x30
 800d380:	4618      	mov	r0, r3
 800d382:	f7fe fbf5 	bl	800bb70 <ld_dword>
 800d386:	4602      	mov	r2, r0
 800d388:	4b1b      	ldr	r3, [pc, #108]	; (800d3f8 <find_volume+0x48c>)
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d11e      	bne.n	800d3cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d390:	3330      	adds	r3, #48	; 0x30
 800d392:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d396:	4618      	mov	r0, r3
 800d398:	f7fe fbea 	bl	800bb70 <ld_dword>
 800d39c:	4602      	mov	r2, r0
 800d39e:	4b17      	ldr	r3, [pc, #92]	; (800d3fc <find_volume+0x490>)
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d113      	bne.n	800d3cc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a6:	3330      	adds	r3, #48	; 0x30
 800d3a8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fe fbdf 	bl	800bb70 <ld_dword>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	3330      	adds	r3, #48	; 0x30
 800d3bc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe fbd5 	bl	800bb70 <ld_dword>
 800d3c6:	4602      	mov	r2, r0
 800d3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d3d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d3d4:	4b0a      	ldr	r3, [pc, #40]	; (800d400 <find_volume+0x494>)
 800d3d6:	881b      	ldrh	r3, [r3, #0]
 800d3d8:	3301      	adds	r3, #1
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	4b08      	ldr	r3, [pc, #32]	; (800d400 <find_volume+0x494>)
 800d3de:	801a      	strh	r2, [r3, #0]
 800d3e0:	4b07      	ldr	r3, [pc, #28]	; (800d400 <find_volume+0x494>)
 800d3e2:	881a      	ldrh	r2, [r3, #0]
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d3e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3ea:	f7fe fdf1 	bl	800bfd0 <clear_lock>
#endif
	return FR_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3758      	adds	r7, #88	; 0x58
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	41615252 	.word	0x41615252
 800d3fc:	61417272 	.word	0x61417272
 800d400:	20001360 	.word	0x20001360

0800d404 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d40e:	2309      	movs	r3, #9
 800d410:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01c      	beq.n	800d452 <validate+0x4e>
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d018      	beq.n	800d452 <validate+0x4e>
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	781b      	ldrb	r3, [r3, #0]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d013      	beq.n	800d452 <validate+0x4e>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	889a      	ldrh	r2, [r3, #4]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	88db      	ldrh	r3, [r3, #6]
 800d434:	429a      	cmp	r2, r3
 800d436:	d10c      	bne.n	800d452 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	785b      	ldrb	r3, [r3, #1]
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe fae0 	bl	800ba04 <disk_status>
 800d444:	4603      	mov	r3, r0
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d101      	bne.n	800d452 <validate+0x4e>
			res = FR_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d102      	bne.n	800d45e <validate+0x5a>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	e000      	b.n	800d460 <validate+0x5c>
 800d45e:	2300      	movs	r3, #0
 800d460:	683a      	ldr	r2, [r7, #0]
 800d462:	6013      	str	r3, [r2, #0]
	return res;
 800d464:	7bfb      	ldrb	r3, [r7, #15]
}
 800d466:	4618      	mov	r0, r3
 800d468:	3710      	adds	r7, #16
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}
	...

0800d470 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b088      	sub	sp, #32
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	4613      	mov	r3, r2
 800d47c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d47e:	68bb      	ldr	r3, [r7, #8]
 800d480:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d482:	f107 0310 	add.w	r3, r7, #16
 800d486:	4618      	mov	r0, r3
 800d488:	f7ff fcd5 	bl	800ce36 <get_ldnumber>
 800d48c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d48e:	69fb      	ldr	r3, [r7, #28]
 800d490:	2b00      	cmp	r3, #0
 800d492:	da01      	bge.n	800d498 <f_mount+0x28>
 800d494:	230b      	movs	r3, #11
 800d496:	e02b      	b.n	800d4f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d498:	4a17      	ldr	r2, [pc, #92]	; (800d4f8 <f_mount+0x88>)
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d4a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d005      	beq.n	800d4b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d4a8:	69b8      	ldr	r0, [r7, #24]
 800d4aa:	f7fe fd91 	bl	800bfd0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d002      	beq.n	800d4c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	490d      	ldr	r1, [pc, #52]	; (800d4f8 <f_mount+0x88>)
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d002      	beq.n	800d4d6 <f_mount+0x66>
 800d4d0:	79fb      	ldrb	r3, [r7, #7]
 800d4d2:	2b01      	cmp	r3, #1
 800d4d4:	d001      	beq.n	800d4da <f_mount+0x6a>
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	e00a      	b.n	800d4f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d4da:	f107 010c 	add.w	r1, r7, #12
 800d4de:	f107 0308 	add.w	r3, r7, #8
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f7ff fd41 	bl	800cf6c <find_volume>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d4ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3720      	adds	r7, #32
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	2000135c 	.word	0x2000135c

0800d4fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b098      	sub	sp, #96	; 0x60
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <f_open+0x18>
 800d510:	2309      	movs	r3, #9
 800d512:	e1ad      	b.n	800d870 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d514:	79fb      	ldrb	r3, [r7, #7]
 800d516:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d51a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d51c:	79fa      	ldrb	r2, [r7, #7]
 800d51e:	f107 0110 	add.w	r1, r7, #16
 800d522:	f107 0308 	add.w	r3, r7, #8
 800d526:	4618      	mov	r0, r3
 800d528:	f7ff fd20 	bl	800cf6c <find_volume>
 800d52c:	4603      	mov	r3, r0
 800d52e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d536:	2b00      	cmp	r3, #0
 800d538:	f040 8191 	bne.w	800d85e <f_open+0x362>
		dj.obj.fs = fs;
 800d53c:	693b      	ldr	r3, [r7, #16]
 800d53e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	f107 0314 	add.w	r3, r7, #20
 800d546:	4611      	mov	r1, r2
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff fc03 	bl	800cd54 <follow_path>
 800d54e:	4603      	mov	r3, r0
 800d550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d554:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d11a      	bne.n	800d592 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d55c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d560:	b25b      	sxtb	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	da03      	bge.n	800d56e <f_open+0x72>
				res = FR_INVALID_NAME;
 800d566:	2306      	movs	r3, #6
 800d568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d56c:	e011      	b.n	800d592 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	f023 0301 	bic.w	r3, r3, #1
 800d574:	2b00      	cmp	r3, #0
 800d576:	bf14      	ite	ne
 800d578:	2301      	movne	r3, #1
 800d57a:	2300      	moveq	r3, #0
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	461a      	mov	r2, r3
 800d580:	f107 0314 	add.w	r3, r7, #20
 800d584:	4611      	mov	r1, r2
 800d586:	4618      	mov	r0, r3
 800d588:	f7fe fbda 	bl	800bd40 <chk_lock>
 800d58c:	4603      	mov	r3, r0
 800d58e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	f003 031c 	and.w	r3, r3, #28
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d07f      	beq.n	800d69c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d59c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d017      	beq.n	800d5d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d5a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5a8:	2b04      	cmp	r3, #4
 800d5aa:	d10e      	bne.n	800d5ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d5ac:	f7fe fc24 	bl	800bdf8 <enq_lock>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d006      	beq.n	800d5c4 <f_open+0xc8>
 800d5b6:	f107 0314 	add.w	r3, r7, #20
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	f7ff fb03 	bl	800cbc6 <dir_register>
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	e000      	b.n	800d5c6 <f_open+0xca>
 800d5c4:	2312      	movs	r3, #18
 800d5c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
 800d5cc:	f043 0308 	orr.w	r3, r3, #8
 800d5d0:	71fb      	strb	r3, [r7, #7]
 800d5d2:	e010      	b.n	800d5f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d5d4:	7ebb      	ldrb	r3, [r7, #26]
 800d5d6:	f003 0311 	and.w	r3, r3, #17
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d003      	beq.n	800d5e6 <f_open+0xea>
					res = FR_DENIED;
 800d5de:	2307      	movs	r3, #7
 800d5e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5e4:	e007      	b.n	800d5f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	f003 0304 	and.w	r3, r3, #4
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d002      	beq.n	800d5f6 <f_open+0xfa>
 800d5f0:	2308      	movs	r3, #8
 800d5f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d5f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d168      	bne.n	800d6d0 <f_open+0x1d4>
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b00      	cmp	r3, #0
 800d606:	d063      	beq.n	800d6d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d608:	f7fb fa04 	bl	8008a14 <get_fattime>
 800d60c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d610:	330e      	adds	r3, #14
 800d612:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d614:	4618      	mov	r0, r3
 800d616:	f7fe fae9 	bl	800bbec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61c:	3316      	adds	r3, #22
 800d61e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d620:	4618      	mov	r0, r3
 800d622:	f7fe fae3 	bl	800bbec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d626:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d628:	330b      	adds	r3, #11
 800d62a:	2220      	movs	r2, #32
 800d62c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d632:	4611      	mov	r1, r2
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff fa32 	bl	800ca9e <ld_clust>
 800d63a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d640:	2200      	movs	r2, #0
 800d642:	4618      	mov	r0, r3
 800d644:	f7ff fa4a 	bl	800cadc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64a:	331c      	adds	r3, #28
 800d64c:	2100      	movs	r1, #0
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe facc 	bl	800bbec <st_dword>
					fs->wflag = 1;
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	2201      	movs	r2, #1
 800d658:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d037      	beq.n	800d6d0 <f_open+0x1d4>
						dw = fs->winsect;
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d664:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d666:	f107 0314 	add.w	r3, r7, #20
 800d66a:	2200      	movs	r2, #0
 800d66c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d66e:	4618      	mov	r0, r3
 800d670:	f7fe ff5d 	bl	800c52e <remove_chain>
 800d674:	4603      	mov	r3, r0
 800d676:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d67a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d126      	bne.n	800d6d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d686:	4618      	mov	r0, r3
 800d688:	f7fe fd0a 	bl	800c0a0 <move_window>
 800d68c:	4603      	mov	r3, r0
 800d68e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d692:	693b      	ldr	r3, [r7, #16]
 800d694:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d696:	3a01      	subs	r2, #1
 800d698:	60da      	str	r2, [r3, #12]
 800d69a:	e019      	b.n	800d6d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d69c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d115      	bne.n	800d6d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d6a4:	7ebb      	ldrb	r3, [r7, #26]
 800d6a6:	f003 0310 	and.w	r3, r3, #16
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d003      	beq.n	800d6b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d6ae:	2304      	movs	r3, #4
 800d6b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6b4:	e00c      	b.n	800d6d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d6b6:	79fb      	ldrb	r3, [r7, #7]
 800d6b8:	f003 0302 	and.w	r3, r3, #2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d007      	beq.n	800d6d0 <f_open+0x1d4>
 800d6c0:	7ebb      	ldrb	r3, [r7, #26]
 800d6c2:	f003 0301 	and.w	r3, r3, #1
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d002      	beq.n	800d6d0 <f_open+0x1d4>
						res = FR_DENIED;
 800d6ca:	2307      	movs	r3, #7
 800d6cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d6d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d128      	bne.n	800d72a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d6d8:	79fb      	ldrb	r3, [r7, #7]
 800d6da:	f003 0308 	and.w	r3, r3, #8
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d003      	beq.n	800d6ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d6f8:	79fb      	ldrb	r3, [r7, #7]
 800d6fa:	f023 0301 	bic.w	r3, r3, #1
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	bf14      	ite	ne
 800d702:	2301      	movne	r3, #1
 800d704:	2300      	moveq	r3, #0
 800d706:	b2db      	uxtb	r3, r3
 800d708:	461a      	mov	r2, r3
 800d70a:	f107 0314 	add.w	r3, r7, #20
 800d70e:	4611      	mov	r1, r2
 800d710:	4618      	mov	r0, r3
 800d712:	f7fe fb93 	bl	800be3c <inc_lock>
 800d716:	4602      	mov	r2, r0
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	691b      	ldr	r3, [r3, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d102      	bne.n	800d72a <f_open+0x22e>
 800d724:	2302      	movs	r3, #2
 800d726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d72a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d72e:	2b00      	cmp	r3, #0
 800d730:	f040 8095 	bne.w	800d85e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d738:	4611      	mov	r1, r2
 800d73a:	4618      	mov	r0, r3
 800d73c:	f7ff f9af 	bl	800ca9e <ld_clust>
 800d740:	4602      	mov	r2, r0
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d748:	331c      	adds	r3, #28
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe fa10 	bl	800bb70 <ld_dword>
 800d750:	4602      	mov	r2, r0
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	2200      	movs	r2, #0
 800d75a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	88da      	ldrh	r2, [r3, #6]
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	79fa      	ldrb	r2, [r7, #7]
 800d76e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	2200      	movs	r2, #0
 800d774:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	2200      	movs	r2, #0
 800d780:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3330      	adds	r3, #48	; 0x30
 800d786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d78a:	2100      	movs	r1, #0
 800d78c:	4618      	mov	r0, r3
 800d78e:	f7fe fa7a 	bl	800bc86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	f003 0320 	and.w	r3, r3, #32
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d060      	beq.n	800d85e <f_open+0x362>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	68db      	ldr	r3, [r3, #12]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d05c      	beq.n	800d85e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	68da      	ldr	r2, [r3, #12]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	895b      	ldrh	r3, [r3, #10]
 800d7b0:	025b      	lsls	r3, r3, #9
 800d7b2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	689b      	ldr	r3, [r3, #8]
 800d7b8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	68db      	ldr	r3, [r3, #12]
 800d7be:	657b      	str	r3, [r7, #84]	; 0x54
 800d7c0:	e016      	b.n	800d7f0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fe fd25 	bl	800c216 <get_fat>
 800d7cc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d7ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	d802      	bhi.n	800d7da <f_open+0x2de>
 800d7d4:	2302      	movs	r3, #2
 800d7d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d7da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e0:	d102      	bne.n	800d7e8 <f_open+0x2ec>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d7e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	657b      	str	r3, [r7, #84]	; 0x54
 800d7f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d103      	bne.n	800d800 <f_open+0x304>
 800d7f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d7fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d7fc:	429a      	cmp	r2, r3
 800d7fe:	d8e0      	bhi.n	800d7c2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d804:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d806:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d127      	bne.n	800d85e <f_open+0x362>
 800d80e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d814:	2b00      	cmp	r3, #0
 800d816:	d022      	beq.n	800d85e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe fcdb 	bl	800c1d8 <clust2sect>
 800d822:	6478      	str	r0, [r7, #68]	; 0x44
 800d824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d826:	2b00      	cmp	r3, #0
 800d828:	d103      	bne.n	800d832 <f_open+0x336>
						res = FR_INT_ERR;
 800d82a:	2302      	movs	r3, #2
 800d82c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d830:	e015      	b.n	800d85e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d834:	0a5a      	lsrs	r2, r3, #9
 800d836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d838:	441a      	add	r2, r3
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	7858      	ldrb	r0, [r3, #1]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	6a1a      	ldr	r2, [r3, #32]
 800d84c:	2301      	movs	r3, #1
 800d84e:	f7fe f919 	bl	800ba84 <disk_read>
 800d852:	4603      	mov	r3, r0
 800d854:	2b00      	cmp	r3, #0
 800d856:	d002      	beq.n	800d85e <f_open+0x362>
 800d858:	2301      	movs	r3, #1
 800d85a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d85e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d862:	2b00      	cmp	r3, #0
 800d864:	d002      	beq.n	800d86c <f_open+0x370>
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	2200      	movs	r2, #0
 800d86a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d86c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d870:	4618      	mov	r0, r3
 800d872:	3760      	adds	r7, #96	; 0x60
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b08e      	sub	sp, #56	; 0x38
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	60f8      	str	r0, [r7, #12]
 800d880:	60b9      	str	r1, [r7, #8]
 800d882:	607a      	str	r2, [r7, #4]
 800d884:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	2200      	movs	r2, #0
 800d88e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	f107 0214 	add.w	r2, r7, #20
 800d896:	4611      	mov	r1, r2
 800d898:	4618      	mov	r0, r3
 800d89a:	f7ff fdb3 	bl	800d404 <validate>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d8a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d107      	bne.n	800d8bc <f_read+0x44>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	7d5b      	ldrb	r3, [r3, #21]
 800d8b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d8b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d002      	beq.n	800d8c2 <f_read+0x4a>
 800d8bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d8c0:	e115      	b.n	800daee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	f003 0301 	and.w	r3, r3, #1
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d101      	bne.n	800d8d2 <f_read+0x5a>
 800d8ce:	2307      	movs	r3, #7
 800d8d0:	e10d      	b.n	800daee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	68da      	ldr	r2, [r3, #12]
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	699b      	ldr	r3, [r3, #24]
 800d8da:	1ad3      	subs	r3, r2, r3
 800d8dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	6a3b      	ldr	r3, [r7, #32]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	f240 80fe 	bls.w	800dae4 <f_read+0x26c>
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d8ec:	e0fa      	b.n	800dae4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	699b      	ldr	r3, [r3, #24]
 800d8f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	f040 80c6 	bne.w	800da88 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	699b      	ldr	r3, [r3, #24]
 800d900:	0a5b      	lsrs	r3, r3, #9
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	8952      	ldrh	r2, [r2, #10]
 800d906:	3a01      	subs	r2, #1
 800d908:	4013      	ands	r3, r2
 800d90a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d90c:	69fb      	ldr	r3, [r7, #28]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d12f      	bne.n	800d972 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d103      	bne.n	800d922 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	633b      	str	r3, [r7, #48]	; 0x30
 800d920:	e013      	b.n	800d94a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d926:	2b00      	cmp	r3, #0
 800d928:	d007      	beq.n	800d93a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	699b      	ldr	r3, [r3, #24]
 800d92e:	4619      	mov	r1, r3
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7fe fef9 	bl	800c728 <clmt_clust>
 800d936:	6338      	str	r0, [r7, #48]	; 0x30
 800d938:	e007      	b.n	800d94a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	69db      	ldr	r3, [r3, #28]
 800d940:	4619      	mov	r1, r3
 800d942:	4610      	mov	r0, r2
 800d944:	f7fe fc67 	bl	800c216 <get_fat>
 800d948:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d804      	bhi.n	800d95a <f_read+0xe2>
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	2202      	movs	r2, #2
 800d954:	755a      	strb	r2, [r3, #21]
 800d956:	2302      	movs	r3, #2
 800d958:	e0c9      	b.n	800daee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d960:	d104      	bne.n	800d96c <f_read+0xf4>
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2201      	movs	r2, #1
 800d966:	755a      	strb	r2, [r3, #21]
 800d968:	2301      	movs	r3, #1
 800d96a:	e0c0      	b.n	800daee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d970:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d972:	697a      	ldr	r2, [r7, #20]
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	69db      	ldr	r3, [r3, #28]
 800d978:	4619      	mov	r1, r3
 800d97a:	4610      	mov	r0, r2
 800d97c:	f7fe fc2c 	bl	800c1d8 <clust2sect>
 800d980:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d104      	bne.n	800d992 <f_read+0x11a>
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2202      	movs	r2, #2
 800d98c:	755a      	strb	r2, [r3, #21]
 800d98e:	2302      	movs	r3, #2
 800d990:	e0ad      	b.n	800daee <f_read+0x276>
			sect += csect;
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	69fb      	ldr	r3, [r7, #28]
 800d996:	4413      	add	r3, r2
 800d998:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	0a5b      	lsrs	r3, r3, #9
 800d99e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d039      	beq.n	800da1a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d9a6:	69fa      	ldr	r2, [r7, #28]
 800d9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9aa:	4413      	add	r3, r2
 800d9ac:	697a      	ldr	r2, [r7, #20]
 800d9ae:	8952      	ldrh	r2, [r2, #10]
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d905      	bls.n	800d9c0 <f_read+0x148>
					cc = fs->csize - csect;
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	895b      	ldrh	r3, [r3, #10]
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	1ad3      	subs	r3, r2, r3
 800d9be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	7858      	ldrb	r0, [r3, #1]
 800d9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c6:	69ba      	ldr	r2, [r7, #24]
 800d9c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9ca:	f7fe f85b 	bl	800ba84 <disk_read>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d004      	beq.n	800d9de <f_read+0x166>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	755a      	strb	r2, [r3, #21]
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e087      	b.n	800daee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	7d1b      	ldrb	r3, [r3, #20]
 800d9e2:	b25b      	sxtb	r3, r3
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	da14      	bge.n	800da12 <f_read+0x19a>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6a1a      	ldr	r2, [r3, #32]
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	1ad3      	subs	r3, r2, r3
 800d9f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f2:	429a      	cmp	r2, r3
 800d9f4:	d90d      	bls.n	800da12 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6a1a      	ldr	r2, [r3, #32]
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	1ad3      	subs	r3, r2, r3
 800d9fe:	025b      	lsls	r3, r3, #9
 800da00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da02:	18d0      	adds	r0, r2, r3
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	3330      	adds	r3, #48	; 0x30
 800da08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da0c:	4619      	mov	r1, r3
 800da0e:	f7fe f919 	bl	800bc44 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800da12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da14:	025b      	lsls	r3, r3, #9
 800da16:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800da18:	e050      	b.n	800dabc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	6a1b      	ldr	r3, [r3, #32]
 800da1e:	69ba      	ldr	r2, [r7, #24]
 800da20:	429a      	cmp	r2, r3
 800da22:	d02e      	beq.n	800da82 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	7d1b      	ldrb	r3, [r3, #20]
 800da28:	b25b      	sxtb	r3, r3
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	da18      	bge.n	800da60 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	7858      	ldrb	r0, [r3, #1]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	6a1a      	ldr	r2, [r3, #32]
 800da3c:	2301      	movs	r3, #1
 800da3e:	f7fe f841 	bl	800bac4 <disk_write>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d004      	beq.n	800da52 <f_read+0x1da>
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2201      	movs	r2, #1
 800da4c:	755a      	strb	r2, [r3, #21]
 800da4e:	2301      	movs	r3, #1
 800da50:	e04d      	b.n	800daee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	7d1b      	ldrb	r3, [r3, #20]
 800da56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da5a:	b2da      	uxtb	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	7858      	ldrb	r0, [r3, #1]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da6a:	2301      	movs	r3, #1
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	f7fe f809 	bl	800ba84 <disk_read>
 800da72:	4603      	mov	r3, r0
 800da74:	2b00      	cmp	r3, #0
 800da76:	d004      	beq.n	800da82 <f_read+0x20a>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2201      	movs	r2, #1
 800da7c:	755a      	strb	r2, [r3, #21]
 800da7e:	2301      	movs	r3, #1
 800da80:	e035      	b.n	800daee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	69ba      	ldr	r2, [r7, #24]
 800da86:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	699b      	ldr	r3, [r3, #24]
 800da8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da90:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800da94:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800da96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d901      	bls.n	800daa2 <f_read+0x22a>
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab0:	4413      	add	r3, r2
 800dab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab4:	4619      	mov	r1, r3
 800dab6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dab8:	f7fe f8c4 	bl	800bc44 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800dabc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac0:	4413      	add	r3, r2
 800dac2:	627b      	str	r3, [r7, #36]	; 0x24
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	699a      	ldr	r2, [r3, #24]
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	441a      	add	r2, r3
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	619a      	str	r2, [r3, #24]
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	681a      	ldr	r2, [r3, #0]
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	441a      	add	r2, r3
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	601a      	str	r2, [r3, #0]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	f47f af01 	bne.w	800d8ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3738      	adds	r7, #56	; 0x38
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b086      	sub	sp, #24
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	f107 0208 	add.w	r2, r7, #8
 800db04:	4611      	mov	r1, r2
 800db06:	4618      	mov	r0, r3
 800db08:	f7ff fc7c 	bl	800d404 <validate>
 800db0c:	4603      	mov	r3, r0
 800db0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db10:	7dfb      	ldrb	r3, [r7, #23]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d168      	bne.n	800dbe8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	7d1b      	ldrb	r3, [r3, #20]
 800db1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d062      	beq.n	800dbe8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7d1b      	ldrb	r3, [r3, #20]
 800db26:	b25b      	sxtb	r3, r3
 800db28:	2b00      	cmp	r3, #0
 800db2a:	da15      	bge.n	800db58 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	7858      	ldrb	r0, [r3, #1]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6a1a      	ldr	r2, [r3, #32]
 800db3a:	2301      	movs	r3, #1
 800db3c:	f7fd ffc2 	bl	800bac4 <disk_write>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <f_sync+0x54>
 800db46:	2301      	movs	r3, #1
 800db48:	e04f      	b.n	800dbea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	7d1b      	ldrb	r3, [r3, #20]
 800db4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db52:	b2da      	uxtb	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db58:	f7fa ff5c 	bl	8008a14 <get_fattime>
 800db5c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db64:	4619      	mov	r1, r3
 800db66:	4610      	mov	r0, r2
 800db68:	f7fe fa9a 	bl	800c0a0 <move_window>
 800db6c:	4603      	mov	r3, r0
 800db6e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d138      	bne.n	800dbe8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	330b      	adds	r3, #11
 800db80:	781a      	ldrb	r2, [r3, #0]
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	330b      	adds	r3, #11
 800db86:	f042 0220 	orr.w	r2, r2, #32
 800db8a:	b2d2      	uxtb	r2, r2
 800db8c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6818      	ldr	r0, [r3, #0]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	689b      	ldr	r3, [r3, #8]
 800db96:	461a      	mov	r2, r3
 800db98:	68f9      	ldr	r1, [r7, #12]
 800db9a:	f7fe ff9f 	bl	800cadc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f103 021c 	add.w	r2, r3, #28
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	68db      	ldr	r3, [r3, #12]
 800dba8:	4619      	mov	r1, r3
 800dbaa:	4610      	mov	r0, r2
 800dbac:	f7fe f81e 	bl	800bbec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3316      	adds	r3, #22
 800dbb4:	6939      	ldr	r1, [r7, #16]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f7fe f818 	bl	800bbec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	3312      	adds	r3, #18
 800dbc0:	2100      	movs	r1, #0
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	f7fd fff7 	bl	800bbb6 <st_word>
					fs->wflag = 1;
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fe fa93 	bl	800c0fc <sync_fs>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	7d1b      	ldrb	r3, [r3, #20]
 800dbde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dbe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbea:	4618      	mov	r0, r3
 800dbec:	3718      	adds	r7, #24
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}

0800dbf2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dbf2:	b580      	push	{r7, lr}
 800dbf4:	b084      	sub	sp, #16
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f7ff ff7b 	bl	800daf6 <f_sync>
 800dc00:	4603      	mov	r3, r0
 800dc02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d118      	bne.n	800dc3c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f107 0208 	add.w	r2, r7, #8
 800dc10:	4611      	mov	r1, r2
 800dc12:	4618      	mov	r0, r3
 800dc14:	f7ff fbf6 	bl	800d404 <validate>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d10c      	bne.n	800dc3c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	4618      	mov	r0, r3
 800dc28:	f7fe f996 	bl	800bf58 <dec_lock>
 800dc2c:	4603      	mov	r3, r0
 800dc2e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d102      	bne.n	800dc3c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2200      	movs	r2, #0
 800dc3a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b090      	sub	sp, #64	; 0x40
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f107 0208 	add.w	r2, r7, #8
 800dc56:	4611      	mov	r1, r2
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7ff fbd3 	bl	800d404 <validate>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800dc64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d103      	bne.n	800dc74 <f_lseek+0x2e>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7d5b      	ldrb	r3, [r3, #21]
 800dc70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800dc74:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d002      	beq.n	800dc82 <f_lseek+0x3c>
 800dc7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dc80:	e1e6      	b.n	800e050 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	f000 80d1 	beq.w	800de2e <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800dc8c:	683b      	ldr	r3, [r7, #0]
 800dc8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc92:	d15a      	bne.n	800dd4a <f_lseek+0x104>
			tbl = fp->cltbl;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc98:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9c:	1d1a      	adds	r2, r3, #4
 800dc9e:	627a      	str	r2, [r7, #36]	; 0x24
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	617b      	str	r3, [r7, #20]
 800dca4:	2302      	movs	r3, #2
 800dca6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d03a      	beq.n	800dd2a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	2300      	movs	r3, #0
 800dcba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcbe:	3302      	adds	r3, #2
 800dcc0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800dcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc8:	3301      	adds	r3, #1
 800dcca:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f7fe faa0 	bl	800c216 <get_fat>
 800dcd6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800dcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d804      	bhi.n	800dce8 <f_lseek+0xa2>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2202      	movs	r2, #2
 800dce2:	755a      	strb	r2, [r3, #21]
 800dce4:	2302      	movs	r3, #2
 800dce6:	e1b3      	b.n	800e050 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800dce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d104      	bne.n	800dcfa <f_lseek+0xb4>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	755a      	strb	r2, [r3, #21]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e1aa      	b.n	800e050 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d0de      	beq.n	800dcc2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800dd04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d809      	bhi.n	800dd20 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800dd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0e:	1d1a      	adds	r2, r3, #4
 800dd10:	627a      	str	r2, [r7, #36]	; 0x24
 800dd12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd18:	1d1a      	adds	r2, r3, #4
 800dd1a:	627a      	str	r2, [r7, #36]	; 0x24
 800dd1c:	693a      	ldr	r2, [r7, #16]
 800dd1e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	695b      	ldr	r3, [r3, #20]
 800dd24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d3c4      	bcc.n	800dcb4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd30:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800dd32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d803      	bhi.n	800dd42 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	e184      	b.n	800e04c <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800dd42:	2311      	movs	r3, #17
 800dd44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dd48:	e180      	b.n	800e04c <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	68db      	ldr	r3, [r3, #12]
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d902      	bls.n	800dd5a <f_lseek+0x114>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	68db      	ldr	r3, [r3, #12]
 800dd58:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 8172 	beq.w	800e04c <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800dd68:	683b      	ldr	r3, [r7, #0]
 800dd6a:	3b01      	subs	r3, #1
 800dd6c:	4619      	mov	r1, r3
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7fe fcda 	bl	800c728 <clmt_clust>
 800dd74:	4602      	mov	r2, r0
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	69db      	ldr	r3, [r3, #28]
 800dd80:	4619      	mov	r1, r3
 800dd82:	4610      	mov	r0, r2
 800dd84:	f7fe fa28 	bl	800c1d8 <clust2sect>
 800dd88:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d104      	bne.n	800dd9a <f_lseek+0x154>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	2202      	movs	r2, #2
 800dd94:	755a      	strb	r2, [r3, #21]
 800dd96:	2302      	movs	r3, #2
 800dd98:	e15a      	b.n	800e050 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	0a5b      	lsrs	r3, r3, #9
 800dda0:	68ba      	ldr	r2, [r7, #8]
 800dda2:	8952      	ldrh	r2, [r2, #10]
 800dda4:	3a01      	subs	r2, #1
 800dda6:	4013      	ands	r3, r2
 800dda8:	69ba      	ldr	r2, [r7, #24]
 800ddaa:	4413      	add	r3, r2
 800ddac:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	699b      	ldr	r3, [r3, #24]
 800ddb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f000 8148 	beq.w	800e04c <f_lseek+0x406>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	69ba      	ldr	r2, [r7, #24]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	f000 8142 	beq.w	800e04c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	7d1b      	ldrb	r3, [r3, #20]
 800ddcc:	b25b      	sxtb	r3, r3
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	da18      	bge.n	800de04 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	7858      	ldrb	r0, [r3, #1]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a1a      	ldr	r2, [r3, #32]
 800dde0:	2301      	movs	r3, #1
 800dde2:	f7fd fe6f 	bl	800bac4 <disk_write>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d004      	beq.n	800ddf6 <f_lseek+0x1b0>
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	755a      	strb	r2, [r3, #21]
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	e12c      	b.n	800e050 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	7d1b      	ldrb	r3, [r3, #20]
 800ddfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddfe:	b2da      	uxtb	r2, r3
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	7858      	ldrb	r0, [r3, #1]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800de0e:	2301      	movs	r3, #1
 800de10:	69ba      	ldr	r2, [r7, #24]
 800de12:	f7fd fe37 	bl	800ba84 <disk_read>
 800de16:	4603      	mov	r3, r0
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d004      	beq.n	800de26 <f_lseek+0x1e0>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2201      	movs	r2, #1
 800de20:	755a      	strb	r2, [r3, #21]
 800de22:	2301      	movs	r3, #1
 800de24:	e114      	b.n	800e050 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	69ba      	ldr	r2, [r7, #24]
 800de2a:	621a      	str	r2, [r3, #32]
 800de2c:	e10e      	b.n	800e04c <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	429a      	cmp	r2, r3
 800de36:	d908      	bls.n	800de4a <f_lseek+0x204>
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	7d1b      	ldrb	r3, [r3, #20]
 800de3c:	f003 0302 	and.w	r3, r3, #2
 800de40:	2b00      	cmp	r3, #0
 800de42:	d102      	bne.n	800de4a <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800de50:	2300      	movs	r3, #0
 800de52:	637b      	str	r3, [r7, #52]	; 0x34
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de58:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f000 80a7 	beq.w	800dfb0 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	895b      	ldrh	r3, [r3, #10]
 800de66:	025b      	lsls	r3, r3, #9
 800de68:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800de6a:	6a3b      	ldr	r3, [r7, #32]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d01b      	beq.n	800dea8 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	1e5a      	subs	r2, r3, #1
 800de74:	69fb      	ldr	r3, [r7, #28]
 800de76:	fbb2 f2f3 	udiv	r2, r2, r3
 800de7a:	6a3b      	ldr	r3, [r7, #32]
 800de7c:	1e59      	subs	r1, r3, #1
 800de7e:	69fb      	ldr	r3, [r7, #28]
 800de80:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800de84:	429a      	cmp	r2, r3
 800de86:	d30f      	bcc.n	800dea8 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800de88:	6a3b      	ldr	r3, [r7, #32]
 800de8a:	1e5a      	subs	r2, r3, #1
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	425b      	negs	r3, r3
 800de90:	401a      	ands	r2, r3
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	683a      	ldr	r2, [r7, #0]
 800de9c:	1ad3      	subs	r3, r2, r3
 800de9e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	69db      	ldr	r3, [r3, #28]
 800dea4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dea6:	e022      	b.n	800deee <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800deae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d119      	bne.n	800dee8 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2100      	movs	r1, #0
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fe fb9d 	bl	800c5f8 <create_chain>
 800debe:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800dec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d104      	bne.n	800ded0 <f_lseek+0x28a>
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	2202      	movs	r2, #2
 800deca:	755a      	strb	r2, [r3, #21]
 800decc:	2302      	movs	r3, #2
 800dece:	e0bf      	b.n	800e050 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ded0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ded2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded6:	d104      	bne.n	800dee2 <f_lseek+0x29c>
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	2201      	movs	r2, #1
 800dedc:	755a      	strb	r2, [r3, #21]
 800dede:	2301      	movs	r3, #1
 800dee0:	e0b6      	b.n	800e050 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dee6:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800deec:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800deee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def0:	2b00      	cmp	r3, #0
 800def2:	d05d      	beq.n	800dfb0 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800def4:	e03a      	b.n	800df6c <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	603b      	str	r3, [r7, #0]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	699a      	ldr	r2, [r3, #24]
 800df02:	69fb      	ldr	r3, [r7, #28]
 800df04:	441a      	add	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	7d1b      	ldrb	r3, [r3, #20]
 800df0e:	f003 0302 	and.w	r3, r3, #2
 800df12:	2b00      	cmp	r3, #0
 800df14:	d00b      	beq.n	800df2e <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe fb6c 	bl	800c5f8 <create_chain>
 800df20:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800df22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df24:	2b00      	cmp	r3, #0
 800df26:	d108      	bne.n	800df3a <f_lseek+0x2f4>
							ofs = 0; break;
 800df28:	2300      	movs	r3, #0
 800df2a:	603b      	str	r3, [r7, #0]
 800df2c:	e022      	b.n	800df74 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df32:	4618      	mov	r0, r3
 800df34:	f7fe f96f 	bl	800c216 <get_fat>
 800df38:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800df3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df40:	d104      	bne.n	800df4c <f_lseek+0x306>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2201      	movs	r2, #1
 800df46:	755a      	strb	r2, [r3, #21]
 800df48:	2301      	movs	r3, #1
 800df4a:	e081      	b.n	800e050 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800df4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d904      	bls.n	800df5c <f_lseek+0x316>
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df58:	429a      	cmp	r2, r3
 800df5a:	d304      	bcc.n	800df66 <f_lseek+0x320>
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2202      	movs	r2, #2
 800df60:	755a      	strb	r2, [r3, #21]
 800df62:	2302      	movs	r3, #2
 800df64:	e074      	b.n	800e050 <f_lseek+0x40a>
					fp->clust = clst;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df6a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800df6c:	683a      	ldr	r2, [r7, #0]
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	429a      	cmp	r2, r3
 800df72:	d8c0      	bhi.n	800def6 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	699a      	ldr	r2, [r3, #24]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	441a      	add	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df86:	2b00      	cmp	r3, #0
 800df88:	d012      	beq.n	800dfb0 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fe f922 	bl	800c1d8 <clust2sect>
 800df94:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800df96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d104      	bne.n	800dfa6 <f_lseek+0x360>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	2202      	movs	r2, #2
 800dfa0:	755a      	strb	r2, [r3, #21]
 800dfa2:	2302      	movs	r3, #2
 800dfa4:	e054      	b.n	800e050 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	0a5b      	lsrs	r3, r3, #9
 800dfaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfac:	4413      	add	r3, r2
 800dfae:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	699a      	ldr	r2, [r3, #24]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	68db      	ldr	r3, [r3, #12]
 800dfb8:	429a      	cmp	r2, r3
 800dfba:	d90a      	bls.n	800dfd2 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	699a      	ldr	r2, [r3, #24]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	7d1b      	ldrb	r3, [r3, #20]
 800dfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	699b      	ldr	r3, [r3, #24]
 800dfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d036      	beq.n	800e04c <f_lseek+0x406>
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
 800dfe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d031      	beq.n	800e04c <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	7d1b      	ldrb	r3, [r3, #20]
 800dfec:	b25b      	sxtb	r3, r3
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	da18      	bge.n	800e024 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	7858      	ldrb	r0, [r3, #1]
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6a1a      	ldr	r2, [r3, #32]
 800e000:	2301      	movs	r3, #1
 800e002:	f7fd fd5f 	bl	800bac4 <disk_write>
 800e006:	4603      	mov	r3, r0
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d004      	beq.n	800e016 <f_lseek+0x3d0>
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	755a      	strb	r2, [r3, #21]
 800e012:	2301      	movs	r3, #1
 800e014:	e01c      	b.n	800e050 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	7d1b      	ldrb	r3, [r3, #20]
 800e01a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e01e:	b2da      	uxtb	r2, r3
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	7858      	ldrb	r0, [r3, #1]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e02e:	2301      	movs	r3, #1
 800e030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e032:	f7fd fd27 	bl	800ba84 <disk_read>
 800e036:	4603      	mov	r3, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d004      	beq.n	800e046 <f_lseek+0x400>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	755a      	strb	r2, [r3, #21]
 800e042:	2301      	movs	r3, #1
 800e044:	e004      	b.n	800e050 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e04a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800e04c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e050:	4618      	mov	r0, r3
 800e052:	3740      	adds	r7, #64	; 0x40
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e058:	b480      	push	{r7}
 800e05a:	b087      	sub	sp, #28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	4613      	mov	r3, r2
 800e064:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e066:	2301      	movs	r3, #1
 800e068:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e06e:	4b1f      	ldr	r3, [pc, #124]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e070:	7a5b      	ldrb	r3, [r3, #9]
 800e072:	b2db      	uxtb	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	d131      	bne.n	800e0dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e078:	4b1c      	ldr	r3, [pc, #112]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e07a:	7a5b      	ldrb	r3, [r3, #9]
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	461a      	mov	r2, r3
 800e080:	4b1a      	ldr	r3, [pc, #104]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e082:	2100      	movs	r1, #0
 800e084:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e086:	4b19      	ldr	r3, [pc, #100]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e088:	7a5b      	ldrb	r3, [r3, #9]
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	4a17      	ldr	r2, [pc, #92]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e096:	4b15      	ldr	r3, [pc, #84]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e098:	7a5b      	ldrb	r3, [r3, #9]
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	461a      	mov	r2, r3
 800e09e:	4b13      	ldr	r3, [pc, #76]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e0a0:	4413      	add	r3, r2
 800e0a2:	79fa      	ldrb	r2, [r7, #7]
 800e0a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e0a6:	4b11      	ldr	r3, [pc, #68]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e0a8:	7a5b      	ldrb	r3, [r3, #9]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	1c5a      	adds	r2, r3, #1
 800e0ae:	b2d1      	uxtb	r1, r2
 800e0b0:	4a0e      	ldr	r2, [pc, #56]	; (800e0ec <FATFS_LinkDriverEx+0x94>)
 800e0b2:	7251      	strb	r1, [r2, #9]
 800e0b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e0b6:	7dbb      	ldrb	r3, [r7, #22]
 800e0b8:	3330      	adds	r3, #48	; 0x30
 800e0ba:	b2da      	uxtb	r2, r3
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e0c0:	68bb      	ldr	r3, [r7, #8]
 800e0c2:	3301      	adds	r3, #1
 800e0c4:	223a      	movs	r2, #58	; 0x3a
 800e0c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e0c8:	68bb      	ldr	r3, [r7, #8]
 800e0ca:	3302      	adds	r3, #2
 800e0cc:	222f      	movs	r2, #47	; 0x2f
 800e0ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	3303      	adds	r3, #3
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e0dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	371c      	adds	r7, #28
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e8:	4770      	bx	lr
 800e0ea:	bf00      	nop
 800e0ec:	20001384 	.word	0x20001384

0800e0f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
 800e0f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	6839      	ldr	r1, [r7, #0]
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f7ff ffaa 	bl	800e058 <FATFS_LinkDriverEx>
 800e104:	4603      	mov	r3, r0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
	...

0800e110 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e114:	2201      	movs	r2, #1
 800e116:	490e      	ldr	r1, [pc, #56]	; (800e150 <MX_USB_HOST_Init+0x40>)
 800e118:	480e      	ldr	r0, [pc, #56]	; (800e154 <MX_USB_HOST_Init+0x44>)
 800e11a:	f7fc f919 	bl	800a350 <USBH_Init>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d001      	beq.n	800e128 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e124:	f7f3 fa98 	bl	8001658 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e128:	490b      	ldr	r1, [pc, #44]	; (800e158 <MX_USB_HOST_Init+0x48>)
 800e12a:	480a      	ldr	r0, [pc, #40]	; (800e154 <MX_USB_HOST_Init+0x44>)
 800e12c:	f7fc f99e 	bl	800a46c <USBH_RegisterClass>
 800e130:	4603      	mov	r3, r0
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e136:	f7f3 fa8f 	bl	8001658 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e13a:	4806      	ldr	r0, [pc, #24]	; (800e154 <MX_USB_HOST_Init+0x44>)
 800e13c:	f7fc fa22 	bl	800a584 <USBH_Start>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e146:	f7f3 fa87 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e14a:	bf00      	nop
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	0800e171 	.word	0x0800e171
 800e154:	20001a18 	.word	0x20001a18
 800e158:	2000000c 	.word	0x2000000c

0800e15c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800e160:	4802      	ldr	r0, [pc, #8]	; (800e16c <MX_USB_HOST_Process+0x10>)
 800e162:	f7fc fa1f 	bl	800a5a4 <USBH_Process>
}
 800e166:	bf00      	nop
 800e168:	bd80      	pop	{r7, pc}
 800e16a:	bf00      	nop
 800e16c:	20001a18 	.word	0x20001a18

0800e170 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e170:	b480      	push	{r7}
 800e172:	b083      	sub	sp, #12
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
 800e178:	460b      	mov	r3, r1
 800e17a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e17c:	78fb      	ldrb	r3, [r7, #3]
 800e17e:	3b01      	subs	r3, #1
 800e180:	2b04      	cmp	r3, #4
 800e182:	d819      	bhi.n	800e1b8 <USBH_UserProcess+0x48>
 800e184:	a201      	add	r2, pc, #4	; (adr r2, 800e18c <USBH_UserProcess+0x1c>)
 800e186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18a:	bf00      	nop
 800e18c:	0800e1b9 	.word	0x0800e1b9
 800e190:	0800e1a9 	.word	0x0800e1a9
 800e194:	0800e1b9 	.word	0x0800e1b9
 800e198:	0800e1b1 	.word	0x0800e1b1
 800e19c:	0800e1a1 	.word	0x0800e1a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e1a0:	4b09      	ldr	r3, [pc, #36]	; (800e1c8 <USBH_UserProcess+0x58>)
 800e1a2:	2203      	movs	r2, #3
 800e1a4:	701a      	strb	r2, [r3, #0]
  break;
 800e1a6:	e008      	b.n	800e1ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e1a8:	4b07      	ldr	r3, [pc, #28]	; (800e1c8 <USBH_UserProcess+0x58>)
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	701a      	strb	r2, [r3, #0]
  break;
 800e1ae:	e004      	b.n	800e1ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e1b0:	4b05      	ldr	r3, [pc, #20]	; (800e1c8 <USBH_UserProcess+0x58>)
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	701a      	strb	r2, [r3, #0]
  break;
 800e1b6:	e000      	b.n	800e1ba <USBH_UserProcess+0x4a>

  default:
  break;
 800e1b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e1ba:	bf00      	nop
 800e1bc:	370c      	adds	r7, #12
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	20001390 	.word	0x20001390

0800e1cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08a      	sub	sp, #40	; 0x28
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1d4:	f107 0314 	add.w	r3, r7, #20
 800e1d8:	2200      	movs	r2, #0
 800e1da:	601a      	str	r2, [r3, #0]
 800e1dc:	605a      	str	r2, [r3, #4]
 800e1de:	609a      	str	r2, [r3, #8]
 800e1e0:	60da      	str	r2, [r3, #12]
 800e1e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e1ec:	d147      	bne.n	800e27e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	613b      	str	r3, [r7, #16]
 800e1f2:	4b25      	ldr	r3, [pc, #148]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f6:	4a24      	ldr	r2, [pc, #144]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e1f8:	f043 0301 	orr.w	r3, r3, #1
 800e1fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e1fe:	4b22      	ldr	r3, [pc, #136]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	613b      	str	r3, [r7, #16]
 800e208:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e20a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e20e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e210:	2300      	movs	r3, #0
 800e212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e214:	2300      	movs	r3, #0
 800e216:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e218:	f107 0314 	add.w	r3, r7, #20
 800e21c:	4619      	mov	r1, r3
 800e21e:	481b      	ldr	r0, [pc, #108]	; (800e28c <HAL_HCD_MspInit+0xc0>)
 800e220:	f7f4 fb04 	bl	800282c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e224:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e22a:	2302      	movs	r3, #2
 800e22c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e22e:	2300      	movs	r3, #0
 800e230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e232:	2303      	movs	r3, #3
 800e234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e236:	230a      	movs	r3, #10
 800e238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e23a:	f107 0314 	add.w	r3, r7, #20
 800e23e:	4619      	mov	r1, r3
 800e240:	4812      	ldr	r0, [pc, #72]	; (800e28c <HAL_HCD_MspInit+0xc0>)
 800e242:	f7f4 faf3 	bl	800282c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e246:	4b10      	ldr	r3, [pc, #64]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e24a:	4a0f      	ldr	r2, [pc, #60]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e24c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e250:	6353      	str	r3, [r2, #52]	; 0x34
 800e252:	2300      	movs	r3, #0
 800e254:	60fb      	str	r3, [r7, #12]
 800e256:	4b0c      	ldr	r3, [pc, #48]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e25a:	4a0b      	ldr	r2, [pc, #44]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e25c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e260:	6453      	str	r3, [r2, #68]	; 0x44
 800e262:	4b09      	ldr	r3, [pc, #36]	; (800e288 <HAL_HCD_MspInit+0xbc>)
 800e264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e26a:	60fb      	str	r3, [r7, #12]
 800e26c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e26e:	2200      	movs	r2, #0
 800e270:	2100      	movs	r1, #0
 800e272:	2043      	movs	r0, #67	; 0x43
 800e274:	f7f3 ff35 	bl	80020e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e278:	2043      	movs	r0, #67	; 0x43
 800e27a:	f7f3 ff4e 	bl	800211a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e27e:	bf00      	nop
 800e280:	3728      	adds	r7, #40	; 0x28
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	40023800 	.word	0x40023800
 800e28c:	40020000 	.word	0x40020000

0800e290 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fc fd53 	bl	800ad4a <USBH_LL_IncTimer>
}
 800e2a4:	bf00      	nop
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	f7fc fd8b 	bl	800add6 <USBH_LL_Connect>
}
 800e2c0:	bf00      	nop
 800e2c2:	3708      	adds	r7, #8
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}

0800e2c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fc fd94 	bl	800ae04 <USBH_LL_Disconnect>
}
 800e2dc:	bf00      	nop
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b083      	sub	sp, #12
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	70fb      	strb	r3, [r7, #3]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800e2f4:	bf00      	nop
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fc fd45 	bl	800ad9e <USBH_LL_PortEnabled>
} 
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7fc fd45 	bl	800adba <USBH_LL_PortDisabled>
} 
 800e330:	bf00      	nop
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}

0800e338 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e346:	2b01      	cmp	r3, #1
 800e348:	d12a      	bne.n	800e3a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800e34a:	4a18      	ldr	r2, [pc, #96]	; (800e3ac <USBH_LL_Init+0x74>)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	4a15      	ldr	r2, [pc, #84]	; (800e3ac <USBH_LL_Init+0x74>)
 800e356:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e35a:	4b14      	ldr	r3, [pc, #80]	; (800e3ac <USBH_LL_Init+0x74>)
 800e35c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e360:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800e362:	4b12      	ldr	r3, [pc, #72]	; (800e3ac <USBH_LL_Init+0x74>)
 800e364:	2208      	movs	r2, #8
 800e366:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800e368:	4b10      	ldr	r3, [pc, #64]	; (800e3ac <USBH_LL_Init+0x74>)
 800e36a:	2201      	movs	r2, #1
 800e36c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e36e:	4b0f      	ldr	r3, [pc, #60]	; (800e3ac <USBH_LL_Init+0x74>)
 800e370:	2200      	movs	r2, #0
 800e372:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800e374:	4b0d      	ldr	r3, [pc, #52]	; (800e3ac <USBH_LL_Init+0x74>)
 800e376:	2202      	movs	r2, #2
 800e378:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e37a:	4b0c      	ldr	r3, [pc, #48]	; (800e3ac <USBH_LL_Init+0x74>)
 800e37c:	2200      	movs	r2, #0
 800e37e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800e380:	480a      	ldr	r0, [pc, #40]	; (800e3ac <USBH_LL_Init+0x74>)
 800e382:	f7f4 fc2a 	bl	8002bda <HAL_HCD_Init>
 800e386:	4603      	mov	r3, r0
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d001      	beq.n	800e390 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800e38c:	f7f3 f964 	bl	8001658 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800e390:	4806      	ldr	r0, [pc, #24]	; (800e3ac <USBH_LL_Init+0x74>)
 800e392:	f7f5 f82d 	bl	80033f0 <HAL_HCD_GetCurrentFrame>
 800e396:	4603      	mov	r3, r0
 800e398:	4619      	mov	r1, r3
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7fc fcc6 	bl	800ad2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e3a0:	2300      	movs	r3, #0
}
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}
 800e3aa:	bf00      	nop
 800e3ac:	20001df0 	.word	0x20001df0

0800e3b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7f4 ff9a 	bl	8003300 <HAL_HCD_Start>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e3d0:	7bfb      	ldrb	r3, [r7, #15]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 f990 	bl	800e6f8 <USBH_Get_USB_Status>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b084      	sub	sp, #16
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f4 ffa2 	bl	8003346 <HAL_HCD_Stop>
 800e402:	4603      	mov	r3, r0
 800e404:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e406:	7bfb      	ldrb	r3, [r7, #15]
 800e408:	4618      	mov	r0, r3
 800e40a:	f000 f975 	bl	800e6f8 <USBH_Get_USB_Status>
 800e40e:	4603      	mov	r3, r0
 800e410:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800e412:	7bbb      	ldrb	r3, [r7, #14]
}
 800e414:	4618      	mov	r0, r3
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e424:	2301      	movs	r3, #1
 800e426:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f4 ffec 	bl	800340c <HAL_HCD_GetCurrentSpeed>
 800e434:	4603      	mov	r3, r0
 800e436:	2b01      	cmp	r3, #1
 800e438:	d007      	beq.n	800e44a <USBH_LL_GetSpeed+0x2e>
 800e43a:	2b01      	cmp	r3, #1
 800e43c:	d302      	bcc.n	800e444 <USBH_LL_GetSpeed+0x28>
 800e43e:	2b02      	cmp	r3, #2
 800e440:	d006      	beq.n	800e450 <USBH_LL_GetSpeed+0x34>
 800e442:	e008      	b.n	800e456 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e444:	2300      	movs	r3, #0
 800e446:	73fb      	strb	r3, [r7, #15]
    break;
 800e448:	e008      	b.n	800e45c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e44a:	2301      	movs	r3, #1
 800e44c:	73fb      	strb	r3, [r7, #15]
    break;
 800e44e:	e005      	b.n	800e45c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e450:	2302      	movs	r3, #2
 800e452:	73fb      	strb	r3, [r7, #15]
    break;
 800e454:	e002      	b.n	800e45c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800e456:	2301      	movs	r3, #1
 800e458:	73fb      	strb	r3, [r7, #15]
    break;
 800e45a:	bf00      	nop
  }
  return  speed;
 800e45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e466:	b580      	push	{r7, lr}
 800e468:	b084      	sub	sp, #16
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e46e:	2300      	movs	r3, #0
 800e470:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e472:	2300      	movs	r3, #0
 800e474:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e47c:	4618      	mov	r0, r3
 800e47e:	f7f4 ff7f 	bl	8003380 <HAL_HCD_ResetPort>
 800e482:	4603      	mov	r3, r0
 800e484:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800e486:	7bfb      	ldrb	r3, [r7, #15]
 800e488:	4618      	mov	r0, r3
 800e48a:	f000 f935 	bl	800e6f8 <USBH_Get_USB_Status>
 800e48e:	4603      	mov	r3, r0
 800e490:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e492:	7bbb      	ldrb	r3, [r7, #14]
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b082      	sub	sp, #8
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e4ae:	78fa      	ldrb	r2, [r7, #3]
 800e4b0:	4611      	mov	r1, r2
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	f7f4 ff87 	bl	80033c6 <HAL_HCD_HC_GetXferCount>
 800e4b8:	4603      	mov	r3, r0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}

0800e4c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e4c2:	b590      	push	{r4, r7, lr}
 800e4c4:	b089      	sub	sp, #36	; 0x24
 800e4c6:	af04      	add	r7, sp, #16
 800e4c8:	6078      	str	r0, [r7, #4]
 800e4ca:	4608      	mov	r0, r1
 800e4cc:	4611      	mov	r1, r2
 800e4ce:	461a      	mov	r2, r3
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	70fb      	strb	r3, [r7, #3]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	70bb      	strb	r3, [r7, #2]
 800e4d8:	4613      	mov	r3, r2
 800e4da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e4ea:	787c      	ldrb	r4, [r7, #1]
 800e4ec:	78ba      	ldrb	r2, [r7, #2]
 800e4ee:	78f9      	ldrb	r1, [r7, #3]
 800e4f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4f2:	9302      	str	r3, [sp, #8]
 800e4f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e4f8:	9301      	str	r3, [sp, #4]
 800e4fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	4623      	mov	r3, r4
 800e502:	f7f4 fbcc 	bl	8002c9e <HAL_HCD_HC_Init>
 800e506:	4603      	mov	r3, r0
 800e508:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e50a:	7bfb      	ldrb	r3, [r7, #15]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 f8f3 	bl	800e6f8 <USBH_Get_USB_Status>
 800e512:	4603      	mov	r3, r0
 800e514:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e516:	7bbb      	ldrb	r3, [r7, #14]
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd90      	pop	{r4, r7, pc}

0800e520 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b084      	sub	sp, #16
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e53a:	78fa      	ldrb	r2, [r7, #3]
 800e53c:	4611      	mov	r1, r2
 800e53e:	4618      	mov	r0, r3
 800e540:	f7f4 fc45 	bl	8002dce <HAL_HCD_HC_Halt>
 800e544:	4603      	mov	r3, r0
 800e546:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e548:	7bfb      	ldrb	r3, [r7, #15]
 800e54a:	4618      	mov	r0, r3
 800e54c:	f000 f8d4 	bl	800e6f8 <USBH_Get_USB_Status>
 800e550:	4603      	mov	r3, r0
 800e552:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e554:	7bbb      	ldrb	r3, [r7, #14]
}
 800e556:	4618      	mov	r0, r3
 800e558:	3710      	adds	r7, #16
 800e55a:	46bd      	mov	sp, r7
 800e55c:	bd80      	pop	{r7, pc}

0800e55e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e55e:	b590      	push	{r4, r7, lr}
 800e560:	b089      	sub	sp, #36	; 0x24
 800e562:	af04      	add	r7, sp, #16
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	4608      	mov	r0, r1
 800e568:	4611      	mov	r1, r2
 800e56a:	461a      	mov	r2, r3
 800e56c:	4603      	mov	r3, r0
 800e56e:	70fb      	strb	r3, [r7, #3]
 800e570:	460b      	mov	r3, r1
 800e572:	70bb      	strb	r3, [r7, #2]
 800e574:	4613      	mov	r3, r2
 800e576:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e586:	787c      	ldrb	r4, [r7, #1]
 800e588:	78ba      	ldrb	r2, [r7, #2]
 800e58a:	78f9      	ldrb	r1, [r7, #3]
 800e58c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e590:	9303      	str	r3, [sp, #12]
 800e592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e594:	9302      	str	r3, [sp, #8]
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	9301      	str	r3, [sp, #4]
 800e59a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e59e:	9300      	str	r3, [sp, #0]
 800e5a0:	4623      	mov	r3, r4
 800e5a2:	f7f4 fc37 	bl	8002e14 <HAL_HCD_HC_SubmitRequest>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f000 f8a3 	bl	800e6f8 <USBH_Get_USB_Status>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e5b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3714      	adds	r7, #20
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd90      	pop	{r4, r7, pc}

0800e5c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	460b      	mov	r3, r1
 800e5ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e5d2:	78fa      	ldrb	r2, [r7, #3]
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7f4 fee0 	bl	800339c <HAL_HCD_HC_GetURBState>
 800e5dc:	4603      	mov	r3, r0
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3708      	adds	r7, #8
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b082      	sub	sp, #8
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	6078      	str	r0, [r7, #4]
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e5f8:	2b01      	cmp	r3, #1
 800e5fa:	d103      	bne.n	800e604 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800e5fc:	78fb      	ldrb	r3, [r7, #3]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 f8a6 	bl	800e750 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e604:	20c8      	movs	r0, #200	; 0xc8
 800e606:	f7f3 fc6f 	bl	8001ee8 <HAL_Delay>
  return USBH_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e614:	b480      	push	{r7}
 800e616:	b085      	sub	sp, #20
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	70fb      	strb	r3, [r7, #3]
 800e620:	4613      	mov	r3, r2
 800e622:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e62a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e62c:	78fa      	ldrb	r2, [r7, #3]
 800e62e:	68f9      	ldr	r1, [r7, #12]
 800e630:	4613      	mov	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	4413      	add	r3, r2
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	440b      	add	r3, r1
 800e63a:	333b      	adds	r3, #59	; 0x3b
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d00a      	beq.n	800e658 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e642:	78fa      	ldrb	r2, [r7, #3]
 800e644:	68f9      	ldr	r1, [r7, #12]
 800e646:	4613      	mov	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	00db      	lsls	r3, r3, #3
 800e64e:	440b      	add	r3, r1
 800e650:	3350      	adds	r3, #80	; 0x50
 800e652:	78ba      	ldrb	r2, [r7, #2]
 800e654:	701a      	strb	r2, [r3, #0]
 800e656:	e009      	b.n	800e66c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e658:	78fa      	ldrb	r2, [r7, #3]
 800e65a:	68f9      	ldr	r1, [r7, #12]
 800e65c:	4613      	mov	r3, r2
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	4413      	add	r3, r2
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	440b      	add	r3, r1
 800e666:	3351      	adds	r3, #81	; 0x51
 800e668:	78ba      	ldrb	r2, [r7, #2]
 800e66a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3714      	adds	r7, #20
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e67a:	b480      	push	{r7}
 800e67c:	b085      	sub	sp, #20
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
 800e682:	460b      	mov	r3, r1
 800e684:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800e686:	2300      	movs	r3, #0
 800e688:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e690:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800e692:	78fa      	ldrb	r2, [r7, #3]
 800e694:	68b9      	ldr	r1, [r7, #8]
 800e696:	4613      	mov	r3, r2
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	00db      	lsls	r3, r3, #3
 800e69e:	440b      	add	r3, r1
 800e6a0:	333b      	adds	r3, #59	; 0x3b
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00a      	beq.n	800e6be <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800e6a8:	78fa      	ldrb	r2, [r7, #3]
 800e6aa:	68b9      	ldr	r1, [r7, #8]
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	009b      	lsls	r3, r3, #2
 800e6b0:	4413      	add	r3, r2
 800e6b2:	00db      	lsls	r3, r3, #3
 800e6b4:	440b      	add	r3, r1
 800e6b6:	3350      	adds	r3, #80	; 0x50
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	73fb      	strb	r3, [r7, #15]
 800e6bc:	e009      	b.n	800e6d2 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800e6be:	78fa      	ldrb	r2, [r7, #3]
 800e6c0:	68b9      	ldr	r1, [r7, #8]
 800e6c2:	4613      	mov	r3, r2
 800e6c4:	009b      	lsls	r3, r3, #2
 800e6c6:	4413      	add	r3, r2
 800e6c8:	00db      	lsls	r3, r3, #3
 800e6ca:	440b      	add	r3, r1
 800e6cc:	3351      	adds	r3, #81	; 0x51
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3714      	adds	r7, #20
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f7f3 fbfd 	bl	8001ee8 <HAL_Delay>
}
 800e6ee:	bf00      	nop
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
	...

0800e6f8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b085      	sub	sp, #20
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	4603      	mov	r3, r0
 800e700:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e706:	79fb      	ldrb	r3, [r7, #7]
 800e708:	2b03      	cmp	r3, #3
 800e70a:	d817      	bhi.n	800e73c <USBH_Get_USB_Status+0x44>
 800e70c:	a201      	add	r2, pc, #4	; (adr r2, 800e714 <USBH_Get_USB_Status+0x1c>)
 800e70e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e712:	bf00      	nop
 800e714:	0800e725 	.word	0x0800e725
 800e718:	0800e72b 	.word	0x0800e72b
 800e71c:	0800e731 	.word	0x0800e731
 800e720:	0800e737 	.word	0x0800e737
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e724:	2300      	movs	r3, #0
 800e726:	73fb      	strb	r3, [r7, #15]
    break;
 800e728:	e00b      	b.n	800e742 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e72a:	2302      	movs	r3, #2
 800e72c:	73fb      	strb	r3, [r7, #15]
    break;
 800e72e:	e008      	b.n	800e742 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e730:	2301      	movs	r3, #1
 800e732:	73fb      	strb	r3, [r7, #15]
    break;
 800e734:	e005      	b.n	800e742 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e736:	2302      	movs	r3, #2
 800e738:	73fb      	strb	r3, [r7, #15]
    break;
 800e73a:	e002      	b.n	800e742 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e73c:	2302      	movs	r3, #2
 800e73e:	73fb      	strb	r3, [r7, #15]
    break;
 800e740:	bf00      	nop
  }
  return usb_status;
 800e742:	7bfb      	ldrb	r3, [r7, #15]
}
 800e744:	4618      	mov	r0, r3
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr

0800e750 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800e75a:	79fb      	ldrb	r3, [r7, #7]
 800e75c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e75e:	79fb      	ldrb	r3, [r7, #7]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d102      	bne.n	800e76a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800e764:	2301      	movs	r3, #1
 800e766:	73fb      	strb	r3, [r7, #15]
 800e768:	e001      	b.n	800e76e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
 800e770:	461a      	mov	r2, r3
 800e772:	2101      	movs	r1, #1
 800e774:	4803      	ldr	r0, [pc, #12]	; (800e784 <MX_DriverVbusFS+0x34>)
 800e776:	f7f4 f9f3 	bl	8002b60 <HAL_GPIO_WritePin>
}
 800e77a:	bf00      	nop
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	40020800 	.word	0x40020800

0800e788 <__errno>:
 800e788:	4b01      	ldr	r3, [pc, #4]	; (800e790 <__errno+0x8>)
 800e78a:	6818      	ldr	r0, [r3, #0]
 800e78c:	4770      	bx	lr
 800e78e:	bf00      	nop
 800e790:	2000002c 	.word	0x2000002c

0800e794 <__libc_init_array>:
 800e794:	b570      	push	{r4, r5, r6, lr}
 800e796:	4e0d      	ldr	r6, [pc, #52]	; (800e7cc <__libc_init_array+0x38>)
 800e798:	4c0d      	ldr	r4, [pc, #52]	; (800e7d0 <__libc_init_array+0x3c>)
 800e79a:	1ba4      	subs	r4, r4, r6
 800e79c:	10a4      	asrs	r4, r4, #2
 800e79e:	2500      	movs	r5, #0
 800e7a0:	42a5      	cmp	r5, r4
 800e7a2:	d109      	bne.n	800e7b8 <__libc_init_array+0x24>
 800e7a4:	4e0b      	ldr	r6, [pc, #44]	; (800e7d4 <__libc_init_array+0x40>)
 800e7a6:	4c0c      	ldr	r4, [pc, #48]	; (800e7d8 <__libc_init_array+0x44>)
 800e7a8:	f000 fc38 	bl	800f01c <_init>
 800e7ac:	1ba4      	subs	r4, r4, r6
 800e7ae:	10a4      	asrs	r4, r4, #2
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	42a5      	cmp	r5, r4
 800e7b4:	d105      	bne.n	800e7c2 <__libc_init_array+0x2e>
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
 800e7b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e7bc:	4798      	blx	r3
 800e7be:	3501      	adds	r5, #1
 800e7c0:	e7ee      	b.n	800e7a0 <__libc_init_array+0xc>
 800e7c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e7c6:	4798      	blx	r3
 800e7c8:	3501      	adds	r5, #1
 800e7ca:	e7f2      	b.n	800e7b2 <__libc_init_array+0x1e>
 800e7cc:	0800f208 	.word	0x0800f208
 800e7d0:	0800f208 	.word	0x0800f208
 800e7d4:	0800f208 	.word	0x0800f208
 800e7d8:	0800f20c 	.word	0x0800f20c

0800e7dc <malloc>:
 800e7dc:	4b02      	ldr	r3, [pc, #8]	; (800e7e8 <malloc+0xc>)
 800e7de:	4601      	mov	r1, r0
 800e7e0:	6818      	ldr	r0, [r3, #0]
 800e7e2:	f000 b86d 	b.w	800e8c0 <_malloc_r>
 800e7e6:	bf00      	nop
 800e7e8:	2000002c 	.word	0x2000002c

0800e7ec <free>:
 800e7ec:	4b02      	ldr	r3, [pc, #8]	; (800e7f8 <free+0xc>)
 800e7ee:	4601      	mov	r1, r0
 800e7f0:	6818      	ldr	r0, [r3, #0]
 800e7f2:	f000 b817 	b.w	800e824 <_free_r>
 800e7f6:	bf00      	nop
 800e7f8:	2000002c 	.word	0x2000002c

0800e7fc <memcpy>:
 800e7fc:	b510      	push	{r4, lr}
 800e7fe:	1e43      	subs	r3, r0, #1
 800e800:	440a      	add	r2, r1
 800e802:	4291      	cmp	r1, r2
 800e804:	d100      	bne.n	800e808 <memcpy+0xc>
 800e806:	bd10      	pop	{r4, pc}
 800e808:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e80c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e810:	e7f7      	b.n	800e802 <memcpy+0x6>

0800e812 <memset>:
 800e812:	4402      	add	r2, r0
 800e814:	4603      	mov	r3, r0
 800e816:	4293      	cmp	r3, r2
 800e818:	d100      	bne.n	800e81c <memset+0xa>
 800e81a:	4770      	bx	lr
 800e81c:	f803 1b01 	strb.w	r1, [r3], #1
 800e820:	e7f9      	b.n	800e816 <memset+0x4>
	...

0800e824 <_free_r>:
 800e824:	b538      	push	{r3, r4, r5, lr}
 800e826:	4605      	mov	r5, r0
 800e828:	2900      	cmp	r1, #0
 800e82a:	d045      	beq.n	800e8b8 <_free_r+0x94>
 800e82c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e830:	1f0c      	subs	r4, r1, #4
 800e832:	2b00      	cmp	r3, #0
 800e834:	bfb8      	it	lt
 800e836:	18e4      	addlt	r4, r4, r3
 800e838:	f000 f8cc 	bl	800e9d4 <__malloc_lock>
 800e83c:	4a1f      	ldr	r2, [pc, #124]	; (800e8bc <_free_r+0x98>)
 800e83e:	6813      	ldr	r3, [r2, #0]
 800e840:	4610      	mov	r0, r2
 800e842:	b933      	cbnz	r3, 800e852 <_free_r+0x2e>
 800e844:	6063      	str	r3, [r4, #4]
 800e846:	6014      	str	r4, [r2, #0]
 800e848:	4628      	mov	r0, r5
 800e84a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e84e:	f000 b8c2 	b.w	800e9d6 <__malloc_unlock>
 800e852:	42a3      	cmp	r3, r4
 800e854:	d90c      	bls.n	800e870 <_free_r+0x4c>
 800e856:	6821      	ldr	r1, [r4, #0]
 800e858:	1862      	adds	r2, r4, r1
 800e85a:	4293      	cmp	r3, r2
 800e85c:	bf04      	itt	eq
 800e85e:	681a      	ldreq	r2, [r3, #0]
 800e860:	685b      	ldreq	r3, [r3, #4]
 800e862:	6063      	str	r3, [r4, #4]
 800e864:	bf04      	itt	eq
 800e866:	1852      	addeq	r2, r2, r1
 800e868:	6022      	streq	r2, [r4, #0]
 800e86a:	6004      	str	r4, [r0, #0]
 800e86c:	e7ec      	b.n	800e848 <_free_r+0x24>
 800e86e:	4613      	mov	r3, r2
 800e870:	685a      	ldr	r2, [r3, #4]
 800e872:	b10a      	cbz	r2, 800e878 <_free_r+0x54>
 800e874:	42a2      	cmp	r2, r4
 800e876:	d9fa      	bls.n	800e86e <_free_r+0x4a>
 800e878:	6819      	ldr	r1, [r3, #0]
 800e87a:	1858      	adds	r0, r3, r1
 800e87c:	42a0      	cmp	r0, r4
 800e87e:	d10b      	bne.n	800e898 <_free_r+0x74>
 800e880:	6820      	ldr	r0, [r4, #0]
 800e882:	4401      	add	r1, r0
 800e884:	1858      	adds	r0, r3, r1
 800e886:	4282      	cmp	r2, r0
 800e888:	6019      	str	r1, [r3, #0]
 800e88a:	d1dd      	bne.n	800e848 <_free_r+0x24>
 800e88c:	6810      	ldr	r0, [r2, #0]
 800e88e:	6852      	ldr	r2, [r2, #4]
 800e890:	605a      	str	r2, [r3, #4]
 800e892:	4401      	add	r1, r0
 800e894:	6019      	str	r1, [r3, #0]
 800e896:	e7d7      	b.n	800e848 <_free_r+0x24>
 800e898:	d902      	bls.n	800e8a0 <_free_r+0x7c>
 800e89a:	230c      	movs	r3, #12
 800e89c:	602b      	str	r3, [r5, #0]
 800e89e:	e7d3      	b.n	800e848 <_free_r+0x24>
 800e8a0:	6820      	ldr	r0, [r4, #0]
 800e8a2:	1821      	adds	r1, r4, r0
 800e8a4:	428a      	cmp	r2, r1
 800e8a6:	bf04      	itt	eq
 800e8a8:	6811      	ldreq	r1, [r2, #0]
 800e8aa:	6852      	ldreq	r2, [r2, #4]
 800e8ac:	6062      	str	r2, [r4, #4]
 800e8ae:	bf04      	itt	eq
 800e8b0:	1809      	addeq	r1, r1, r0
 800e8b2:	6021      	streq	r1, [r4, #0]
 800e8b4:	605c      	str	r4, [r3, #4]
 800e8b6:	e7c7      	b.n	800e848 <_free_r+0x24>
 800e8b8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ba:	bf00      	nop
 800e8bc:	20001394 	.word	0x20001394

0800e8c0 <_malloc_r>:
 800e8c0:	b570      	push	{r4, r5, r6, lr}
 800e8c2:	1ccd      	adds	r5, r1, #3
 800e8c4:	f025 0503 	bic.w	r5, r5, #3
 800e8c8:	3508      	adds	r5, #8
 800e8ca:	2d0c      	cmp	r5, #12
 800e8cc:	bf38      	it	cc
 800e8ce:	250c      	movcc	r5, #12
 800e8d0:	2d00      	cmp	r5, #0
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	db01      	blt.n	800e8da <_malloc_r+0x1a>
 800e8d6:	42a9      	cmp	r1, r5
 800e8d8:	d903      	bls.n	800e8e2 <_malloc_r+0x22>
 800e8da:	230c      	movs	r3, #12
 800e8dc:	6033      	str	r3, [r6, #0]
 800e8de:	2000      	movs	r0, #0
 800e8e0:	bd70      	pop	{r4, r5, r6, pc}
 800e8e2:	f000 f877 	bl	800e9d4 <__malloc_lock>
 800e8e6:	4a21      	ldr	r2, [pc, #132]	; (800e96c <_malloc_r+0xac>)
 800e8e8:	6814      	ldr	r4, [r2, #0]
 800e8ea:	4621      	mov	r1, r4
 800e8ec:	b991      	cbnz	r1, 800e914 <_malloc_r+0x54>
 800e8ee:	4c20      	ldr	r4, [pc, #128]	; (800e970 <_malloc_r+0xb0>)
 800e8f0:	6823      	ldr	r3, [r4, #0]
 800e8f2:	b91b      	cbnz	r3, 800e8fc <_malloc_r+0x3c>
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	f000 f83d 	bl	800e974 <_sbrk_r>
 800e8fa:	6020      	str	r0, [r4, #0]
 800e8fc:	4629      	mov	r1, r5
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 f838 	bl	800e974 <_sbrk_r>
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	d124      	bne.n	800e952 <_malloc_r+0x92>
 800e908:	230c      	movs	r3, #12
 800e90a:	6033      	str	r3, [r6, #0]
 800e90c:	4630      	mov	r0, r6
 800e90e:	f000 f862 	bl	800e9d6 <__malloc_unlock>
 800e912:	e7e4      	b.n	800e8de <_malloc_r+0x1e>
 800e914:	680b      	ldr	r3, [r1, #0]
 800e916:	1b5b      	subs	r3, r3, r5
 800e918:	d418      	bmi.n	800e94c <_malloc_r+0x8c>
 800e91a:	2b0b      	cmp	r3, #11
 800e91c:	d90f      	bls.n	800e93e <_malloc_r+0x7e>
 800e91e:	600b      	str	r3, [r1, #0]
 800e920:	50cd      	str	r5, [r1, r3]
 800e922:	18cc      	adds	r4, r1, r3
 800e924:	4630      	mov	r0, r6
 800e926:	f000 f856 	bl	800e9d6 <__malloc_unlock>
 800e92a:	f104 000b 	add.w	r0, r4, #11
 800e92e:	1d23      	adds	r3, r4, #4
 800e930:	f020 0007 	bic.w	r0, r0, #7
 800e934:	1ac3      	subs	r3, r0, r3
 800e936:	d0d3      	beq.n	800e8e0 <_malloc_r+0x20>
 800e938:	425a      	negs	r2, r3
 800e93a:	50e2      	str	r2, [r4, r3]
 800e93c:	e7d0      	b.n	800e8e0 <_malloc_r+0x20>
 800e93e:	428c      	cmp	r4, r1
 800e940:	684b      	ldr	r3, [r1, #4]
 800e942:	bf16      	itet	ne
 800e944:	6063      	strne	r3, [r4, #4]
 800e946:	6013      	streq	r3, [r2, #0]
 800e948:	460c      	movne	r4, r1
 800e94a:	e7eb      	b.n	800e924 <_malloc_r+0x64>
 800e94c:	460c      	mov	r4, r1
 800e94e:	6849      	ldr	r1, [r1, #4]
 800e950:	e7cc      	b.n	800e8ec <_malloc_r+0x2c>
 800e952:	1cc4      	adds	r4, r0, #3
 800e954:	f024 0403 	bic.w	r4, r4, #3
 800e958:	42a0      	cmp	r0, r4
 800e95a:	d005      	beq.n	800e968 <_malloc_r+0xa8>
 800e95c:	1a21      	subs	r1, r4, r0
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 f808 	bl	800e974 <_sbrk_r>
 800e964:	3001      	adds	r0, #1
 800e966:	d0cf      	beq.n	800e908 <_malloc_r+0x48>
 800e968:	6025      	str	r5, [r4, #0]
 800e96a:	e7db      	b.n	800e924 <_malloc_r+0x64>
 800e96c:	20001394 	.word	0x20001394
 800e970:	20001398 	.word	0x20001398

0800e974 <_sbrk_r>:
 800e974:	b538      	push	{r3, r4, r5, lr}
 800e976:	4c06      	ldr	r4, [pc, #24]	; (800e990 <_sbrk_r+0x1c>)
 800e978:	2300      	movs	r3, #0
 800e97a:	4605      	mov	r5, r0
 800e97c:	4608      	mov	r0, r1
 800e97e:	6023      	str	r3, [r4, #0]
 800e980:	f7f3 f8dc 	bl	8001b3c <_sbrk>
 800e984:	1c43      	adds	r3, r0, #1
 800e986:	d102      	bne.n	800e98e <_sbrk_r+0x1a>
 800e988:	6823      	ldr	r3, [r4, #0]
 800e98a:	b103      	cbz	r3, 800e98e <_sbrk_r+0x1a>
 800e98c:	602b      	str	r3, [r5, #0]
 800e98e:	bd38      	pop	{r3, r4, r5, pc}
 800e990:	200020b4 	.word	0x200020b4

0800e994 <_vsiprintf_r>:
 800e994:	b500      	push	{lr}
 800e996:	b09b      	sub	sp, #108	; 0x6c
 800e998:	9100      	str	r1, [sp, #0]
 800e99a:	9104      	str	r1, [sp, #16]
 800e99c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e9a0:	9105      	str	r1, [sp, #20]
 800e9a2:	9102      	str	r1, [sp, #8]
 800e9a4:	4905      	ldr	r1, [pc, #20]	; (800e9bc <_vsiprintf_r+0x28>)
 800e9a6:	9103      	str	r1, [sp, #12]
 800e9a8:	4669      	mov	r1, sp
 800e9aa:	f000 f86f 	bl	800ea8c <_svfiprintf_r>
 800e9ae:	9b00      	ldr	r3, [sp, #0]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	701a      	strb	r2, [r3, #0]
 800e9b4:	b01b      	add	sp, #108	; 0x6c
 800e9b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9ba:	bf00      	nop
 800e9bc:	ffff0208 	.word	0xffff0208

0800e9c0 <vsiprintf>:
 800e9c0:	4613      	mov	r3, r2
 800e9c2:	460a      	mov	r2, r1
 800e9c4:	4601      	mov	r1, r0
 800e9c6:	4802      	ldr	r0, [pc, #8]	; (800e9d0 <vsiprintf+0x10>)
 800e9c8:	6800      	ldr	r0, [r0, #0]
 800e9ca:	f7ff bfe3 	b.w	800e994 <_vsiprintf_r>
 800e9ce:	bf00      	nop
 800e9d0:	2000002c 	.word	0x2000002c

0800e9d4 <__malloc_lock>:
 800e9d4:	4770      	bx	lr

0800e9d6 <__malloc_unlock>:
 800e9d6:	4770      	bx	lr

0800e9d8 <__ssputs_r>:
 800e9d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9dc:	688e      	ldr	r6, [r1, #8]
 800e9de:	429e      	cmp	r6, r3
 800e9e0:	4682      	mov	sl, r0
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	4690      	mov	r8, r2
 800e9e6:	4699      	mov	r9, r3
 800e9e8:	d837      	bhi.n	800ea5a <__ssputs_r+0x82>
 800e9ea:	898a      	ldrh	r2, [r1, #12]
 800e9ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9f0:	d031      	beq.n	800ea56 <__ssputs_r+0x7e>
 800e9f2:	6825      	ldr	r5, [r4, #0]
 800e9f4:	6909      	ldr	r1, [r1, #16]
 800e9f6:	1a6f      	subs	r7, r5, r1
 800e9f8:	6965      	ldr	r5, [r4, #20]
 800e9fa:	2302      	movs	r3, #2
 800e9fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea00:	fb95 f5f3 	sdiv	r5, r5, r3
 800ea04:	f109 0301 	add.w	r3, r9, #1
 800ea08:	443b      	add	r3, r7
 800ea0a:	429d      	cmp	r5, r3
 800ea0c:	bf38      	it	cc
 800ea0e:	461d      	movcc	r5, r3
 800ea10:	0553      	lsls	r3, r2, #21
 800ea12:	d530      	bpl.n	800ea76 <__ssputs_r+0x9e>
 800ea14:	4629      	mov	r1, r5
 800ea16:	f7ff ff53 	bl	800e8c0 <_malloc_r>
 800ea1a:	4606      	mov	r6, r0
 800ea1c:	b950      	cbnz	r0, 800ea34 <__ssputs_r+0x5c>
 800ea1e:	230c      	movs	r3, #12
 800ea20:	f8ca 3000 	str.w	r3, [sl]
 800ea24:	89a3      	ldrh	r3, [r4, #12]
 800ea26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2a:	81a3      	strh	r3, [r4, #12]
 800ea2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea34:	463a      	mov	r2, r7
 800ea36:	6921      	ldr	r1, [r4, #16]
 800ea38:	f7ff fee0 	bl	800e7fc <memcpy>
 800ea3c:	89a3      	ldrh	r3, [r4, #12]
 800ea3e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea46:	81a3      	strh	r3, [r4, #12]
 800ea48:	6126      	str	r6, [r4, #16]
 800ea4a:	6165      	str	r5, [r4, #20]
 800ea4c:	443e      	add	r6, r7
 800ea4e:	1bed      	subs	r5, r5, r7
 800ea50:	6026      	str	r6, [r4, #0]
 800ea52:	60a5      	str	r5, [r4, #8]
 800ea54:	464e      	mov	r6, r9
 800ea56:	454e      	cmp	r6, r9
 800ea58:	d900      	bls.n	800ea5c <__ssputs_r+0x84>
 800ea5a:	464e      	mov	r6, r9
 800ea5c:	4632      	mov	r2, r6
 800ea5e:	4641      	mov	r1, r8
 800ea60:	6820      	ldr	r0, [r4, #0]
 800ea62:	f000 fa93 	bl	800ef8c <memmove>
 800ea66:	68a3      	ldr	r3, [r4, #8]
 800ea68:	1b9b      	subs	r3, r3, r6
 800ea6a:	60a3      	str	r3, [r4, #8]
 800ea6c:	6823      	ldr	r3, [r4, #0]
 800ea6e:	441e      	add	r6, r3
 800ea70:	6026      	str	r6, [r4, #0]
 800ea72:	2000      	movs	r0, #0
 800ea74:	e7dc      	b.n	800ea30 <__ssputs_r+0x58>
 800ea76:	462a      	mov	r2, r5
 800ea78:	f000 faa1 	bl	800efbe <_realloc_r>
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	d1e2      	bne.n	800ea48 <__ssputs_r+0x70>
 800ea82:	6921      	ldr	r1, [r4, #16]
 800ea84:	4650      	mov	r0, sl
 800ea86:	f7ff fecd 	bl	800e824 <_free_r>
 800ea8a:	e7c8      	b.n	800ea1e <__ssputs_r+0x46>

0800ea8c <_svfiprintf_r>:
 800ea8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea90:	461d      	mov	r5, r3
 800ea92:	898b      	ldrh	r3, [r1, #12]
 800ea94:	061f      	lsls	r7, r3, #24
 800ea96:	b09d      	sub	sp, #116	; 0x74
 800ea98:	4680      	mov	r8, r0
 800ea9a:	460c      	mov	r4, r1
 800ea9c:	4616      	mov	r6, r2
 800ea9e:	d50f      	bpl.n	800eac0 <_svfiprintf_r+0x34>
 800eaa0:	690b      	ldr	r3, [r1, #16]
 800eaa2:	b96b      	cbnz	r3, 800eac0 <_svfiprintf_r+0x34>
 800eaa4:	2140      	movs	r1, #64	; 0x40
 800eaa6:	f7ff ff0b 	bl	800e8c0 <_malloc_r>
 800eaaa:	6020      	str	r0, [r4, #0]
 800eaac:	6120      	str	r0, [r4, #16]
 800eaae:	b928      	cbnz	r0, 800eabc <_svfiprintf_r+0x30>
 800eab0:	230c      	movs	r3, #12
 800eab2:	f8c8 3000 	str.w	r3, [r8]
 800eab6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaba:	e0c8      	b.n	800ec4e <_svfiprintf_r+0x1c2>
 800eabc:	2340      	movs	r3, #64	; 0x40
 800eabe:	6163      	str	r3, [r4, #20]
 800eac0:	2300      	movs	r3, #0
 800eac2:	9309      	str	r3, [sp, #36]	; 0x24
 800eac4:	2320      	movs	r3, #32
 800eac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaca:	2330      	movs	r3, #48	; 0x30
 800eacc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ead0:	9503      	str	r5, [sp, #12]
 800ead2:	f04f 0b01 	mov.w	fp, #1
 800ead6:	4637      	mov	r7, r6
 800ead8:	463d      	mov	r5, r7
 800eada:	f815 3b01 	ldrb.w	r3, [r5], #1
 800eade:	b10b      	cbz	r3, 800eae4 <_svfiprintf_r+0x58>
 800eae0:	2b25      	cmp	r3, #37	; 0x25
 800eae2:	d13e      	bne.n	800eb62 <_svfiprintf_r+0xd6>
 800eae4:	ebb7 0a06 	subs.w	sl, r7, r6
 800eae8:	d00b      	beq.n	800eb02 <_svfiprintf_r+0x76>
 800eaea:	4653      	mov	r3, sl
 800eaec:	4632      	mov	r2, r6
 800eaee:	4621      	mov	r1, r4
 800eaf0:	4640      	mov	r0, r8
 800eaf2:	f7ff ff71 	bl	800e9d8 <__ssputs_r>
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	f000 80a4 	beq.w	800ec44 <_svfiprintf_r+0x1b8>
 800eafc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eafe:	4453      	add	r3, sl
 800eb00:	9309      	str	r3, [sp, #36]	; 0x24
 800eb02:	783b      	ldrb	r3, [r7, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 809d 	beq.w	800ec44 <_svfiprintf_r+0x1b8>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	f04f 32ff 	mov.w	r2, #4294967295
 800eb10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb14:	9304      	str	r3, [sp, #16]
 800eb16:	9307      	str	r3, [sp, #28]
 800eb18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb1c:	931a      	str	r3, [sp, #104]	; 0x68
 800eb1e:	462f      	mov	r7, r5
 800eb20:	2205      	movs	r2, #5
 800eb22:	f817 1b01 	ldrb.w	r1, [r7], #1
 800eb26:	4850      	ldr	r0, [pc, #320]	; (800ec68 <_svfiprintf_r+0x1dc>)
 800eb28:	f7f1 fb62 	bl	80001f0 <memchr>
 800eb2c:	9b04      	ldr	r3, [sp, #16]
 800eb2e:	b9d0      	cbnz	r0, 800eb66 <_svfiprintf_r+0xda>
 800eb30:	06d9      	lsls	r1, r3, #27
 800eb32:	bf44      	itt	mi
 800eb34:	2220      	movmi	r2, #32
 800eb36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb3a:	071a      	lsls	r2, r3, #28
 800eb3c:	bf44      	itt	mi
 800eb3e:	222b      	movmi	r2, #43	; 0x2b
 800eb40:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eb44:	782a      	ldrb	r2, [r5, #0]
 800eb46:	2a2a      	cmp	r2, #42	; 0x2a
 800eb48:	d015      	beq.n	800eb76 <_svfiprintf_r+0xea>
 800eb4a:	9a07      	ldr	r2, [sp, #28]
 800eb4c:	462f      	mov	r7, r5
 800eb4e:	2000      	movs	r0, #0
 800eb50:	250a      	movs	r5, #10
 800eb52:	4639      	mov	r1, r7
 800eb54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb58:	3b30      	subs	r3, #48	; 0x30
 800eb5a:	2b09      	cmp	r3, #9
 800eb5c:	d94d      	bls.n	800ebfa <_svfiprintf_r+0x16e>
 800eb5e:	b1b8      	cbz	r0, 800eb90 <_svfiprintf_r+0x104>
 800eb60:	e00f      	b.n	800eb82 <_svfiprintf_r+0xf6>
 800eb62:	462f      	mov	r7, r5
 800eb64:	e7b8      	b.n	800ead8 <_svfiprintf_r+0x4c>
 800eb66:	4a40      	ldr	r2, [pc, #256]	; (800ec68 <_svfiprintf_r+0x1dc>)
 800eb68:	1a80      	subs	r0, r0, r2
 800eb6a:	fa0b f000 	lsl.w	r0, fp, r0
 800eb6e:	4318      	orrs	r0, r3
 800eb70:	9004      	str	r0, [sp, #16]
 800eb72:	463d      	mov	r5, r7
 800eb74:	e7d3      	b.n	800eb1e <_svfiprintf_r+0x92>
 800eb76:	9a03      	ldr	r2, [sp, #12]
 800eb78:	1d11      	adds	r1, r2, #4
 800eb7a:	6812      	ldr	r2, [r2, #0]
 800eb7c:	9103      	str	r1, [sp, #12]
 800eb7e:	2a00      	cmp	r2, #0
 800eb80:	db01      	blt.n	800eb86 <_svfiprintf_r+0xfa>
 800eb82:	9207      	str	r2, [sp, #28]
 800eb84:	e004      	b.n	800eb90 <_svfiprintf_r+0x104>
 800eb86:	4252      	negs	r2, r2
 800eb88:	f043 0302 	orr.w	r3, r3, #2
 800eb8c:	9207      	str	r2, [sp, #28]
 800eb8e:	9304      	str	r3, [sp, #16]
 800eb90:	783b      	ldrb	r3, [r7, #0]
 800eb92:	2b2e      	cmp	r3, #46	; 0x2e
 800eb94:	d10c      	bne.n	800ebb0 <_svfiprintf_r+0x124>
 800eb96:	787b      	ldrb	r3, [r7, #1]
 800eb98:	2b2a      	cmp	r3, #42	; 0x2a
 800eb9a:	d133      	bne.n	800ec04 <_svfiprintf_r+0x178>
 800eb9c:	9b03      	ldr	r3, [sp, #12]
 800eb9e:	1d1a      	adds	r2, r3, #4
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	9203      	str	r2, [sp, #12]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	bfb8      	it	lt
 800eba8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebac:	3702      	adds	r7, #2
 800ebae:	9305      	str	r3, [sp, #20]
 800ebb0:	4d2e      	ldr	r5, [pc, #184]	; (800ec6c <_svfiprintf_r+0x1e0>)
 800ebb2:	7839      	ldrb	r1, [r7, #0]
 800ebb4:	2203      	movs	r2, #3
 800ebb6:	4628      	mov	r0, r5
 800ebb8:	f7f1 fb1a 	bl	80001f0 <memchr>
 800ebbc:	b138      	cbz	r0, 800ebce <_svfiprintf_r+0x142>
 800ebbe:	2340      	movs	r3, #64	; 0x40
 800ebc0:	1b40      	subs	r0, r0, r5
 800ebc2:	fa03 f000 	lsl.w	r0, r3, r0
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	4303      	orrs	r3, r0
 800ebca:	3701      	adds	r7, #1
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	7839      	ldrb	r1, [r7, #0]
 800ebd0:	4827      	ldr	r0, [pc, #156]	; (800ec70 <_svfiprintf_r+0x1e4>)
 800ebd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebd6:	2206      	movs	r2, #6
 800ebd8:	1c7e      	adds	r6, r7, #1
 800ebda:	f7f1 fb09 	bl	80001f0 <memchr>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d038      	beq.n	800ec54 <_svfiprintf_r+0x1c8>
 800ebe2:	4b24      	ldr	r3, [pc, #144]	; (800ec74 <_svfiprintf_r+0x1e8>)
 800ebe4:	bb13      	cbnz	r3, 800ec2c <_svfiprintf_r+0x1a0>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	3307      	adds	r3, #7
 800ebea:	f023 0307 	bic.w	r3, r3, #7
 800ebee:	3308      	adds	r3, #8
 800ebf0:	9303      	str	r3, [sp, #12]
 800ebf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebf4:	444b      	add	r3, r9
 800ebf6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebf8:	e76d      	b.n	800ead6 <_svfiprintf_r+0x4a>
 800ebfa:	fb05 3202 	mla	r2, r5, r2, r3
 800ebfe:	2001      	movs	r0, #1
 800ec00:	460f      	mov	r7, r1
 800ec02:	e7a6      	b.n	800eb52 <_svfiprintf_r+0xc6>
 800ec04:	2300      	movs	r3, #0
 800ec06:	3701      	adds	r7, #1
 800ec08:	9305      	str	r3, [sp, #20]
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	250a      	movs	r5, #10
 800ec0e:	4638      	mov	r0, r7
 800ec10:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec14:	3a30      	subs	r2, #48	; 0x30
 800ec16:	2a09      	cmp	r2, #9
 800ec18:	d903      	bls.n	800ec22 <_svfiprintf_r+0x196>
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d0c8      	beq.n	800ebb0 <_svfiprintf_r+0x124>
 800ec1e:	9105      	str	r1, [sp, #20]
 800ec20:	e7c6      	b.n	800ebb0 <_svfiprintf_r+0x124>
 800ec22:	fb05 2101 	mla	r1, r5, r1, r2
 800ec26:	2301      	movs	r3, #1
 800ec28:	4607      	mov	r7, r0
 800ec2a:	e7f0      	b.n	800ec0e <_svfiprintf_r+0x182>
 800ec2c:	ab03      	add	r3, sp, #12
 800ec2e:	9300      	str	r3, [sp, #0]
 800ec30:	4622      	mov	r2, r4
 800ec32:	4b11      	ldr	r3, [pc, #68]	; (800ec78 <_svfiprintf_r+0x1ec>)
 800ec34:	a904      	add	r1, sp, #16
 800ec36:	4640      	mov	r0, r8
 800ec38:	f3af 8000 	nop.w
 800ec3c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ec40:	4681      	mov	r9, r0
 800ec42:	d1d6      	bne.n	800ebf2 <_svfiprintf_r+0x166>
 800ec44:	89a3      	ldrh	r3, [r4, #12]
 800ec46:	065b      	lsls	r3, r3, #25
 800ec48:	f53f af35 	bmi.w	800eab6 <_svfiprintf_r+0x2a>
 800ec4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec4e:	b01d      	add	sp, #116	; 0x74
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	ab03      	add	r3, sp, #12
 800ec56:	9300      	str	r3, [sp, #0]
 800ec58:	4622      	mov	r2, r4
 800ec5a:	4b07      	ldr	r3, [pc, #28]	; (800ec78 <_svfiprintf_r+0x1ec>)
 800ec5c:	a904      	add	r1, sp, #16
 800ec5e:	4640      	mov	r0, r8
 800ec60:	f000 f882 	bl	800ed68 <_printf_i>
 800ec64:	e7ea      	b.n	800ec3c <_svfiprintf_r+0x1b0>
 800ec66:	bf00      	nop
 800ec68:	0800f1cc 	.word	0x0800f1cc
 800ec6c:	0800f1d2 	.word	0x0800f1d2
 800ec70:	0800f1d6 	.word	0x0800f1d6
 800ec74:	00000000 	.word	0x00000000
 800ec78:	0800e9d9 	.word	0x0800e9d9

0800ec7c <_printf_common>:
 800ec7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec80:	4691      	mov	r9, r2
 800ec82:	461f      	mov	r7, r3
 800ec84:	688a      	ldr	r2, [r1, #8]
 800ec86:	690b      	ldr	r3, [r1, #16]
 800ec88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec8c:	4293      	cmp	r3, r2
 800ec8e:	bfb8      	it	lt
 800ec90:	4613      	movlt	r3, r2
 800ec92:	f8c9 3000 	str.w	r3, [r9]
 800ec96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec9a:	4606      	mov	r6, r0
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	b112      	cbz	r2, 800eca6 <_printf_common+0x2a>
 800eca0:	3301      	adds	r3, #1
 800eca2:	f8c9 3000 	str.w	r3, [r9]
 800eca6:	6823      	ldr	r3, [r4, #0]
 800eca8:	0699      	lsls	r1, r3, #26
 800ecaa:	bf42      	ittt	mi
 800ecac:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ecb0:	3302      	addmi	r3, #2
 800ecb2:	f8c9 3000 	strmi.w	r3, [r9]
 800ecb6:	6825      	ldr	r5, [r4, #0]
 800ecb8:	f015 0506 	ands.w	r5, r5, #6
 800ecbc:	d107      	bne.n	800ecce <_printf_common+0x52>
 800ecbe:	f104 0a19 	add.w	sl, r4, #25
 800ecc2:	68e3      	ldr	r3, [r4, #12]
 800ecc4:	f8d9 2000 	ldr.w	r2, [r9]
 800ecc8:	1a9b      	subs	r3, r3, r2
 800ecca:	42ab      	cmp	r3, r5
 800eccc:	dc28      	bgt.n	800ed20 <_printf_common+0xa4>
 800ecce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ecd2:	6822      	ldr	r2, [r4, #0]
 800ecd4:	3300      	adds	r3, #0
 800ecd6:	bf18      	it	ne
 800ecd8:	2301      	movne	r3, #1
 800ecda:	0692      	lsls	r2, r2, #26
 800ecdc:	d42d      	bmi.n	800ed3a <_printf_common+0xbe>
 800ecde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ece2:	4639      	mov	r1, r7
 800ece4:	4630      	mov	r0, r6
 800ece6:	47c0      	blx	r8
 800ece8:	3001      	adds	r0, #1
 800ecea:	d020      	beq.n	800ed2e <_printf_common+0xb2>
 800ecec:	6823      	ldr	r3, [r4, #0]
 800ecee:	68e5      	ldr	r5, [r4, #12]
 800ecf0:	f8d9 2000 	ldr.w	r2, [r9]
 800ecf4:	f003 0306 	and.w	r3, r3, #6
 800ecf8:	2b04      	cmp	r3, #4
 800ecfa:	bf08      	it	eq
 800ecfc:	1aad      	subeq	r5, r5, r2
 800ecfe:	68a3      	ldr	r3, [r4, #8]
 800ed00:	6922      	ldr	r2, [r4, #16]
 800ed02:	bf0c      	ite	eq
 800ed04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed08:	2500      	movne	r5, #0
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	bfc4      	itt	gt
 800ed0e:	1a9b      	subgt	r3, r3, r2
 800ed10:	18ed      	addgt	r5, r5, r3
 800ed12:	f04f 0900 	mov.w	r9, #0
 800ed16:	341a      	adds	r4, #26
 800ed18:	454d      	cmp	r5, r9
 800ed1a:	d11a      	bne.n	800ed52 <_printf_common+0xd6>
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	e008      	b.n	800ed32 <_printf_common+0xb6>
 800ed20:	2301      	movs	r3, #1
 800ed22:	4652      	mov	r2, sl
 800ed24:	4639      	mov	r1, r7
 800ed26:	4630      	mov	r0, r6
 800ed28:	47c0      	blx	r8
 800ed2a:	3001      	adds	r0, #1
 800ed2c:	d103      	bne.n	800ed36 <_printf_common+0xba>
 800ed2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed36:	3501      	adds	r5, #1
 800ed38:	e7c3      	b.n	800ecc2 <_printf_common+0x46>
 800ed3a:	18e1      	adds	r1, r4, r3
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	2030      	movs	r0, #48	; 0x30
 800ed40:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ed44:	4422      	add	r2, r4
 800ed46:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ed4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed4e:	3302      	adds	r3, #2
 800ed50:	e7c5      	b.n	800ecde <_printf_common+0x62>
 800ed52:	2301      	movs	r3, #1
 800ed54:	4622      	mov	r2, r4
 800ed56:	4639      	mov	r1, r7
 800ed58:	4630      	mov	r0, r6
 800ed5a:	47c0      	blx	r8
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d0e6      	beq.n	800ed2e <_printf_common+0xb2>
 800ed60:	f109 0901 	add.w	r9, r9, #1
 800ed64:	e7d8      	b.n	800ed18 <_printf_common+0x9c>
	...

0800ed68 <_printf_i>:
 800ed68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed6c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ed70:	460c      	mov	r4, r1
 800ed72:	7e09      	ldrb	r1, [r1, #24]
 800ed74:	b085      	sub	sp, #20
 800ed76:	296e      	cmp	r1, #110	; 0x6e
 800ed78:	4617      	mov	r7, r2
 800ed7a:	4606      	mov	r6, r0
 800ed7c:	4698      	mov	r8, r3
 800ed7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed80:	f000 80b3 	beq.w	800eeea <_printf_i+0x182>
 800ed84:	d822      	bhi.n	800edcc <_printf_i+0x64>
 800ed86:	2963      	cmp	r1, #99	; 0x63
 800ed88:	d036      	beq.n	800edf8 <_printf_i+0x90>
 800ed8a:	d80a      	bhi.n	800eda2 <_printf_i+0x3a>
 800ed8c:	2900      	cmp	r1, #0
 800ed8e:	f000 80b9 	beq.w	800ef04 <_printf_i+0x19c>
 800ed92:	2958      	cmp	r1, #88	; 0x58
 800ed94:	f000 8083 	beq.w	800ee9e <_printf_i+0x136>
 800ed98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed9c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800eda0:	e032      	b.n	800ee08 <_printf_i+0xa0>
 800eda2:	2964      	cmp	r1, #100	; 0x64
 800eda4:	d001      	beq.n	800edaa <_printf_i+0x42>
 800eda6:	2969      	cmp	r1, #105	; 0x69
 800eda8:	d1f6      	bne.n	800ed98 <_printf_i+0x30>
 800edaa:	6820      	ldr	r0, [r4, #0]
 800edac:	6813      	ldr	r3, [r2, #0]
 800edae:	0605      	lsls	r5, r0, #24
 800edb0:	f103 0104 	add.w	r1, r3, #4
 800edb4:	d52a      	bpl.n	800ee0c <_printf_i+0xa4>
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6011      	str	r1, [r2, #0]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	da03      	bge.n	800edc6 <_printf_i+0x5e>
 800edbe:	222d      	movs	r2, #45	; 0x2d
 800edc0:	425b      	negs	r3, r3
 800edc2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800edc6:	486f      	ldr	r0, [pc, #444]	; (800ef84 <_printf_i+0x21c>)
 800edc8:	220a      	movs	r2, #10
 800edca:	e039      	b.n	800ee40 <_printf_i+0xd8>
 800edcc:	2973      	cmp	r1, #115	; 0x73
 800edce:	f000 809d 	beq.w	800ef0c <_printf_i+0x1a4>
 800edd2:	d808      	bhi.n	800ede6 <_printf_i+0x7e>
 800edd4:	296f      	cmp	r1, #111	; 0x6f
 800edd6:	d020      	beq.n	800ee1a <_printf_i+0xb2>
 800edd8:	2970      	cmp	r1, #112	; 0x70
 800edda:	d1dd      	bne.n	800ed98 <_printf_i+0x30>
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	f043 0320 	orr.w	r3, r3, #32
 800ede2:	6023      	str	r3, [r4, #0]
 800ede4:	e003      	b.n	800edee <_printf_i+0x86>
 800ede6:	2975      	cmp	r1, #117	; 0x75
 800ede8:	d017      	beq.n	800ee1a <_printf_i+0xb2>
 800edea:	2978      	cmp	r1, #120	; 0x78
 800edec:	d1d4      	bne.n	800ed98 <_printf_i+0x30>
 800edee:	2378      	movs	r3, #120	; 0x78
 800edf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800edf4:	4864      	ldr	r0, [pc, #400]	; (800ef88 <_printf_i+0x220>)
 800edf6:	e055      	b.n	800eea4 <_printf_i+0x13c>
 800edf8:	6813      	ldr	r3, [r2, #0]
 800edfa:	1d19      	adds	r1, r3, #4
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	6011      	str	r1, [r2, #0]
 800ee00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee08:	2301      	movs	r3, #1
 800ee0a:	e08c      	b.n	800ef26 <_printf_i+0x1be>
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	6011      	str	r1, [r2, #0]
 800ee10:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ee14:	bf18      	it	ne
 800ee16:	b21b      	sxthne	r3, r3
 800ee18:	e7cf      	b.n	800edba <_printf_i+0x52>
 800ee1a:	6813      	ldr	r3, [r2, #0]
 800ee1c:	6825      	ldr	r5, [r4, #0]
 800ee1e:	1d18      	adds	r0, r3, #4
 800ee20:	6010      	str	r0, [r2, #0]
 800ee22:	0628      	lsls	r0, r5, #24
 800ee24:	d501      	bpl.n	800ee2a <_printf_i+0xc2>
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	e002      	b.n	800ee30 <_printf_i+0xc8>
 800ee2a:	0668      	lsls	r0, r5, #25
 800ee2c:	d5fb      	bpl.n	800ee26 <_printf_i+0xbe>
 800ee2e:	881b      	ldrh	r3, [r3, #0]
 800ee30:	4854      	ldr	r0, [pc, #336]	; (800ef84 <_printf_i+0x21c>)
 800ee32:	296f      	cmp	r1, #111	; 0x6f
 800ee34:	bf14      	ite	ne
 800ee36:	220a      	movne	r2, #10
 800ee38:	2208      	moveq	r2, #8
 800ee3a:	2100      	movs	r1, #0
 800ee3c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee40:	6865      	ldr	r5, [r4, #4]
 800ee42:	60a5      	str	r5, [r4, #8]
 800ee44:	2d00      	cmp	r5, #0
 800ee46:	f2c0 8095 	blt.w	800ef74 <_printf_i+0x20c>
 800ee4a:	6821      	ldr	r1, [r4, #0]
 800ee4c:	f021 0104 	bic.w	r1, r1, #4
 800ee50:	6021      	str	r1, [r4, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d13d      	bne.n	800eed2 <_printf_i+0x16a>
 800ee56:	2d00      	cmp	r5, #0
 800ee58:	f040 808e 	bne.w	800ef78 <_printf_i+0x210>
 800ee5c:	4665      	mov	r5, ip
 800ee5e:	2a08      	cmp	r2, #8
 800ee60:	d10b      	bne.n	800ee7a <_printf_i+0x112>
 800ee62:	6823      	ldr	r3, [r4, #0]
 800ee64:	07db      	lsls	r3, r3, #31
 800ee66:	d508      	bpl.n	800ee7a <_printf_i+0x112>
 800ee68:	6923      	ldr	r3, [r4, #16]
 800ee6a:	6862      	ldr	r2, [r4, #4]
 800ee6c:	429a      	cmp	r2, r3
 800ee6e:	bfde      	ittt	le
 800ee70:	2330      	movle	r3, #48	; 0x30
 800ee72:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ee76:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ee7a:	ebac 0305 	sub.w	r3, ip, r5
 800ee7e:	6123      	str	r3, [r4, #16]
 800ee80:	f8cd 8000 	str.w	r8, [sp]
 800ee84:	463b      	mov	r3, r7
 800ee86:	aa03      	add	r2, sp, #12
 800ee88:	4621      	mov	r1, r4
 800ee8a:	4630      	mov	r0, r6
 800ee8c:	f7ff fef6 	bl	800ec7c <_printf_common>
 800ee90:	3001      	adds	r0, #1
 800ee92:	d14d      	bne.n	800ef30 <_printf_i+0x1c8>
 800ee94:	f04f 30ff 	mov.w	r0, #4294967295
 800ee98:	b005      	add	sp, #20
 800ee9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee9e:	4839      	ldr	r0, [pc, #228]	; (800ef84 <_printf_i+0x21c>)
 800eea0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800eea4:	6813      	ldr	r3, [r2, #0]
 800eea6:	6821      	ldr	r1, [r4, #0]
 800eea8:	1d1d      	adds	r5, r3, #4
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	6015      	str	r5, [r2, #0]
 800eeae:	060a      	lsls	r2, r1, #24
 800eeb0:	d50b      	bpl.n	800eeca <_printf_i+0x162>
 800eeb2:	07ca      	lsls	r2, r1, #31
 800eeb4:	bf44      	itt	mi
 800eeb6:	f041 0120 	orrmi.w	r1, r1, #32
 800eeba:	6021      	strmi	r1, [r4, #0]
 800eebc:	b91b      	cbnz	r3, 800eec6 <_printf_i+0x15e>
 800eebe:	6822      	ldr	r2, [r4, #0]
 800eec0:	f022 0220 	bic.w	r2, r2, #32
 800eec4:	6022      	str	r2, [r4, #0]
 800eec6:	2210      	movs	r2, #16
 800eec8:	e7b7      	b.n	800ee3a <_printf_i+0xd2>
 800eeca:	064d      	lsls	r5, r1, #25
 800eecc:	bf48      	it	mi
 800eece:	b29b      	uxthmi	r3, r3
 800eed0:	e7ef      	b.n	800eeb2 <_printf_i+0x14a>
 800eed2:	4665      	mov	r5, ip
 800eed4:	fbb3 f1f2 	udiv	r1, r3, r2
 800eed8:	fb02 3311 	mls	r3, r2, r1, r3
 800eedc:	5cc3      	ldrb	r3, [r0, r3]
 800eede:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800eee2:	460b      	mov	r3, r1
 800eee4:	2900      	cmp	r1, #0
 800eee6:	d1f5      	bne.n	800eed4 <_printf_i+0x16c>
 800eee8:	e7b9      	b.n	800ee5e <_printf_i+0xf6>
 800eeea:	6813      	ldr	r3, [r2, #0]
 800eeec:	6825      	ldr	r5, [r4, #0]
 800eeee:	6961      	ldr	r1, [r4, #20]
 800eef0:	1d18      	adds	r0, r3, #4
 800eef2:	6010      	str	r0, [r2, #0]
 800eef4:	0628      	lsls	r0, r5, #24
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	d501      	bpl.n	800eefe <_printf_i+0x196>
 800eefa:	6019      	str	r1, [r3, #0]
 800eefc:	e002      	b.n	800ef04 <_printf_i+0x19c>
 800eefe:	066a      	lsls	r2, r5, #25
 800ef00:	d5fb      	bpl.n	800eefa <_printf_i+0x192>
 800ef02:	8019      	strh	r1, [r3, #0]
 800ef04:	2300      	movs	r3, #0
 800ef06:	6123      	str	r3, [r4, #16]
 800ef08:	4665      	mov	r5, ip
 800ef0a:	e7b9      	b.n	800ee80 <_printf_i+0x118>
 800ef0c:	6813      	ldr	r3, [r2, #0]
 800ef0e:	1d19      	adds	r1, r3, #4
 800ef10:	6011      	str	r1, [r2, #0]
 800ef12:	681d      	ldr	r5, [r3, #0]
 800ef14:	6862      	ldr	r2, [r4, #4]
 800ef16:	2100      	movs	r1, #0
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f7f1 f969 	bl	80001f0 <memchr>
 800ef1e:	b108      	cbz	r0, 800ef24 <_printf_i+0x1bc>
 800ef20:	1b40      	subs	r0, r0, r5
 800ef22:	6060      	str	r0, [r4, #4]
 800ef24:	6863      	ldr	r3, [r4, #4]
 800ef26:	6123      	str	r3, [r4, #16]
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef2e:	e7a7      	b.n	800ee80 <_printf_i+0x118>
 800ef30:	6923      	ldr	r3, [r4, #16]
 800ef32:	462a      	mov	r2, r5
 800ef34:	4639      	mov	r1, r7
 800ef36:	4630      	mov	r0, r6
 800ef38:	47c0      	blx	r8
 800ef3a:	3001      	adds	r0, #1
 800ef3c:	d0aa      	beq.n	800ee94 <_printf_i+0x12c>
 800ef3e:	6823      	ldr	r3, [r4, #0]
 800ef40:	079b      	lsls	r3, r3, #30
 800ef42:	d413      	bmi.n	800ef6c <_printf_i+0x204>
 800ef44:	68e0      	ldr	r0, [r4, #12]
 800ef46:	9b03      	ldr	r3, [sp, #12]
 800ef48:	4298      	cmp	r0, r3
 800ef4a:	bfb8      	it	lt
 800ef4c:	4618      	movlt	r0, r3
 800ef4e:	e7a3      	b.n	800ee98 <_printf_i+0x130>
 800ef50:	2301      	movs	r3, #1
 800ef52:	464a      	mov	r2, r9
 800ef54:	4639      	mov	r1, r7
 800ef56:	4630      	mov	r0, r6
 800ef58:	47c0      	blx	r8
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	d09a      	beq.n	800ee94 <_printf_i+0x12c>
 800ef5e:	3501      	adds	r5, #1
 800ef60:	68e3      	ldr	r3, [r4, #12]
 800ef62:	9a03      	ldr	r2, [sp, #12]
 800ef64:	1a9b      	subs	r3, r3, r2
 800ef66:	42ab      	cmp	r3, r5
 800ef68:	dcf2      	bgt.n	800ef50 <_printf_i+0x1e8>
 800ef6a:	e7eb      	b.n	800ef44 <_printf_i+0x1dc>
 800ef6c:	2500      	movs	r5, #0
 800ef6e:	f104 0919 	add.w	r9, r4, #25
 800ef72:	e7f5      	b.n	800ef60 <_printf_i+0x1f8>
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1ac      	bne.n	800eed2 <_printf_i+0x16a>
 800ef78:	7803      	ldrb	r3, [r0, #0]
 800ef7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef82:	e76c      	b.n	800ee5e <_printf_i+0xf6>
 800ef84:	0800f1dd 	.word	0x0800f1dd
 800ef88:	0800f1ee 	.word	0x0800f1ee

0800ef8c <memmove>:
 800ef8c:	4288      	cmp	r0, r1
 800ef8e:	b510      	push	{r4, lr}
 800ef90:	eb01 0302 	add.w	r3, r1, r2
 800ef94:	d807      	bhi.n	800efa6 <memmove+0x1a>
 800ef96:	1e42      	subs	r2, r0, #1
 800ef98:	4299      	cmp	r1, r3
 800ef9a:	d00a      	beq.n	800efb2 <memmove+0x26>
 800ef9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800efa0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800efa4:	e7f8      	b.n	800ef98 <memmove+0xc>
 800efa6:	4283      	cmp	r3, r0
 800efa8:	d9f5      	bls.n	800ef96 <memmove+0xa>
 800efaa:	1881      	adds	r1, r0, r2
 800efac:	1ad2      	subs	r2, r2, r3
 800efae:	42d3      	cmn	r3, r2
 800efb0:	d100      	bne.n	800efb4 <memmove+0x28>
 800efb2:	bd10      	pop	{r4, pc}
 800efb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800efb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800efbc:	e7f7      	b.n	800efae <memmove+0x22>

0800efbe <_realloc_r>:
 800efbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efc0:	4607      	mov	r7, r0
 800efc2:	4614      	mov	r4, r2
 800efc4:	460e      	mov	r6, r1
 800efc6:	b921      	cbnz	r1, 800efd2 <_realloc_r+0x14>
 800efc8:	4611      	mov	r1, r2
 800efca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800efce:	f7ff bc77 	b.w	800e8c0 <_malloc_r>
 800efd2:	b922      	cbnz	r2, 800efde <_realloc_r+0x20>
 800efd4:	f7ff fc26 	bl	800e824 <_free_r>
 800efd8:	4625      	mov	r5, r4
 800efda:	4628      	mov	r0, r5
 800efdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800efde:	f000 f814 	bl	800f00a <_malloc_usable_size_r>
 800efe2:	42a0      	cmp	r0, r4
 800efe4:	d20f      	bcs.n	800f006 <_realloc_r+0x48>
 800efe6:	4621      	mov	r1, r4
 800efe8:	4638      	mov	r0, r7
 800efea:	f7ff fc69 	bl	800e8c0 <_malloc_r>
 800efee:	4605      	mov	r5, r0
 800eff0:	2800      	cmp	r0, #0
 800eff2:	d0f2      	beq.n	800efda <_realloc_r+0x1c>
 800eff4:	4631      	mov	r1, r6
 800eff6:	4622      	mov	r2, r4
 800eff8:	f7ff fc00 	bl	800e7fc <memcpy>
 800effc:	4631      	mov	r1, r6
 800effe:	4638      	mov	r0, r7
 800f000:	f7ff fc10 	bl	800e824 <_free_r>
 800f004:	e7e9      	b.n	800efda <_realloc_r+0x1c>
 800f006:	4635      	mov	r5, r6
 800f008:	e7e7      	b.n	800efda <_realloc_r+0x1c>

0800f00a <_malloc_usable_size_r>:
 800f00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f00e:	1f18      	subs	r0, r3, #4
 800f010:	2b00      	cmp	r3, #0
 800f012:	bfbc      	itt	lt
 800f014:	580b      	ldrlt	r3, [r1, r0]
 800f016:	18c0      	addlt	r0, r0, r3
 800f018:	4770      	bx	lr
	...

0800f01c <_init>:
 800f01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f01e:	bf00      	nop
 800f020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f022:	bc08      	pop	{r3}
 800f024:	469e      	mov	lr, r3
 800f026:	4770      	bx	lr

0800f028 <_fini>:
 800f028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f02a:	bf00      	nop
 800f02c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f02e:	bc08      	pop	{r3}
 800f030:	469e      	mov	lr, r3
 800f032:	4770      	bx	lr
