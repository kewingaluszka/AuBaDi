
AuBaDi_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e10c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800e2a4  0800e2a4  0001e2a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e40c  0800e40c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800e40c  0800e40c  0001e40c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e414  0800e414  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e414  0800e414  0001e414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e418  0800e418  0001e418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800e41c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000201c  20000090  0800e4ac  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00004004  200020ac  0800e4ac  000220ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b79c  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000054bc  00000000  00000000  0004b85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019c0  00000000  00000000  00050d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  000526d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001c6ed  00000000  00000000  00053e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b567  00000000  00000000  0007055d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095e30  00000000  00000000  0008bac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001218f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bc0  00000000  00000000  00121970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e28c 	.word	0x0800e28c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800e28c 	.word	0x0800e28c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af02      	add	r7, sp, #8
 80004de:	4603      	mov	r3, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004ee:	f107 020c 	add.w	r2, r7, #12
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	9300      	str	r3, [sp, #0]
 80004f6:	2302      	movs	r3, #2
 80004f8:	2194      	movs	r1, #148	; 0x94
 80004fa:	4803      	ldr	r0, [pc, #12]	; (8000508 <write_register+0x30>)
 80004fc:	f003 ff8c 	bl	8004418 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 8000500:	bf00      	nop
 8000502:	3710      	adds	r7, #16
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000ac 	.word	0x200000ac

0800050c <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af02      	add	r7, sp, #8
 8000512:	4603      	mov	r3, r0
 8000514:	6039      	str	r1, [r7, #0]
 8000516:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 800051c:	f107 020c 	add.w	r2, r7, #12
 8000520:	2364      	movs	r3, #100	; 0x64
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2301      	movs	r3, #1
 8000526:	2194      	movs	r1, #148	; 0x94
 8000528:	4807      	ldr	r0, [pc, #28]	; (8000548 <read_register+0x3c>)
 800052a:	f003 ff75 	bl	8004418 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800052e:	2364      	movs	r3, #100	; 0x64
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2301      	movs	r3, #1
 8000534:	683a      	ldr	r2, [r7, #0]
 8000536:	2194      	movs	r1, #148	; 0x94
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <read_register+0x3c>)
 800053a:	f004 f86b 	bl	8004614 <HAL_I2C_Master_Receive>
}
 800053e:	bf00      	nop
 8000540:	3710      	adds	r7, #16
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	200000ac 	.word	0x200000ac

0800054c <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 800054c:	b084      	sub	sp, #16
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	f107 0c10 	add.w	ip, r7, #16
 8000558:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800055c:	4b7b      	ldr	r3, [pc, #492]	; (800074c <CS43_Init+0x200>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000564:	4b79      	ldr	r3, [pc, #484]	; (800074c <CS43_Init+0x200>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	69da      	ldr	r2, [r3, #28]
 800056a:	4b78      	ldr	r3, [pc, #480]	; (800074c <CS43_Init+0x200>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000572:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2110      	movs	r1, #16
 8000578:	4875      	ldr	r0, [pc, #468]	; (8000750 <CS43_Init+0x204>)
 800057a:	f002 f8e7 	bl	800274c <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800057e:	4b75      	ldr	r3, [pc, #468]	; (8000754 <CS43_Init+0x208>)
 8000580:	4618      	mov	r0, r3
 8000582:	f107 0110 	add.w	r1, r7, #16
 8000586:	2354      	movs	r3, #84	; 0x54
 8000588:	461a      	mov	r2, r3
 800058a:	f00d fdb1 	bl	800e0f0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800058e:	2301      	movs	r3, #1
 8000590:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	4619      	mov	r1, r3
 8000596:	2002      	movs	r0, #2
 8000598:	f7ff ff9e 	bl	80004d8 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80005a0:	797b      	ldrb	r3, [r7, #5]
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80005aa:	797b      	ldrb	r3, [r7, #5]
 80005ac:	f043 030c 	orr.w	r3, r3, #12
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005b4:	797b      	ldrb	r3, [r7, #5]
 80005b6:	f043 0303 	orr.w	r3, r3, #3
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	3301      	adds	r3, #1
 80005c2:	4619      	mov	r1, r3
 80005c4:	2004      	movs	r0, #4
 80005c6:	f7ff ff87 	bl	80004d8 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005ca:	2380      	movs	r3, #128	; 0x80
 80005cc:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	3301      	adds	r3, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	2005      	movs	r0, #5
 80005d6:	f7ff ff7f 	bl	80004d8 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	4619      	mov	r1, r3
 80005de:	2006      	movs	r0, #6
 80005e0:	f7ff ff94 	bl	800050c <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	f003 0320 	and.w	r3, r3, #32
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	f023 0310 	bic.w	r3, r3, #16
 8000608:	b2db      	uxtb	r3, r3
 800060a:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 800060c:	797b      	ldrb	r3, [r7, #5]
 800060e:	f023 0304 	bic.w	r3, r3, #4
 8000612:	b2db      	uxtb	r3, r3
 8000614:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000616:	797b      	ldrb	r3, [r7, #5]
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	b2db      	uxtb	r3, r3
 800061e:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8000620:	797b      	ldrb	r3, [r7, #5]
 8000622:	f043 0303 	orr.w	r3, r3, #3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	3301      	adds	r3, #1
 800062e:	4619      	mov	r1, r3
 8000630:	2006      	movs	r0, #6
 8000632:	f7ff ff51 	bl	80004d8 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	3301      	adds	r3, #1
 800063a:	4619      	mov	r1, r3
 800063c:	2008      	movs	r0, #8
 800063e:	f7ff ff65 	bl	800050c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8000642:	797b      	ldrb	r3, [r7, #5]
 8000644:	f023 030f 	bic.w	r3, r3, #15
 8000648:	b2db      	uxtb	r3, r3
 800064a:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800064c:	797b      	ldrb	r3, [r7, #5]
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	b2db      	uxtb	r3, r3
 8000654:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	3301      	adds	r3, #1
 800065a:	4619      	mov	r1, r3
 800065c:	2008      	movs	r0, #8
 800065e:	f7ff ff3b 	bl	80004d8 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	3301      	adds	r3, #1
 8000666:	4619      	mov	r1, r3
 8000668:	2009      	movs	r0, #9
 800066a:	f7ff ff4f 	bl	800050c <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800066e:	797b      	ldrb	r3, [r7, #5]
 8000670:	f023 030f 	bic.w	r3, r3, #15
 8000674:	b2db      	uxtb	r3, r3
 8000676:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	b2db      	uxtb	r3, r3
 8000680:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	3301      	adds	r3, #1
 8000686:	4619      	mov	r1, r3
 8000688:	2009      	movs	r0, #9
 800068a:	f7ff ff25 	bl	80004d8 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	3301      	adds	r3, #1
 8000692:	4619      	mov	r1, r3
 8000694:	200e      	movs	r0, #14
 8000696:	f7ff ff39 	bl	800050c <read_register>
	if(outputMode == MODE_ANALOG)
 800069a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d119      	bne.n	80006d6 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006b6:	797b      	ldrb	r3, [r7, #5]
 80006b8:	f023 0320 	bic.w	r3, r3, #32
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006c0:	797b      	ldrb	r3, [r7, #5]
 80006c2:	f023 0310 	bic.w	r3, r3, #16
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006ca:	797b      	ldrb	r3, [r7, #5]
 80006cc:	f023 0308 	bic.w	r3, r3, #8
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	717b      	strb	r3, [r7, #5]
 80006d4:	e005      	b.n	80006e2 <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006d6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d101      	bne.n	80006e2 <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006de:	2302      	movs	r3, #2
 80006e0:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	3301      	adds	r3, #1
 80006e6:	4619      	mov	r1, r3
 80006e8:	200e      	movs	r0, #14
 80006ea:	f7ff fef5 	bl	80004d8 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	3301      	adds	r3, #1
 80006f2:	4619      	mov	r1, r3
 80006f4:	200f      	movs	r0, #15
 80006f6:	f7ff ff09 	bl	800050c <read_register>
	iData[1] = 0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	3301      	adds	r3, #1
 8000702:	4619      	mov	r1, r3
 8000704:	200f      	movs	r0, #15
 8000706:	f7ff fee7 	bl	80004d8 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	3301      	adds	r3, #1
 8000712:	4619      	mov	r1, r3
 8000714:	2014      	movs	r0, #20
 8000716:	f7ff fedf 	bl	80004d8 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	3301      	adds	r3, #1
 800071e:	4619      	mov	r1, r3
 8000720:	2015      	movs	r0, #21
 8000722:	f7ff fed9 	bl	80004d8 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	3301      	adds	r3, #1
 800072a:	4619      	mov	r1, r3
 800072c:	201a      	movs	r0, #26
 800072e:	f7ff fed3 	bl	80004d8 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	3301      	adds	r3, #1
 8000736:	4619      	mov	r1, r3
 8000738:	201b      	movs	r0, #27
 800073a:	f7ff fecd 	bl	80004d8 <write_register>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000748:	b004      	add	sp, #16
 800074a:	4770      	bx	lr
 800074c:	20001558 	.word	0x20001558
 8000750:	40020c00 	.word	0x40020c00
 8000754:	200000ac 	.word	0x200000ac

08000758 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	2b03      	cmp	r3, #3
 8000766:	d82b      	bhi.n	80007c0 <CS43_Enable_RightLeft+0x68>
 8000768:	a201      	add	r2, pc, #4	; (adr r2, 8000770 <CS43_Enable_RightLeft+0x18>)
 800076a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076e:	bf00      	nop
 8000770:	08000781 	.word	0x08000781
 8000774:	08000791 	.word	0x08000791
 8000778:	080007a1 	.word	0x080007a1
 800077c:	080007b1 	.word	0x080007b1
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000780:	23c0      	movs	r3, #192	; 0xc0
 8000782:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000784:	7b7b      	ldrb	r3, [r7, #13]
 8000786:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800078a:	b2db      	uxtb	r3, r3
 800078c:	737b      	strb	r3, [r7, #13]
			break;
 800078e:	e018      	b.n	80007c2 <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800079a:	b2db      	uxtb	r3, r3
 800079c:	737b      	strb	r3, [r7, #13]
			break;
 800079e:	e010      	b.n	80007c2 <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007a0:	23c0      	movs	r3, #192	; 0xc0
 80007a2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a4:	7b7b      	ldrb	r3, [r7, #13]
 80007a6:	f043 0320 	orr.w	r3, r3, #32
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	737b      	strb	r3, [r7, #13]
			break;
 80007ae:	e008      	b.n	80007c2 <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007b4:	7b7b      	ldrb	r3, [r7, #13]
 80007b6:	f043 0320 	orr.w	r3, r3, #32
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	737b      	strb	r3, [r7, #13]
			break;
 80007be:	e000      	b.n	80007c2 <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007c0:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007c2:	7b7b      	ldrb	r3, [r7, #13]
 80007c4:	f043 030c 	orr.w	r3, r3, #12
 80007c8:	b2db      	uxtb	r3, r3
 80007ca:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
 80007ce:	f043 0303 	orr.w	r3, r3, #3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	3301      	adds	r3, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	2004      	movs	r0, #4
 80007e0:	f7ff fe7a 	bl	80004d8 <write_register>
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3319      	adds	r3, #25
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007fe:	f107 030c 	add.w	r3, r7, #12
 8000802:	3301      	adds	r3, #1
 8000804:	4619      	mov	r1, r3
 8000806:	2020      	movs	r0, #32
 8000808:	f7ff fe66 	bl	80004d8 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	3301      	adds	r3, #1
 8000812:	4619      	mov	r1, r3
 8000814:	2021      	movs	r0, #33	; 0x21
 8000816:	f7ff fe5f 	bl	80004d8 <write_register>
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b084      	sub	sp, #16
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d019      	beq.n	8000866 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 8000832:	23ff      	movs	r3, #255	; 0xff
 8000834:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	3301      	adds	r3, #1
 800083c:	4619      	mov	r1, r3
 800083e:	2004      	movs	r0, #4
 8000840:	f7ff fe4a 	bl	80004d8 <write_register>
    iData[1] = 0x01;
 8000844:	2301      	movs	r3, #1
 8000846:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	3301      	adds	r3, #1
 800084e:	4619      	mov	r1, r3
 8000850:	2022      	movs	r0, #34	; 0x22
 8000852:	f7ff fe41 	bl	80004d8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	3301      	adds	r3, #1
 800085c:	4619      	mov	r1, r3
 800085e:	2023      	movs	r0, #35	; 0x23
 8000860:	f7ff fe3a 	bl	80004d8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000864:	e018      	b.n	8000898 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000866:	2300      	movs	r3, #0
 8000868:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	3301      	adds	r3, #1
 8000870:	4619      	mov	r1, r3
 8000872:	2022      	movs	r0, #34	; 0x22
 8000874:	f7ff fe30 	bl	80004d8 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000878:	f107 030c 	add.w	r3, r7, #12
 800087c:	3301      	adds	r3, #1
 800087e:	4619      	mov	r1, r3
 8000880:	2023      	movs	r0, #35	; 0x23
 8000882:	f7ff fe29 	bl	80004d8 <write_register>
    iData[1] = 0xAF;
 8000886:	23af      	movs	r3, #175	; 0xaf
 8000888:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	3301      	adds	r3, #1
 8000890:	4619      	mov	r1, r3
 8000892:	2004      	movs	r0, #4
 8000894:	f7ff fe20 	bl	80004d8 <write_register>
}
 8000898:	bf00      	nop
 800089a:	3710      	adds	r7, #16
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff ffbb 	bl	8000822 <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 80008ac:	2399      	movs	r3, #153	; 0x99
 80008ae:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	3301      	adds	r3, #1
 80008b4:	4619      	mov	r1, r3
 80008b6:	2000      	movs	r0, #0
 80008b8:	f7ff fe0e 	bl	80004d8 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	3301      	adds	r3, #1
 80008c4:	4619      	mov	r1, r3
 80008c6:	2047      	movs	r0, #71	; 0x47
 80008c8:	f7ff fe06 	bl	80004d8 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	3301      	adds	r3, #1
 80008d0:	4619      	mov	r1, r3
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f7ff fe1a 	bl	800050c <read_register>
	iData[1] |= 0x80;
 80008d8:	797b      	ldrb	r3, [r7, #5]
 80008da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	3301      	adds	r3, #1
 80008e6:	4619      	mov	r1, r3
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f7ff fdf5 	bl	80004d8 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	3301      	adds	r3, #1
 80008f2:	4619      	mov	r1, r3
 80008f4:	2032      	movs	r0, #50	; 0x32
 80008f6:	f7ff fe09 	bl	800050c <read_register>
	iData[1] &= ~(0x80);
 80008fa:	797b      	ldrb	r3, [r7, #5]
 80008fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000900:	b2db      	uxtb	r3, r3
 8000902:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	3301      	adds	r3, #1
 8000908:	4619      	mov	r1, r3
 800090a:	2032      	movs	r0, #50	; 0x32
 800090c:	f7ff fde4 	bl	80004d8 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 8000910:	2300      	movs	r3, #0
 8000912:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	3301      	adds	r3, #1
 8000918:	4619      	mov	r1, r3
 800091a:	2000      	movs	r0, #0
 800091c:	f7ff fddc 	bl	80004d8 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 8000920:	239e      	movs	r3, #158	; 0x9e
 8000922:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	3301      	adds	r3, #1
 8000928:	4619      	mov	r1, r3
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fdd4 	bl	80004d8 <write_register>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000940:	2300      	movs	r3, #0
 8000942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000946:	23ff      	movs	r3, #255	; 0xff
 8000948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  for(index = 0; index < 8; index++)
 800094c:	2300      	movs	r3, #0
 800094e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000952:	e010      	b.n	8000976 <audioI2S_pllClockConfig+0x3e>
  {
    if(I2SFreq[index] == audioFreq)
 8000954:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000958:	4a20      	ldr	r2, [pc, #128]	; (80009dc <audioI2S_pllClockConfig+0xa4>)
 800095a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d103      	bne.n	800096c <audioI2S_pllClockConfig+0x34>
    {
      freqindex = index;
 8000964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000968:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(index = 0; index < 8; index++)
 800096c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000970:	3301      	adds	r3, #1
 8000972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800097a:	2b07      	cmp	r3, #7
 800097c:	d9ea      	bls.n	8000954 <audioI2S_pllClockConfig+0x1c>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4618      	mov	r0, r3
 8000984:	f005 fe68 	bl	8006658 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000988:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	2b00      	cmp	r3, #0
 8000992:	d113      	bne.n	80009bc <audioI2S_pllClockConfig+0x84>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000994:	2301      	movs	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 8000998:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800099c:	4a10      	ldr	r2, [pc, #64]	; (80009e0 <audioI2S_pllClockConfig+0xa8>)
 800099e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a2:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80009a8:	4a0e      	ldr	r2, [pc, #56]	; (80009e4 <audioI2S_pllClockConfig+0xac>)
 80009aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ae:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	4618      	mov	r0, r3
 80009b6:	f005 fd5f 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009ba:	e00b      	b.n	80009d4 <audioI2S_pllClockConfig+0x9c>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009bc:	2301      	movs	r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009c0:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009c4:	617b      	str	r3, [r7, #20]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009c6:	2303      	movs	r3, #3
 80009c8:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	4618      	mov	r0, r3
 80009d0:	f005 fd52 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
}
 80009d4:	bf00      	nop
 80009d6:	3728      	adds	r7, #40	; 0x28
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	0800e2f8 	.word	0x0800e2f8
 80009e0:	0800e318 	.word	0x0800e318
 80009e4:	0800e338 	.word	0x0800e338

080009e8 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009f0:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <I2S3_freqUpdate+0x80>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <I2S3_freqUpdate+0x84>)
 80009f6:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 80009f8:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <I2S3_freqUpdate+0x80>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	69da      	ldr	r2, [r3, #28]
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a0a:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a34:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <I2S3_freqUpdate+0x80>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f004 fb33 	bl	80050b8 <HAL_I2S_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e000      	b.n	8000a5e <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a5c:	2301      	movs	r3, #1
  }
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000100 	.word	0x20000100
 8000a6c:	40003c00 	.word	0x40003c00

08000a70 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <audioI2S_setHandle+0x1c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000100 	.word	0x20000100

08000a90 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ff4d 	bl	8000938 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffa2 	bl	80009e8 <I2S3_freqUpdate>
  return true;
 8000aa4:	2301      	movs	r3, #1
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000aba:	f7ff fef1 	bl	80008a0 <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <audioI2S_play+0x38>)
 8000ac0:	6818      	ldr	r0, [r3, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ac8:	d203      	bcs.n	8000ad2 <audioI2S_play+0x22>
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	085b      	lsrs	r3, r3, #1
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	e001      	b.n	8000ad6 <audioI2S_play+0x26>
 8000ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	6879      	ldr	r1, [r7, #4]
 8000ada:	f004 fc2d 	bl	8005338 <HAL_I2S_Transmit_DMA>
  return true;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000100 	.word	0x20000100

08000aec <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_I2S_TxCpltCallback+0x20>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d101      	bne.n	8000b02 <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000afe:	f000 ff41 	bl	8001984 <audioI2S_fullTransfer_Callback>
  }
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40003c00 	.word	0x40003c00

08000b10 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a04      	ldr	r2, [pc, #16]	; (8000b30 <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d101      	bne.n	8000b26 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b22:	f000 ff23 	bl	800196c <audioI2S_halfTransfer_Callback>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40003c00 	.word	0x40003c00

08000b34 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b095      	sub	sp, #84	; 0x54
 8000b38:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b3a:	f000 ff59 	bl	80019f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b3e:	f000 f885 	bl	8000c4c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b42:	f000 fa93 	bl	800106c <MX_GPIO_Init>
	MX_DMA_Init();
 8000b46:	f000 fa71 	bl	800102c <MX_DMA_Init>
	MX_I2C1_Init();
 8000b4a:	f000 f903 	bl	8000d54 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000b4e:	f000 f95d 	bl	8000e0c <MX_I2S3_Init>
	MX_USB_HOST_Init();
 8000b52:	f00c ff57 	bl	800da04 <MX_USB_HOST_Init>
	MX_FATFS_Init();
 8000b56:	f007 fbc5 	bl	80082e4 <MX_FATFS_Init>
	MX_I2C2_Init();
 8000b5a:	f000 f929 	bl	8000db0 <MX_I2C2_Init>
	MX_TIM4_Init();
 8000b5e:	f000 f983 	bl	8000e68 <MX_TIM4_Init>
	MX_TIM5_Init();
 8000b62:	f000 f9cf 	bl	8000f04 <MX_TIM5_Init>
	MX_TIM10_Init();
 8000b66:	f000 fa3d 	bl	8000fe4 <MX_TIM10_Init>
	/* USER CODE BEGIN 2 */
	CS43_Init(hi2c1, MODE_I2S);
 8000b6a:	4c2f      	ldr	r4, [pc, #188]	; (8000c28 <main+0xf4>)
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	9311      	str	r3, [sp, #68]	; 0x44
 8000b70:	4668      	mov	r0, sp
 8000b72:	f104 0310 	add.w	r3, r4, #16
 8000b76:	2244      	movs	r2, #68	; 0x44
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f00d fab9 	bl	800e0f0 <memcpy>
 8000b7e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b82:	f7ff fce3 	bl	800054c <CS43_Init>
	CS43_SetVolume(200); //0-255
 8000b86:	20c8      	movs	r0, #200	; 0xc8
 8000b88:	f7ff fe30 	bl	80007ec <CS43_SetVolume>
	CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f7ff fde3 	bl	8000758 <CS43_Enable_RightLeft>
	HAL_TIM_Base_Start_IT(&htim10);
 8000b92:	4826      	ldr	r0, [pc, #152]	; (8000c2c <main+0xf8>)
 8000b94:	f005 fe2b 	bl	80067ee <HAL_TIM_Base_Start_IT>
	audioI2S_setHandle(&hi2s3);
 8000b98:	4825      	ldr	r0, [pc, #148]	; (8000c30 <main+0xfc>)
 8000b9a:	f7ff ff69 	bl	8000a70 <audioI2S_setHandle>

	bool isSdCardMounted = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	71fb      	strb	r3, [r7, #7]
	bool pauseResumeToggle = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	71bb      	strb	r3, [r7, #6]
	/* USER CODE BEGIN WHILE */
	while (1) {



		if (Appli_state == APPLICATION_START) {
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <main+0x100>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d106      	bne.n	8000bbc <main+0x88>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bb4:	4820      	ldr	r0, [pc, #128]	; (8000c38 <main+0x104>)
 8000bb6:	f001 fdc9 	bl	800274c <HAL_GPIO_WritePin>
 8000bba:	e009      	b.n	8000bd0 <main+0x9c>
		}

		else if (Appli_state == APPLICATION_DISCONNECT) {
 8000bbc:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <main+0x100>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	2b03      	cmp	r3, #3
 8000bc2:	d105      	bne.n	8000bd0 <main+0x9c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bca:	481b      	ldr	r0, [pc, #108]	; (8000c38 <main+0x104>)
 8000bcc:	f001 fdbe 	bl	800274c <HAL_GPIO_WritePin>

		}

		if (Appli_state == APPLICATION_READY) {
 8000bd0:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <main+0x100>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d122      	bne.n	8000c1e <main+0xea>
			if (!isSdCardMounted) {
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d006      	beq.n	8000bf2 <main+0xbe>
				f_mount(&USBHFatFS, (const TCHAR*) USBHPath, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	4915      	ldr	r1, [pc, #84]	; (8000c3c <main+0x108>)
 8000be8:	4815      	ldr	r0, [pc, #84]	; (8000c40 <main+0x10c>)
 8000bea:	f00c f8bb 	bl	800cd64 <f_mount>
				isSdCardMounted = 1;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	71fb      	strb	r3, [r7, #7]
			}

			if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <main+0x110>)
 8000bf6:	f001 fd91 	bl	800271c <HAL_GPIO_ReadPin>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d00e      	beq.n	8000c1e <main+0xea>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000c00:	2201      	movs	r2, #1
 8000c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <main+0x104>)
 8000c08:	f001 fda0 	bl	800274c <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8000c0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c10:	f000 ff60 	bl	8001ad4 <HAL_Delay>
				wavPlayer_fileSelect(WAV_FILE);
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <main+0x114>)
 8000c16:	f000 fddb 	bl	80017d0 <wavPlayer_fileSelect>


				wavPlayer_play();
 8000c1a:	f000 fe03 	bl	8001824 <wavPlayer_play>

			}

		}
// audio process
		wavPlayer_process();
 8000c1e:	f000 fe33 	bl	8001888 <wavPlayer_process>
		 }

		 }*/

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000c22:	f00c ff15 	bl	800da50 <MX_USB_HOST_Process>
		if (Appli_state == APPLICATION_START) {
 8000c26:	e7be      	b.n	8000ba6 <main+0x72>
 8000c28:	200013d0 	.word	0x200013d0
 8000c2c:	20001424 	.word	0x20001424
 8000c30:	20001558 	.word	0x20001558
 8000c34:	20001384 	.word	0x20001384
 8000c38:	40020c00 	.word	0x40020c00
 8000c3c:	200015a4 	.word	0x200015a4
 8000c40:	200017d8 	.word	0x200017d8
 8000c44:	40020000 	.word	0x40020000
 8000c48:	0800e2a4 	.word	0x0800e2a4

08000c4c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09a      	sub	sp, #104	; 0x68
 8000c50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c56:	2230      	movs	r2, #48	; 0x30
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f00d fa53 	bl	800e106 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <SystemClock_Config+0x100>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8a:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <SystemClock_Config+0x100>)
 8000c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <SystemClock_Config+0x100>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <SystemClock_Config+0x104>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a2a      	ldr	r2, [pc, #168]	; (8000d50 <SystemClock_Config+0x104>)
 8000ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <SystemClock_Config+0x104>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ccc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000cce:	2304      	movs	r3, #4
 8000cd0:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000cd2:	2348      	movs	r3, #72	; 0x48
 8000cd4:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 ff7a 	bl	8005bdc <HAL_RCC_OscConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0xa6>
		Error_Handler();
 8000cee:	f000 faa9 	bl	8001244 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f005 f9d4 	bl	80060bc <HAL_RCC_ClockConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0xd2>
		Error_Handler();
 8000d1a:	f000 fa93 	bl	8001244 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 288;
 8000d22:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000d26:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8000d2c:	2306      	movs	r3, #6
 8000d2e:	61bb      	str	r3, [r7, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4618      	mov	r0, r3
 8000d36:	f005 fb9f 	bl	8006478 <HAL_RCCEx_PeriphCLKConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xf8>
		Error_Handler();
 8000d40:	f000 fa80 	bl	8001244 <Error_Handler>
	}
}
 8000d44:	bf00      	nop
 8000d46:	3768      	adds	r7, #104	; 0x68
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d5a:	4a13      	ldr	r2, [pc, #76]	; (8000da8 <MX_I2C1_Init+0x54>)
 8000d5c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <MX_I2C1_Init+0x58>)
 8000d62:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d76:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d78:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8a:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d90:	4804      	ldr	r0, [pc, #16]	; (8000da4 <MX_I2C1_Init+0x50>)
 8000d92:	f003 fa09 	bl	80041a8 <HAL_I2C_Init>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d9c:	f000 fa52 	bl	8001244 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	200013d0 	.word	0x200013d0
 8000da8:	40005400 	.word	0x40005400
 8000dac:	000186a0 	.word	0x000186a0

08000db0 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000db6:	4a13      	ldr	r2, [pc, #76]	; (8000e04 <MX_I2C2_Init+0x54>)
 8000db8:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dbc:	4a12      	ldr	r2, [pc, #72]	; (8000e08 <MX_I2C2_Init+0x58>)
 8000dbe:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dd2:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <MX_I2C2_Init+0x50>)
 8000dee:	f003 f9db 	bl	80041a8 <HAL_I2C_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_I2C2_Init+0x4c>
		Error_Handler();
 8000df8:	f000 fa24 	bl	8001244 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20001464 	.word	0x20001464
 8000e04:	40005800 	.word	0x40005800
 8000e08:	000186a0 	.word	0x000186a0

08000e0c <MX_I2S3_Init>:
/**
 * @brief I2S3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S3_Init(void) {
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	/* USER CODE END I2S3_Init 0 */

	/* USER CODE BEGIN I2S3_Init 1 */

	/* USER CODE END I2S3_Init 1 */
	hi2s3.Instance = SPI3;
 8000e10:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e12:	4a14      	ldr	r2, [pc, #80]	; (8000e64 <MX_I2S3_Init+0x58>)
 8000e14:	601a      	str	r2, [r3, #0]
	hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e1c:	605a      	str	r2, [r3, #4]
	hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000e1e:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
	hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000e24:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
	hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e30:	611a      	str	r2, [r3, #16]
	hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e34:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e38:	615a      	str	r2, [r3, #20]
	hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
	hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
	hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s3) != HAL_OK) {
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_I2S3_Init+0x54>)
 8000e4e:	f004 f933 	bl	80050b8 <HAL_I2S_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2S3_Init+0x50>
		Error_Handler();
 8000e58:	f000 f9f4 	bl	8001244 <Error_Handler>
	}
	/* USER CODE BEGIN I2S3_Init 2 */

	/* USER CODE END I2S3_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20001558 	.word	0x20001558
 8000e64:	40003c00 	.word	0x40003c00

08000e68 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000e84:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM4_Init+0x94>)
 8000e86:	4a1e      	ldr	r2, [pc, #120]	; (8000f00 <MX_TIM4_Init+0x98>)
 8000e88:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = TIM4_PRESCALER;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	; (8000efc <MX_TIM4_Init+0x94>)
 8000e8c:	2263      	movs	r2, #99	; 0x63
 8000e8e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <MX_TIM4_Init+0x94>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = TIM4_PERIOD;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_TIM4_Init+0x94>)
 8000e98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e9c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b17      	ldr	r3, [pc, #92]	; (8000efc <MX_TIM4_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b15      	ldr	r3, [pc, #84]	; (8000efc <MX_TIM4_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000eaa:	4814      	ldr	r0, [pc, #80]	; (8000efc <MX_TIM4_Init+0x94>)
 8000eac:	f005 fc74 	bl	8006798 <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x52>
		Error_Handler();
 8000eb6:	f000 f9c5 	bl	8001244 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ebe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_TIM4_Init+0x94>)
 8000ec8:	f005 feae 	bl	8006c28 <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8000ed2:	f000 f9b7 	bl	8001244 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_TIM4_Init+0x94>)
 8000ee4:	f006 fa30 	bl	8007348 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000eee:	f000 f9a9 	bl	8001244 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20001390 	.word	0x20001390
 8000f00:	40000800 	.word	0x40000800

08000f04 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f0a:	f107 0320 	add.w	r3, r7, #32
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]
 8000f20:	611a      	str	r2, [r3, #16]
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f28:	4a2d      	ldr	r2, [pc, #180]	; (8000fe0 <MX_TIM5_Init+0xdc>)
 8000f2a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = TIM5_PRESCALER;
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f2e:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000f32:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = TIM5_PERIOD;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f3c:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8000f40:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b24      	ldr	r3, [pc, #144]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8000f4e:	4823      	ldr	r0, [pc, #140]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f50:	f005 fc71 	bl	8006836 <HAL_TIM_PWM_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x5a>
		Error_Handler();
 8000f5a:	f000 f973 	bl	8001244 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481b      	ldr	r0, [pc, #108]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f6e:	f006 f9eb 	bl	8007348 <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM5_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8000f78:	f000 f964 	bl	8001244 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7c:	2360      	movs	r3, #96	; 0x60
 8000f7e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 8000f8c:	1d3b      	adds	r3, r7, #4
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000f94:	f005 fd82 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_TIM5_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8000f9e:	f000 f951 	bl	8001244 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3)
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000faa:	f005 fd77 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM5_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000fb4:	f000 f946 	bl	8001244 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 8000fb8:	1d3b      	adds	r3, r7, #4
 8000fba:	220c      	movs	r2, #12
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000fc0:	f005 fd6c 	bl	8006a9c <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM5_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8000fca:	f000 f93b 	bl	8001244 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <MX_TIM5_Init+0xd8>)
 8000fd0:	f000 fb04 	bl	80015dc <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	; 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	200014b8 	.word	0x200014b8
 8000fe0:	40000c00 	.word	0x40000c00

08000fe4 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_TIM10_Init+0x40>)
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <MX_TIM10_Init+0x44>)
 8000fec:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = TIM10_PRESCALER;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <MX_TIM10_Init+0x40>)
 8000ff0:	f240 3252 	movw	r2, #850	; 0x352
 8000ff4:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_TIM10_Init+0x40>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = TIM10_PERIOD;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_TIM10_Init+0x40>)
 8000ffe:	f240 3252 	movw	r2, #850	; 0x352
 8001002:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001004:	4b07      	ldr	r3, [pc, #28]	; (8001024 <MX_TIM10_Init+0x40>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_TIM10_Init+0x40>)
 800100c:	2200      	movs	r2, #0
 800100e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8001010:	4804      	ldr	r0, [pc, #16]	; (8001024 <MX_TIM10_Init+0x40>)
 8001012:	f005 fbc1 	bl	8006798 <HAL_TIM_Base_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM10_Init+0x3c>
		Error_Handler();
 800101c:	f000 f912 	bl	8001244 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20001424 	.word	0x20001424
 8001028:	40014400 	.word	0x40014400

0800102c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_DMA_Init+0x3c>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <MX_DMA_Init+0x3c>)
 800103c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_DMA_Init+0x3c>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2010      	movs	r0, #16
 8001054:	f000 fe3b 	bl	8001cce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001058:	2010      	movs	r0, #16
 800105a:	f000 fe54 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	61bb      	str	r3, [r7, #24]
 8001086:	4b69      	ldr	r3, [pc, #420]	; (800122c <MX_GPIO_Init+0x1c0>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a68      	ldr	r2, [pc, #416]	; (800122c <MX_GPIO_Init+0x1c0>)
 800108c:	f043 0310 	orr.w	r3, r3, #16
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b66      	ldr	r3, [pc, #408]	; (800122c <MX_GPIO_Init+0x1c0>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0310 	and.w	r3, r3, #16
 800109a:	61bb      	str	r3, [r7, #24]
 800109c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
 80010a2:	4b62      	ldr	r3, [pc, #392]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a61      	ldr	r2, [pc, #388]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b5f      	ldr	r3, [pc, #380]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b5b      	ldr	r3, [pc, #364]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a5a      	ldr	r2, [pc, #360]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b58      	ldr	r3, [pc, #352]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b54      	ldr	r3, [pc, #336]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b51      	ldr	r3, [pc, #324]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b4d      	ldr	r3, [pc, #308]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a4c      	ldr	r2, [pc, #304]	; (800122c <MX_GPIO_Init+0x1c0>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b4a      	ldr	r3, [pc, #296]	; (800122c <MX_GPIO_Init+0x1c0>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b46      	ldr	r3, [pc, #280]	; (800122c <MX_GPIO_Init+0x1c0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a45      	ldr	r2, [pc, #276]	; (800122c <MX_GPIO_Init+0x1c0>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b43      	ldr	r3, [pc, #268]	; (800122c <MX_GPIO_Init+0x1c0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, USB_power_Pin | dir_Pin | step_Pin,
 800112a:	2200      	movs	r2, #0
 800112c:	f240 1141 	movw	r1, #321	; 0x141
 8001130:	483f      	ldr	r0, [pc, #252]	; (8001230 <MX_GPIO_Init+0x1c4>)
 8001132:	f001 fb0b 	bl	800274c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001136:	2200      	movs	r2, #0
 8001138:	f24f 0110 	movw	r1, #61456	; 0xf010
 800113c:	483d      	ldr	r0, [pc, #244]	; (8001234 <MX_GPIO_Init+0x1c8>)
 800113e:	f001 fb05 	bl	800274c <HAL_GPIO_WritePin>
	GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | Audio_RST_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(slp_rst_GPIO_Port, slp_rst_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001148:	483b      	ldr	r0, [pc, #236]	; (8001238 <MX_GPIO_Init+0x1cc>)
 800114a:	f001 faff 	bl	800274c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : button_left_Pin button_select_Pin button_right_Pin */
	GPIO_InitStruct.Pin =
 800114e:	232a      	movs	r3, #42	; 0x2a
 8001150:	61fb      	str	r3, [r7, #28]
	button_left_Pin | button_select_Pin | button_right_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	4b3a      	ldr	r3, [pc, #232]	; (800123c <MX_GPIO_Init+0x1d0>)
 8001154:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001156:	2302      	movs	r3, #2
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4837      	ldr	r0, [pc, #220]	; (8001240 <MX_GPIO_Init+0x1d4>)
 8001162:	f001 f959 	bl	8002418 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_power_Pin dir_Pin step_Pin */
	GPIO_InitStruct.Pin = USB_power_Pin | dir_Pin | step_Pin;
 8001166:	f240 1341 	movw	r3, #321	; 0x141
 800116a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	482c      	ldr	r0, [pc, #176]	; (8001230 <MX_GPIO_Init+0x1c4>)
 8001180:	f001 f94a 	bl	8002418 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001184:	2301      	movs	r3, #1
 8001186:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	4828      	ldr	r0, [pc, #160]	; (8001238 <MX_GPIO_Init+0x1cc>)
 8001198:	f001 f93e 	bl	8002418 <HAL_GPIO_Init>

	/*Configure GPIO pin : endstop_Pin */
	GPIO_InitStruct.Pin = endstop_Pin;
 800119c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <MX_GPIO_Init+0x1d0>)
 80011a4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(endstop_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	4619      	mov	r1, r3
 80011b0:	4820      	ldr	r0, [pc, #128]	; (8001234 <MX_GPIO_Init+0x1c8>)
 80011b2:	f001 f931 	bl	8002418 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 80011b6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80011ba:	61fb      	str	r3, [r7, #28]
			| Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	4819      	ldr	r0, [pc, #100]	; (8001234 <MX_GPIO_Init+0x1c8>)
 80011d0:	f001 f922 	bl	8002418 <HAL_GPIO_Init>

	/*Configure GPIO pin : slp_rst_Pin */
	GPIO_InitStruct.Pin = slp_rst_Pin;
 80011d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(slp_rst_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	4812      	ldr	r0, [pc, #72]	; (8001238 <MX_GPIO_Init+0x1cc>)
 80011ee:	f001 f913 	bl	8002418 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2100      	movs	r1, #0
 80011f6:	2007      	movs	r0, #7
 80011f8:	f000 fd69 	bl	8001cce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011fc:	2007      	movs	r0, #7
 80011fe:	f000 fd82 	bl	8001d06 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001202:	2200      	movs	r2, #0
 8001204:	2100      	movs	r1, #0
 8001206:	2009      	movs	r0, #9
 8001208:	f000 fd61 	bl	8001cce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800120c:	2009      	movs	r0, #9
 800120e:	f000 fd7a 	bl	8001d06 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	2017      	movs	r0, #23
 8001218:	f000 fd59 	bl	8001cce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800121c:	2017      	movs	r0, #23
 800121e:	f000 fd72 	bl	8001d06 <HAL_NVIC_EnableIRQ>

}
 8001222:	bf00      	nop
 8001224:	3730      	adds	r7, #48	; 0x30
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40023800 	.word	0x40023800
 8001230:	40020800 	.word	0x40020800
 8001234:	40020c00 	.word	0x40020c00
 8001238:	40020000 	.word	0x40020000
 800123c:	10110000 	.word	0x10110000
 8001240:	40021000 	.word	0x40021000

08001244 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	607b      	str	r3, [r7, #4]
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x4c>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_MspInit+0x4c>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6453      	str	r3, [r2, #68]	; 0x44
 800126a:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	607b      	str	r3, [r7, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	603b      	str	r3, [r7, #0]
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x4c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	4a08      	ldr	r2, [pc, #32]	; (80012a0 <HAL_MspInit+0x4c>)
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	6413      	str	r3, [r2, #64]	; 0x40
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001292:	2007      	movs	r0, #7
 8001294:	f000 fd10 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a3b      	ldr	r2, [pc, #236]	; (80013b0 <HAL_I2C_MspInit+0x10c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d12d      	bne.n	8001322 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a39      	ldr	r2, [pc, #228]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2X1_SCL_Pin|I2C1_SDA_Pin;
 80012e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e8:	2312      	movs	r3, #18
 80012ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ec:	2301      	movs	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f0:	2303      	movs	r3, #3
 80012f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f4:	2304      	movs	r3, #4
 80012f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	482e      	ldr	r0, [pc, #184]	; (80013b8 <HAL_I2C_MspInit+0x114>)
 8001300:	f001 f88a 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 800130e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001312:	6413      	str	r3, [r2, #64]	; 0x40
 8001314:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001320:	e041      	b.n	80013a6 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a25      	ldr	r2, [pc, #148]	; (80013bc <HAL_I2C_MspInit+0x118>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d13c      	bne.n	80013a6 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a1f      	ldr	r2, [pc, #124]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 8001336:	f043 0302 	orr.w	r3, r3, #2
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800134e:	2312      	movs	r3, #18
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001352:	2301      	movs	r3, #1
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800135a:	2304      	movs	r3, #4
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	4619      	mov	r1, r3
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <HAL_I2C_MspInit+0x114>)
 8001366:	f001 f857 	bl	8002418 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 800136a:	2308      	movs	r3, #8
 800136c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136e:	2312      	movs	r3, #18
 8001370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001372:	2301      	movs	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001376:	2303      	movs	r3, #3
 8001378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800137a:	2309      	movs	r3, #9
 800137c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <HAL_I2C_MspInit+0x114>)
 8001386:	f001 f847 	bl	8002418 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a08      	ldr	r2, [pc, #32]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 8001394:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <HAL_I2C_MspInit+0x110>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
}
 80013a6:	bf00      	nop
 80013a8:	3730      	adds	r7, #48	; 0x30
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40005400 	.word	0x40005400
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020400 	.word	0x40020400
 80013bc:	40005800 	.word	0x40005800

080013c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a45      	ldr	r2, [pc, #276]	; (80014f4 <HAL_I2S_MspInit+0x134>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	f040 8084 	bne.w	80014ec <HAL_I2S_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	4b43      	ldr	r3, [pc, #268]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	4a42      	ldr	r2, [pc, #264]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 80013ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013f2:	6413      	str	r3, [r2, #64]	; 0x40
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	2300      	movs	r3, #0
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 8001406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001408:	4a3b      	ldr	r2, [pc, #236]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b35      	ldr	r3, [pc, #212]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4a34      	ldr	r2, [pc, #208]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	6313      	str	r3, [r2, #48]	; 0x30
 800142c:	4b32      	ldr	r3, [pc, #200]	; (80014f8 <HAL_I2S_MspInit+0x138>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001438:	2310      	movs	r3, #16
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001448:	2306      	movs	r3, #6
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	482a      	ldr	r0, [pc, #168]	; (80014fc <HAL_I2S_MspInit+0x13c>)
 8001454:	f000 ffe0 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_CK_Pin|I2S3_SD_Pin;
 8001458:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800145c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800146a:	2306      	movs	r3, #6
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800146e:	f107 0314 	add.w	r3, r7, #20
 8001472:	4619      	mov	r1, r3
 8001474:	4822      	ldr	r0, [pc, #136]	; (8001500 <HAL_I2S_MspInit+0x140>)
 8001476:	f000 ffcf 	bl	8002418 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_I2S_MspInit+0x144>)
 800147c:	4a22      	ldr	r2, [pc, #136]	; (8001508 <HAL_I2S_MspInit+0x148>)
 800147e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001480:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_I2S_MspInit+0x144>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001486:	4b1f      	ldr	r3, [pc, #124]	; (8001504 <HAL_I2S_MspInit+0x144>)
 8001488:	2240      	movs	r2, #64	; 0x40
 800148a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_I2S_MspInit+0x144>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001492:	4b1c      	ldr	r3, [pc, #112]	; (8001504 <HAL_I2S_MspInit+0x144>)
 8001494:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001498:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_I2S_MspInit+0x144>)
 800149c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014a0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014a2:	4b18      	ldr	r3, [pc, #96]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014a8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014ba:	2204      	movs	r2, #4
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014c0:	2203      	movs	r2, #3
 80014c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80014d0:	480c      	ldr	r0, [pc, #48]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014d2:	f000 fc33 	bl	8001d3c <HAL_DMA_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <HAL_I2S_MspInit+0x120>
    {
      Error_Handler();
 80014dc:	f7ff feb2 	bl	8001244 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014e4:	639a      	str	r2, [r3, #56]	; 0x38
 80014e6:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_I2S_MspInit+0x144>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	; 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40003c00 	.word	0x40003c00
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000
 8001500:	40020800 	.word	0x40020800
 8001504:	200014f8 	.word	0x200014f8
 8001508:	40026088 	.word	0x40026088

0800150c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a1c      	ldr	r2, [pc, #112]	; (800158c <HAL_TIM_Base_MspInit+0x80>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d116      	bne.n	800154c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_TIM_Base_MspInit+0x84>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <HAL_TIM_Base_MspInit+0x84>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6413      	str	r3, [r2, #64]	; 0x40
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_TIM_Base_MspInit+0x84>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	201e      	movs	r0, #30
 8001540:	f000 fbc5 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001544:	201e      	movs	r0, #30
 8001546:	f000 fbde 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800154a:	e01a      	b.n	8001582 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a10      	ldr	r2, [pc, #64]	; (8001594 <HAL_TIM_Base_MspInit+0x88>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d115      	bne.n	8001582 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_TIM_Base_MspInit+0x84>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a0c      	ldr	r2, [pc, #48]	; (8001590 <HAL_TIM_Base_MspInit+0x84>)
 8001560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_TIM_Base_MspInit+0x84>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2019      	movs	r0, #25
 8001578:	f000 fba9 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800157c:	2019      	movs	r0, #25
 800157e:	f000 fbc2 	bl	8001d06 <HAL_NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40000800 	.word	0x40000800
 8001590:	40023800 	.word	0x40023800
 8001594:	40014400 	.word	0x40014400

08001598 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10d      	bne.n	80015c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_TIM_PWM_MspInit+0x40>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_TIM_PWM_MspInit+0x40>)
 80015b4:	f043 0308 	orr.w	r3, r3, #8
 80015b8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_TIM_PWM_MspInit+0x40>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40000c00 	.word	0x40000c00
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 030c 	add.w	r3, r7, #12
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_TIM_MspPostInit+0x68>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d11d      	bne.n	800163a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_TIM_MspPostInit+0x6c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_TIM_MspPostInit+0x6c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_TIM_MspPostInit+0x6c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
    /**TIM5 GPIO Configuration    
    PA1     ------> TIM5_CH2
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800161a:	230e      	movs	r3, #14
 800161c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800162a:	2302      	movs	r3, #2
 800162c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	4619      	mov	r1, r3
 8001634:	4805      	ldr	r0, [pc, #20]	; (800164c <HAL_TIM_MspPostInit+0x70>)
 8001636:	f000 feef 	bl	8002418 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3720      	adds	r7, #32
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40000c00 	.word	0x40000c00
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 f9f6 	bl	8001a94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80016b0:	2002      	movs	r0, #2
 80016b2:	f001 f865 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}

080016ba <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80016be:	2008      	movs	r0, #8
 80016c0:	f001 f85e 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA1_Stream5_IRQHandler+0x10>)
 80016ce:	f000 fc3b 	bl	8001f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200014f8 	.word	0x200014f8

080016dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80016e0:	2020      	movs	r0, #32
 80016e2:	f001 f84d 	bl	8002780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016f2:	f005 f8cb 	bl	800688c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20001424 	.word	0x20001424

08001700 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <TIM4_IRQHandler+0x10>)
 8001706:	f005 f8c1 	bl	800688c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001390 	.word	0x20001390

08001714 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <OTG_FS_IRQHandler+0x10>)
 800171a:	f001 fae3 	bl	8002ce4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20001de4 	.word	0x20001de4

08001728 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x50>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d102      	bne.n	800173e <_sbrk+0x16>
		heap_end = &end;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <_sbrk+0x50>)
 800173a:	4a10      	ldr	r2, [pc, #64]	; (800177c <_sbrk+0x54>)
 800173c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <_sbrk+0x50>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <_sbrk+0x50>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	466a      	mov	r2, sp
 800174e:	4293      	cmp	r3, r2
 8001750:	d907      	bls.n	8001762 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001752:	f00c fc93 	bl	800e07c <__errno>
 8001756:	4602      	mov	r2, r0
 8001758:	230c      	movs	r3, #12
 800175a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	e006      	b.n	8001770 <_sbrk+0x48>
	}

	heap_end += incr;
 8001762:	4b05      	ldr	r3, [pc, #20]	; (8001778 <_sbrk+0x50>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	4a03      	ldr	r2, [pc, #12]	; (8001778 <_sbrk+0x50>)
 800176c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800176e:	68fb      	ldr	r3, [r7, #12]
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000104 	.word	0x20000104
 800177c:	200020b0 	.word	0x200020b0

08001780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b08      	ldr	r3, [pc, #32]	; (80017a8 <SystemInit+0x28>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a07      	ldr	r2, [pc, #28]	; (80017a8 <SystemInit+0x28>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SystemInit+0x28>)
 8001796:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800179a:	609a      	str	r2, [r3, #8]
#endif
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 80017b0:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <wavPlayer_reset+0x1c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 80017b6:	4b05      	ldr	r3, [pc, #20]	; (80017cc <wavPlayer_reset+0x20>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2000133c 	.word	0x2000133c
 80017cc:	20001344 	.word	0x20001344

080017d0 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08e      	sub	sp, #56	; 0x38
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 80017dc:	2201      	movs	r2, #1
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	480d      	ldr	r0, [pc, #52]	; (8001818 <wavPlayer_fileSelect+0x48>)
 80017e2:	f00b fb05 	bl	800cdf0 <f_open>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <wavPlayer_fileSelect+0x20>
  {
    return false;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e00e      	b.n	800180e <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 80017f0:	f107 0308 	add.w	r3, r7, #8
 80017f4:	f107 010c 	add.w	r1, r7, #12
 80017f8:	222c      	movs	r2, #44	; 0x2c
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <wavPlayer_fileSelect+0x48>)
 80017fc:	f00b fcb6 	bl	800d16c <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4a06      	ldr	r2, [pc, #24]	; (800181c <wavPlayer_fileSelect+0x4c>)
 8001804:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	4a05      	ldr	r2, [pc, #20]	; (8001820 <wavPlayer_fileSelect+0x50>)
 800180a:	6013      	str	r3, [r2, #0]
  return true;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	3738      	adds	r7, #56	; 0x38
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000108 	.word	0x20000108
 800181c:	20000338 	.word	0x20000338
 8001820:	20001340 	.word	0x20001340

08001824 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  isFinished = false;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <wavPlayer_play+0x48>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <wavPlayer_play+0x4c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f92c 	bl	8000a90 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8001838:	2100      	movs	r1, #0
 800183a:	480e      	ldr	r0, [pc, #56]	; (8001874 <wavPlayer_play+0x50>)
 800183c:	f00b fe7d 	bl	800d53a <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8001840:	4b0d      	ldr	r3, [pc, #52]	; (8001878 <wavPlayer_play+0x54>)
 8001842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <wavPlayer_play+0x58>)
 8001848:	480a      	ldr	r0, [pc, #40]	; (8001874 <wavPlayer_play+0x50>)
 800184a:	f00b fc8f 	bl	800d16c <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 800184e:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <wavPlayer_play+0x5c>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <wavPlayer_play+0x54>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <wavPlayer_play+0x60>)
 800185a:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 800185c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <wavPlayer_play+0x58>)
 8001862:	f7ff f925 	bl	8000ab0 <audioI2S_play>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20001348 	.word	0x20001348
 8001870:	20001340 	.word	0x20001340
 8001874:	20000108 	.word	0x20000108
 8001878:	20001344 	.word	0x20001344
 800187c:	2000033c 	.word	0x2000033c
 8001880:	20000338 	.word	0x20000338
 8001884:	2000133c 	.word	0x2000133c

08001888 <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 800188c:	4b30      	ldr	r3, [pc, #192]	; (8001950 <wavPlayer_process+0xc8>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d859      	bhi.n	800194a <wavPlayer_process+0xc2>
 8001896:	a201      	add	r2, pc, #4	; (adr r2, 800189c <wavPlayer_process+0x14>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	08001949 	.word	0x08001949
 80018a0:	080018ad 	.word	0x080018ad
 80018a4:	080018ef 	.word	0x080018ef
 80018a8:	08001931 	.word	0x08001931
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <wavPlayer_process+0xcc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80018b2:	4b27      	ldr	r3, [pc, #156]	; (8001950 <wavPlayer_process+0xc8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80018b8:	4b26      	ldr	r3, [pc, #152]	; (8001954 <wavPlayer_process+0xcc>)
 80018ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018be:	4926      	ldr	r1, [pc, #152]	; (8001958 <wavPlayer_process+0xd0>)
 80018c0:	4826      	ldr	r0, [pc, #152]	; (800195c <wavPlayer_process+0xd4>)
 80018c2:	f00b fc53 	bl	800d16c <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 80018c6:	4b26      	ldr	r3, [pc, #152]	; (8001960 <wavPlayer_process+0xd8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018ce:	d907      	bls.n	80018e0 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 80018d0:	4b23      	ldr	r3, [pc, #140]	; (8001960 <wavPlayer_process+0xd8>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <wavPlayer_process+0xcc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <wavPlayer_process+0xd8>)
 80018dc:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 80018de:	e034      	b.n	800194a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 80018e0:	4b1f      	ldr	r3, [pc, #124]	; (8001960 <wavPlayer_process+0xd8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 80018e6:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <wavPlayer_process+0xc8>)
 80018e8:	2203      	movs	r2, #3
 80018ea:	701a      	strb	r2, [r3, #0]
    break;
 80018ec:	e02d      	b.n	800194a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <wavPlayer_process+0xcc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 80018f4:	4b16      	ldr	r3, [pc, #88]	; (8001950 <wavPlayer_process+0xc8>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <wavPlayer_process+0xcc>)
 80018fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001900:	4918      	ldr	r1, [pc, #96]	; (8001964 <wavPlayer_process+0xdc>)
 8001902:	4816      	ldr	r0, [pc, #88]	; (800195c <wavPlayer_process+0xd4>)
 8001904:	f00b fc32 	bl	800d16c <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <wavPlayer_process+0xd8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001910:	d907      	bls.n	8001922 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8001912:	4b13      	ldr	r3, [pc, #76]	; (8001960 <wavPlayer_process+0xd8>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <wavPlayer_process+0xcc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a10      	ldr	r2, [pc, #64]	; (8001960 <wavPlayer_process+0xd8>)
 800191e:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8001920:	e013      	b.n	800194a <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8001922:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <wavPlayer_process+0xd8>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8001928:	4b09      	ldr	r3, [pc, #36]	; (8001950 <wavPlayer_process+0xc8>)
 800192a:	2203      	movs	r2, #3
 800192c:	701a      	strb	r2, [r3, #0]
    break;
 800192e:	e00c      	b.n	800194a <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <wavPlayer_process+0xd4>)
 8001932:	f00b fdd8 	bl	800d4e6 <f_close>
    wavPlayer_reset();
 8001936:	f7ff ff39 	bl	80017ac <wavPlayer_reset>
    isFinished = true;
 800193a:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <wavPlayer_process+0xe0>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <wavPlayer_process+0xc8>)
 8001942:	2200      	movs	r2, #0
 8001944:	701a      	strb	r2, [r3, #0]
    break;
 8001946:	e000      	b.n	800194a <wavPlayer_process+0xc2>
    break;
 8001948:	bf00      	nop
  }
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20001349 	.word	0x20001349
 8001954:	20001344 	.word	0x20001344
 8001958:	2000033c 	.word	0x2000033c
 800195c:	20000108 	.word	0x20000108
 8001960:	2000133c 	.word	0x2000133c
 8001964:	20000b3c 	.word	0x20000b3c
 8001968:	20001348 	.word	0x20001348

0800196c <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <audioI2S_halfTransfer_Callback+0x14>)
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	20001349 	.word	0x20001349

08001984 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <audioI2S_fullTransfer_Callback+0x14>)
 800198a:	2202      	movs	r2, #2
 800198c:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	20001349 	.word	0x20001349

0800199c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800199c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80019a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80019a2:	e003      	b.n	80019ac <LoopCopyDataInit>

080019a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80019a4:	4b0c      	ldr	r3, [pc, #48]	; (80019d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80019a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80019a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80019aa:	3104      	adds	r1, #4

080019ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	; (80019dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80019b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80019b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80019b4:	d3f6      	bcc.n	80019a4 <CopyDataInit>
  ldr  r2, =_sbss
 80019b6:	4a0b      	ldr	r2, [pc, #44]	; (80019e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80019b8:	e002      	b.n	80019c0 <LoopFillZerobss>

080019ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80019ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019bc:	f842 3b04 	str.w	r3, [r2], #4

080019c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019c4:	d3f9      	bcc.n	80019ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019c6:	f7ff fedb 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ca:	f00c fb5d 	bl	800e088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ce:	f7ff f8b1 	bl	8000b34 <main>
  bx  lr    
 80019d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019d8:	0800e41c 	.word	0x0800e41c
  ldr  r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019e0:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80019e4:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80019e8:	200020ac 	.word	0x200020ac

080019ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019ec:	e7fe      	b.n	80019ec <ADC_IRQHandler>
	...

080019f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_Init+0x40>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_Init+0x40>)
 80019fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <HAL_Init+0x40>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_Init+0x40>)
 8001a06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a0c:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a07      	ldr	r2, [pc, #28]	; (8001a30 <HAL_Init+0x40>)
 8001a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a18:	2003      	movs	r0, #3
 8001a1a:	f000 f94d 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 f808 	bl	8001a34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a24:	f7ff fc16 	bl	8001254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_InitTick+0x54>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <HAL_InitTick+0x58>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 f965 	bl	8001d22 <HAL_SYSTICK_Config>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b0f      	cmp	r3, #15
 8001a66:	d80a      	bhi.n	8001a7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a70:	f000 f92d 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a74:	4a06      	ldr	r2, [pc, #24]	; (8001a90 <HAL_InitTick+0x5c>)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	e000      	b.n	8001a80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	20000000 	.word	0x20000000
 8001a8c:	20000008 	.word	0x20000008
 8001a90:	20000004 	.word	0x20000004

08001a94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_IncTick+0x20>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <HAL_IncTick+0x24>)
 8001aa6:	6013      	str	r3, [r2, #0]
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	200015a0 	.word	0x200015a0

08001abc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <HAL_GetTick+0x14>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200015a0 	.word	0x200015a0

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff ffee 	bl	8001abc <HAL_GetTick>
 8001ae0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_Delay+0x40>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4413      	add	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001afa:	bf00      	nop
 8001afc:	f7ff ffde 	bl	8001abc <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000008 	.word	0x20000008

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff feb8 	bl	8001abc <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e099      	b.n	8001e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f022 0201 	bic.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d78:	e00f      	b.n	8001d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d7a:	f7ff fe9f 	bl	8001abc <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b05      	cmp	r3, #5
 8001d86:	d908      	bls.n	8001d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2203      	movs	r2, #3
 8001d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e078      	b.n	8001e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1e8      	bne.n	8001d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4b38      	ldr	r3, [pc, #224]	; (8001e94 <HAL_DMA_Init+0x158>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f023 0307 	bic.w	r3, r3, #7
 8001e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2b04      	cmp	r3, #4
 8001e2c:	d117      	bne.n	8001e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d00e      	beq.n	8001e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 fa6f 	bl	8002324 <DMA_CheckFifoParam>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2240      	movs	r2, #64	; 0x40
 8001e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e016      	b.n	8001e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 fa26 	bl	80022b8 <DMA_CalcBaseAndBitshift>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	f010803f 	.word	0xf010803f

08001e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_DMA_Start_IT+0x26>
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e040      	b.n	8001f40 <HAL_DMA_Start_IT+0xa8>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d12f      	bne.n	8001f32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	2200      	movs	r2, #0
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f9b8 	bl	800225c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef0:	223f      	movs	r2, #63	; 0x3f
 8001ef2:	409a      	lsls	r2, r3
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0216 	orr.w	r2, r2, #22
 8001f06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0208 	orr.w	r2, r2, #8
 8001f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	e005      	b.n	8001f3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f54:	4b92      	ldr	r3, [pc, #584]	; (80021a0 <HAL_DMA_IRQHandler+0x258>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a92      	ldr	r2, [pc, #584]	; (80021a4 <HAL_DMA_IRQHandler+0x25c>)
 8001f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5e:	0a9b      	lsrs	r3, r3, #10
 8001f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f72:	2208      	movs	r2, #8
 8001f74:	409a      	lsls	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d01a      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0304 	and.w	r3, r3, #4
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0204 	bic.w	r2, r2, #4
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa0:	2208      	movs	r2, #8
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	f043 0201 	orr.w	r2, r3, #1
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	2201      	movs	r2, #1
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00b      	beq.n	8001fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe2:	f043 0202 	orr.w	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fee:	2204      	movs	r2, #4
 8001ff0:	409a      	lsls	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200c:	2204      	movs	r2, #4
 800200e:	409a      	lsls	r2, r3
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002018:	f043 0204 	orr.w	r2, r3, #4
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	2210      	movs	r2, #16
 8002026:	409a      	lsls	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4013      	ands	r3, r2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d043      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d03c      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2210      	movs	r2, #16
 8002044:	409a      	lsls	r2, r3
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d018      	beq.n	800208a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d108      	bne.n	8002078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	d024      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
 8002076:	e01f      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01b      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	4798      	blx	r3
 8002088:	e016      	b.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d107      	bne.n	80020a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0208 	bic.w	r2, r2, #8
 80020a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020bc:	2220      	movs	r2, #32
 80020be:	409a      	lsls	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	f000 808e 	beq.w	80021e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8086 	beq.w	80021e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	2220      	movs	r2, #32
 80020e0:	409a      	lsls	r2, r3
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d136      	bne.n	8002160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0216 	bic.w	r2, r2, #22
 8002100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	2b00      	cmp	r3, #0
 8002118:	d103      	bne.n	8002122 <HAL_DMA_IRQHandler+0x1da>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800211e:	2b00      	cmp	r3, #0
 8002120:	d007      	beq.n	8002132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0208 	bic.w	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002136:	223f      	movs	r2, #63	; 0x3f
 8002138:	409a      	lsls	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002152:	2b00      	cmp	r3, #0
 8002154:	d07d      	beq.n	8002252 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	4798      	blx	r3
        }
        return;
 800215e:	e078      	b.n	8002252 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01c      	beq.n	80021a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d108      	bne.n	800218e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	2b00      	cmp	r3, #0
 8002182:	d030      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	4798      	blx	r3
 800218c:	e02b      	b.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d027      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	4798      	blx	r3
 800219e:	e022      	b.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
 80021a0:	20000000 	.word	0x20000000
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0210 	bic.w	r2, r2, #16
 80021c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d032      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d022      	beq.n	8002240 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2205      	movs	r2, #5
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0201 	bic.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	3301      	adds	r3, #1
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	429a      	cmp	r2, r3
 800221c:	d307      	bcc.n	800222e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f2      	bne.n	8002212 <HAL_DMA_IRQHandler+0x2ca>
 800222c:	e000      	b.n	8002230 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800222e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d005      	beq.n	8002254 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	4798      	blx	r3
 8002250:	e000      	b.n	8002254 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002252:	bf00      	nop
    }
  }
}
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop

0800225c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b40      	cmp	r3, #64	; 0x40
 8002288:	d108      	bne.n	800229c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800229a:	e007      	b.n	80022ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3b10      	subs	r3, #16
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <DMA_CalcBaseAndBitshift+0x64>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	091b      	lsrs	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022d2:	4a13      	ldr	r2, [pc, #76]	; (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2b03      	cmp	r3, #3
 80022e4:	d909      	bls.n	80022fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ee:	f023 0303 	bic.w	r3, r3, #3
 80022f2:	1d1a      	adds	r2, r3, #4
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	659a      	str	r2, [r3, #88]	; 0x58
 80022f8:	e007      	b.n	800230a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002302:	f023 0303 	bic.w	r3, r3, #3
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	aaaaaaab 	.word	0xaaaaaaab
 8002320:	0800e370 	.word	0x0800e370

08002324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11f      	bne.n	800237e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d855      	bhi.n	80023f0 <DMA_CheckFifoParam+0xcc>
 8002344:	a201      	add	r2, pc, #4	; (adr r2, 800234c <DMA_CheckFifoParam+0x28>)
 8002346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234a:	bf00      	nop
 800234c:	0800235d 	.word	0x0800235d
 8002350:	0800236f 	.word	0x0800236f
 8002354:	0800235d 	.word	0x0800235d
 8002358:	080023f1 	.word	0x080023f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d045      	beq.n	80023f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800236c:	e042      	b.n	80023f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002376:	d13f      	bne.n	80023f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e03c      	b.n	80023f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002386:	d121      	bne.n	80023cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b03      	cmp	r3, #3
 800238c:	d836      	bhi.n	80023fc <DMA_CheckFifoParam+0xd8>
 800238e:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x70>)
 8002390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023ab 	.word	0x080023ab
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	080023bd 	.word	0x080023bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      break;
 80023a8:	e02f      	b.n	800240a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d024      	beq.n	8002400 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ba:	e021      	b.n	8002400 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023c4:	d11e      	bne.n	8002404 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023ca:	e01b      	b.n	8002404 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d902      	bls.n	80023d8 <DMA_CheckFifoParam+0xb4>
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d003      	beq.n	80023de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023d6:	e018      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
      break;
 80023dc:	e015      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      break;
 80023ee:	e00b      	b.n	8002408 <DMA_CheckFifoParam+0xe4>
      break;
 80023f0:	bf00      	nop
 80023f2:	e00a      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 80023f4:	bf00      	nop
 80023f6:	e008      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 80023f8:	bf00      	nop
 80023fa:	e006      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 80023fc:	bf00      	nop
 80023fe:	e004      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 8002400:	bf00      	nop
 8002402:	e002      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;   
 8002404:	bf00      	nop
 8002406:	e000      	b.n	800240a <DMA_CheckFifoParam+0xe6>
      break;
 8002408:	bf00      	nop
    }
  } 
  
  return status; 
 800240a:	7bfb      	ldrb	r3, [r7, #15]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002418:	b480      	push	{r7}
 800241a:	b089      	sub	sp, #36	; 0x24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
 8002432:	e159      	b.n	80026e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002434:	2201      	movs	r2, #1
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	697a      	ldr	r2, [r7, #20]
 8002444:	4013      	ands	r3, r2
 8002446:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002448:	693a      	ldr	r2, [r7, #16]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	429a      	cmp	r2, r3
 800244e:	f040 8148 	bne.w	80026e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d00b      	beq.n	8002472 <HAL_GPIO_Init+0x5a>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002466:	2b11      	cmp	r3, #17
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b12      	cmp	r3, #18
 8002470:	d130      	bne.n	80024d4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	2203      	movs	r2, #3
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a8:	2201      	movs	r2, #1
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 0201 	and.w	r2, r3, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	2203      	movs	r2, #3
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	2b02      	cmp	r3, #2
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0xfc>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b12      	cmp	r3, #18
 8002512:	d123      	bne.n	800255c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	08da      	lsrs	r2, r3, #3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3208      	adds	r2, #8
 800251c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002520:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	220f      	movs	r2, #15
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	08da      	lsrs	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3208      	adds	r2, #8
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0203 	and.w	r2, r3, #3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80a2 	beq.w	80026e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b56      	ldr	r3, [pc, #344]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	4a55      	ldr	r2, [pc, #340]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 80025a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025ac:	6453      	str	r3, [r2, #68]	; 0x44
 80025ae:	4b53      	ldr	r3, [pc, #332]	; (80026fc <HAL_GPIO_Init+0x2e4>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ba:	4a51      	ldr	r2, [pc, #324]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	089b      	lsrs	r3, r3, #2
 80025c0:	3302      	adds	r3, #2
 80025c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	f003 0303 	and.w	r3, r3, #3
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	220f      	movs	r2, #15
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a48      	ldr	r2, [pc, #288]	; (8002704 <HAL_GPIO_Init+0x2ec>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d019      	beq.n	800261a <HAL_GPIO_Init+0x202>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a47      	ldr	r2, [pc, #284]	; (8002708 <HAL_GPIO_Init+0x2f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d013      	beq.n	8002616 <HAL_GPIO_Init+0x1fe>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a46      	ldr	r2, [pc, #280]	; (800270c <HAL_GPIO_Init+0x2f4>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <HAL_GPIO_Init+0x1fa>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a45      	ldr	r2, [pc, #276]	; (8002710 <HAL_GPIO_Init+0x2f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d007      	beq.n	800260e <HAL_GPIO_Init+0x1f6>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a44      	ldr	r2, [pc, #272]	; (8002714 <HAL_GPIO_Init+0x2fc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d101      	bne.n	800260a <HAL_GPIO_Init+0x1f2>
 8002606:	2304      	movs	r3, #4
 8002608:	e008      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260a:	2307      	movs	r3, #7
 800260c:	e006      	b.n	800261c <HAL_GPIO_Init+0x204>
 800260e:	2303      	movs	r3, #3
 8002610:	e004      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002612:	2302      	movs	r3, #2
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x204>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_GPIO_Init+0x204>
 800261a:	2300      	movs	r3, #0
 800261c:	69fa      	ldr	r2, [r7, #28]
 800261e:	f002 0203 	and.w	r2, r2, #3
 8002622:	0092      	lsls	r2, r2, #2
 8002624:	4093      	lsls	r3, r2
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800262c:	4934      	ldr	r1, [pc, #208]	; (8002700 <HAL_GPIO_Init+0x2e8>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	089b      	lsrs	r3, r3, #2
 8002632:	3302      	adds	r3, #2
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <HAL_GPIO_Init+0x300>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800265e:	4a2e      	ldr	r2, [pc, #184]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002688:	4a23      	ldr	r2, [pc, #140]	; (8002718 <HAL_GPIO_Init+0x300>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <HAL_GPIO_Init+0x300>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_GPIO_Init+0x300>)
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <HAL_GPIO_Init+0x300>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d003      	beq.n	80026dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026dc:	4a0e      	ldr	r2, [pc, #56]	; (8002718 <HAL_GPIO_Init+0x300>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61fb      	str	r3, [r7, #28]
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	f67f aea2 	bls.w	8002434 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3724      	adds	r7, #36	; 0x24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	40023800 	.word	0x40023800
 8002700:	40013800 	.word	0x40013800
 8002704:	40020000 	.word	0x40020000
 8002708:	40020400 	.word	0x40020400
 800270c:	40020800 	.word	0x40020800
 8002710:	40020c00 	.word	0x40020c00
 8002714:	40021000 	.word	0x40021000
 8002718:	40013c00 	.word	0x40013c00

0800271c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	887b      	ldrh	r3, [r7, #2]
 800272e:	4013      	ands	r3, r2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002734:	2301      	movs	r3, #1
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e001      	b.n	800273e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800273a:	2300      	movs	r3, #0
 800273c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800273e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	460b      	mov	r3, r1
 8002756:	807b      	strh	r3, [r7, #2]
 8002758:	4613      	mov	r3, r2
 800275a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800275c:	787b      	ldrb	r3, [r7, #1]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002762:	887a      	ldrh	r2, [r7, #2]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002768:	e003      	b.n	8002772 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800276a:	887b      	ldrh	r3, [r7, #2]
 800276c:	041a      	lsls	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	619a      	str	r2, [r3, #24]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d006      	beq.n	80027a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002796:	4a05      	ldr	r2, [pc, #20]	; (80027ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002798:	88fb      	ldrh	r3, [r7, #6]
 800279a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800279c:	88fb      	ldrh	r3, [r7, #6]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f806 	bl	80027b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80027c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027c8:	b08f      	sub	sp, #60	; 0x3c
 80027ca:	af0a      	add	r7, sp, #40	; 0x28
 80027cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e054      	b.n	8002882 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f00b f964 	bl	800dac0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2203      	movs	r2, #3
 80027fc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f004 fe8a 	bl	8007530 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	687e      	ldr	r6, [r7, #4]
 8002824:	466d      	mov	r5, sp
 8002826:	f106 0410 	add.w	r4, r6, #16
 800282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002830:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002836:	e885 0003 	stmia.w	r5, {r0, r1}
 800283a:	1d33      	adds	r3, r6, #4
 800283c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283e:	6838      	ldr	r0, [r7, #0]
 8002840:	f004 fe04 	bl	800744c <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f004 fe81 	bl	8007552 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	687e      	ldr	r6, [r7, #4]
 8002858:	466d      	mov	r5, sp
 800285a:	f106 0410 	add.w	r4, r6, #16
 800285e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002860:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002862:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002864:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002866:	e894 0003 	ldmia.w	r4, {r0, r1}
 800286a:	e885 0003 	stmia.w	r5, {r0, r1}
 800286e:	1d33      	adds	r3, r6, #4
 8002870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f004 ff94 	bl	80077a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800288a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800288a:	b590      	push	{r4, r7, lr}
 800288c:	b089      	sub	sp, #36	; 0x24
 800288e:	af04      	add	r7, sp, #16
 8002890:	6078      	str	r0, [r7, #4]
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	461a      	mov	r2, r3
 8002898:	4603      	mov	r3, r0
 800289a:	70fb      	strb	r3, [r7, #3]
 800289c:	460b      	mov	r3, r1
 800289e:	70bb      	strb	r3, [r7, #2]
 80028a0:	4613      	mov	r3, r2
 80028a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_HCD_HC_Init+0x28>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e07f      	b.n	80029b2 <HAL_HCD_HC_Init+0x128>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	333d      	adds	r3, #61	; 0x3d
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	440b      	add	r3, r1
 80028dc:	3338      	adds	r3, #56	; 0x38
 80028de:	787a      	ldrb	r2, [r7, #1]
 80028e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80028e2:	78fa      	ldrb	r2, [r7, #3]
 80028e4:	6879      	ldr	r1, [r7, #4]
 80028e6:	4613      	mov	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	3340      	adds	r3, #64	; 0x40
 80028f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80028f4:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	440b      	add	r3, r1
 8002904:	3339      	adds	r3, #57	; 0x39
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	440b      	add	r3, r1
 8002918:	333f      	adds	r3, #63	; 0x3f
 800291a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800291e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	78bb      	ldrb	r3, [r7, #2]
 8002924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002928:	b2d8      	uxtb	r0, r3
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4413      	add	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	440b      	add	r3, r1
 8002936:	333a      	adds	r3, #58	; 0x3a
 8002938:	4602      	mov	r2, r0
 800293a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800293c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002940:	2b00      	cmp	r3, #0
 8002942:	da0a      	bge.n	800295a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	333b      	adds	r3, #59	; 0x3b
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
 8002958:	e009      	b.n	800296e <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	333b      	adds	r3, #59	; 0x3b
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	333c      	adds	r3, #60	; 0x3c
 800297e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002982:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	787c      	ldrb	r4, [r7, #1]
 800298a:	78ba      	ldrb	r2, [r7, #2]
 800298c:	78f9      	ldrb	r1, [r7, #3]
 800298e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002990:	9302      	str	r3, [sp, #8]
 8002992:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	f897 3020 	ldrb.w	r3, [r7, #32]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	4623      	mov	r3, r4
 80029a0:	f005 f880 	bl	8007aa4 <USB_HC_Init>
 80029a4:	4603      	mov	r3, r0
 80029a6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd90      	pop	{r4, r7, pc}

080029ba <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b084      	sub	sp, #16
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	460b      	mov	r3, r1
 80029c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_HCD_HC_Halt+0x1e>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e00f      	b.n	80029f8 <HAL_HCD_HC_Halt+0x3e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f005 faba 	bl	8007f62 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4603      	mov	r3, r0
 8002a10:	70fb      	strb	r3, [r7, #3]
 8002a12:	460b      	mov	r3, r1
 8002a14:	70bb      	strb	r3, [r7, #2]
 8002a16:	4613      	mov	r3, r2
 8002a18:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	440b      	add	r3, r1
 8002a28:	333b      	adds	r3, #59	; 0x3b
 8002a2a:	78ba      	ldrb	r2, [r7, #2]
 8002a2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a2e:	78fa      	ldrb	r2, [r7, #3]
 8002a30:	6879      	ldr	r1, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	440b      	add	r3, r1
 8002a3c:	333f      	adds	r3, #63	; 0x3f
 8002a3e:	787a      	ldrb	r2, [r7, #1]
 8002a40:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002a42:	7c3b      	ldrb	r3, [r7, #16]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d114      	bne.n	8002a72 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	3342      	adds	r3, #66	; 0x42
 8002a58:	2203      	movs	r2, #3
 8002a5a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	333d      	adds	r3, #61	; 0x3d
 8002a6c:	7f3a      	ldrb	r2, [r7, #28]
 8002a6e:	701a      	strb	r2, [r3, #0]
 8002a70:	e009      	b.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	3342      	adds	r3, #66	; 0x42
 8002a82:	2202      	movs	r2, #2
 8002a84:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a86:	787b      	ldrb	r3, [r7, #1]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	f200 80d6 	bhi.w	8002c3a <HAL_HCD_HC_SubmitRequest+0x23a>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002aa5 	.word	0x08002aa5
 8002a98:	08002c25 	.word	0x08002c25
 8002a9c:	08002b11 	.word	0x08002b11
 8002aa0:	08002b9b 	.word	0x08002b9b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002aa4:	7c3b      	ldrb	r3, [r7, #16]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	f040 80c9 	bne.w	8002c3e <HAL_HCD_HC_SubmitRequest+0x23e>
 8002aac:	78bb      	ldrb	r3, [r7, #2]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 80c5 	bne.w	8002c3e <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8002ab4:	8b3b      	ldrh	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3351      	adds	r3, #81	; 0x51
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4413      	add	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	440b      	add	r3, r1
 8002adc:	3351      	adds	r3, #81	; 0x51
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	440b      	add	r3, r1
 8002af2:	3342      	adds	r3, #66	; 0x42
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002af8:	e0a1      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3342      	adds	r3, #66	; 0x42
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	701a      	strb	r2, [r3, #0]
      break;
 8002b0e:	e096      	b.n	8002c3e <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002b10:	78bb      	ldrb	r3, [r7, #2]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d120      	bne.n	8002b58 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b16:	78fa      	ldrb	r2, [r7, #3]
 8002b18:	6879      	ldr	r1, [r7, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	440b      	add	r3, r1
 8002b24:	3351      	adds	r3, #81	; 0x51
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	4613      	mov	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	00db      	lsls	r3, r3, #3
 8002b38:	440b      	add	r3, r1
 8002b3a:	3342      	adds	r3, #66	; 0x42
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002b40:	e07e      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	3342      	adds	r3, #66	; 0x42
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]
      break;
 8002b56:	e073      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	6879      	ldr	r1, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	440b      	add	r3, r1
 8002b66:	3350      	adds	r3, #80	; 0x50
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10a      	bne.n	8002b84 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	440b      	add	r3, r1
 8002b7c:	3342      	adds	r3, #66	; 0x42
 8002b7e:	2200      	movs	r2, #0
 8002b80:	701a      	strb	r2, [r3, #0]
      break;
 8002b82:	e05d      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3342      	adds	r3, #66	; 0x42
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
      break;
 8002b98:	e052      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b9a:	78bb      	ldrb	r3, [r7, #2]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d120      	bne.n	8002be2 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ba0:	78fa      	ldrb	r2, [r7, #3]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	3351      	adds	r3, #81	; 0x51
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10a      	bne.n	8002bcc <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	440b      	add	r3, r1
 8002bc4:	3342      	adds	r3, #66	; 0x42
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002bca:	e039      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	440b      	add	r3, r1
 8002bda:	3342      	adds	r3, #66	; 0x42
 8002bdc:	2202      	movs	r2, #2
 8002bde:	701a      	strb	r2, [r3, #0]
      break;
 8002be0:	e02e      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	440b      	add	r3, r1
 8002bf0:	3350      	adds	r3, #80	; 0x50
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	440b      	add	r3, r1
 8002c06:	3342      	adds	r3, #66	; 0x42
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
      break;
 8002c0c:	e018      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3342      	adds	r3, #66	; 0x42
 8002c1e:	2202      	movs	r2, #2
 8002c20:	701a      	strb	r2, [r3, #0]
      break;
 8002c22:	e00d      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	3342      	adds	r3, #66	; 0x42
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
      break;
 8002c38:	e002      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8002c3a:	bf00      	nop
 8002c3c:	e000      	b.n	8002c40 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8002c3e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3344      	adds	r3, #68	; 0x44
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	8b39      	ldrh	r1, [r7, #24]
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4403      	add	r3, r0
 8002c64:	3348      	adds	r3, #72	; 0x48
 8002c66:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	440b      	add	r3, r1
 8002c76:	335c      	adds	r3, #92	; 0x5c
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	334c      	adds	r3, #76	; 0x4c
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	440b      	add	r3, r1
 8002c9e:	3339      	adds	r3, #57	; 0x39
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	440b      	add	r3, r1
 8002cb2:	335d      	adds	r3, #93	; 0x5d
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6818      	ldr	r0, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4413      	add	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	3338      	adds	r3, #56	; 0x38
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	18d1      	adds	r1, r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f004 fff0 	bl	8007cb8 <USB_HC_StartXfer>
 8002cd8:	4603      	mov	r3, r0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop

08002ce4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f004 fd0d 	bl	800771a <USB_GetMode>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	f040 80ef 	bne.w	8002ee6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f004 fcf1 	bl	80076f4 <USB_ReadInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80e5 	beq.w	8002ee4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f004 fce8 	bl	80076f4 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002d2e:	d104      	bne.n	8002d3a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002d38:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f004 fcd8 	bl	80076f4 <USB_ReadInterrupts>
 8002d44:	4603      	mov	r3, r0
 8002d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d104      	bne.n	8002d5a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d58:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f004 fcc8 	bl	80076f4 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d6e:	d104      	bne.n	8002d7a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f004 fcb8 	bl	80076f4 <USB_ReadInterrupts>
 8002d84:	4603      	mov	r3, r0
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d103      	bne.n	8002d96 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2202      	movs	r2, #2
 8002d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fcaa 	bl	80076f4 <USB_ReadInterrupts>
 8002da0:	4603      	mov	r3, r0
 8002da2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002daa:	d115      	bne.n	8002dd8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002db4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d108      	bne.n	8002dd8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f00a fef8 	bl	800dbbc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f004 fda0 	bl	8007918 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f004 fc89 	bl	80076f4 <USB_ReadInterrupts>
 8002de2:	4603      	mov	r3, r0
 8002de4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002de8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dec:	d102      	bne.n	8002df4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f001 f966 	bl	80040c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f004 fc7b 	bl	80076f4 <USB_ReadInterrupts>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d106      	bne.n	8002e16 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f00a febb 	bl	800db84 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2208      	movs	r2, #8
 8002e14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 fc6a 	bl	80076f4 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002e2a:	d138      	bne.n	8002e9e <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 f885 	bl	8007f40 <USB_HC_ReadInterrupt>
 8002e36:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e025      	b.n	8002e8a <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 030f 	and.w	r3, r3, #15
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d018      	beq.n	8002e84 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e68:	d106      	bne.n	8002e78 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4619      	mov	r1, r3
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8cf 	bl	8003014 <HCD_HC_IN_IRQHandler>
 8002e76:	e005      	b.n	8002e84 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fcfd 	bl	800387e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3301      	adds	r3, #1
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	697a      	ldr	r2, [r7, #20]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d3d4      	bcc.n	8002e3e <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f004 fc26 	bl	80076f4 <USB_ReadInterrupts>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	f003 0310 	and.w	r3, r3, #16
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d101      	bne.n	8002eb6 <HAL_HCD_IRQHandler+0x1d2>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <HAL_HCD_IRQHandler+0x1d4>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d014      	beq.n	8002ee6 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0210 	bic.w	r2, r2, #16
 8002eca:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f001 f84b 	bl	8003f68 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699a      	ldr	r2, [r3, #24]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0210 	orr.w	r2, r2, #16
 8002ee0:	619a      	str	r2, [r3, #24]
 8002ee2:	e000      	b.n	8002ee6 <HAL_HCD_IRQHandler+0x202>
      return;
 8002ee4:	bf00      	nop
    }
  }
}
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_HCD_Start+0x16>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e013      	b.n	8002f2a <HAL_HCD_Start+0x3e>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f004 fafd 	bl	800750e <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2101      	movs	r1, #1
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f004 fd60 	bl	80079e0 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d101      	bne.n	8002f48 <HAL_HCD_Stop+0x16>
 8002f44:	2302      	movs	r3, #2
 8002f46:	e00d      	b.n	8002f64 <HAL_HCD_Stop+0x32>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f005 f93f 	bl	80081d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f004 fd07 	bl	800798c <USB_ResetPort>
 8002f7e:	4603      	mov	r3, r0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	440b      	add	r3, r1
 8002fa2:	335c      	adds	r3, #92	; 0x5c
 8002fa4:	781b      	ldrb	r3, [r3, #0]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	460b      	mov	r3, r1
 8002fbc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	440b      	add	r3, r1
 8002fcc:	334c      	adds	r3, #76	; 0x4c
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f004 fd49 	bl	8007a80 <USB_GetCurrentFrame>
 8002fee:	4603      	mov	r3, r0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f004 fd24 	bl	8007a52 <USB_GetHostSpeed>
 800300a:	4603      	mov	r3, r0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0304 	and.w	r3, r3, #4
 8003040:	2b04      	cmp	r3, #4
 8003042:	d119      	bne.n	8003078 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2304      	movs	r3, #4
 8003054:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	015a      	lsls	r2, r3, #5
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4413      	add	r3, r2
 800305e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	0151      	lsls	r1, r2, #5
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	440a      	add	r2, r1
 800306c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003070:	f043 0302 	orr.w	r3, r3, #2
 8003074:	60d3      	str	r3, [r2, #12]
 8003076:	e0ce      	b.n	8003216 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	015a      	lsls	r2, r3, #5
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4413      	add	r3, r2
 8003080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800308e:	d12c      	bne.n	80030ea <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	015a      	lsls	r2, r3, #5
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800309c:	461a      	mov	r2, r3
 800309e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	4613      	mov	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4413      	add	r3, r2
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	440b      	add	r3, r1
 80030b2:	335d      	adds	r3, #93	; 0x5d
 80030b4:	2207      	movs	r2, #7
 80030b6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	015a      	lsls	r2, r3, #5
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	4413      	add	r3, r2
 80030c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	0151      	lsls	r1, r2, #5
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	440a      	add	r2, r1
 80030ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	4611      	mov	r1, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	f004 ff3d 	bl	8007f62 <USB_HC_Halt>
 80030e8:	e095      	b.n	8003216 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b20      	cmp	r3, #32
 80030fe:	d109      	bne.n	8003114 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4413      	add	r3, r2
 8003108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800310c:	461a      	mov	r2, r3
 800310e:	2320      	movs	r3, #32
 8003110:	6093      	str	r3, [r2, #8]
 8003112:	e080      	b.n	8003216 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	4413      	add	r3, r2
 800311c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 0308 	and.w	r3, r3, #8
 8003126:	2b08      	cmp	r3, #8
 8003128:	d134      	bne.n	8003194 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	440a      	add	r2, r1
 8003140:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003144:	f043 0302 	orr.w	r3, r3, #2
 8003148:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4613      	mov	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	335d      	adds	r3, #93	; 0x5d
 800315a:	2205      	movs	r2, #5
 800315c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800316a:	461a      	mov	r2, r3
 800316c:	2310      	movs	r3, #16
 800316e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4413      	add	r3, r2
 8003178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317c:	461a      	mov	r2, r3
 800317e:	2308      	movs	r3, #8
 8003180:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fee8 	bl	8007f62 <USB_HC_Halt>
 8003192:	e040      	b.n	8003216 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	015a      	lsls	r2, r3, #5
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	4413      	add	r3, r2
 800319c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d134      	bne.n	8003216 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031c6:	f043 0302 	orr.w	r3, r3, #2
 80031ca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	4611      	mov	r1, r2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f004 fec3 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	2310      	movs	r3, #16
 80031ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	4613      	mov	r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	440b      	add	r3, r1
 80031fc:	335d      	adds	r3, #93	; 0x5d
 80031fe:	2208      	movs	r2, #8
 8003200:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	015a      	lsls	r2, r3, #5
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4413      	add	r3, r2
 800320a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800320e:	461a      	mov	r2, r3
 8003210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003214:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	015a      	lsls	r2, r3, #5
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4413      	add	r3, r2
 800321e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800322c:	d122      	bne.n	8003274 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	015a      	lsls	r2, r3, #5
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4413      	add	r3, r2
 8003236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	0151      	lsls	r1, r2, #5
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	440a      	add	r2, r1
 8003244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003248:	f043 0302 	orr.w	r3, r3, #2
 800324c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	b2d2      	uxtb	r2, r2
 8003256:	4611      	mov	r1, r2
 8003258:	4618      	mov	r0, r3
 800325a:	f004 fe82 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	015a      	lsls	r2, r3, #5
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	4413      	add	r3, r2
 8003266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800326a:	461a      	mov	r2, r3
 800326c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003270:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003272:	e300      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	4413      	add	r3, r2
 800327c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b01      	cmp	r3, #1
 8003288:	f040 80fd 	bne.w	8003486 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	3348      	adds	r3, #72	; 0x48
 80032a4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	0159      	lsls	r1, r3, #5
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	440b      	add	r3, r1
 80032ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80032b8:	1ad1      	subs	r1, r2, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4403      	add	r3, r0
 80032c8:	334c      	adds	r3, #76	; 0x4c
 80032ca:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	00db      	lsls	r3, r3, #3
 80032d8:	440b      	add	r3, r1
 80032da:	335d      	adds	r3, #93	; 0x5d
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	3358      	adds	r3, #88	; 0x58
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003300:	461a      	mov	r2, r3
 8003302:	2301      	movs	r3, #1
 8003304:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	333f      	adds	r3, #63	; 0x3f
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	440b      	add	r3, r1
 800332a:	333f      	adds	r3, #63	; 0x3f
 800332c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800332e:	2b02      	cmp	r3, #2
 8003330:	d121      	bne.n	8003376 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	0151      	lsls	r1, r2, #5
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	440a      	add	r2, r1
 8003348:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800334c:	f043 0302 	orr.w	r3, r3, #2
 8003350:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f004 fe00 	bl	8007f62 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4413      	add	r3, r2
 800336a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800336e:	461a      	mov	r2, r3
 8003370:	2310      	movs	r3, #16
 8003372:	6093      	str	r3, [r2, #8]
 8003374:	e070      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	333f      	adds	r3, #63	; 0x3f
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d12a      	bne.n	80033e2 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033aa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	440b      	add	r3, r1
 80033ba:	335c      	adds	r3, #92	; 0x5c
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	b2d8      	uxtb	r0, r3
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	4613      	mov	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4413      	add	r3, r2
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	440b      	add	r3, r1
 80033d2:	335c      	adds	r3, #92	; 0x5c
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	4601      	mov	r1, r0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f00a fbfc 	bl	800dbd8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033e0:	e03a      	b.n	8003458 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	68fa      	ldr	r2, [r7, #12]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	333f      	adds	r3, #63	; 0x3f
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d12f      	bne.n	8003458 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	335c      	adds	r3, #92	; 0x5c
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	3350      	adds	r3, #80	; 0x50
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f083 0301 	eor.w	r3, r3, #1
 8003422:	b2d8      	uxtb	r0, r3
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	440b      	add	r3, r1
 8003432:	3350      	adds	r3, #80	; 0x50
 8003434:	4602      	mov	r2, r0
 8003436:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	b2d8      	uxtb	r0, r3
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	335c      	adds	r3, #92	; 0x5c
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	4601      	mov	r1, r0
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f00a fbc0 	bl	800dbd8 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	440b      	add	r3, r1
 8003466:	3350      	adds	r3, #80	; 0x50
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	f083 0301 	eor.w	r3, r3, #1
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	3350      	adds	r3, #80	; 0x50
 8003480:	4602      	mov	r2, r0
 8003482:	701a      	strb	r2, [r3, #0]
}
 8003484:	e1f7      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	f040 811a 	bne.w	80036d2 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	0151      	lsls	r1, r2, #5
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	440a      	add	r2, r1
 80034b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b8:	f023 0302 	bic.w	r3, r3, #2
 80034bc:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	440b      	add	r3, r1
 80034cc:	335d      	adds	r3, #93	; 0x5d
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d10a      	bne.n	80034ea <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4613      	mov	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4413      	add	r3, r2
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	440b      	add	r3, r1
 80034e2:	335c      	adds	r3, #92	; 0x5c
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e0d9      	b.n	800369e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	335d      	adds	r3, #93	; 0x5d
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d10a      	bne.n	8003516 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	440b      	add	r3, r1
 800350e:	335c      	adds	r3, #92	; 0x5c
 8003510:	2205      	movs	r2, #5
 8003512:	701a      	strb	r2, [r3, #0]
 8003514:	e0c3      	b.n	800369e <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	440b      	add	r3, r1
 8003524:	335d      	adds	r3, #93	; 0x5d
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b06      	cmp	r3, #6
 800352a:	d00a      	beq.n	8003542 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4613      	mov	r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	440b      	add	r3, r1
 800353a:	335d      	adds	r3, #93	; 0x5d
 800353c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800353e:	2b08      	cmp	r3, #8
 8003540:	d156      	bne.n	80035f0 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	4613      	mov	r3, r2
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	440b      	add	r3, r1
 8003550:	3358      	adds	r3, #88	; 0x58
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4403      	add	r3, r0
 8003564:	3358      	adds	r3, #88	; 0x58
 8003566:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	4613      	mov	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4413      	add	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	440b      	add	r3, r1
 8003576:	3358      	adds	r3, #88	; 0x58
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d914      	bls.n	80035a8 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	68fa      	ldr	r2, [r7, #12]
 8003582:	4613      	mov	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	4413      	add	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	440b      	add	r3, r1
 800358c:	3358      	adds	r3, #88	; 0x58
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	440b      	add	r3, r1
 80035a0:	335c      	adds	r3, #92	; 0x5c
 80035a2:	2204      	movs	r2, #4
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e009      	b.n	80035bc <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	440b      	add	r3, r1
 80035b6:	335c      	adds	r3, #92	; 0x5c
 80035b8:	2202      	movs	r2, #2
 80035ba:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035d2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035da:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e056      	b.n	800369e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	440b      	add	r3, r1
 80035fe:	335d      	adds	r3, #93	; 0x5d
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b03      	cmp	r3, #3
 8003604:	d123      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4613      	mov	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	440b      	add	r3, r1
 8003614:	335c      	adds	r3, #92	; 0x5c
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003630:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003638:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e027      	b.n	800369e <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4613      	mov	r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	440b      	add	r3, r1
 800365c:	335d      	adds	r3, #93	; 0x5d
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b07      	cmp	r3, #7
 8003662:	d11c      	bne.n	800369e <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	440b      	add	r3, r1
 8003672:	3358      	adds	r3, #88	; 0x58
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1c59      	adds	r1, r3, #1
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	00db      	lsls	r3, r3, #3
 8003684:	4403      	add	r3, r0
 8003686:	3358      	adds	r3, #88	; 0x58
 8003688:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	440b      	add	r3, r1
 8003698:	335c      	adds	r3, #92	; 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	015a      	lsls	r2, r3, #5
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4413      	add	r3, r2
 80036a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036aa:	461a      	mov	r2, r3
 80036ac:	2302      	movs	r3, #2
 80036ae:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	b2d8      	uxtb	r0, r3
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	440b      	add	r3, r1
 80036c2:	335c      	adds	r3, #92	; 0x5c
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	4601      	mov	r1, r0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f00a fa84 	bl	800dbd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036d0:	e0d1      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	015a      	lsls	r2, r3, #5
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	4413      	add	r3, r2
 80036da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d13e      	bne.n	8003766 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3358      	adds	r3, #88	; 0x58
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	1c59      	adds	r1, r3, #1
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4403      	add	r3, r0
 800372a:	3358      	adds	r3, #88	; 0x58
 800372c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	440b      	add	r3, r1
 800373c:	335d      	adds	r3, #93	; 0x5d
 800373e:	2206      	movs	r2, #6
 8003740:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	4611      	mov	r1, r2
 800374c:	4618      	mov	r0, r3
 800374e:	f004 fc08 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800375e:	461a      	mov	r2, r3
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	6093      	str	r3, [r2, #8]
}
 8003764:	e087      	b.n	8003876 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d17c      	bne.n	8003876 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	4613      	mov	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	440b      	add	r3, r1
 800378a:	333f      	adds	r3, #63	; 0x3f
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d122      	bne.n	80037d8 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	440b      	add	r3, r1
 80037a0:	3358      	adds	r3, #88	; 0x58
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	0151      	lsls	r1, r2, #5
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	440a      	add	r2, r1
 80037bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037c0:	f043 0302 	orr.w	r3, r3, #2
 80037c4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f004 fbc6 	bl	8007f62 <USB_HC_Halt>
 80037d6:	e045      	b.n	8003864 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	440b      	add	r3, r1
 80037e6:	333f      	adds	r3, #63	; 0x3f
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00a      	beq.n	8003804 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	440b      	add	r3, r1
 80037fc:	333f      	adds	r3, #63	; 0x3f
 80037fe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003800:	2b02      	cmp	r3, #2
 8003802:	d12f      	bne.n	8003864 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003804:	6879      	ldr	r1, [r7, #4]
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	440b      	add	r3, r1
 8003812:	3358      	adds	r3, #88	; 0x58
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d121      	bne.n	8003864 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	440b      	add	r3, r1
 800382e:	335d      	adds	r3, #93	; 0x5d
 8003830:	2203      	movs	r2, #3
 8003832:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	0151      	lsls	r1, r2, #5
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	440a      	add	r2, r1
 800384a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800384e:	f043 0302 	orr.w	r3, r3, #2
 8003852:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f004 fb7f 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	4413      	add	r3, r2
 800386c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003870:	461a      	mov	r2, r3
 8003872:	2310      	movs	r3, #16
 8003874:	6093      	str	r3, [r2, #8]
}
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	460b      	mov	r3, r1
 8003888:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d119      	bne.n	80038e2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	015a      	lsls	r2, r3, #5
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4413      	add	r3, r2
 80038b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ba:	461a      	mov	r2, r3
 80038bc:	2304      	movs	r3, #4
 80038be:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	0151      	lsls	r1, r2, #5
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	440a      	add	r2, r1
 80038d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038da:	f043 0302 	orr.w	r3, r3, #2
 80038de:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80038e0:	e33e      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	015a      	lsls	r2, r3, #5
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	4413      	add	r3, r2
 80038ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d141      	bne.n	800397c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	015a      	lsls	r2, r3, #5
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4413      	add	r3, r2
 8003900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003904:	461a      	mov	r2, r3
 8003906:	2320      	movs	r3, #32
 8003908:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4613      	mov	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	440b      	add	r3, r1
 8003918:	333d      	adds	r3, #61	; 0x3d
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 831f 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4613      	mov	r3, r2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	4413      	add	r3, r2
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	440b      	add	r3, r1
 8003930:	333d      	adds	r3, #61	; 0x3d
 8003932:	2200      	movs	r2, #0
 8003934:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	440b      	add	r3, r1
 8003944:	335c      	adds	r3, #92	; 0x5c
 8003946:	2202      	movs	r2, #2
 8003948:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4413      	add	r3, r2
 8003952:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	0151      	lsls	r1, r2, #5
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	440a      	add	r2, r1
 8003960:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f004 faf4 	bl	8007f62 <USB_HC_Halt>
}
 800397a:	e2f1      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	4413      	add	r3, r2
 8003984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b40      	cmp	r3, #64	; 0x40
 8003990:	d13f      	bne.n	8003a12 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4613      	mov	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4413      	add	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	440b      	add	r3, r1
 80039a0:	335d      	adds	r3, #93	; 0x5d
 80039a2:	2204      	movs	r2, #4
 80039a4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	333d      	adds	r3, #61	; 0x3d
 80039b6:	2201      	movs	r2, #1
 80039b8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3358      	adds	r3, #88	; 0x58
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	b2d2      	uxtb	r2, r2
 80039f6:	4611      	mov	r1, r2
 80039f8:	4618      	mov	r0, r3
 80039fa:	f004 fab2 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	2340      	movs	r3, #64	; 0x40
 8003a0e:	6093      	str	r3, [r2, #8]
}
 8003a10:	e2a6      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a28:	d122      	bne.n	8003a70 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	0151      	lsls	r1, r2, #5
 8003a3c:	693a      	ldr	r2, [r7, #16]
 8003a3e:	440a      	add	r2, r1
 8003a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a44:	f043 0302 	orr.w	r3, r3, #2
 8003a48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	4611      	mov	r1, r2
 8003a54:	4618      	mov	r0, r3
 8003a56:	f004 fa84 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a66:	461a      	mov	r2, r3
 8003a68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a6c:	6093      	str	r3, [r2, #8]
}
 8003a6e:	e277      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	015a      	lsls	r2, r3, #5
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	4413      	add	r3, r2
 8003a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d135      	bne.n	8003af2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4413      	add	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	440b      	add	r3, r1
 8003a94:	3358      	adds	r3, #88	; 0x58
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	0151      	lsls	r1, r2, #5
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	440a      	add	r2, r1
 8003ab0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	b2d2      	uxtb	r2, r2
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 fa4c 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	015a      	lsls	r2, r3, #5
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2301      	movs	r3, #1
 8003ada:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	440b      	add	r3, r1
 8003aea:	335d      	adds	r3, #93	; 0x5d
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
}
 8003af0:	e236      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	015a      	lsls	r2, r3, #5
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4413      	add	r3, r2
 8003afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0308 	and.w	r3, r3, #8
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	d12b      	bne.n	8003b60 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b14:	461a      	mov	r2, r3
 8003b16:	2308      	movs	r3, #8
 8003b18:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b34:	f043 0302 	orr.w	r3, r3, #2
 8003b38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	4611      	mov	r1, r2
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 fa0c 	bl	8007f62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	440b      	add	r3, r1
 8003b58:	335d      	adds	r3, #93	; 0x5d
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	701a      	strb	r2, [r3, #0]
}
 8003b5e:	e1ff      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	2b10      	cmp	r3, #16
 8003b74:	d155      	bne.n	8003c22 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	440b      	add	r3, r1
 8003b84:	3358      	adds	r3, #88	; 0x58
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	440b      	add	r3, r1
 8003b98:	335d      	adds	r3, #93	; 0x5d
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	440b      	add	r3, r1
 8003bac:	333d      	adds	r3, #61	; 0x3d
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d114      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	333c      	adds	r3, #60	; 0x3c
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d109      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	440b      	add	r3, r1
 8003bd8:	333d      	adds	r3, #61	; 0x3d
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	0151      	lsls	r1, r2, #5
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	440a      	add	r2, r1
 8003bf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bf8:	f043 0302 	orr.w	r3, r3, #2
 8003bfc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	4611      	mov	r1, r2
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f004 f9aa 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	2310      	movs	r3, #16
 8003c1e:	6093      	str	r3, [r2, #8]
}
 8003c20:	e19e      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	4413      	add	r3, r2
 8003c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d12b      	bne.n	8003c90 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c52:	f043 0302 	orr.w	r3, r3, #2
 8003c56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	b2d2      	uxtb	r2, r2
 8003c60:	4611      	mov	r1, r2
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 f97d 	bl	8007f62 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	4413      	add	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	440b      	add	r3, r1
 8003c76:	335d      	adds	r3, #93	; 0x5d
 8003c78:	2206      	movs	r2, #6
 8003c7a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	6093      	str	r3, [r2, #8]
}
 8003c8e:	e167      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca6:	d135      	bne.n	8003d14 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cc2:	f043 0302 	orr.w	r3, r3, #2
 8003cc6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 f945 	bl	8007f62 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	335d      	adds	r3, #93	; 0x5d
 8003d0e:	2208      	movs	r2, #8
 8003d10:	701a      	strb	r2, [r3, #0]
}
 8003d12:	e125      	b.n	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	015a      	lsls	r2, r3, #5
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	f040 811a 	bne.w	8003f60 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	015a      	lsls	r2, r3, #5
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	4413      	add	r3, r2
 8003d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	0151      	lsls	r1, r2, #5
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	440a      	add	r2, r1
 8003d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d46:	f023 0302 	bic.w	r3, r3, #2
 8003d4a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	335d      	adds	r3, #93	; 0x5d
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d137      	bne.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	440b      	add	r3, r1
 8003d70:	335c      	adds	r3, #92	; 0x5c
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	4413      	add	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	440b      	add	r3, r1
 8003d84:	333f      	adds	r3, #63	; 0x3f
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d00b      	beq.n	8003da4 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	440b      	add	r3, r1
 8003d9a:	333f      	adds	r3, #63	; 0x3f
 8003d9c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	f040 80c5 	bne.w	8003f2e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4613      	mov	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	440b      	add	r3, r1
 8003db2:	3351      	adds	r3, #81	; 0x51
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2d8      	uxtb	r0, r3
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	440b      	add	r3, r1
 8003dca:	3351      	adds	r3, #81	; 0x51
 8003dcc:	4602      	mov	r2, r0
 8003dce:	701a      	strb	r2, [r3, #0]
 8003dd0:	e0ad      	b.n	8003f2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	440b      	add	r3, r1
 8003de0:	335d      	adds	r3, #93	; 0x5d
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d10a      	bne.n	8003dfe <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003de8:	6879      	ldr	r1, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4613      	mov	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	4413      	add	r3, r2
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	440b      	add	r3, r1
 8003df6:	335c      	adds	r3, #92	; 0x5c
 8003df8:	2202      	movs	r2, #2
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	e097      	b.n	8003f2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003dfe:	6879      	ldr	r1, [r7, #4]
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	440b      	add	r3, r1
 8003e0c:	335d      	adds	r3, #93	; 0x5d
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d10a      	bne.n	8003e2a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	440b      	add	r3, r1
 8003e22:	335c      	adds	r3, #92	; 0x5c
 8003e24:	2202      	movs	r2, #2
 8003e26:	701a      	strb	r2, [r3, #0]
 8003e28:	e081      	b.n	8003f2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	440b      	add	r3, r1
 8003e38:	335d      	adds	r3, #93	; 0x5d
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	d10a      	bne.n	8003e56 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4613      	mov	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	440b      	add	r3, r1
 8003e4e:	335c      	adds	r3, #92	; 0x5c
 8003e50:	2205      	movs	r2, #5
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e06b      	b.n	8003f2e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	440b      	add	r3, r1
 8003e64:	335d      	adds	r3, #93	; 0x5d
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d00a      	beq.n	8003e82 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	440b      	add	r3, r1
 8003e7a:	335d      	adds	r3, #93	; 0x5d
 8003e7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003e7e:	2b08      	cmp	r3, #8
 8003e80:	d155      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	440b      	add	r3, r1
 8003e90:	3358      	adds	r3, #88	; 0x58
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	1c59      	adds	r1, r3, #1
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4413      	add	r3, r2
 8003ea0:	00db      	lsls	r3, r3, #3
 8003ea2:	4403      	add	r3, r0
 8003ea4:	3358      	adds	r3, #88	; 0x58
 8003ea6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	440b      	add	r3, r1
 8003eb6:	3358      	adds	r3, #88	; 0x58
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b03      	cmp	r3, #3
 8003ebc:	d914      	bls.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003ebe:	6879      	ldr	r1, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	440b      	add	r3, r1
 8003ecc:	3358      	adds	r3, #88	; 0x58
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	4413      	add	r3, r2
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	440b      	add	r3, r1
 8003ee0:	335c      	adds	r3, #92	; 0x5c
 8003ee2:	2204      	movs	r2, #4
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e009      	b.n	8003efc <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	440b      	add	r3, r1
 8003ef6:	335c      	adds	r3, #92	; 0x5c
 8003ef8:	2202      	movs	r2, #2
 8003efa:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f12:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f1a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f28:	461a      	mov	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	b2d8      	uxtb	r0, r3
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4413      	add	r3, r2
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	440b      	add	r3, r1
 8003f52:	335c      	adds	r3, #92	; 0x5c
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	4601      	mov	r1, r0
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f009 fe3c 	bl	800dbd8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003f60:	bf00      	nop
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 030f 	and.w	r3, r3, #15
 8003f88:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	0c5b      	lsrs	r3, r3, #17
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	091b      	lsrs	r3, r3, #4
 8003f98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f9c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d003      	beq.n	8003fac <HCD_RXQLVL_IRQHandler+0x44>
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	f000 8082 	beq.w	80040ae <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003faa:	e083      	b.n	80040b4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d07f      	beq.n	80040b2 <HCD_RXQLVL_IRQHandler+0x14a>
 8003fb2:	6879      	ldr	r1, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3344      	adds	r3, #68	; 0x44
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d074      	beq.n	80040b2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6818      	ldr	r0, [r3, #0]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	3344      	adds	r3, #68	; 0x44
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	b292      	uxth	r2, r2
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f003 fb5d 	bl	80076a2 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	440b      	add	r3, r1
 8003ff6:	3344      	adds	r3, #68	; 0x44
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	18d1      	adds	r1, r2, r3
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4403      	add	r3, r0
 800400c:	3344      	adds	r3, #68	; 0x44
 800400e:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	440b      	add	r3, r1
 800401e:	334c      	adds	r3, #76	; 0x4c
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	18d1      	adds	r1, r2, r3
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4403      	add	r3, r0
 8004034:	334c      	adds	r3, #76	; 0x4c
 8004036:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	4413      	add	r3, r2
 8004040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004044:	691a      	ldr	r2, [r3, #16]
 8004046:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HCD_RXQLVL_IRQHandler+0x154>)
 8004048:	4013      	ands	r3, r2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d031      	beq.n	80040b2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	4413      	add	r3, r2
 8004056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004064:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800406c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	4413      	add	r3, r2
 8004076:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	440b      	add	r3, r1
 800408e:	3350      	adds	r3, #80	; 0x50
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	f083 0301 	eor.w	r3, r3, #1
 8004096:	b2d8      	uxtb	r0, r3
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	440b      	add	r3, r1
 80040a6:	3350      	adds	r3, #80	; 0x50
 80040a8:	4602      	mov	r2, r0
 80040aa:	701a      	strb	r2, [r3, #0]
      break;
 80040ac:	e001      	b.n	80040b2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80040b2:	bf00      	nop
  }
}
 80040b4:	bf00      	nop
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	1ff80000 	.word	0x1ff80000

080040c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80040ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d10b      	bne.n	8004110 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d102      	bne.n	8004108 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f009 fd4c 	bl	800dba0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f043 0302 	orr.w	r3, r3, #2
 800410e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b08      	cmp	r3, #8
 8004118:	d132      	bne.n	8004180 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f043 0308 	orr.w	r3, r3, #8
 8004120:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0304 	and.w	r3, r3, #4
 8004128:	2b04      	cmp	r3, #4
 800412a:	d126      	bne.n	800417a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d113      	bne.n	800415c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800413a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800413e:	d106      	bne.n	800414e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2102      	movs	r1, #2
 8004146:	4618      	mov	r0, r3
 8004148:	f003 fbe6 	bl	8007918 <USB_InitFSLSPClkSel>
 800414c:	e011      	b.n	8004172 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	4618      	mov	r0, r3
 8004156:	f003 fbdf 	bl	8007918 <USB_InitFSLSPClkSel>
 800415a:	e00a      	b.n	8004172 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d106      	bne.n	8004172 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800416a:	461a      	mov	r2, r3
 800416c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004170:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f009 fd3e 	bl	800dbf4 <HAL_HCD_PortEnabled_Callback>
 8004178:	e002      	b.n	8004180 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f009 fd48 	bl	800dc10 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b20      	cmp	r3, #32
 8004188:	d103      	bne.n	8004192 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f043 0320 	orr.w	r3, r3, #32
 8004190:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004198:	461a      	mov	r2, r3
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	6013      	str	r3, [r2, #0]
}
 800419e:	bf00      	nop
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e11f      	b.n	80043fa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7fd f868 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2224      	movs	r2, #36	; 0x24
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800420a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800420c:	f002 f920 	bl	8006450 <HAL_RCC_GetPCLK1Freq>
 8004210:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	4a7b      	ldr	r2, [pc, #492]	; (8004404 <HAL_I2C_Init+0x25c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d807      	bhi.n	800422c <HAL_I2C_Init+0x84>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_I2C_Init+0x260>)
 8004220:	4293      	cmp	r3, r2
 8004222:	bf94      	ite	ls
 8004224:	2301      	movls	r3, #1
 8004226:	2300      	movhi	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	e006      	b.n	800423a <HAL_I2C_Init+0x92>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a77      	ldr	r2, [pc, #476]	; (800440c <HAL_I2C_Init+0x264>)
 8004230:	4293      	cmp	r3, r2
 8004232:	bf94      	ite	ls
 8004234:	2301      	movls	r3, #1
 8004236:	2300      	movhi	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0db      	b.n	80043fa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4a72      	ldr	r2, [pc, #456]	; (8004410 <HAL_I2C_Init+0x268>)
 8004246:	fba2 2303 	umull	r2, r3, r2, r3
 800424a:	0c9b      	lsrs	r3, r3, #18
 800424c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4a64      	ldr	r2, [pc, #400]	; (8004404 <HAL_I2C_Init+0x25c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d802      	bhi.n	800427c <HAL_I2C_Init+0xd4>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	3301      	adds	r3, #1
 800427a:	e009      	b.n	8004290 <HAL_I2C_Init+0xe8>
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004282:	fb02 f303 	mul.w	r3, r2, r3
 8004286:	4a63      	ldr	r2, [pc, #396]	; (8004414 <HAL_I2C_Init+0x26c>)
 8004288:	fba2 2303 	umull	r2, r3, r2, r3
 800428c:	099b      	lsrs	r3, r3, #6
 800428e:	3301      	adds	r3, #1
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	430b      	orrs	r3, r1
 8004296:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042a2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4956      	ldr	r1, [pc, #344]	; (8004404 <HAL_I2C_Init+0x25c>)
 80042ac:	428b      	cmp	r3, r1
 80042ae:	d80d      	bhi.n	80042cc <HAL_I2C_Init+0x124>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e59      	subs	r1, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	bf38      	it	cc
 80042c8:	2304      	movcc	r3, #4
 80042ca:	e04f      	b.n	800436c <HAL_I2C_Init+0x1c4>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d111      	bne.n	80042f8 <HAL_I2C_Init+0x150>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	1e58      	subs	r0, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	440b      	add	r3, r1
 80042e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042e6:	3301      	adds	r3, #1
 80042e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e012      	b.n	800431e <HAL_I2C_Init+0x176>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	440b      	add	r3, r1
 8004306:	0099      	lsls	r1, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <HAL_I2C_Init+0x17e>
 8004322:	2301      	movs	r3, #1
 8004324:	e022      	b.n	800436c <HAL_I2C_Init+0x1c4>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10e      	bne.n	800434c <HAL_I2C_Init+0x1a4>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	1e58      	subs	r0, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	460b      	mov	r3, r1
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	440b      	add	r3, r1
 800433c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004340:	3301      	adds	r3, #1
 8004342:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004346:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434a:	e00f      	b.n	800436c <HAL_I2C_Init+0x1c4>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	1e58      	subs	r0, r3, #1
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	0099      	lsls	r1, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004362:	3301      	adds	r3, #1
 8004364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	6809      	ldr	r1, [r1, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800439a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6911      	ldr	r1, [r2, #16]
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68d2      	ldr	r2, [r2, #12]
 80043a6:	4311      	orrs	r1, r2
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6812      	ldr	r2, [r2, #0]
 80043ac:	430b      	orrs	r3, r1
 80043ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	431a      	orrs	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2220      	movs	r2, #32
 80043e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	000186a0 	.word	0x000186a0
 8004408:	001e847f 	.word	0x001e847f
 800440c:	003d08ff 	.word	0x003d08ff
 8004410:	431bde83 	.word	0x431bde83
 8004414:	10624dd3 	.word	0x10624dd3

08004418 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b088      	sub	sp, #32
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	461a      	mov	r2, r3
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
 8004428:	4613      	mov	r3, r2
 800442a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7fd fb46 	bl	8001abc <HAL_GetTick>
 8004430:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 80e0 	bne.w	8004600 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	4970      	ldr	r1, [pc, #448]	; (800460c <HAL_I2C_Master_Transmit+0x1f4>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 fc56 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e0d3      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2C_Master_Transmit+0x50>
 8004464:	2302      	movs	r3, #2
 8004466:	e0cc      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ea>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d007      	beq.n	800448e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2221      	movs	r2, #33	; 0x21
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2210      	movs	r2, #16
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	893a      	ldrh	r2, [r7, #8]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29a      	uxth	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a50      	ldr	r2, [pc, #320]	; (8004610 <HAL_I2C_Master_Transmit+0x1f8>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80044d0:	8979      	ldrh	r1, [r7, #10]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 fac2 	bl	8004a60 <I2C_MasterRequestWrite>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e08d      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e6:	2300      	movs	r3, #0
 80044e8:	613b      	str	r3, [r7, #16]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	613b      	str	r3, [r7, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80044fc:	e066      	b.n	80045cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	6a39      	ldr	r1, [r7, #32]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fcd0 	bl	8004ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	2b04      	cmp	r3, #4
 8004514:	d107      	bne.n	8004526 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e06b      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b04      	cmp	r3, #4
 8004566:	d11b      	bne.n	80045a0 <HAL_I2C_Master_Transmit+0x188>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456c:	2b00      	cmp	r3, #0
 800456e:	d017      	beq.n	80045a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	781a      	ldrb	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	6a39      	ldr	r1, [r7, #32]
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 fcc0 	bl	8004f2a <I2C_WaitOnBTFFlagUntilTimeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00d      	beq.n	80045cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d107      	bne.n	80045c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e01a      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d194      	bne.n	80044fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	00100002 	.word	0x00100002
 8004610:	ffff0000 	.word	0xffff0000

08004614 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b08c      	sub	sp, #48	; 0x30
 8004618:	af02      	add	r7, sp, #8
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	607a      	str	r2, [r7, #4]
 800461e:	461a      	mov	r2, r3
 8004620:	460b      	mov	r3, r1
 8004622:	817b      	strh	r3, [r7, #10]
 8004624:	4613      	mov	r3, r2
 8004626:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004628:	f7fd fa48 	bl	8001abc <HAL_GetTick>
 800462c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	f040 820b 	bne.w	8004a52 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	2319      	movs	r3, #25
 8004642:	2201      	movs	r2, #1
 8004644:	497c      	ldr	r1, [pc, #496]	; (8004838 <HAL_I2C_Master_Receive+0x224>)
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fb58 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
 8004654:	e1fe      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800465c:	2b01      	cmp	r3, #1
 800465e:	d101      	bne.n	8004664 <HAL_I2C_Master_Receive+0x50>
 8004660:	2302      	movs	r3, #2
 8004662:	e1f7      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d007      	beq.n	800468a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f042 0201 	orr.w	r2, r2, #1
 8004688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004698:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2222      	movs	r2, #34	; 0x22
 800469e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2210      	movs	r2, #16
 80046a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	893a      	ldrh	r2, [r7, #8]
 80046ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	4a5c      	ldr	r2, [pc, #368]	; (800483c <HAL_I2C_Master_Receive+0x228>)
 80046ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80046cc:	8979      	ldrh	r1, [r7, #10]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fa46 	bl	8004b64 <I2C_MasterRequestRead>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e1b8      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d113      	bne.n	8004712 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ea:	2300      	movs	r3, #0
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	623b      	str	r3, [r7, #32]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	623b      	str	r3, [r7, #32]
 80046fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e18c      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004716:	2b01      	cmp	r3, #1
 8004718:	d11b      	bne.n	8004752 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004728:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	699b      	ldr	r3, [r3, #24]
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	e16c      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	2b02      	cmp	r3, #2
 8004758:	d11b      	bne.n	8004792 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004768:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477a:	2300      	movs	r3, #0
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	61bb      	str	r3, [r7, #24]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	61bb      	str	r3, [r7, #24]
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	e14c      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	617b      	str	r3, [r7, #20]
 80047b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80047b8:	e138      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047be:	2b03      	cmp	r3, #3
 80047c0:	f200 80f1 	bhi.w	80049a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d123      	bne.n	8004814 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 fbeb 	bl	8004fac <I2C_WaitOnRXNEFlagUntilTimeout>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e139      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	691a      	ldr	r2, [r3, #16]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004812:	e10b      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004818:	2b02      	cmp	r3, #2
 800481a:	d14e      	bne.n	80048ba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	2200      	movs	r2, #0
 8004824:	4906      	ldr	r1, [pc, #24]	; (8004840 <HAL_I2C_Master_Receive+0x22c>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fa68 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e10e      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
 8004836:	bf00      	nop
 8004838:	00100002 	.word	0x00100002
 800483c:	ffff0000 	.word	0xffff0000
 8004840:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691a      	ldr	r2, [r3, #16]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	3b01      	subs	r3, #1
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800487c:	b29b      	uxth	r3, r3
 800487e:	3b01      	subs	r3, #1
 8004880:	b29a      	uxth	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048b8:	e0b8      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	2200      	movs	r2, #0
 80048c2:	4966      	ldr	r1, [pc, #408]	; (8004a5c <HAL_I2C_Master_Receive+0x448>)
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 fa19 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e0bf      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	b2d2      	uxtb	r2, r2
 80048f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004900:	3b01      	subs	r3, #1
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490c:	b29b      	uxth	r3, r3
 800490e:	3b01      	subs	r3, #1
 8004910:	b29a      	uxth	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2200      	movs	r2, #0
 800491e:	494f      	ldr	r1, [pc, #316]	; (8004a5c <HAL_I2C_Master_Receive+0x448>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f9eb 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e091      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800493e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495c:	3b01      	subs	r3, #1
 800495e:	b29a      	uxth	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	691a      	ldr	r2, [r3, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	b2d2      	uxtb	r2, r2
 800497e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499a:	b29b      	uxth	r3, r3
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049a4:	e042      	b.n	8004a2c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 fafe 	bl	8004fac <I2C_WaitOnRXNEFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e04c      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	1c5a      	adds	r2, r3, #1
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049d6:	3b01      	subs	r3, #1
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d118      	bne.n	8004a2c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	691a      	ldr	r2, [r3, #16]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	b2d2      	uxtb	r2, r2
 8004a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a16:	3b01      	subs	r3, #1
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f47f aec2 	bne.w	80047ba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3728      	adds	r7, #40	; 0x28
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	00010004 	.word	0x00010004

08004a60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b088      	sub	sp, #32
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d006      	beq.n	8004a8a <I2C_MasterRequestWrite+0x2a>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d003      	beq.n	8004a8a <I2C_MasterRequestWrite+0x2a>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a88:	d108      	bne.n	8004a9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a98:	601a      	str	r2, [r3, #0]
 8004a9a:	e00b      	b.n	8004ab4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	2b12      	cmp	r3, #18
 8004aa2:	d107      	bne.n	8004ab4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ab2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	9300      	str	r3, [sp, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ac0:	68f8      	ldr	r0, [r7, #12]
 8004ac2:	f000 f91b 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00c      	beq.n	8004ae6 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e035      	b.n	8004b52 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	691b      	ldr	r3, [r3, #16]
 8004aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aee:	d108      	bne.n	8004b02 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004af0:	897b      	ldrh	r3, [r7, #10]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	461a      	mov	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004afe:	611a      	str	r2, [r3, #16]
 8004b00:	e01b      	b.n	8004b3a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b02:	897b      	ldrh	r3, [r7, #10]
 8004b04:	11db      	asrs	r3, r3, #7
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0306 	and.w	r3, r3, #6
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f063 030f 	orn	r3, r3, #15
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	490f      	ldr	r1, [pc, #60]	; (8004b5c <I2C_MasterRequestWrite+0xfc>)
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f942 	bl	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e010      	b.n	8004b52 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b30:	897b      	ldrh	r3, [r7, #10]
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4908      	ldr	r1, [pc, #32]	; (8004b60 <I2C_MasterRequestWrite+0x100>)
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f932 	bl	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3718      	adds	r7, #24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	00010008 	.word	0x00010008
 8004b60:	00010002 	.word	0x00010002

08004b64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b088      	sub	sp, #32
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	607a      	str	r2, [r7, #4]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	460b      	mov	r3, r1
 8004b72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004b88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d006      	beq.n	8004b9e <I2C_MasterRequestRead+0x3a>
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d003      	beq.n	8004b9e <I2C_MasterRequestRead+0x3a>
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b9c:	d108      	bne.n	8004bb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	e00b      	b.n	8004bc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb4:	2b11      	cmp	r3, #17
 8004bb6:	d107      	bne.n	8004bc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004bd4:	68f8      	ldr	r0, [r7, #12]
 8004bd6:	f000 f891 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00c      	beq.n	8004bfa <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bf4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e078      	b.n	8004cec <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c02:	d108      	bne.n	8004c16 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c04:	897b      	ldrh	r3, [r7, #10]
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	611a      	str	r2, [r3, #16]
 8004c14:	e05e      	b.n	8004cd4 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c16:	897b      	ldrh	r3, [r7, #10]
 8004c18:	11db      	asrs	r3, r3, #7
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	f003 0306 	and.w	r3, r3, #6
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	f063 030f 	orn	r3, r3, #15
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4930      	ldr	r1, [pc, #192]	; (8004cf4 <I2C_MasterRequestRead+0x190>)
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f8b8 	bl	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e053      	b.n	8004cec <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	687a      	ldr	r2, [r7, #4]
 8004c52:	4929      	ldr	r1, [pc, #164]	; (8004cf8 <I2C_MasterRequestRead+0x194>)
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f000 f8a8 	bl	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e043      	b.n	8004cec <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	613b      	str	r3, [r7, #16]
 8004c78:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c88:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f830 	bl	8004cfc <I2C_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e017      	b.n	8004cec <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004cbc:	897b      	ldrh	r3, [r7, #10]
 8004cbe:	11db      	asrs	r3, r3, #7
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	f003 0306 	and.w	r3, r3, #6
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f063 030e 	orn	r3, r3, #14
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	4907      	ldr	r1, [pc, #28]	; (8004cf8 <I2C_MasterRequestRead+0x194>)
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f865 	bl	8004daa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e000      	b.n	8004cec <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	00010008 	.word	0x00010008
 8004cf8:	00010002 	.word	0x00010002

08004cfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d0c:	e025      	b.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d021      	beq.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d16:	f7fc fed1 	bl	8001abc <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d302      	bcc.n	8004d2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d116      	bne.n	8004d5a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2220      	movs	r2, #32
 8004d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f043 0220 	orr.w	r2, r3, #32
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e023      	b.n	8004da2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d10d      	bne.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	43da      	mvns	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	bf0c      	ite	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	2300      	movne	r3, #0
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	e00c      	b.n	8004d9a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	43da      	mvns	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bf0c      	ite	eq
 8004d92:	2301      	moveq	r3, #1
 8004d94:	2300      	movne	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	461a      	mov	r2, r3
 8004d9a:	79fb      	ldrb	r3, [r7, #7]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d0b6      	beq.n	8004d0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
 8004db6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004db8:	e051      	b.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc8:	d123      	bne.n	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004de2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	f043 0204 	orr.w	r2, r3, #4
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e046      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d021      	beq.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e1a:	f7fc fe4f 	bl	8001abc <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d302      	bcc.n	8004e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d116      	bne.n	8004e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e020      	b.n	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10c      	bne.n	8004e82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	43da      	mvns	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	4013      	ands	r3, r2
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e00b      	b.n	8004e9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	43da      	mvns	r2, r3
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d18d      	bne.n	8004dba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eb4:	e02d      	b.n	8004f12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f8ce 	bl	8005058 <I2C_IsAcknowledgeFailed>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d001      	beq.n	8004ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e02d      	b.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ecc:	d021      	beq.n	8004f12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ece:	f7fc fdf5 	bl	8001abc <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d302      	bcc.n	8004ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d116      	bne.n	8004f12 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e007      	b.n	8004f22 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1c:	2b80      	cmp	r3, #128	; 0x80
 8004f1e:	d1ca      	bne.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f36:	e02d      	b.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f88d 	bl	8005058 <I2C_IsAcknowledgeFailed>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d001      	beq.n	8004f48 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e02d      	b.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f4e:	d021      	beq.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f50:	f7fc fdb4 	bl	8001abc <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d302      	bcc.n	8004f66 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e007      	b.n	8004fa4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d1ca      	bne.n	8004f38 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fb8:	e042      	b.n	8005040 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b10      	cmp	r3, #16
 8004fc6:	d119      	bne.n	8004ffc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f06f 0210 	mvn.w	r2, #16
 8004fd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e029      	b.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ffc:	f7fc fd5e 	bl	8001abc <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	429a      	cmp	r2, r3
 800500a:	d302      	bcc.n	8005012 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d116      	bne.n	8005040 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e007      	b.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504a:	2b40      	cmp	r3, #64	; 0x40
 800504c:	d1b5      	bne.n	8004fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	d11b      	bne.n	80050a8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005078:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	f043 0204 	orr.w	r2, r3, #4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
	...

080050b8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e128      	b.n	800531c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d109      	bne.n	80050ea <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a90      	ldr	r2, [pc, #576]	; (8005324 <HAL_I2S_Init+0x26c>)
 80050e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fc f96b 	bl	80013c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69db      	ldr	r3, [r3, #28]
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	6812      	ldr	r2, [r2, #0]
 80050fc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005100:	f023 030f 	bic.w	r3, r3, #15
 8005104:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	2b02      	cmp	r3, #2
 8005114:	d060      	beq.n	80051d8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800511e:	2310      	movs	r3, #16
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e001      	b.n	8005128 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005124:	2320      	movs	r3, #32
 8005126:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	2b20      	cmp	r3, #32
 800512e:	d802      	bhi.n	8005136 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005136:	2001      	movs	r0, #1
 8005138:	f001 fad0 	bl	80066dc <HAL_RCCEx_GetPeriphCLKFreq>
 800513c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005146:	d125      	bne.n	8005194 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d010      	beq.n	8005172 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	fbb2 f2f3 	udiv	r2, r2, r3
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	461a      	mov	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	fbb2 f3f3 	udiv	r3, r2, r3
 800516c:	3305      	adds	r3, #5
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	e01f      	b.n	80051b2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	fbb2 f2f3 	udiv	r2, r2, r3
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	461a      	mov	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	695b      	ldr	r3, [r3, #20]
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	3305      	adds	r3, #5
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e00e      	b.n	80051b2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	fbb2 f2f3 	udiv	r2, r2, r3
 800519c:	4613      	mov	r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	4413      	add	r3, r2
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	461a      	mov	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	3305      	adds	r3, #5
 80051b0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	4a5c      	ldr	r2, [pc, #368]	; (8005328 <HAL_I2S_Init+0x270>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	08db      	lsrs	r3, r3, #3
 80051bc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 0301 	and.w	r3, r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	021b      	lsls	r3, r3, #8
 80051d4:	61bb      	str	r3, [r7, #24]
 80051d6:	e003      	b.n	80051e0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80051d8:	2302      	movs	r3, #2
 80051da:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d902      	bls.n	80051ec <HAL_I2S_Init+0x134>
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	2bff      	cmp	r3, #255	; 0xff
 80051ea:	d907      	bls.n	80051fc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f0:	f043 0210 	orr.w	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e08f      	b.n	800531c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	ea42 0103 	orr.w	r1, r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	430a      	orrs	r2, r1
 800520e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800521a:	f023 030f 	bic.w	r3, r3, #15
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	6851      	ldr	r1, [r2, #4]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6892      	ldr	r2, [r2, #8]
 8005226:	4311      	orrs	r1, r2
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	68d2      	ldr	r2, [r2, #12]
 800522c:	4311      	orrs	r1, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6992      	ldr	r2, [r2, #24]
 8005232:	430a      	orrs	r2, r1
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800523e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a1b      	ldr	r3, [r3, #32]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d161      	bne.n	800530c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a38      	ldr	r2, [pc, #224]	; (800532c <HAL_I2S_Init+0x274>)
 800524c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a37      	ldr	r2, [pc, #220]	; (8005330 <HAL_I2S_Init+0x278>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d101      	bne.n	800525c <HAL_I2S_Init+0x1a4>
 8005258:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_I2S_Init+0x27c>)
 800525a:	e001      	b.n	8005260 <HAL_I2S_Init+0x1a8>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6812      	ldr	r2, [r2, #0]
 8005266:	4932      	ldr	r1, [pc, #200]	; (8005330 <HAL_I2S_Init+0x278>)
 8005268:	428a      	cmp	r2, r1
 800526a:	d101      	bne.n	8005270 <HAL_I2S_Init+0x1b8>
 800526c:	4a31      	ldr	r2, [pc, #196]	; (8005334 <HAL_I2S_Init+0x27c>)
 800526e:	e001      	b.n	8005274 <HAL_I2S_Init+0x1bc>
 8005270:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005274:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005278:	f023 030f 	bic.w	r3, r3, #15
 800527c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a2b      	ldr	r2, [pc, #172]	; (8005330 <HAL_I2S_Init+0x278>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d101      	bne.n	800528c <HAL_I2S_Init+0x1d4>
 8005288:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <HAL_I2S_Init+0x27c>)
 800528a:	e001      	b.n	8005290 <HAL_I2S_Init+0x1d8>
 800528c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005290:	2202      	movs	r2, #2
 8005292:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a25      	ldr	r2, [pc, #148]	; (8005330 <HAL_I2S_Init+0x278>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d101      	bne.n	80052a2 <HAL_I2S_Init+0x1ea>
 800529e:	4b25      	ldr	r3, [pc, #148]	; (8005334 <HAL_I2S_Init+0x27c>)
 80052a0:	e001      	b.n	80052a6 <HAL_I2S_Init+0x1ee>
 80052a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b2:	d003      	beq.n	80052bc <HAL_I2S_Init+0x204>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80052bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c0:	613b      	str	r3, [r7, #16]
 80052c2:	e001      	b.n	80052c8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	b299      	uxth	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80052de:	4303      	orrs	r3, r0
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	430b      	orrs	r3, r1
 80052e4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b29a      	uxth	r2, r3
 80052ea:	897b      	ldrh	r3, [r7, #10]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052f4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a0d      	ldr	r2, [pc, #52]	; (8005330 <HAL_I2S_Init+0x278>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d101      	bne.n	8005304 <HAL_I2S_Init+0x24c>
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_I2S_Init+0x27c>)
 8005302:	e001      	b.n	8005308 <HAL_I2S_Init+0x250>
 8005304:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005308:	897a      	ldrh	r2, [r7, #10]
 800530a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3720      	adds	r7, #32
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	08005615 	.word	0x08005615
 8005328:	cccccccd 	.word	0xcccccccd
 800532c:	08005729 	.word	0x08005729
 8005330:	40003800 	.word	0x40003800
 8005334:	40003400 	.word	0x40003400

08005338 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	4613      	mov	r3, r2
 8005344:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_I2S_Transmit_DMA+0x1a>
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e08e      	b.n	8005474 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_I2S_Transmit_DMA+0x2e>
 8005362:	2302      	movs	r3, #2
 8005364:	e086      	b.n	8005474 <HAL_I2S_Transmit_DMA+0x13c>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b01      	cmp	r3, #1
 8005378:	d005      	beq.n	8005386 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005382:	2302      	movs	r3, #2
 8005384:	e076      	b.n	8005474 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2203      	movs	r2, #3
 800538a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
 80053a0:	f003 0307 	and.w	r3, r3, #7
 80053a4:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d002      	beq.n	80053b2 <HAL_I2S_Transmit_DMA+0x7a>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d10a      	bne.n	80053c8 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	005b      	lsls	r3, r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80053bc:	88fb      	ldrh	r3, [r7, #6]
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80053c6:	e005      	b.n	80053d4 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	4a28      	ldr	r2, [pc, #160]	; (800547c <HAL_I2S_Transmit_DMA+0x144>)
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	4a27      	ldr	r2, [pc, #156]	; (8005480 <HAL_I2S_Transmit_DMA+0x148>)
 80053e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e8:	4a26      	ldr	r2, [pc, #152]	; (8005484 <HAL_I2S_Transmit_DMA+0x14c>)
 80053ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80053f4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80053fc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005402:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005404:	f7fc fd48 	bl	8001e98 <HAL_DMA_Start_IT>
 8005408:	4603      	mov	r3, r0
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00f      	beq.n	800542e <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e022      	b.n	8005474 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69da      	ldr	r2, [r3, #28]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800544a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f042 0202 	orr.w	r2, r2, #2
 8005468:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	080054f3 	.word	0x080054f3
 8005480:	080054b1 	.word	0x080054b1
 8005484:	0800550f 	.word	0x0800550f

08005488 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10e      	bne.n	80054e4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f022 0202 	bic.w	r2, r2, #2
 80054d4:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	2200      	movs	r2, #0
 80054da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7fb fb01 	bl	8000aec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054f2:	b580      	push	{r7, lr}
 80054f4:	b084      	sub	sp, #16
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f7fb fb05 	bl	8000b10 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005506:	bf00      	nop
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}

0800550e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800550e:	b580      	push	{r7, lr}
 8005510:	b084      	sub	sp, #16
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0203 	bic.w	r2, r2, #3
 800552a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005544:	f043 0208 	orr.w	r2, r3, #8
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ffa5 	bl	800549c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	881a      	ldrh	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	1c9a      	adds	r2, r3, #2
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d10e      	bne.n	80055ae <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	685a      	ldr	r2, [r3, #4]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800559e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fb fa9f 	bl	8000aec <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c8:	b292      	uxth	r2, r2
 80055ca:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10e      	bne.n	800560c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff ff3e 	bl	8005488 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800560c:	bf00      	nop
 800560e:	3708      	adds	r7, #8
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800562a:	b2db      	uxtb	r3, r3
 800562c:	2b04      	cmp	r3, #4
 800562e:	d13a      	bne.n	80056a6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d109      	bne.n	800564e <I2S_IRQHandler+0x3a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005644:	2b40      	cmp	r3, #64	; 0x40
 8005646:	d102      	bne.n	800564e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ffb4 	bl	80055b6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d126      	bne.n	80056a6 <I2S_IRQHandler+0x92>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f003 0320 	and.w	r3, r3, #32
 8005662:	2b20      	cmp	r3, #32
 8005664:	d11f      	bne.n	80056a6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005674:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	613b      	str	r3, [r7, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	613b      	str	r3, [r7, #16]
 800568a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005698:	f043 0202 	orr.w	r2, r3, #2
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff fefb 	bl	800549c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d136      	bne.n	8005720 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d109      	bne.n	80056d0 <I2S_IRQHandler+0xbc>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b80      	cmp	r3, #128	; 0x80
 80056c8:	d102      	bne.n	80056d0 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff ff45 	bl	800555a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b08      	cmp	r3, #8
 80056d8:	d122      	bne.n	8005720 <I2S_IRQHandler+0x10c>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b20      	cmp	r3, #32
 80056e6:	d11b      	bne.n	8005720 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056f6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005712:	f043 0204 	orr.w	r2, r3, #4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff febe 	bl	800549c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005720:	bf00      	nop
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b088      	sub	sp, #32
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4aa2      	ldr	r2, [pc, #648]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005742:	4ba2      	ldr	r3, [pc, #648]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005744:	e001      	b.n	800574a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005746:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a9b      	ldr	r2, [pc, #620]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005760:	4b9a      	ldr	r3, [pc, #616]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005762:	e001      	b.n	8005768 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005774:	d004      	beq.n	8005780 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	f040 8099 	bne.w	80058b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	f003 0302 	and.w	r3, r3, #2
 8005786:	2b02      	cmp	r3, #2
 8005788:	d107      	bne.n	800579a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f925 	bl	80059e4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f003 0301 	and.w	r3, r3, #1
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d107      	bne.n	80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f9c8 	bl	8005b44 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d13a      	bne.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f003 0320 	and.w	r3, r3, #32
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d035      	beq.n	8005834 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a7e      	ldr	r2, [pc, #504]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d101      	bne.n	80057d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80057d2:	4b7e      	ldr	r3, [pc, #504]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057d4:	e001      	b.n	80057da <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80057d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4979      	ldr	r1, [pc, #484]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80057e2:	428b      	cmp	r3, r1
 80057e4:	d101      	bne.n	80057ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80057e6:	4b79      	ldr	r3, [pc, #484]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80057e8:	e001      	b.n	80057ee <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80057ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80057f2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005802:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005804:	2300      	movs	r3, #0
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	60fb      	str	r3, [r7, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005826:	f043 0202 	orr.w	r2, r3, #2
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fe34 	bl	800549c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0308 	and.w	r3, r3, #8
 800583a:	2b08      	cmp	r3, #8
 800583c:	f040 80be 	bne.w	80059bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f003 0320 	and.w	r3, r3, #32
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 80b8 	beq.w	80059bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800585a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a59      	ldr	r2, [pc, #356]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005866:	4b59      	ldr	r3, [pc, #356]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005868:	e001      	b.n	800586e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800586a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4954      	ldr	r1, [pc, #336]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005876:	428b      	cmp	r3, r1
 8005878:	d101      	bne.n	800587e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800587a:	4b54      	ldr	r3, [pc, #336]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800587c:	e001      	b.n	8005882 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800587e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005882:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005886:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005888:	2300      	movs	r3, #0
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a2:	f043 0204 	orr.w	r2, r3, #4
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7ff fdf6 	bl	800549c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058b0:	e084      	b.n	80059bc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f003 0302 	and.w	r3, r3, #2
 80058b8:	2b02      	cmp	r3, #2
 80058ba:	d107      	bne.n	80058cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f8be 	bl	8005a48 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d107      	bne.n	80058e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f8fd 	bl	8005ae0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ec:	2b40      	cmp	r3, #64	; 0x40
 80058ee:	d12f      	bne.n	8005950 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	f003 0320 	and.w	r3, r3, #32
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d02a      	beq.n	8005950 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005908:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2e      	ldr	r2, [pc, #184]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005914:	4b2d      	ldr	r3, [pc, #180]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005916:	e001      	b.n	800591c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800591c:	685a      	ldr	r2, [r3, #4]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4929      	ldr	r1, [pc, #164]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005924:	428b      	cmp	r3, r1
 8005926:	d101      	bne.n	800592c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005928:	4b28      	ldr	r3, [pc, #160]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800592a:	e001      	b.n	8005930 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800592c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005930:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005934:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	f043 0202 	orr.w	r2, r3, #2
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7ff fda6 	bl	800549c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	f003 0308 	and.w	r3, r3, #8
 8005956:	2b08      	cmp	r3, #8
 8005958:	d131      	bne.n	80059be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f003 0320 	and.w	r3, r3, #32
 8005960:	2b00      	cmp	r3, #0
 8005962:	d02c      	beq.n	80059be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a17      	ldr	r2, [pc, #92]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d101      	bne.n	8005972 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800596e:	4b17      	ldr	r3, [pc, #92]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005970:	e001      	b.n	8005976 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005972:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4912      	ldr	r1, [pc, #72]	; (80059c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800597e:	428b      	cmp	r3, r1
 8005980:	d101      	bne.n	8005986 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005982:	4b12      	ldr	r3, [pc, #72]	; (80059cc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005984:	e001      	b.n	800598a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005986:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800598a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800598e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800599e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ac:	f043 0204 	orr.w	r2, r3, #4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fd71 	bl	800549c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059ba:	e000      	b.n	80059be <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80059bc:	bf00      	nop
}
 80059be:	bf00      	nop
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40003800 	.word	0x40003800
 80059cc:	40003400 	.word	0x40003400

080059d0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c99      	adds	r1, r3, #2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6251      	str	r1, [r2, #36]	; 0x24
 80059f6:	881a      	ldrh	r2, [r3, #0]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d113      	bne.n	8005a3e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a24:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7ff ffc9 	bl	80059d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b082      	sub	sp, #8
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	1c99      	adds	r1, r3, #2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6251      	str	r1, [r2, #36]	; 0x24
 8005a5a:	8819      	ldrh	r1, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1d      	ldr	r2, [pc, #116]	; (8005ad8 <I2SEx_TxISR_I2SExt+0x90>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d101      	bne.n	8005a6a <I2SEx_TxISR_I2SExt+0x22>
 8005a66:	4b1d      	ldr	r3, [pc, #116]	; (8005adc <I2SEx_TxISR_I2SExt+0x94>)
 8005a68:	e001      	b.n	8005a6e <I2SEx_TxISR_I2SExt+0x26>
 8005a6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a6e:	460a      	mov	r2, r1
 8005a70:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d121      	bne.n	8005ace <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a12      	ldr	r2, [pc, #72]	; (8005ad8 <I2SEx_TxISR_I2SExt+0x90>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d101      	bne.n	8005a98 <I2SEx_TxISR_I2SExt+0x50>
 8005a94:	4b11      	ldr	r3, [pc, #68]	; (8005adc <I2SEx_TxISR_I2SExt+0x94>)
 8005a96:	e001      	b.n	8005a9c <I2SEx_TxISR_I2SExt+0x54>
 8005a98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	490d      	ldr	r1, [pc, #52]	; (8005ad8 <I2SEx_TxISR_I2SExt+0x90>)
 8005aa4:	428b      	cmp	r3, r1
 8005aa6:	d101      	bne.n	8005aac <I2SEx_TxISR_I2SExt+0x64>
 8005aa8:	4b0c      	ldr	r3, [pc, #48]	; (8005adc <I2SEx_TxISR_I2SExt+0x94>)
 8005aaa:	e001      	b.n	8005ab0 <I2SEx_TxISR_I2SExt+0x68>
 8005aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ab0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ab4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d106      	bne.n	8005ace <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff ff81 	bl	80059d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	40003800 	.word	0x40003800
 8005adc:	40003400 	.word	0x40003400

08005ae0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68d8      	ldr	r0, [r3, #12]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af2:	1c99      	adds	r1, r3, #2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005af8:	b282      	uxth	r2, r0
 8005afa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d113      	bne.n	8005b3c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b22:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ff4a 	bl	80059d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005b3c:	bf00      	nop
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a20      	ldr	r2, [pc, #128]	; (8005bd4 <I2SEx_RxISR_I2SExt+0x90>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d101      	bne.n	8005b5a <I2SEx_RxISR_I2SExt+0x16>
 8005b56:	4b20      	ldr	r3, [pc, #128]	; (8005bd8 <I2SEx_RxISR_I2SExt+0x94>)
 8005b58:	e001      	b.n	8005b5e <I2SEx_RxISR_I2SExt+0x1a>
 8005b5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b5e:	68d8      	ldr	r0, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	1c99      	adds	r1, r3, #2
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005b6a:	b282      	uxth	r2, r0
 8005b6c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d121      	bne.n	8005bca <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a12      	ldr	r2, [pc, #72]	; (8005bd4 <I2SEx_RxISR_I2SExt+0x90>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d101      	bne.n	8005b94 <I2SEx_RxISR_I2SExt+0x50>
 8005b90:	4b11      	ldr	r3, [pc, #68]	; (8005bd8 <I2SEx_RxISR_I2SExt+0x94>)
 8005b92:	e001      	b.n	8005b98 <I2SEx_RxISR_I2SExt+0x54>
 8005b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b98:	685a      	ldr	r2, [r3, #4]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	490d      	ldr	r1, [pc, #52]	; (8005bd4 <I2SEx_RxISR_I2SExt+0x90>)
 8005ba0:	428b      	cmp	r3, r1
 8005ba2:	d101      	bne.n	8005ba8 <I2SEx_RxISR_I2SExt+0x64>
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	; (8005bd8 <I2SEx_RxISR_I2SExt+0x94>)
 8005ba6:	e001      	b.n	8005bac <I2SEx_RxISR_I2SExt+0x68>
 8005ba8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bb0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d106      	bne.n	8005bca <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff03 	bl	80059d0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	40003800 	.word	0x40003800
 8005bd8:	40003400 	.word	0x40003400

08005bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e25b      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0301 	and.w	r3, r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d075      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005bfa:	4ba3      	ldr	r3, [pc, #652]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 030c 	and.w	r3, r3, #12
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d00c      	beq.n	8005c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c06:	4ba0      	ldr	r3, [pc, #640]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d112      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c12:	4b9d      	ldr	r3, [pc, #628]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c1e:	d10b      	bne.n	8005c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c20:	4b99      	ldr	r3, [pc, #612]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d05b      	beq.n	8005ce4 <HAL_RCC_OscConfig+0x108>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d157      	bne.n	8005ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e236      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c40:	d106      	bne.n	8005c50 <HAL_RCC_OscConfig+0x74>
 8005c42:	4b91      	ldr	r3, [pc, #580]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a90      	ldr	r2, [pc, #576]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	e01d      	b.n	8005c8c <HAL_RCC_OscConfig+0xb0>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c58:	d10c      	bne.n	8005c74 <HAL_RCC_OscConfig+0x98>
 8005c5a:	4b8b      	ldr	r3, [pc, #556]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a8a      	ldr	r2, [pc, #552]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	4b88      	ldr	r3, [pc, #544]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a87      	ldr	r2, [pc, #540]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c70:	6013      	str	r3, [r2, #0]
 8005c72:	e00b      	b.n	8005c8c <HAL_RCC_OscConfig+0xb0>
 8005c74:	4b84      	ldr	r3, [pc, #528]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a83      	ldr	r2, [pc, #524]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7e:	6013      	str	r3, [r2, #0]
 8005c80:	4b81      	ldr	r3, [pc, #516]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a80      	ldr	r2, [pc, #512]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d013      	beq.n	8005cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c94:	f7fb ff12 	bl	8001abc <HAL_GetTick>
 8005c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	e008      	b.n	8005cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c9c:	f7fb ff0e 	bl	8001abc <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	2b64      	cmp	r3, #100	; 0x64
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e1fb      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cae:	4b76      	ldr	r3, [pc, #472]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d0f0      	beq.n	8005c9c <HAL_RCC_OscConfig+0xc0>
 8005cba:	e014      	b.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cbc:	f7fb fefe 	bl	8001abc <HAL_GetTick>
 8005cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cc4:	f7fb fefa 	bl	8001abc <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b64      	cmp	r3, #100	; 0x64
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e1e7      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cd6:	4b6c      	ldr	r3, [pc, #432]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1f0      	bne.n	8005cc4 <HAL_RCC_OscConfig+0xe8>
 8005ce2:	e000      	b.n	8005ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 0302 	and.w	r3, r3, #2
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d063      	beq.n	8005dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005cf2:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f003 030c 	and.w	r3, r3, #12
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cfe:	4b62      	ldr	r3, [pc, #392]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d06:	2b08      	cmp	r3, #8
 8005d08:	d11c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d0a:	4b5f      	ldr	r3, [pc, #380]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d116      	bne.n	8005d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d16:	4b5c      	ldr	r3, [pc, #368]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d005      	beq.n	8005d2e <HAL_RCC_OscConfig+0x152>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d001      	beq.n	8005d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e1bb      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d2e:	4b56      	ldr	r3, [pc, #344]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4952      	ldr	r1, [pc, #328]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d42:	e03a      	b.n	8005dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d020      	beq.n	8005d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d4c:	4b4f      	ldr	r3, [pc, #316]	; (8005e8c <HAL_RCC_OscConfig+0x2b0>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d52:	f7fb feb3 	bl	8001abc <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d5a:	f7fb feaf 	bl	8001abc <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e19c      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d6c:	4b46      	ldr	r3, [pc, #280]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 0302 	and.w	r3, r3, #2
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d78:	4b43      	ldr	r3, [pc, #268]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	4940      	ldr	r1, [pc, #256]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	600b      	str	r3, [r1, #0]
 8005d8c:	e015      	b.n	8005dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d8e:	4b3f      	ldr	r3, [pc, #252]	; (8005e8c <HAL_RCC_OscConfig+0x2b0>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fb fe92 	bl	8001abc <HAL_GetTick>
 8005d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d9c:	f7fb fe8e 	bl	8001abc <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e17b      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dae:	4b36      	ldr	r3, [pc, #216]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d030      	beq.n	8005e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dce:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <HAL_RCC_OscConfig+0x2b4>)
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fb fe72 	bl	8001abc <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ddc:	f7fb fe6e 	bl	8001abc <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e15b      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dee:	4b26      	ldr	r3, [pc, #152]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d0f0      	beq.n	8005ddc <HAL_RCC_OscConfig+0x200>
 8005dfa:	e015      	b.n	8005e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005dfc:	4b24      	ldr	r3, [pc, #144]	; (8005e90 <HAL_RCC_OscConfig+0x2b4>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e02:	f7fb fe5b 	bl	8001abc <HAL_GetTick>
 8005e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e08:	e008      	b.n	8005e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e0a:	f7fb fe57 	bl	8001abc <HAL_GetTick>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	1ad3      	subs	r3, r2, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d901      	bls.n	8005e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	e144      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e1c:	4b1a      	ldr	r3, [pc, #104]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1f0      	bne.n	8005e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80a0 	beq.w	8005f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e36:	2300      	movs	r3, #0
 8005e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e3a:	4b13      	ldr	r3, [pc, #76]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10f      	bne.n	8005e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]
 8005e4a:	4b0f      	ldr	r3, [pc, #60]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	4a0e      	ldr	r2, [pc, #56]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e54:	6413      	str	r3, [r2, #64]	; 0x40
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <HAL_RCC_OscConfig+0x2ac>)
 8005e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e5e:	60bb      	str	r3, [r7, #8]
 8005e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e62:	2301      	movs	r3, #1
 8005e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCC_OscConfig+0x2b8>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d121      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e72:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <HAL_RCC_OscConfig+0x2b8>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <HAL_RCC_OscConfig+0x2b8>)
 8005e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e7e:	f7fb fe1d 	bl	8001abc <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e84:	e011      	b.n	8005eaa <HAL_RCC_OscConfig+0x2ce>
 8005e86:	bf00      	nop
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	42470000 	.word	0x42470000
 8005e90:	42470e80 	.word	0x42470e80
 8005e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e98:	f7fb fe10 	bl	8001abc <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e0fd      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eaa:	4b81      	ldr	r3, [pc, #516]	; (80060b0 <HAL_RCC_OscConfig+0x4d4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d106      	bne.n	8005ecc <HAL_RCC_OscConfig+0x2f0>
 8005ebe:	4b7d      	ldr	r3, [pc, #500]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ec2:	4a7c      	ldr	r2, [pc, #496]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ec4:	f043 0301 	orr.w	r3, r3, #1
 8005ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8005eca:	e01c      	b.n	8005f06 <HAL_RCC_OscConfig+0x32a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	2b05      	cmp	r3, #5
 8005ed2:	d10c      	bne.n	8005eee <HAL_RCC_OscConfig+0x312>
 8005ed4:	4b77      	ldr	r3, [pc, #476]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ed8:	4a76      	ldr	r2, [pc, #472]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005eda:	f043 0304 	orr.w	r3, r3, #4
 8005ede:	6713      	str	r3, [r2, #112]	; 0x70
 8005ee0:	4b74      	ldr	r3, [pc, #464]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	4a73      	ldr	r2, [pc, #460]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ee6:	f043 0301 	orr.w	r3, r3, #1
 8005eea:	6713      	str	r3, [r2, #112]	; 0x70
 8005eec:	e00b      	b.n	8005f06 <HAL_RCC_OscConfig+0x32a>
 8005eee:	4b71      	ldr	r3, [pc, #452]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef2:	4a70      	ldr	r2, [pc, #448]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005ef4:	f023 0301 	bic.w	r3, r3, #1
 8005ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8005efa:	4b6e      	ldr	r3, [pc, #440]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005efe:	4a6d      	ldr	r2, [pc, #436]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005f00:	f023 0304 	bic.w	r3, r3, #4
 8005f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d015      	beq.n	8005f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0e:	f7fb fdd5 	bl	8001abc <HAL_GetTick>
 8005f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f14:	e00a      	b.n	8005f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f16:	f7fb fdd1 	bl	8001abc <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d901      	bls.n	8005f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e0bc      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2c:	4b61      	ldr	r3, [pc, #388]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f30:	f003 0302 	and.w	r3, r3, #2
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d0ee      	beq.n	8005f16 <HAL_RCC_OscConfig+0x33a>
 8005f38:	e014      	b.n	8005f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3a:	f7fb fdbf 	bl	8001abc <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f40:	e00a      	b.n	8005f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f42:	f7fb fdbb 	bl	8001abc <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e0a6      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f58:	4b56      	ldr	r3, [pc, #344]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1ee      	bne.n	8005f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005f64:	7dfb      	ldrb	r3, [r7, #23]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d105      	bne.n	8005f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f6a:	4b52      	ldr	r3, [pc, #328]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4a51      	ldr	r2, [pc, #324]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	f000 8092 	beq.w	80060a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f80:	4b4c      	ldr	r3, [pc, #304]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f003 030c 	and.w	r3, r3, #12
 8005f88:	2b08      	cmp	r3, #8
 8005f8a:	d05c      	beq.n	8006046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d141      	bne.n	8006018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f94:	4b48      	ldr	r3, [pc, #288]	; (80060b8 <HAL_RCC_OscConfig+0x4dc>)
 8005f96:	2200      	movs	r2, #0
 8005f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f9a:	f7fb fd8f 	bl	8001abc <HAL_GetTick>
 8005f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fa2:	f7fb fd8b 	bl	8001abc <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e078      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fb4:	4b3f      	ldr	r3, [pc, #252]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1f0      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	019b      	lsls	r3, r3, #6
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	041b      	lsls	r3, r3, #16
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe2:	061b      	lsls	r3, r3, #24
 8005fe4:	4933      	ldr	r1, [pc, #204]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fea:	4b33      	ldr	r3, [pc, #204]	; (80060b8 <HAL_RCC_OscConfig+0x4dc>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff0:	f7fb fd64 	bl	8001abc <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ff6:	e008      	b.n	800600a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ff8:	f7fb fd60 	bl	8001abc <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d901      	bls.n	800600a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e04d      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800600a:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d0f0      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x41c>
 8006016:	e045      	b.n	80060a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006018:	4b27      	ldr	r3, [pc, #156]	; (80060b8 <HAL_RCC_OscConfig+0x4dc>)
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800601e:	f7fb fd4d 	bl	8001abc <HAL_GetTick>
 8006022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006024:	e008      	b.n	8006038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006026:	f7fb fd49 	bl	8001abc <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d901      	bls.n	8006038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006034:	2303      	movs	r3, #3
 8006036:	e036      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006038:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1f0      	bne.n	8006026 <HAL_RCC_OscConfig+0x44a>
 8006044:	e02e      	b.n	80060a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d101      	bne.n	8006052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e029      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006052:	4b18      	ldr	r3, [pc, #96]	; (80060b4 <HAL_RCC_OscConfig+0x4d8>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	429a      	cmp	r2, r3
 8006064:	d11c      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006070:	429a      	cmp	r2, r3
 8006072:	d115      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800607a:	4013      	ands	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006080:	4293      	cmp	r3, r2
 8006082:	d10d      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800608e:	429a      	cmp	r2, r3
 8006090:	d106      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40007000 	.word	0x40007000
 80060b4:	40023800 	.word	0x40023800
 80060b8:	42470060 	.word	0x42470060

080060bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e0cc      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060d0:	4b68      	ldr	r3, [pc, #416]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d90c      	bls.n	80060f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b65      	ldr	r3, [pc, #404]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060e6:	4b63      	ldr	r3, [pc, #396]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d001      	beq.n	80060f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e0b8      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0302 	and.w	r3, r3, #2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d005      	beq.n	800611c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006110:	4b59      	ldr	r3, [pc, #356]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4a58      	ldr	r2, [pc, #352]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800611a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0308 	and.w	r3, r3, #8
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006128:	4b53      	ldr	r3, [pc, #332]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	4a52      	ldr	r2, [pc, #328]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006134:	4b50      	ldr	r3, [pc, #320]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	494d      	ldr	r1, [pc, #308]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006142:	4313      	orrs	r3, r2
 8006144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	d044      	beq.n	80061dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d107      	bne.n	800616a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615a:	4b47      	ldr	r3, [pc, #284]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d119      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e07f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2b02      	cmp	r3, #2
 8006170:	d003      	beq.n	800617a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006176:	2b03      	cmp	r3, #3
 8006178:	d107      	bne.n	800618a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800617a:	4b3f      	ldr	r3, [pc, #252]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e06f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800618a:	4b3b      	ldr	r3, [pc, #236]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e067      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800619a:	4b37      	ldr	r3, [pc, #220]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f023 0203 	bic.w	r2, r3, #3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4934      	ldr	r1, [pc, #208]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 80061a8:	4313      	orrs	r3, r2
 80061aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061ac:	f7fb fc86 	bl	8001abc <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061b4:	f7fb fc82 	bl	8001abc <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e04f      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ca:	4b2b      	ldr	r3, [pc, #172]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	f003 020c 	and.w	r2, r3, #12
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	429a      	cmp	r2, r3
 80061da:	d1eb      	bne.n	80061b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061dc:	4b25      	ldr	r3, [pc, #148]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d20c      	bcs.n	8006204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061ea:	4b22      	ldr	r3, [pc, #136]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	683a      	ldr	r2, [r7, #0]
 80061ee:	b2d2      	uxtb	r2, r2
 80061f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061f2:	4b20      	ldr	r3, [pc, #128]	; (8006274 <HAL_RCC_ClockConfig+0x1b8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 030f 	and.w	r3, r3, #15
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d001      	beq.n	8006204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e032      	b.n	800626a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0304 	and.w	r3, r3, #4
 800620c:	2b00      	cmp	r3, #0
 800620e:	d008      	beq.n	8006222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006210:	4b19      	ldr	r3, [pc, #100]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4916      	ldr	r1, [pc, #88]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800621e:	4313      	orrs	r3, r2
 8006220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0308 	and.w	r3, r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800622e:	4b12      	ldr	r3, [pc, #72]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	490e      	ldr	r1, [pc, #56]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800623e:	4313      	orrs	r3, r2
 8006240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006242:	f000 f821 	bl	8006288 <HAL_RCC_GetSysClockFreq>
 8006246:	4601      	mov	r1, r0
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	f003 030f 	and.w	r3, r3, #15
 8006252:	4a0a      	ldr	r2, [pc, #40]	; (800627c <HAL_RCC_ClockConfig+0x1c0>)
 8006254:	5cd3      	ldrb	r3, [r2, r3]
 8006256:	fa21 f303 	lsr.w	r3, r1, r3
 800625a:	4a09      	ldr	r2, [pc, #36]	; (8006280 <HAL_RCC_ClockConfig+0x1c4>)
 800625c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800625e:	4b09      	ldr	r3, [pc, #36]	; (8006284 <HAL_RCC_ClockConfig+0x1c8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4618      	mov	r0, r3
 8006264:	f7fb fbe6 	bl	8001a34 <HAL_InitTick>

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	40023c00 	.word	0x40023c00
 8006278:	40023800 	.word	0x40023800
 800627c:	0800e358 	.word	0x0800e358
 8006280:	20000000 	.word	0x20000000
 8006284:	20000004 	.word	0x20000004

08006288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	607b      	str	r3, [r7, #4]
 8006292:	2300      	movs	r3, #0
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	2300      	movs	r3, #0
 8006298:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800629e:	4b63      	ldr	r3, [pc, #396]	; (800642c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	f003 030c 	and.w	r3, r3, #12
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d007      	beq.n	80062ba <HAL_RCC_GetSysClockFreq+0x32>
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d008      	beq.n	80062c0 <HAL_RCC_GetSysClockFreq+0x38>
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f040 80b4 	bne.w	800641c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b4:	4b5e      	ldr	r3, [pc, #376]	; (8006430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80062b6:	60bb      	str	r3, [r7, #8]
       break;
 80062b8:	e0b3      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ba:	4b5e      	ldr	r3, [pc, #376]	; (8006434 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80062bc:	60bb      	str	r3, [r7, #8]
      break;
 80062be:	e0b0      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c0:	4b5a      	ldr	r3, [pc, #360]	; (800642c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ca:	4b58      	ldr	r3, [pc, #352]	; (800642c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d04a      	beq.n	800636c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d6:	4b55      	ldr	r3, [pc, #340]	; (800642c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	099b      	lsrs	r3, r3, #6
 80062dc:	f04f 0400 	mov.w	r4, #0
 80062e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	ea03 0501 	and.w	r5, r3, r1
 80062ec:	ea04 0602 	and.w	r6, r4, r2
 80062f0:	4629      	mov	r1, r5
 80062f2:	4632      	mov	r2, r6
 80062f4:	f04f 0300 	mov.w	r3, #0
 80062f8:	f04f 0400 	mov.w	r4, #0
 80062fc:	0154      	lsls	r4, r2, #5
 80062fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006302:	014b      	lsls	r3, r1, #5
 8006304:	4619      	mov	r1, r3
 8006306:	4622      	mov	r2, r4
 8006308:	1b49      	subs	r1, r1, r5
 800630a:	eb62 0206 	sbc.w	r2, r2, r6
 800630e:	f04f 0300 	mov.w	r3, #0
 8006312:	f04f 0400 	mov.w	r4, #0
 8006316:	0194      	lsls	r4, r2, #6
 8006318:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800631c:	018b      	lsls	r3, r1, #6
 800631e:	1a5b      	subs	r3, r3, r1
 8006320:	eb64 0402 	sbc.w	r4, r4, r2
 8006324:	f04f 0100 	mov.w	r1, #0
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	00e2      	lsls	r2, r4, #3
 800632e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006332:	00d9      	lsls	r1, r3, #3
 8006334:	460b      	mov	r3, r1
 8006336:	4614      	mov	r4, r2
 8006338:	195b      	adds	r3, r3, r5
 800633a:	eb44 0406 	adc.w	r4, r4, r6
 800633e:	f04f 0100 	mov.w	r1, #0
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	0262      	lsls	r2, r4, #9
 8006348:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800634c:	0259      	lsls	r1, r3, #9
 800634e:	460b      	mov	r3, r1
 8006350:	4614      	mov	r4, r2
 8006352:	4618      	mov	r0, r3
 8006354:	4621      	mov	r1, r4
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f04f 0400 	mov.w	r4, #0
 800635c:	461a      	mov	r2, r3
 800635e:	4623      	mov	r3, r4
 8006360:	f7f9 ff3a 	bl	80001d8 <__aeabi_uldivmod>
 8006364:	4603      	mov	r3, r0
 8006366:	460c      	mov	r4, r1
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e049      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800636c:	4b2f      	ldr	r3, [pc, #188]	; (800642c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	099b      	lsrs	r3, r3, #6
 8006372:	f04f 0400 	mov.w	r4, #0
 8006376:	f240 11ff 	movw	r1, #511	; 0x1ff
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	ea03 0501 	and.w	r5, r3, r1
 8006382:	ea04 0602 	and.w	r6, r4, r2
 8006386:	4629      	mov	r1, r5
 8006388:	4632      	mov	r2, r6
 800638a:	f04f 0300 	mov.w	r3, #0
 800638e:	f04f 0400 	mov.w	r4, #0
 8006392:	0154      	lsls	r4, r2, #5
 8006394:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006398:	014b      	lsls	r3, r1, #5
 800639a:	4619      	mov	r1, r3
 800639c:	4622      	mov	r2, r4
 800639e:	1b49      	subs	r1, r1, r5
 80063a0:	eb62 0206 	sbc.w	r2, r2, r6
 80063a4:	f04f 0300 	mov.w	r3, #0
 80063a8:	f04f 0400 	mov.w	r4, #0
 80063ac:	0194      	lsls	r4, r2, #6
 80063ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063b2:	018b      	lsls	r3, r1, #6
 80063b4:	1a5b      	subs	r3, r3, r1
 80063b6:	eb64 0402 	sbc.w	r4, r4, r2
 80063ba:	f04f 0100 	mov.w	r1, #0
 80063be:	f04f 0200 	mov.w	r2, #0
 80063c2:	00e2      	lsls	r2, r4, #3
 80063c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063c8:	00d9      	lsls	r1, r3, #3
 80063ca:	460b      	mov	r3, r1
 80063cc:	4614      	mov	r4, r2
 80063ce:	195b      	adds	r3, r3, r5
 80063d0:	eb44 0406 	adc.w	r4, r4, r6
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	02a2      	lsls	r2, r4, #10
 80063de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063e2:	0299      	lsls	r1, r3, #10
 80063e4:	460b      	mov	r3, r1
 80063e6:	4614      	mov	r4, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	4621      	mov	r1, r4
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f04f 0400 	mov.w	r4, #0
 80063f2:	461a      	mov	r2, r3
 80063f4:	4623      	mov	r3, r4
 80063f6:	f7f9 feef 	bl	80001d8 <__aeabi_uldivmod>
 80063fa:	4603      	mov	r3, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	f003 0303 	and.w	r3, r3, #3
 800640a:	3301      	adds	r3, #1
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	fbb2 f3f3 	udiv	r3, r2, r3
 8006418:	60bb      	str	r3, [r7, #8]
      break;
 800641a:	e002      	b.n	8006422 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800641c:	4b04      	ldr	r3, [pc, #16]	; (8006430 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800641e:	60bb      	str	r3, [r7, #8]
      break;
 8006420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006422:	68bb      	ldr	r3, [r7, #8]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3714      	adds	r7, #20
 8006428:	46bd      	mov	sp, r7
 800642a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642c:	40023800 	.word	0x40023800
 8006430:	00f42400 	.word	0x00f42400
 8006434:	007a1200 	.word	0x007a1200

08006438 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800643c:	4b03      	ldr	r3, [pc, #12]	; (800644c <HAL_RCC_GetHCLKFreq+0x14>)
 800643e:	681b      	ldr	r3, [r3, #0]
}
 8006440:	4618      	mov	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000000 	.word	0x20000000

08006450 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006454:	f7ff fff0 	bl	8006438 <HAL_RCC_GetHCLKFreq>
 8006458:	4601      	mov	r1, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetPCLK1Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0a9b      	lsrs	r3, r3, #10
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	0800e368 	.word	0x0800e368

08006478 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800649c:	2b00      	cmp	r3, #0
 800649e:	d038      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064a0:	4b68      	ldr	r3, [pc, #416]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064a6:	f7fb fb09 	bl	8001abc <HAL_GetTick>
 80064aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064ac:	e008      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ae:	f7fb fb05 	bl	8001abc <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e0bd      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064c0:	4b61      	ldr	r3, [pc, #388]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f0      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	019b      	lsls	r3, r3, #6
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	071b      	lsls	r3, r3, #28
 80064de:	495a      	ldr	r1, [pc, #360]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064e6:	4b57      	ldr	r3, [pc, #348]	; (8006644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064e8:	2201      	movs	r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ec:	f7fb fae6 	bl	8001abc <HAL_GetTick>
 80064f0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064f4:	f7fb fae2 	bl	8001abc <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e09a      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006506:	4b50      	ldr	r3, [pc, #320]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0302 	and.w	r3, r3, #2
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 8083 	beq.w	8006626 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	4b48      	ldr	r3, [pc, #288]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	4a47      	ldr	r2, [pc, #284]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800652e:	6413      	str	r3, [r2, #64]	; 0x40
 8006530:	4b45      	ldr	r3, [pc, #276]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800653c:	4b43      	ldr	r3, [pc, #268]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a42      	ldr	r2, [pc, #264]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006546:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006548:	f7fb fab8 	bl	8001abc <HAL_GetTick>
 800654c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800654e:	e008      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006550:	f7fb fab4 	bl	8001abc <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	2b02      	cmp	r3, #2
 800655c:	d901      	bls.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800655e:	2303      	movs	r3, #3
 8006560:	e06c      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006562:	4b3a      	ldr	r3, [pc, #232]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800656a:	2b00      	cmp	r3, #0
 800656c:	d0f0      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800656e:	4b36      	ldr	r3, [pc, #216]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006576:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d02f      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x166>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	429a      	cmp	r2, r3
 800658a:	d028      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800658c:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800658e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006594:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006596:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006598:	2201      	movs	r2, #1
 800659a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800659c:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800659e:	2200      	movs	r2, #0
 80065a0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065a2:	4a29      	ldr	r2, [pc, #164]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065a8:	4b27      	ldr	r3, [pc, #156]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d114      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065b4:	f7fb fa82 	bl	8001abc <HAL_GetTick>
 80065b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ba:	e00a      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065bc:	f7fb fa7e 	bl	8001abc <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e034      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d2:	4b1d      	ldr	r3, [pc, #116]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d6:	f003 0302 	and.w	r3, r3, #2
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0ee      	beq.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ea:	d10d      	bne.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80065ec:	4b16      	ldr	r3, [pc, #88]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006600:	4911      	ldr	r1, [pc, #68]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006602:	4313      	orrs	r3, r2
 8006604:	608b      	str	r3, [r1, #8]
 8006606:	e005      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006608:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006612:	6093      	str	r3, [r2, #8]
 8006614:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006616:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006620:	4909      	ldr	r1, [pc, #36]	; (8006648 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006622:	4313      	orrs	r3, r2
 8006624:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	7d1a      	ldrb	r2, [r3, #20]
 8006636:	4b07      	ldr	r3, [pc, #28]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006638:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	42470068 	.word	0x42470068
 8006648:	40023800 	.word	0x40023800
 800664c:	40007000 	.word	0x40007000
 8006650:	42470e40 	.word	0x42470e40
 8006654:	424711e0 	.word	0x424711e0

08006658 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2203      	movs	r2, #3
 8006664:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8006666:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800666c:	099b      	lsrs	r3, r3, #6
 800666e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006676:	4b18      	ldr	r3, [pc, #96]	; (80066d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800667c:	0f1b      	lsrs	r3, r3, #28
 800667e:	f003 0207 	and.w	r2, r3, #7
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60da      	str	r2, [r3, #12]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
 8006686:	4b14      	ldr	r3, [pc, #80]	; (80066d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8006694:	4b10      	ldr	r3, [pc, #64]	; (80066d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800669c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 800669e:	4b0e      	ldr	r3, [pc, #56]	; (80066d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	431a      	orrs	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	611a      	str	r2, [r3, #16]

#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
 80066ae:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <HAL_RCCEx_GetPeriphCLKConfig+0x80>)
 80066b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d103      	bne.n	80066c4 <HAL_RCCEx_GetPeriphCLKConfig+0x6c>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	751a      	strb	r2, [r3, #20]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80066c2:	e002      	b.n	80066ca <HAL_RCCEx_GetPeriphCLKConfig+0x72>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	751a      	strb	r2, [r3, #20]
}
 80066ca:	bf00      	nop
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40023800 	.word	0x40023800

080066dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80066ec:	2300      	movs	r3, #0
 80066ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d13f      	bne.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80066fa:	4b23      	ldr	r3, [pc, #140]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006702:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800670a:	2b01      	cmp	r3, #1
 800670c:	d131      	bne.n	8006772 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800670e:	4b1f      	ldr	r3, [pc, #124]	; (800678c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006710:	617b      	str	r3, [r7, #20]
          break;
 8006712:	e031      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006714:	4b1c      	ldr	r3, [pc, #112]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800671c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006720:	d109      	bne.n	8006736 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006722:	4b19      	ldr	r3, [pc, #100]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800672c:	4a18      	ldr	r2, [pc, #96]	; (8006790 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800672e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	e008      	b.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006736:	4b14      	ldr	r3, [pc, #80]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006738:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800673c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006740:	4a14      	ldr	r2, [pc, #80]	; (8006794 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800674a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800674e:	099b      	lsrs	r3, r3, #6
 8006750:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	fb02 f303 	mul.w	r3, r2, r3
 800675a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800675c:	4b0a      	ldr	r3, [pc, #40]	; (8006788 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800675e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006762:	0f1b      	lsrs	r3, r3, #28
 8006764:	f003 0307 	and.w	r3, r3, #7
 8006768:	68ba      	ldr	r2, [r7, #8]
 800676a:	fbb2 f3f3 	udiv	r3, r2, r3
 800676e:	617b      	str	r3, [r7, #20]
          break;
 8006770:	e002      	b.n	8006778 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006772:	2300      	movs	r3, #0
 8006774:	617b      	str	r3, [r7, #20]
          break;
 8006776:	bf00      	nop
        }
      }
      break;
 8006778:	bf00      	nop
    }
  }
  return frequency;
 800677a:	697b      	ldr	r3, [r7, #20]
}
 800677c:	4618      	mov	r0, r3
 800677e:	371c      	adds	r7, #28
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr
 8006788:	40023800 	.word	0x40023800
 800678c:	00bb8000 	.word	0x00bb8000
 8006790:	007a1200 	.word	0x007a1200
 8006794:	00f42400 	.word	0x00f42400

08006798 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e01d      	b.n	80067e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fa fea4 	bl	800150c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2202      	movs	r2, #2
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f000 fb10 	bl	8006dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b085      	sub	sp, #20
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68da      	ldr	r2, [r3, #12]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f042 0201 	orr.w	r2, r2, #1
 8006804:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b06      	cmp	r3, #6
 8006816:	d007      	beq.n	8006828 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d101      	bne.n	8006848 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e01d      	b.n	8006884 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800684e:	b2db      	uxtb	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	d106      	bne.n	8006862 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7fa fe9b 	bl	8001598 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	3304      	adds	r3, #4
 8006872:	4619      	mov	r1, r3
 8006874:	4610      	mov	r0, r2
 8006876:	f000 fac1 	bl	8006dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d122      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d11b      	bne.n	80068e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0202 	mvn.w	r2, #2
 80068b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 fa75 	bl	8006dbe <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 fa67 	bl	8006daa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa78 	bl	8006dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d122      	bne.n	800693c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b04      	cmp	r3, #4
 8006902:	d11b      	bne.n	800693c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0204 	mvn.w	r2, #4
 800690c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa4b 	bl	8006dbe <HAL_TIM_IC_CaptureCallback>
 8006928:	e005      	b.n	8006936 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fa3d 	bl	8006daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fa4e 	bl	8006dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b08      	cmp	r3, #8
 8006948:	d122      	bne.n	8006990 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b08      	cmp	r3, #8
 8006956:	d11b      	bne.n	8006990 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f06f 0208 	mvn.w	r2, #8
 8006960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2204      	movs	r2, #4
 8006966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d003      	beq.n	800697e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa21 	bl	8006dbe <HAL_TIM_IC_CaptureCallback>
 800697c:	e005      	b.n	800698a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 fa13 	bl	8006daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 fa24 	bl	8006dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b10      	cmp	r3, #16
 800699c:	d122      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	f003 0310 	and.w	r3, r3, #16
 80069a8:	2b10      	cmp	r3, #16
 80069aa:	d11b      	bne.n	80069e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f06f 0210 	mvn.w	r2, #16
 80069b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2208      	movs	r2, #8
 80069ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f9f7 	bl	8006dbe <HAL_TIM_IC_CaptureCallback>
 80069d0:	e005      	b.n	80069de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f9e9 	bl	8006daa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f9fa 	bl	8006dd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d10e      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d107      	bne.n	8006a10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f06f 0201 	mvn.w	r2, #1
 8006a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 f9c3 	bl	8006d96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b80      	cmp	r3, #128	; 0x80
 8006a1c:	d10e      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b80      	cmp	r3, #128	; 0x80
 8006a2a:	d107      	bne.n	8006a3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fcfe 	bl	8007438 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	d10e      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a54:	2b40      	cmp	r3, #64	; 0x40
 8006a56:	d107      	bne.n	8006a68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 f9bf 	bl	8006de6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f003 0320 	and.w	r3, r3, #32
 8006a72:	2b20      	cmp	r3, #32
 8006a74:	d10e      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	f003 0320 	and.w	r3, r3, #32
 8006a80:	2b20      	cmp	r3, #32
 8006a82:	d107      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f06f 0220 	mvn.w	r2, #32
 8006a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fcc8 	bl	8007424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d101      	bne.n	8006ab6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006ab2:	2302      	movs	r3, #2
 8006ab4:	e0b4      	b.n	8006c20 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	f200 809f 	bhi.w	8006c0c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006ace:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad4:	08006b09 	.word	0x08006b09
 8006ad8:	08006c0d 	.word	0x08006c0d
 8006adc:	08006c0d 	.word	0x08006c0d
 8006ae0:	08006c0d 	.word	0x08006c0d
 8006ae4:	08006b49 	.word	0x08006b49
 8006ae8:	08006c0d 	.word	0x08006c0d
 8006aec:	08006c0d 	.word	0x08006c0d
 8006af0:	08006c0d 	.word	0x08006c0d
 8006af4:	08006b8b 	.word	0x08006b8b
 8006af8:	08006c0d 	.word	0x08006c0d
 8006afc:	08006c0d 	.word	0x08006c0d
 8006b00:	08006c0d 	.word	0x08006c0d
 8006b04:	08006bcb 	.word	0x08006bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68b9      	ldr	r1, [r7, #8]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 f9f4 	bl	8006efc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	699a      	ldr	r2, [r3, #24]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f042 0208 	orr.w	r2, r2, #8
 8006b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0204 	bic.w	r2, r2, #4
 8006b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6999      	ldr	r1, [r3, #24]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	619a      	str	r2, [r3, #24]
      break;
 8006b46:	e062      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 fa3a 	bl	8006fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	619a      	str	r2, [r3, #24]
      break;
 8006b88:	e041      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68b9      	ldr	r1, [r7, #8]
 8006b90:	4618      	mov	r0, r3
 8006b92:	f000 fa85 	bl	80070a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0208 	orr.w	r2, r2, #8
 8006ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	69da      	ldr	r2, [r3, #28]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f022 0204 	bic.w	r2, r2, #4
 8006bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	69d9      	ldr	r1, [r3, #28]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	691a      	ldr	r2, [r3, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	61da      	str	r2, [r3, #28]
      break;
 8006bc8:	e021      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68b9      	ldr	r1, [r7, #8]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 facf 	bl	8007174 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	69da      	ldr	r2, [r3, #28]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69d9      	ldr	r1, [r3, #28]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	021a      	lsls	r2, r3, #8
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	61da      	str	r2, [r3, #28]
      break;
 8006c0a:	e000      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006c0c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b084      	sub	sp, #16
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d101      	bne.n	8006c40 <HAL_TIM_ConfigClockSource+0x18>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e0a6      	b.n	8006d8e <HAL_TIM_ConfigClockSource+0x166>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c66:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b40      	cmp	r3, #64	; 0x40
 8006c76:	d067      	beq.n	8006d48 <HAL_TIM_ConfigClockSource+0x120>
 8006c78:	2b40      	cmp	r3, #64	; 0x40
 8006c7a:	d80b      	bhi.n	8006c94 <HAL_TIM_ConfigClockSource+0x6c>
 8006c7c:	2b10      	cmp	r3, #16
 8006c7e:	d073      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x140>
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d802      	bhi.n	8006c8a <HAL_TIM_ConfigClockSource+0x62>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d06f      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006c88:	e078      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d06c      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x140>
 8006c8e:	2b30      	cmp	r3, #48	; 0x30
 8006c90:	d06a      	beq.n	8006d68 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006c92:	e073      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c94:	2b70      	cmp	r3, #112	; 0x70
 8006c96:	d00d      	beq.n	8006cb4 <HAL_TIM_ConfigClockSource+0x8c>
 8006c98:	2b70      	cmp	r3, #112	; 0x70
 8006c9a:	d804      	bhi.n	8006ca6 <HAL_TIM_ConfigClockSource+0x7e>
 8006c9c:	2b50      	cmp	r3, #80	; 0x50
 8006c9e:	d033      	beq.n	8006d08 <HAL_TIM_ConfigClockSource+0xe0>
 8006ca0:	2b60      	cmp	r3, #96	; 0x60
 8006ca2:	d041      	beq.n	8006d28 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006ca4:	e06a      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006caa:	d066      	beq.n	8006d7a <HAL_TIM_ConfigClockSource+0x152>
 8006cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb0:	d017      	beq.n	8006ce2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006cb2:	e063      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	6899      	ldr	r1, [r3, #8]
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	f000 fb20 	bl	8007308 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006cd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	609a      	str	r2, [r3, #8]
      break;
 8006ce0:	e04c      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6818      	ldr	r0, [r3, #0]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	6899      	ldr	r1, [r3, #8]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685a      	ldr	r2, [r3, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f000 fb09 	bl	8007308 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d04:	609a      	str	r2, [r3, #8]
      break;
 8006d06:	e039      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	68db      	ldr	r3, [r3, #12]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f000 fa7d 	bl	8007214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2150      	movs	r1, #80	; 0x50
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fad6 	bl	80072d2 <TIM_ITRx_SetConfig>
      break;
 8006d26:	e029      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6818      	ldr	r0, [r3, #0]
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	6859      	ldr	r1, [r3, #4]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	461a      	mov	r2, r3
 8006d36:	f000 fa9c 	bl	8007272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2160      	movs	r1, #96	; 0x60
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fac6 	bl	80072d2 <TIM_ITRx_SetConfig>
      break;
 8006d46:	e019      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	6859      	ldr	r1, [r3, #4]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	461a      	mov	r2, r3
 8006d56:	f000 fa5d 	bl	8007214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2140      	movs	r1, #64	; 0x40
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fab6 	bl	80072d2 <TIM_ITRx_SetConfig>
      break;
 8006d66:	e009      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f000 faad 	bl	80072d2 <TIM_ITRx_SetConfig>
      break;
 8006d78:	e000      	b.n	8006d7c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
 8006e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4a34      	ldr	r2, [pc, #208]	; (8006ee0 <TIM_Base_SetConfig+0xe4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00f      	beq.n	8006e34 <TIM_Base_SetConfig+0x38>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e1a:	d00b      	beq.n	8006e34 <TIM_Base_SetConfig+0x38>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a31      	ldr	r2, [pc, #196]	; (8006ee4 <TIM_Base_SetConfig+0xe8>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d007      	beq.n	8006e34 <TIM_Base_SetConfig+0x38>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a30      	ldr	r2, [pc, #192]	; (8006ee8 <TIM_Base_SetConfig+0xec>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_Base_SetConfig+0x38>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a2f      	ldr	r2, [pc, #188]	; (8006eec <TIM_Base_SetConfig+0xf0>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d108      	bne.n	8006e46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a25      	ldr	r2, [pc, #148]	; (8006ee0 <TIM_Base_SetConfig+0xe4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01b      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e54:	d017      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a22      	ldr	r2, [pc, #136]	; (8006ee4 <TIM_Base_SetConfig+0xe8>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a21      	ldr	r2, [pc, #132]	; (8006ee8 <TIM_Base_SetConfig+0xec>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d00f      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a20      	ldr	r2, [pc, #128]	; (8006eec <TIM_Base_SetConfig+0xf0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d00b      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1f      	ldr	r2, [pc, #124]	; (8006ef0 <TIM_Base_SetConfig+0xf4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d007      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a1e      	ldr	r2, [pc, #120]	; (8006ef4 <TIM_Base_SetConfig+0xf8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d003      	beq.n	8006e86 <TIM_Base_SetConfig+0x8a>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a1d      	ldr	r2, [pc, #116]	; (8006ef8 <TIM_Base_SetConfig+0xfc>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d108      	bne.n	8006e98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	68db      	ldr	r3, [r3, #12]
 8006e92:	68fa      	ldr	r2, [r7, #12]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	695b      	ldr	r3, [r3, #20]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <TIM_Base_SetConfig+0xe4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d103      	bne.n	8006ecc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	615a      	str	r2, [r3, #20]
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00
 8006ef0:	40014000 	.word	0x40014000
 8006ef4:	40014400 	.word	0x40014400
 8006ef8:	40014800 	.word	0x40014800

08006efc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b087      	sub	sp, #28
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	f023 0201 	bic.w	r2, r3, #1
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0303 	bic.w	r3, r3, #3
 8006f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	f023 0302 	bic.w	r3, r3, #2
 8006f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a1c      	ldr	r2, [pc, #112]	; (8006fc4 <TIM_OC1_SetConfig+0xc8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d10c      	bne.n	8006f72 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f023 0308 	bic.w	r3, r3, #8
 8006f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	697a      	ldr	r2, [r7, #20]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	f023 0304 	bic.w	r3, r3, #4
 8006f70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <TIM_OC1_SetConfig+0xc8>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d111      	bne.n	8006f9e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	695b      	ldr	r3, [r3, #20]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	699b      	ldr	r3, [r3, #24]
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68fa      	ldr	r2, [r7, #12]
 8006fa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	621a      	str	r2, [r3, #32]
}
 8006fb8:	bf00      	nop
 8006fba:	371c      	adds	r7, #28
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	40010000 	.word	0x40010000

08006fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	f023 0210 	bic.w	r2, r3, #16
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699b      	ldr	r3, [r3, #24]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	021b      	lsls	r3, r3, #8
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	4313      	orrs	r3, r2
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	f023 0320 	bic.w	r3, r3, #32
 8007012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	011b      	lsls	r3, r3, #4
 800701a:	697a      	ldr	r2, [r7, #20]
 800701c:	4313      	orrs	r3, r2
 800701e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a1e      	ldr	r2, [pc, #120]	; (800709c <TIM_OC2_SetConfig+0xd4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d10d      	bne.n	8007044 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800702e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	4313      	orrs	r3, r2
 800703a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007042:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a15      	ldr	r2, [pc, #84]	; (800709c <TIM_OC2_SetConfig+0xd4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d113      	bne.n	8007074 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	695b      	ldr	r3, [r3, #20]
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	4313      	orrs	r3, r2
 8007066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	693a      	ldr	r2, [r7, #16]
 8007070:	4313      	orrs	r3, r2
 8007072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	621a      	str	r2, [r3, #32]
}
 800708e:	bf00      	nop
 8007090:	371c      	adds	r7, #28
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40010000 	.word	0x40010000

080070a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b087      	sub	sp, #28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a1b      	ldr	r3, [r3, #32]
 80070ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f023 0303 	bic.w	r3, r3, #3
 80070d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4313      	orrs	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a1d      	ldr	r2, [pc, #116]	; (8007170 <TIM_OC3_SetConfig+0xd0>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d10d      	bne.n	800711a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007104:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	021b      	lsls	r3, r3, #8
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007118:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a14      	ldr	r2, [pc, #80]	; (8007170 <TIM_OC3_SetConfig+0xd0>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d113      	bne.n	800714a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	011b      	lsls	r3, r3, #4
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	4313      	orrs	r3, r2
 800713c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	011b      	lsls	r3, r3, #4
 8007144:	693a      	ldr	r2, [r7, #16]
 8007146:	4313      	orrs	r3, r2
 8007148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	621a      	str	r2, [r3, #32]
}
 8007164:	bf00      	nop
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	40010000 	.word	0x40010000

08007174 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	021b      	lsls	r3, r3, #8
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	031b      	lsls	r3, r3, #12
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a10      	ldr	r2, [pc, #64]	; (8007210 <TIM_OC4_SetConfig+0x9c>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d109      	bne.n	80071e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	019b      	lsls	r3, r3, #6
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685a      	ldr	r2, [r3, #4]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	621a      	str	r2, [r3, #32]
}
 8007202:	bf00      	nop
 8007204:	371c      	adds	r7, #28
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr
 800720e:	bf00      	nop
 8007210:	40010000 	.word	0x40010000

08007214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f023 0201 	bic.w	r2, r3, #1
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	699b      	ldr	r3, [r3, #24]
 8007236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800723e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f023 030a 	bic.w	r3, r3, #10
 8007250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	693a      	ldr	r2, [r7, #16]
 800725e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	621a      	str	r2, [r3, #32]
}
 8007266:	bf00      	nop
 8007268:	371c      	adds	r7, #28
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007272:	b480      	push	{r7}
 8007274:	b087      	sub	sp, #28
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	f023 0210 	bic.w	r2, r3, #16
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800729c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	031b      	lsls	r3, r3, #12
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	621a      	str	r2, [r3, #32]
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ea:	683a      	ldr	r2, [r7, #0]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	f043 0307 	orr.w	r3, r3, #7
 80072f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68fa      	ldr	r2, [r7, #12]
 80072fa:	609a      	str	r2, [r3, #8]
}
 80072fc:	bf00      	nop
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
 8007314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	021a      	lsls	r2, r3, #8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	431a      	orrs	r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4313      	orrs	r3, r2
 8007330:	697a      	ldr	r2, [r7, #20]
 8007332:	4313      	orrs	r3, r2
 8007334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	609a      	str	r2, [r3, #8]
}
 800733c:	bf00      	nop
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007348:	b480      	push	{r7}
 800734a:	b085      	sub	sp, #20
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800735c:	2302      	movs	r3, #2
 800735e:	e050      	b.n	8007402 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2202      	movs	r2, #2
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007386:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68fa      	ldr	r2, [r7, #12]
 800738e:	4313      	orrs	r3, r2
 8007390:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a1c      	ldr	r2, [pc, #112]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d018      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ac:	d013      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a18      	ldr	r2, [pc, #96]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d00e      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a16      	ldr	r2, [pc, #88]	; (8007418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d009      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a15      	ldr	r2, [pc, #84]	; (800741c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d004      	beq.n	80073d6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a13      	ldr	r2, [pc, #76]	; (8007420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d10c      	bne.n	80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000
 8007414:	40000400 	.word	0x40000400
 8007418:	40000800 	.word	0x40000800
 800741c:	40000c00 	.word	0x40000c00
 8007420:	40014000 	.word	0x40014000

08007424 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800744c:	b084      	sub	sp, #16
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	f107 001c 	add.w	r0, r7, #28
 800745a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007460:	2b01      	cmp	r3, #1
 8007462:	d122      	bne.n	80074aa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007468:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800748c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d105      	bne.n	800749e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f94a 	bl	8007738 <USB_CoreReset>
 80074a4:	4603      	mov	r3, r0
 80074a6:	73fb      	strb	r3, [r7, #15]
 80074a8:	e01a      	b.n	80074e0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f93e 	bl	8007738 <USB_CoreReset>
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80074c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
 80074d2:	e005      	b.n	80074e0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d10b      	bne.n	80074fe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	f043 0206 	orr.w	r2, r3, #6
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800750a:	b004      	add	sp, #16
 800750c:	4770      	bx	lr

0800750e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800750e:	b480      	push	{r7}
 8007510:	b083      	sub	sp, #12
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f043 0201 	orr.w	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007530:	b480      	push	{r7}
 8007532:	b083      	sub	sp, #12
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f023 0201 	bic.w	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b082      	sub	sp, #8
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
 800755a:	460b      	mov	r3, r1
 800755c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800756a:	78fb      	ldrb	r3, [r7, #3]
 800756c:	2b01      	cmp	r3, #1
 800756e:	d106      	bne.n	800757e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60da      	str	r2, [r3, #12]
 800757c:	e00b      	b.n	8007596 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800757e:	78fb      	ldrb	r3, [r7, #3]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	60da      	str	r2, [r3, #12]
 8007590:	e001      	b.n	8007596 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e003      	b.n	800759e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007596:	2032      	movs	r0, #50	; 0x32
 8007598:	f7fa fa9c 	bl	8001ad4 <HAL_Delay>

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	019b      	lsls	r3, r3, #6
 80075ba:	f043 0220 	orr.w	r2, r3, #32
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	3301      	adds	r3, #1
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4a09      	ldr	r2, [pc, #36]	; (80075f0 <USB_FlushTxFifo+0x48>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d901      	bls.n	80075d4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e006      	b.n	80075e2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0320 	and.w	r3, r3, #32
 80075dc:	2b20      	cmp	r3, #32
 80075de:	d0f0      	beq.n	80075c2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3714      	adds	r7, #20
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	00030d40 	.word	0x00030d40

080075f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2210      	movs	r2, #16
 8007604:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	3301      	adds	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4a09      	ldr	r2, [pc, #36]	; (8007634 <USB_FlushRxFifo+0x40>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d901      	bls.n	8007618 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007614:	2303      	movs	r3, #3
 8007616:	e006      	b.n	8007626 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b10      	cmp	r3, #16
 8007622:	d0f0      	beq.n	8007606 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3714      	adds	r7, #20
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	00030d40 	.word	0x00030d40

08007638 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007638:	b480      	push	{r7}
 800763a:	b089      	sub	sp, #36	; 0x24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	4611      	mov	r1, r2
 8007644:	461a      	mov	r2, r3
 8007646:	460b      	mov	r3, r1
 8007648:	71fb      	strb	r3, [r7, #7]
 800764a:	4613      	mov	r3, r2
 800764c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007656:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11a      	bne.n	8007694 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800765e:	88bb      	ldrh	r3, [r7, #4]
 8007660:	3303      	adds	r3, #3
 8007662:	089b      	lsrs	r3, r3, #2
 8007664:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007666:	2300      	movs	r3, #0
 8007668:	61bb      	str	r3, [r7, #24]
 800766a:	e00f      	b.n	800768c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	031a      	lsls	r2, r3, #12
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4413      	add	r3, r2
 8007674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007678:	461a      	mov	r2, r3
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	3304      	adds	r3, #4
 8007684:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	3301      	adds	r3, #1
 800768a:	61bb      	str	r3, [r7, #24]
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3eb      	bcc.n	800766c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3724      	adds	r7, #36	; 0x24
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr

080076a2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b089      	sub	sp, #36	; 0x24
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	60f8      	str	r0, [r7, #12]
 80076aa:	60b9      	str	r1, [r7, #8]
 80076ac:	4613      	mov	r3, r2
 80076ae:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80076b8:	88fb      	ldrh	r3, [r7, #6]
 80076ba:	3303      	adds	r3, #3
 80076bc:	089b      	lsrs	r3, r3, #2
 80076be:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80076c0:	2300      	movs	r3, #0
 80076c2:	61bb      	str	r3, [r7, #24]
 80076c4:	e00b      	b.n	80076de <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	69fb      	ldr	r3, [r7, #28]
 80076d0:	601a      	str	r2, [r3, #0]
    pDest++;
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3304      	adds	r3, #4
 80076d6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	3301      	adds	r3, #1
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d3ef      	bcc.n	80076c6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80076e6:	69fb      	ldr	r3, [r7, #28]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3724      	adds	r7, #36	; 0x24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	4013      	ands	r3, r2
 800770a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800770c:	68fb      	ldr	r3, [r7, #12]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	f003 0301 	and.w	r3, r3, #1
}
 800772a:	4618      	mov	r0, r3
 800772c:	370c      	adds	r7, #12
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
	...

08007738 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007740:	2300      	movs	r3, #0
 8007742:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	4a13      	ldr	r2, [pc, #76]	; (800779c <USB_CoreReset+0x64>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d901      	bls.n	8007756 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e01b      	b.n	800778e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	2b00      	cmp	r3, #0
 800775c:	daf2      	bge.n	8007744 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f043 0201 	orr.w	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3301      	adds	r3, #1
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4a09      	ldr	r2, [pc, #36]	; (800779c <USB_CoreReset+0x64>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d901      	bls.n	8007780 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e006      	b.n	800778e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f003 0301 	and.w	r3, r3, #1
 8007788:	2b01      	cmp	r3, #1
 800778a:	d0f0      	beq.n	800776e <USB_CoreReset+0x36>

  return HAL_OK;
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	00030d40 	.word	0x00030d40

080077a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077a0:	b084      	sub	sp, #16
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	f107 001c 	add.w	r0, r7, #28
 80077ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80077bc:	461a      	mov	r2, r3
 80077be:	2300      	movs	r3, #0
 80077c0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d018      	beq.n	8007824 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80077f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d10a      	bne.n	800780e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007806:	f043 0304 	orr.w	r3, r3, #4
 800780a:	6013      	str	r3, [r2, #0]
 800780c:	e014      	b.n	8007838 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800781c:	f023 0304 	bic.w	r3, r3, #4
 8007820:	6013      	str	r3, [r2, #0]
 8007822:	e009      	b.n	8007838 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007832:	f023 0304 	bic.w	r3, r3, #4
 8007836:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007838:	2110      	movs	r1, #16
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f7ff feb4 	bl	80075a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7ff fed7 	bl	80075f4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007846:	2300      	movs	r3, #0
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	e015      	b.n	8007878 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	015a      	lsls	r2, r3, #5
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4413      	add	r3, r2
 8007854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007858:	461a      	mov	r2, r3
 800785a:	f04f 33ff 	mov.w	r3, #4294967295
 800785e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3301      	adds	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	429a      	cmp	r2, r3
 800787e:	d3e5      	bcc.n	800784c <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8007880:	2101      	movs	r1, #1
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8ac 	bl	80079e0 <USB_DriveVbus>

  HAL_Delay(200U);
 8007888:	20c8      	movs	r0, #200	; 0xc8
 800788a:	f7fa f923 	bl	8001ad4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00b      	beq.n	80078c0 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078ae:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a14      	ldr	r2, [pc, #80]	; (8007904 <USB_HostInit+0x164>)
 80078b4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a13      	ldr	r2, [pc, #76]	; (8007908 <USB_HostInit+0x168>)
 80078ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80078be:	e009      	b.n	80078d4 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2280      	movs	r2, #128	; 0x80
 80078c4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	4a10      	ldr	r2, [pc, #64]	; (800790c <USB_HostInit+0x16c>)
 80078ca:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a10      	ldr	r2, [pc, #64]	; (8007910 <USB_HostInit+0x170>)
 80078d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d105      	bne.n	80078e6 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f043 0210 	orr.w	r2, r3, #16
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <USB_HostInit+0x174>)
 80078ec:	4313      	orrs	r3, r2
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078fe:	b004      	add	sp, #16
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	01000200 	.word	0x01000200
 8007908:	00e00300 	.word	0x00e00300
 800790c:	00600080 	.word	0x00600080
 8007910:	004000e0 	.word	0x004000e0
 8007914:	a3200008 	.word	0xa3200008

08007918 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	78fb      	ldrb	r3, [r7, #3]
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	68f9      	ldr	r1, [r7, #12]
 800794c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007950:	4313      	orrs	r3, r2
 8007952:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d107      	bne.n	800796a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007960:	461a      	mov	r2, r3
 8007962:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007966:	6053      	str	r3, [r2, #4]
 8007968:	e009      	b.n	800797e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	2b02      	cmp	r3, #2
 800796e:	d106      	bne.n	800797e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007976:	461a      	mov	r2, r3
 8007978:	f241 7370 	movw	r3, #6000	; 0x1770
 800797c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80079ac:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079ba:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80079bc:	2064      	movs	r0, #100	; 0x64
 80079be:	f7fa f889 	bl	8001ad4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80079ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079ce:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80079d0:	200a      	movs	r0, #10
 80079d2:	f7fa f87f 	bl	8001ad4 <HAL_Delay>

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80079e0:	b480      	push	{r7}
 80079e2:	b085      	sub	sp, #20
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007a04:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <USB_DriveVbus+0x44>
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d106      	bne.n	8007a24 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a22:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2e:	d109      	bne.n	8007a44 <USB_DriveVbus+0x64>
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d106      	bne.n	8007a44 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	68fa      	ldr	r2, [r7, #12]
 8007a3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007a3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a42:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3714      	adds	r7, #20
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr

08007a52 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007a52:	b480      	push	{r7}
 8007a54:	b085      	sub	sp, #20
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	0c5b      	lsrs	r3, r3, #17
 8007a70:	f003 0303 	and.w	r3, r3, #3
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3714      	adds	r7, #20
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	b29b      	uxth	r3, r3
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3714      	adds	r7, #20
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b087      	sub	sp, #28
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	4608      	mov	r0, r1
 8007aae:	4611      	mov	r1, r2
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	70fb      	strb	r3, [r7, #3]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	70bb      	strb	r3, [r7, #2]
 8007aba:	4613      	mov	r3, r2
 8007abc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007ada:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d87e      	bhi.n	8007be0 <USB_HC_Init+0x13c>
 8007ae2:	a201      	add	r2, pc, #4	; (adr r2, 8007ae8 <USB_HC_Init+0x44>)
 8007ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae8:	08007af9 	.word	0x08007af9
 8007aec:	08007ba3 	.word	0x08007ba3
 8007af0:	08007af9 	.word	0x08007af9
 8007af4:	08007b65 	.word	0x08007b65
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b04:	461a      	mov	r2, r3
 8007b06:	f240 439d 	movw	r3, #1181	; 0x49d
 8007b0a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007b0c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	da10      	bge.n	8007b36 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b14:	78fb      	ldrb	r3, [r7, #3]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	78fa      	ldrb	r2, [r7, #3]
 8007b24:	0151      	lsls	r1, r2, #5
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	440a      	add	r2, r1
 8007b2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b32:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8007b34:	e057      	b.n	8007be6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d051      	beq.n	8007be6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007b42:	78fb      	ldrb	r3, [r7, #3]
 8007b44:	015a      	lsls	r2, r3, #5
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	4413      	add	r3, r2
 8007b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	78fa      	ldrb	r2, [r7, #3]
 8007b52:	0151      	lsls	r1, r2, #5
 8007b54:	68ba      	ldr	r2, [r7, #8]
 8007b56:	440a      	add	r2, r1
 8007b58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b5c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b60:	60d3      	str	r3, [r2, #12]
      break;
 8007b62:	e040      	b.n	8007be6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b70:	461a      	mov	r2, r3
 8007b72:	f240 639d 	movw	r3, #1693	; 0x69d
 8007b76:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007b78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	da34      	bge.n	8007bea <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007b80:	78fb      	ldrb	r3, [r7, #3]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b9e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007ba0:	e023      	b.n	8007bea <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f240 2325 	movw	r3, #549	; 0x225
 8007bb4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007bb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da17      	bge.n	8007bee <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007bbe:	78fb      	ldrb	r3, [r7, #3]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	68ba      	ldr	r2, [r7, #8]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007bd8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007bdc:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007bde:	e006      	b.n	8007bee <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
      break;
 8007be4:	e004      	b.n	8007bf0 <USB_HC_Init+0x14c>
      break;
 8007be6:	bf00      	nop
 8007be8:	e002      	b.n	8007bf0 <USB_HC_Init+0x14c>
      break;
 8007bea:	bf00      	nop
 8007bec:	e000      	b.n	8007bf0 <USB_HC_Init+0x14c>
      break;
 8007bee:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007bf6:	699a      	ldr	r2, [r3, #24]
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 030f 	and.w	r3, r3, #15
 8007bfe:	2101      	movs	r1, #1
 8007c00:	fa01 f303 	lsl.w	r3, r1, r3
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007c1a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	da03      	bge.n	8007c2a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	e001      	b.n	8007c2e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8007c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d103      	bne.n	8007c3e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007c36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007c3a:	60fb      	str	r3, [r7, #12]
 8007c3c:	e001      	b.n	8007c42 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c42:	787b      	ldrb	r3, [r7, #1]
 8007c44:	059b      	lsls	r3, r3, #22
 8007c46:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c4a:	78bb      	ldrb	r3, [r7, #2]
 8007c4c:	02db      	lsls	r3, r3, #11
 8007c4e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c52:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c54:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c58:	049b      	lsls	r3, r3, #18
 8007c5a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007c5e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007c62:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007c66:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c6c:	78fb      	ldrb	r3, [r7, #3]
 8007c6e:	0159      	lsls	r1, r3, #5
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	440b      	add	r3, r1
 8007c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c78:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007c7e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8007c80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d10f      	bne.n	8007ca8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007c88:	78fb      	ldrb	r3, [r7, #3]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ca2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ca6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007ca8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop

08007cb8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b08c      	sub	sp, #48	; 0x30
 8007cbc:	af02      	add	r7, sp, #8
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	785b      	ldrb	r3, [r3, #1]
 8007cce:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007cd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cd4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d028      	beq.n	8007d34 <USB_HC_StartXfer+0x7c>
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	791b      	ldrb	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d124      	bne.n	8007d34 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d10b      	bne.n	8007d08 <USB_HC_StartXfer+0x50>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	795b      	ldrb	r3, [r3, #5]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d107      	bne.n	8007d08 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	785b      	ldrb	r3, [r3, #1]
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 fa2e 	bl	8008160 <USB_DoPing>
      return HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	e112      	b.n	8007f2e <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d112      	bne.n	8007d34 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	69fa      	ldr	r2, [r7, #28]
 8007d1e:	0151      	lsls	r1, r2, #5
 8007d20:	6a3a      	ldr	r2, [r7, #32]
 8007d22:	440a      	add	r2, r1
 8007d24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007d28:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007d2c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	2200      	movs	r2, #0
 8007d32:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d018      	beq.n	8007d6e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	8912      	ldrh	r2, [r2, #8]
 8007d44:	4413      	add	r3, r2
 8007d46:	3b01      	subs	r3, #1
 8007d48:	68ba      	ldr	r2, [r7, #8]
 8007d4a:	8912      	ldrh	r2, [r2, #8]
 8007d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d50:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007d52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007d54:	8b7b      	ldrh	r3, [r7, #26]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d90b      	bls.n	8007d72 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8007d5a:	8b7b      	ldrh	r3, [r7, #26]
 8007d5c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007d5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	8912      	ldrh	r2, [r2, #8]
 8007d64:	fb02 f203 	mul.w	r2, r2, r3
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	611a      	str	r2, [r3, #16]
 8007d6c:	e001      	b.n	8007d72 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	78db      	ldrb	r3, [r3, #3]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d006      	beq.n	8007d88 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8007d7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	8912      	ldrh	r2, [r2, #8]
 8007d80:	fb02 f203 	mul.w	r2, r2, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007d92:	04d9      	lsls	r1, r3, #19
 8007d94:	4b68      	ldr	r3, [pc, #416]	; (8007f38 <USB_HC_StartXfer+0x280>)
 8007d96:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d98:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	7a9b      	ldrb	r3, [r3, #10]
 8007d9e:	075b      	lsls	r3, r3, #29
 8007da0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007da4:	69f9      	ldr	r1, [r7, #28]
 8007da6:	0148      	lsls	r0, r1, #5
 8007da8:	6a39      	ldr	r1, [r7, #32]
 8007daa:	4401      	add	r1, r0
 8007dac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007db0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8007db2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	68d9      	ldr	r1, [r3, #12]
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	015a      	lsls	r2, r3, #5
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007dca:	460a      	mov	r2, r1
 8007dcc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dd4:	689b      	ldr	r3, [r3, #8]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	bf0c      	ite	eq
 8007dde:	2301      	moveq	r3, #1
 8007de0:	2300      	movne	r3, #0
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007de6:	69fb      	ldr	r3, [r7, #28]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	6a3a      	ldr	r2, [r7, #32]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007e00:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007e04:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	015a      	lsls	r2, r3, #5
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e12:	681a      	ldr	r2, [r3, #0]
 8007e14:	7e7b      	ldrb	r3, [r7, #25]
 8007e16:	075b      	lsls	r3, r3, #29
 8007e18:	69f9      	ldr	r1, [r7, #28]
 8007e1a:	0148      	lsls	r0, r1, #5
 8007e1c:	6a39      	ldr	r1, [r7, #32]
 8007e1e:	4401      	add	r1, r0
 8007e20:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007e24:	4313      	orrs	r3, r2
 8007e26:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	015a      	lsls	r2, r3, #5
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	4413      	add	r3, r2
 8007e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a41      	ldr	r2, [pc, #260]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e38:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007e3a:	4b40      	ldr	r3, [pc, #256]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007e42:	4a3e      	ldr	r2, [pc, #248]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e44:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	78db      	ldrb	r3, [r3, #3]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d006      	beq.n	8007e5c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007e4e:	4b3b      	ldr	r3, [pc, #236]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e56:	4a39      	ldr	r2, [pc, #228]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e58:	6013      	str	r3, [r2, #0]
 8007e5a:	e005      	b.n	8007e68 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007e5c:	4b37      	ldr	r3, [pc, #220]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e64:	4a35      	ldr	r2, [pc, #212]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e66:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007e68:	4b34      	ldr	r3, [pc, #208]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e70:	4a32      	ldr	r2, [pc, #200]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e72:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	015a      	lsls	r2, r3, #5
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007e80:	461a      	mov	r2, r3
 8007e82:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <USB_HC_StartXfer+0x284>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d14e      	bne.n	8007f2c <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	78db      	ldrb	r3, [r3, #3]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d14a      	bne.n	8007f2c <USB_HC_StartXfer+0x274>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d046      	beq.n	8007f2c <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	79db      	ldrb	r3, [r3, #7]
 8007ea2:	2b03      	cmp	r3, #3
 8007ea4:	d830      	bhi.n	8007f08 <USB_HC_StartXfer+0x250>
 8007ea6:	a201      	add	r2, pc, #4	; (adr r2, 8007eac <USB_HC_StartXfer+0x1f4>)
 8007ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eac:	08007ebd 	.word	0x08007ebd
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007ebd 	.word	0x08007ebd
 8007eb8:	08007ee1 	.word	0x08007ee1
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	089b      	lsrs	r3, r3, #2
 8007ec4:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007ec6:	8afa      	ldrh	r2, [r7, #22]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d91c      	bls.n	8007f0c <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	f043 0220 	orr.w	r2, r3, #32
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	619a      	str	r2, [r3, #24]
          }
          break;
 8007ede:	e015      	b.n	8007f0c <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	691b      	ldr	r3, [r3, #16]
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	089b      	lsrs	r3, r3, #2
 8007ee8:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007eea:	8afa      	ldrh	r2, [r7, #22]
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d90a      	bls.n	8007f10 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	699b      	ldr	r3, [r3, #24]
 8007efe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	619a      	str	r2, [r3, #24]
          }
          break;
 8007f06:	e003      	b.n	8007f10 <USB_HC_StartXfer+0x258>

        default:
          break;
 8007f08:	bf00      	nop
 8007f0a:	e002      	b.n	8007f12 <USB_HC_StartXfer+0x25a>
          break;
 8007f0c:	bf00      	nop
 8007f0e:	e000      	b.n	8007f12 <USB_HC_StartXfer+0x25a>
          break;
 8007f10:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	68d9      	ldr	r1, [r3, #12]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	785a      	ldrb	r2, [r3, #1]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	691b      	ldr	r3, [r3, #16]
 8007f1e:	b298      	uxth	r0, r3
 8007f20:	2300      	movs	r3, #0
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	4603      	mov	r3, r0
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	f7ff fb86 	bl	8007638 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3728      	adds	r7, #40	; 0x28
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	1ff80000 	.word	0x1ff80000
 8007f3c:	2000134c 	.word	0x2000134c

08007f40 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b085      	sub	sp, #20
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f52:	695b      	ldr	r3, [r3, #20]
 8007f54:	b29b      	uxth	r3, r3
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007f62:	b480      	push	{r7}
 8007f64:	b087      	sub	sp, #28
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f72:	78fb      	ldrb	r3, [r7, #3]
 8007f74:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	0c9b      	lsrs	r3, r3, #18
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d002      	beq.n	8007f9c <USB_HC_Halt+0x3a>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b02      	cmp	r3, #2
 8007f9a:	d16c      	bne.n	8008076 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	693a      	ldr	r2, [r7, #16]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fba:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d143      	bne.n	8008050 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68fa      	ldr	r2, [r7, #12]
 8007fd8:	0151      	lsls	r1, r2, #5
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	440a      	add	r2, r1
 8007fde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007fe2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007fe6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	0151      	lsls	r1, r2, #5
 8007ffa:	693a      	ldr	r2, [r7, #16]
 8007ffc:	440a      	add	r2, r1
 8007ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008002:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008006:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	015a      	lsls	r2, r3, #5
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4413      	add	r3, r2
 8008010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	0151      	lsls	r1, r2, #5
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	440a      	add	r2, r1
 800801e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008022:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008026:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	3301      	adds	r3, #1
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008034:	d81d      	bhi.n	8008072 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	4413      	add	r3, r2
 800803e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008048:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800804c:	d0ec      	beq.n	8008028 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800804e:	e080      	b.n	8008152 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	440a      	add	r2, r1
 8008066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800806a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800806e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008070:	e06f      	b.n	8008152 <USB_HC_Halt+0x1f0>
          break;
 8008072:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008074:	e06d      	b.n	8008152 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	015a      	lsls	r2, r3, #5
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	4413      	add	r3, r2
 800807e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	0151      	lsls	r1, r2, #5
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	440a      	add	r2, r1
 800808c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008090:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008094:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800809c:	691b      	ldr	r3, [r3, #16]
 800809e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d143      	bne.n	800812e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	0151      	lsls	r1, r2, #5
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	440a      	add	r2, r1
 80080bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080c4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	0151      	lsls	r1, r2, #5
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	440a      	add	r2, r1
 80080dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80080e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80080e4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	015a      	lsls	r2, r3, #5
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	0151      	lsls	r1, r2, #5
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	440a      	add	r2, r1
 80080fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008104:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	3301      	adds	r3, #1
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008112:	d81d      	bhi.n	8008150 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	015a      	lsls	r2, r3, #5
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	4413      	add	r3, r2
 800811c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800812a:	d0ec      	beq.n	8008106 <USB_HC_Halt+0x1a4>
 800812c:	e011      	b.n	8008152 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	0151      	lsls	r1, r2, #5
 8008140:	693a      	ldr	r2, [r7, #16]
 8008142:	440a      	add	r2, r1
 8008144:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800814c:	6013      	str	r3, [r2, #0]
 800814e:	e000      	b.n	8008152 <USB_HC_Halt+0x1f0>
          break;
 8008150:	bf00      	nop
    }
  }

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	371c      	adds	r7, #28
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008160:	b480      	push	{r7}
 8008162:	b087      	sub	sp, #28
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008170:	78fb      	ldrb	r3, [r7, #3]
 8008172:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008174:	2301      	movs	r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	04da      	lsls	r2, r3, #19
 800817c:	4b15      	ldr	r3, [pc, #84]	; (80081d4 <USB_DoPing+0x74>)
 800817e:	4013      	ands	r3, r2
 8008180:	693a      	ldr	r2, [r7, #16]
 8008182:	0151      	lsls	r1, r2, #5
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	440a      	add	r2, r1
 8008188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800818c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008190:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	015a      	lsls	r2, r3, #5
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	4413      	add	r3, r2
 800819a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	015a      	lsls	r2, r3, #5
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	4413      	add	r3, r2
 80081ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80081be:	461a      	mov	r2, r3
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	371c      	adds	r7, #28
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	1ff80000 	.word	0x1ff80000

080081d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f7ff f9a1 	bl	8007530 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80081ee:	2110      	movs	r1, #16
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff f9d9 	bl	80075a8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7ff f9fc 	bl	80075f4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
 8008200:	e01f      	b.n	8008242 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	4413      	add	r3, r2
 800820a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008218:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008220:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008228:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	015a      	lsls	r2, r3, #5
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	4413      	add	r3, r2
 8008232:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008236:	461a      	mov	r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	3301      	adds	r3, #1
 8008240:	613b      	str	r3, [r7, #16]
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b0f      	cmp	r3, #15
 8008246:	d9dc      	bls.n	8008202 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008248:	2300      	movs	r3, #0
 800824a:	613b      	str	r3, [r7, #16]
 800824c:	e034      	b.n	80082b8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	015a      	lsls	r2, r3, #5
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4413      	add	r3, r2
 8008256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008264:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800826c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008274:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008282:	461a      	mov	r2, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	3301      	adds	r3, #1
 800828c:	617b      	str	r3, [r7, #20]
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008294:	d80c      	bhi.n	80082b0 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	015a      	lsls	r2, r3, #5
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	4413      	add	r3, r2
 800829e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ac:	d0ec      	beq.n	8008288 <USB_StopHost+0xb0>
 80082ae:	e000      	b.n	80082b2 <USB_StopHost+0xda>
        break;
 80082b0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	3301      	adds	r3, #1
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	2b0f      	cmp	r3, #15
 80082bc:	d9c7      	bls.n	800824e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80082c4:	461a      	mov	r2, r3
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff f91a 	bl	800750e <USB_EnableGlobalInt>

  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80082e8:	4904      	ldr	r1, [pc, #16]	; (80082fc <MX_FATFS_Init+0x18>)
 80082ea:	4805      	ldr	r0, [pc, #20]	; (8008300 <MX_FATFS_Init+0x1c>)
 80082ec:	f005 fb7a 	bl	800d9e4 <FATFS_LinkDriver>
 80082f0:	4603      	mov	r3, r0
 80082f2:	461a      	mov	r2, r3
 80082f4:	4b03      	ldr	r3, [pc, #12]	; (8008304 <MX_FATFS_Init+0x20>)
 80082f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80082f8:	bf00      	nop
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200015a4 	.word	0x200015a4
 8008300:	0800e378 	.word	0x0800e378
 8008304:	20001a08 	.word	0x20001a08

08008308 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800830c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800830e:	4618      	mov	r0, r3
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8008322:	2300      	movs	r3, #0
}
 8008324:	4618      	mov	r0, r3
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	4603      	mov	r3, r0
 8008338:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800833e:	79fb      	ldrb	r3, [r7, #7]
 8008340:	4619      	mov	r1, r3
 8008342:	4808      	ldr	r0, [pc, #32]	; (8008364 <USBH_status+0x34>)
 8008344:	f000 fe11 	bl	8008f6a <USBH_MSC_UnitIsReady>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <USBH_status+0x24>
  {
    res = RES_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]
 8008352:	e001      	b.n	8008358 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20001a0c 	.word	0x20001a0c

08008368 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b094      	sub	sp, #80	; 0x50
 800836c:	af02      	add	r7, sp, #8
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	607a      	str	r2, [r7, #4]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4603      	mov	r3, r0
 8008376:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800837e:	7bf9      	ldrb	r1, [r7, #15]
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	9300      	str	r3, [sp, #0]
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	4812      	ldr	r0, [pc, #72]	; (80083d4 <USBH_read+0x6c>)
 800838a:	f000 fe38 	bl	8008ffe <USBH_MSC_Read>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d103      	bne.n	800839c <USBH_read+0x34>
  {
    res = RES_OK;
 8008394:	2300      	movs	r3, #0
 8008396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800839a:	e015      	b.n	80083c8 <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800839c:	f107 0210 	add.w	r2, r7, #16
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	4619      	mov	r1, r3
 80083a4:	480b      	ldr	r0, [pc, #44]	; (80083d4 <USBH_read+0x6c>)
 80083a6:	f000 fe06 	bl	8008fb6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80083aa:	7f7b      	ldrb	r3, [r7, #29]
 80083ac:	2b28      	cmp	r3, #40	; 0x28
 80083ae:	d003      	beq.n	80083b8 <USBH_read+0x50>
 80083b0:	2b3a      	cmp	r3, #58	; 0x3a
 80083b2:	d001      	beq.n	80083b8 <USBH_read+0x50>
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d103      	bne.n	80083c0 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 80083b8:	2303      	movs	r3, #3
 80083ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 80083be:	e003      	b.n	80083c8 <USBH_read+0x60>

    default:
      res = RES_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 80083c6:	bf00      	nop
    }
  }

  return res;
 80083c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3748      	adds	r7, #72	; 0x48
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	20001a0c 	.word	0x20001a0c

080083d8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b094      	sub	sp, #80	; 0x50
 80083dc:	af02      	add	r7, sp, #8
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	607a      	str	r2, [r7, #4]
 80083e2:	603b      	str	r3, [r7, #0]
 80083e4:	4603      	mov	r3, r0
 80083e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80083ee:	7bf9      	ldrb	r1, [r7, #15]
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	4817      	ldr	r0, [pc, #92]	; (8008458 <USBH_write+0x80>)
 80083fa:	f000 fe69 	bl	80090d0 <USBH_MSC_Write>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d103      	bne.n	800840c <USBH_write+0x34>
  {
    res = RES_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800840a:	e01f      	b.n	800844c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800840c:	f107 0210 	add.w	r2, r7, #16
 8008410:	7bfb      	ldrb	r3, [r7, #15]
 8008412:	4619      	mov	r1, r3
 8008414:	4810      	ldr	r0, [pc, #64]	; (8008458 <USBH_write+0x80>)
 8008416:	f000 fdce 	bl	8008fb6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800841a:	7f7b      	ldrb	r3, [r7, #29]
 800841c:	2b27      	cmp	r3, #39	; 0x27
 800841e:	d009      	beq.n	8008434 <USBH_write+0x5c>
 8008420:	2b27      	cmp	r3, #39	; 0x27
 8008422:	dc02      	bgt.n	800842a <USBH_write+0x52>
 8008424:	2b04      	cmp	r3, #4
 8008426:	d009      	beq.n	800843c <USBH_write+0x64>
 8008428:	e00c      	b.n	8008444 <USBH_write+0x6c>
 800842a:	2b28      	cmp	r3, #40	; 0x28
 800842c:	d006      	beq.n	800843c <USBH_write+0x64>
 800842e:	2b3a      	cmp	r3, #58	; 0x3a
 8008430:	d004      	beq.n	800843c <USBH_write+0x64>
 8008432:	e007      	b.n	8008444 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8008434:	2302      	movs	r3, #2
 8008436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800843a:	e007      	b.n	800844c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800843c:	2303      	movs	r3, #3
 800843e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8008442:	e003      	b.n	800844c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800844a:	bf00      	nop
    }
  }

  return res;
 800844c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008450:	4618      	mov	r0, r3
 8008452:	3748      	adds	r7, #72	; 0x48
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20001a0c 	.word	0x20001a0c

0800845c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b090      	sub	sp, #64	; 0x40
 8008460:	af00      	add	r7, sp, #0
 8008462:	4603      	mov	r3, r0
 8008464:	603a      	str	r2, [r7, #0]
 8008466:	71fb      	strb	r3, [r7, #7]
 8008468:	460b      	mov	r3, r1
 800846a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8008472:	79bb      	ldrb	r3, [r7, #6]
 8008474:	2b03      	cmp	r3, #3
 8008476:	d852      	bhi.n	800851e <USBH_ioctl+0xc2>
 8008478:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <USBH_ioctl+0x24>)
 800847a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847e:	bf00      	nop
 8008480:	08008491 	.word	0x08008491
 8008484:	08008499 	.word	0x08008499
 8008488:	080084c3 	.word	0x080084c3
 800848c:	080084ef 	.word	0x080084ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8008496:	e045      	b.n	8008524 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8008498:	f107 0208 	add.w	r2, r7, #8
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	4619      	mov	r1, r3
 80084a0:	4823      	ldr	r0, [pc, #140]	; (8008530 <USBH_ioctl+0xd4>)
 80084a2:	f000 fd88 	bl	8008fb6 <USBH_MSC_GetLUNInfo>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d106      	bne.n	80084ba <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80084b2:	2300      	movs	r3, #0
 80084b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80084b8:	e034      	b.n	8008524 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80084c0:	e030      	b.n	8008524 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80084c2:	f107 0208 	add.w	r2, r7, #8
 80084c6:	79fb      	ldrb	r3, [r7, #7]
 80084c8:	4619      	mov	r1, r3
 80084ca:	4819      	ldr	r0, [pc, #100]	; (8008530 <USBH_ioctl+0xd4>)
 80084cc:	f000 fd73 	bl	8008fb6 <USBH_MSC_GetLUNInfo>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d107      	bne.n	80084e6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80084d6:	8a3b      	ldrh	r3, [r7, #16]
 80084d8:	461a      	mov	r2, r3
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80084e4:	e01e      	b.n	8008524 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 80084ec:	e01a      	b.n	8008524 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80084ee:	f107 0208 	add.w	r2, r7, #8
 80084f2:	79fb      	ldrb	r3, [r7, #7]
 80084f4:	4619      	mov	r1, r3
 80084f6:	480e      	ldr	r0, [pc, #56]	; (8008530 <USBH_ioctl+0xd4>)
 80084f8:	f000 fd5d 	bl	8008fb6 <USBH_MSC_GetLUNInfo>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d109      	bne.n	8008516 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8008502:	8a3b      	ldrh	r3, [r7, #16]
 8008504:	0a5b      	lsrs	r3, r3, #9
 8008506:	b29b      	uxth	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8008514:	e006      	b.n	8008524 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800851c:	e002      	b.n	8008524 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800851e:	2304      	movs	r3, #4
 8008520:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8008524:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008528:	4618      	mov	r0, r3
 800852a:	3740      	adds	r7, #64	; 0x40
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}
 8008530:	20001a0c 	.word	0x20001a0c

08008534 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b089      	sub	sp, #36	; 0x24
 8008538:	af04      	add	r7, sp, #16
 800853a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008542:	7919      	ldrb	r1, [r3, #4]
 8008544:	2350      	movs	r3, #80	; 0x50
 8008546:	2206      	movs	r2, #6
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 fc4f 	bl	8009dec <USBH_FindInterface>
 800854e:	4603      	mov	r3, r0
 8008550:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8008552:	7bfb      	ldrb	r3, [r7, #15]
 8008554:	2bff      	cmp	r3, #255	; 0xff
 8008556:	d002      	beq.n	800855e <USBH_MSC_InterfaceInit+0x2a>
 8008558:	7bfb      	ldrb	r3, [r7, #15]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d901      	bls.n	8008562 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800855e:	2302      	movs	r3, #2
 8008560:	e0ef      	b.n	8008742 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8008562:	7bfb      	ldrb	r3, [r7, #15]
 8008564:	4619      	mov	r1, r3
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f001 fc24 	bl	8009db4 <USBH_SelectInterface>
 800856c:	4603      	mov	r3, r0
 800856e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008570:	7bbb      	ldrb	r3, [r7, #14]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	e0e3      	b.n	8008742 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008580:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008584:	f005 fda4 	bl	800e0d0 <malloc>
 8008588:	4603      	mov	r3, r0
 800858a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800859c:	2302      	movs	r3, #2
 800859e:	e0d0      	b.n	8008742 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80085a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80085a4:	2100      	movs	r1, #0
 80085a6:	68b8      	ldr	r0, [r7, #8]
 80085a8:	f005 fdad 	bl	800e106 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	211a      	movs	r1, #26
 80085b2:	fb01 f303 	mul.w	r3, r1, r3
 80085b6:	4413      	add	r3, r2
 80085b8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	b25b      	sxtb	r3, r3
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da16      	bge.n	80085f2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80085c4:	7bfb      	ldrb	r3, [r7, #15]
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	211a      	movs	r1, #26
 80085ca:	fb01 f303 	mul.w	r3, r1, r3
 80085ce:	4413      	add	r3, r2
 80085d0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80085d4:	781a      	ldrb	r2, [r3, #0]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	211a      	movs	r1, #26
 80085e0:	fb01 f303 	mul.w	r3, r1, r3
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80085ea:	881a      	ldrh	r2, [r3, #0]
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	815a      	strh	r2, [r3, #10]
 80085f0:	e015      	b.n	800861e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	211a      	movs	r1, #26
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
 80085fc:	4413      	add	r3, r2
 80085fe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	211a      	movs	r1, #26
 800860e:	fb01 f303 	mul.w	r3, r1, r3
 8008612:	4413      	add	r3, r2
 8008614:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008618:	881a      	ldrh	r2, [r3, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800861e:	7bfb      	ldrb	r3, [r7, #15]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	211a      	movs	r1, #26
 8008624:	fb01 f303 	mul.w	r3, r1, r3
 8008628:	4413      	add	r3, r2
 800862a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	b25b      	sxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	da16      	bge.n	8008664 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	211a      	movs	r1, #26
 800863c:	fb01 f303 	mul.w	r3, r1, r3
 8008640:	4413      	add	r3, r2
 8008642:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	211a      	movs	r1, #26
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	4413      	add	r3, r2
 8008658:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800865c:	881a      	ldrh	r2, [r3, #0]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	815a      	strh	r2, [r3, #10]
 8008662:	e015      	b.n	8008690 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	211a      	movs	r1, #26
 800866a:	fb01 f303 	mul.w	r3, r1, r3
 800866e:	4413      	add	r3, r2
 8008670:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800867a:	7bfb      	ldrb	r3, [r7, #15]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	211a      	movs	r1, #26
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	4413      	add	r3, r2
 8008686:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800868a:	881a      	ldrh	r2, [r3, #0]
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2200      	movs	r2, #0
 800869a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	2200      	movs	r2, #0
 80086a0:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	799b      	ldrb	r3, [r3, #6]
 80086a6:	4619      	mov	r1, r3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f002 fdc2 	bl	800b232 <USBH_AllocPipe>
 80086ae:	4603      	mov	r3, r0
 80086b0:	461a      	mov	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	79db      	ldrb	r3, [r3, #7]
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f002 fdb8 	bl	800b232 <USBH_AllocPipe>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 fda4 	bl	8009218 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	7959      	ldrb	r1, [r3, #5]
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	7998      	ldrb	r0, [r3, #6]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	8912      	ldrh	r2, [r2, #8]
 80086e8:	9202      	str	r2, [sp, #8]
 80086ea:	2202      	movs	r2, #2
 80086ec:	9201      	str	r2, [sp, #4]
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4623      	mov	r3, r4
 80086f2:	4602      	mov	r2, r0
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f002 fd6d 	bl	800b1d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	7919      	ldrb	r1, [r3, #4]
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	79d8      	ldrb	r0, [r3, #7]
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	8952      	ldrh	r2, [r2, #10]
 8008712:	9202      	str	r2, [sp, #8]
 8008714:	2202      	movs	r2, #2
 8008716:	9201      	str	r2, [sp, #4]
 8008718:	9300      	str	r3, [sp, #0]
 800871a:	4623      	mov	r3, r4
 800871c:	4602      	mov	r2, r0
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f002 fd58 	bl	800b1d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	791b      	ldrb	r3, [r3, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	4619      	mov	r1, r3
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f005 fbeb 	bl	800df08 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	795b      	ldrb	r3, [r3, #5]
 8008736:	2200      	movs	r2, #0
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f005 fbe4 	bl	800df08 <USBH_LL_SetToggle>

  return USBH_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	bd90      	pop	{r4, r7, pc}

0800874a <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008758:	69db      	ldr	r3, [r3, #28]
 800875a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	795b      	ldrb	r3, [r3, #5]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00e      	beq.n	8008782 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	795b      	ldrb	r3, [r3, #5]
 8008768:	4619      	mov	r1, r3
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f002 fd51 	bl	800b212 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	795b      	ldrb	r3, [r3, #5]
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f002 fd7c 	bl	800b274 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	791b      	ldrb	r3, [r3, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00e      	beq.n	80087a8 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	791b      	ldrb	r3, [r3, #4]
 800878e:	4619      	mov	r1, r3
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f002 fd3e 	bl	800b212 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	791b      	ldrb	r3, [r3, #4]
 800879a:	4619      	mov	r1, r3
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f002 fd69 	bl	800b274 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00b      	beq.n	80087cc <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ba:	69db      	ldr	r3, [r3, #28]
 80087bc:	4618      	mov	r0, r3
 80087be:	f005 fc8f 	bl	800e0e0 <free>
    phost->pActiveClass->pData = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087c8:	2200      	movs	r2, #0
 80087ca:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e4:	69db      	ldr	r3, [r3, #28]
 80087e6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	7b9b      	ldrb	r3, [r3, #14]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d004      	beq.n	80087fe <USBH_MSC_ClassRequest+0x28>
 80087f4:	2b03      	cmp	r3, #3
 80087f6:	d03e      	beq.n	8008876 <USBH_MSC_ClassRequest+0xa0>
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d000      	beq.n	80087fe <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 80087fc:	e04a      	b.n	8008894 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	4619      	mov	r1, r3
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fcea 	bl	80091dc <USBH_MSC_BOT_REQ_GetMaxLUN>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 800880c:	7bfb      	ldrb	r3, [r7, #15]
 800880e:	2b03      	cmp	r3, #3
 8008810:	d104      	bne.n	800881c <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d135      	bne.n	800888e <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d804      	bhi.n	8008834 <USBH_MSC_ClassRequest+0x5e>
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	3301      	adds	r3, #1
 8008830:	b2da      	uxtb	r2, r3
 8008832:	e000      	b.n	8008836 <USBH_MSC_ClassRequest+0x60>
 8008834:	2202      	movs	r2, #2
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800883a:	2300      	movs	r3, #0
 800883c:	73bb      	strb	r3, [r7, #14]
 800883e:	e014      	b.n	800886a <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8008840:	7bbb      	ldrb	r3, [r7, #14]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	2134      	movs	r1, #52	; 0x34
 8008846:	fb01 f303 	mul.w	r3, r1, r3
 800884a:	4413      	add	r3, r2
 800884c:	3392      	adds	r3, #146	; 0x92
 800884e:	2202      	movs	r2, #2
 8008850:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	2134      	movs	r1, #52	; 0x34
 8008858:	fb01 f303 	mul.w	r3, r1, r3
 800885c:	4413      	add	r3, r2
 800885e:	33c1      	adds	r3, #193	; 0xc1
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8008864:	7bbb      	ldrb	r3, [r7, #14]
 8008866:	3301      	adds	r3, #1
 8008868:	73bb      	strb	r3, [r7, #14]
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	7bba      	ldrb	r2, [r7, #14]
 8008870:	429a      	cmp	r2, r3
 8008872:	d3e5      	bcc.n	8008840 <USBH_MSC_ClassRequest+0x6a>
      break;
 8008874:	e00b      	b.n	800888e <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008876:	2100      	movs	r1, #0
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f002 f878 	bl	800a96e <USBH_ClrFeature>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d106      	bne.n	8008892 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	7bda      	ldrb	r2, [r3, #15]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	739a      	strb	r2, [r3, #14]
      break;
 800888c:	e001      	b.n	8008892 <USBH_MSC_ClassRequest+0xbc>
      break;
 800888e:	bf00      	nop
 8008890:	e000      	b.n	8008894 <USBH_MSC_ClassRequest+0xbe>
      break;
 8008892:	bf00      	nop
  }

  return status;
 8008894:	7bfb      	ldrb	r3, [r7, #15]
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088ae:	69db      	ldr	r3, [r3, #28]
 80088b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80088b6:	2301      	movs	r3, #1
 80088b8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80088ba:	2301      	movs	r3, #1
 80088bc:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	7b1b      	ldrb	r3, [r3, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <USBH_MSC_Process+0x2e>
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	f000 8271 	beq.w	8008dae <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80088cc:	e272      	b.n	8008db4 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	b29b      	uxth	r3, r3
 80088da:	429a      	cmp	r2, r3
 80088dc:	f080 824f 	bcs.w	8008d7e <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088e6:	4619      	mov	r1, r3
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	2334      	movs	r3, #52	; 0x34
 80088ec:	fb03 f301 	mul.w	r3, r3, r1
 80088f0:	4413      	add	r3, r2
 80088f2:	3391      	adds	r3, #145	; 0x91
 80088f4:	2201      	movs	r2, #1
 80088f6:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80088fe:	4619      	mov	r1, r3
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	2334      	movs	r3, #52	; 0x34
 8008904:	fb03 f301 	mul.w	r3, r3, r1
 8008908:	4413      	add	r3, r2
 800890a:	3390      	adds	r3, #144	; 0x90
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b08      	cmp	r3, #8
 8008910:	f200 8243 	bhi.w	8008d9a <USBH_MSC_Process+0x4fa>
 8008914:	a201      	add	r2, pc, #4	; (adr r2, 800891c <USBH_MSC_Process+0x7c>)
 8008916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800891a:	bf00      	nop
 800891c:	08008941 	.word	0x08008941
 8008920:	08008d9b 	.word	0x08008d9b
 8008924:	08008a09 	.word	0x08008a09
 8008928:	08008b8d 	.word	0x08008b8d
 800892c:	08008967 	.word	0x08008967
 8008930:	08008c59 	.word	0x08008c59
 8008934:	08008d9b 	.word	0x08008d9b
 8008938:	08008d9b 	.word	0x08008d9b
 800893c:	08008d6d 	.word	0x08008d6d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008946:	4619      	mov	r1, r3
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	2334      	movs	r3, #52	; 0x34
 800894c:	fb03 f301 	mul.w	r3, r3, r1
 8008950:	4413      	add	r3, r2
 8008952:	3390      	adds	r3, #144	; 0x90
 8008954:	2204      	movs	r2, #4
 8008956:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8008964:	e222      	b.n	8008dac <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800896c:	b2d9      	uxtb	r1, r3
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008974:	461a      	mov	r2, r3
 8008976:	2334      	movs	r3, #52	; 0x34
 8008978:	fb03 f302 	mul.w	r3, r3, r2
 800897c:	3398      	adds	r3, #152	; 0x98
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	4413      	add	r3, r2
 8008982:	3307      	adds	r3, #7
 8008984:	461a      	mov	r2, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 ff68 	bl	800985c <USBH_MSC_SCSI_Inquiry>
 800898c:	4603      	mov	r3, r0
 800898e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008990:	7bfb      	ldrb	r3, [r7, #15]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d10b      	bne.n	80089ae <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800899c:	4619      	mov	r1, r3
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	2334      	movs	r3, #52	; 0x34
 80089a2:	fb03 f301 	mul.w	r3, r3, r1
 80089a6:	4413      	add	r3, r2
 80089a8:	3390      	adds	r3, #144	; 0x90
 80089aa:	2202      	movs	r2, #2
 80089ac:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80089ae:	7bfb      	ldrb	r3, [r7, #15]
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d10c      	bne.n	80089ce <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089ba:	4619      	mov	r1, r3
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	2334      	movs	r3, #52	; 0x34
 80089c0:	fb03 f301 	mul.w	r3, r3, r1
 80089c4:	4413      	add	r3, r2
 80089c6:	3390      	adds	r3, #144	; 0x90
 80089c8:	2205      	movs	r2, #5
 80089ca:	701a      	strb	r2, [r3, #0]
            break;
 80089cc:	e1e7      	b.n	8008d9e <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	2b04      	cmp	r3, #4
 80089d2:	f040 81e4 	bne.w	8008d9e <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089dc:	4619      	mov	r1, r3
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	2334      	movs	r3, #52	; 0x34
 80089e2:	fb03 f301 	mul.w	r3, r3, r1
 80089e6:	4413      	add	r3, r2
 80089e8:	3390      	adds	r3, #144	; 0x90
 80089ea:	2201      	movs	r2, #1
 80089ec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80089f4:	4619      	mov	r1, r3
 80089f6:	693a      	ldr	r2, [r7, #16]
 80089f8:	2334      	movs	r3, #52	; 0x34
 80089fa:	fb03 f301 	mul.w	r3, r3, r1
 80089fe:	4413      	add	r3, r2
 8008a00:	3391      	adds	r3, #145	; 0x91
 8008a02:	2202      	movs	r2, #2
 8008a04:	701a      	strb	r2, [r3, #0]
            break;
 8008a06:	e1ca      	b.n	8008d9e <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	4619      	mov	r1, r3
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fe64 	bl	80096e0 <USBH_MSC_SCSI_TestUnitReady>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d149      	bne.n	8008ab6 <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a28:	4619      	mov	r1, r3
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	2334      	movs	r3, #52	; 0x34
 8008a2e:	fb03 f301 	mul.w	r3, r3, r1
 8008a32:	4413      	add	r3, r2
 8008a34:	3392      	adds	r3, #146	; 0x92
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d00c      	beq.n	8008a56 <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a42:	4619      	mov	r1, r3
 8008a44:	693a      	ldr	r2, [r7, #16]
 8008a46:	2334      	movs	r3, #52	; 0x34
 8008a48:	fb03 f301 	mul.w	r3, r3, r1
 8008a4c:	4413      	add	r3, r2
 8008a4e:	33c1      	adds	r3, #193	; 0xc1
 8008a50:	2201      	movs	r2, #1
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	e00b      	b.n	8008a6e <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	693a      	ldr	r2, [r7, #16]
 8008a60:	2334      	movs	r3, #52	; 0x34
 8008a62:	fb03 f301 	mul.w	r3, r3, r1
 8008a66:	4413      	add	r3, r2
 8008a68:	33c1      	adds	r3, #193	; 0xc1
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a74:	4619      	mov	r1, r3
 8008a76:	693a      	ldr	r2, [r7, #16]
 8008a78:	2334      	movs	r3, #52	; 0x34
 8008a7a:	fb03 f301 	mul.w	r3, r3, r1
 8008a7e:	4413      	add	r3, r2
 8008a80:	3390      	adds	r3, #144	; 0x90
 8008a82:	2203      	movs	r2, #3
 8008a84:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	2334      	movs	r3, #52	; 0x34
 8008a92:	fb03 f301 	mul.w	r3, r3, r1
 8008a96:	4413      	add	r3, r2
 8008a98:	3391      	adds	r3, #145	; 0x91
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	2334      	movs	r3, #52	; 0x34
 8008aaa:	fb03 f301 	mul.w	r3, r3, r1
 8008aae:	4413      	add	r3, r2
 8008ab0:	3392      	adds	r3, #146	; 0x92
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 8008ab6:	7bbb      	ldrb	r3, [r7, #14]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d14a      	bne.n	8008b52 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	2334      	movs	r3, #52	; 0x34
 8008ac8:	fb03 f301 	mul.w	r3, r3, r1
 8008acc:	4413      	add	r3, r2
 8008ace:	3392      	adds	r3, #146	; 0x92
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d00c      	beq.n	8008af0 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008adc:	4619      	mov	r1, r3
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	2334      	movs	r3, #52	; 0x34
 8008ae2:	fb03 f301 	mul.w	r3, r3, r1
 8008ae6:	4413      	add	r3, r2
 8008ae8:	33c1      	adds	r3, #193	; 0xc1
 8008aea:	2201      	movs	r2, #1
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e00b      	b.n	8008b08 <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008af6:	4619      	mov	r1, r3
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	2334      	movs	r3, #52	; 0x34
 8008afc:	fb03 f301 	mul.w	r3, r3, r1
 8008b00:	4413      	add	r3, r2
 8008b02:	33c1      	adds	r3, #193	; 0xc1
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b0e:	4619      	mov	r1, r3
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	2334      	movs	r3, #52	; 0x34
 8008b14:	fb03 f301 	mul.w	r3, r3, r1
 8008b18:	4413      	add	r3, r2
 8008b1a:	3390      	adds	r3, #144	; 0x90
 8008b1c:	2205      	movs	r2, #5
 8008b1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b26:	4619      	mov	r1, r3
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	2334      	movs	r3, #52	; 0x34
 8008b2c:	fb03 f301 	mul.w	r3, r3, r1
 8008b30:	4413      	add	r3, r2
 8008b32:	3391      	adds	r3, #145	; 0x91
 8008b34:	2201      	movs	r2, #1
 8008b36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b3e:	4619      	mov	r1, r3
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	2334      	movs	r3, #52	; 0x34
 8008b44:	fb03 f301 	mul.w	r3, r3, r1
 8008b48:	4413      	add	r3, r2
 8008b4a:	3392      	adds	r3, #146	; 0x92
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	701a      	strb	r2, [r3, #0]
            break;
 8008b50:	e127      	b.n	8008da2 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008b52:	7bbb      	ldrb	r3, [r7, #14]
 8008b54:	2b04      	cmp	r3, #4
 8008b56:	f040 8124 	bne.w	8008da2 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b60:	4619      	mov	r1, r3
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	2334      	movs	r3, #52	; 0x34
 8008b66:	fb03 f301 	mul.w	r3, r3, r1
 8008b6a:	4413      	add	r3, r2
 8008b6c:	3390      	adds	r3, #144	; 0x90
 8008b6e:	2201      	movs	r2, #1
 8008b70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b78:	4619      	mov	r1, r3
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	2334      	movs	r3, #52	; 0x34
 8008b7e:	fb03 f301 	mul.w	r3, r3, r1
 8008b82:	4413      	add	r3, r2
 8008b84:	3391      	adds	r3, #145	; 0x91
 8008b86:	2202      	movs	r2, #2
 8008b88:	701a      	strb	r2, [r3, #0]
            break;
 8008b8a:	e10a      	b.n	8008da2 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b92:	b2d9      	uxtb	r1, r3
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	2334      	movs	r3, #52	; 0x34
 8008b9e:	fb03 f302 	mul.w	r3, r3, r2
 8008ba2:	3390      	adds	r3, #144	; 0x90
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	3304      	adds	r3, #4
 8008baa:	461a      	mov	r2, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fdda 	bl	8009766 <USBH_MSC_SCSI_ReadCapacity>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d120      	bne.n	8008bfe <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	2334      	movs	r3, #52	; 0x34
 8008bc8:	fb03 f301 	mul.w	r3, r3, r1
 8008bcc:	4413      	add	r3, r2
 8008bce:	3390      	adds	r3, #144	; 0x90
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bda:	4619      	mov	r1, r3
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	2334      	movs	r3, #52	; 0x34
 8008be0:	fb03 f301 	mul.w	r3, r3, r1
 8008be4:	4413      	add	r3, r2
 8008be6:	3391      	adds	r3, #145	; 0x91
 8008be8:	2200      	movs	r2, #0
 8008bea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008bfc:	e0d3      	b.n	8008da6 <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d10c      	bne.n	8008c1e <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	2334      	movs	r3, #52	; 0x34
 8008c10:	fb03 f301 	mul.w	r3, r3, r1
 8008c14:	4413      	add	r3, r2
 8008c16:	3390      	adds	r3, #144	; 0x90
 8008c18:	2205      	movs	r2, #5
 8008c1a:	701a      	strb	r2, [r3, #0]
            break;
 8008c1c:	e0c3      	b.n	8008da6 <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	f040 80c0 	bne.w	8008da6 <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	693a      	ldr	r2, [r7, #16]
 8008c30:	2334      	movs	r3, #52	; 0x34
 8008c32:	fb03 f301 	mul.w	r3, r3, r1
 8008c36:	4413      	add	r3, r2
 8008c38:	3390      	adds	r3, #144	; 0x90
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c44:	4619      	mov	r1, r3
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	2334      	movs	r3, #52	; 0x34
 8008c4a:	fb03 f301 	mul.w	r3, r3, r1
 8008c4e:	4413      	add	r3, r2
 8008c50:	3391      	adds	r3, #145	; 0x91
 8008c52:	2202      	movs	r2, #2
 8008c54:	701a      	strb	r2, [r3, #0]
            break;
 8008c56:	e0a6      	b.n	8008da6 <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c5e:	b2d9      	uxtb	r1, r3
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c66:	461a      	mov	r2, r3
 8008c68:	2334      	movs	r3, #52	; 0x34
 8008c6a:	fb03 f302 	mul.w	r3, r3, r2
 8008c6e:	3398      	adds	r3, #152	; 0x98
 8008c70:	693a      	ldr	r2, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	3304      	adds	r3, #4
 8008c76:	461a      	mov	r2, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fe94 	bl	80099a6 <USBH_MSC_SCSI_RequestSense>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d145      	bne.n	8008d14 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008c8e:	4619      	mov	r1, r3
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	2334      	movs	r3, #52	; 0x34
 8008c94:	fb03 f301 	mul.w	r3, r3, r1
 8008c98:	4413      	add	r3, r2
 8008c9a:	339c      	adds	r3, #156	; 0x9c
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b06      	cmp	r3, #6
 8008ca0:	d00c      	beq.n	8008cbc <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008ca8:	4619      	mov	r1, r3
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	2334      	movs	r3, #52	; 0x34
 8008cae:	fb03 f301 	mul.w	r3, r3, r1
 8008cb2:	4413      	add	r3, r2
 8008cb4:	339c      	adds	r3, #156	; 0x9c
 8008cb6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d117      	bne.n	8008cec <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	f242 720f 	movw	r2, #9999	; 0x270f
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d80c      	bhi.n	8008cec <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cd8:	4619      	mov	r1, r3
 8008cda:	693a      	ldr	r2, [r7, #16]
 8008cdc:	2334      	movs	r3, #52	; 0x34
 8008cde:	fb03 f301 	mul.w	r3, r3, r1
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3390      	adds	r3, #144	; 0x90
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	701a      	strb	r2, [r3, #0]
                  break;
 8008cea:	e05f      	b.n	8008dac <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	2334      	movs	r3, #52	; 0x34
 8008cf8:	fb03 f301 	mul.w	r3, r3, r1
 8008cfc:	4413      	add	r3, r2
 8008cfe:	3390      	adds	r3, #144	; 0x90
 8008d00:	2201      	movs	r2, #1
 8008d02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d10c      	bne.n	8008d34 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d20:	4619      	mov	r1, r3
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	2334      	movs	r3, #52	; 0x34
 8008d26:	fb03 f301 	mul.w	r3, r3, r1
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3390      	adds	r3, #144	; 0x90
 8008d2e:	2208      	movs	r2, #8
 8008d30:	701a      	strb	r2, [r3, #0]
            break;
 8008d32:	e03a      	b.n	8008daa <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008d34:	7bfb      	ldrb	r3, [r7, #15]
 8008d36:	2b04      	cmp	r3, #4
 8008d38:	d137      	bne.n	8008daa <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d40:	4619      	mov	r1, r3
 8008d42:	693a      	ldr	r2, [r7, #16]
 8008d44:	2334      	movs	r3, #52	; 0x34
 8008d46:	fb03 f301 	mul.w	r3, r3, r1
 8008d4a:	4413      	add	r3, r2
 8008d4c:	3390      	adds	r3, #144	; 0x90
 8008d4e:	2201      	movs	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d58:	4619      	mov	r1, r3
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	2334      	movs	r3, #52	; 0x34
 8008d5e:	fb03 f301 	mul.w	r3, r3, r1
 8008d62:	4413      	add	r3, r2
 8008d64:	3391      	adds	r3, #145	; 0x91
 8008d66:	2202      	movs	r2, #2
 8008d68:	701a      	strb	r2, [r3, #0]
            break;
 8008d6a:	e01e      	b.n	8008daa <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008d72:	3301      	adds	r3, #1
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008d7c:	e016      	b.n	8008dac <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	2200      	movs	r2, #0
 8008d82:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008d92:	2102      	movs	r1, #2
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	4798      	blx	r3
      break;
 8008d98:	e00c      	b.n	8008db4 <USBH_MSC_Process+0x514>
            break;
 8008d9a:	bf00      	nop
 8008d9c:	e00a      	b.n	8008db4 <USBH_MSC_Process+0x514>
            break;
 8008d9e:	bf00      	nop
 8008da0:	e008      	b.n	8008db4 <USBH_MSC_Process+0x514>
            break;
 8008da2:	bf00      	nop
 8008da4:	e006      	b.n	8008db4 <USBH_MSC_Process+0x514>
            break;
 8008da6:	bf00      	nop
 8008da8:	e004      	b.n	8008db4 <USBH_MSC_Process+0x514>
            break;
 8008daa:	bf00      	nop
      break;
 8008dac:	e002      	b.n	8008db4 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008dae:	2300      	movs	r3, #0
 8008db0:	75fb      	strb	r3, [r7, #23]
      break;
 8008db2:	bf00      	nop
  }
  return error;
 8008db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3718      	adds	r7, #24
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop

08008dc0 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b088      	sub	sp, #32
 8008dda:	af02      	add	r7, sp, #8
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008dec:	2301      	movs	r3, #1
 8008dee:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008df0:	2301      	movs	r3, #1
 8008df2:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	2134      	movs	r1, #52	; 0x34
 8008dfa:	fb01 f303 	mul.w	r3, r1, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	3390      	adds	r3, #144	; 0x90
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b06      	cmp	r3, #6
 8008e06:	d004      	beq.n	8008e12 <USBH_MSC_RdWrProcess+0x3c>
 8008e08:	2b07      	cmp	r3, #7
 8008e0a:	d037      	beq.n	8008e7c <USBH_MSC_RdWrProcess+0xa6>
 8008e0c:	2b05      	cmp	r3, #5
 8008e0e:	d06a      	beq.n	8008ee6 <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8008e10:	e0a6      	b.n	8008f60 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8008e12:	78f9      	ldrb	r1, [r7, #3]
 8008e14:	2300      	movs	r3, #0
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	2300      	movs	r3, #0
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fea6 	bl	8009b6e <USBH_MSC_SCSI_Read>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10b      	bne.n	8008e44 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	2134      	movs	r1, #52	; 0x34
 8008e32:	fb01 f303 	mul.w	r3, r1, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	3390      	adds	r3, #144	; 0x90
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	75fb      	strb	r3, [r7, #23]
      break;
 8008e42:	e088      	b.n	8008f56 <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d109      	bne.n	8008e5e <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	2134      	movs	r1, #52	; 0x34
 8008e50:	fb01 f303 	mul.w	r3, r1, r3
 8008e54:	4413      	add	r3, r2
 8008e56:	3390      	adds	r3, #144	; 0x90
 8008e58:	2205      	movs	r2, #5
 8008e5a:	701a      	strb	r2, [r3, #0]
      break;
 8008e5c:	e07b      	b.n	8008f56 <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008e5e:	7bfb      	ldrb	r3, [r7, #15]
 8008e60:	2b04      	cmp	r3, #4
 8008e62:	d178      	bne.n	8008f56 <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008e64:	78fb      	ldrb	r3, [r7, #3]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	2134      	movs	r1, #52	; 0x34
 8008e6a:	fb01 f303 	mul.w	r3, r1, r3
 8008e6e:	4413      	add	r3, r2
 8008e70:	3390      	adds	r3, #144	; 0x90
 8008e72:	2208      	movs	r2, #8
 8008e74:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008e76:	2302      	movs	r3, #2
 8008e78:	75fb      	strb	r3, [r7, #23]
      break;
 8008e7a:	e06c      	b.n	8008f56 <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008e7c:	78f9      	ldrb	r1, [r7, #3]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9300      	str	r3, [sp, #0]
 8008e82:	2300      	movs	r3, #0
 8008e84:	2200      	movs	r2, #0
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fe06 	bl	8009a98 <USBH_MSC_SCSI_Write>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10b      	bne.n	8008eae <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008e96:	78fb      	ldrb	r3, [r7, #3]
 8008e98:	693a      	ldr	r2, [r7, #16]
 8008e9a:	2134      	movs	r1, #52	; 0x34
 8008e9c:	fb01 f303 	mul.w	r3, r1, r3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	3390      	adds	r3, #144	; 0x90
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8008eac:	e055      	b.n	8008f5a <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d109      	bne.n	8008ec8 <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8008eb4:	78fb      	ldrb	r3, [r7, #3]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	2134      	movs	r1, #52	; 0x34
 8008eba:	fb01 f303 	mul.w	r3, r1, r3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	3390      	adds	r3, #144	; 0x90
 8008ec2:	2205      	movs	r2, #5
 8008ec4:	701a      	strb	r2, [r3, #0]
      break;
 8008ec6:	e048      	b.n	8008f5a <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d145      	bne.n	8008f5a <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008ece:	78fb      	ldrb	r3, [r7, #3]
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	2134      	movs	r1, #52	; 0x34
 8008ed4:	fb01 f303 	mul.w	r3, r1, r3
 8008ed8:	4413      	add	r3, r2
 8008eda:	3390      	adds	r3, #144	; 0x90
 8008edc:	2208      	movs	r2, #8
 8008ede:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ee4:	e039      	b.n	8008f5a <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008ee6:	78fb      	ldrb	r3, [r7, #3]
 8008ee8:	2234      	movs	r2, #52	; 0x34
 8008eea:	fb02 f303 	mul.w	r3, r2, r3
 8008eee:	3398      	adds	r3, #152	; 0x98
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	1d1a      	adds	r2, r3, #4
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fd53 	bl	80099a6 <USBH_MSC_SCSI_RequestSense>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d113      	bne.n	8008f32 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008f0a:	78fb      	ldrb	r3, [r7, #3]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	2134      	movs	r1, #52	; 0x34
 8008f10:	fb01 f303 	mul.w	r3, r1, r3
 8008f14:	4413      	add	r3, r2
 8008f16:	3390      	adds	r3, #144	; 0x90
 8008f18:	2201      	movs	r2, #1
 8008f1a:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	2134      	movs	r1, #52	; 0x34
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	4413      	add	r3, r2
 8008f28:	3391      	adds	r3, #145	; 0x91
 8008f2a:	2202      	movs	r2, #2
 8008f2c:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8008f2e:	2302      	movs	r3, #2
 8008f30:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8008f32:	7bfb      	ldrb	r3, [r7, #15]
 8008f34:	2b02      	cmp	r3, #2
 8008f36:	d012      	beq.n	8008f5e <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d10f      	bne.n	8008f5e <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008f3e:	78fb      	ldrb	r3, [r7, #3]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	2134      	movs	r1, #52	; 0x34
 8008f44:	fb01 f303 	mul.w	r3, r1, r3
 8008f48:	4413      	add	r3, r2
 8008f4a:	3390      	adds	r3, #144	; 0x90
 8008f4c:	2208      	movs	r2, #8
 8008f4e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008f50:	2302      	movs	r3, #2
 8008f52:	75fb      	strb	r3, [r7, #23]
      break;
 8008f54:	e003      	b.n	8008f5e <USBH_MSC_RdWrProcess+0x188>
      break;
 8008f56:	bf00      	nop
 8008f58:	e002      	b.n	8008f60 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008f5a:	bf00      	nop
 8008f5c:	e000      	b.n	8008f60 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8008f5e:	bf00      	nop

  }
  return error;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}

08008f6a <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008f6a:	b480      	push	{r7}
 8008f6c:	b085      	sub	sp, #20
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
 8008f72:	460b      	mov	r3, r1
 8008f74:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b0b      	cmp	r3, #11
 8008f88:	d10c      	bne.n	8008fa4 <USBH_MSC_UnitIsReady+0x3a>
 8008f8a:	78fb      	ldrb	r3, [r7, #3]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	2134      	movs	r1, #52	; 0x34
 8008f90:	fb01 f303 	mul.w	r3, r1, r3
 8008f94:	4413      	add	r3, r2
 8008f96:	3391      	adds	r3, #145	; 0x91
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d102      	bne.n	8008fa4 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	73fb      	strb	r3, [r7, #15]
 8008fa2:	e001      	b.n	8008fa8 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b086      	sub	sp, #24
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	460b      	mov	r3, r1
 8008fc0:	607a      	str	r2, [r7, #4]
 8008fc2:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	2b0b      	cmp	r3, #11
 8008fd6:	d10d      	bne.n	8008ff4 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008fd8:	7afb      	ldrb	r3, [r7, #11]
 8008fda:	2234      	movs	r2, #52	; 0x34
 8008fdc:	fb02 f303 	mul.w	r3, r2, r3
 8008fe0:	3390      	adds	r3, #144	; 0x90
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	2234      	movs	r2, #52	; 0x34
 8008fe8:	4619      	mov	r1, r3
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f005 f880 	bl	800e0f0 <memcpy>
    return USBH_OK;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	e000      	b.n	8008ff6 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008ff4:	2302      	movs	r3, #2
  }
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3718      	adds	r7, #24
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b088      	sub	sp, #32
 8009002:	af02      	add	r7, sp, #8
 8009004:	60f8      	str	r0, [r7, #12]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	460b      	mov	r3, r1
 800900c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00e      	beq.n	8009042 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800902a:	2b0b      	cmp	r3, #11
 800902c:	d109      	bne.n	8009042 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800902e:	7afb      	ldrb	r3, [r7, #11]
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	2134      	movs	r1, #52	; 0x34
 8009034:	fb01 f303 	mul.w	r3, r1, r3
 8009038:	4413      	add	r3, r2
 800903a:	3390      	adds	r3, #144	; 0x90
 800903c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800903e:	2b01      	cmp	r3, #1
 8009040:	d001      	beq.n	8009046 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	e040      	b.n	80090c8 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2206      	movs	r2, #6
 800904a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	2134      	movs	r1, #52	; 0x34
 8009052:	fb01 f303 	mul.w	r3, r1, r3
 8009056:	4413      	add	r3, r2
 8009058:	3390      	adds	r3, #144	; 0x90
 800905a:	2206      	movs	r2, #6
 800905c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800905e:	7afb      	ldrb	r3, [r7, #11]
 8009060:	b29a      	uxth	r2, r3
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8009068:	7af9      	ldrb	r1, [r7, #11]
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	9300      	str	r3, [sp, #0]
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	687a      	ldr	r2, [r7, #4]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 fd7b 	bl	8009b6e <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800907e:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009080:	e016      	b.n	80090b0 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	1ad2      	subs	r2, r2, r3
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	f242 7110 	movw	r1, #10000	; 0x2710
 8009092:	fb01 f303 	mul.w	r3, r1, r3
 8009096:	429a      	cmp	r2, r3
 8009098:	d805      	bhi.n	80090a6 <USBH_MSC_Read+0xa8>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d104      	bne.n	80090b0 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	2201      	movs	r2, #1
 80090aa:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80090ac:	2302      	movs	r3, #2
 80090ae:	e00b      	b.n	80090c8 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	4619      	mov	r1, r3
 80090b4:	68f8      	ldr	r0, [r7, #12]
 80090b6:	f7ff fe8e 	bl	8008dd6 <USBH_MSC_RdWrProcess>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d0e0      	beq.n	8009082 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	2201      	movs	r2, #1
 80090c4:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3718      	adds	r7, #24
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b088      	sub	sp, #32
 80090d4:	af02      	add	r7, sp, #8
 80090d6:	60f8      	str	r0, [r7, #12]
 80090d8:	607a      	str	r2, [r7, #4]
 80090da:	603b      	str	r3, [r7, #0]
 80090dc:	460b      	mov	r3, r1
 80090de:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00e      	beq.n	8009114 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80090fc:	2b0b      	cmp	r3, #11
 80090fe:	d109      	bne.n	8009114 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8009100:	7afb      	ldrb	r3, [r7, #11]
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	2134      	movs	r1, #52	; 0x34
 8009106:	fb01 f303 	mul.w	r3, r1, r3
 800910a:	4413      	add	r3, r2
 800910c:	3390      	adds	r3, #144	; 0x90
 800910e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8009110:	2b01      	cmp	r3, #1
 8009112:	d001      	beq.n	8009118 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8009114:	2302      	movs	r3, #2
 8009116:	e040      	b.n	800919a <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	2207      	movs	r2, #7
 800911c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	2134      	movs	r1, #52	; 0x34
 8009124:	fb01 f303 	mul.w	r3, r1, r3
 8009128:	4413      	add	r3, r2
 800912a:	3390      	adds	r3, #144	; 0x90
 800912c:	2207      	movs	r2, #7
 800912e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8009130:	7afb      	ldrb	r3, [r7, #11]
 8009132:	b29a      	uxth	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800913a:	7af9      	ldrb	r1, [r7, #11]
 800913c:	6a3b      	ldr	r3, [r7, #32]
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fca7 	bl	8009a98 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009150:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009152:	e016      	b.n	8009182 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	1ad2      	subs	r2, r2, r3
 800915e:	6a3b      	ldr	r3, [r7, #32]
 8009160:	f242 7110 	movw	r1, #10000	; 0x2710
 8009164:	fb01 f303 	mul.w	r3, r1, r3
 8009168:	429a      	cmp	r2, r3
 800916a:	d805      	bhi.n	8009178 <USBH_MSC_Write+0xa8>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009172:	b2db      	uxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	d104      	bne.n	8009182 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2201      	movs	r2, #1
 800917c:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800917e:	2302      	movs	r3, #2
 8009180:	e00b      	b.n	800919a <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	4619      	mov	r1, r3
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff fe25 	bl	8008dd6 <USBH_MSC_RdWrProcess>
 800918c:	4603      	mov	r3, r0
 800918e:	2b01      	cmp	r3, #1
 8009190:	d0e0      	beq.n	8009154 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2201      	movs	r2, #1
 8009196:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3718      	adds	r7, #24
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2221      	movs	r2, #33	; 0x21
 80091ae:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	22ff      	movs	r2, #255	; 0xff
 80091b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2200      	movs	r2, #0
 80091ba:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2200      	movs	r2, #0
 80091c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80091c8:	2200      	movs	r2, #0
 80091ca:	2100      	movs	r1, #0
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f001 fdae 	bl	800ad2e <USBH_CtlReq>
 80091d2:	4603      	mov	r3, r0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3708      	adds	r7, #8
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	22a1      	movs	r2, #161	; 0xa1
 80091ea:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	22fe      	movs	r2, #254	; 0xfe
 80091f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2201      	movs	r2, #1
 8009202:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009204:	2201      	movs	r2, #1
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f001 fd90 	bl	800ad2e <USBH_CtlReq>
 800920e:	4603      	mov	r3, r0
}
 8009210:	4618      	mov	r0, r3
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009226:	69db      	ldr	r3, [r3, #28]
 8009228:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4a09      	ldr	r2, [pc, #36]	; (8009254 <USBH_MSC_BOT_Init+0x3c>)
 800922e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	4a09      	ldr	r2, [pc, #36]	; (8009258 <USBH_MSC_BOT_Init+0x40>)
 8009234:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2201      	movs	r2, #1
 8009242:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3714      	adds	r7, #20
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	43425355 	.word	0x43425355
 8009258:	20304050 	.word	0x20304050

0800925c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b088      	sub	sp, #32
 8009260:	af02      	add	r7, sp, #8
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8009268:	2301      	movs	r3, #1
 800926a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800926c:	2301      	movs	r3, #1
 800926e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8009270:	2301      	movs	r3, #1
 8009272:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009274:	2300      	movs	r3, #0
 8009276:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800928c:	3b01      	subs	r3, #1
 800928e:	2b0a      	cmp	r3, #10
 8009290:	f200 81a1 	bhi.w	80095d6 <USBH_MSC_BOT_Process+0x37a>
 8009294:	a201      	add	r2, pc, #4	; (adr r2, 800929c <USBH_MSC_BOT_Process+0x40>)
 8009296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929a:	bf00      	nop
 800929c:	080092c9 	.word	0x080092c9
 80092a0:	080092f3 	.word	0x080092f3
 80092a4:	0800935d 	.word	0x0800935d
 80092a8:	0800937b 	.word	0x0800937b
 80092ac:	080093ff 	.word	0x080093ff
 80092b0:	08009423 	.word	0x08009423
 80092b4:	080094bd 	.word	0x080094bd
 80092b8:	080094d9 	.word	0x080094d9
 80092bc:	0800952b 	.word	0x0800952b
 80092c0:	0800955b 	.word	0x0800955b
 80092c4:	080095bd 	.word	0x080095bd
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2202      	movs	r2, #2
 80092d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	795a      	ldrb	r2, [r3, #5]
 80092e2:	2301      	movs	r3, #1
 80092e4:	9300      	str	r3, [sp, #0]
 80092e6:	4613      	mov	r3, r2
 80092e8:	221f      	movs	r2, #31
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f001 ff2f 	bl	800b14e <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 80092f0:	e180      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	795b      	ldrb	r3, [r3, #5]
 80092f6:	4619      	mov	r1, r3
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f004 fddb 	bl	800deb4 <USBH_LL_GetURBState>
 80092fe:	4603      	mov	r3, r0
 8009300:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009302:	7d3b      	ldrb	r3, [r7, #20]
 8009304:	2b01      	cmp	r3, #1
 8009306:	d118      	bne.n	800933a <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00f      	beq.n	8009330 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8009316:	b25b      	sxtb	r3, r3
 8009318:	2b00      	cmp	r3, #0
 800931a:	da04      	bge.n	8009326 <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	2203      	movs	r2, #3
 8009320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009324:	e159      	b.n	80095da <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	2205      	movs	r2, #5
 800932a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800932e:	e154      	b.n	80095da <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	2207      	movs	r2, #7
 8009334:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009338:	e14f      	b.n	80095da <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 800933a:	7d3b      	ldrb	r3, [r7, #20]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d104      	bne.n	800934a <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2201      	movs	r2, #1
 8009344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009348:	e147      	b.n	80095da <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 800934a:	7d3b      	ldrb	r3, [r7, #20]
 800934c:	2b05      	cmp	r3, #5
 800934e:	f040 8144 	bne.w	80095da <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8009352:	693b      	ldr	r3, [r7, #16]
 8009354:	220a      	movs	r2, #10
 8009356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800935a:	e13e      	b.n	80095da <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	895a      	ldrh	r2, [r3, #10]
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	791b      	ldrb	r3, [r3, #4]
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 ff14 	bl	800b198 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	2204      	movs	r2, #4
 8009374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8009378:	e13c      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	791b      	ldrb	r3, [r3, #4]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f004 fd97 	bl	800deb4 <USBH_LL_GetURBState>
 8009386:	4603      	mov	r3, r0
 8009388:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800938a:	7d3b      	ldrb	r3, [r7, #20]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d12d      	bne.n	80093ec <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009394:	693a      	ldr	r2, [r7, #16]
 8009396:	8952      	ldrh	r2, [r2, #10]
 8009398:	4293      	cmp	r3, r2
 800939a:	d910      	bls.n	80093be <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	8952      	ldrh	r2, [r2, #10]
 80093a6:	441a      	add	r2, r3
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093b2:	693a      	ldr	r2, [r7, #16]
 80093b4:	8952      	ldrh	r2, [r2, #10]
 80093b6:	1a9a      	subs	r2, r3, r2
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80093bc:	e002      	b.n	80093c4 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2200      	movs	r2, #0
 80093c2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00a      	beq.n	80093e2 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	895a      	ldrh	r2, [r3, #10]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	791b      	ldrb	r3, [r3, #4]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f001 fedc 	bl	800b198 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80093e0:	e0fd      	b.n	80095de <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2207      	movs	r2, #7
 80093e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093ea:	e0f8      	b.n	80095de <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 80093ec:	7d3b      	ldrb	r3, [r7, #20]
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	f040 80f5 	bne.w	80095de <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2209      	movs	r2, #9
 80093f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80093fc:	e0ef      	b.n	80095de <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	891a      	ldrh	r2, [r3, #8]
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	7958      	ldrb	r0, [r3, #5]
 800940c:	2301      	movs	r3, #1
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	4603      	mov	r3, r0
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 fe9b 	bl	800b14e <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2206      	movs	r2, #6
 800941c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009420:	e0e8      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	795b      	ldrb	r3, [r3, #5]
 8009426:	4619      	mov	r1, r3
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f004 fd43 	bl	800deb4 <USBH_LL_GetURBState>
 800942e:	4603      	mov	r3, r0
 8009430:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009432:	7d3b      	ldrb	r3, [r7, #20]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d130      	bne.n	800949a <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800943c:	693a      	ldr	r2, [r7, #16]
 800943e:	8912      	ldrh	r2, [r2, #8]
 8009440:	4293      	cmp	r3, r2
 8009442:	d910      	bls.n	8009466 <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	8912      	ldrh	r2, [r2, #8]
 800944e:	441a      	add	r2, r3
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	8912      	ldrh	r2, [r2, #8]
 800945e:	1a9a      	subs	r2, r3, r2
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	65da      	str	r2, [r3, #92]	; 0x5c
 8009464:	e002      	b.n	800946c <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	2200      	movs	r2, #0
 800946a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00d      	beq.n	8009490 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	891a      	ldrh	r2, [r3, #8]
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	7958      	ldrb	r0, [r3, #5]
 8009482:	2301      	movs	r3, #1
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4603      	mov	r3, r0
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f001 fe60 	bl	800b14e <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800948e:	e0a8      	b.n	80095e2 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2207      	movs	r2, #7
 8009494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009498:	e0a3      	b.n	80095e2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 800949a:	7d3b      	ldrb	r3, [r7, #20]
 800949c:	2b02      	cmp	r3, #2
 800949e:	d104      	bne.n	80094aa <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2205      	movs	r2, #5
 80094a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094a8:	e09b      	b.n	80095e2 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 80094aa:	7d3b      	ldrb	r3, [r7, #20]
 80094ac:	2b05      	cmp	r3, #5
 80094ae:	f040 8098 	bne.w	80095e2 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	220a      	movs	r2, #10
 80094b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094ba:	e092      	b.n	80095e2 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	791b      	ldrb	r3, [r3, #4]
 80094c6:	220d      	movs	r2, #13
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 fe65 	bl	800b198 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	2208      	movs	r2, #8
 80094d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80094d6:	e08d      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	791b      	ldrb	r3, [r3, #4]
 80094dc:	4619      	mov	r1, r3
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f004 fce8 	bl	800deb4 <USBH_LL_GetURBState>
 80094e4:	4603      	mov	r3, r0
 80094e6:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 80094e8:	7d3b      	ldrb	r3, [r7, #20]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d115      	bne.n	800951a <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2201      	movs	r2, #1
 80094f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2201      	movs	r2, #1
 80094fa:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 f8aa 	bl	8009658 <USBH_MSC_DecodeCSW>
 8009504:	4603      	mov	r3, r0
 8009506:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009508:	7d7b      	ldrb	r3, [r7, #21]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d102      	bne.n	8009514 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009512:	e068      	b.n	80095e6 <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8009514:	2302      	movs	r3, #2
 8009516:	75fb      	strb	r3, [r7, #23]
      break;
 8009518:	e065      	b.n	80095e6 <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 800951a:	7d3b      	ldrb	r3, [r7, #20]
 800951c:	2b05      	cmp	r3, #5
 800951e:	d162      	bne.n	80095e6 <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2209      	movs	r2, #9
 8009524:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009528:	e05d      	b.n	80095e6 <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	2200      	movs	r2, #0
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f865 	bl	8009600 <USBH_MSC_BOT_Abort>
 8009536:	4603      	mov	r3, r0
 8009538:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800953a:	7dbb      	ldrb	r3, [r7, #22]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d104      	bne.n	800954a <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	2207      	movs	r2, #7
 8009544:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8009548:	e04f      	b.n	80095ea <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 800954a:	7dbb      	ldrb	r3, [r7, #22]
 800954c:	2b04      	cmp	r3, #4
 800954e:	d14c      	bne.n	80095ea <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	220b      	movs	r2, #11
 8009554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8009558:	e047      	b.n	80095ea <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800955a:	78fb      	ldrb	r3, [r7, #3]
 800955c:	2201      	movs	r2, #1
 800955e:	4619      	mov	r1, r3
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f84d 	bl	8009600 <USBH_MSC_BOT_Abort>
 8009566:	4603      	mov	r3, r0
 8009568:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800956a:	7dbb      	ldrb	r3, [r7, #22]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d11d      	bne.n	80095ac <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	795b      	ldrb	r3, [r3, #5]
 8009574:	4619      	mov	r1, r3
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f004 fcf9 	bl	800df6e <USBH_LL_GetToggle>
 800957c:	4603      	mov	r3, r0
 800957e:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	7959      	ldrb	r1, [r3, #5]
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	f1c3 0301 	rsb	r3, r3, #1
 800958a:	b2db      	uxtb	r3, r3
 800958c:	461a      	mov	r2, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f004 fcba 	bl	800df08 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	791b      	ldrb	r3, [r3, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f004 fcb3 	bl	800df08 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2209      	movs	r2, #9
 80095a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 80095aa:	e020      	b.n	80095ee <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 80095ac:	7dbb      	ldrb	r3, [r7, #22]
 80095ae:	2b04      	cmp	r3, #4
 80095b0:	d11d      	bne.n	80095ee <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	220b      	movs	r2, #11
 80095b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 80095ba:	e018      	b.n	80095ee <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fdf0 	bl	80091a2 <USBH_MSC_BOT_REQ_Reset>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d112      	bne.n	80095f2 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 80095d4:	e00d      	b.n	80095f2 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 80095d6:	bf00      	nop
 80095d8:	e00c      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095da:	bf00      	nop
 80095dc:	e00a      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095de:	bf00      	nop
 80095e0:	e008      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095e2:	bf00      	nop
 80095e4:	e006      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095e6:	bf00      	nop
 80095e8:	e004      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095ea:	bf00      	nop
 80095ec:	e002      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095ee:	bf00      	nop
 80095f0:	e000      	b.n	80095f4 <USBH_MSC_BOT_Process+0x398>
      break;
 80095f2:	bf00      	nop
  }
  return status;
 80095f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3718      	adds	r7, #24
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop

08009600 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	460b      	mov	r3, r1
 800960a:	70fb      	strb	r3, [r7, #3]
 800960c:	4613      	mov	r3, r2
 800960e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8009610:	2302      	movs	r3, #2
 8009612:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800961a:	69db      	ldr	r3, [r3, #28]
 800961c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800961e:	78bb      	ldrb	r3, [r7, #2]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d002      	beq.n	800962a <USBH_MSC_BOT_Abort+0x2a>
 8009624:	2b01      	cmp	r3, #1
 8009626:	d009      	beq.n	800963c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8009628:	e011      	b.n	800964e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	79db      	ldrb	r3, [r3, #7]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f001 f99c 	bl	800a96e <USBH_ClrFeature>
 8009636:	4603      	mov	r3, r0
 8009638:	73fb      	strb	r3, [r7, #15]
      break;
 800963a:	e008      	b.n	800964e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800963c:	68bb      	ldr	r3, [r7, #8]
 800963e:	799b      	ldrb	r3, [r3, #6]
 8009640:	4619      	mov	r1, r3
 8009642:	6878      	ldr	r0, [r7, #4]
 8009644:	f001 f993 	bl	800a96e <USBH_ClrFeature>
 8009648:	4603      	mov	r3, r0
 800964a:	73fb      	strb	r3, [r7, #15]
      break;
 800964c:	bf00      	nop
  }
  return status;
 800964e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3710      	adds	r7, #16
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b084      	sub	sp, #16
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800966a:	2301      	movs	r3, #1
 800966c:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	791b      	ldrb	r3, [r3, #4]
 8009672:	4619      	mov	r1, r3
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f004 fb8b 	bl	800dd90 <USBH_LL_GetLastXferSize>
 800967a:	4603      	mov	r3, r0
 800967c:	2b0d      	cmp	r3, #13
 800967e:	d002      	beq.n	8009686 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8009680:	2302      	movs	r3, #2
 8009682:	73fb      	strb	r3, [r7, #15]
 8009684:	e024      	b.n	80096d0 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800968a:	4a14      	ldr	r2, [pc, #80]	; (80096dc <USBH_MSC_DecodeCSW+0x84>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d11d      	bne.n	80096cc <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009698:	429a      	cmp	r2, r3
 800969a:	d119      	bne.n	80096d0 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d102      	bne.n	80096ac <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 80096a6:	2300      	movs	r3, #0
 80096a8:	73fb      	strb	r3, [r7, #15]
 80096aa:	e011      	b.n	80096d0 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d102      	bne.n	80096bc <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 80096b6:	2301      	movs	r3, #1
 80096b8:	73fb      	strb	r3, [r7, #15]
 80096ba:	e009      	b.n	80096d0 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80096c2:	2b02      	cmp	r3, #2
 80096c4:	d104      	bne.n	80096d0 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 80096c6:	2302      	movs	r3, #2
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	e001      	b.n	80096d0 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 80096cc:	2302      	movs	r3, #2
 80096ce:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 80096d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	53425355 	.word	0x53425355

080096e0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	460b      	mov	r3, r1
 80096ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80096ec:	2302      	movs	r3, #2
 80096ee:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096f6:	69db      	ldr	r3, [r3, #28]
 80096f8:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009700:	2b01      	cmp	r3, #1
 8009702:	d002      	beq.n	800970a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009704:	2b02      	cmp	r3, #2
 8009706:	d021      	beq.n	800974c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009708:	e028      	b.n	800975c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	2200      	movs	r2, #0
 800970e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	220a      	movs	r2, #10
 800971c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	3363      	adds	r3, #99	; 0x63
 8009724:	2210      	movs	r2, #16
 8009726:	2100      	movs	r1, #0
 8009728:	4618      	mov	r0, r3
 800972a:	f004 fcec 	bl	800e106 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	2201      	movs	r2, #1
 800973a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2202      	movs	r2, #2
 8009742:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8009746:	2301      	movs	r3, #1
 8009748:	73fb      	strb	r3, [r7, #15]
      break;
 800974a:	e007      	b.n	800975c <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800974c:	78fb      	ldrb	r3, [r7, #3]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fd83 	bl	800925c <USBH_MSC_BOT_Process>
 8009756:	4603      	mov	r3, r0
 8009758:	73fb      	strb	r3, [r7, #15]
      break;
 800975a:	bf00      	nop
  }

  return error;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b086      	sub	sp, #24
 800976a:	af00      	add	r7, sp, #0
 800976c:	60f8      	str	r0, [r7, #12]
 800976e:	460b      	mov	r3, r1
 8009770:	607a      	str	r2, [r7, #4]
 8009772:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009788:	2b01      	cmp	r3, #1
 800978a:	d002      	beq.n	8009792 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800978c:	2b02      	cmp	r3, #2
 800978e:	d027      	beq.n	80097e0 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8009790:	e05f      	b.n	8009852 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2208      	movs	r2, #8
 8009796:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	2280      	movs	r2, #128	; 0x80
 800979c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	220a      	movs	r2, #10
 80097a4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	3363      	adds	r3, #99	; 0x63
 80097ac:	2210      	movs	r2, #16
 80097ae:	2100      	movs	r1, #0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f004 fca8 	bl	800e106 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2225      	movs	r2, #37	; 0x25
 80097ba:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	2202      	movs	r2, #2
 80097ca:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	f103 0210 	add.w	r2, r3, #16
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80097da:	2301      	movs	r3, #1
 80097dc:	75fb      	strb	r3, [r7, #23]
      break;
 80097de:	e038      	b.n	8009852 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 80097e0:	7afb      	ldrb	r3, [r7, #11]
 80097e2:	4619      	mov	r1, r3
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f7ff fd39 	bl	800925c <USBH_MSC_BOT_Process>
 80097ea:	4603      	mov	r3, r0
 80097ec:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d12d      	bne.n	8009850 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097fa:	3303      	adds	r3, #3
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009806:	3302      	adds	r3, #2
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009814:	3301      	adds	r3, #1
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800981a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	061b      	lsls	r3, r3, #24
 8009826:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009832:	3307      	adds	r3, #7
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	b29a      	uxth	r2, r3
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800983e:	3306      	adds	r3, #6
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	b29b      	uxth	r3, r3
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	b29b      	uxth	r3, r3
 8009848:	4313      	orrs	r3, r2
 800984a:	b29a      	uxth	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	809a      	strh	r2, [r3, #4]
      break;
 8009850:	bf00      	nop
  }

  return error;
 8009852:	7dfb      	ldrb	r3, [r7, #23]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	460b      	mov	r3, r1
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800986a:	2302      	movs	r3, #2
 800986c:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800987e:	2b01      	cmp	r3, #1
 8009880:	d002      	beq.n	8009888 <USBH_MSC_SCSI_Inquiry+0x2c>
 8009882:	2b02      	cmp	r3, #2
 8009884:	d03d      	beq.n	8009902 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009886:	e089      	b.n	800999c <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	2224      	movs	r2, #36	; 0x24
 800988c:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	2280      	movs	r2, #128	; 0x80
 8009892:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	220a      	movs	r2, #10
 800989a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	3363      	adds	r3, #99	; 0x63
 80098a2:	220a      	movs	r2, #10
 80098a4:	2100      	movs	r1, #0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f004 fc2d 	bl	800e106 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2212      	movs	r2, #18
 80098b0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	015b      	lsls	r3, r3, #5
 80098b8:	b2da      	uxtb	r2, r3
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80098c8:	693b      	ldr	r3, [r7, #16]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	2224      	movs	r2, #36	; 0x24
 80098d4:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2201      	movs	r2, #1
 80098e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	f103 0210 	add.w	r2, r3, #16
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80098fc:	2301      	movs	r3, #1
 80098fe:	75fb      	strb	r3, [r7, #23]
      break;
 8009900:	e04c      	b.n	800999c <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	4619      	mov	r1, r3
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff fca8 	bl	800925c <USBH_MSC_BOT_Process>
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009910:	7dfb      	ldrb	r3, [r7, #23]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d141      	bne.n	800999a <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009916:	2222      	movs	r2, #34	; 0x22
 8009918:	2100      	movs	r1, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f004 fbf3 	bl	800e106 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	f003 031f 	and.w	r3, r3, #31
 800992c:	b2da      	uxtb	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009938:	781b      	ldrb	r3, [r3, #0]
 800993a:	095b      	lsrs	r3, r3, #5
 800993c:	b2da      	uxtb	r2, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009948:	3301      	adds	r3, #1
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	b25b      	sxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	da03      	bge.n	800995a <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	709a      	strb	r2, [r3, #2]
 8009958:	e002      	b.n	8009960 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2200      	movs	r2, #0
 800995e:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	1cd8      	adds	r0, r3, #3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800996a:	3308      	adds	r3, #8
 800996c:	2208      	movs	r2, #8
 800996e:	4619      	mov	r1, r3
 8009970:	f004 fbbe 	bl	800e0f0 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f103 000c 	add.w	r0, r3, #12
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009980:	3310      	adds	r3, #16
 8009982:	2210      	movs	r2, #16
 8009984:	4619      	mov	r1, r3
 8009986:	f004 fbb3 	bl	800e0f0 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	331d      	adds	r3, #29
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8009994:	3220      	adds	r2, #32
 8009996:	6812      	ldr	r2, [r2, #0]
 8009998:	601a      	str	r2, [r3, #0]
      break;
 800999a:	bf00      	nop
  }

  return error;
 800999c:	7dfb      	ldrb	r3, [r7, #23]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	460b      	mov	r3, r1
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80099b4:	2302      	movs	r3, #2
 80099b6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80099be:	69db      	ldr	r3, [r3, #28]
 80099c0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d002      	beq.n	80099d2 <USBH_MSC_SCSI_RequestSense+0x2c>
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d03d      	beq.n	8009a4c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 80099d0:	e05d      	b.n	8009a8e <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	220e      	movs	r2, #14
 80099d6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	2280      	movs	r2, #128	; 0x80
 80099dc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	220a      	movs	r2, #10
 80099e4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80099e8:	693b      	ldr	r3, [r7, #16]
 80099ea:	3363      	adds	r3, #99	; 0x63
 80099ec:	2210      	movs	r2, #16
 80099ee:	2100      	movs	r1, #0
 80099f0:	4618      	mov	r0, r3
 80099f2:	f004 fb88 	bl	800e106 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 80099f6:	693b      	ldr	r3, [r7, #16]
 80099f8:	2203      	movs	r2, #3
 80099fa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 80099fe:	7afb      	ldrb	r3, [r7, #11]
 8009a00:	015b      	lsls	r3, r3, #5
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	220e      	movs	r2, #14
 8009a1e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009a22:	693b      	ldr	r3, [r7, #16]
 8009a24:	2200      	movs	r2, #0
 8009a26:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	2202      	movs	r2, #2
 8009a36:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f103 0210 	add.w	r2, r3, #16
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009a46:	2301      	movs	r3, #1
 8009a48:	75fb      	strb	r3, [r7, #23]
      break;
 8009a4a:	e020      	b.n	8009a8e <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009a4c:	7afb      	ldrb	r3, [r7, #11]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f7ff fc03 	bl	800925c <USBH_MSC_BOT_Process>
 8009a56:	4603      	mov	r3, r0
 8009a58:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8009a5a:	7dfb      	ldrb	r3, [r7, #23]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d115      	bne.n	8009a8c <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a66:	3302      	adds	r3, #2
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	f003 030f 	and.w	r3, r3, #15
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a7a:	7b1a      	ldrb	r2, [r3, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a86:	7b5a      	ldrb	r2, [r3, #13]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	709a      	strb	r2, [r3, #2]
      break;
 8009a8c:	bf00      	nop
  }

  return error;
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b086      	sub	sp, #24
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	607a      	str	r2, [r7, #4]
 8009aa2:	603b      	str	r3, [r7, #0]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ab2:	69db      	ldr	r3, [r3, #28]
 8009ab4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d002      	beq.n	8009ac6 <USBH_MSC_SCSI_Write+0x2e>
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d047      	beq.n	8009b54 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009ac4:	e04e      	b.n	8009b64 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009acc:	461a      	mov	r2, r3
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	fb03 f202 	mul.w	r2, r3, r2
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	220a      	movs	r2, #10
 8009ae4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	3363      	adds	r3, #99	; 0x63
 8009aec:	2210      	movs	r2, #16
 8009aee:	2100      	movs	r1, #0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f004 fb08 	bl	800e106 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	222a      	movs	r2, #42	; 0x2a
 8009afa:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009afe:	79fa      	ldrb	r2, [r7, #7]
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009b06:	79ba      	ldrb	r2, [r7, #6]
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009b0e:	797a      	ldrb	r2, [r7, #5]
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009b16:	1d3b      	adds	r3, r7, #4
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009b20:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009b2a:	f107 0320 	add.w	r3, r7, #32
 8009b2e:	781a      	ldrb	r2, [r3, #0]
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009b3e:	693b      	ldr	r3, [r7, #16]
 8009b40:	2202      	movs	r2, #2
 8009b42:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	683a      	ldr	r2, [r7, #0]
 8009b4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	75fb      	strb	r3, [r7, #23]
      break;
 8009b52:	e007      	b.n	8009b64 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009b54:	7afb      	ldrb	r3, [r7, #11]
 8009b56:	4619      	mov	r1, r3
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fb7f 	bl	800925c <USBH_MSC_BOT_Process>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	75fb      	strb	r3, [r7, #23]
      break;
 8009b62:	bf00      	nop
  }

  return error;
 8009b64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3718      	adds	r7, #24
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}

08009b6e <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	607a      	str	r2, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009b7e:	2302      	movs	r3, #2
 8009b80:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b88:	69db      	ldr	r3, [r3, #28]
 8009b8a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d002      	beq.n	8009b9c <USBH_MSC_SCSI_Read+0x2e>
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d047      	beq.n	8009c2a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009b9a:	e04e      	b.n	8009c3a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	6a3b      	ldr	r3, [r7, #32]
 8009ba6:	fb03 f202 	mul.w	r2, r3, r2
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	2280      	movs	r2, #128	; 0x80
 8009bb2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	220a      	movs	r2, #10
 8009bba:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	3363      	adds	r3, #99	; 0x63
 8009bc2:	2210      	movs	r2, #16
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f004 fa9d 	bl	800e106 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2228      	movs	r2, #40	; 0x28
 8009bd0:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009bd4:	79fa      	ldrb	r2, [r7, #7]
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009bdc:	79ba      	ldrb	r2, [r7, #6]
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8009be4:	797a      	ldrb	r2, [r7, #5]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009bec:	1d3b      	adds	r3, r7, #4
 8009bee:	781a      	ldrb	r2, [r3, #0]
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8009bf6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009c00:	f107 0320 	add.w	r3, r7, #32
 8009c04:	781a      	ldrb	r2, [r3, #0]
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	683a      	ldr	r2, [r7, #0]
 8009c20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009c24:	2301      	movs	r3, #1
 8009c26:	75fb      	strb	r3, [r7, #23]
      break;
 8009c28:	e007      	b.n	8009c3a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8009c2a:	7afb      	ldrb	r3, [r7, #11]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f7ff fb14 	bl	800925c <USBH_MSC_BOT_Process>
 8009c34:	4603      	mov	r3, r0
 8009c36:	75fb      	strb	r3, [r7, #23]
      break;
 8009c38:	bf00      	nop
  }

  return error;
 8009c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	4613      	mov	r3, r2
 8009c50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009c58:	2302      	movs	r3, #2
 8009c5a:	e029      	b.n	8009cb0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	79fa      	ldrb	r2, [r7, #7]
 8009c60:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 f81f 	bl	8009cb8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	68ba      	ldr	r2, [r7, #8]
 8009ca4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f003 ffbf 	bl	800dc2c <USBH_LL_Init>

  return USBH_OK;
 8009cae:	2300      	movs	r3, #0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e009      	b.n	8009cde <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	33e0      	adds	r3, #224	; 0xe0
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	60fb      	str	r3, [r7, #12]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2b0e      	cmp	r3, #14
 8009ce2:	d9f2      	bls.n	8009cca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	e009      	b.n	8009cfe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d04:	d3f1      	bcc.n	8009cea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2240      	movs	r2, #64	; 0x40
 8009d2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3714      	adds	r7, #20
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d016      	beq.n	8009da2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d10e      	bne.n	8009d9c <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009d84:	1c59      	adds	r1, r3, #1
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	33de      	adds	r3, #222	; 0xde
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
 8009d9a:	e004      	b.n	8009da6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	73fb      	strb	r3, [r7, #15]
 8009da0:	e001      	b.n	8009da6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009da2:	2302      	movs	r3, #2
 8009da4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3714      	adds	r7, #20
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009dca:	78fa      	ldrb	r2, [r7, #3]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d204      	bcs.n	8009dda <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	78fa      	ldrb	r2, [r7, #3]
 8009dd4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009dd8:	e001      	b.n	8009dde <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009dda:	2302      	movs	r3, #2
 8009ddc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b087      	sub	sp, #28
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	4608      	mov	r0, r1
 8009df6:	4611      	mov	r1, r2
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	70fb      	strb	r3, [r7, #3]
 8009dfe:	460b      	mov	r3, r1
 8009e00:	70bb      	strb	r3, [r7, #2]
 8009e02:	4613      	mov	r3, r2
 8009e04:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e14:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e16:	e025      	b.n	8009e64 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	221a      	movs	r2, #26
 8009e1c:	fb02 f303 	mul.w	r3, r2, r3
 8009e20:	3308      	adds	r3, #8
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	4413      	add	r3, r2
 8009e26:	3302      	adds	r3, #2
 8009e28:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	795b      	ldrb	r3, [r3, #5]
 8009e2e:	78fa      	ldrb	r2, [r7, #3]
 8009e30:	429a      	cmp	r2, r3
 8009e32:	d002      	beq.n	8009e3a <USBH_FindInterface+0x4e>
 8009e34:	78fb      	ldrb	r3, [r7, #3]
 8009e36:	2bff      	cmp	r3, #255	; 0xff
 8009e38:	d111      	bne.n	8009e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009e3e:	78ba      	ldrb	r2, [r7, #2]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d002      	beq.n	8009e4a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e44:	78bb      	ldrb	r3, [r7, #2]
 8009e46:	2bff      	cmp	r3, #255	; 0xff
 8009e48:	d109      	bne.n	8009e5e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009e4e:	787a      	ldrb	r2, [r7, #1]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d002      	beq.n	8009e5a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009e54:	787b      	ldrb	r3, [r7, #1]
 8009e56:	2bff      	cmp	r3, #255	; 0xff
 8009e58:	d101      	bne.n	8009e5e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
 8009e5c:	e006      	b.n	8009e6c <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009e5e:	7dfb      	ldrb	r3, [r7, #23]
 8009e60:	3301      	adds	r3, #1
 8009e62:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009e64:	7dfb      	ldrb	r3, [r7, #23]
 8009e66:	2b01      	cmp	r3, #1
 8009e68:	d9d6      	bls.n	8009e18 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009e6a:	23ff      	movs	r3, #255	; 0xff
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	371c      	adds	r7, #28
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f003 ff0f 	bl	800dca4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009e86:	2101      	movs	r1, #1
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f004 f826 	bl	800deda <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009e8e:	2300      	movs	r3, #0
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af04      	add	r7, sp, #16
 8009e9e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d102      	bne.n	8009eba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2203      	movs	r2, #3
 8009eb8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	2b0b      	cmp	r3, #11
 8009ec2:	f200 81b3 	bhi.w	800a22c <USBH_Process+0x394>
 8009ec6:	a201      	add	r2, pc, #4	; (adr r2, 8009ecc <USBH_Process+0x34>)
 8009ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ecc:	08009efd 	.word	0x08009efd
 8009ed0:	08009f2f 	.word	0x08009f2f
 8009ed4:	08009f97 	.word	0x08009f97
 8009ed8:	0800a1c7 	.word	0x0800a1c7
 8009edc:	0800a22d 	.word	0x0800a22d
 8009ee0:	0800a03b 	.word	0x0800a03b
 8009ee4:	0800a16d 	.word	0x0800a16d
 8009ee8:	0800a071 	.word	0x0800a071
 8009eec:	0800a091 	.word	0x0800a091
 8009ef0:	0800a0b1 	.word	0x0800a0b1
 8009ef4:	0800a0df 	.word	0x0800a0df
 8009ef8:	0800a1af 	.word	0x0800a1af
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	f000 8193 	beq.w	800a230 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009f10:	20c8      	movs	r0, #200	; 0xc8
 8009f12:	f004 f85f 	bl	800dfd4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f003 ff1f 	bl	800dd5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f2c:	e180      	b.n	800a230 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d107      	bne.n	8009f48 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2202      	movs	r2, #2
 8009f44:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f46:	e182      	b.n	800a24e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f52:	d914      	bls.n	8009f7e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009f6a:	2b03      	cmp	r3, #3
 8009f6c:	d903      	bls.n	8009f76 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	220d      	movs	r2, #13
 8009f72:	701a      	strb	r2, [r3, #0]
      break;
 8009f74:	e16b      	b.n	800a24e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	701a      	strb	r2, [r3, #0]
      break;
 8009f7c:	e167      	b.n	800a24e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009f84:	f103 020a 	add.w	r2, r3, #10
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009f8e:	200a      	movs	r0, #10
 8009f90:	f004 f820 	bl	800dfd4 <USBH_Delay>
      break;
 8009f94:	e15b      	b.n	800a24e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d005      	beq.n	8009fac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009fa6:	2104      	movs	r1, #4
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009fac:	2064      	movs	r0, #100	; 0x64
 8009fae:	f004 f811 	bl	800dfd4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	f003 feac 	bl	800dd10 <USBH_LL_GetSpeed>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	461a      	mov	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2205      	movs	r2, #5
 8009fc6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009fc8:	2100      	movs	r1, #0
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f001 f931 	bl	800b232 <USBH_AllocPipe>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009fd8:	2180      	movs	r1, #128	; 0x80
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f001 f929 	bl	800b232 <USBH_AllocPipe>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	461a      	mov	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	7919      	ldrb	r1, [r3, #4]
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009ff8:	687a      	ldr	r2, [r7, #4]
 8009ffa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ffc:	b292      	uxth	r2, r2
 8009ffe:	9202      	str	r2, [sp, #8]
 800a000:	2200      	movs	r2, #0
 800a002:	9201      	str	r2, [sp, #4]
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	4603      	mov	r3, r0
 800a008:	2280      	movs	r2, #128	; 0x80
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 f8e2 	bl	800b1d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7959      	ldrb	r1, [r3, #5]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a020:	687a      	ldr	r2, [r7, #4]
 800a022:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a024:	b292      	uxth	r2, r2
 800a026:	9202      	str	r2, [sp, #8]
 800a028:	2200      	movs	r2, #0
 800a02a:	9201      	str	r2, [sp, #4]
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	4603      	mov	r3, r0
 800a030:	2200      	movs	r2, #0
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f001 f8ce 	bl	800b1d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a038:	e109      	b.n	800a24e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f90c 	bl	800a258 <USBH_HandleEnum>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f040 80f3 	bne.w	800a234 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a05c:	2b01      	cmp	r3, #1
 800a05e:	d103      	bne.n	800a068 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2208      	movs	r2, #8
 800a064:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a066:	e0e5      	b.n	800a234 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2207      	movs	r2, #7
 800a06c:	701a      	strb	r2, [r3, #0]
      break;
 800a06e:	e0e1      	b.n	800a234 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a076:	2b00      	cmp	r3, #0
 800a078:	f000 80de 	beq.w	800a238 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a082:	2101      	movs	r1, #1
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2208      	movs	r2, #8
 800a08c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800a08e:	e0d3      	b.n	800a238 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a096:	b29b      	uxth	r3, r3
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fc20 	bl	800a8e0 <USBH_SetCfg>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	f040 80ca 	bne.w	800a23c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2209      	movs	r2, #9
 800a0ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0ae:	e0c5      	b.n	800a23c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a0b6:	f003 0320 	and.w	r3, r3, #32
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00b      	beq.n	800a0d6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800a0be:	2101      	movs	r1, #1
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fc30 	bl	800a926 <USBH_SetFeature>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	f040 80b9 	bne.w	800a240 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	220a      	movs	r2, #10
 800a0d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a0d4:	e0b4      	b.n	800a240 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	220a      	movs	r2, #10
 800a0da:	701a      	strb	r2, [r3, #0]
      break;
 800a0dc:	e0b0      	b.n	800a240 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	f000 80ad 	beq.w	800a244 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	73fb      	strb	r3, [r7, #15]
 800a0f6:	e016      	b.n	800a126 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a0f8:	7bfa      	ldrb	r2, [r7, #15]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	32de      	adds	r2, #222	; 0xde
 800a0fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a102:	791a      	ldrb	r2, [r3, #4]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d108      	bne.n	800a120 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a10e:	7bfa      	ldrb	r2, [r7, #15]
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	32de      	adds	r2, #222	; 0xde
 800a114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a11e:	e005      	b.n	800a12c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a120:	7bfb      	ldrb	r3, [r7, #15]
 800a122:	3301      	adds	r3, #1
 800a124:	73fb      	strb	r3, [r7, #15]
 800a126:	7bfb      	ldrb	r3, [r7, #15]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0e5      	beq.n	800a0f8 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d016      	beq.n	800a164 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	4798      	blx	r3
 800a142:	4603      	mov	r3, r0
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2206      	movs	r2, #6
 800a14c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a154:	2103      	movs	r1, #3
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a15a:	e073      	b.n	800a244 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	220d      	movs	r2, #13
 800a160:	701a      	strb	r2, [r3, #0]
      break;
 800a162:	e06f      	b.n	800a244 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	220d      	movs	r2, #13
 800a168:	701a      	strb	r2, [r3, #0]
      break;
 800a16a:	e06b      	b.n	800a244 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a172:	2b00      	cmp	r3, #0
 800a174:	d017      	beq.n	800a1a6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
 800a182:	4603      	mov	r3, r0
 800a184:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d103      	bne.n	800a196 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	220b      	movs	r2, #11
 800a192:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a194:	e058      	b.n	800a248 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	2b02      	cmp	r3, #2
 800a19c:	d154      	bne.n	800a248 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	220d      	movs	r2, #13
 800a1a2:	701a      	strb	r2, [r3, #0]
      break;
 800a1a4:	e050      	b.n	800a248 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	220d      	movs	r2, #13
 800a1aa:	701a      	strb	r2, [r3, #0]
      break;
 800a1ac:	e04c      	b.n	800a248 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d049      	beq.n	800a24c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1be:	695b      	ldr	r3, [r3, #20]
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	4798      	blx	r3
      }
      break;
 800a1c4:	e042      	b.n	800a24c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff fd72 	bl	8009cb8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d009      	beq.n	800a1f2 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d005      	beq.n	800a208 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a202:	2105      	movs	r1, #5
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a20e:	b2db      	uxtb	r3, r3
 800a210:	2b01      	cmp	r3, #1
 800a212:	d107      	bne.n	800a224 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2200      	movs	r2, #0
 800a218:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f7ff fe2b 	bl	8009e78 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a222:	e014      	b.n	800a24e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f003 fd3d 	bl	800dca4 <USBH_LL_Start>
      break;
 800a22a:	e010      	b.n	800a24e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a22c:	bf00      	nop
 800a22e:	e00e      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a230:	bf00      	nop
 800a232:	e00c      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a234:	bf00      	nop
 800a236:	e00a      	b.n	800a24e <USBH_Process+0x3b6>
    break;
 800a238:	bf00      	nop
 800a23a:	e008      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a23c:	bf00      	nop
 800a23e:	e006      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a240:	bf00      	nop
 800a242:	e004      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a244:	bf00      	nop
 800a246:	e002      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a248:	bf00      	nop
 800a24a:	e000      	b.n	800a24e <USBH_Process+0x3b6>
      break;
 800a24c:	bf00      	nop
  }
  return USBH_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3710      	adds	r7, #16
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}

0800a258 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b088      	sub	sp, #32
 800a25c:	af04      	add	r7, sp, #16
 800a25e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a260:	2301      	movs	r3, #1
 800a262:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a264:	2301      	movs	r3, #1
 800a266:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	785b      	ldrb	r3, [r3, #1]
 800a26c:	2b07      	cmp	r3, #7
 800a26e:	f200 81c1 	bhi.w	800a5f4 <USBH_HandleEnum+0x39c>
 800a272:	a201      	add	r2, pc, #4	; (adr r2, 800a278 <USBH_HandleEnum+0x20>)
 800a274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a278:	0800a299 	.word	0x0800a299
 800a27c:	0800a357 	.word	0x0800a357
 800a280:	0800a3c1 	.word	0x0800a3c1
 800a284:	0800a44f 	.word	0x0800a44f
 800a288:	0800a4b9 	.word	0x0800a4b9
 800a28c:	0800a529 	.word	0x0800a529
 800a290:	0800a56f 	.word	0x0800a56f
 800a294:	0800a5b5 	.word	0x0800a5b5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a298:	2108      	movs	r1, #8
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 fa50 	bl	800a740 <USBH_Get_DevDesc>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2a4:	7bbb      	ldrb	r3, [r7, #14]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d130      	bne.n	800a30c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	7919      	ldrb	r1, [r3, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a2ce:	b292      	uxth	r2, r2
 800a2d0:	9202      	str	r2, [sp, #8]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	9201      	str	r2, [sp, #4]
 800a2d6:	9300      	str	r3, [sp, #0]
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2280      	movs	r2, #128	; 0x80
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 ff79 	bl	800b1d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	7959      	ldrb	r1, [r3, #5]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a2f6:	b292      	uxth	r2, r2
 800a2f8:	9202      	str	r2, [sp, #8]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	9201      	str	r2, [sp, #4]
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	4603      	mov	r3, r0
 800a302:	2200      	movs	r2, #0
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 ff65 	bl	800b1d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a30a:	e175      	b.n	800a5f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a30c:	7bbb      	ldrb	r3, [r7, #14]
 800a30e:	2b03      	cmp	r3, #3
 800a310:	f040 8172 	bne.w	800a5f8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a31a:	3301      	adds	r3, #1
 800a31c:	b2da      	uxtb	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d903      	bls.n	800a336 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	220d      	movs	r2, #13
 800a332:	701a      	strb	r2, [r3, #0]
      break;
 800a334:	e160      	b.n	800a5f8 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	795b      	ldrb	r3, [r3, #5]
 800a33a:	4619      	mov	r1, r3
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	f000 ff99 	bl	800b274 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	791b      	ldrb	r3, [r3, #4]
 800a346:	4619      	mov	r1, r3
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f000 ff93 	bl	800b274 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
      break;
 800a354:	e150      	b.n	800a5f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a356:	2112      	movs	r1, #18
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f000 f9f1 	bl	800a740 <USBH_Get_DevDesc>
 800a35e:	4603      	mov	r3, r0
 800a360:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d103      	bne.n	800a370 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2202      	movs	r2, #2
 800a36c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a36e:	e145      	b.n	800a5fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a370:	7bbb      	ldrb	r3, [r7, #14]
 800a372:	2b03      	cmp	r3, #3
 800a374:	f040 8142 	bne.w	800a5fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a37e:	3301      	adds	r3, #1
 800a380:	b2da      	uxtb	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a38e:	2b03      	cmp	r3, #3
 800a390:	d903      	bls.n	800a39a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	220d      	movs	r2, #13
 800a396:	701a      	strb	r2, [r3, #0]
      break;
 800a398:	e130      	b.n	800a5fc <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	795b      	ldrb	r3, [r3, #5]
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 ff67 	bl	800b274 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	791b      	ldrb	r3, [r3, #4]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 ff61 	bl	800b274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	701a      	strb	r2, [r3, #0]
      break;
 800a3be:	e11d      	b.n	800a5fc <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a3c0:	2101      	movs	r1, #1
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fa68 	bl	800a898 <USBH_SetAddress>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3cc:	7bbb      	ldrb	r3, [r7, #14]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d132      	bne.n	800a438 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a3d2:	2002      	movs	r0, #2
 800a3d4:	f003 fdfe 	bl	800dfd4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2203      	movs	r2, #3
 800a3e4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	7919      	ldrb	r1, [r3, #4]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a3fa:	b292      	uxth	r2, r2
 800a3fc:	9202      	str	r2, [sp, #8]
 800a3fe:	2200      	movs	r2, #0
 800a400:	9201      	str	r2, [sp, #4]
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4603      	mov	r3, r0
 800a406:	2280      	movs	r2, #128	; 0x80
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f000 fee3 	bl	800b1d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	7959      	ldrb	r1, [r3, #5]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a422:	b292      	uxth	r2, r2
 800a424:	9202      	str	r2, [sp, #8]
 800a426:	2200      	movs	r2, #0
 800a428:	9201      	str	r2, [sp, #4]
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	4603      	mov	r3, r0
 800a42e:	2200      	movs	r2, #0
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fecf 	bl	800b1d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a436:	e0e3      	b.n	800a600 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a438:	7bbb      	ldrb	r3, [r7, #14]
 800a43a:	2b03      	cmp	r3, #3
 800a43c:	f040 80e0 	bne.w	800a600 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	220d      	movs	r2, #13
 800a444:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	705a      	strb	r2, [r3, #1]
      break;
 800a44c:	e0d8      	b.n	800a600 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a44e:	2109      	movs	r1, #9
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f99d 	bl	800a790 <USBH_Get_CfgDesc>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d103      	bne.n	800a468 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2204      	movs	r2, #4
 800a464:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a466:	e0cd      	b.n	800a604 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	f040 80ca 	bne.w	800a604 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a476:	3301      	adds	r3, #1
 800a478:	b2da      	uxtb	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a486:	2b03      	cmp	r3, #3
 800a488:	d903      	bls.n	800a492 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	220d      	movs	r2, #13
 800a48e:	701a      	strb	r2, [r3, #0]
      break;
 800a490:	e0b8      	b.n	800a604 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	795b      	ldrb	r3, [r3, #5]
 800a496:	4619      	mov	r1, r3
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 feeb 	bl	800b274 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	791b      	ldrb	r3, [r3, #4]
 800a4a2:	4619      	mov	r1, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 fee5 	bl	800b274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	701a      	strb	r2, [r3, #0]
      break;
 800a4b6:	e0a5      	b.n	800a604 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a4be:	4619      	mov	r1, r3
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f000 f965 	bl	800a790 <USBH_Get_CfgDesc>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a4ca:	7bbb      	ldrb	r3, [r7, #14]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d103      	bne.n	800a4d8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2205      	movs	r2, #5
 800a4d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a4d6:	e097      	b.n	800a608 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4d8:	7bbb      	ldrb	r3, [r7, #14]
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	f040 8094 	bne.w	800a608 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4e6:	3301      	adds	r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a4f6:	2b03      	cmp	r3, #3
 800a4f8:	d903      	bls.n	800a502 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	220d      	movs	r2, #13
 800a4fe:	701a      	strb	r2, [r3, #0]
      break;
 800a500:	e082      	b.n	800a608 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	795b      	ldrb	r3, [r3, #5]
 800a506:	4619      	mov	r1, r3
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 feb3 	bl	800b274 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	791b      	ldrb	r3, [r3, #4]
 800a512:	4619      	mov	r1, r3
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fead 	bl	800b274 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
      break;
 800a526:	e06f      	b.n	800a608 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d019      	beq.n	800a566 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a53e:	23ff      	movs	r3, #255	; 0xff
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 f949 	bl	800a7d8 <USBH_Get_StringDesc>
 800a546:	4603      	mov	r3, r0
 800a548:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a54a:	7bbb      	ldrb	r3, [r7, #14]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d103      	bne.n	800a558 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2206      	movs	r2, #6
 800a554:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a556:	e059      	b.n	800a60c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a558:	7bbb      	ldrb	r3, [r7, #14]
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d156      	bne.n	800a60c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2206      	movs	r2, #6
 800a562:	705a      	strb	r2, [r3, #1]
      break;
 800a564:	e052      	b.n	800a60c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2206      	movs	r2, #6
 800a56a:	705a      	strb	r2, [r3, #1]
      break;
 800a56c:	e04e      	b.n	800a60c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a574:	2b00      	cmp	r3, #0
 800a576:	d019      	beq.n	800a5ac <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a584:	23ff      	movs	r3, #255	; 0xff
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 f926 	bl	800a7d8 <USBH_Get_StringDesc>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a590:	7bbb      	ldrb	r3, [r7, #14]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d103      	bne.n	800a59e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2207      	movs	r2, #7
 800a59a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a59c:	e038      	b.n	800a610 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a59e:	7bbb      	ldrb	r3, [r7, #14]
 800a5a0:	2b03      	cmp	r3, #3
 800a5a2:	d135      	bne.n	800a610 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2207      	movs	r2, #7
 800a5a8:	705a      	strb	r2, [r3, #1]
      break;
 800a5aa:	e031      	b.n	800a610 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2207      	movs	r2, #7
 800a5b0:	705a      	strb	r2, [r3, #1]
      break;
 800a5b2:	e02d      	b.n	800a610 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d017      	beq.n	800a5ee <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a5ca:	23ff      	movs	r3, #255	; 0xff
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 f903 	bl	800a7d8 <USBH_Get_StringDesc>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a5d6:	7bbb      	ldrb	r3, [r7, #14]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d102      	bne.n	800a5e2 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a5e0:	e018      	b.n	800a614 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a5e2:	7bbb      	ldrb	r3, [r7, #14]
 800a5e4:	2b03      	cmp	r3, #3
 800a5e6:	d115      	bne.n	800a614 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ec:	e012      	b.n	800a614 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f2:	e00f      	b.n	800a614 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a5f4:	bf00      	nop
 800a5f6:	e00e      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a5f8:	bf00      	nop
 800a5fa:	e00c      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a5fc:	bf00      	nop
 800a5fe:	e00a      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a600:	bf00      	nop
 800a602:	e008      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a604:	bf00      	nop
 800a606:	e006      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a608:	bf00      	nop
 800a60a:	e004      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a60c:	bf00      	nop
 800a60e:	e002      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a610:	bf00      	nop
 800a612:	e000      	b.n	800a616 <USBH_HandleEnum+0x3be>
      break;
 800a614:	bf00      	nop
  }
  return Status;
 800a616:	7bfb      	ldrb	r3, [r7, #15]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	683a      	ldr	r2, [r7, #0]
 800a62e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a632:	bf00      	nop
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b082      	sub	sp, #8
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 f804 	bl	800a662 <USBH_HandleSof>
}
 800a65a:	bf00      	nop
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b082      	sub	sp, #8
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	b2db      	uxtb	r3, r3
 800a670:	2b0b      	cmp	r3, #11
 800a672:	d10a      	bne.n	800a68a <USBH_HandleSof+0x28>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	4798      	blx	r3
  }
}
 800a68a:	bf00      	nop
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a692:	b480      	push	{r7}
 800a694:	b083      	sub	sp, #12
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	2201      	movs	r2, #1
 800a69e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a6a2:	bf00      	nop
}
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a6be:	bf00      	nop
}
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f003 fade 	bl	800dcda <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	791b      	ldrb	r3, [r3, #4]
 800a722:	4619      	mov	r1, r3
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f000 fda5 	bl	800b274 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	795b      	ldrb	r3, [r3, #5]
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 fd9f 	bl	800b274 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af02      	add	r7, sp, #8
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a752:	78fb      	ldrb	r3, [r7, #3]
 800a754:	b29b      	uxth	r3, r3
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	4613      	mov	r3, r2
 800a75a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a75e:	2100      	movs	r1, #0
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f864 	bl	800a82e <USBH_GetDescriptor>
 800a766:	4603      	mov	r3, r0
 800a768:	73fb      	strb	r3, [r7, #15]
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10a      	bne.n	800a786 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a77c:	78fa      	ldrb	r2, [r7, #3]
 800a77e:	b292      	uxth	r2, r2
 800a780:	4619      	mov	r1, r3
 800a782:	f000 f918 	bl	800a9b6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a786:	7bfb      	ldrb	r3, [r7, #15]
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3710      	adds	r7, #16
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}

0800a790 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	460b      	mov	r3, r1
 800a79a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	331c      	adds	r3, #28
 800a7a0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a7a2:	887b      	ldrh	r3, [r7, #2]
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7ac:	2100      	movs	r1, #0
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f83d 	bl	800a82e <USBH_GetDescriptor>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	72fb      	strb	r3, [r7, #11]
 800a7b8:	7afb      	ldrb	r3, [r7, #11]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d107      	bne.n	800a7ce <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a7c4:	887a      	ldrh	r2, [r7, #2]
 800a7c6:	68f9      	ldr	r1, [r7, #12]
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f000 f964 	bl	800aa96 <USBH_ParseCfgDesc>
  }

  return status;
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
}
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	3710      	adds	r7, #16
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}

0800a7d8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b088      	sub	sp, #32
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	607a      	str	r2, [r7, #4]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	72fb      	strb	r3, [r7, #11]
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a7ec:	7afb      	ldrb	r3, [r7, #11]
 800a7ee:	b29b      	uxth	r3, r3
 800a7f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a7f4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a7fc:	893b      	ldrh	r3, [r7, #8]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	460b      	mov	r3, r1
 800a802:	2100      	movs	r1, #0
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f812 	bl	800a82e <USBH_GetDescriptor>
 800a80a:	4603      	mov	r3, r0
 800a80c:	75fb      	strb	r3, [r7, #23]
 800a80e:	7dfb      	ldrb	r3, [r7, #23]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d107      	bne.n	800a824 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a81a:	893a      	ldrh	r2, [r7, #8]
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fa37 	bl	800ac92 <USBH_ParseStringDesc>
  }

  return status;
 800a824:	7dfb      	ldrb	r3, [r7, #23]
}
 800a826:	4618      	mov	r0, r3
 800a828:	3718      	adds	r7, #24
 800a82a:	46bd      	mov	sp, r7
 800a82c:	bd80      	pop	{r7, pc}

0800a82e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a82e:	b580      	push	{r7, lr}
 800a830:	b084      	sub	sp, #16
 800a832:	af00      	add	r7, sp, #0
 800a834:	60f8      	str	r0, [r7, #12]
 800a836:	607b      	str	r3, [r7, #4]
 800a838:	460b      	mov	r3, r1
 800a83a:	72fb      	strb	r3, [r7, #11]
 800a83c:	4613      	mov	r3, r2
 800a83e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	789b      	ldrb	r3, [r3, #2]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d11c      	bne.n	800a882 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a848:	7afb      	ldrb	r3, [r7, #11]
 800a84a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2206      	movs	r2, #6
 800a858:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	893a      	ldrh	r2, [r7, #8]
 800a85e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a860:	893b      	ldrh	r3, [r7, #8]
 800a862:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a86a:	d104      	bne.n	800a876 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f240 4209 	movw	r2, #1033	; 0x409
 800a872:	829a      	strh	r2, [r3, #20]
 800a874:	e002      	b.n	800a87c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	8b3a      	ldrh	r2, [r7, #24]
 800a880:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a882:	8b3b      	ldrh	r3, [r7, #24]
 800a884:	461a      	mov	r2, r3
 800a886:	6879      	ldr	r1, [r7, #4]
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 fa50 	bl	800ad2e <USBH_CtlReq>
 800a88e:	4603      	mov	r3, r0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	789b      	ldrb	r3, [r3, #2]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d10f      	bne.n	800a8cc <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2205      	movs	r2, #5
 800a8b6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a8b8:	78fb      	ldrb	r3, [r7, #3]
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	2100      	movs	r1, #0
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fa2c 	bl	800ad2e <USBH_CtlReq>
 800a8d6:	4603      	mov	r3, r0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	789b      	ldrb	r3, [r3, #2]
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d10e      	bne.n	800a912 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2209      	movs	r2, #9
 800a8fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	887a      	ldrh	r2, [r7, #2]
 800a904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a912:	2200      	movs	r2, #0
 800a914:	2100      	movs	r1, #0
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fa09 	bl	800ad2e <USBH_CtlReq>
 800a91c:	4603      	mov	r3, r0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b082      	sub	sp, #8
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	789b      	ldrb	r3, [r3, #2]
 800a936:	2b01      	cmp	r3, #1
 800a938:	d10f      	bne.n	800a95a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2200      	movs	r2, #0
 800a93e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2203      	movs	r2, #3
 800a944:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a946:	78fb      	ldrb	r3, [r7, #3]
 800a948:	b29a      	uxth	r2, r3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2200      	movs	r2, #0
 800a952:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a95a:	2200      	movs	r2, #0
 800a95c:	2100      	movs	r1, #0
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 f9e5 	bl	800ad2e <USBH_CtlReq>
 800a964:	4603      	mov	r3, r0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b082      	sub	sp, #8
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	460b      	mov	r3, r1
 800a978:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	789b      	ldrb	r3, [r3, #2]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d10f      	bne.n	800a9a2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2202      	movs	r2, #2
 800a986:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a994:	78fb      	ldrb	r3, [r7, #3]
 800a996:	b29a      	uxth	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	2100      	movs	r1, #0
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f000 f9c1 	bl	800ad2e <USBH_CtlReq>
 800a9ac:	4603      	mov	r3, r0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3708      	adds	r7, #8
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	b085      	sub	sp, #20
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	60f8      	str	r0, [r7, #12]
 800a9be:	60b9      	str	r1, [r7, #8]
 800a9c0:	4613      	mov	r3, r2
 800a9c2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	781a      	ldrb	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	785a      	ldrb	r2, [r3, #1]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	3302      	adds	r3, #2
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	3303      	adds	r3, #3
 800a9e0:	781b      	ldrb	r3, [r3, #0]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	021b      	lsls	r3, r3, #8
 800a9e6:	b29b      	uxth	r3, r3
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	b29a      	uxth	r2, r3
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	791a      	ldrb	r2, [r3, #4]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	795a      	ldrb	r2, [r3, #5]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	799a      	ldrb	r2, [r3, #6]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	79da      	ldrb	r2, [r3, #7]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	2b08      	cmp	r3, #8
 800aa14:	d939      	bls.n	800aa8a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	3308      	adds	r3, #8
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b29a      	uxth	r2, r3
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	3309      	adds	r3, #9
 800aa22:	781b      	ldrb	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	b29a      	uxth	r2, r3
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	330a      	adds	r3, #10
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	330b      	adds	r3, #11
 800aa3e:	781b      	ldrb	r3, [r3, #0]
 800aa40:	b29b      	uxth	r3, r3
 800aa42:	021b      	lsls	r3, r3, #8
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	4313      	orrs	r3, r2
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	330c      	adds	r3, #12
 800aa52:	781b      	ldrb	r3, [r3, #0]
 800aa54:	b29a      	uxth	r2, r3
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	330d      	adds	r3, #13
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	021b      	lsls	r3, r3, #8
 800aa60:	b29b      	uxth	r3, r3
 800aa62:	4313      	orrs	r3, r2
 800aa64:	b29a      	uxth	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	7b9a      	ldrb	r2, [r3, #14]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	7bda      	ldrb	r2, [r3, #15]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	7c1a      	ldrb	r2, [r3, #16]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	7c5a      	ldrb	r2, [r3, #17]
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	745a      	strb	r2, [r3, #17]
  }
}
 800aa8a:	bf00      	nop
 800aa8c:	3714      	adds	r7, #20
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b08a      	sub	sp, #40	; 0x28
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	60f8      	str	r0, [r7, #12]
 800aa9e:	60b9      	str	r1, [r7, #8]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800aaae:	2300      	movs	r3, #0
 800aab0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	781a      	ldrb	r2, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	785a      	ldrb	r2, [r3, #1]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	3302      	adds	r3, #2
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	b29a      	uxth	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	3303      	adds	r3, #3
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	021b      	lsls	r3, r3, #8
 800aada:	b29b      	uxth	r3, r3
 800aadc:	4313      	orrs	r3, r2
 800aade:	b29a      	uxth	r2, r3
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	791a      	ldrb	r2, [r3, #4]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	795a      	ldrb	r2, [r3, #5]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	799a      	ldrb	r2, [r3, #6]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	79da      	ldrb	r2, [r3, #7]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	7a1a      	ldrb	r2, [r3, #8]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800ab0c:	88fb      	ldrh	r3, [r7, #6]
 800ab0e:	2b09      	cmp	r3, #9
 800ab10:	d95f      	bls.n	800abd2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800ab12:	2309      	movs	r3, #9
 800ab14:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ab1a:	e051      	b.n	800abc0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab1c:	f107 0316 	add.w	r3, r7, #22
 800ab20:	4619      	mov	r1, r3
 800ab22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab24:	f000 f8e8 	bl	800acf8 <USBH_GetNextDesc>
 800ab28:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	785b      	ldrb	r3, [r3, #1]
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d146      	bne.n	800abc0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800ab32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab36:	221a      	movs	r2, #26
 800ab38:	fb02 f303 	mul.w	r3, r2, r3
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	3302      	adds	r3, #2
 800ab44:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ab46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab48:	69f8      	ldr	r0, [r7, #28]
 800ab4a:	f000 f846 	bl	800abda <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ab4e:	2300      	movs	r3, #0
 800ab50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab58:	e022      	b.n	800aba0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab5a:	f107 0316 	add.w	r3, r7, #22
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab62:	f000 f8c9 	bl	800acf8 <USBH_GetNextDesc>
 800ab66:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	785b      	ldrb	r3, [r3, #1]
 800ab6c:	2b05      	cmp	r3, #5
 800ab6e:	d117      	bne.n	800aba0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800ab78:	3201      	adds	r2, #1
 800ab7a:	00d2      	lsls	r2, r2, #3
 800ab7c:	211a      	movs	r1, #26
 800ab7e:	fb01 f303 	mul.w	r3, r1, r3
 800ab82:	4413      	add	r3, r2
 800ab84:	3308      	adds	r3, #8
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800ab8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ab90:	69b8      	ldr	r0, [r7, #24]
 800ab92:	f000 f851 	bl	800ac38 <USBH_ParseEPDesc>
            ep_ix++;
 800ab96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aba0:	69fb      	ldr	r3, [r7, #28]
 800aba2:	791b      	ldrb	r3, [r3, #4]
 800aba4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aba8:	429a      	cmp	r2, r3
 800abaa:	d204      	bcs.n	800abb6 <USBH_ParseCfgDesc+0x120>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	885a      	ldrh	r2, [r3, #2]
 800abb0:	8afb      	ldrh	r3, [r7, #22]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d8d1      	bhi.n	800ab5a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800abb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abba:	3301      	adds	r3, #1
 800abbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800abc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d804      	bhi.n	800abd2 <USBH_ParseCfgDesc+0x13c>
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	885a      	ldrh	r2, [r3, #2]
 800abcc:	8afb      	ldrh	r3, [r7, #22]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d8a4      	bhi.n	800ab1c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800abd2:	bf00      	nop
 800abd4:	3728      	adds	r7, #40	; 0x28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800abda:	b480      	push	{r7}
 800abdc:	b083      	sub	sp, #12
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781a      	ldrb	r2, [r3, #0]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	785a      	ldrb	r2, [r3, #1]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	789a      	ldrb	r2, [r3, #2]
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	78da      	ldrb	r2, [r3, #3]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	791a      	ldrb	r2, [r3, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	795a      	ldrb	r2, [r3, #5]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	799a      	ldrb	r2, [r3, #6]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	79da      	ldrb	r2, [r3, #7]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	7a1a      	ldrb	r2, [r3, #8]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	721a      	strb	r2, [r3, #8]
}
 800ac2c:	bf00      	nop
 800ac2e:	370c      	adds	r7, #12
 800ac30:	46bd      	mov	sp, r7
 800ac32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac36:	4770      	bx	lr

0800ac38 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781a      	ldrb	r2, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	785a      	ldrb	r2, [r3, #1]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	789a      	ldrb	r2, [r3, #2]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	78da      	ldrb	r2, [r3, #3]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	3304      	adds	r3, #4
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	3305      	adds	r3, #5
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	021b      	lsls	r3, r3, #8
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	4313      	orrs	r3, r2
 800ac78:	b29a      	uxth	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	799a      	ldrb	r2, [r3, #6]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	719a      	strb	r2, [r3, #6]
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ac92:	b480      	push	{r7}
 800ac94:	b087      	sub	sp, #28
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	60b9      	str	r1, [r7, #8]
 800ac9c:	4613      	mov	r3, r2
 800ac9e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	3301      	adds	r3, #1
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	2b03      	cmp	r3, #3
 800aca8:	d120      	bne.n	800acec <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	1e9a      	subs	r2, r3, #2
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	4293      	cmp	r3, r2
 800acb4:	bf28      	it	cs
 800acb6:	4613      	movcs	r3, r2
 800acb8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	3302      	adds	r3, #2
 800acbe:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800acc0:	2300      	movs	r3, #0
 800acc2:	82fb      	strh	r3, [r7, #22]
 800acc4:	e00b      	b.n	800acde <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800acc6:	8afb      	ldrh	r3, [r7, #22]
 800acc8:	68fa      	ldr	r2, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	781a      	ldrb	r2, [r3, #0]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	3301      	adds	r3, #1
 800acd6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800acd8:	8afb      	ldrh	r3, [r7, #22]
 800acda:	3302      	adds	r3, #2
 800acdc:	82fb      	strh	r3, [r7, #22]
 800acde:	8afa      	ldrh	r2, [r7, #22]
 800ace0:	8abb      	ldrh	r3, [r7, #20]
 800ace2:	429a      	cmp	r2, r3
 800ace4:	d3ef      	bcc.n	800acc6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2200      	movs	r2, #0
 800acea:	701a      	strb	r2, [r3, #0]
  }
}
 800acec:	bf00      	nop
 800acee:	371c      	adds	r7, #28
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	881a      	ldrh	r2, [r3, #0]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	4413      	add	r3, r2
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b086      	sub	sp, #24
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	60f8      	str	r0, [r7, #12]
 800ad36:	60b9      	str	r1, [r7, #8]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	789b      	ldrb	r3, [r3, #2]
 800ad44:	2b01      	cmp	r3, #1
 800ad46:	d002      	beq.n	800ad4e <USBH_CtlReq+0x20>
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d00f      	beq.n	800ad6c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ad4c:	e027      	b.n	800ad9e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	68ba      	ldr	r2, [r7, #8]
 800ad52:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	88fa      	ldrh	r2, [r7, #6]
 800ad58:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2201      	movs	r2, #1
 800ad5e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2202      	movs	r2, #2
 800ad64:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ad66:	2301      	movs	r3, #1
 800ad68:	75fb      	strb	r3, [r7, #23]
      break;
 800ad6a:	e018      	b.n	800ad9e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ad6c:	68f8      	ldr	r0, [r7, #12]
 800ad6e:	f000 f81b 	bl	800ada8 <USBH_HandleControl>
 800ad72:	4603      	mov	r3, r0
 800ad74:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ad76:	7dfb      	ldrb	r3, [r7, #23]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d002      	beq.n	800ad82 <USBH_CtlReq+0x54>
 800ad7c:	7dfb      	ldrb	r3, [r7, #23]
 800ad7e:	2b03      	cmp	r3, #3
 800ad80:	d106      	bne.n	800ad90 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	761a      	strb	r2, [r3, #24]
      break;
 800ad8e:	e005      	b.n	800ad9c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ad90:	7dfb      	ldrb	r3, [r7, #23]
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d102      	bne.n	800ad9c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	709a      	strb	r2, [r3, #2]
      break;
 800ad9c:	bf00      	nop
  }
  return status;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3718      	adds	r7, #24
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b086      	sub	sp, #24
 800adac:	af02      	add	r7, sp, #8
 800adae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800adb0:	2301      	movs	r3, #1
 800adb2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800adb4:	2300      	movs	r3, #0
 800adb6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	7e1b      	ldrb	r3, [r3, #24]
 800adbc:	3b01      	subs	r3, #1
 800adbe:	2b0a      	cmp	r3, #10
 800adc0:	f200 8158 	bhi.w	800b074 <USBH_HandleControl+0x2cc>
 800adc4:	a201      	add	r2, pc, #4	; (adr r2, 800adcc <USBH_HandleControl+0x24>)
 800adc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adca:	bf00      	nop
 800adcc:	0800adf9 	.word	0x0800adf9
 800add0:	0800ae13 	.word	0x0800ae13
 800add4:	0800ae7d 	.word	0x0800ae7d
 800add8:	0800aea3 	.word	0x0800aea3
 800addc:	0800aedb 	.word	0x0800aedb
 800ade0:	0800af07 	.word	0x0800af07
 800ade4:	0800af59 	.word	0x0800af59
 800ade8:	0800af7b 	.word	0x0800af7b
 800adec:	0800afb7 	.word	0x0800afb7
 800adf0:	0800afdf 	.word	0x0800afdf
 800adf4:	0800b01d 	.word	0x0800b01d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f103 0110 	add.w	r1, r3, #16
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	795b      	ldrb	r3, [r3, #5]
 800ae02:	461a      	mov	r2, r3
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 f945 	bl	800b094 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	761a      	strb	r2, [r3, #24]
      break;
 800ae10:	e13b      	b.n	800b08a <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	795b      	ldrb	r3, [r3, #5]
 800ae16:	4619      	mov	r1, r3
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f003 f84b 	bl	800deb4 <USBH_LL_GetURBState>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d11e      	bne.n	800ae66 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	7c1b      	ldrb	r3, [r3, #16]
 800ae2c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae30:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	8adb      	ldrh	r3, [r3, #22]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00a      	beq.n	800ae50 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ae3a:	7b7b      	ldrb	r3, [r7, #13]
 800ae3c:	2b80      	cmp	r3, #128	; 0x80
 800ae3e:	d103      	bne.n	800ae48 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2203      	movs	r2, #3
 800ae44:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae46:	e117      	b.n	800b078 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2205      	movs	r2, #5
 800ae4c:	761a      	strb	r2, [r3, #24]
      break;
 800ae4e:	e113      	b.n	800b078 <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 800ae50:	7b7b      	ldrb	r3, [r7, #13]
 800ae52:	2b80      	cmp	r3, #128	; 0x80
 800ae54:	d103      	bne.n	800ae5e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2209      	movs	r2, #9
 800ae5a:	761a      	strb	r2, [r3, #24]
      break;
 800ae5c:	e10c      	b.n	800b078 <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2207      	movs	r2, #7
 800ae62:	761a      	strb	r2, [r3, #24]
      break;
 800ae64:	e108      	b.n	800b078 <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ae66:	7bbb      	ldrb	r3, [r7, #14]
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d003      	beq.n	800ae74 <USBH_HandleControl+0xcc>
 800ae6c:	7bbb      	ldrb	r3, [r7, #14]
 800ae6e:	2b02      	cmp	r3, #2
 800ae70:	f040 8102 	bne.w	800b078 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	220b      	movs	r2, #11
 800ae78:	761a      	strb	r2, [r3, #24]
      break;
 800ae7a:	e0fd      	b.n	800b078 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6899      	ldr	r1, [r3, #8]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	899a      	ldrh	r2, [r3, #12]
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	791b      	ldrb	r3, [r3, #4]
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f93c 	bl	800b112 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2204      	movs	r2, #4
 800ae9e:	761a      	strb	r2, [r3, #24]
      break;
 800aea0:	e0f3      	b.n	800b08a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	791b      	ldrb	r3, [r3, #4]
 800aea6:	4619      	mov	r1, r3
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f003 f803 	bl	800deb4 <USBH_LL_GetURBState>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800aeb2:	7bbb      	ldrb	r3, [r7, #14]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d102      	bne.n	800aebe <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2209      	movs	r2, #9
 800aebc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800aebe:	7bbb      	ldrb	r3, [r7, #14]
 800aec0:	2b05      	cmp	r3, #5
 800aec2:	d102      	bne.n	800aeca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aec4:	2303      	movs	r3, #3
 800aec6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aec8:	e0d8      	b.n	800b07c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aeca:	7bbb      	ldrb	r3, [r7, #14]
 800aecc:	2b04      	cmp	r3, #4
 800aece:	f040 80d5 	bne.w	800b07c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	220b      	movs	r2, #11
 800aed6:	761a      	strb	r2, [r3, #24]
      break;
 800aed8:	e0d0      	b.n	800b07c <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6899      	ldr	r1, [r3, #8]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	899a      	ldrh	r2, [r3, #12]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	7958      	ldrb	r0, [r3, #5]
 800aee6:	2301      	movs	r3, #1
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	4603      	mov	r3, r0
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f8eb 	bl	800b0c8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2206      	movs	r2, #6
 800af02:	761a      	strb	r2, [r3, #24]
      break;
 800af04:	e0c1      	b.n	800b08a <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	795b      	ldrb	r3, [r3, #5]
 800af0a:	4619      	mov	r1, r3
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f002 ffd1 	bl	800deb4 <USBH_LL_GetURBState>
 800af12:	4603      	mov	r3, r0
 800af14:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d103      	bne.n	800af24 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2207      	movs	r2, #7
 800af20:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af22:	e0ad      	b.n	800b080 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 800af24:	7bbb      	ldrb	r3, [r7, #14]
 800af26:	2b05      	cmp	r3, #5
 800af28:	d105      	bne.n	800af36 <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	220c      	movs	r2, #12
 800af2e:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800af30:	2303      	movs	r3, #3
 800af32:	73fb      	strb	r3, [r7, #15]
      break;
 800af34:	e0a4      	b.n	800b080 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af36:	7bbb      	ldrb	r3, [r7, #14]
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d103      	bne.n	800af44 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2205      	movs	r2, #5
 800af40:	761a      	strb	r2, [r3, #24]
      break;
 800af42:	e09d      	b.n	800b080 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 800af44:	7bbb      	ldrb	r3, [r7, #14]
 800af46:	2b04      	cmp	r3, #4
 800af48:	f040 809a 	bne.w	800b080 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	220b      	movs	r2, #11
 800af50:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800af52:	2302      	movs	r3, #2
 800af54:	73fb      	strb	r3, [r7, #15]
      break;
 800af56:	e093      	b.n	800b080 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	791b      	ldrb	r3, [r3, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	2100      	movs	r1, #0
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f000 f8d6 	bl	800b112 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2208      	movs	r2, #8
 800af76:	761a      	strb	r2, [r3, #24]

      break;
 800af78:	e087      	b.n	800b08a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	791b      	ldrb	r3, [r3, #4]
 800af7e:	4619      	mov	r1, r3
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f002 ff97 	bl	800deb4 <USBH_LL_GetURBState>
 800af86:	4603      	mov	r3, r0
 800af88:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d105      	bne.n	800af9c <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	220d      	movs	r2, #13
 800af94:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800af96:	2300      	movs	r3, #0
 800af98:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800af9a:	e073      	b.n	800b084 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 800af9c:	7bbb      	ldrb	r3, [r7, #14]
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	d103      	bne.n	800afaa <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	220b      	movs	r2, #11
 800afa6:	761a      	strb	r2, [r3, #24]
      break;
 800afa8:	e06c      	b.n	800b084 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 800afaa:	7bbb      	ldrb	r3, [r7, #14]
 800afac:	2b05      	cmp	r3, #5
 800afae:	d169      	bne.n	800b084 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 800afb0:	2303      	movs	r3, #3
 800afb2:	73fb      	strb	r3, [r7, #15]
      break;
 800afb4:	e066      	b.n	800b084 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	795a      	ldrb	r2, [r3, #5]
 800afba:	2301      	movs	r3, #1
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	4613      	mov	r3, r2
 800afc0:	2200      	movs	r2, #0
 800afc2:	2100      	movs	r1, #0
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f87f 	bl	800b0c8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800afd0:	b29a      	uxth	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	220a      	movs	r2, #10
 800afda:	761a      	strb	r2, [r3, #24]
      break;
 800afdc:	e055      	b.n	800b08a <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	795b      	ldrb	r3, [r3, #5]
 800afe2:	4619      	mov	r1, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f002 ff65 	bl	800deb4 <USBH_LL_GetURBState>
 800afea:	4603      	mov	r3, r0
 800afec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800afee:	7bbb      	ldrb	r3, [r7, #14]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d105      	bne.n	800b000 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	220d      	movs	r2, #13
 800affc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800affe:	e043      	b.n	800b088 <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b000:	7bbb      	ldrb	r3, [r7, #14]
 800b002:	2b02      	cmp	r3, #2
 800b004:	d103      	bne.n	800b00e <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2209      	movs	r2, #9
 800b00a:	761a      	strb	r2, [r3, #24]
      break;
 800b00c:	e03c      	b.n	800b088 <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 800b00e:	7bbb      	ldrb	r3, [r7, #14]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d139      	bne.n	800b088 <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	220b      	movs	r2, #11
 800b018:	761a      	strb	r2, [r3, #24]
      break;
 800b01a:	e035      	b.n	800b088 <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7e5b      	ldrb	r3, [r3, #25]
 800b020:	3301      	adds	r3, #1
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	765a      	strb	r2, [r3, #25]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	7e5b      	ldrb	r3, [r3, #25]
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d806      	bhi.n	800b03e <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b03c:	e025      	b.n	800b08a <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b044:	2106      	movs	r1, #6
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2200      	movs	r2, #0
 800b04e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	795b      	ldrb	r3, [r3, #5]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f90c 	bl	800b274 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	791b      	ldrb	r3, [r3, #4]
 800b060:	4619      	mov	r1, r3
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f906 	bl	800b274 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b06e:	2302      	movs	r3, #2
 800b070:	73fb      	strb	r3, [r7, #15]
      break;
 800b072:	e00a      	b.n	800b08a <USBH_HandleControl+0x2e2>

    default:
      break;
 800b074:	bf00      	nop
 800b076:	e008      	b.n	800b08a <USBH_HandleControl+0x2e2>
      break;
 800b078:	bf00      	nop
 800b07a:	e006      	b.n	800b08a <USBH_HandleControl+0x2e2>
      break;
 800b07c:	bf00      	nop
 800b07e:	e004      	b.n	800b08a <USBH_HandleControl+0x2e2>
      break;
 800b080:	bf00      	nop
 800b082:	e002      	b.n	800b08a <USBH_HandleControl+0x2e2>
      break;
 800b084:	bf00      	nop
 800b086:	e000      	b.n	800b08a <USBH_HandleControl+0x2e2>
      break;
 800b088:	bf00      	nop
  }

  return status;
 800b08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af04      	add	r7, sp, #16
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0a2:	79f9      	ldrb	r1, [r7, #7]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	2308      	movs	r3, #8
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f002 feca 	bl	800de52 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b088      	sub	sp, #32
 800b0cc:	af04      	add	r7, sp, #16
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	80fb      	strh	r3, [r7, #6]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0ec:	7979      	ldrb	r1, [r7, #5]
 800b0ee:	7e3b      	ldrb	r3, [r7, #24]
 800b0f0:	9303      	str	r3, [sp, #12]
 800b0f2:	88fb      	ldrh	r3, [r7, #6]
 800b0f4:	9302      	str	r3, [sp, #8]
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	9301      	str	r3, [sp, #4]
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	2300      	movs	r3, #0
 800b100:	2200      	movs	r2, #0
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f002 fea5 	bl	800de52 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b088      	sub	sp, #32
 800b116:	af04      	add	r7, sp, #16
 800b118:	60f8      	str	r0, [r7, #12]
 800b11a:	60b9      	str	r1, [r7, #8]
 800b11c:	4611      	mov	r1, r2
 800b11e:	461a      	mov	r2, r3
 800b120:	460b      	mov	r3, r1
 800b122:	80fb      	strh	r3, [r7, #6]
 800b124:	4613      	mov	r3, r2
 800b126:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b128:	7979      	ldrb	r1, [r7, #5]
 800b12a:	2300      	movs	r3, #0
 800b12c:	9303      	str	r3, [sp, #12]
 800b12e:	88fb      	ldrh	r3, [r7, #6]
 800b130:	9302      	str	r3, [sp, #8]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	9301      	str	r3, [sp, #4]
 800b136:	2301      	movs	r3, #1
 800b138:	9300      	str	r3, [sp, #0]
 800b13a:	2300      	movs	r3, #0
 800b13c:	2201      	movs	r2, #1
 800b13e:	68f8      	ldr	r0, [r7, #12]
 800b140:	f002 fe87 	bl	800de52 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b144:	2300      	movs	r3, #0

}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b088      	sub	sp, #32
 800b152:	af04      	add	r7, sp, #16
 800b154:	60f8      	str	r0, [r7, #12]
 800b156:	60b9      	str	r1, [r7, #8]
 800b158:	4611      	mov	r1, r2
 800b15a:	461a      	mov	r2, r3
 800b15c:	460b      	mov	r3, r1
 800b15e:	80fb      	strh	r3, [r7, #6]
 800b160:	4613      	mov	r3, r2
 800b162:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b16e:	2300      	movs	r3, #0
 800b170:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b172:	7979      	ldrb	r1, [r7, #5]
 800b174:	7e3b      	ldrb	r3, [r7, #24]
 800b176:	9303      	str	r3, [sp, #12]
 800b178:	88fb      	ldrh	r3, [r7, #6]
 800b17a:	9302      	str	r3, [sp, #8]
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	9301      	str	r3, [sp, #4]
 800b180:	2301      	movs	r3, #1
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	2302      	movs	r3, #2
 800b186:	2200      	movs	r2, #0
 800b188:	68f8      	ldr	r0, [r7, #12]
 800b18a:	f002 fe62 	bl	800de52 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b18e:	2300      	movs	r3, #0
}
 800b190:	4618      	mov	r0, r3
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af04      	add	r7, sp, #16
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	4611      	mov	r1, r2
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	80fb      	strh	r3, [r7, #6]
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b1ae:	7979      	ldrb	r1, [r7, #5]
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9303      	str	r3, [sp, #12]
 800b1b4:	88fb      	ldrh	r3, [r7, #6]
 800b1b6:	9302      	str	r3, [sp, #8]
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	2301      	movs	r3, #1
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	f002 fe44 	bl	800de52 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af04      	add	r7, sp, #16
 800b1da:	6078      	str	r0, [r7, #4]
 800b1dc:	4608      	mov	r0, r1
 800b1de:	4611      	mov	r1, r2
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	70fb      	strb	r3, [r7, #3]
 800b1e6:	460b      	mov	r3, r1
 800b1e8:	70bb      	strb	r3, [r7, #2]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b1ee:	7878      	ldrb	r0, [r7, #1]
 800b1f0:	78ba      	ldrb	r2, [r7, #2]
 800b1f2:	78f9      	ldrb	r1, [r7, #3]
 800b1f4:	8b3b      	ldrh	r3, [r7, #24]
 800b1f6:	9302      	str	r3, [sp, #8]
 800b1f8:	7d3b      	ldrb	r3, [r7, #20]
 800b1fa:	9301      	str	r3, [sp, #4]
 800b1fc:	7c3b      	ldrb	r3, [r7, #16]
 800b1fe:	9300      	str	r3, [sp, #0]
 800b200:	4603      	mov	r3, r0
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f002 fdd7 	bl	800ddb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b208:	2300      	movs	r3, #0
}
 800b20a:	4618      	mov	r0, r3
 800b20c:	3708      	adds	r7, #8
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}

0800b212 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b212:	b580      	push	{r7, lr}
 800b214:	b082      	sub	sp, #8
 800b216:	af00      	add	r7, sp, #0
 800b218:	6078      	str	r0, [r7, #4]
 800b21a:	460b      	mov	r3, r1
 800b21c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f002 fdf6 	bl	800de14 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3708      	adds	r7, #8
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f836 	bl	800b2b0 <USBH_GetFreePipe>
 800b244:	4603      	mov	r3, r0
 800b246:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b248:	89fb      	ldrh	r3, [r7, #14]
 800b24a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b24e:	4293      	cmp	r3, r2
 800b250:	d00a      	beq.n	800b268 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b252:	78fa      	ldrb	r2, [r7, #3]
 800b254:	89fb      	ldrh	r3, [r7, #14]
 800b256:	f003 030f 	and.w	r3, r3, #15
 800b25a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b25e:	6879      	ldr	r1, [r7, #4]
 800b260:	33e0      	adds	r3, #224	; 0xe0
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	440b      	add	r3, r1
 800b266:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b268:	89fb      	ldrh	r3, [r7, #14]
 800b26a:	b2db      	uxtb	r3, r3
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	460b      	mov	r3, r1
 800b27e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b280:	78fb      	ldrb	r3, [r7, #3]
 800b282:	2b0a      	cmp	r3, #10
 800b284:	d80d      	bhi.n	800b2a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b286:	78fb      	ldrb	r3, [r7, #3]
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	33e0      	adds	r3, #224	; 0xe0
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	78fb      	ldrb	r3, [r7, #3]
 800b294:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b298:	6879      	ldr	r1, [r7, #4]
 800b29a:	33e0      	adds	r3, #224	; 0xe0
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	440b      	add	r3, r1
 800b2a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b2bc:	2300      	movs	r3, #0
 800b2be:	73fb      	strb	r3, [r7, #15]
 800b2c0:	e00f      	b.n	800b2e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b2c2:	7bfb      	ldrb	r3, [r7, #15]
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	33e0      	adds	r3, #224	; 0xe0
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d102      	bne.n	800b2dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b2d6:	7bfb      	ldrb	r3, [r7, #15]
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	e007      	b.n	800b2ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b2dc:	7bfb      	ldrb	r3, [r7, #15]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	73fb      	strb	r3, [r7, #15]
 800b2e2:	7bfb      	ldrb	r3, [r7, #15]
 800b2e4:	2b0a      	cmp	r3, #10
 800b2e6:	d9ec      	bls.n	800b2c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b2e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b302:	79fb      	ldrb	r3, [r7, #7]
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <disk_status+0x30>)
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	79fa      	ldrb	r2, [r7, #7]
 800b310:	4905      	ldr	r1, [pc, #20]	; (800b328 <disk_status+0x30>)
 800b312:	440a      	add	r2, r1
 800b314:	7a12      	ldrb	r2, [r2, #8]
 800b316:	4610      	mov	r0, r2
 800b318:	4798      	blx	r3
 800b31a:	4603      	mov	r3, r0
 800b31c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b31e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	20001378 	.word	0x20001378

0800b32c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	4603      	mov	r3, r0
 800b334:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b336:	2300      	movs	r3, #0
 800b338:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b33a:	79fb      	ldrb	r3, [r7, #7]
 800b33c:	4a0d      	ldr	r2, [pc, #52]	; (800b374 <disk_initialize+0x48>)
 800b33e:	5cd3      	ldrb	r3, [r2, r3]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d111      	bne.n	800b368 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b344:	79fb      	ldrb	r3, [r7, #7]
 800b346:	4a0b      	ldr	r2, [pc, #44]	; (800b374 <disk_initialize+0x48>)
 800b348:	2101      	movs	r1, #1
 800b34a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b34c:	79fb      	ldrb	r3, [r7, #7]
 800b34e:	4a09      	ldr	r2, [pc, #36]	; (800b374 <disk_initialize+0x48>)
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	79fa      	ldrb	r2, [r7, #7]
 800b35a:	4906      	ldr	r1, [pc, #24]	; (800b374 <disk_initialize+0x48>)
 800b35c:	440a      	add	r2, r1
 800b35e:	7a12      	ldrb	r2, [r2, #8]
 800b360:	4610      	mov	r0, r2
 800b362:	4798      	blx	r3
 800b364:	4603      	mov	r3, r0
 800b366:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	20001378 	.word	0x20001378

0800b378 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b087      	sub	sp, #28
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60b9      	str	r1, [r7, #8]
 800b380:	607a      	str	r2, [r7, #4]
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b388:	7bfb      	ldrb	r3, [r7, #15]
 800b38a:	4a0a      	ldr	r2, [pc, #40]	; (800b3b4 <disk_read+0x3c>)
 800b38c:	009b      	lsls	r3, r3, #2
 800b38e:	4413      	add	r3, r2
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	689c      	ldr	r4, [r3, #8]
 800b394:	7bfb      	ldrb	r3, [r7, #15]
 800b396:	4a07      	ldr	r2, [pc, #28]	; (800b3b4 <disk_read+0x3c>)
 800b398:	4413      	add	r3, r2
 800b39a:	7a18      	ldrb	r0, [r3, #8]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	68b9      	ldr	r1, [r7, #8]
 800b3a2:	47a0      	blx	r4
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd90      	pop	{r4, r7, pc}
 800b3b2:	bf00      	nop
 800b3b4:	20001378 	.word	0x20001378

0800b3b8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b3b8:	b590      	push	{r4, r7, lr}
 800b3ba:	b087      	sub	sp, #28
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ca:	4a0a      	ldr	r2, [pc, #40]	; (800b3f4 <disk_write+0x3c>)
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	68dc      	ldr	r4, [r3, #12]
 800b3d4:	7bfb      	ldrb	r3, [r7, #15]
 800b3d6:	4a07      	ldr	r2, [pc, #28]	; (800b3f4 <disk_write+0x3c>)
 800b3d8:	4413      	add	r3, r2
 800b3da:	7a18      	ldrb	r0, [r3, #8]
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	47a0      	blx	r4
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	75fb      	strb	r3, [r7, #23]
  return res;
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	371c      	adds	r7, #28
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd90      	pop	{r4, r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	20001378 	.word	0x20001378

0800b3f8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	4603      	mov	r3, r0
 800b400:	603a      	str	r2, [r7, #0]
 800b402:	71fb      	strb	r3, [r7, #7]
 800b404:	460b      	mov	r3, r1
 800b406:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b408:	79fb      	ldrb	r3, [r7, #7]
 800b40a:	4a09      	ldr	r2, [pc, #36]	; (800b430 <disk_ioctl+0x38>)
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	79fa      	ldrb	r2, [r7, #7]
 800b416:	4906      	ldr	r1, [pc, #24]	; (800b430 <disk_ioctl+0x38>)
 800b418:	440a      	add	r2, r1
 800b41a:	7a10      	ldrb	r0, [r2, #8]
 800b41c:	79b9      	ldrb	r1, [r7, #6]
 800b41e:	683a      	ldr	r2, [r7, #0]
 800b420:	4798      	blx	r3
 800b422:	4603      	mov	r3, r0
 800b424:	73fb      	strb	r3, [r7, #15]
  return res;
 800b426:	7bfb      	ldrb	r3, [r7, #15]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3710      	adds	r7, #16
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20001378 	.word	0x20001378

0800b434 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	3301      	adds	r3, #1
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b444:	89fb      	ldrh	r3, [r7, #14]
 800b446:	021b      	lsls	r3, r3, #8
 800b448:	b21a      	sxth	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	b21b      	sxth	r3, r3
 800b450:	4313      	orrs	r3, r2
 800b452:	b21b      	sxth	r3, r3
 800b454:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b456:	89fb      	ldrh	r3, [r7, #14]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b464:	b480      	push	{r7}
 800b466:	b085      	sub	sp, #20
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	3303      	adds	r3, #3
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	021b      	lsls	r3, r3, #8
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	3202      	adds	r2, #2
 800b47c:	7812      	ldrb	r2, [r2, #0]
 800b47e:	4313      	orrs	r3, r2
 800b480:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	021b      	lsls	r3, r3, #8
 800b486:	687a      	ldr	r2, [r7, #4]
 800b488:	3201      	adds	r2, #1
 800b48a:	7812      	ldrb	r2, [r2, #0]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	021b      	lsls	r3, r3, #8
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7812      	ldrb	r2, [r2, #0]
 800b498:	4313      	orrs	r3, r2
 800b49a:	60fb      	str	r3, [r7, #12]
	return rv;
 800b49c:	68fb      	ldr	r3, [r7, #12]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr

0800b4aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b4aa:	b480      	push	{r7}
 800b4ac:	b083      	sub	sp, #12
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	1c5a      	adds	r2, r3, #1
 800b4ba:	607a      	str	r2, [r7, #4]
 800b4bc:	887a      	ldrh	r2, [r7, #2]
 800b4be:	b2d2      	uxtb	r2, r2
 800b4c0:	701a      	strb	r2, [r3, #0]
 800b4c2:	887b      	ldrh	r3, [r7, #2]
 800b4c4:	0a1b      	lsrs	r3, r3, #8
 800b4c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	1c5a      	adds	r2, r3, #1
 800b4cc:	607a      	str	r2, [r7, #4]
 800b4ce:	887a      	ldrh	r2, [r7, #2]
 800b4d0:	b2d2      	uxtb	r2, r2
 800b4d2:	701a      	strb	r2, [r3, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
 800b4e8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	1c5a      	adds	r2, r3, #1
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	683a      	ldr	r2, [r7, #0]
 800b4f2:	b2d2      	uxtb	r2, r2
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	0a1b      	lsrs	r3, r3, #8
 800b4fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	1c5a      	adds	r2, r3, #1
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	683a      	ldr	r2, [r7, #0]
 800b504:	b2d2      	uxtb	r2, r2
 800b506:	701a      	strb	r2, [r3, #0]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	0a1b      	lsrs	r3, r3, #8
 800b50c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	b2d2      	uxtb	r2, r2
 800b518:	701a      	strb	r2, [r3, #0]
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	0a1b      	lsrs	r3, r3, #8
 800b51e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	607a      	str	r2, [r7, #4]
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	701a      	strb	r2, [r3, #0]
}
 800b52c:	bf00      	nop
 800b52e:	370c      	adds	r7, #12
 800b530:	46bd      	mov	sp, r7
 800b532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b536:	4770      	bx	lr

0800b538 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b538:	b480      	push	{r7}
 800b53a:	b087      	sub	sp, #28
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d00d      	beq.n	800b56e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	1c53      	adds	r3, r2, #1
 800b556:	613b      	str	r3, [r7, #16]
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	1c59      	adds	r1, r3, #1
 800b55c:	6179      	str	r1, [r7, #20]
 800b55e:	7812      	ldrb	r2, [r2, #0]
 800b560:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	3b01      	subs	r3, #1
 800b566:	607b      	str	r3, [r7, #4]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1f1      	bne.n	800b552 <mem_cpy+0x1a>
	}
}
 800b56e:	bf00      	nop
 800b570:	371c      	adds	r7, #28
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr

0800b57a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b57a:	b480      	push	{r7}
 800b57c:	b087      	sub	sp, #28
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	1c5a      	adds	r2, r3, #1
 800b58e:	617a      	str	r2, [r7, #20]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	b2d2      	uxtb	r2, r2
 800b594:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	3b01      	subs	r3, #1
 800b59a:	607b      	str	r3, [r7, #4]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d1f3      	bne.n	800b58a <mem_set+0x10>
}
 800b5a2:	bf00      	nop
 800b5a4:	371c      	adds	r7, #28
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b5ae:	b480      	push	{r7}
 800b5b0:	b089      	sub	sp, #36	; 0x24
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	61fb      	str	r3, [r7, #28]
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b5c6:	69fb      	ldr	r3, [r7, #28]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	61fa      	str	r2, [r7, #28]
 800b5cc:	781b      	ldrb	r3, [r3, #0]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	1c5a      	adds	r2, r3, #1
 800b5d4:	61ba      	str	r2, [r7, #24]
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	1acb      	subs	r3, r1, r3
 800b5da:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	607b      	str	r3, [r7, #4]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d002      	beq.n	800b5ee <mem_cmp+0x40>
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d0eb      	beq.n	800b5c6 <mem_cmp+0x18>

	return r;
 800b5ee:	697b      	ldr	r3, [r7, #20]
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3724      	adds	r7, #36	; 0x24
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b606:	e002      	b.n	800b60e <chk_chr+0x12>
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	3301      	adds	r3, #1
 800b60c:	607b      	str	r3, [r7, #4]
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	781b      	ldrb	r3, [r3, #0]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d005      	beq.n	800b622 <chk_chr+0x26>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	781b      	ldrb	r3, [r3, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	4293      	cmp	r3, r2
 800b620:	d1f2      	bne.n	800b608 <chk_chr+0xc>
	return *str;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	781b      	ldrb	r3, [r3, #0]
}
 800b626:	4618      	mov	r0, r3
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr
	...

0800b634 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b634:	b480      	push	{r7}
 800b636:	b085      	sub	sp, #20
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b63e:	2300      	movs	r3, #0
 800b640:	60bb      	str	r3, [r7, #8]
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e029      	b.n	800b69c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b648:	4a27      	ldr	r2, [pc, #156]	; (800b6e8 <chk_lock+0xb4>)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	011b      	lsls	r3, r3, #4
 800b64e:	4413      	add	r3, r2
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d01d      	beq.n	800b692 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b656:	4a24      	ldr	r2, [pc, #144]	; (800b6e8 <chk_lock+0xb4>)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	011b      	lsls	r3, r3, #4
 800b65c:	4413      	add	r3, r2
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d116      	bne.n	800b696 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b668:	4a1f      	ldr	r2, [pc, #124]	; (800b6e8 <chk_lock+0xb4>)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	011b      	lsls	r3, r3, #4
 800b66e:	4413      	add	r3, r2
 800b670:	3304      	adds	r3, #4
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b678:	429a      	cmp	r2, r3
 800b67a:	d10c      	bne.n	800b696 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b67c:	4a1a      	ldr	r2, [pc, #104]	; (800b6e8 <chk_lock+0xb4>)
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	4413      	add	r3, r2
 800b684:	3308      	adds	r3, #8
 800b686:	681a      	ldr	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d102      	bne.n	800b696 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b690:	e007      	b.n	800b6a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b692:	2301      	movs	r3, #1
 800b694:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3301      	adds	r3, #1
 800b69a:	60fb      	str	r3, [r7, #12]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2b01      	cmp	r3, #1
 800b6a0:	d9d2      	bls.n	800b648 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	2b02      	cmp	r3, #2
 800b6a6:	d109      	bne.n	800b6bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d102      	bne.n	800b6b4 <chk_lock+0x80>
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	2b02      	cmp	r3, #2
 800b6b2:	d101      	bne.n	800b6b8 <chk_lock+0x84>
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e010      	b.n	800b6da <chk_lock+0xa6>
 800b6b8:	2312      	movs	r3, #18
 800b6ba:	e00e      	b.n	800b6da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d108      	bne.n	800b6d4 <chk_lock+0xa0>
 800b6c2:	4a09      	ldr	r2, [pc, #36]	; (800b6e8 <chk_lock+0xb4>)
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	011b      	lsls	r3, r3, #4
 800b6c8:	4413      	add	r3, r2
 800b6ca:	330c      	adds	r3, #12
 800b6cc:	881b      	ldrh	r3, [r3, #0]
 800b6ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b6d2:	d101      	bne.n	800b6d8 <chk_lock+0xa4>
 800b6d4:	2310      	movs	r3, #16
 800b6d6:	e000      	b.n	800b6da <chk_lock+0xa6>
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	20001358 	.word	0x20001358

0800b6ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b083      	sub	sp, #12
 800b6f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	607b      	str	r3, [r7, #4]
 800b6f6:	e002      	b.n	800b6fe <enq_lock+0x12>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	3301      	adds	r3, #1
 800b6fc:	607b      	str	r3, [r7, #4]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d806      	bhi.n	800b712 <enq_lock+0x26>
 800b704:	4a09      	ldr	r2, [pc, #36]	; (800b72c <enq_lock+0x40>)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	011b      	lsls	r3, r3, #4
 800b70a:	4413      	add	r3, r2
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d1f2      	bne.n	800b6f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2b02      	cmp	r3, #2
 800b716:	bf14      	ite	ne
 800b718:	2301      	movne	r3, #1
 800b71a:	2300      	moveq	r3, #0
 800b71c:	b2db      	uxtb	r3, r3
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop
 800b72c:	20001358 	.word	0x20001358

0800b730 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b73a:	2300      	movs	r3, #0
 800b73c:	60fb      	str	r3, [r7, #12]
 800b73e:	e01f      	b.n	800b780 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b740:	4a41      	ldr	r2, [pc, #260]	; (800b848 <inc_lock+0x118>)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	011b      	lsls	r3, r3, #4
 800b746:	4413      	add	r3, r2
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d113      	bne.n	800b77a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b752:	4a3d      	ldr	r2, [pc, #244]	; (800b848 <inc_lock+0x118>)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	4413      	add	r3, r2
 800b75a:	3304      	adds	r3, #4
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b762:	429a      	cmp	r2, r3
 800b764:	d109      	bne.n	800b77a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b766:	4a38      	ldr	r2, [pc, #224]	; (800b848 <inc_lock+0x118>)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	011b      	lsls	r3, r3, #4
 800b76c:	4413      	add	r3, r2
 800b76e:	3308      	adds	r3, #8
 800b770:	681a      	ldr	r2, [r3, #0]
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b776:	429a      	cmp	r2, r3
 800b778:	d006      	beq.n	800b788 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3301      	adds	r3, #1
 800b77e:	60fb      	str	r3, [r7, #12]
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b01      	cmp	r3, #1
 800b784:	d9dc      	bls.n	800b740 <inc_lock+0x10>
 800b786:	e000      	b.n	800b78a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b788:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d132      	bne.n	800b7f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b790:	2300      	movs	r3, #0
 800b792:	60fb      	str	r3, [r7, #12]
 800b794:	e002      	b.n	800b79c <inc_lock+0x6c>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3301      	adds	r3, #1
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d806      	bhi.n	800b7b0 <inc_lock+0x80>
 800b7a2:	4a29      	ldr	r2, [pc, #164]	; (800b848 <inc_lock+0x118>)
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	4413      	add	r3, r2
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d1f2      	bne.n	800b796 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	d101      	bne.n	800b7ba <inc_lock+0x8a>
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	e040      	b.n	800b83c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	4922      	ldr	r1, [pc, #136]	; (800b848 <inc_lock+0x118>)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	011b      	lsls	r3, r3, #4
 800b7c4:	440b      	add	r3, r1
 800b7c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689a      	ldr	r2, [r3, #8]
 800b7cc:	491e      	ldr	r1, [pc, #120]	; (800b848 <inc_lock+0x118>)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	011b      	lsls	r3, r3, #4
 800b7d2:	440b      	add	r3, r1
 800b7d4:	3304      	adds	r3, #4
 800b7d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	695a      	ldr	r2, [r3, #20]
 800b7dc:	491a      	ldr	r1, [pc, #104]	; (800b848 <inc_lock+0x118>)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	011b      	lsls	r3, r3, #4
 800b7e2:	440b      	add	r3, r1
 800b7e4:	3308      	adds	r3, #8
 800b7e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b7e8:	4a17      	ldr	r2, [pc, #92]	; (800b848 <inc_lock+0x118>)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	011b      	lsls	r3, r3, #4
 800b7ee:	4413      	add	r3, r2
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d009      	beq.n	800b810 <inc_lock+0xe0>
 800b7fc:	4a12      	ldr	r2, [pc, #72]	; (800b848 <inc_lock+0x118>)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	011b      	lsls	r3, r3, #4
 800b802:	4413      	add	r3, r2
 800b804:	330c      	adds	r3, #12
 800b806:	881b      	ldrh	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d001      	beq.n	800b810 <inc_lock+0xe0>
 800b80c:	2300      	movs	r3, #0
 800b80e:	e015      	b.n	800b83c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d108      	bne.n	800b828 <inc_lock+0xf8>
 800b816:	4a0c      	ldr	r2, [pc, #48]	; (800b848 <inc_lock+0x118>)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	011b      	lsls	r3, r3, #4
 800b81c:	4413      	add	r3, r2
 800b81e:	330c      	adds	r3, #12
 800b820:	881b      	ldrh	r3, [r3, #0]
 800b822:	3301      	adds	r3, #1
 800b824:	b29a      	uxth	r2, r3
 800b826:	e001      	b.n	800b82c <inc_lock+0xfc>
 800b828:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b82c:	4906      	ldr	r1, [pc, #24]	; (800b848 <inc_lock+0x118>)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	440b      	add	r3, r1
 800b834:	330c      	adds	r3, #12
 800b836:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3301      	adds	r3, #1
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3714      	adds	r7, #20
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	20001358 	.word	0x20001358

0800b84c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3b01      	subs	r3, #1
 800b858:	607b      	str	r3, [r7, #4]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d825      	bhi.n	800b8ac <dec_lock+0x60>
		n = Files[i].ctr;
 800b860:	4a17      	ldr	r2, [pc, #92]	; (800b8c0 <dec_lock+0x74>)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	4413      	add	r3, r2
 800b868:	330c      	adds	r3, #12
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b86e:	89fb      	ldrh	r3, [r7, #14]
 800b870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b874:	d101      	bne.n	800b87a <dec_lock+0x2e>
 800b876:	2300      	movs	r3, #0
 800b878:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b87a:	89fb      	ldrh	r3, [r7, #14]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d002      	beq.n	800b886 <dec_lock+0x3a>
 800b880:	89fb      	ldrh	r3, [r7, #14]
 800b882:	3b01      	subs	r3, #1
 800b884:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b886:	4a0e      	ldr	r2, [pc, #56]	; (800b8c0 <dec_lock+0x74>)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	011b      	lsls	r3, r3, #4
 800b88c:	4413      	add	r3, r2
 800b88e:	330c      	adds	r3, #12
 800b890:	89fa      	ldrh	r2, [r7, #14]
 800b892:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b894:	89fb      	ldrh	r3, [r7, #14]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d105      	bne.n	800b8a6 <dec_lock+0x5a>
 800b89a:	4a09      	ldr	r2, [pc, #36]	; (800b8c0 <dec_lock+0x74>)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	011b      	lsls	r3, r3, #4
 800b8a0:	4413      	add	r3, r2
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	737b      	strb	r3, [r7, #13]
 800b8aa:	e001      	b.n	800b8b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b8b0:	7b7b      	ldrb	r3, [r7, #13]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop
 800b8c0:	20001358 	.word	0x20001358

0800b8c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	60fb      	str	r3, [r7, #12]
 800b8d0:	e010      	b.n	800b8f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b8d2:	4a0d      	ldr	r2, [pc, #52]	; (800b908 <clear_lock+0x44>)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	011b      	lsls	r3, r3, #4
 800b8d8:	4413      	add	r3, r2
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	687a      	ldr	r2, [r7, #4]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d105      	bne.n	800b8ee <clear_lock+0x2a>
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <clear_lock+0x44>)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	011b      	lsls	r3, r3, #4
 800b8e8:	4413      	add	r3, r2
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d9eb      	bls.n	800b8d2 <clear_lock+0xe>
	}
}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	20001358 	.word	0x20001358

0800b90c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	78db      	ldrb	r3, [r3, #3]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d034      	beq.n	800b98a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	7858      	ldrb	r0, [r3, #1]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b930:	2301      	movs	r3, #1
 800b932:	697a      	ldr	r2, [r7, #20]
 800b934:	f7ff fd40 	bl	800b3b8 <disk_write>
 800b938:	4603      	mov	r3, r0
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d002      	beq.n	800b944 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b93e:	2301      	movs	r3, #1
 800b940:	73fb      	strb	r3, [r7, #15]
 800b942:	e022      	b.n	800b98a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	1ad2      	subs	r2, r2, r3
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	699b      	ldr	r3, [r3, #24]
 800b956:	429a      	cmp	r2, r3
 800b958:	d217      	bcs.n	800b98a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	789b      	ldrb	r3, [r3, #2]
 800b95e:	613b      	str	r3, [r7, #16]
 800b960:	e010      	b.n	800b984 <sync_window+0x78>
					wsect += fs->fsize;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	4413      	add	r3, r2
 800b96a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	7858      	ldrb	r0, [r3, #1]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b976:	2301      	movs	r3, #1
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	f7ff fd1d 	bl	800b3b8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b97e:	693b      	ldr	r3, [r7, #16]
 800b980:	3b01      	subs	r3, #1
 800b982:	613b      	str	r3, [r7, #16]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	2b01      	cmp	r3, #1
 800b988:	d8eb      	bhi.n	800b962 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3718      	adds	r7, #24
 800b990:	46bd      	mov	sp, r7
 800b992:	bd80      	pop	{r7, pc}

0800b994 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9a6:	683a      	ldr	r2, [r7, #0]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d01b      	beq.n	800b9e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff ffad 	bl	800b90c <sync_window>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b9b6:	7bfb      	ldrb	r3, [r7, #15]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d113      	bne.n	800b9e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7858      	ldrb	r0, [r3, #1]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	f7ff fcd5 	bl	800b378 <disk_read>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d004      	beq.n	800b9de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b9d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	683a      	ldr	r2, [r7, #0]
 800b9e2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
	...

0800b9f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f7ff ff87 	bl	800b90c <sync_window>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d158      	bne.n	800baba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b03      	cmp	r3, #3
 800ba0e:	d148      	bne.n	800baa2 <sync_fs+0xb2>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	791b      	ldrb	r3, [r3, #4]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d144      	bne.n	800baa2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3330      	adds	r3, #48	; 0x30
 800ba1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba20:	2100      	movs	r1, #0
 800ba22:	4618      	mov	r0, r3
 800ba24:	f7ff fda9 	bl	800b57a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	3330      	adds	r3, #48	; 0x30
 800ba2c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba30:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7ff fd38 	bl	800b4aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3330      	adds	r3, #48	; 0x30
 800ba3e:	4921      	ldr	r1, [pc, #132]	; (800bac4 <sync_fs+0xd4>)
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff fd4d 	bl	800b4e0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	3330      	adds	r3, #48	; 0x30
 800ba4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba4e:	491e      	ldr	r1, [pc, #120]	; (800bac8 <sync_fs+0xd8>)
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7ff fd45 	bl	800b4e0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	3330      	adds	r3, #48	; 0x30
 800ba5a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	4619      	mov	r1, r3
 800ba64:	4610      	mov	r0, r2
 800ba66:	f7ff fd3b 	bl	800b4e0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	3330      	adds	r3, #48	; 0x30
 800ba6e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	4619      	mov	r1, r3
 800ba78:	4610      	mov	r0, r2
 800ba7a:	f7ff fd31 	bl	800b4e0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	69db      	ldr	r3, [r3, #28]
 800ba82:	1c5a      	adds	r2, r3, #1
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	7858      	ldrb	r0, [r3, #1]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba96:	2301      	movs	r3, #1
 800ba98:	f7ff fc8e 	bl	800b3b8 <disk_write>
			fs->fsi_flag = 0;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	785b      	ldrb	r3, [r3, #1]
 800baa6:	2200      	movs	r2, #0
 800baa8:	2100      	movs	r1, #0
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff fca4 	bl	800b3f8 <disk_ioctl>
 800bab0:	4603      	mov	r3, r0
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <sync_fs+0xca>
 800bab6:	2301      	movs	r3, #1
 800bab8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800baba:	7bfb      	ldrb	r3, [r7, #15]
}
 800babc:	4618      	mov	r0, r3
 800babe:	3710      	adds	r7, #16
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	41615252 	.word	0x41615252
 800bac8:	61417272 	.word	0x61417272

0800bacc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	3b02      	subs	r3, #2
 800bada:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	695b      	ldr	r3, [r3, #20]
 800bae0:	3b02      	subs	r3, #2
 800bae2:	683a      	ldr	r2, [r7, #0]
 800bae4:	429a      	cmp	r2, r3
 800bae6:	d301      	bcc.n	800baec <clust2sect+0x20>
 800bae8:	2300      	movs	r3, #0
 800baea:	e008      	b.n	800bafe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	895b      	ldrh	r3, [r3, #10]
 800baf0:	461a      	mov	r2, r3
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	fb03 f202 	mul.w	r2, r3, r2
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafc:	4413      	add	r3, r2
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	370c      	adds	r7, #12
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b086      	sub	sp, #24
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
 800bb12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d904      	bls.n	800bb2a <get_fat+0x20>
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	695b      	ldr	r3, [r3, #20]
 800bb24:	683a      	ldr	r2, [r7, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d302      	bcc.n	800bb30 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	617b      	str	r3, [r7, #20]
 800bb2e:	e08c      	b.n	800bc4a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bb30:	f04f 33ff 	mov.w	r3, #4294967295
 800bb34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bb36:	693b      	ldr	r3, [r7, #16]
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d045      	beq.n	800bbca <get_fat+0xc0>
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d05d      	beq.n	800bbfe <get_fat+0xf4>
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d177      	bne.n	800bc36 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	085b      	lsrs	r3, r3, #1
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	4413      	add	r3, r2
 800bb52:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	6a1a      	ldr	r2, [r3, #32]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	0a5b      	lsrs	r3, r3, #9
 800bb5c:	4413      	add	r3, r2
 800bb5e:	4619      	mov	r1, r3
 800bb60:	6938      	ldr	r0, [r7, #16]
 800bb62:	f7ff ff17 	bl	800b994 <move_window>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d167      	bne.n	800bc3c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	1c5a      	adds	r2, r3, #1
 800bb70:	60fa      	str	r2, [r7, #12]
 800bb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb76:	693a      	ldr	r2, [r7, #16]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb7e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	6a1a      	ldr	r2, [r3, #32]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	0a5b      	lsrs	r3, r3, #9
 800bb88:	4413      	add	r3, r2
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	6938      	ldr	r0, [r7, #16]
 800bb8e:	f7ff ff01 	bl	800b994 <move_window>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d153      	bne.n	800bc40 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb9e:	693a      	ldr	r2, [r7, #16]
 800bba0:	4413      	add	r3, r2
 800bba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bba6:	021b      	lsls	r3, r3, #8
 800bba8:	461a      	mov	r2, r3
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d002      	beq.n	800bbc0 <get_fat+0xb6>
 800bbba:	68bb      	ldr	r3, [r7, #8]
 800bbbc:	091b      	lsrs	r3, r3, #4
 800bbbe:	e002      	b.n	800bbc6 <get_fat+0xbc>
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bbc6:	617b      	str	r3, [r7, #20]
			break;
 800bbc8:	e03f      	b.n	800bc4a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6a1a      	ldr	r2, [r3, #32]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	0a1b      	lsrs	r3, r3, #8
 800bbd2:	4413      	add	r3, r2
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	6938      	ldr	r0, [r7, #16]
 800bbd8:	f7ff fedc 	bl	800b994 <move_window>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d130      	bne.n	800bc44 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	005b      	lsls	r3, r3, #1
 800bbec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bbf0:	4413      	add	r3, r2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f7ff fc1e 	bl	800b434 <ld_word>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	617b      	str	r3, [r7, #20]
			break;
 800bbfc:	e025      	b.n	800bc4a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	6a1a      	ldr	r2, [r3, #32]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	09db      	lsrs	r3, r3, #7
 800bc06:	4413      	add	r3, r2
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6938      	ldr	r0, [r7, #16]
 800bc0c:	f7ff fec2 	bl	800b994 <move_window>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d118      	bne.n	800bc48 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bc24:	4413      	add	r3, r2
 800bc26:	4618      	mov	r0, r3
 800bc28:	f7ff fc1c 	bl	800b464 <ld_dword>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc32:	617b      	str	r3, [r7, #20]
			break;
 800bc34:	e009      	b.n	800bc4a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bc36:	2301      	movs	r3, #1
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e006      	b.n	800bc4a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc3c:	bf00      	nop
 800bc3e:	e004      	b.n	800bc4a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc40:	bf00      	nop
 800bc42:	e002      	b.n	800bc4a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bc44:	bf00      	nop
 800bc46:	e000      	b.n	800bc4a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bc48:	bf00      	nop
		}
	}

	return val;
 800bc4a:	697b      	ldr	r3, [r7, #20]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3718      	adds	r7, #24
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bc54:	b590      	push	{r4, r7, lr}
 800bc56:	b089      	sub	sp, #36	; 0x24
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	60f8      	str	r0, [r7, #12]
 800bc5c:	60b9      	str	r1, [r7, #8]
 800bc5e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bc60:	2302      	movs	r3, #2
 800bc62:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	f240 80d6 	bls.w	800be18 <put_fat+0x1c4>
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	695b      	ldr	r3, [r3, #20]
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	f080 80d0 	bcs.w	800be18 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	2b02      	cmp	r3, #2
 800bc7e:	d073      	beq.n	800bd68 <put_fat+0x114>
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	f000 8091 	beq.w	800bda8 <put_fat+0x154>
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	f040 80c6 	bne.w	800be18 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	61bb      	str	r3, [r7, #24]
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	085b      	lsrs	r3, r3, #1
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	4413      	add	r3, r2
 800bc98:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	6a1a      	ldr	r2, [r3, #32]
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	0a5b      	lsrs	r3, r3, #9
 800bca2:	4413      	add	r3, r2
 800bca4:	4619      	mov	r1, r3
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f7ff fe74 	bl	800b994 <move_window>
 800bcac:	4603      	mov	r3, r0
 800bcae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bcb0:	7ffb      	ldrb	r3, [r7, #31]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	f040 80a9 	bne.w	800be0a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	1c59      	adds	r1, r3, #1
 800bcc2:	61b9      	str	r1, [r7, #24]
 800bcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc8:	4413      	add	r3, r2
 800bcca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00d      	beq.n	800bcf2 <put_fat+0x9e>
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	b25b      	sxtb	r3, r3
 800bcdc:	f003 030f 	and.w	r3, r3, #15
 800bce0:	b25a      	sxtb	r2, r3
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	011b      	lsls	r3, r3, #4
 800bce8:	b25b      	sxtb	r3, r3
 800bcea:	4313      	orrs	r3, r2
 800bcec:	b25b      	sxtb	r3, r3
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	e001      	b.n	800bcf6 <put_fat+0xa2>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6a1a      	ldr	r2, [r3, #32]
 800bd04:	69bb      	ldr	r3, [r7, #24]
 800bd06:	0a5b      	lsrs	r3, r3, #9
 800bd08:	4413      	add	r3, r2
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	68f8      	ldr	r0, [r7, #12]
 800bd0e:	f7ff fe41 	bl	800b994 <move_window>
 800bd12:	4603      	mov	r3, r0
 800bd14:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd16:	7ffb      	ldrb	r3, [r7, #31]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d178      	bne.n	800be0e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	4413      	add	r3, r2
 800bd2a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f003 0301 	and.w	r3, r3, #1
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d003      	beq.n	800bd3e <put_fat+0xea>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	091b      	lsrs	r3, r3, #4
 800bd3a:	b2db      	uxtb	r3, r3
 800bd3c:	e00e      	b.n	800bd5c <put_fat+0x108>
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	b25b      	sxtb	r3, r3
 800bd44:	f023 030f 	bic.w	r3, r3, #15
 800bd48:	b25a      	sxtb	r2, r3
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	0a1b      	lsrs	r3, r3, #8
 800bd4e:	b25b      	sxtb	r3, r3
 800bd50:	f003 030f 	and.w	r3, r3, #15
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	4313      	orrs	r3, r2
 800bd58:	b25b      	sxtb	r3, r3
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	697a      	ldr	r2, [r7, #20]
 800bd5e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2201      	movs	r2, #1
 800bd64:	70da      	strb	r2, [r3, #3]
			break;
 800bd66:	e057      	b.n	800be18 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	6a1a      	ldr	r2, [r3, #32]
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	0a1b      	lsrs	r3, r3, #8
 800bd70:	4413      	add	r3, r2
 800bd72:	4619      	mov	r1, r3
 800bd74:	68f8      	ldr	r0, [r7, #12]
 800bd76:	f7ff fe0d 	bl	800b994 <move_window>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bd7e:	7ffb      	ldrb	r3, [r7, #31]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d146      	bne.n	800be12 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bd92:	4413      	add	r3, r2
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	b292      	uxth	r2, r2
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7ff fb85 	bl	800b4aa <st_word>
			fs->wflag = 1;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2201      	movs	r2, #1
 800bda4:	70da      	strb	r2, [r3, #3]
			break;
 800bda6:	e037      	b.n	800be18 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	6a1a      	ldr	r2, [r3, #32]
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	09db      	lsrs	r3, r3, #7
 800bdb0:	4413      	add	r3, r2
 800bdb2:	4619      	mov	r1, r3
 800bdb4:	68f8      	ldr	r0, [r7, #12]
 800bdb6:	f7ff fded 	bl	800b994 <move_window>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bdbe:	7ffb      	ldrb	r3, [r7, #31]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d128      	bne.n	800be16 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdd8:	4413      	add	r3, r2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f7ff fb42 	bl	800b464 <ld_dword>
 800bde0:	4603      	mov	r3, r0
 800bde2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bde6:	4323      	orrs	r3, r4
 800bde8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bdf8:	4413      	add	r3, r2
 800bdfa:	6879      	ldr	r1, [r7, #4]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fb6f 	bl	800b4e0 <st_dword>
			fs->wflag = 1;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2201      	movs	r2, #1
 800be06:	70da      	strb	r2, [r3, #3]
			break;
 800be08:	e006      	b.n	800be18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800be0a:	bf00      	nop
 800be0c:	e004      	b.n	800be18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800be0e:	bf00      	nop
 800be10:	e002      	b.n	800be18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800be12:	bf00      	nop
 800be14:	e000      	b.n	800be18 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800be16:	bf00      	nop
		}
	}
	return res;
 800be18:	7ffb      	ldrb	r3, [r7, #31]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	3724      	adds	r7, #36	; 0x24
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd90      	pop	{r4, r7, pc}

0800be22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800be22:	b580      	push	{r7, lr}
 800be24:	b088      	sub	sp, #32
 800be26:	af00      	add	r7, sp, #0
 800be28:	60f8      	str	r0, [r7, #12]
 800be2a:	60b9      	str	r1, [r7, #8]
 800be2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d904      	bls.n	800be48 <remove_chain+0x26>
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	695b      	ldr	r3, [r3, #20]
 800be42:	68ba      	ldr	r2, [r7, #8]
 800be44:	429a      	cmp	r2, r3
 800be46:	d301      	bcc.n	800be4c <remove_chain+0x2a>
 800be48:	2302      	movs	r3, #2
 800be4a:	e04b      	b.n	800bee4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00c      	beq.n	800be6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800be52:	f04f 32ff 	mov.w	r2, #4294967295
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	69b8      	ldr	r0, [r7, #24]
 800be5a:	f7ff fefb 	bl	800bc54 <put_fat>
 800be5e:	4603      	mov	r3, r0
 800be60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800be62:	7ffb      	ldrb	r3, [r7, #31]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d001      	beq.n	800be6c <remove_chain+0x4a>
 800be68:	7ffb      	ldrb	r3, [r7, #31]
 800be6a:	e03b      	b.n	800bee4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800be6c:	68b9      	ldr	r1, [r7, #8]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f7ff fe4b 	bl	800bb0a <get_fat>
 800be74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d031      	beq.n	800bee0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d101      	bne.n	800be86 <remove_chain+0x64>
 800be82:	2302      	movs	r3, #2
 800be84:	e02e      	b.n	800bee4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be8c:	d101      	bne.n	800be92 <remove_chain+0x70>
 800be8e:	2301      	movs	r3, #1
 800be90:	e028      	b.n	800bee4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800be92:	2200      	movs	r2, #0
 800be94:	68b9      	ldr	r1, [r7, #8]
 800be96:	69b8      	ldr	r0, [r7, #24]
 800be98:	f7ff fedc 	bl	800bc54 <put_fat>
 800be9c:	4603      	mov	r3, r0
 800be9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bea0:	7ffb      	ldrb	r3, [r7, #31]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d001      	beq.n	800beaa <remove_chain+0x88>
 800bea6:	7ffb      	ldrb	r3, [r7, #31]
 800bea8:	e01c      	b.n	800bee4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800beaa:	69bb      	ldr	r3, [r7, #24]
 800beac:	691a      	ldr	r2, [r3, #16]
 800beae:	69bb      	ldr	r3, [r7, #24]
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	3b02      	subs	r3, #2
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d20b      	bcs.n	800bed0 <remove_chain+0xae>
			fs->free_clst++;
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	791b      	ldrb	r3, [r3, #4]
 800bec6:	f043 0301 	orr.w	r3, r3, #1
 800beca:	b2da      	uxtb	r2, r3
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	429a      	cmp	r2, r3
 800bedc:	d3c6      	bcc.n	800be6c <remove_chain+0x4a>
 800bede:	e000      	b.n	800bee2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bee0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3720      	adds	r7, #32
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b088      	sub	sp, #32
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d10d      	bne.n	800bf1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	68db      	ldr	r3, [r3, #12]
 800bf06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d004      	beq.n	800bf18 <create_chain+0x2c>
 800bf0e:	693b      	ldr	r3, [r7, #16]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	69ba      	ldr	r2, [r7, #24]
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d31b      	bcc.n	800bf50 <create_chain+0x64>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	61bb      	str	r3, [r7, #24]
 800bf1c:	e018      	b.n	800bf50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bf1e:	6839      	ldr	r1, [r7, #0]
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f7ff fdf2 	bl	800bb0a <get_fat>
 800bf26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b01      	cmp	r3, #1
 800bf2c:	d801      	bhi.n	800bf32 <create_chain+0x46>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	e070      	b.n	800c014 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf38:	d101      	bne.n	800bf3e <create_chain+0x52>
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	e06a      	b.n	800c014 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d201      	bcs.n	800bf4c <create_chain+0x60>
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	e063      	b.n	800c014 <create_chain+0x128>
		scl = clst;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bf50:	69bb      	ldr	r3, [r7, #24]
 800bf52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	3301      	adds	r3, #1
 800bf58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	69fa      	ldr	r2, [r7, #28]
 800bf60:	429a      	cmp	r2, r3
 800bf62:	d307      	bcc.n	800bf74 <create_chain+0x88>
				ncl = 2;
 800bf64:	2302      	movs	r3, #2
 800bf66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bf68:	69fa      	ldr	r2, [r7, #28]
 800bf6a:	69bb      	ldr	r3, [r7, #24]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d901      	bls.n	800bf74 <create_chain+0x88>
 800bf70:	2300      	movs	r3, #0
 800bf72:	e04f      	b.n	800c014 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bf74:	69f9      	ldr	r1, [r7, #28]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff fdc7 	bl	800bb0a <get_fat>
 800bf7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00e      	beq.n	800bfa2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b01      	cmp	r3, #1
 800bf88:	d003      	beq.n	800bf92 <create_chain+0xa6>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf90:	d101      	bne.n	800bf96 <create_chain+0xaa>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	e03e      	b.n	800c014 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800bf96:	69fa      	ldr	r2, [r7, #28]
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d1da      	bne.n	800bf54 <create_chain+0x68>
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	e038      	b.n	800c014 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800bfa2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa8:	69f9      	ldr	r1, [r7, #28]
 800bfaa:	6938      	ldr	r0, [r7, #16]
 800bfac:	f7ff fe52 	bl	800bc54 <put_fat>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bfb4:	7dfb      	ldrb	r3, [r7, #23]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <create_chain+0xe2>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d006      	beq.n	800bfce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bfc0:	69fa      	ldr	r2, [r7, #28]
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6938      	ldr	r0, [r7, #16]
 800bfc6:	f7ff fe45 	bl	800bc54 <put_fat>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d116      	bne.n	800c002 <create_chain+0x116>
		fs->last_clst = ncl;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	691a      	ldr	r2, [r3, #16]
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	695b      	ldr	r3, [r3, #20]
 800bfe2:	3b02      	subs	r3, #2
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d804      	bhi.n	800bff2 <create_chain+0x106>
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	1e5a      	subs	r2, r3, #1
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	791b      	ldrb	r3, [r3, #4]
 800bff6:	f043 0301 	orr.w	r3, r3, #1
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	711a      	strb	r2, [r3, #4]
 800c000:	e007      	b.n	800c012 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c002:	7dfb      	ldrb	r3, [r7, #23]
 800c004:	2b01      	cmp	r3, #1
 800c006:	d102      	bne.n	800c00e <create_chain+0x122>
 800c008:	f04f 33ff 	mov.w	r3, #4294967295
 800c00c:	e000      	b.n	800c010 <create_chain+0x124>
 800c00e:	2301      	movs	r3, #1
 800c010:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b087      	sub	sp, #28
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	3304      	adds	r3, #4
 800c032:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	0a5b      	lsrs	r3, r3, #9
 800c038:	68fa      	ldr	r2, [r7, #12]
 800c03a:	8952      	ldrh	r2, [r2, #10]
 800c03c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c040:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	1d1a      	adds	r2, r3, #4
 800c046:	613a      	str	r2, [r7, #16]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <clmt_clust+0x3a>
 800c052:	2300      	movs	r3, #0
 800c054:	e010      	b.n	800c078 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	429a      	cmp	r2, r3
 800c05c:	d307      	bcc.n	800c06e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c05e:	697a      	ldr	r2, [r7, #20]
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	3304      	adds	r3, #4
 800c06a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c06c:	e7e9      	b.n	800c042 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c06e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	4413      	add	r3, r2
}
 800c078:	4618      	mov	r0, r3
 800c07a:	371c      	adds	r7, #28
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr

0800c084 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b086      	sub	sp, #24
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c09a:	d204      	bcs.n	800c0a6 <dir_sdi+0x22>
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	f003 031f 	and.w	r3, r3, #31
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d001      	beq.n	800c0aa <dir_sdi+0x26>
		return FR_INT_ERR;
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e063      	b.n	800c172 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c0b6:	697b      	ldr	r3, [r7, #20]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d106      	bne.n	800c0ca <dir_sdi+0x46>
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d902      	bls.n	800c0ca <dir_sdi+0x46>
		clst = fs->dirbase;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10c      	bne.n	800c0ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	095b      	lsrs	r3, r3, #5
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	8912      	ldrh	r2, [r2, #8]
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d301      	bcc.n	800c0e0 <dir_sdi+0x5c>
 800c0dc:	2302      	movs	r3, #2
 800c0de:	e048      	b.n	800c172 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	61da      	str	r2, [r3, #28]
 800c0e8:	e029      	b.n	800c13e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	895b      	ldrh	r3, [r3, #10]
 800c0ee:	025b      	lsls	r3, r3, #9
 800c0f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c0f2:	e019      	b.n	800c128 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6979      	ldr	r1, [r7, #20]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff fd06 	bl	800bb0a <get_fat>
 800c0fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c100:	697b      	ldr	r3, [r7, #20]
 800c102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c106:	d101      	bne.n	800c10c <dir_sdi+0x88>
 800c108:	2301      	movs	r3, #1
 800c10a:	e032      	b.n	800c172 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c10c:	697b      	ldr	r3, [r7, #20]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d904      	bls.n	800c11c <dir_sdi+0x98>
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	695b      	ldr	r3, [r3, #20]
 800c116:	697a      	ldr	r2, [r7, #20]
 800c118:	429a      	cmp	r2, r3
 800c11a:	d301      	bcc.n	800c120 <dir_sdi+0x9c>
 800c11c:	2302      	movs	r3, #2
 800c11e:	e028      	b.n	800c172 <dir_sdi+0xee>
			ofs -= csz;
 800c120:	683a      	ldr	r2, [r7, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c128:	683a      	ldr	r2, [r7, #0]
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d2e1      	bcs.n	800c0f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c130:	6979      	ldr	r1, [r7, #20]
 800c132:	6938      	ldr	r0, [r7, #16]
 800c134:	f7ff fcca 	bl	800bacc <clust2sect>
 800c138:	4602      	mov	r2, r0
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	69db      	ldr	r3, [r3, #28]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <dir_sdi+0xcc>
 800c14c:	2302      	movs	r3, #2
 800c14e:	e010      	b.n	800c172 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	69da      	ldr	r2, [r3, #28]
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	0a5b      	lsrs	r3, r3, #9
 800c158:	441a      	add	r2, r3
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c16a:	441a      	add	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3718      	adds	r7, #24
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}

0800c17a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c17a:	b580      	push	{r7, lr}
 800c17c:	b086      	sub	sp, #24
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	3320      	adds	r3, #32
 800c190:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	69db      	ldr	r3, [r3, #28]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d003      	beq.n	800c1a2 <dir_next+0x28>
 800c19a:	68bb      	ldr	r3, [r7, #8]
 800c19c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1a0:	d301      	bcc.n	800c1a6 <dir_next+0x2c>
 800c1a2:	2304      	movs	r3, #4
 800c1a4:	e0aa      	b.n	800c2fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f040 8098 	bne.w	800c2e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	69db      	ldr	r3, [r3, #28]
 800c1b6:	1c5a      	adds	r2, r3, #1
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	699b      	ldr	r3, [r3, #24]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d10b      	bne.n	800c1dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	095b      	lsrs	r3, r3, #5
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	8912      	ldrh	r2, [r2, #8]
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	f0c0 8088 	bcc.w	800c2e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	61da      	str	r2, [r3, #28]
 800c1d8:	2304      	movs	r3, #4
 800c1da:	e08f      	b.n	800c2fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	0a5b      	lsrs	r3, r3, #9
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	8952      	ldrh	r2, [r2, #10]
 800c1e4:	3a01      	subs	r2, #1
 800c1e6:	4013      	ands	r3, r2
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d17a      	bne.n	800c2e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	699b      	ldr	r3, [r3, #24]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	f7ff fc88 	bl	800bb0a <get_fat>
 800c1fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d801      	bhi.n	800c206 <dir_next+0x8c>
 800c202:	2302      	movs	r3, #2
 800c204:	e07a      	b.n	800c2fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c20c:	d101      	bne.n	800c212 <dir_next+0x98>
 800c20e:	2301      	movs	r3, #1
 800c210:	e074      	b.n	800c2fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d358      	bcc.n	800c2ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	61da      	str	r2, [r3, #28]
 800c228:	2304      	movs	r3, #4
 800c22a:	e067      	b.n	800c2fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	699b      	ldr	r3, [r3, #24]
 800c232:	4619      	mov	r1, r3
 800c234:	4610      	mov	r0, r2
 800c236:	f7ff fe59 	bl	800beec <create_chain>
 800c23a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d101      	bne.n	800c246 <dir_next+0xcc>
 800c242:	2307      	movs	r3, #7
 800c244:	e05a      	b.n	800c2fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d101      	bne.n	800c250 <dir_next+0xd6>
 800c24c:	2302      	movs	r3, #2
 800c24e:	e055      	b.n	800c2fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c256:	d101      	bne.n	800c25c <dir_next+0xe2>
 800c258:	2301      	movs	r3, #1
 800c25a:	e04f      	b.n	800c2fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c25c:	68f8      	ldr	r0, [r7, #12]
 800c25e:	f7ff fb55 	bl	800b90c <sync_window>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <dir_next+0xf2>
 800c268:	2301      	movs	r3, #1
 800c26a:	e047      	b.n	800c2fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	3330      	adds	r3, #48	; 0x30
 800c270:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c274:	2100      	movs	r1, #0
 800c276:	4618      	mov	r0, r3
 800c278:	f7ff f97f 	bl	800b57a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c27c:	2300      	movs	r3, #0
 800c27e:	613b      	str	r3, [r7, #16]
 800c280:	6979      	ldr	r1, [r7, #20]
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	f7ff fc22 	bl	800bacc <clust2sect>
 800c288:	4602      	mov	r2, r0
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c28e:	e012      	b.n	800c2b6 <dir_next+0x13c>
						fs->wflag = 1;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2201      	movs	r2, #1
 800c294:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c296:	68f8      	ldr	r0, [r7, #12]
 800c298:	f7ff fb38 	bl	800b90c <sync_window>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d001      	beq.n	800c2a6 <dir_next+0x12c>
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	e02a      	b.n	800c2fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c2a6:	693b      	ldr	r3, [r7, #16]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b0:	1c5a      	adds	r2, r3, #1
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	895b      	ldrh	r3, [r3, #10]
 800c2ba:	461a      	mov	r2, r3
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d3e6      	bcc.n	800c290 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	1ad2      	subs	r2, r2, r3
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c2d4:	6979      	ldr	r1, [r7, #20]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff fbf8 	bl	800bacc <clust2sect>
 800c2dc:	4602      	mov	r2, r0
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2ee:	68bb      	ldr	r3, [r7, #8]
 800c2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f4:	441a      	add	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c2fa:	2300      	movs	r3, #0
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3718      	adds	r7, #24
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff feb4 	bl	800c084 <dir_sdi>
 800c31c:	4603      	mov	r3, r0
 800c31e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c320:	7dfb      	ldrb	r3, [r7, #23]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d12b      	bne.n	800c37e <dir_alloc+0x7a>
		n = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	4619      	mov	r1, r3
 800c330:	68f8      	ldr	r0, [r7, #12]
 800c332:	f7ff fb2f 	bl	800b994 <move_window>
 800c336:	4603      	mov	r3, r0
 800c338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c33a:	7dfb      	ldrb	r3, [r7, #23]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d11d      	bne.n	800c37c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	2be5      	cmp	r3, #229	; 0xe5
 800c348:	d004      	beq.n	800c354 <dir_alloc+0x50>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	781b      	ldrb	r3, [r3, #0]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d107      	bne.n	800c364 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	3301      	adds	r3, #1
 800c358:	613b      	str	r3, [r7, #16]
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d102      	bne.n	800c368 <dir_alloc+0x64>
 800c362:	e00c      	b.n	800c37e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c364:	2300      	movs	r3, #0
 800c366:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c368:	2101      	movs	r1, #1
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff ff05 	bl	800c17a <dir_next>
 800c370:	4603      	mov	r3, r0
 800c372:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c374:	7dfb      	ldrb	r3, [r7, #23]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d0d7      	beq.n	800c32a <dir_alloc+0x26>
 800c37a:	e000      	b.n	800c37e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c37c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c37e:	7dfb      	ldrb	r3, [r7, #23]
 800c380:	2b04      	cmp	r3, #4
 800c382:	d101      	bne.n	800c388 <dir_alloc+0x84>
 800c384:	2307      	movs	r3, #7
 800c386:	75fb      	strb	r3, [r7, #23]
	return res;
 800c388:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3718      	adds	r7, #24
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	331a      	adds	r3, #26
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f7ff f847 	bl	800b434 <ld_word>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d109      	bne.n	800c3c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	3314      	adds	r3, #20
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f7ff f83c 	bl	800b434 <ld_word>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	041b      	lsls	r3, r3, #16
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3710      	adds	r7, #16
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c3dc:	68bb      	ldr	r3, [r7, #8]
 800c3de:	331a      	adds	r3, #26
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	b292      	uxth	r2, r2
 800c3e4:	4611      	mov	r1, r2
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff f85f 	bl	800b4aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d109      	bne.n	800c408 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f103 0214 	add.w	r2, r3, #20
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	0c1b      	lsrs	r3, r3, #16
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7ff f851 	bl	800b4aa <st_word>
	}
}
 800c408:	bf00      	nop
 800c40a:	3710      	adds	r7, #16
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b086      	sub	sp, #24
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c41e:	2100      	movs	r1, #0
 800c420:	6878      	ldr	r0, [r7, #4]
 800c422:	f7ff fe2f 	bl	800c084 <dir_sdi>
 800c426:	4603      	mov	r3, r0
 800c428:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <dir_find+0x24>
 800c430:	7dfb      	ldrb	r3, [r7, #23]
 800c432:	e03e      	b.n	800c4b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	69db      	ldr	r3, [r3, #28]
 800c438:	4619      	mov	r1, r3
 800c43a:	6938      	ldr	r0, [r7, #16]
 800c43c:	f7ff faaa 	bl	800b994 <move_window>
 800c440:	4603      	mov	r3, r0
 800c442:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c444:	7dfb      	ldrb	r3, [r7, #23]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d12f      	bne.n	800c4aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c452:	7bfb      	ldrb	r3, [r7, #15]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d102      	bne.n	800c45e <dir_find+0x4e>
 800c458:	2304      	movs	r3, #4
 800c45a:	75fb      	strb	r3, [r7, #23]
 800c45c:	e028      	b.n	800c4b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a1b      	ldr	r3, [r3, #32]
 800c462:	330b      	adds	r3, #11
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6a1b      	ldr	r3, [r3, #32]
 800c474:	330b      	adds	r3, #11
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	f003 0308 	and.w	r3, r3, #8
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <dir_find+0x86>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a18      	ldr	r0, [r3, #32]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3324      	adds	r3, #36	; 0x24
 800c488:	220b      	movs	r2, #11
 800c48a:	4619      	mov	r1, r3
 800c48c:	f7ff f88f 	bl	800b5ae <mem_cmp>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d00b      	beq.n	800c4ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c496:	2100      	movs	r1, #0
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7ff fe6e 	bl	800c17a <dir_next>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0c5      	beq.n	800c434 <dir_find+0x24>
 800c4a8:	e002      	b.n	800c4b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c4aa:	bf00      	nop
 800c4ac:	e000      	b.n	800c4b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c4ae:	bf00      	nop

	return res;
 800c4b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff ff1a 	bl	800c304 <dir_alloc>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d11c      	bne.n	800c514 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	69db      	ldr	r3, [r3, #28]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68b8      	ldr	r0, [r7, #8]
 800c4e2:	f7ff fa57 	bl	800b994 <move_window>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d111      	bne.n	800c514 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a1b      	ldr	r3, [r3, #32]
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	2100      	movs	r1, #0
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7ff f83e 	bl	800b57a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6a18      	ldr	r0, [r3, #32]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	3324      	adds	r3, #36	; 0x24
 800c506:	220b      	movs	r2, #11
 800c508:	4619      	mov	r1, r3
 800c50a:	f7ff f815 	bl	800b538 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2201      	movs	r2, #1
 800c512:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c514:	7bfb      	ldrb	r3, [r7, #15]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b088      	sub	sp, #32
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
 800c528:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	60fb      	str	r3, [r7, #12]
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3324      	adds	r3, #36	; 0x24
 800c534:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c536:	220b      	movs	r2, #11
 800c538:	2120      	movs	r1, #32
 800c53a:	68b8      	ldr	r0, [r7, #8]
 800c53c:	f7ff f81d 	bl	800b57a <mem_set>
	si = i = 0; ni = 8;
 800c540:	2300      	movs	r3, #0
 800c542:	613b      	str	r3, [r7, #16]
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	2308      	movs	r3, #8
 800c54a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	1c5a      	adds	r2, r3, #1
 800c550:	617a      	str	r2, [r7, #20]
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	4413      	add	r3, r2
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c55a:	7ffb      	ldrb	r3, [r7, #31]
 800c55c:	2b20      	cmp	r3, #32
 800c55e:	d94e      	bls.n	800c5fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c560:	7ffb      	ldrb	r3, [r7, #31]
 800c562:	2b2f      	cmp	r3, #47	; 0x2f
 800c564:	d006      	beq.n	800c574 <create_name+0x54>
 800c566:	7ffb      	ldrb	r3, [r7, #31]
 800c568:	2b5c      	cmp	r3, #92	; 0x5c
 800c56a:	d110      	bne.n	800c58e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c56c:	e002      	b.n	800c574 <create_name+0x54>
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	3301      	adds	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	4413      	add	r3, r2
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b2f      	cmp	r3, #47	; 0x2f
 800c57e:	d0f6      	beq.n	800c56e <create_name+0x4e>
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	4413      	add	r3, r2
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	2b5c      	cmp	r3, #92	; 0x5c
 800c58a:	d0f0      	beq.n	800c56e <create_name+0x4e>
			break;
 800c58c:	e038      	b.n	800c600 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c58e:	7ffb      	ldrb	r3, [r7, #31]
 800c590:	2b2e      	cmp	r3, #46	; 0x2e
 800c592:	d003      	beq.n	800c59c <create_name+0x7c>
 800c594:	693a      	ldr	r2, [r7, #16]
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d30c      	bcc.n	800c5b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	2b0b      	cmp	r3, #11
 800c5a0:	d002      	beq.n	800c5a8 <create_name+0x88>
 800c5a2:	7ffb      	ldrb	r3, [r7, #31]
 800c5a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c5a6:	d001      	beq.n	800c5ac <create_name+0x8c>
 800c5a8:	2306      	movs	r3, #6
 800c5aa:	e044      	b.n	800c636 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c5ac:	2308      	movs	r3, #8
 800c5ae:	613b      	str	r3, [r7, #16]
 800c5b0:	230b      	movs	r3, #11
 800c5b2:	61bb      	str	r3, [r7, #24]
			continue;
 800c5b4:	e022      	b.n	800c5fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c5b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	da04      	bge.n	800c5c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c5be:	7ffb      	ldrb	r3, [r7, #31]
 800c5c0:	3b80      	subs	r3, #128	; 0x80
 800c5c2:	4a1f      	ldr	r2, [pc, #124]	; (800c640 <create_name+0x120>)
 800c5c4:	5cd3      	ldrb	r3, [r2, r3]
 800c5c6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c5c8:	7ffb      	ldrb	r3, [r7, #31]
 800c5ca:	4619      	mov	r1, r3
 800c5cc:	481d      	ldr	r0, [pc, #116]	; (800c644 <create_name+0x124>)
 800c5ce:	f7ff f815 	bl	800b5fc <chk_chr>
 800c5d2:	4603      	mov	r3, r0
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d001      	beq.n	800c5dc <create_name+0xbc>
 800c5d8:	2306      	movs	r3, #6
 800c5da:	e02c      	b.n	800c636 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c5dc:	7ffb      	ldrb	r3, [r7, #31]
 800c5de:	2b60      	cmp	r3, #96	; 0x60
 800c5e0:	d905      	bls.n	800c5ee <create_name+0xce>
 800c5e2:	7ffb      	ldrb	r3, [r7, #31]
 800c5e4:	2b7a      	cmp	r3, #122	; 0x7a
 800c5e6:	d802      	bhi.n	800c5ee <create_name+0xce>
 800c5e8:	7ffb      	ldrb	r3, [r7, #31]
 800c5ea:	3b20      	subs	r3, #32
 800c5ec:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	1c5a      	adds	r2, r3, #1
 800c5f2:	613a      	str	r2, [r7, #16]
 800c5f4:	68ba      	ldr	r2, [r7, #8]
 800c5f6:	4413      	add	r3, r2
 800c5f8:	7ffa      	ldrb	r2, [r7, #31]
 800c5fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c5fc:	e7a6      	b.n	800c54c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c5fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	441a      	add	r2, r3
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <create_name+0xf4>
 800c610:	2306      	movs	r3, #6
 800c612:	e010      	b.n	800c636 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c614:	68bb      	ldr	r3, [r7, #8]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2be5      	cmp	r3, #229	; 0xe5
 800c61a:	d102      	bne.n	800c622 <create_name+0x102>
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	2205      	movs	r2, #5
 800c620:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c622:	7ffb      	ldrb	r3, [r7, #31]
 800c624:	2b20      	cmp	r3, #32
 800c626:	d801      	bhi.n	800c62c <create_name+0x10c>
 800c628:	2204      	movs	r2, #4
 800c62a:	e000      	b.n	800c62e <create_name+0x10e>
 800c62c:	2200      	movs	r2, #0
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	330b      	adds	r3, #11
 800c632:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c634:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c636:	4618      	mov	r0, r3
 800c638:	3720      	adds	r7, #32
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	0800e38c 	.word	0x0800e38c
 800c644:	0800e2b4 	.word	0x0800e2b4

0800c648 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b086      	sub	sp, #24
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c65c:	e002      	b.n	800c664 <follow_path+0x1c>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	3301      	adds	r3, #1
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b2f      	cmp	r3, #47	; 0x2f
 800c66a:	d0f8      	beq.n	800c65e <follow_path+0x16>
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	2b5c      	cmp	r3, #92	; 0x5c
 800c672:	d0f4      	beq.n	800c65e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	2200      	movs	r2, #0
 800c678:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	2b1f      	cmp	r3, #31
 800c680:	d80a      	bhi.n	800c698 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2280      	movs	r2, #128	; 0x80
 800c686:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c68a:	2100      	movs	r1, #0
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7ff fcf9 	bl	800c084 <dir_sdi>
 800c692:	4603      	mov	r3, r0
 800c694:	75fb      	strb	r3, [r7, #23]
 800c696:	e043      	b.n	800c720 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c698:	463b      	mov	r3, r7
 800c69a:	4619      	mov	r1, r3
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f7ff ff3f 	bl	800c520 <create_name>
 800c6a2:	4603      	mov	r3, r0
 800c6a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d134      	bne.n	800c716 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f7ff feaf 	bl	800c410 <dir_find>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c6bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c6be:	7dfb      	ldrb	r3, [r7, #23]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00a      	beq.n	800c6da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c6c4:	7dfb      	ldrb	r3, [r7, #23]
 800c6c6:	2b04      	cmp	r3, #4
 800c6c8:	d127      	bne.n	800c71a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d122      	bne.n	800c71a <follow_path+0xd2>
 800c6d4:	2305      	movs	r3, #5
 800c6d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c6d8:	e01f      	b.n	800c71a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6da:	7afb      	ldrb	r3, [r7, #11]
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d11c      	bne.n	800c71e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	799b      	ldrb	r3, [r3, #6]
 800c6e8:	f003 0310 	and.w	r3, r3, #16
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d102      	bne.n	800c6f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c6f0:	2305      	movs	r3, #5
 800c6f2:	75fb      	strb	r3, [r7, #23]
 800c6f4:	e014      	b.n	800c720 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	695b      	ldr	r3, [r3, #20]
 800c700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c704:	4413      	add	r3, r2
 800c706:	4619      	mov	r1, r3
 800c708:	68f8      	ldr	r0, [r7, #12]
 800c70a:	f7ff fe42 	bl	800c392 <ld_clust>
 800c70e:	4602      	mov	r2, r0
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c714:	e7c0      	b.n	800c698 <follow_path+0x50>
			if (res != FR_OK) break;
 800c716:	bf00      	nop
 800c718:	e002      	b.n	800c720 <follow_path+0xd8>
				break;
 800c71a:	bf00      	nop
 800c71c:	e000      	b.n	800c720 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c71e:	bf00      	nop
			}
		}
	}

	return res;
 800c720:	7dfb      	ldrb	r3, [r7, #23]
}
 800c722:	4618      	mov	r0, r3
 800c724:	3718      	adds	r7, #24
 800c726:	46bd      	mov	sp, r7
 800c728:	bd80      	pop	{r7, pc}

0800c72a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c72a:	b480      	push	{r7}
 800c72c:	b087      	sub	sp, #28
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c732:	f04f 33ff 	mov.w	r3, #4294967295
 800c736:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d031      	beq.n	800c7a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	617b      	str	r3, [r7, #20]
 800c746:	e002      	b.n	800c74e <get_ldnumber+0x24>
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	3301      	adds	r3, #1
 800c74c:	617b      	str	r3, [r7, #20]
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	2b20      	cmp	r3, #32
 800c754:	d903      	bls.n	800c75e <get_ldnumber+0x34>
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	2b3a      	cmp	r3, #58	; 0x3a
 800c75c:	d1f4      	bne.n	800c748 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	2b3a      	cmp	r3, #58	; 0x3a
 800c764:	d11c      	bne.n	800c7a0 <get_ldnumber+0x76>
			tp = *path;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	60fa      	str	r2, [r7, #12]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	3b30      	subs	r3, #48	; 0x30
 800c776:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	2b09      	cmp	r3, #9
 800c77c:	d80e      	bhi.n	800c79c <get_ldnumber+0x72>
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	429a      	cmp	r2, r3
 800c784:	d10a      	bne.n	800c79c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d107      	bne.n	800c79c <get_ldnumber+0x72>
					vol = (int)i;
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c790:	697b      	ldr	r3, [r7, #20]
 800c792:	3301      	adds	r3, #1
 800c794:	617b      	str	r3, [r7, #20]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	697a      	ldr	r2, [r7, #20]
 800c79a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	e002      	b.n	800c7a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c7a4:	693b      	ldr	r3, [r7, #16]
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	371c      	adds	r7, #28
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	70da      	strb	r2, [r3, #3]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f7ff f8e0 	bl	800b994 <move_window>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d001      	beq.n	800c7de <check_fs+0x2a>
 800c7da:	2304      	movs	r3, #4
 800c7dc:	e038      	b.n	800c850 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	3330      	adds	r3, #48	; 0x30
 800c7e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fe fe24 	bl	800b434 <ld_word>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	461a      	mov	r2, r3
 800c7f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d001      	beq.n	800c7fc <check_fs+0x48>
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	e029      	b.n	800c850 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c802:	2be9      	cmp	r3, #233	; 0xe9
 800c804:	d009      	beq.n	800c81a <check_fs+0x66>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c80c:	2beb      	cmp	r3, #235	; 0xeb
 800c80e:	d11e      	bne.n	800c84e <check_fs+0x9a>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c816:	2b90      	cmp	r3, #144	; 0x90
 800c818:	d119      	bne.n	800c84e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3330      	adds	r3, #48	; 0x30
 800c81e:	3336      	adds	r3, #54	; 0x36
 800c820:	4618      	mov	r0, r3
 800c822:	f7fe fe1f 	bl	800b464 <ld_dword>
 800c826:	4603      	mov	r3, r0
 800c828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c82c:	4a0a      	ldr	r2, [pc, #40]	; (800c858 <check_fs+0xa4>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d101      	bne.n	800c836 <check_fs+0x82>
 800c832:	2300      	movs	r3, #0
 800c834:	e00c      	b.n	800c850 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	3330      	adds	r3, #48	; 0x30
 800c83a:	3352      	adds	r3, #82	; 0x52
 800c83c:	4618      	mov	r0, r3
 800c83e:	f7fe fe11 	bl	800b464 <ld_dword>
 800c842:	4602      	mov	r2, r0
 800c844:	4b05      	ldr	r3, [pc, #20]	; (800c85c <check_fs+0xa8>)
 800c846:	429a      	cmp	r2, r3
 800c848:	d101      	bne.n	800c84e <check_fs+0x9a>
 800c84a:	2300      	movs	r3, #0
 800c84c:	e000      	b.n	800c850 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c84e:	2302      	movs	r3, #2
}
 800c850:	4618      	mov	r0, r3
 800c852:	3708      	adds	r7, #8
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}
 800c858:	00544146 	.word	0x00544146
 800c85c:	33544146 	.word	0x33544146

0800c860 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b096      	sub	sp, #88	; 0x58
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	4613      	mov	r3, r2
 800c86c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	2200      	movs	r2, #0
 800c872:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7ff ff58 	bl	800c72a <get_ldnumber>
 800c87a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c87c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	da01      	bge.n	800c886 <find_volume+0x26>
 800c882:	230b      	movs	r3, #11
 800c884:	e22e      	b.n	800cce4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c886:	4aa8      	ldr	r2, [pc, #672]	; (800cb28 <find_volume+0x2c8>)
 800c888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c88a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c88e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <find_volume+0x3a>
 800c896:	230c      	movs	r3, #12
 800c898:	e224      	b.n	800cce4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c89e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c8a0:	79fb      	ldrb	r3, [r7, #7]
 800c8a2:	f023 0301 	bic.w	r3, r3, #1
 800c8a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d01a      	beq.n	800c8e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c8b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b2:	785b      	ldrb	r3, [r3, #1]
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	f7fe fd1f 	bl	800b2f8 <disk_status>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c8c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10c      	bne.n	800c8e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c8cc:	79fb      	ldrb	r3, [r7, #7]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d007      	beq.n	800c8e2 <find_volume+0x82>
 800c8d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c8d6:	f003 0304 	and.w	r3, r3, #4
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c8de:	230a      	movs	r3, #10
 800c8e0:	e200      	b.n	800cce4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e1fe      	b.n	800cce4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f6:	785b      	ldrb	r3, [r3, #1]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe fd17 	bl	800b32c <disk_initialize>
 800c8fe:	4603      	mov	r3, r0
 800c900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c908:	f003 0301 	and.w	r3, r3, #1
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d001      	beq.n	800c914 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c910:	2303      	movs	r3, #3
 800c912:	e1e7      	b.n	800cce4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c914:	79fb      	ldrb	r3, [r7, #7]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d007      	beq.n	800c92a <find_volume+0xca>
 800c91a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c91e:	f003 0304 	and.w	r3, r3, #4
 800c922:	2b00      	cmp	r3, #0
 800c924:	d001      	beq.n	800c92a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c926:	230a      	movs	r3, #10
 800c928:	e1dc      	b.n	800cce4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c92a:	2300      	movs	r3, #0
 800c92c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c92e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c932:	f7ff ff3f 	bl	800c7b4 <check_fs>
 800c936:	4603      	mov	r3, r0
 800c938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c93c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c940:	2b02      	cmp	r3, #2
 800c942:	d14b      	bne.n	800c9dc <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c944:	2300      	movs	r3, #0
 800c946:	643b      	str	r3, [r7, #64]	; 0x40
 800c948:	e01f      	b.n	800c98a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c952:	011b      	lsls	r3, r3, #4
 800c954:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c958:	4413      	add	r3, r2
 800c95a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c95e:	3304      	adds	r3, #4
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <find_volume+0x114>
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	3308      	adds	r3, #8
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7fe fd7a 	bl	800b464 <ld_dword>
 800c970:	4602      	mov	r2, r0
 800c972:	e000      	b.n	800c976 <find_volume+0x116>
 800c974:	2200      	movs	r2, #0
 800c976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c97e:	440b      	add	r3, r1
 800c980:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c986:	3301      	adds	r3, #1
 800c988:	643b      	str	r3, [r7, #64]	; 0x40
 800c98a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c98c:	2b03      	cmp	r3, #3
 800c98e:	d9dc      	bls.n	800c94a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c990:	2300      	movs	r3, #0
 800c992:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c996:	2b00      	cmp	r3, #0
 800c998:	d002      	beq.n	800c9a0 <find_volume+0x140>
 800c99a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c99c:	3b01      	subs	r3, #1
 800c99e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c9a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c9a8:	4413      	add	r3, r2
 800c9aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c9ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c9b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <find_volume+0x162>
 800c9b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c9b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c9ba:	f7ff fefb 	bl	800c7b4 <check_fs>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	e000      	b.n	800c9c4 <find_volume+0x164>
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c9c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d905      	bls.n	800c9dc <find_volume+0x17c>
 800c9d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	643b      	str	r3, [r7, #64]	; 0x40
 800c9d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9d8:	2b03      	cmp	r3, #3
 800c9da:	d9e1      	bls.n	800c9a0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c9dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9e0:	2b04      	cmp	r3, #4
 800c9e2:	d101      	bne.n	800c9e8 <find_volume+0x188>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e17d      	b.n	800cce4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c9e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d901      	bls.n	800c9f4 <find_volume+0x194>
 800c9f0:	230d      	movs	r3, #13
 800c9f2:	e177      	b.n	800cce4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f6:	3330      	adds	r3, #48	; 0x30
 800c9f8:	330b      	adds	r3, #11
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7fe fd1a 	bl	800b434 <ld_word>
 800ca00:	4603      	mov	r3, r0
 800ca02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca06:	d001      	beq.n	800ca0c <find_volume+0x1ac>
 800ca08:	230d      	movs	r3, #13
 800ca0a:	e16b      	b.n	800cce4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ca0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0e:	3330      	adds	r3, #48	; 0x30
 800ca10:	3316      	adds	r3, #22
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7fe fd0e 	bl	800b434 <ld_word>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ca1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <find_volume+0x1d0>
 800ca22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca24:	3330      	adds	r3, #48	; 0x30
 800ca26:	3324      	adds	r3, #36	; 0x24
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7fe fd1b 	bl	800b464 <ld_dword>
 800ca2e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ca30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ca34:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800ca3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ca40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca42:	789b      	ldrb	r3, [r3, #2]
 800ca44:	2b01      	cmp	r3, #1
 800ca46:	d005      	beq.n	800ca54 <find_volume+0x1f4>
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	789b      	ldrb	r3, [r3, #2]
 800ca4c:	2b02      	cmp	r3, #2
 800ca4e:	d001      	beq.n	800ca54 <find_volume+0x1f4>
 800ca50:	230d      	movs	r3, #13
 800ca52:	e147      	b.n	800cce4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	789b      	ldrb	r3, [r3, #2]
 800ca58:	461a      	mov	r2, r3
 800ca5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca5c:	fb02 f303 	mul.w	r3, r2, r3
 800ca60:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ca62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca70:	895b      	ldrh	r3, [r3, #10]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d008      	beq.n	800ca88 <find_volume+0x228>
 800ca76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca78:	895b      	ldrh	r3, [r3, #10]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7e:	895b      	ldrh	r3, [r3, #10]
 800ca80:	3b01      	subs	r3, #1
 800ca82:	4013      	ands	r3, r2
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <find_volume+0x22c>
 800ca88:	230d      	movs	r3, #13
 800ca8a:	e12b      	b.n	800cce4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ca8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8e:	3330      	adds	r3, #48	; 0x30
 800ca90:	3311      	adds	r3, #17
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7fe fcce 	bl	800b434 <ld_word>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa2:	891b      	ldrh	r3, [r3, #8]
 800caa4:	f003 030f 	and.w	r3, r3, #15
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <find_volume+0x252>
 800caae:	230d      	movs	r3, #13
 800cab0:	e118      	b.n	800cce4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cab4:	3330      	adds	r3, #48	; 0x30
 800cab6:	3313      	adds	r3, #19
 800cab8:	4618      	mov	r0, r3
 800caba:	f7fe fcbb 	bl	800b434 <ld_word>
 800cabe:	4603      	mov	r3, r0
 800cac0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cac2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <find_volume+0x276>
 800cac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caca:	3330      	adds	r3, #48	; 0x30
 800cacc:	3320      	adds	r3, #32
 800cace:	4618      	mov	r0, r3
 800cad0:	f7fe fcc8 	bl	800b464 <ld_dword>
 800cad4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad8:	3330      	adds	r3, #48	; 0x30
 800cada:	330e      	adds	r3, #14
 800cadc:	4618      	mov	r0, r3
 800cade:	f7fe fca9 	bl	800b434 <ld_word>
 800cae2:	4603      	mov	r3, r0
 800cae4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cae6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d101      	bne.n	800caf0 <find_volume+0x290>
 800caec:	230d      	movs	r3, #13
 800caee:	e0f9      	b.n	800cce4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800caf0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800caf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800caf4:	4413      	add	r3, r2
 800caf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800caf8:	8912      	ldrh	r2, [r2, #8]
 800cafa:	0912      	lsrs	r2, r2, #4
 800cafc:	b292      	uxth	r2, r2
 800cafe:	4413      	add	r3, r2
 800cb00:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cb02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d201      	bcs.n	800cb0e <find_volume+0x2ae>
 800cb0a:	230d      	movs	r3, #13
 800cb0c:	e0ea      	b.n	800cce4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cb0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	1ad3      	subs	r3, r2, r3
 800cb14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb16:	8952      	ldrh	r2, [r2, #10]
 800cb18:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb1c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d103      	bne.n	800cb2c <find_volume+0x2cc>
 800cb24:	230d      	movs	r3, #13
 800cb26:	e0dd      	b.n	800cce4 <find_volume+0x484>
 800cb28:	20001350 	.word	0x20001350
		fmt = FS_FAT32;
 800cb2c:	2303      	movs	r3, #3
 800cb2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d802      	bhi.n	800cb42 <find_volume+0x2e2>
 800cb3c:	2302      	movs	r3, #2
 800cb3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb44:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d802      	bhi.n	800cb52 <find_volume+0x2f2>
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb54:	1c9a      	adds	r2, r3, #2
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb5e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cb60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cb62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb64:	441a      	add	r2, r3
 800cb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb68:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cb6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6e:	441a      	add	r2, r3
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cb74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cb78:	2b03      	cmp	r3, #3
 800cb7a:	d11e      	bne.n	800cbba <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7e:	3330      	adds	r3, #48	; 0x30
 800cb80:	332a      	adds	r3, #42	; 0x2a
 800cb82:	4618      	mov	r0, r3
 800cb84:	f7fe fc56 	bl	800b434 <ld_word>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <find_volume+0x332>
 800cb8e:	230d      	movs	r3, #13
 800cb90:	e0a8      	b.n	800cce4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	891b      	ldrh	r3, [r3, #8]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <find_volume+0x33e>
 800cb9a:	230d      	movs	r3, #13
 800cb9c:	e0a2      	b.n	800cce4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cb9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba0:	3330      	adds	r3, #48	; 0x30
 800cba2:	332c      	adds	r3, #44	; 0x2c
 800cba4:	4618      	mov	r0, r3
 800cba6:	f7fe fc5d 	bl	800b464 <ld_dword>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbae:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	647b      	str	r3, [r7, #68]	; 0x44
 800cbb8:	e01f      	b.n	800cbfa <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbbc:	891b      	ldrh	r3, [r3, #8]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d101      	bne.n	800cbc6 <find_volume+0x366>
 800cbc2:	230d      	movs	r3, #13
 800cbc4:	e08e      	b.n	800cce4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cbc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc8:	6a1a      	ldr	r2, [r3, #32]
 800cbca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbcc:	441a      	add	r2, r3
 800cbce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbd0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cbd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d103      	bne.n	800cbe2 <find_volume+0x382>
 800cbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbdc:	695b      	ldr	r3, [r3, #20]
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	e00a      	b.n	800cbf8 <find_volume+0x398>
 800cbe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe4:	695a      	ldr	r2, [r3, #20]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	005b      	lsls	r3, r3, #1
 800cbea:	4413      	add	r3, r2
 800cbec:	085a      	lsrs	r2, r3, #1
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	f003 0301 	and.w	r3, r3, #1
 800cbf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cbf8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cbfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfc:	699a      	ldr	r2, [r3, #24]
 800cbfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc00:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc04:	0a5b      	lsrs	r3, r3, #9
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d201      	bcs.n	800cc0e <find_volume+0x3ae>
 800cc0a:	230d      	movs	r3, #13
 800cc0c:	e06a      	b.n	800cce4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cc0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc10:	f04f 32ff 	mov.w	r2, #4294967295
 800cc14:	611a      	str	r2, [r3, #16]
 800cc16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc18:	691a      	ldr	r2, [r3, #16]
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc1c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	2280      	movs	r2, #128	; 0x80
 800cc22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cc24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc28:	2b03      	cmp	r3, #3
 800cc2a:	d149      	bne.n	800ccc0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2e:	3330      	adds	r3, #48	; 0x30
 800cc30:	3330      	adds	r3, #48	; 0x30
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fbfe 	bl	800b434 <ld_word>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d140      	bne.n	800ccc0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cc3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc40:	3301      	adds	r3, #1
 800cc42:	4619      	mov	r1, r3
 800cc44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc46:	f7fe fea5 	bl	800b994 <move_window>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d137      	bne.n	800ccc0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	2200      	movs	r2, #0
 800cc54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc58:	3330      	adds	r3, #48	; 0x30
 800cc5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fe fbe8 	bl	800b434 <ld_word>
 800cc64:	4603      	mov	r3, r0
 800cc66:	461a      	mov	r2, r3
 800cc68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d127      	bne.n	800ccc0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	3330      	adds	r3, #48	; 0x30
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fe fbf5 	bl	800b464 <ld_dword>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	4b1b      	ldr	r3, [pc, #108]	; (800ccec <find_volume+0x48c>)
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d11e      	bne.n	800ccc0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cc82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc84:	3330      	adds	r3, #48	; 0x30
 800cc86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe fbea 	bl	800b464 <ld_dword>
 800cc90:	4602      	mov	r2, r0
 800cc92:	4b17      	ldr	r3, [pc, #92]	; (800ccf0 <find_volume+0x490>)
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d113      	bne.n	800ccc0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9a:	3330      	adds	r3, #48	; 0x30
 800cc9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7fe fbdf 	bl	800b464 <ld_dword>
 800cca6:	4602      	mov	r2, r0
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ccac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccae:	3330      	adds	r3, #48	; 0x30
 800ccb0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f7fe fbd5 	bl	800b464 <ld_dword>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbe:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ccc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ccc6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ccc8:	4b0a      	ldr	r3, [pc, #40]	; (800ccf4 <find_volume+0x494>)
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	3301      	adds	r3, #1
 800ccce:	b29a      	uxth	r2, r3
 800ccd0:	4b08      	ldr	r3, [pc, #32]	; (800ccf4 <find_volume+0x494>)
 800ccd2:	801a      	strh	r2, [r3, #0]
 800ccd4:	4b07      	ldr	r3, [pc, #28]	; (800ccf4 <find_volume+0x494>)
 800ccd6:	881a      	ldrh	r2, [r3, #0]
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ccdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ccde:	f7fe fdf1 	bl	800b8c4 <clear_lock>
#endif
	return FR_OK;
 800cce2:	2300      	movs	r3, #0
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3758      	adds	r7, #88	; 0x58
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}
 800ccec:	41615252 	.word	0x41615252
 800ccf0:	61417272 	.word	0x61417272
 800ccf4:	20001354 	.word	0x20001354

0800ccf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b084      	sub	sp, #16
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cd02:	2309      	movs	r3, #9
 800cd04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d01c      	beq.n	800cd46 <validate+0x4e>
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d018      	beq.n	800cd46 <validate+0x4e>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d013      	beq.n	800cd46 <validate+0x4e>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	889a      	ldrh	r2, [r3, #4]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	88db      	ldrh	r3, [r3, #6]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d10c      	bne.n	800cd46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7fe fae0 	bl	800b2f8 <disk_status>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <validate+0x4e>
			res = FR_OK;
 800cd42:	2300      	movs	r3, #0
 800cd44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d102      	bne.n	800cd52 <validate+0x5a>
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	e000      	b.n	800cd54 <validate+0x5c>
 800cd52:	2300      	movs	r3, #0
 800cd54:	683a      	ldr	r2, [r7, #0]
 800cd56:	6013      	str	r3, [r2, #0]
	return res;
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
	...

0800cd64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b088      	sub	sp, #32
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cd76:	f107 0310 	add.w	r3, r7, #16
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	f7ff fcd5 	bl	800c72a <get_ldnumber>
 800cd80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	da01      	bge.n	800cd8c <f_mount+0x28>
 800cd88:	230b      	movs	r3, #11
 800cd8a:	e02b      	b.n	800cde4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cd8c:	4a17      	ldr	r2, [pc, #92]	; (800cdec <f_mount+0x88>)
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d005      	beq.n	800cda8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cd9c:	69b8      	ldr	r0, [r7, #24]
 800cd9e:	f7fe fd91 	bl	800b8c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cda2:	69bb      	ldr	r3, [r7, #24]
 800cda4:	2200      	movs	r2, #0
 800cda6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cdb4:	68fa      	ldr	r2, [r7, #12]
 800cdb6:	490d      	ldr	r1, [pc, #52]	; (800cdec <f_mount+0x88>)
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d002      	beq.n	800cdca <f_mount+0x66>
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b01      	cmp	r3, #1
 800cdc8:	d001      	beq.n	800cdce <f_mount+0x6a>
 800cdca:	2300      	movs	r3, #0
 800cdcc:	e00a      	b.n	800cde4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cdce:	f107 010c 	add.w	r1, r7, #12
 800cdd2:	f107 0308 	add.w	r3, r7, #8
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff fd41 	bl	800c860 <find_volume>
 800cdde:	4603      	mov	r3, r0
 800cde0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cde2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3720      	adds	r7, #32
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20001350 	.word	0x20001350

0800cdf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b098      	sub	sp, #96	; 0x60
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	60b9      	str	r1, [r7, #8]
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <f_open+0x18>
 800ce04:	2309      	movs	r3, #9
 800ce06:	e1ad      	b.n	800d164 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ce08:	79fb      	ldrb	r3, [r7, #7]
 800ce0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ce10:	79fa      	ldrb	r2, [r7, #7]
 800ce12:	f107 0110 	add.w	r1, r7, #16
 800ce16:	f107 0308 	add.w	r3, r7, #8
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7ff fd20 	bl	800c860 <find_volume>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ce26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	f040 8191 	bne.w	800d152 <f_open+0x362>
		dj.obj.fs = fs;
 800ce30:	693b      	ldr	r3, [r7, #16]
 800ce32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	f107 0314 	add.w	r3, r7, #20
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f7ff fc03 	bl	800c648 <follow_path>
 800ce42:	4603      	mov	r3, r0
 800ce44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ce48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d11a      	bne.n	800ce86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ce50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce54:	b25b      	sxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	da03      	bge.n	800ce62 <f_open+0x72>
				res = FR_INVALID_NAME;
 800ce5a:	2306      	movs	r3, #6
 800ce5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ce60:	e011      	b.n	800ce86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ce62:	79fb      	ldrb	r3, [r7, #7]
 800ce64:	f023 0301 	bic.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	bf14      	ite	ne
 800ce6c:	2301      	movne	r3, #1
 800ce6e:	2300      	moveq	r3, #0
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	461a      	mov	r2, r3
 800ce74:	f107 0314 	add.w	r3, r7, #20
 800ce78:	4611      	mov	r1, r2
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f7fe fbda 	bl	800b634 <chk_lock>
 800ce80:	4603      	mov	r3, r0
 800ce82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ce86:	79fb      	ldrb	r3, [r7, #7]
 800ce88:	f003 031c 	and.w	r3, r3, #28
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d07f      	beq.n	800cf90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ce90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d017      	beq.n	800cec8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ce98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ce9c:	2b04      	cmp	r3, #4
 800ce9e:	d10e      	bne.n	800cebe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cea0:	f7fe fc24 	bl	800b6ec <enq_lock>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d006      	beq.n	800ceb8 <f_open+0xc8>
 800ceaa:	f107 0314 	add.w	r3, r7, #20
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff fb03 	bl	800c4ba <dir_register>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	e000      	b.n	800ceba <f_open+0xca>
 800ceb8:	2312      	movs	r3, #18
 800ceba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cebe:	79fb      	ldrb	r3, [r7, #7]
 800cec0:	f043 0308 	orr.w	r3, r3, #8
 800cec4:	71fb      	strb	r3, [r7, #7]
 800cec6:	e010      	b.n	800ceea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cec8:	7ebb      	ldrb	r3, [r7, #26]
 800ceca:	f003 0311 	and.w	r3, r3, #17
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <f_open+0xea>
					res = FR_DENIED;
 800ced2:	2307      	movs	r3, #7
 800ced4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ced8:	e007      	b.n	800ceea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	f003 0304 	and.w	r3, r3, #4
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <f_open+0xfa>
 800cee4:	2308      	movs	r3, #8
 800cee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ceea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d168      	bne.n	800cfc4 <f_open+0x1d4>
 800cef2:	79fb      	ldrb	r3, [r7, #7]
 800cef4:	f003 0308 	and.w	r3, r3, #8
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d063      	beq.n	800cfc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cefc:	f7fb fa04 	bl	8008308 <get_fattime>
 800cf00:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf04:	330e      	adds	r3, #14
 800cf06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f7fe fae9 	bl	800b4e0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cf0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf10:	3316      	adds	r3, #22
 800cf12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf14:	4618      	mov	r0, r3
 800cf16:	f7fe fae3 	bl	800b4e0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800cf1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf1c:	330b      	adds	r3, #11
 800cf1e:	2220      	movs	r2, #32
 800cf20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf26:	4611      	mov	r1, r2
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff fa32 	bl	800c392 <ld_clust>
 800cf2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800cf30:	693b      	ldr	r3, [r7, #16]
 800cf32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf34:	2200      	movs	r2, #0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7ff fa4a 	bl	800c3d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800cf3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3e:	331c      	adds	r3, #28
 800cf40:	2100      	movs	r1, #0
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7fe facc 	bl	800b4e0 <st_dword>
					fs->wflag = 1;
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800cf4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d037      	beq.n	800cfc4 <f_open+0x1d4>
						dw = fs->winsect;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf58:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800cf5a:	f107 0314 	add.w	r3, r7, #20
 800cf5e:	2200      	movs	r2, #0
 800cf60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fe ff5d 	bl	800be22 <remove_chain>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800cf6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d126      	bne.n	800cfc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800cf76:	693b      	ldr	r3, [r7, #16]
 800cf78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f7fe fd0a 	bl	800b994 <move_window>
 800cf80:	4603      	mov	r3, r0
 800cf82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf8a:	3a01      	subs	r2, #1
 800cf8c:	60da      	str	r2, [r3, #12]
 800cf8e:	e019      	b.n	800cfc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800cf90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d115      	bne.n	800cfc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800cf98:	7ebb      	ldrb	r3, [r7, #26]
 800cf9a:	f003 0310 	and.w	r3, r3, #16
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <f_open+0x1ba>
					res = FR_NO_FILE;
 800cfa2:	2304      	movs	r3, #4
 800cfa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cfa8:	e00c      	b.n	800cfc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	f003 0302 	and.w	r3, r3, #2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d007      	beq.n	800cfc4 <f_open+0x1d4>
 800cfb4:	7ebb      	ldrb	r3, [r7, #26]
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d002      	beq.n	800cfc4 <f_open+0x1d4>
						res = FR_DENIED;
 800cfbe:	2307      	movs	r3, #7
 800cfc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800cfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d128      	bne.n	800d01e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800cfcc:	79fb      	ldrb	r3, [r7, #7]
 800cfce:	f003 0308 	and.w	r3, r3, #8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800cfde:	693b      	ldr	r3, [r7, #16]
 800cfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800cfe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cfec:	79fb      	ldrb	r3, [r7, #7]
 800cfee:	f023 0301 	bic.w	r3, r3, #1
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	bf14      	ite	ne
 800cff6:	2301      	movne	r3, #1
 800cff8:	2300      	moveq	r3, #0
 800cffa:	b2db      	uxtb	r3, r3
 800cffc:	461a      	mov	r2, r3
 800cffe:	f107 0314 	add.w	r3, r7, #20
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f7fe fb93 	bl	800b730 <inc_lock>
 800d00a:	4602      	mov	r2, r0
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d102      	bne.n	800d01e <f_open+0x22e>
 800d018:	2302      	movs	r3, #2
 800d01a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d01e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d022:	2b00      	cmp	r3, #0
 800d024:	f040 8095 	bne.w	800d152 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d028:	693b      	ldr	r3, [r7, #16]
 800d02a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d02c:	4611      	mov	r1, r2
 800d02e:	4618      	mov	r0, r3
 800d030:	f7ff f9af 	bl	800c392 <ld_clust>
 800d034:	4602      	mov	r2, r0
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03c:	331c      	adds	r3, #28
 800d03e:	4618      	mov	r0, r3
 800d040:	f7fe fa10 	bl	800b464 <ld_dword>
 800d044:	4602      	mov	r2, r0
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2200      	movs	r2, #0
 800d04e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	88da      	ldrh	r2, [r3, #6]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	79fa      	ldrb	r2, [r7, #7]
 800d062:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	2200      	movs	r2, #0
 800d06e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2200      	movs	r2, #0
 800d074:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	3330      	adds	r3, #48	; 0x30
 800d07a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d07e:	2100      	movs	r1, #0
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe fa7a 	bl	800b57a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d086:	79fb      	ldrb	r3, [r7, #7]
 800d088:	f003 0320 	and.w	r3, r3, #32
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d060      	beq.n	800d152 <f_open+0x362>
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	68db      	ldr	r3, [r3, #12]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d05c      	beq.n	800d152 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	68da      	ldr	r2, [r3, #12]
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	025b      	lsls	r3, r3, #9
 800d0a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	68db      	ldr	r3, [r3, #12]
 800d0b2:	657b      	str	r3, [r7, #84]	; 0x54
 800d0b4:	e016      	b.n	800d0e4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fe fd25 	bl	800bb0a <get_fat>
 800d0c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d0c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0c4:	2b01      	cmp	r3, #1
 800d0c6:	d802      	bhi.n	800d0ce <f_open+0x2de>
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d0ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d4:	d102      	bne.n	800d0dc <f_open+0x2ec>
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d0dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	657b      	str	r3, [r7, #84]	; 0x54
 800d0e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d103      	bne.n	800d0f4 <f_open+0x304>
 800d0ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d0ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d8e0      	bhi.n	800d0b6 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d0f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d127      	bne.n	800d152 <f_open+0x362>
 800d102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d022      	beq.n	800d152 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fcdb 	bl	800bacc <clust2sect>
 800d116:	6478      	str	r0, [r7, #68]	; 0x44
 800d118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d103      	bne.n	800d126 <f_open+0x336>
						res = FR_INT_ERR;
 800d11e:	2302      	movs	r3, #2
 800d120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d124:	e015      	b.n	800d152 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d128:	0a5a      	lsrs	r2, r3, #9
 800d12a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d12c:	441a      	add	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	7858      	ldrb	r0, [r3, #1]
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6a1a      	ldr	r2, [r3, #32]
 800d140:	2301      	movs	r3, #1
 800d142:	f7fe f919 	bl	800b378 <disk_read>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d002      	beq.n	800d152 <f_open+0x362>
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d156:	2b00      	cmp	r3, #0
 800d158:	d002      	beq.n	800d160 <f_open+0x370>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d164:	4618      	mov	r0, r3
 800d166:	3760      	adds	r7, #96	; 0x60
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08e      	sub	sp, #56	; 0x38
 800d170:	af00      	add	r7, sp, #0
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	607a      	str	r2, [r7, #4]
 800d178:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	2200      	movs	r2, #0
 800d182:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f107 0214 	add.w	r2, r7, #20
 800d18a:	4611      	mov	r1, r2
 800d18c:	4618      	mov	r0, r3
 800d18e:	f7ff fdb3 	bl	800ccf8 <validate>
 800d192:	4603      	mov	r3, r0
 800d194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d107      	bne.n	800d1b0 <f_read+0x44>
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	7d5b      	ldrb	r3, [r3, #21]
 800d1a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <f_read+0x4a>
 800d1b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1b4:	e115      	b.n	800d3e2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	7d1b      	ldrb	r3, [r3, #20]
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d101      	bne.n	800d1c6 <f_read+0x5a>
 800d1c2:	2307      	movs	r3, #7
 800d1c4:	e10d      	b.n	800d3e2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	68da      	ldr	r2, [r3, #12]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	1ad3      	subs	r3, r2, r3
 800d1d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	f240 80fe 	bls.w	800d3d8 <f_read+0x26c>
 800d1dc:	6a3b      	ldr	r3, [r7, #32]
 800d1de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d1e0:	e0fa      	b.n	800d3d8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	699b      	ldr	r3, [r3, #24]
 800d1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f040 80c6 	bne.w	800d37c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	699b      	ldr	r3, [r3, #24]
 800d1f4:	0a5b      	lsrs	r3, r3, #9
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	8952      	ldrh	r2, [r2, #10]
 800d1fa:	3a01      	subs	r2, #1
 800d1fc:	4013      	ands	r3, r2
 800d1fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d12f      	bne.n	800d266 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	699b      	ldr	r3, [r3, #24]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d103      	bne.n	800d216 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	633b      	str	r3, [r7, #48]	; 0x30
 800d214:	e013      	b.n	800d23e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d007      	beq.n	800d22e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	699b      	ldr	r3, [r3, #24]
 800d222:	4619      	mov	r1, r3
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f7fe fef9 	bl	800c01c <clmt_clust>
 800d22a:	6338      	str	r0, [r7, #48]	; 0x30
 800d22c:	e007      	b.n	800d23e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	69db      	ldr	r3, [r3, #28]
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f7fe fc67 	bl	800bb0a <get_fat>
 800d23c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d240:	2b01      	cmp	r3, #1
 800d242:	d804      	bhi.n	800d24e <f_read+0xe2>
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	2202      	movs	r2, #2
 800d248:	755a      	strb	r2, [r3, #21]
 800d24a:	2302      	movs	r3, #2
 800d24c:	e0c9      	b.n	800d3e2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d254:	d104      	bne.n	800d260 <f_read+0xf4>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2201      	movs	r2, #1
 800d25a:	755a      	strb	r2, [r3, #21]
 800d25c:	2301      	movs	r3, #1
 800d25e:	e0c0      	b.n	800d3e2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d264:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	69db      	ldr	r3, [r3, #28]
 800d26c:	4619      	mov	r1, r3
 800d26e:	4610      	mov	r0, r2
 800d270:	f7fe fc2c 	bl	800bacc <clust2sect>
 800d274:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d276:	69bb      	ldr	r3, [r7, #24]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d104      	bne.n	800d286 <f_read+0x11a>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2202      	movs	r2, #2
 800d280:	755a      	strb	r2, [r3, #21]
 800d282:	2302      	movs	r3, #2
 800d284:	e0ad      	b.n	800d3e2 <f_read+0x276>
			sect += csect;
 800d286:	69ba      	ldr	r2, [r7, #24]
 800d288:	69fb      	ldr	r3, [r7, #28]
 800d28a:	4413      	add	r3, r2
 800d28c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	0a5b      	lsrs	r3, r3, #9
 800d292:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	2b00      	cmp	r3, #0
 800d298:	d039      	beq.n	800d30e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d29a:	69fa      	ldr	r2, [r7, #28]
 800d29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d29e:	4413      	add	r3, r2
 800d2a0:	697a      	ldr	r2, [r7, #20]
 800d2a2:	8952      	ldrh	r2, [r2, #10]
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d905      	bls.n	800d2b4 <f_read+0x148>
					cc = fs->csize - csect;
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	895b      	ldrh	r3, [r3, #10]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	7858      	ldrb	r0, [r3, #1]
 800d2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ba:	69ba      	ldr	r2, [r7, #24]
 800d2bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d2be:	f7fe f85b 	bl	800b378 <disk_read>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d004      	beq.n	800d2d2 <f_read+0x166>
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	755a      	strb	r2, [r3, #21]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e087      	b.n	800d3e2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	7d1b      	ldrb	r3, [r3, #20]
 800d2d6:	b25b      	sxtb	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	da14      	bge.n	800d306 <f_read+0x19a>
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6a1a      	ldr	r2, [r3, #32]
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d90d      	bls.n	800d306 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6a1a      	ldr	r2, [r3, #32]
 800d2ee:	69bb      	ldr	r3, [r7, #24]
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	025b      	lsls	r3, r3, #9
 800d2f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2f6:	18d0      	adds	r0, r2, r3
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	3330      	adds	r3, #48	; 0x30
 800d2fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d300:	4619      	mov	r1, r3
 800d302:	f7fe f919 	bl	800b538 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800d306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d308:	025b      	lsls	r3, r3, #9
 800d30a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800d30c:	e050      	b.n	800d3b0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	6a1b      	ldr	r3, [r3, #32]
 800d312:	69ba      	ldr	r2, [r7, #24]
 800d314:	429a      	cmp	r2, r3
 800d316:	d02e      	beq.n	800d376 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	7d1b      	ldrb	r3, [r3, #20]
 800d31c:	b25b      	sxtb	r3, r3
 800d31e:	2b00      	cmp	r3, #0
 800d320:	da18      	bge.n	800d354 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	7858      	ldrb	r0, [r3, #1]
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	6a1a      	ldr	r2, [r3, #32]
 800d330:	2301      	movs	r3, #1
 800d332:	f7fe f841 	bl	800b3b8 <disk_write>
 800d336:	4603      	mov	r3, r0
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d004      	beq.n	800d346 <f_read+0x1da>
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2201      	movs	r2, #1
 800d340:	755a      	strb	r2, [r3, #21]
 800d342:	2301      	movs	r3, #1
 800d344:	e04d      	b.n	800d3e2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	7d1b      	ldrb	r3, [r3, #20]
 800d34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	7858      	ldrb	r0, [r3, #1]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d35e:	2301      	movs	r3, #1
 800d360:	69ba      	ldr	r2, [r7, #24]
 800d362:	f7fe f809 	bl	800b378 <disk_read>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d004      	beq.n	800d376 <f_read+0x20a>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2201      	movs	r2, #1
 800d370:	755a      	strb	r2, [r3, #21]
 800d372:	2301      	movs	r3, #1
 800d374:	e035      	b.n	800d3e2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	69ba      	ldr	r2, [r7, #24]
 800d37a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	699b      	ldr	r3, [r3, #24]
 800d380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d384:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d388:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800d38a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	429a      	cmp	r2, r3
 800d390:	d901      	bls.n	800d396 <f_read+0x22a>
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	699b      	ldr	r3, [r3, #24]
 800d3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a4:	4413      	add	r3, r2
 800d3a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3ac:	f7fe f8c4 	bl	800b538 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800d3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b4:	4413      	add	r3, r2
 800d3b6:	627b      	str	r3, [r7, #36]	; 0x24
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	699a      	ldr	r2, [r3, #24]
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	441a      	add	r2, r3
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	619a      	str	r2, [r3, #24]
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	441a      	add	r2, r3
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	601a      	str	r2, [r3, #0]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d4:	1ad3      	subs	r3, r2, r3
 800d3d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f47f af01 	bne.w	800d1e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3738      	adds	r7, #56	; 0x38
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b086      	sub	sp, #24
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f107 0208 	add.w	r2, r7, #8
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7ff fc7c 	bl	800ccf8 <validate>
 800d400:	4603      	mov	r3, r0
 800d402:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d404:	7dfb      	ldrb	r3, [r7, #23]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d168      	bne.n	800d4dc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	7d1b      	ldrb	r3, [r3, #20]
 800d40e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d412:	2b00      	cmp	r3, #0
 800d414:	d062      	beq.n	800d4dc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7d1b      	ldrb	r3, [r3, #20]
 800d41a:	b25b      	sxtb	r3, r3
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	da15      	bge.n	800d44c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	7858      	ldrb	r0, [r3, #1]
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1a      	ldr	r2, [r3, #32]
 800d42e:	2301      	movs	r3, #1
 800d430:	f7fd ffc2 	bl	800b3b8 <disk_write>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <f_sync+0x54>
 800d43a:	2301      	movs	r3, #1
 800d43c:	e04f      	b.n	800d4de <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	7d1b      	ldrb	r3, [r3, #20]
 800d442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d446:	b2da      	uxtb	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d44c:	f7fa ff5c 	bl	8008308 <get_fattime>
 800d450:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d452:	68ba      	ldr	r2, [r7, #8]
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d458:	4619      	mov	r1, r3
 800d45a:	4610      	mov	r0, r2
 800d45c:	f7fe fa9a 	bl	800b994 <move_window>
 800d460:	4603      	mov	r3, r0
 800d462:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d464:	7dfb      	ldrb	r3, [r7, #23]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d138      	bne.n	800d4dc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	330b      	adds	r3, #11
 800d474:	781a      	ldrb	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	330b      	adds	r3, #11
 800d47a:	f042 0220 	orr.w	r2, r2, #32
 800d47e:	b2d2      	uxtb	r2, r2
 800d480:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6818      	ldr	r0, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	461a      	mov	r2, r3
 800d48c:	68f9      	ldr	r1, [r7, #12]
 800d48e:	f7fe ff9f 	bl	800c3d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f103 021c 	add.w	r2, r3, #28
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	4619      	mov	r1, r3
 800d49e:	4610      	mov	r0, r2
 800d4a0:	f7fe f81e 	bl	800b4e0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	3316      	adds	r3, #22
 800d4a8:	6939      	ldr	r1, [r7, #16]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe f818 	bl	800b4e0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	3312      	adds	r3, #18
 800d4b4:	2100      	movs	r1, #0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fd fff7 	bl	800b4aa <st_word>
					fs->wflag = 1;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7fe fa93 	bl	800b9f0 <sync_fs>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	7d1b      	ldrb	r3, [r3, #20]
 800d4d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4d6:	b2da      	uxtb	r2, r3
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3718      	adds	r7, #24
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}

0800d4e6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d4e6:	b580      	push	{r7, lr}
 800d4e8:	b084      	sub	sp, #16
 800d4ea:	af00      	add	r7, sp, #0
 800d4ec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff ff7b 	bl	800d3ea <f_sync>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d4f8:	7bfb      	ldrb	r3, [r7, #15]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d118      	bne.n	800d530 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f107 0208 	add.w	r2, r7, #8
 800d504:	4611      	mov	r1, r2
 800d506:	4618      	mov	r0, r3
 800d508:	f7ff fbf6 	bl	800ccf8 <validate>
 800d50c:	4603      	mov	r3, r0
 800d50e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d510:	7bfb      	ldrb	r3, [r7, #15]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d10c      	bne.n	800d530 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe f996 	bl	800b84c <dec_lock>
 800d520:	4603      	mov	r3, r0
 800d522:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d102      	bne.n	800d530 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d530:	7bfb      	ldrb	r3, [r7, #15]
}
 800d532:	4618      	mov	r0, r3
 800d534:	3710      	adds	r7, #16
 800d536:	46bd      	mov	sp, r7
 800d538:	bd80      	pop	{r7, pc}

0800d53a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800d53a:	b580      	push	{r7, lr}
 800d53c:	b090      	sub	sp, #64	; 0x40
 800d53e:	af00      	add	r7, sp, #0
 800d540:	6078      	str	r0, [r7, #4]
 800d542:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f107 0208 	add.w	r2, r7, #8
 800d54a:	4611      	mov	r1, r2
 800d54c:	4618      	mov	r0, r3
 800d54e:	f7ff fbd3 	bl	800ccf8 <validate>
 800d552:	4603      	mov	r3, r0
 800d554:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800d558:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d103      	bne.n	800d568 <f_lseek+0x2e>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	7d5b      	ldrb	r3, [r3, #21]
 800d564:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800d568:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <f_lseek+0x3c>
 800d570:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d574:	e1e6      	b.n	800d944 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 80d1 	beq.w	800d722 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d586:	d15a      	bne.n	800d63e <f_lseek+0x104>
			tbl = fp->cltbl;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800d58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d590:	1d1a      	adds	r2, r3, #4
 800d592:	627a      	str	r2, [r7, #36]	; 0x24
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	617b      	str	r3, [r7, #20]
 800d598:	2302      	movs	r3, #2
 800d59a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	689b      	ldr	r3, [r3, #8]
 800d5a0:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800d5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d03a      	beq.n	800d61e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5aa:	613b      	str	r3, [r7, #16]
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b2:	3302      	adds	r3, #2
 800d5b4:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5b8:	60fb      	str	r3, [r7, #12]
 800d5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5bc:	3301      	adds	r3, #1
 800d5be:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe faa0 	bl	800bb0a <get_fat>
 800d5ca:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d804      	bhi.n	800d5dc <f_lseek+0xa2>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2202      	movs	r2, #2
 800d5d6:	755a      	strb	r2, [r3, #21]
 800d5d8:	2302      	movs	r3, #2
 800d5da:	e1b3      	b.n	800d944 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d5dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e2:	d104      	bne.n	800d5ee <f_lseek+0xb4>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2201      	movs	r2, #1
 800d5e8:	755a      	strb	r2, [r3, #21]
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	e1aa      	b.n	800d944 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d0de      	beq.n	800d5b6 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800d5f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	429a      	cmp	r2, r3
 800d5fe:	d809      	bhi.n	800d614 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800d600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d602:	1d1a      	adds	r2, r3, #4
 800d604:	627a      	str	r2, [r7, #36]	; 0x24
 800d606:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d608:	601a      	str	r2, [r3, #0]
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	1d1a      	adds	r2, r3, #4
 800d60e:	627a      	str	r2, [r7, #36]	; 0x24
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	695b      	ldr	r3, [r3, #20]
 800d618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d3c4      	bcc.n	800d5a8 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d624:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800d626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d628:	697b      	ldr	r3, [r7, #20]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d803      	bhi.n	800d636 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800d62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d630:	2200      	movs	r2, #0
 800d632:	601a      	str	r2, [r3, #0]
 800d634:	e184      	b.n	800d940 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800d636:	2311      	movs	r3, #17
 800d638:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d63c:	e180      	b.n	800d940 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	68db      	ldr	r3, [r3, #12]
 800d642:	683a      	ldr	r2, [r7, #0]
 800d644:	429a      	cmp	r2, r3
 800d646:	d902      	bls.n	800d64e <f_lseek+0x114>
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	f000 8172 	beq.w	800d940 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	3b01      	subs	r3, #1
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f7fe fcda 	bl	800c01c <clmt_clust>
 800d668:	4602      	mov	r2, r0
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	69db      	ldr	r3, [r3, #28]
 800d674:	4619      	mov	r1, r3
 800d676:	4610      	mov	r0, r2
 800d678:	f7fe fa28 	bl	800bacc <clust2sect>
 800d67c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d104      	bne.n	800d68e <f_lseek+0x154>
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2202      	movs	r2, #2
 800d688:	755a      	strb	r2, [r3, #21]
 800d68a:	2302      	movs	r3, #2
 800d68c:	e15a      	b.n	800d944 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	3b01      	subs	r3, #1
 800d692:	0a5b      	lsrs	r3, r3, #9
 800d694:	68ba      	ldr	r2, [r7, #8]
 800d696:	8952      	ldrh	r2, [r2, #10]
 800d698:	3a01      	subs	r2, #1
 800d69a:	4013      	ands	r3, r2
 800d69c:	69ba      	ldr	r2, [r7, #24]
 800d69e:	4413      	add	r3, r2
 800d6a0:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	699b      	ldr	r3, [r3, #24]
 800d6a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	f000 8148 	beq.w	800d940 <f_lseek+0x406>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6a1b      	ldr	r3, [r3, #32]
 800d6b4:	69ba      	ldr	r2, [r7, #24]
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	f000 8142 	beq.w	800d940 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	7d1b      	ldrb	r3, [r3, #20]
 800d6c0:	b25b      	sxtb	r3, r3
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	da18      	bge.n	800d6f8 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	7858      	ldrb	r0, [r3, #1]
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6a1a      	ldr	r2, [r3, #32]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	f7fd fe6f 	bl	800b3b8 <disk_write>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d004      	beq.n	800d6ea <f_lseek+0x1b0>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	755a      	strb	r2, [r3, #21]
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e12c      	b.n	800d944 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	7d1b      	ldrb	r3, [r3, #20]
 800d6ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	7858      	ldrb	r0, [r3, #1]
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d702:	2301      	movs	r3, #1
 800d704:	69ba      	ldr	r2, [r7, #24]
 800d706:	f7fd fe37 	bl	800b378 <disk_read>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d004      	beq.n	800d71a <f_lseek+0x1e0>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	755a      	strb	r2, [r3, #21]
 800d716:	2301      	movs	r3, #1
 800d718:	e114      	b.n	800d944 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	69ba      	ldr	r2, [r7, #24]
 800d71e:	621a      	str	r2, [r3, #32]
 800d720:	e10e      	b.n	800d940 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	683a      	ldr	r2, [r7, #0]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d908      	bls.n	800d73e <f_lseek+0x204>
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	7d1b      	ldrb	r3, [r3, #20]
 800d730:	f003 0302 	and.w	r3, r3, #2
 800d734:	2b00      	cmp	r3, #0
 800d736:	d102      	bne.n	800d73e <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	68db      	ldr	r3, [r3, #12]
 800d73c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d744:	2300      	movs	r3, #0
 800d746:	637b      	str	r3, [r7, #52]	; 0x34
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d74c:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f000 80a7 	beq.w	800d8a4 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	895b      	ldrh	r3, [r3, #10]
 800d75a:	025b      	lsls	r3, r3, #9
 800d75c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d75e:	6a3b      	ldr	r3, [r7, #32]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d01b      	beq.n	800d79c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	1e5a      	subs	r2, r3, #1
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	fbb2 f2f3 	udiv	r2, r2, r3
 800d76e:	6a3b      	ldr	r3, [r7, #32]
 800d770:	1e59      	subs	r1, r3, #1
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d778:	429a      	cmp	r2, r3
 800d77a:	d30f      	bcc.n	800d79c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d77c:	6a3b      	ldr	r3, [r7, #32]
 800d77e:	1e5a      	subs	r2, r3, #1
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	425b      	negs	r3, r3
 800d784:	401a      	ands	r2, r3
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	683a      	ldr	r2, [r7, #0]
 800d790:	1ad3      	subs	r3, r2, r3
 800d792:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	69db      	ldr	r3, [r3, #28]
 800d798:	63bb      	str	r3, [r7, #56]	; 0x38
 800d79a:	e022      	b.n	800d7e2 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d119      	bne.n	800d7dc <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2100      	movs	r1, #0
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fe fb9d 	bl	800beec <create_chain>
 800d7b2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d104      	bne.n	800d7c4 <f_lseek+0x28a>
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2202      	movs	r2, #2
 800d7be:	755a      	strb	r2, [r3, #21]
 800d7c0:	2302      	movs	r3, #2
 800d7c2:	e0bf      	b.n	800d944 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ca:	d104      	bne.n	800d7d6 <f_lseek+0x29c>
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	755a      	strb	r2, [r3, #21]
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e0b6      	b.n	800d944 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7da:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d7e0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d05d      	beq.n	800d8a4 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d7e8:	e03a      	b.n	800d860 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	603b      	str	r3, [r7, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	699a      	ldr	r2, [r3, #24]
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	441a      	add	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	7d1b      	ldrb	r3, [r3, #20]
 800d802:	f003 0302 	and.w	r3, r3, #2
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00b      	beq.n	800d822 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fe fb6c 	bl	800beec <create_chain>
 800d814:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d108      	bne.n	800d82e <f_lseek+0x2f4>
							ofs = 0; break;
 800d81c:	2300      	movs	r3, #0
 800d81e:	603b      	str	r3, [r7, #0]
 800d820:	e022      	b.n	800d868 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d826:	4618      	mov	r0, r3
 800d828:	f7fe f96f 	bl	800bb0a <get_fat>
 800d82c:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d82e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d834:	d104      	bne.n	800d840 <f_lseek+0x306>
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	755a      	strb	r2, [r3, #21]
 800d83c:	2301      	movs	r3, #1
 800d83e:	e081      	b.n	800d944 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d842:	2b01      	cmp	r3, #1
 800d844:	d904      	bls.n	800d850 <f_lseek+0x316>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	695b      	ldr	r3, [r3, #20]
 800d84a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d84c:	429a      	cmp	r2, r3
 800d84e:	d304      	bcc.n	800d85a <f_lseek+0x320>
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2202      	movs	r2, #2
 800d854:	755a      	strb	r2, [r3, #21]
 800d856:	2302      	movs	r3, #2
 800d858:	e074      	b.n	800d944 <f_lseek+0x40a>
					fp->clust = clst;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d85e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d860:	683a      	ldr	r2, [r7, #0]
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	429a      	cmp	r2, r3
 800d866:	d8c0      	bhi.n	800d7ea <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699a      	ldr	r2, [r3, #24]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	441a      	add	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d012      	beq.n	800d8a4 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d882:	4618      	mov	r0, r3
 800d884:	f7fe f922 	bl	800bacc <clust2sect>
 800d888:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d104      	bne.n	800d89a <f_lseek+0x360>
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2202      	movs	r2, #2
 800d894:	755a      	strb	r2, [r3, #21]
 800d896:	2302      	movs	r3, #2
 800d898:	e054      	b.n	800d944 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	0a5b      	lsrs	r3, r3, #9
 800d89e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8a0:	4413      	add	r3, r2
 800d8a2:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	699a      	ldr	r2, [r3, #24]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d90a      	bls.n	800d8c6 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	699a      	ldr	r2, [r3, #24]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	7d1b      	ldrb	r3, [r3, #20]
 800d8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8c0:	b2da      	uxtb	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d036      	beq.n	800d940 <f_lseek+0x406>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a1b      	ldr	r3, [r3, #32]
 800d8d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	d031      	beq.n	800d940 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	7d1b      	ldrb	r3, [r3, #20]
 800d8e0:	b25b      	sxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	da18      	bge.n	800d918 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	7858      	ldrb	r0, [r3, #1]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a1a      	ldr	r2, [r3, #32]
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	f7fd fd5f 	bl	800b3b8 <disk_write>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d004      	beq.n	800d90a <f_lseek+0x3d0>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2201      	movs	r2, #1
 800d904:	755a      	strb	r2, [r3, #21]
 800d906:	2301      	movs	r3, #1
 800d908:	e01c      	b.n	800d944 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	7d1b      	ldrb	r3, [r3, #20]
 800d90e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d912:	b2da      	uxtb	r2, r3
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d918:	68bb      	ldr	r3, [r7, #8]
 800d91a:	7858      	ldrb	r0, [r3, #1]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d922:	2301      	movs	r3, #1
 800d924:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d926:	f7fd fd27 	bl	800b378 <disk_read>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d004      	beq.n	800d93a <f_lseek+0x400>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2201      	movs	r2, #1
 800d934:	755a      	strb	r2, [r3, #21]
 800d936:	2301      	movs	r3, #1
 800d938:	e004      	b.n	800d944 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d93e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d940:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d944:	4618      	mov	r0, r3
 800d946:	3740      	adds	r7, #64	; 0x40
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b087      	sub	sp, #28
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	4613      	mov	r3, r2
 800d958:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d95a:	2301      	movs	r3, #1
 800d95c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d95e:	2300      	movs	r3, #0
 800d960:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d962:	4b1f      	ldr	r3, [pc, #124]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d964:	7a5b      	ldrb	r3, [r3, #9]
 800d966:	b2db      	uxtb	r3, r3
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d131      	bne.n	800d9d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d96c:	4b1c      	ldr	r3, [pc, #112]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d96e:	7a5b      	ldrb	r3, [r3, #9]
 800d970:	b2db      	uxtb	r3, r3
 800d972:	461a      	mov	r2, r3
 800d974:	4b1a      	ldr	r3, [pc, #104]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d976:	2100      	movs	r1, #0
 800d978:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d97a:	4b19      	ldr	r3, [pc, #100]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d97c:	7a5b      	ldrb	r3, [r3, #9]
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	4a17      	ldr	r2, [pc, #92]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d982:	009b      	lsls	r3, r3, #2
 800d984:	4413      	add	r3, r2
 800d986:	68fa      	ldr	r2, [r7, #12]
 800d988:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d98a:	4b15      	ldr	r3, [pc, #84]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d98c:	7a5b      	ldrb	r3, [r3, #9]
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	461a      	mov	r2, r3
 800d992:	4b13      	ldr	r3, [pc, #76]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d994:	4413      	add	r3, r2
 800d996:	79fa      	ldrb	r2, [r7, #7]
 800d998:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d99a:	4b11      	ldr	r3, [pc, #68]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d99c:	7a5b      	ldrb	r3, [r3, #9]
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	1c5a      	adds	r2, r3, #1
 800d9a2:	b2d1      	uxtb	r1, r2
 800d9a4:	4a0e      	ldr	r2, [pc, #56]	; (800d9e0 <FATFS_LinkDriverEx+0x94>)
 800d9a6:	7251      	strb	r1, [r2, #9]
 800d9a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9aa:	7dbb      	ldrb	r3, [r7, #22]
 800d9ac:	3330      	adds	r3, #48	; 0x30
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	223a      	movs	r2, #58	; 0x3a
 800d9ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	3302      	adds	r3, #2
 800d9c0:	222f      	movs	r2, #47	; 0x2f
 800d9c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	3303      	adds	r3, #3
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	371c      	adds	r7, #28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop
 800d9e0:	20001378 	.word	0x20001378

0800d9e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff ffaa 	bl	800d94c <FATFS_LinkDriverEx>
 800d9f8:	4603      	mov	r3, r0
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	3708      	adds	r7, #8
 800d9fe:	46bd      	mov	sp, r7
 800da00:	bd80      	pop	{r7, pc}
	...

0800da04 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800da04:	b580      	push	{r7, lr}
 800da06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800da08:	2201      	movs	r2, #1
 800da0a:	490e      	ldr	r1, [pc, #56]	; (800da44 <MX_USB_HOST_Init+0x40>)
 800da0c:	480e      	ldr	r0, [pc, #56]	; (800da48 <MX_USB_HOST_Init+0x44>)
 800da0e:	f7fc f919 	bl	8009c44 <USBH_Init>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	d001      	beq.n	800da1c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800da18:	f7f3 fc14 	bl	8001244 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800da1c:	490b      	ldr	r1, [pc, #44]	; (800da4c <MX_USB_HOST_Init+0x48>)
 800da1e:	480a      	ldr	r0, [pc, #40]	; (800da48 <MX_USB_HOST_Init+0x44>)
 800da20:	f7fc f99e 	bl	8009d60 <USBH_RegisterClass>
 800da24:	4603      	mov	r3, r0
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800da2a:	f7f3 fc0b 	bl	8001244 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800da2e:	4806      	ldr	r0, [pc, #24]	; (800da48 <MX_USB_HOST_Init+0x44>)
 800da30:	f7fc fa22 	bl	8009e78 <USBH_Start>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	d001      	beq.n	800da3e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800da3a:	f7f3 fc03 	bl	8001244 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800da3e:	bf00      	nop
 800da40:	bd80      	pop	{r7, pc}
 800da42:	bf00      	nop
 800da44:	0800da65 	.word	0x0800da65
 800da48:	20001a0c 	.word	0x20001a0c
 800da4c:	2000000c 	.word	0x2000000c

0800da50 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800da54:	4802      	ldr	r0, [pc, #8]	; (800da60 <MX_USB_HOST_Process+0x10>)
 800da56:	f7fc fa1f 	bl	8009e98 <USBH_Process>
}
 800da5a:	bf00      	nop
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	20001a0c 	.word	0x20001a0c

0800da64 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
 800da6c:	460b      	mov	r3, r1
 800da6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800da70:	78fb      	ldrb	r3, [r7, #3]
 800da72:	3b01      	subs	r3, #1
 800da74:	2b04      	cmp	r3, #4
 800da76:	d819      	bhi.n	800daac <USBH_UserProcess+0x48>
 800da78:	a201      	add	r2, pc, #4	; (adr r2, 800da80 <USBH_UserProcess+0x1c>)
 800da7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da7e:	bf00      	nop
 800da80:	0800daad 	.word	0x0800daad
 800da84:	0800da9d 	.word	0x0800da9d
 800da88:	0800daad 	.word	0x0800daad
 800da8c:	0800daa5 	.word	0x0800daa5
 800da90:	0800da95 	.word	0x0800da95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800da94:	4b09      	ldr	r3, [pc, #36]	; (800dabc <USBH_UserProcess+0x58>)
 800da96:	2203      	movs	r2, #3
 800da98:	701a      	strb	r2, [r3, #0]
  break;
 800da9a:	e008      	b.n	800daae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800da9c:	4b07      	ldr	r3, [pc, #28]	; (800dabc <USBH_UserProcess+0x58>)
 800da9e:	2202      	movs	r2, #2
 800daa0:	701a      	strb	r2, [r3, #0]
  break;
 800daa2:	e004      	b.n	800daae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800daa4:	4b05      	ldr	r3, [pc, #20]	; (800dabc <USBH_UserProcess+0x58>)
 800daa6:	2201      	movs	r2, #1
 800daa8:	701a      	strb	r2, [r3, #0]
  break;
 800daaa:	e000      	b.n	800daae <USBH_UserProcess+0x4a>

  default:
  break;
 800daac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800daae:	bf00      	nop
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr
 800daba:	bf00      	nop
 800dabc:	20001384 	.word	0x20001384

0800dac0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b08a      	sub	sp, #40	; 0x28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800dac8:	f107 0314 	add.w	r3, r7, #20
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
 800dad0:	605a      	str	r2, [r3, #4]
 800dad2:	609a      	str	r2, [r3, #8]
 800dad4:	60da      	str	r2, [r3, #12]
 800dad6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dae0:	d147      	bne.n	800db72 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dae2:	2300      	movs	r3, #0
 800dae4:	613b      	str	r3, [r7, #16]
 800dae6:	4b25      	ldr	r3, [pc, #148]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800dae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daea:	4a24      	ldr	r2, [pc, #144]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800daec:	f043 0301 	orr.w	r3, r3, #1
 800daf0:	6313      	str	r3, [r2, #48]	; 0x30
 800daf2:	4b22      	ldr	r3, [pc, #136]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800daf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daf6:	f003 0301 	and.w	r3, r3, #1
 800dafa:	613b      	str	r3, [r7, #16]
 800dafc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800dafe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db04:	2300      	movs	r3, #0
 800db06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db08:	2300      	movs	r3, #0
 800db0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db0c:	f107 0314 	add.w	r3, r7, #20
 800db10:	4619      	mov	r1, r3
 800db12:	481b      	ldr	r0, [pc, #108]	; (800db80 <HAL_HCD_MspInit+0xc0>)
 800db14:	f7f4 fc80 	bl	8002418 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800db18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800db1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db1e:	2302      	movs	r3, #2
 800db20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db22:	2300      	movs	r3, #0
 800db24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db26:	2303      	movs	r3, #3
 800db28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db2a:	230a      	movs	r3, #10
 800db2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db2e:	f107 0314 	add.w	r3, r7, #20
 800db32:	4619      	mov	r1, r3
 800db34:	4812      	ldr	r0, [pc, #72]	; (800db80 <HAL_HCD_MspInit+0xc0>)
 800db36:	f7f4 fc6f 	bl	8002418 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db3a:	4b10      	ldr	r3, [pc, #64]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800db3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db3e:	4a0f      	ldr	r2, [pc, #60]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800db40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db44:	6353      	str	r3, [r2, #52]	; 0x34
 800db46:	2300      	movs	r3, #0
 800db48:	60fb      	str	r3, [r7, #12]
 800db4a:	4b0c      	ldr	r3, [pc, #48]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800db4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db4e:	4a0b      	ldr	r2, [pc, #44]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800db50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800db54:	6453      	str	r3, [r2, #68]	; 0x44
 800db56:	4b09      	ldr	r3, [pc, #36]	; (800db7c <HAL_HCD_MspInit+0xbc>)
 800db58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800db5e:	60fb      	str	r3, [r7, #12]
 800db60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800db62:	2200      	movs	r2, #0
 800db64:	2100      	movs	r1, #0
 800db66:	2043      	movs	r0, #67	; 0x43
 800db68:	f7f4 f8b1 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800db6c:	2043      	movs	r0, #67	; 0x43
 800db6e:	f7f4 f8ca 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800db72:	bf00      	nop
 800db74:	3728      	adds	r7, #40	; 0x28
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}
 800db7a:	bf00      	nop
 800db7c:	40023800 	.word	0x40023800
 800db80:	40020000 	.word	0x40020000

0800db84 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db92:	4618      	mov	r0, r3
 800db94:	f7fc fd53 	bl	800a63e <USBH_LL_IncTimer>
}
 800db98:	bf00      	nop
 800db9a:	3708      	adds	r7, #8
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbae:	4618      	mov	r0, r3
 800dbb0:	f7fc fd8b 	bl	800a6ca <USBH_LL_Connect>
}
 800dbb4:	bf00      	nop
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}

0800dbbc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b082      	sub	sp, #8
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f7fc fd94 	bl	800a6f8 <USBH_LL_Disconnect>
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	70fb      	strb	r3, [r7, #3]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f7fc fd45 	bl	800a692 <USBH_LL_PortEnabled>
} 
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f7fc fd45 	bl	800a6ae <USBH_LL_PortDisabled>
} 
 800dc24:	bf00      	nop
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d12a      	bne.n	800dc94 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800dc3e:	4a18      	ldr	r2, [pc, #96]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	4a15      	ldr	r2, [pc, #84]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc4a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800dc4e:	4b14      	ldr	r3, [pc, #80]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc50:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800dc54:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800dc56:	4b12      	ldr	r3, [pc, #72]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc58:	2208      	movs	r2, #8
 800dc5a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800dc5c:	4b10      	ldr	r3, [pc, #64]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc5e:	2201      	movs	r2, #1
 800dc60:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800dc62:	4b0f      	ldr	r3, [pc, #60]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800dc68:	4b0d      	ldr	r3, [pc, #52]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc6a:	2202      	movs	r2, #2
 800dc6c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800dc6e:	4b0c      	ldr	r3, [pc, #48]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc70:	2200      	movs	r2, #0
 800dc72:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800dc74:	480a      	ldr	r0, [pc, #40]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc76:	f7f4 fda6 	bl	80027c6 <HAL_HCD_Init>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d001      	beq.n	800dc84 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800dc80:	f7f3 fae0 	bl	8001244 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800dc84:	4806      	ldr	r0, [pc, #24]	; (800dca0 <USBH_LL_Init+0x74>)
 800dc86:	f7f5 f9a9 	bl	8002fdc <HAL_HCD_GetCurrentFrame>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f7fc fcc6 	bl	800a620 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	20001de4 	.word	0x20001de4

0800dca4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dcac:	2300      	movs	r3, #0
 800dcae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7f5 f916 	bl	8002eec <HAL_HCD_Start>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcc4:	7bfb      	ldrb	r3, [r7, #15]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 f990 	bl	800dfec <USBH_Get_USB_Status>
 800dccc:	4603      	mov	r3, r0
 800dcce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dcd0:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3710      	adds	r7, #16
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b084      	sub	sp, #16
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7f5 f91e 	bl	8002f32 <HAL_HCD_Stop>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f000 f975 	bl	800dfec <USBH_Get_USB_Status>
 800dd02:	4603      	mov	r3, r0
 800dd04:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3710      	adds	r7, #16
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b084      	sub	sp, #16
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd22:	4618      	mov	r0, r3
 800dd24:	f7f5 f968 	bl	8002ff8 <HAL_HCD_GetCurrentSpeed>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	2b01      	cmp	r3, #1
 800dd2c:	d007      	beq.n	800dd3e <USBH_LL_GetSpeed+0x2e>
 800dd2e:	2b01      	cmp	r3, #1
 800dd30:	d302      	bcc.n	800dd38 <USBH_LL_GetSpeed+0x28>
 800dd32:	2b02      	cmp	r3, #2
 800dd34:	d006      	beq.n	800dd44 <USBH_LL_GetSpeed+0x34>
 800dd36:	e008      	b.n	800dd4a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800dd38:	2300      	movs	r3, #0
 800dd3a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd3c:	e008      	b.n	800dd50 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	73fb      	strb	r3, [r7, #15]
    break;
 800dd42:	e005      	b.n	800dd50 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800dd44:	2302      	movs	r3, #2
 800dd46:	73fb      	strb	r3, [r7, #15]
    break;
 800dd48:	e002      	b.n	800dd50 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	73fb      	strb	r3, [r7, #15]
    break;
 800dd4e:	bf00      	nop
  }
  return  speed;
 800dd50:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b084      	sub	sp, #16
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd62:	2300      	movs	r3, #0
 800dd64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dd66:	2300      	movs	r3, #0
 800dd68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f5 f8fb 	bl	8002f6c <HAL_HCD_ResetPort>
 800dd76:	4603      	mov	r3, r0
 800dd78:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800dd7a:	7bfb      	ldrb	r3, [r7, #15]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 f935 	bl	800dfec <USBH_Get_USB_Status>
 800dd82:	4603      	mov	r3, r0
 800dd84:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800dd86:	7bbb      	ldrb	r3, [r7, #14]
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3710      	adds	r7, #16
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}

0800dd90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	460b      	mov	r3, r1
 800dd9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dda2:	78fa      	ldrb	r2, [r7, #3]
 800dda4:	4611      	mov	r1, r2
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7f5 f903 	bl	8002fb2 <HAL_HCD_HC_GetXferCount>
 800ddac:	4603      	mov	r3, r0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ddb6:	b590      	push	{r4, r7, lr}
 800ddb8:	b089      	sub	sp, #36	; 0x24
 800ddba:	af04      	add	r7, sp, #16
 800ddbc:	6078      	str	r0, [r7, #4]
 800ddbe:	4608      	mov	r0, r1
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	461a      	mov	r2, r3
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	70fb      	strb	r3, [r7, #3]
 800ddc8:	460b      	mov	r3, r1
 800ddca:	70bb      	strb	r3, [r7, #2]
 800ddcc:	4613      	mov	r3, r2
 800ddce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ddde:	787c      	ldrb	r4, [r7, #1]
 800dde0:	78ba      	ldrb	r2, [r7, #2]
 800dde2:	78f9      	ldrb	r1, [r7, #3]
 800dde4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dde6:	9302      	str	r3, [sp, #8]
 800dde8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ddec:	9301      	str	r3, [sp, #4]
 800ddee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	4623      	mov	r3, r4
 800ddf6:	f7f4 fd48 	bl	800288a <HAL_HCD_HC_Init>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ddfe:	7bfb      	ldrb	r3, [r7, #15]
 800de00:	4618      	mov	r0, r3
 800de02:	f000 f8f3 	bl	800dfec <USBH_Get_USB_Status>
 800de06:	4603      	mov	r3, r0
 800de08:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800de0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800de0c:	4618      	mov	r0, r3
 800de0e:	3714      	adds	r7, #20
 800de10:	46bd      	mov	sp, r7
 800de12:	bd90      	pop	{r4, r7, pc}

0800de14 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	460b      	mov	r3, r1
 800de1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de20:	2300      	movs	r3, #0
 800de22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de24:	2300      	movs	r3, #0
 800de26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800de2e:	78fa      	ldrb	r2, [r7, #3]
 800de30:	4611      	mov	r1, r2
 800de32:	4618      	mov	r0, r3
 800de34:	f7f4 fdc1 	bl	80029ba <HAL_HCD_HC_Halt>
 800de38:	4603      	mov	r3, r0
 800de3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800de3c:	7bfb      	ldrb	r3, [r7, #15]
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 f8d4 	bl	800dfec <USBH_Get_USB_Status>
 800de44:	4603      	mov	r3, r0
 800de46:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800de48:	7bbb      	ldrb	r3, [r7, #14]
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}

0800de52 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800de52:	b590      	push	{r4, r7, lr}
 800de54:	b089      	sub	sp, #36	; 0x24
 800de56:	af04      	add	r7, sp, #16
 800de58:	6078      	str	r0, [r7, #4]
 800de5a:	4608      	mov	r0, r1
 800de5c:	4611      	mov	r1, r2
 800de5e:	461a      	mov	r2, r3
 800de60:	4603      	mov	r3, r0
 800de62:	70fb      	strb	r3, [r7, #3]
 800de64:	460b      	mov	r3, r1
 800de66:	70bb      	strb	r3, [r7, #2]
 800de68:	4613      	mov	r3, r2
 800de6a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800de70:	2300      	movs	r3, #0
 800de72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800de7a:	787c      	ldrb	r4, [r7, #1]
 800de7c:	78ba      	ldrb	r2, [r7, #2]
 800de7e:	78f9      	ldrb	r1, [r7, #3]
 800de80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800de84:	9303      	str	r3, [sp, #12]
 800de86:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800de88:	9302      	str	r3, [sp, #8]
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	4623      	mov	r3, r4
 800de96:	f7f4 fdb3 	bl	8002a00 <HAL_HCD_HC_SubmitRequest>
 800de9a:	4603      	mov	r3, r0
 800de9c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800de9e:	7bfb      	ldrb	r3, [r7, #15]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f000 f8a3 	bl	800dfec <USBH_Get_USB_Status>
 800dea6:	4603      	mov	r3, r0
 800dea8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800deaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3714      	adds	r7, #20
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd90      	pop	{r4, r7, pc}

0800deb4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	460b      	mov	r3, r1
 800debe:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800dec6:	78fa      	ldrb	r2, [r7, #3]
 800dec8:	4611      	mov	r1, r2
 800deca:	4618      	mov	r0, r3
 800decc:	f7f5 f85c 	bl	8002f88 <HAL_HCD_HC_GetURBState>
 800ded0:	4603      	mov	r3, r0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800deec:	2b01      	cmp	r3, #1
 800deee:	d103      	bne.n	800def8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800def0:	78fb      	ldrb	r3, [r7, #3]
 800def2:	4618      	mov	r0, r3
 800def4:	f000 f8a6 	bl	800e044 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800def8:	20c8      	movs	r0, #200	; 0xc8
 800defa:	f7f3 fdeb 	bl	8001ad4 <HAL_Delay>
  return USBH_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	460b      	mov	r3, r1
 800df12:	70fb      	strb	r3, [r7, #3]
 800df14:	4613      	mov	r3, r2
 800df16:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df1e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800df20:	78fa      	ldrb	r2, [r7, #3]
 800df22:	68f9      	ldr	r1, [r7, #12]
 800df24:	4613      	mov	r3, r2
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	4413      	add	r3, r2
 800df2a:	00db      	lsls	r3, r3, #3
 800df2c:	440b      	add	r3, r1
 800df2e:	333b      	adds	r3, #59	; 0x3b
 800df30:	781b      	ldrb	r3, [r3, #0]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800df36:	78fa      	ldrb	r2, [r7, #3]
 800df38:	68f9      	ldr	r1, [r7, #12]
 800df3a:	4613      	mov	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	440b      	add	r3, r1
 800df44:	3350      	adds	r3, #80	; 0x50
 800df46:	78ba      	ldrb	r2, [r7, #2]
 800df48:	701a      	strb	r2, [r3, #0]
 800df4a:	e009      	b.n	800df60 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800df4c:	78fa      	ldrb	r2, [r7, #3]
 800df4e:	68f9      	ldr	r1, [r7, #12]
 800df50:	4613      	mov	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	00db      	lsls	r3, r3, #3
 800df58:	440b      	add	r3, r1
 800df5a:	3351      	adds	r3, #81	; 0x51
 800df5c:	78ba      	ldrb	r2, [r7, #2]
 800df5e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800df60:	2300      	movs	r3, #0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3714      	adds	r7, #20
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr

0800df6e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800df6e:	b480      	push	{r7}
 800df70:	b085      	sub	sp, #20
 800df72:	af00      	add	r7, sp, #0
 800df74:	6078      	str	r0, [r7, #4]
 800df76:	460b      	mov	r3, r1
 800df78:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800df7a:	2300      	movs	r3, #0
 800df7c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800df84:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800df86:	78fa      	ldrb	r2, [r7, #3]
 800df88:	68b9      	ldr	r1, [r7, #8]
 800df8a:	4613      	mov	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	00db      	lsls	r3, r3, #3
 800df92:	440b      	add	r3, r1
 800df94:	333b      	adds	r3, #59	; 0x3b
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d00a      	beq.n	800dfb2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800df9c:	78fa      	ldrb	r2, [r7, #3]
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	440b      	add	r3, r1
 800dfaa:	3350      	adds	r3, #80	; 0x50
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	73fb      	strb	r3, [r7, #15]
 800dfb0:	e009      	b.n	800dfc6 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800dfb2:	78fa      	ldrb	r2, [r7, #3]
 800dfb4:	68b9      	ldr	r1, [r7, #8]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	440b      	add	r3, r1
 800dfc0:	3351      	adds	r3, #81	; 0x51
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800dfc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc8:	4618      	mov	r0, r3
 800dfca:	3714      	adds	r7, #20
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr

0800dfd4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b082      	sub	sp, #8
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7f3 fd79 	bl	8001ad4 <HAL_Delay>
}
 800dfe2:	bf00      	nop
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
	...

0800dfec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800dff6:	2300      	movs	r3, #0
 800dff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dffa:	79fb      	ldrb	r3, [r7, #7]
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d817      	bhi.n	800e030 <USBH_Get_USB_Status+0x44>
 800e000:	a201      	add	r2, pc, #4	; (adr r2, 800e008 <USBH_Get_USB_Status+0x1c>)
 800e002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e006:	bf00      	nop
 800e008:	0800e019 	.word	0x0800e019
 800e00c:	0800e01f 	.word	0x0800e01f
 800e010:	0800e025 	.word	0x0800e025
 800e014:	0800e02b 	.word	0x0800e02b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
    break;
 800e01c:	e00b      	b.n	800e036 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e01e:	2302      	movs	r3, #2
 800e020:	73fb      	strb	r3, [r7, #15]
    break;
 800e022:	e008      	b.n	800e036 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e024:	2301      	movs	r3, #1
 800e026:	73fb      	strb	r3, [r7, #15]
    break;
 800e028:	e005      	b.n	800e036 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e02a:	2302      	movs	r3, #2
 800e02c:	73fb      	strb	r3, [r7, #15]
    break;
 800e02e:	e002      	b.n	800e036 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e030:	2302      	movs	r3, #2
 800e032:	73fb      	strb	r3, [r7, #15]
    break;
 800e034:	bf00      	nop
  }
  return usb_status;
 800e036:	7bfb      	ldrb	r3, [r7, #15]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3714      	adds	r7, #20
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr

0800e044 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800e044:	b580      	push	{r7, lr}
 800e046:	b084      	sub	sp, #16
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800e04e:	79fb      	ldrb	r3, [r7, #7]
 800e050:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800e052:	79fb      	ldrb	r3, [r7, #7]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d102      	bne.n	800e05e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800e058:	2301      	movs	r3, #1
 800e05a:	73fb      	strb	r3, [r7, #15]
 800e05c:	e001      	b.n	800e062 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800e05e:	2300      	movs	r3, #0
 800e060:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800e062:	7bfb      	ldrb	r3, [r7, #15]
 800e064:	461a      	mov	r2, r3
 800e066:	2101      	movs	r1, #1
 800e068:	4803      	ldr	r0, [pc, #12]	; (800e078 <MX_DriverVbusFS+0x34>)
 800e06a:	f7f4 fb6f 	bl	800274c <HAL_GPIO_WritePin>
}
 800e06e:	bf00      	nop
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	40020800 	.word	0x40020800

0800e07c <__errno>:
 800e07c:	4b01      	ldr	r3, [pc, #4]	; (800e084 <__errno+0x8>)
 800e07e:	6818      	ldr	r0, [r3, #0]
 800e080:	4770      	bx	lr
 800e082:	bf00      	nop
 800e084:	2000002c 	.word	0x2000002c

0800e088 <__libc_init_array>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	4e0d      	ldr	r6, [pc, #52]	; (800e0c0 <__libc_init_array+0x38>)
 800e08c:	4c0d      	ldr	r4, [pc, #52]	; (800e0c4 <__libc_init_array+0x3c>)
 800e08e:	1ba4      	subs	r4, r4, r6
 800e090:	10a4      	asrs	r4, r4, #2
 800e092:	2500      	movs	r5, #0
 800e094:	42a5      	cmp	r5, r4
 800e096:	d109      	bne.n	800e0ac <__libc_init_array+0x24>
 800e098:	4e0b      	ldr	r6, [pc, #44]	; (800e0c8 <__libc_init_array+0x40>)
 800e09a:	4c0c      	ldr	r4, [pc, #48]	; (800e0cc <__libc_init_array+0x44>)
 800e09c:	f000 f8f6 	bl	800e28c <_init>
 800e0a0:	1ba4      	subs	r4, r4, r6
 800e0a2:	10a4      	asrs	r4, r4, #2
 800e0a4:	2500      	movs	r5, #0
 800e0a6:	42a5      	cmp	r5, r4
 800e0a8:	d105      	bne.n	800e0b6 <__libc_init_array+0x2e>
 800e0aa:	bd70      	pop	{r4, r5, r6, pc}
 800e0ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e0b0:	4798      	blx	r3
 800e0b2:	3501      	adds	r5, #1
 800e0b4:	e7ee      	b.n	800e094 <__libc_init_array+0xc>
 800e0b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e0ba:	4798      	blx	r3
 800e0bc:	3501      	adds	r5, #1
 800e0be:	e7f2      	b.n	800e0a6 <__libc_init_array+0x1e>
 800e0c0:	0800e414 	.word	0x0800e414
 800e0c4:	0800e414 	.word	0x0800e414
 800e0c8:	0800e414 	.word	0x0800e414
 800e0cc:	0800e418 	.word	0x0800e418

0800e0d0 <malloc>:
 800e0d0:	4b02      	ldr	r3, [pc, #8]	; (800e0dc <malloc+0xc>)
 800e0d2:	4601      	mov	r1, r0
 800e0d4:	6818      	ldr	r0, [r3, #0]
 800e0d6:	f000 b86d 	b.w	800e1b4 <_malloc_r>
 800e0da:	bf00      	nop
 800e0dc:	2000002c 	.word	0x2000002c

0800e0e0 <free>:
 800e0e0:	4b02      	ldr	r3, [pc, #8]	; (800e0ec <free+0xc>)
 800e0e2:	4601      	mov	r1, r0
 800e0e4:	6818      	ldr	r0, [r3, #0]
 800e0e6:	f000 b817 	b.w	800e118 <_free_r>
 800e0ea:	bf00      	nop
 800e0ec:	2000002c 	.word	0x2000002c

0800e0f0 <memcpy>:
 800e0f0:	b510      	push	{r4, lr}
 800e0f2:	1e43      	subs	r3, r0, #1
 800e0f4:	440a      	add	r2, r1
 800e0f6:	4291      	cmp	r1, r2
 800e0f8:	d100      	bne.n	800e0fc <memcpy+0xc>
 800e0fa:	bd10      	pop	{r4, pc}
 800e0fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e100:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e104:	e7f7      	b.n	800e0f6 <memcpy+0x6>

0800e106 <memset>:
 800e106:	4402      	add	r2, r0
 800e108:	4603      	mov	r3, r0
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d100      	bne.n	800e110 <memset+0xa>
 800e10e:	4770      	bx	lr
 800e110:	f803 1b01 	strb.w	r1, [r3], #1
 800e114:	e7f9      	b.n	800e10a <memset+0x4>
	...

0800e118 <_free_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4605      	mov	r5, r0
 800e11c:	2900      	cmp	r1, #0
 800e11e:	d045      	beq.n	800e1ac <_free_r+0x94>
 800e120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e124:	1f0c      	subs	r4, r1, #4
 800e126:	2b00      	cmp	r3, #0
 800e128:	bfb8      	it	lt
 800e12a:	18e4      	addlt	r4, r4, r3
 800e12c:	f000 f8ac 	bl	800e288 <__malloc_lock>
 800e130:	4a1f      	ldr	r2, [pc, #124]	; (800e1b0 <_free_r+0x98>)
 800e132:	6813      	ldr	r3, [r2, #0]
 800e134:	4610      	mov	r0, r2
 800e136:	b933      	cbnz	r3, 800e146 <_free_r+0x2e>
 800e138:	6063      	str	r3, [r4, #4]
 800e13a:	6014      	str	r4, [r2, #0]
 800e13c:	4628      	mov	r0, r5
 800e13e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e142:	f000 b8a2 	b.w	800e28a <__malloc_unlock>
 800e146:	42a3      	cmp	r3, r4
 800e148:	d90c      	bls.n	800e164 <_free_r+0x4c>
 800e14a:	6821      	ldr	r1, [r4, #0]
 800e14c:	1862      	adds	r2, r4, r1
 800e14e:	4293      	cmp	r3, r2
 800e150:	bf04      	itt	eq
 800e152:	681a      	ldreq	r2, [r3, #0]
 800e154:	685b      	ldreq	r3, [r3, #4]
 800e156:	6063      	str	r3, [r4, #4]
 800e158:	bf04      	itt	eq
 800e15a:	1852      	addeq	r2, r2, r1
 800e15c:	6022      	streq	r2, [r4, #0]
 800e15e:	6004      	str	r4, [r0, #0]
 800e160:	e7ec      	b.n	800e13c <_free_r+0x24>
 800e162:	4613      	mov	r3, r2
 800e164:	685a      	ldr	r2, [r3, #4]
 800e166:	b10a      	cbz	r2, 800e16c <_free_r+0x54>
 800e168:	42a2      	cmp	r2, r4
 800e16a:	d9fa      	bls.n	800e162 <_free_r+0x4a>
 800e16c:	6819      	ldr	r1, [r3, #0]
 800e16e:	1858      	adds	r0, r3, r1
 800e170:	42a0      	cmp	r0, r4
 800e172:	d10b      	bne.n	800e18c <_free_r+0x74>
 800e174:	6820      	ldr	r0, [r4, #0]
 800e176:	4401      	add	r1, r0
 800e178:	1858      	adds	r0, r3, r1
 800e17a:	4282      	cmp	r2, r0
 800e17c:	6019      	str	r1, [r3, #0]
 800e17e:	d1dd      	bne.n	800e13c <_free_r+0x24>
 800e180:	6810      	ldr	r0, [r2, #0]
 800e182:	6852      	ldr	r2, [r2, #4]
 800e184:	605a      	str	r2, [r3, #4]
 800e186:	4401      	add	r1, r0
 800e188:	6019      	str	r1, [r3, #0]
 800e18a:	e7d7      	b.n	800e13c <_free_r+0x24>
 800e18c:	d902      	bls.n	800e194 <_free_r+0x7c>
 800e18e:	230c      	movs	r3, #12
 800e190:	602b      	str	r3, [r5, #0]
 800e192:	e7d3      	b.n	800e13c <_free_r+0x24>
 800e194:	6820      	ldr	r0, [r4, #0]
 800e196:	1821      	adds	r1, r4, r0
 800e198:	428a      	cmp	r2, r1
 800e19a:	bf04      	itt	eq
 800e19c:	6811      	ldreq	r1, [r2, #0]
 800e19e:	6852      	ldreq	r2, [r2, #4]
 800e1a0:	6062      	str	r2, [r4, #4]
 800e1a2:	bf04      	itt	eq
 800e1a4:	1809      	addeq	r1, r1, r0
 800e1a6:	6021      	streq	r1, [r4, #0]
 800e1a8:	605c      	str	r4, [r3, #4]
 800e1aa:	e7c7      	b.n	800e13c <_free_r+0x24>
 800e1ac:	bd38      	pop	{r3, r4, r5, pc}
 800e1ae:	bf00      	nop
 800e1b0:	20001388 	.word	0x20001388

0800e1b4 <_malloc_r>:
 800e1b4:	b570      	push	{r4, r5, r6, lr}
 800e1b6:	1ccd      	adds	r5, r1, #3
 800e1b8:	f025 0503 	bic.w	r5, r5, #3
 800e1bc:	3508      	adds	r5, #8
 800e1be:	2d0c      	cmp	r5, #12
 800e1c0:	bf38      	it	cc
 800e1c2:	250c      	movcc	r5, #12
 800e1c4:	2d00      	cmp	r5, #0
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	db01      	blt.n	800e1ce <_malloc_r+0x1a>
 800e1ca:	42a9      	cmp	r1, r5
 800e1cc:	d903      	bls.n	800e1d6 <_malloc_r+0x22>
 800e1ce:	230c      	movs	r3, #12
 800e1d0:	6033      	str	r3, [r6, #0]
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	bd70      	pop	{r4, r5, r6, pc}
 800e1d6:	f000 f857 	bl	800e288 <__malloc_lock>
 800e1da:	4a21      	ldr	r2, [pc, #132]	; (800e260 <_malloc_r+0xac>)
 800e1dc:	6814      	ldr	r4, [r2, #0]
 800e1de:	4621      	mov	r1, r4
 800e1e0:	b991      	cbnz	r1, 800e208 <_malloc_r+0x54>
 800e1e2:	4c20      	ldr	r4, [pc, #128]	; (800e264 <_malloc_r+0xb0>)
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	b91b      	cbnz	r3, 800e1f0 <_malloc_r+0x3c>
 800e1e8:	4630      	mov	r0, r6
 800e1ea:	f000 f83d 	bl	800e268 <_sbrk_r>
 800e1ee:	6020      	str	r0, [r4, #0]
 800e1f0:	4629      	mov	r1, r5
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	f000 f838 	bl	800e268 <_sbrk_r>
 800e1f8:	1c43      	adds	r3, r0, #1
 800e1fa:	d124      	bne.n	800e246 <_malloc_r+0x92>
 800e1fc:	230c      	movs	r3, #12
 800e1fe:	6033      	str	r3, [r6, #0]
 800e200:	4630      	mov	r0, r6
 800e202:	f000 f842 	bl	800e28a <__malloc_unlock>
 800e206:	e7e4      	b.n	800e1d2 <_malloc_r+0x1e>
 800e208:	680b      	ldr	r3, [r1, #0]
 800e20a:	1b5b      	subs	r3, r3, r5
 800e20c:	d418      	bmi.n	800e240 <_malloc_r+0x8c>
 800e20e:	2b0b      	cmp	r3, #11
 800e210:	d90f      	bls.n	800e232 <_malloc_r+0x7e>
 800e212:	600b      	str	r3, [r1, #0]
 800e214:	50cd      	str	r5, [r1, r3]
 800e216:	18cc      	adds	r4, r1, r3
 800e218:	4630      	mov	r0, r6
 800e21a:	f000 f836 	bl	800e28a <__malloc_unlock>
 800e21e:	f104 000b 	add.w	r0, r4, #11
 800e222:	1d23      	adds	r3, r4, #4
 800e224:	f020 0007 	bic.w	r0, r0, #7
 800e228:	1ac3      	subs	r3, r0, r3
 800e22a:	d0d3      	beq.n	800e1d4 <_malloc_r+0x20>
 800e22c:	425a      	negs	r2, r3
 800e22e:	50e2      	str	r2, [r4, r3]
 800e230:	e7d0      	b.n	800e1d4 <_malloc_r+0x20>
 800e232:	428c      	cmp	r4, r1
 800e234:	684b      	ldr	r3, [r1, #4]
 800e236:	bf16      	itet	ne
 800e238:	6063      	strne	r3, [r4, #4]
 800e23a:	6013      	streq	r3, [r2, #0]
 800e23c:	460c      	movne	r4, r1
 800e23e:	e7eb      	b.n	800e218 <_malloc_r+0x64>
 800e240:	460c      	mov	r4, r1
 800e242:	6849      	ldr	r1, [r1, #4]
 800e244:	e7cc      	b.n	800e1e0 <_malloc_r+0x2c>
 800e246:	1cc4      	adds	r4, r0, #3
 800e248:	f024 0403 	bic.w	r4, r4, #3
 800e24c:	42a0      	cmp	r0, r4
 800e24e:	d005      	beq.n	800e25c <_malloc_r+0xa8>
 800e250:	1a21      	subs	r1, r4, r0
 800e252:	4630      	mov	r0, r6
 800e254:	f000 f808 	bl	800e268 <_sbrk_r>
 800e258:	3001      	adds	r0, #1
 800e25a:	d0cf      	beq.n	800e1fc <_malloc_r+0x48>
 800e25c:	6025      	str	r5, [r4, #0]
 800e25e:	e7db      	b.n	800e218 <_malloc_r+0x64>
 800e260:	20001388 	.word	0x20001388
 800e264:	2000138c 	.word	0x2000138c

0800e268 <_sbrk_r>:
 800e268:	b538      	push	{r3, r4, r5, lr}
 800e26a:	4c06      	ldr	r4, [pc, #24]	; (800e284 <_sbrk_r+0x1c>)
 800e26c:	2300      	movs	r3, #0
 800e26e:	4605      	mov	r5, r0
 800e270:	4608      	mov	r0, r1
 800e272:	6023      	str	r3, [r4, #0]
 800e274:	f7f3 fa58 	bl	8001728 <_sbrk>
 800e278:	1c43      	adds	r3, r0, #1
 800e27a:	d102      	bne.n	800e282 <_sbrk_r+0x1a>
 800e27c:	6823      	ldr	r3, [r4, #0]
 800e27e:	b103      	cbz	r3, 800e282 <_sbrk_r+0x1a>
 800e280:	602b      	str	r3, [r5, #0]
 800e282:	bd38      	pop	{r3, r4, r5, pc}
 800e284:	200020a8 	.word	0x200020a8

0800e288 <__malloc_lock>:
 800e288:	4770      	bx	lr

0800e28a <__malloc_unlock>:
 800e28a:	4770      	bx	lr

0800e28c <_init>:
 800e28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e28e:	bf00      	nop
 800e290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e292:	bc08      	pop	{r3}
 800e294:	469e      	mov	lr, r3
 800e296:	4770      	bx	lr

0800e298 <_fini>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	bf00      	nop
 800e29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e29e:	bc08      	pop	{r3}
 800e2a0:	469e      	mov	lr, r3
 800e2a2:	4770      	bx	lr
